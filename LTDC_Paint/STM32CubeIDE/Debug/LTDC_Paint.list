
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e080  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c0  9000e320  9000e320  0001e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  90010be0  90010be0  000300c4  2**0
                  CONTENTS
  4 .ARM          00000000  90010be0  90010be0  000300c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  90010be0  90010be0  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  90010be0  90010be0  00020be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  90010be4  90010be4  00020be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  90010be8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005018  200000c8  90010cac  000300c8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200050e0  90010cac  000350e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a19f  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00028033  00000000  00000000  0005a291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000514e  00000000  00000000  000822c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  00087418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018bbee  00000000  00000000  00089450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e30  00000000  00000000  00215040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00040c1d  00000000  00000000  00216e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00257a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094cc  00000000  00000000  00257ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00260fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00260fd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000c8 	.word	0x200000c8
900002bc:	00000000 	.word	0x00000000
900002c0:	9000e308 	.word	0x9000e308

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000cc 	.word	0x200000cc
900002dc:	9000e308 	.word	0x9000e308

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90000384:	f002 ff38 	bl	900031f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000388:	480c      	ldr	r0, [pc, #48]	; (900003bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000038a:	490d      	ldr	r1, [pc, #52]	; (900003c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
9000038c:	4a0d      	ldr	r2, [pc, #52]	; (900003c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
9000038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000390:	e002      	b.n	90000398 <LoopCopyDataInit>

90000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000396:	3304      	adds	r3, #4

90000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000039c:	d3f9      	bcc.n	90000392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000039e:	4a0a      	ldr	r2, [pc, #40]	; (900003c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900003a0:	4c0a      	ldr	r4, [pc, #40]	; (900003cc <LoopFillZerobss+0x22>)
  movs r3, #0
900003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
900003a4:	e001      	b.n	900003aa <LoopFillZerobss>

900003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900003a8:	3204      	adds	r2, #4

900003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
900003ac:	d3fb      	bcc.n	900003a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900003ae:	f00c fd09 	bl	9000cdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f000 f80f 	bl	900003d4 <main>
  bx  lr
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
900003c0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
900003c4:	90010be8 	.word	0x90010be8
  ldr r2, =_sbss
900003c8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
900003cc:	200050e0 	.word	0x200050e0

900003d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
900003d4:	b580      	push	{r7, lr}
900003d6:	b082      	sub	sp, #8
900003d8:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900003da:	f000 f9e5 	bl	900007a8 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
900003de:	f000 f951 	bl	90000684 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
900003e2:	f002 ff6b 	bl	900032bc <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
900003e6:	f000 f845 	bl	90000474 <SystemClock_Config>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
900003ea:	2000      	movs	r0, #0
900003ec:	f000 ffd2 	bl	90001394 <BSP_LED_Init>

  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
900003f0:	2101      	movs	r1, #1
900003f2:	2000      	movs	r0, #0
900003f4:	f001 fc82 	bl	90001cfc <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
900003f8:	481a      	ldr	r0, [pc, #104]	; (90000464 <main+0x90>)
900003fa:	f00b fedd 	bl	9000c1b8 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
900003fe:	2000      	movs	r0, #0
90000400:	f00b ff30 	bl	9000c264 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
90000404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90000408:	f00c f852 	bl	9000c4b0 <UTIL_LCD_Clear>
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
9000040c:	1d3b      	adds	r3, r7, #4
9000040e:	4619      	mov	r1, r3
90000410:	2000      	movs	r0, #0
90000412:	f001 fe2d 	bl	90002070 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000416:	463b      	mov	r3, r7
90000418:	4619      	mov	r1, r3
9000041a:	2000      	movs	r0, #0
9000041c:	f001 fe46 	bl	900020ac <BSP_LCD_GetYSize>
  hTS->Width = x_size;
90000420:	4b11      	ldr	r3, [pc, #68]	; (90000468 <main+0x94>)
90000422:	681b      	ldr	r3, [r3, #0]
90000424:	687a      	ldr	r2, [r7, #4]
90000426:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000428:	4b0f      	ldr	r3, [pc, #60]	; (90000468 <main+0x94>)
9000042a:	681b      	ldr	r3, [r3, #0]
9000042c:	683a      	ldr	r2, [r7, #0]
9000042e:	605a      	str	r2, [r3, #4]
  hTS->Orientation = TS_SWAP_XY;
90000430:	4b0d      	ldr	r3, [pc, #52]	; (90000468 <main+0x94>)
90000432:	681b      	ldr	r3, [r3, #0]
90000434:	2208      	movs	r2, #8
90000436:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000438:	4b0b      	ldr	r3, [pc, #44]	; (90000468 <main+0x94>)
9000043a:	681b      	ldr	r3, [r3, #0]
9000043c:	2205      	movs	r2, #5
9000043e:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
90000440:	4b09      	ldr	r3, [pc, #36]	; (90000468 <main+0x94>)
90000442:	681b      	ldr	r3, [r3, #0]
90000444:	4619      	mov	r1, r3
90000446:	2000      	movs	r0, #0
90000448:	f002 fcb8 	bl	90002dbc <BSP_TS_Init>

  srand(time(NULL));   // Initialization, should only be called once.
9000044c:	2000      	movs	r0, #0
9000044e:	f00c fe77 	bl	9000d140 <time>
90000452:	4603      	mov	r3, r0
90000454:	4618      	mov	r0, r3
90000456:	f00c fdd7 	bl	9000d008 <srand>
  HAL_IncTick();
9000045a:	f002 ffa9 	bl	900033b0 <HAL_IncTick>

  /* Infinite loop */
  while (1)
  {
    sweeperMain();
9000045e:	f009 fdc3 	bl	90009fe8 <sweeperMain>
90000462:	e7fc      	b.n	9000045e <main+0x8a>
90000464:	9000e3c4 	.word	0x9000e3c4
90000468:	200000e4 	.word	0x200000e4

9000046c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
9000046c:	b480      	push	{r7}
9000046e:	af00      	add	r7, sp, #0
  while (1)
90000470:	e7fe      	b.n	90000470 <Error_Handler+0x4>
	...

90000474 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
90000474:	b580      	push	{r7, lr}
90000476:	b0ce      	sub	sp, #312	; 0x138
90000478:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
9000047a:	2300      	movs	r3, #0
9000047c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY); /* PWR set to LDO for the STM32H750B-DISCO board */
90000480:	2002      	movs	r0, #2
90000482:	f006 fb95 	bl	90006bb0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000486:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000048a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
9000048e:	2200      	movs	r2, #0
90000490:	601a      	str	r2, [r3, #0]
90000492:	4b79      	ldr	r3, [pc, #484]	; (90000678 <SystemClock_Config+0x204>)
90000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000496:	4a78      	ldr	r2, [pc, #480]	; (90000678 <SystemClock_Config+0x204>)
90000498:	f023 0301 	bic.w	r3, r3, #1
9000049c:	62d3      	str	r3, [r2, #44]	; 0x2c
9000049e:	4b76      	ldr	r3, [pc, #472]	; (90000678 <SystemClock_Config+0x204>)
900004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900004a2:	f003 0201 	and.w	r2, r3, #1
900004a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
900004aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
900004ae:	601a      	str	r2, [r3, #0]
900004b0:	4b72      	ldr	r3, [pc, #456]	; (9000067c <SystemClock_Config+0x208>)
900004b2:	699b      	ldr	r3, [r3, #24]
900004b4:	4a71      	ldr	r2, [pc, #452]	; (9000067c <SystemClock_Config+0x208>)
900004b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900004ba:	6193      	str	r3, [r2, #24]
900004bc:	4b6f      	ldr	r3, [pc, #444]	; (9000067c <SystemClock_Config+0x208>)
900004be:	699b      	ldr	r3, [r3, #24]
900004c0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
900004c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
900004c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
900004cc:	601a      	str	r2, [r3, #0]
900004ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
900004d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
900004d6:	681b      	ldr	r3, [r3, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
900004d8:	bf00      	nop
900004da:	4b68      	ldr	r3, [pc, #416]	; (9000067c <SystemClock_Config+0x208>)
900004dc:	699b      	ldr	r3, [r3, #24]
900004de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900004e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900004e6:	d1f8      	bne.n	900004da <SystemClock_Config+0x66>
  {
  }

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900004e8:	2301      	movs	r3, #1
900004ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900004f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900004f6:	2300      	movs	r3, #0
900004f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
900004fc:	2300      	movs	r3, #0
900004fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000502:	2302      	movs	r3, #2
90000504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000508:	2302      	movs	r3, #2
9000050a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
9000050e:	2305      	movs	r3, #5
90000510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000514:	23a0      	movs	r3, #160	; 0xa0
90000516:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000051a:	2300      	movs	r3, #0
9000051c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000520:	2302      	movs	r3, #2
90000522:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000526:	2302      	movs	r3, #2
90000528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000052c:	2304      	movs	r3, #4
9000052e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000532:	2300      	movs	r3, #0
90000534:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000538:	2308      	movs	r3, #8
9000053a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
9000053e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
90000542:	4618      	mov	r0, r3
90000544:	f006 fb6e 	bl	90006c24 <HAL_RCC_OscConfig>
90000548:	4603      	mov	r3, r0
9000054a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  if (ret != HAL_OK)
9000054e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
90000552:	2b00      	cmp	r3, #0
90000554:	d001      	beq.n	9000055a <SystemClock_Config+0xe6>
  {
    Error_Handler();
90000556:	f7ff ff89 	bl	9000046c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
9000055a:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000055e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000562:	2205      	movs	r2, #5
90000564:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000566:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000056a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000056e:	2260      	movs	r2, #96	; 0x60
90000570:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000572:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000057a:	2202      	movs	r2, #2
9000057c:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
9000057e:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000586:	220a      	movs	r2, #10
90000588:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
9000058a:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000058e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000592:	2212      	movs	r2, #18
90000594:	639a      	str	r2, [r3, #56]	; 0x38

  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000596:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000059a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000059e:	2200      	movs	r2, #0
900005a0:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
900005a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
900005a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
900005aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
900005ae:	63da      	str	r2, [r3, #60]	; 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
900005b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
900005b4:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
900005b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
900005bc:	f04f 0300 	mov.w	r3, #0
900005c0:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
900005c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
900005c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
900005cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
900005d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
900005d4:	f107 0308 	add.w	r3, r7, #8
900005d8:	4618      	mov	r0, r3
900005da:	f007 faf3 	bl	90007bc4 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
900005de:	233f      	movs	r3, #63	; 0x3f
900005e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900005e4:	2303      	movs	r3, #3
900005e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900005ea:	2300      	movs	r3, #0
900005ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
900005f0:	2308      	movs	r3, #8
900005f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900005f6:	2340      	movs	r3, #64	; 0x40
900005f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900005fc:	2340      	movs	r3, #64	; 0x40
900005fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
9000060a:	2340      	movs	r3, #64	; 0x40
9000060c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000610:	f507 738a 	add.w	r3, r7, #276	; 0x114
90000614:	2104      	movs	r1, #4
90000616:	4618      	mov	r0, r3
90000618:	f006 ff5e 	bl	900074d8 <HAL_RCC_ClockConfig>
9000061c:	4603      	mov	r3, r0
9000061e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  if (ret != HAL_OK)
90000622:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
90000626:	2b00      	cmp	r3, #0
90000628:	d001      	beq.n	9000062e <SystemClock_Config+0x1ba>
  {
    Error_Handler();
9000062a:	f7ff ff1f 	bl	9000046c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE();
9000062e:	4b14      	ldr	r3, [pc, #80]	; (90000680 <SystemClock_Config+0x20c>)
90000630:	681b      	ldr	r3, [r3, #0]
90000632:	4a13      	ldr	r2, [pc, #76]	; (90000680 <SystemClock_Config+0x20c>)
90000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000638:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000063a:	4b11      	ldr	r3, [pc, #68]	; (90000680 <SystemClock_Config+0x20c>)
9000063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000640:	4a0f      	ldr	r2, [pc, #60]	; (90000680 <SystemClock_Config+0x20c>)
90000642:	f043 0302 	orr.w	r3, r3, #2
90000646:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
9000064a:	4b0d      	ldr	r3, [pc, #52]	; (90000680 <SystemClock_Config+0x20c>)
9000064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000650:	f003 0202 	and.w	r2, r3, #2
90000654:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000658:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
9000065c:	601a      	str	r2, [r3, #0]
9000065e:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000662:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
90000666:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000668:	f002 fece 	bl	90003408 <HAL_EnableCompensationCell>
}
9000066c:	bf00      	nop
9000066e:	f507 779c 	add.w	r7, r7, #312	; 0x138
90000672:	46bd      	mov	sp, r7
90000674:	bd80      	pop	{r7, pc}
90000676:	bf00      	nop
90000678:	58000400 	.word	0x58000400
9000067c:	58024800 	.word	0x58024800
90000680:	58024400 	.word	0x58024400

90000684 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
90000684:	b480      	push	{r7}
90000686:	b085      	sub	sp, #20
90000688:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000068a:	4b34      	ldr	r3, [pc, #208]	; (9000075c <CPU_CACHE_Enable+0xd8>)
9000068c:	695b      	ldr	r3, [r3, #20]
9000068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90000692:	2b00      	cmp	r3, #0
90000694:	d11b      	bne.n	900006ce <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000696:	f3bf 8f4f 	dsb	sy
}
9000069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000069c:	f3bf 8f6f 	isb	sy
}
900006a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900006a2:	4b2e      	ldr	r3, [pc, #184]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006a4:	2200      	movs	r2, #0
900006a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900006aa:	f3bf 8f4f 	dsb	sy
}
900006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006b0:	f3bf 8f6f 	isb	sy
}
900006b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900006b6:	4b29      	ldr	r3, [pc, #164]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006b8:	695b      	ldr	r3, [r3, #20]
900006ba:	4a28      	ldr	r2, [pc, #160]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900006c2:	f3bf 8f4f 	dsb	sy
}
900006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006c8:	f3bf 8f6f 	isb	sy
}
900006cc:	e000      	b.n	900006d0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900006ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900006d0:	4b22      	ldr	r3, [pc, #136]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006d2:	695b      	ldr	r3, [r3, #20]
900006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900006d8:	2b00      	cmp	r3, #0
900006da:	d138      	bne.n	9000074e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900006dc:	4b1f      	ldr	r3, [pc, #124]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006de:	2200      	movs	r2, #0
900006e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900006e4:	f3bf 8f4f 	dsb	sy
}
900006e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
900006ea:	4b1c      	ldr	r3, [pc, #112]	; (9000075c <CPU_CACHE_Enable+0xd8>)
900006ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900006f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900006f2:	68fb      	ldr	r3, [r7, #12]
900006f4:	0b5b      	lsrs	r3, r3, #13
900006f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
900006fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900006fc:	68fb      	ldr	r3, [r7, #12]
900006fe:	08db      	lsrs	r3, r3, #3
90000700:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000704:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000706:	68bb      	ldr	r3, [r7, #8]
90000708:	015a      	lsls	r2, r3, #5
9000070a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
9000070e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000710:	687a      	ldr	r2, [r7, #4]
90000712:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000714:	4911      	ldr	r1, [pc, #68]	; (9000075c <CPU_CACHE_Enable+0xd8>)
90000716:	4313      	orrs	r3, r2
90000718:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	1e5a      	subs	r2, r3, #1
90000720:	607a      	str	r2, [r7, #4]
90000722:	2b00      	cmp	r3, #0
90000724:	d1ef      	bne.n	90000706 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000726:	68bb      	ldr	r3, [r7, #8]
90000728:	1e5a      	subs	r2, r3, #1
9000072a:	60ba      	str	r2, [r7, #8]
9000072c:	2b00      	cmp	r3, #0
9000072e:	d1e5      	bne.n	900006fc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000730:	f3bf 8f4f 	dsb	sy
}
90000734:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000736:	4b09      	ldr	r3, [pc, #36]	; (9000075c <CPU_CACHE_Enable+0xd8>)
90000738:	695b      	ldr	r3, [r3, #20]
9000073a:	4a08      	ldr	r2, [pc, #32]	; (9000075c <CPU_CACHE_Enable+0xd8>)
9000073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90000740:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000742:	f3bf 8f4f 	dsb	sy
}
90000746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000748:	f3bf 8f6f 	isb	sy
}
9000074c:	e000      	b.n	90000750 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000074e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000750:	bf00      	nop
90000752:	3714      	adds	r7, #20
90000754:	46bd      	mov	sp, r7
90000756:	f85d 7b04 	ldr.w	r7, [sp], #4
9000075a:	4770      	bx	lr
9000075c:	e000ed00 	.word	0xe000ed00

90000760 <MX_LTDC_ClockConfig>:
 * @note   This API is called by BSP_LCD_Init()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000760:	b580      	push	{r7, lr}
90000762:	b082      	sub	sp, #8
90000764:	af00      	add	r7, sp, #0
90000766:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000768:	490e      	ldr	r1, [pc, #56]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
9000076a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
9000076e:	f04f 0300 	mov.w	r3, #0
90000772:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000776:	4b0b      	ldr	r3, [pc, #44]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
90000778:	2205      	movs	r2, #5
9000077a:	629a      	str	r2, [r3, #40]	; 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
9000077c:	4b09      	ldr	r3, [pc, #36]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
9000077e:	22c0      	movs	r2, #192	; 0xc0
90000780:	62da      	str	r2, [r3, #44]	; 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000782:	4b08      	ldr	r3, [pc, #32]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
90000784:	2202      	movs	r2, #2
90000786:	631a      	str	r2, [r3, #48]	; 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000788:	4b06      	ldr	r3, [pc, #24]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
9000078a:	2214      	movs	r2, #20
9000078c:	635a      	str	r2, [r3, #52]	; 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
9000078e:	4b05      	ldr	r3, [pc, #20]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
90000790:	2263      	movs	r2, #99	; 0x63
90000792:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000794:	4803      	ldr	r0, [pc, #12]	; (900007a4 <MX_LTDC_ClockConfig+0x44>)
90000796:	f007 fa15 	bl	90007bc4 <HAL_RCCEx_PeriphCLKConfig>
9000079a:	4603      	mov	r3, r0
}
9000079c:	4618      	mov	r0, r3
9000079e:	3708      	adds	r7, #8
900007a0:	46bd      	mov	sp, r7
900007a2:	bd80      	pop	{r7, pc}
900007a4:	200000e8 	.word	0x200000e8

900007a8 <MPU_Config>:
 *         The Configured Region Size is 32MB because same as SDRAM size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
900007a8:	b580      	push	{r7, lr}
900007aa:	b084      	sub	sp, #16
900007ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
900007ae:	f002 ff4b 	bl	90003648 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900007b2:	2301      	movs	r3, #1
900007b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
900007b6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
900007ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900007bc:	2318      	movs	r3, #24
900007be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900007c0:	2303      	movs	r3, #3
900007c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
900007c4:	2300      	movs	r3, #0
900007c6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900007c8:	2301      	movs	r3, #1
900007ca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
900007cc:	2300      	movs	r3, #0
900007ce:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900007d0:	2301      	movs	r3, #1
900007d2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
900007d4:	2300      	movs	r3, #0
900007d6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
900007d8:	2300      	movs	r3, #0
900007da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
900007dc:	2300      	movs	r3, #0
900007de:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900007e0:	463b      	mov	r3, r7
900007e2:	4618      	mov	r0, r3
900007e4:	f002 ff68 	bl	900036b8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900007e8:	2004      	movs	r0, #4
900007ea:	f002 ff45 	bl	90003678 <HAL_MPU_Enable>
}
900007ee:	bf00      	nop
900007f0:	3710      	adds	r7, #16
900007f2:	46bd      	mov	sp, r7
900007f4:	bd80      	pop	{r7, pc}

900007f6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
900007f6:	b480      	push	{r7}
900007f8:	af00      	add	r7, sp, #0
}
900007fa:	bf00      	nop
900007fc:	46bd      	mov	sp, r7
900007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000802:	4770      	bx	lr

90000804 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
90000804:	b480      	push	{r7}
90000806:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
90000808:	e7fe      	b.n	90000808 <HardFault_Handler+0x4>

9000080a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
9000080a:	b480      	push	{r7}
9000080c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
9000080e:	e7fe      	b.n	9000080e <MemManage_Handler+0x4>

90000810 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000810:	b480      	push	{r7}
90000812:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000814:	e7fe      	b.n	90000814 <BusFault_Handler+0x4>

90000816 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000816:	b480      	push	{r7}
90000818:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
9000081a:	e7fe      	b.n	9000081a <UsageFault_Handler+0x4>

9000081c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
9000081c:	b480      	push	{r7}
9000081e:	af00      	add	r7, sp, #0
}
90000820:	bf00      	nop
90000822:	46bd      	mov	sp, r7
90000824:	f85d 7b04 	ldr.w	r7, [sp], #4
90000828:	4770      	bx	lr

9000082a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
9000082a:	b480      	push	{r7}
9000082c:	af00      	add	r7, sp, #0
}
9000082e:	bf00      	nop
90000830:	46bd      	mov	sp, r7
90000832:	f85d 7b04 	ldr.w	r7, [sp], #4
90000836:	4770      	bx	lr

90000838 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000838:	b480      	push	{r7}
9000083a:	af00      	add	r7, sp, #0
}
9000083c:	bf00      	nop
9000083e:	46bd      	mov	sp, r7
90000840:	f85d 7b04 	ldr.w	r7, [sp], #4
90000844:	4770      	bx	lr

90000846 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000846:	b580      	push	{r7, lr}
90000848:	af00      	add	r7, sp, #0
  HAL_IncTick();
9000084a:	f002 fdb1 	bl	900033b0 <HAL_IncTick>
}
9000084e:	bf00      	nop
90000850:	bd80      	pop	{r7, pc}
	...

90000854 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000854:	b580      	push	{r7, lr}
90000856:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000858:	4802      	ldr	r0, [pc, #8]	; (90000864 <OTG_FS_IRQHandler+0x10>)
9000085a:	f003 fd1a 	bl	90004292 <HAL_HCD_IRQHandler>
}
9000085e:	bf00      	nop
90000860:	bd80      	pop	{r7, pc}
90000862:	bf00      	nop
90000864:	200001ac 	.word	0x200001ac

90000868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
90000868:	b480      	push	{r7}
9000086a:	af00      	add	r7, sp, #0
  return 1;
9000086c:	2301      	movs	r3, #1
}
9000086e:	4618      	mov	r0, r3
90000870:	46bd      	mov	sp, r7
90000872:	f85d 7b04 	ldr.w	r7, [sp], #4
90000876:	4770      	bx	lr

90000878 <_kill>:

int _kill(int pid, int sig)
{
90000878:	b580      	push	{r7, lr}
9000087a:	b082      	sub	sp, #8
9000087c:	af00      	add	r7, sp, #0
9000087e:	6078      	str	r0, [r7, #4]
90000880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
90000882:	f00c fa99 	bl	9000cdb8 <__errno>
90000886:	4603      	mov	r3, r0
90000888:	2216      	movs	r2, #22
9000088a:	601a      	str	r2, [r3, #0]
  return -1;
9000088c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90000890:	4618      	mov	r0, r3
90000892:	3708      	adds	r7, #8
90000894:	46bd      	mov	sp, r7
90000896:	bd80      	pop	{r7, pc}

90000898 <_exit>:

void _exit (int status)
{
90000898:	b580      	push	{r7, lr}
9000089a:	b082      	sub	sp, #8
9000089c:	af00      	add	r7, sp, #0
9000089e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
900008a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900008a4:	6878      	ldr	r0, [r7, #4]
900008a6:	f7ff ffe7 	bl	90000878 <_kill>
  while (1) {}    /* Make sure we hang here */
900008aa:	e7fe      	b.n	900008aa <_exit+0x12>

900008ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
900008ac:	b580      	push	{r7, lr}
900008ae:	b086      	sub	sp, #24
900008b0:	af00      	add	r7, sp, #0
900008b2:	60f8      	str	r0, [r7, #12]
900008b4:	60b9      	str	r1, [r7, #8]
900008b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008b8:	2300      	movs	r3, #0
900008ba:	617b      	str	r3, [r7, #20]
900008bc:	e00a      	b.n	900008d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
900008be:	f3af 8000 	nop.w
900008c2:	4601      	mov	r1, r0
900008c4:	68bb      	ldr	r3, [r7, #8]
900008c6:	1c5a      	adds	r2, r3, #1
900008c8:	60ba      	str	r2, [r7, #8]
900008ca:	b2ca      	uxtb	r2, r1
900008cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008ce:	697b      	ldr	r3, [r7, #20]
900008d0:	3301      	adds	r3, #1
900008d2:	617b      	str	r3, [r7, #20]
900008d4:	697a      	ldr	r2, [r7, #20]
900008d6:	687b      	ldr	r3, [r7, #4]
900008d8:	429a      	cmp	r2, r3
900008da:	dbf0      	blt.n	900008be <_read+0x12>
  }

  return len;
900008dc:	687b      	ldr	r3, [r7, #4]
}
900008de:	4618      	mov	r0, r3
900008e0:	3718      	adds	r7, #24
900008e2:	46bd      	mov	sp, r7
900008e4:	bd80      	pop	{r7, pc}

900008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
900008e6:	b580      	push	{r7, lr}
900008e8:	b086      	sub	sp, #24
900008ea:	af00      	add	r7, sp, #0
900008ec:	60f8      	str	r0, [r7, #12]
900008ee:	60b9      	str	r1, [r7, #8]
900008f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008f2:	2300      	movs	r3, #0
900008f4:	617b      	str	r3, [r7, #20]
900008f6:	e009      	b.n	9000090c <_write+0x26>
  {
    __io_putchar(*ptr++);
900008f8:	68bb      	ldr	r3, [r7, #8]
900008fa:	1c5a      	adds	r2, r3, #1
900008fc:	60ba      	str	r2, [r7, #8]
900008fe:	781b      	ldrb	r3, [r3, #0]
90000900:	4618      	mov	r0, r3
90000902:	f00b fb0f 	bl	9000bf24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
90000906:	697b      	ldr	r3, [r7, #20]
90000908:	3301      	adds	r3, #1
9000090a:	617b      	str	r3, [r7, #20]
9000090c:	697a      	ldr	r2, [r7, #20]
9000090e:	687b      	ldr	r3, [r7, #4]
90000910:	429a      	cmp	r2, r3
90000912:	dbf1      	blt.n	900008f8 <_write+0x12>
  }
  return len;
90000914:	687b      	ldr	r3, [r7, #4]
}
90000916:	4618      	mov	r0, r3
90000918:	3718      	adds	r7, #24
9000091a:	46bd      	mov	sp, r7
9000091c:	bd80      	pop	{r7, pc}

9000091e <_close>:

int _close(int file)
{
9000091e:	b480      	push	{r7}
90000920:	b083      	sub	sp, #12
90000922:	af00      	add	r7, sp, #0
90000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000092a:	4618      	mov	r0, r3
9000092c:	370c      	adds	r7, #12
9000092e:	46bd      	mov	sp, r7
90000930:	f85d 7b04 	ldr.w	r7, [sp], #4
90000934:	4770      	bx	lr

90000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
90000936:	b480      	push	{r7}
90000938:	b083      	sub	sp, #12
9000093a:	af00      	add	r7, sp, #0
9000093c:	6078      	str	r0, [r7, #4]
9000093e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90000940:	683b      	ldr	r3, [r7, #0]
90000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90000946:	605a      	str	r2, [r3, #4]
  return 0;
90000948:	2300      	movs	r3, #0
}
9000094a:	4618      	mov	r0, r3
9000094c:	370c      	adds	r7, #12
9000094e:	46bd      	mov	sp, r7
90000950:	f85d 7b04 	ldr.w	r7, [sp], #4
90000954:	4770      	bx	lr

90000956 <_isatty>:

int _isatty(int file)
{
90000956:	b480      	push	{r7}
90000958:	b083      	sub	sp, #12
9000095a:	af00      	add	r7, sp, #0
9000095c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
9000095e:	2301      	movs	r3, #1
}
90000960:	4618      	mov	r0, r3
90000962:	370c      	adds	r7, #12
90000964:	46bd      	mov	sp, r7
90000966:	f85d 7b04 	ldr.w	r7, [sp], #4
9000096a:	4770      	bx	lr

9000096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
9000096c:	b480      	push	{r7}
9000096e:	b085      	sub	sp, #20
90000970:	af00      	add	r7, sp, #0
90000972:	60f8      	str	r0, [r7, #12]
90000974:	60b9      	str	r1, [r7, #8]
90000976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90000978:	2300      	movs	r3, #0
}
9000097a:	4618      	mov	r0, r3
9000097c:	3714      	adds	r7, #20
9000097e:	46bd      	mov	sp, r7
90000980:	f85d 7b04 	ldr.w	r7, [sp], #4
90000984:	4770      	bx	lr
	...

90000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000988:	b580      	push	{r7, lr}
9000098a:	b086      	sub	sp, #24
9000098c:	af00      	add	r7, sp, #0
9000098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000990:	4a14      	ldr	r2, [pc, #80]	; (900009e4 <_sbrk+0x5c>)
90000992:	4b15      	ldr	r3, [pc, #84]	; (900009e8 <_sbrk+0x60>)
90000994:	1ad3      	subs	r3, r2, r3
90000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000998:	697b      	ldr	r3, [r7, #20]
9000099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
9000099c:	4b13      	ldr	r3, [pc, #76]	; (900009ec <_sbrk+0x64>)
9000099e:	681b      	ldr	r3, [r3, #0]
900009a0:	2b00      	cmp	r3, #0
900009a2:	d102      	bne.n	900009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
900009a4:	4b11      	ldr	r3, [pc, #68]	; (900009ec <_sbrk+0x64>)
900009a6:	4a12      	ldr	r2, [pc, #72]	; (900009f0 <_sbrk+0x68>)
900009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
900009aa:	4b10      	ldr	r3, [pc, #64]	; (900009ec <_sbrk+0x64>)
900009ac:	681a      	ldr	r2, [r3, #0]
900009ae:	687b      	ldr	r3, [r7, #4]
900009b0:	4413      	add	r3, r2
900009b2:	693a      	ldr	r2, [r7, #16]
900009b4:	429a      	cmp	r2, r3
900009b6:	d207      	bcs.n	900009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
900009b8:	f00c f9fe 	bl	9000cdb8 <__errno>
900009bc:	4603      	mov	r3, r0
900009be:	220c      	movs	r2, #12
900009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900009c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900009c6:	e009      	b.n	900009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900009c8:	4b08      	ldr	r3, [pc, #32]	; (900009ec <_sbrk+0x64>)
900009ca:	681b      	ldr	r3, [r3, #0]
900009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900009ce:	4b07      	ldr	r3, [pc, #28]	; (900009ec <_sbrk+0x64>)
900009d0:	681a      	ldr	r2, [r3, #0]
900009d2:	687b      	ldr	r3, [r7, #4]
900009d4:	4413      	add	r3, r2
900009d6:	4a05      	ldr	r2, [pc, #20]	; (900009ec <_sbrk+0x64>)
900009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900009da:	68fb      	ldr	r3, [r7, #12]
}
900009dc:	4618      	mov	r0, r3
900009de:	3718      	adds	r7, #24
900009e0:	46bd      	mov	sp, r7
900009e2:	bd80      	pop	{r7, pc}
900009e4:	20020000 	.word	0x20020000
900009e8:	00001000 	.word	0x00001000
900009ec:	200001a8 	.word	0x200001a8
900009f0:	200050e0 	.word	0x200050e0

900009f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
900009f4:	b580      	push	{r7, lr}
900009f6:	b082      	sub	sp, #8
900009f8:	af00      	add	r7, sp, #0
900009fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
900009fc:	687b      	ldr	r3, [r7, #4]
900009fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a02:	4618      	mov	r0, r3
90000a04:	f009 fa4e 	bl	90009ea4 <USBH_LL_IncTimer>
}
90000a08:	bf00      	nop
90000a0a:	3708      	adds	r7, #8
90000a0c:	46bd      	mov	sp, r7
90000a0e:	bd80      	pop	{r7, pc}

90000a10 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90000a10:	b580      	push	{r7, lr}
90000a12:	b082      	sub	sp, #8
90000a14:	af00      	add	r7, sp, #0
90000a16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000a18:	687b      	ldr	r3, [r7, #4]
90000a1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a1e:	4618      	mov	r0, r3
90000a20:	f009 fa86 	bl	90009f30 <USBH_LL_Connect>
}
90000a24:	bf00      	nop
90000a26:	3708      	adds	r7, #8
90000a28:	46bd      	mov	sp, r7
90000a2a:	bd80      	pop	{r7, pc}

90000a2c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90000a2c:	b580      	push	{r7, lr}
90000a2e:	b082      	sub	sp, #8
90000a30:	af00      	add	r7, sp, #0
90000a32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90000a34:	687b      	ldr	r3, [r7, #4]
90000a36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a3a:	4618      	mov	r0, r3
90000a3c:	f009 fa8f 	bl	90009f5e <USBH_LL_Disconnect>
}
90000a40:	bf00      	nop
90000a42:	3708      	adds	r7, #8
90000a44:	46bd      	mov	sp, r7
90000a46:	bd80      	pop	{r7, pc}

90000a48 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000a48:	b580      	push	{r7, lr}
90000a4a:	b082      	sub	sp, #8
90000a4c:	af00      	add	r7, sp, #0
90000a4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90000a50:	687b      	ldr	r3, [r7, #4]
90000a52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a56:	4618      	mov	r0, r3
90000a58:	f009 fa4e 	bl	90009ef8 <USBH_LL_PortEnabled>
}
90000a5c:	bf00      	nop
90000a5e:	3708      	adds	r7, #8
90000a60:	46bd      	mov	sp, r7
90000a62:	bd80      	pop	{r7, pc}

90000a64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000a64:	b580      	push	{r7, lr}
90000a66:	b082      	sub	sp, #8
90000a68:	af00      	add	r7, sp, #0
90000a6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90000a6c:	687b      	ldr	r3, [r7, #4]
90000a6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a72:	4618      	mov	r0, r3
90000a74:	f009 fa4e 	bl	90009f14 <USBH_LL_PortDisabled>
}
90000a78:	bf00      	nop
90000a7a:	3708      	adds	r7, #8
90000a7c:	46bd      	mov	sp, r7
90000a7e:	bd80      	pop	{r7, pc}

90000a80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90000a80:	b480      	push	{r7}
90000a82:	b083      	sub	sp, #12
90000a84:	af00      	add	r7, sp, #0
90000a86:	6078      	str	r0, [r7, #4]
90000a88:	460b      	mov	r3, r1
90000a8a:	70fb      	strb	r3, [r7, #3]
90000a8c:	4613      	mov	r3, r2
90000a8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90000a90:	bf00      	nop
90000a92:	370c      	adds	r7, #12
90000a94:	46bd      	mov	sp, r7
90000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a9a:	4770      	bx	lr

90000a9c <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90000a9c:	b580      	push	{r7, lr}
90000a9e:	b082      	sub	sp, #8
90000aa0:	af00      	add	r7, sp, #0
90000aa2:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90000aa4:	687b      	ldr	r3, [r7, #4]
90000aa6:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
90000aaa:	4618      	mov	r0, r3
90000aac:	f003 fd00 	bl	900044b0 <HAL_HCD_Stop>
  return USBH_OK;
90000ab0:	2300      	movs	r3, #0
}
90000ab2:	4618      	mov	r0, r3
90000ab4:	3708      	adds	r7, #8
90000ab6:	46bd      	mov	sp, r7
90000ab8:	bd80      	pop	{r7, pc}
	...

90000abc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90000abc:	b580      	push	{r7, lr}
90000abe:	b084      	sub	sp, #16
90000ac0:	af00      	add	r7, sp, #0
90000ac2:	6078      	str	r0, [r7, #4]
90000ac4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90000ac6:	687b      	ldr	r3, [r7, #4]
90000ac8:	2b00      	cmp	r3, #0
90000aca:	d103      	bne.n	90000ad4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90000acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000ad0:	60fb      	str	r3, [r7, #12]
90000ad2:	e02c      	b.n	90000b2e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90000ad4:	683b      	ldr	r3, [r7, #0]
90000ad6:	681a      	ldr	r2, [r3, #0]
90000ad8:	687b      	ldr	r3, [r7, #4]
90000ada:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90000adc:	683b      	ldr	r3, [r7, #0]
90000ade:	685a      	ldr	r2, [r3, #4]
90000ae0:	687b      	ldr	r3, [r7, #4]
90000ae2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90000ae4:	683b      	ldr	r3, [r7, #0]
90000ae6:	891a      	ldrh	r2, [r3, #8]
90000ae8:	687b      	ldr	r3, [r7, #4]
90000aea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90000aec:	683b      	ldr	r3, [r7, #0]
90000aee:	68da      	ldr	r2, [r3, #12]
90000af0:	687b      	ldr	r3, [r7, #4]
90000af2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90000af4:	683b      	ldr	r3, [r7, #0]
90000af6:	691a      	ldr	r2, [r3, #16]
90000af8:	687b      	ldr	r3, [r7, #4]
90000afa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90000afc:	683b      	ldr	r3, [r7, #0]
90000afe:	695a      	ldr	r2, [r3, #20]
90000b00:	687b      	ldr	r3, [r7, #4]
90000b02:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90000b04:	687b      	ldr	r3, [r7, #4]
90000b06:	4a0c      	ldr	r2, [pc, #48]	; (90000b38 <FT5336_RegisterBusIO+0x7c>)
90000b08:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90000b0a:	687b      	ldr	r3, [r7, #4]
90000b0c:	4a0b      	ldr	r2, [pc, #44]	; (90000b3c <FT5336_RegisterBusIO+0x80>)
90000b0e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90000b10:	687b      	ldr	r3, [r7, #4]
90000b12:	687a      	ldr	r2, [r7, #4]
90000b14:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90000b16:	687b      	ldr	r3, [r7, #4]
90000b18:	681b      	ldr	r3, [r3, #0]
90000b1a:	2b00      	cmp	r3, #0
90000b1c:	d004      	beq.n	90000b28 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
90000b1e:	687b      	ldr	r3, [r7, #4]
90000b20:	681b      	ldr	r3, [r3, #0]
90000b22:	4798      	blx	r3
90000b24:	60f8      	str	r0, [r7, #12]
90000b26:	e002      	b.n	90000b2e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90000b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000b2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90000b2e:	68fb      	ldr	r3, [r7, #12]
}
90000b30:	4618      	mov	r0, r3
90000b32:	3710      	adds	r7, #16
90000b34:	46bd      	mov	sp, r7
90000b36:	bd80      	pop	{r7, pc}
90000b38:	90000f35 	.word	0x90000f35
90000b3c:	90000f69 	.word	0x90000f69

90000b40 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
90000b40:	b480      	push	{r7}
90000b42:	b083      	sub	sp, #12
90000b44:	af00      	add	r7, sp, #0
90000b46:	6078      	str	r0, [r7, #4]
90000b48:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90000b4a:	683b      	ldr	r3, [r7, #0]
90000b4c:	2201      	movs	r2, #1
90000b4e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
90000b50:	683b      	ldr	r3, [r7, #0]
90000b52:	2201      	movs	r2, #1
90000b54:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90000b56:	683b      	ldr	r3, [r7, #0]
90000b58:	2205      	movs	r2, #5
90000b5a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90000b5c:	683b      	ldr	r3, [r7, #0]
90000b5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90000b62:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90000b64:	683b      	ldr	r3, [r7, #0]
90000b66:	f44f 7288 	mov.w	r2, #272	; 0x110
90000b6a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90000b6c:	2300      	movs	r3, #0
}
90000b6e:	4618      	mov	r0, r3
90000b70:	370c      	adds	r7, #12
90000b72:	46bd      	mov	sp, r7
90000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b78:	4770      	bx	lr

90000b7a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
90000b7a:	b580      	push	{r7, lr}
90000b7c:	b084      	sub	sp, #16
90000b7e:	af00      	add	r7, sp, #0
90000b80:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000b82:	2300      	movs	r3, #0
90000b84:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
90000b86:	687b      	ldr	r3, [r7, #4]
90000b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
90000b8c:	2b00      	cmp	r3, #0
90000b8e:	d10d      	bne.n	90000bac <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
90000b90:	687b      	ldr	r3, [r7, #4]
90000b92:	681b      	ldr	r3, [r3, #0]
90000b94:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
90000b96:	6878      	ldr	r0, [r7, #4]
90000b98:	f000 f987 	bl	90000eaa <FT5336_DisableIT>
90000b9c:	4602      	mov	r2, r0
90000b9e:	68fb      	ldr	r3, [r7, #12]
90000ba0:	4413      	add	r3, r2
90000ba2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
90000ba4:	687b      	ldr	r3, [r7, #4]
90000ba6:	2201      	movs	r2, #1
90000ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
90000bac:	68fb      	ldr	r3, [r7, #12]
90000bae:	2b00      	cmp	r3, #0
90000bb0:	d002      	beq.n	90000bb8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
90000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000bb6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000bb8:	68fb      	ldr	r3, [r7, #12]
}
90000bba:	4618      	mov	r0, r3
90000bbc:	3710      	adds	r7, #16
90000bbe:	46bd      	mov	sp, r7
90000bc0:	bd80      	pop	{r7, pc}

90000bc2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
90000bc2:	b480      	push	{r7}
90000bc4:	b085      	sub	sp, #20
90000bc6:	af00      	add	r7, sp, #0
90000bc8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000bca:	2300      	movs	r3, #0
90000bcc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
90000bce:	687b      	ldr	r3, [r7, #4]
90000bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
90000bd4:	2b01      	cmp	r3, #1
90000bd6:	d103      	bne.n	90000be0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
90000bd8:	687b      	ldr	r3, [r7, #4]
90000bda:	2200      	movs	r2, #0
90000bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
90000be0:	68fb      	ldr	r3, [r7, #12]
}
90000be2:	4618      	mov	r0, r3
90000be4:	3714      	adds	r7, #20
90000be6:	46bd      	mov	sp, r7
90000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000bec:	4770      	bx	lr

90000bee <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
90000bee:	b580      	push	{r7, lr}
90000bf0:	b084      	sub	sp, #16
90000bf2:	af00      	add	r7, sp, #0
90000bf4:	6078      	str	r0, [r7, #4]
90000bf6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90000bf8:	687b      	ldr	r3, [r7, #4]
90000bfa:	f103 0218 	add.w	r2, r3, #24
90000bfe:	683b      	ldr	r3, [r7, #0]
90000c00:	681b      	ldr	r3, [r3, #0]
90000c02:	b2db      	uxtb	r3, r3
90000c04:	4619      	mov	r1, r3
90000c06:	4610      	mov	r0, r2
90000c08:	f000 fa25 	bl	90001056 <ft5336_radian_value>
90000c0c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90000c0e:	687b      	ldr	r3, [r7, #4]
90000c10:	f103 0218 	add.w	r2, r3, #24
90000c14:	683b      	ldr	r3, [r7, #0]
90000c16:	685b      	ldr	r3, [r3, #4]
90000c18:	b2db      	uxtb	r3, r3
90000c1a:	4619      	mov	r1, r3
90000c1c:	4610      	mov	r0, r2
90000c1e:	f000 fa2b 	bl	90001078 <ft5336_offset_left_right>
90000c22:	4602      	mov	r2, r0
90000c24:	68fb      	ldr	r3, [r7, #12]
90000c26:	4413      	add	r3, r2
90000c28:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90000c2a:	687b      	ldr	r3, [r7, #4]
90000c2c:	f103 0218 	add.w	r2, r3, #24
90000c30:	683b      	ldr	r3, [r7, #0]
90000c32:	689b      	ldr	r3, [r3, #8]
90000c34:	b2db      	uxtb	r3, r3
90000c36:	4619      	mov	r1, r3
90000c38:	4610      	mov	r0, r2
90000c3a:	f000 fa2e 	bl	9000109a <ft5336_offset_up_down>
90000c3e:	4602      	mov	r2, r0
90000c40:	68fb      	ldr	r3, [r7, #12]
90000c42:	4413      	add	r3, r2
90000c44:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90000c46:	687b      	ldr	r3, [r7, #4]
90000c48:	f103 0218 	add.w	r2, r3, #24
90000c4c:	683b      	ldr	r3, [r7, #0]
90000c4e:	68db      	ldr	r3, [r3, #12]
90000c50:	b2db      	uxtb	r3, r3
90000c52:	4619      	mov	r1, r3
90000c54:	4610      	mov	r0, r2
90000c56:	f000 fa31 	bl	900010bc <ft5336_disatnce_left_right>
90000c5a:	4602      	mov	r2, r0
90000c5c:	68fb      	ldr	r3, [r7, #12]
90000c5e:	4413      	add	r3, r2
90000c60:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90000c62:	687b      	ldr	r3, [r7, #4]
90000c64:	f103 0218 	add.w	r2, r3, #24
90000c68:	683b      	ldr	r3, [r7, #0]
90000c6a:	691b      	ldr	r3, [r3, #16]
90000c6c:	b2db      	uxtb	r3, r3
90000c6e:	4619      	mov	r1, r3
90000c70:	4610      	mov	r0, r2
90000c72:	f000 fa34 	bl	900010de <ft5336_distance_up_down>
90000c76:	4602      	mov	r2, r0
90000c78:	68fb      	ldr	r3, [r7, #12]
90000c7a:	4413      	add	r3, r2
90000c7c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90000c7e:	687b      	ldr	r3, [r7, #4]
90000c80:	f103 0218 	add.w	r2, r3, #24
90000c84:	683b      	ldr	r3, [r7, #0]
90000c86:	695b      	ldr	r3, [r3, #20]
90000c88:	b2db      	uxtb	r3, r3
90000c8a:	4619      	mov	r1, r3
90000c8c:	4610      	mov	r0, r2
90000c8e:	f000 fa37 	bl	90001100 <ft5336_distance_zoom>
90000c92:	4602      	mov	r2, r0
90000c94:	68fb      	ldr	r3, [r7, #12]
90000c96:	4413      	add	r3, r2
90000c98:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90000c9a:	68fb      	ldr	r3, [r7, #12]
90000c9c:	2b00      	cmp	r3, #0
90000c9e:	d002      	beq.n	90000ca6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90000ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000ca4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000ca6:	68fb      	ldr	r3, [r7, #12]
}
90000ca8:	4618      	mov	r0, r3
90000caa:	3710      	adds	r7, #16
90000cac:	46bd      	mov	sp, r7
90000cae:	bd80      	pop	{r7, pc}

90000cb0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90000cb0:	b580      	push	{r7, lr}
90000cb2:	b082      	sub	sp, #8
90000cb4:	af00      	add	r7, sp, #0
90000cb6:	6078      	str	r0, [r7, #4]
90000cb8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90000cba:	687b      	ldr	r3, [r7, #4]
90000cbc:	3318      	adds	r3, #24
90000cbe:	6839      	ldr	r1, [r7, #0]
90000cc0:	4618      	mov	r0, r3
90000cc2:	f000 fa3f 	bl	90001144 <ft5336_chip_id>
90000cc6:	4603      	mov	r3, r0
}
90000cc8:	4618      	mov	r0, r3
90000cca:	3708      	adds	r7, #8
90000ccc:	46bd      	mov	sp, r7
90000cce:	bd80      	pop	{r7, pc}

90000cd0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
90000cd0:	b580      	push	{r7, lr}
90000cd2:	b084      	sub	sp, #16
90000cd4:	af00      	add	r7, sp, #0
90000cd6:	6078      	str	r0, [r7, #4]
90000cd8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000cda:	2300      	movs	r3, #0
90000cdc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000cde:	6878      	ldr	r0, [r7, #4]
90000ce0:	f000 f908 	bl	90000ef4 <FT5336_DetectTouch>
90000ce4:	4603      	mov	r3, r0
90000ce6:	461a      	mov	r2, r3
90000ce8:	683b      	ldr	r3, [r7, #0]
90000cea:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000cec:	687b      	ldr	r3, [r7, #4]
90000cee:	f103 0018 	add.w	r0, r3, #24
90000cf2:	f107 0208 	add.w	r2, r7, #8
90000cf6:	2304      	movs	r3, #4
90000cf8:	2103      	movs	r1, #3
90000cfa:	f000 f94f 	bl	90000f9c <ft5336_read_reg>
90000cfe:	4603      	mov	r3, r0
90000d00:	2b00      	cmp	r3, #0
90000d02:	d003      	beq.n	90000d0c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
90000d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000d08:	60fb      	str	r3, [r7, #12]
90000d0a:	e00f      	b.n	90000d2c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90000d0c:	7a3b      	ldrb	r3, [r7, #8]
90000d0e:	021b      	lsls	r3, r3, #8
90000d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000d14:	7a7a      	ldrb	r2, [r7, #9]
90000d16:	431a      	orrs	r2, r3
90000d18:	683b      	ldr	r3, [r7, #0]
90000d1a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90000d1c:	7abb      	ldrb	r3, [r7, #10]
90000d1e:	021b      	lsls	r3, r3, #8
90000d20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000d24:	7afa      	ldrb	r2, [r7, #11]
90000d26:	431a      	orrs	r2, r3
90000d28:	683b      	ldr	r3, [r7, #0]
90000d2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
90000d2c:	68fb      	ldr	r3, [r7, #12]
}
90000d2e:	4618      	mov	r0, r3
90000d30:	3710      	adds	r7, #16
90000d32:	46bd      	mov	sp, r7
90000d34:	bd80      	pop	{r7, pc}

90000d36 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
90000d36:	b580      	push	{r7, lr}
90000d38:	b08c      	sub	sp, #48	; 0x30
90000d3a:	af00      	add	r7, sp, #0
90000d3c:	6078      	str	r0, [r7, #4]
90000d3e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000d40:	2300      	movs	r3, #0
90000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000d44:	6878      	ldr	r0, [r7, #4]
90000d46:	f000 f8d5 	bl	90000ef4 <FT5336_DetectTouch>
90000d4a:	4603      	mov	r3, r0
90000d4c:	461a      	mov	r2, r3
90000d4e:	683b      	ldr	r3, [r7, #0]
90000d50:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000d52:	687b      	ldr	r3, [r7, #4]
90000d54:	f103 0018 	add.w	r0, r3, #24
90000d58:	f107 0208 	add.w	r2, r7, #8
90000d5c:	231e      	movs	r3, #30
90000d5e:	2103      	movs	r1, #3
90000d60:	f000 f91c 	bl	90000f9c <ft5336_read_reg>
90000d64:	4603      	mov	r3, r0
90000d66:	2b00      	cmp	r3, #0
90000d68:	d003      	beq.n	90000d72 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90000d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
90000d70:	e077      	b.n	90000e62 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000d72:	2300      	movs	r3, #0
90000d74:	62bb      	str	r3, [r7, #40]	; 0x28
90000d76:	e071      	b.n	90000e5c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90000d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000d7a:	4613      	mov	r3, r2
90000d7c:	005b      	lsls	r3, r3, #1
90000d7e:	4413      	add	r3, r2
90000d80:	005b      	lsls	r3, r3, #1
90000d82:	3330      	adds	r3, #48	; 0x30
90000d84:	443b      	add	r3, r7
90000d86:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d8a:	021b      	lsls	r3, r3, #8
90000d8c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
90000d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000d92:	4613      	mov	r3, r2
90000d94:	005b      	lsls	r3, r3, #1
90000d96:	4413      	add	r3, r2
90000d98:	005b      	lsls	r3, r3, #1
90000d9a:	3301      	adds	r3, #1
90000d9c:	3330      	adds	r3, #48	; 0x30
90000d9e:	443b      	add	r3, r7
90000da0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000da4:	ea41 0203 	orr.w	r2, r1, r3
90000da8:	6839      	ldr	r1, [r7, #0]
90000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000dac:	009b      	lsls	r3, r3, #2
90000dae:	440b      	add	r3, r1
90000db0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90000db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000db4:	4613      	mov	r3, r2
90000db6:	005b      	lsls	r3, r3, #1
90000db8:	4413      	add	r3, r2
90000dba:	005b      	lsls	r3, r3, #1
90000dbc:	3302      	adds	r3, #2
90000dbe:	3330      	adds	r3, #48	; 0x30
90000dc0:	443b      	add	r3, r7
90000dc2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000dc6:	021b      	lsls	r3, r3, #8
90000dc8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
90000dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000dce:	4613      	mov	r3, r2
90000dd0:	005b      	lsls	r3, r3, #1
90000dd2:	4413      	add	r3, r2
90000dd4:	005b      	lsls	r3, r3, #1
90000dd6:	3303      	adds	r3, #3
90000dd8:	3330      	adds	r3, #48	; 0x30
90000dda:	443b      	add	r3, r7
90000ddc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000de0:	4319      	orrs	r1, r3
90000de2:	683b      	ldr	r3, [r7, #0]
90000de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000de6:	3206      	adds	r2, #6
90000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90000dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000dee:	4613      	mov	r3, r2
90000df0:	005b      	lsls	r3, r3, #1
90000df2:	4413      	add	r3, r2
90000df4:	005b      	lsls	r3, r3, #1
90000df6:	3330      	adds	r3, #48	; 0x30
90000df8:	443b      	add	r3, r7
90000dfa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000dfe:	099b      	lsrs	r3, r3, #6
90000e00:	b2db      	uxtb	r3, r3
90000e02:	4619      	mov	r1, r3
90000e04:	683b      	ldr	r3, [r7, #0]
90000e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000e08:	3210      	adds	r2, #16
90000e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90000e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000e10:	4613      	mov	r3, r2
90000e12:	005b      	lsls	r3, r3, #1
90000e14:	4413      	add	r3, r2
90000e16:	005b      	lsls	r3, r3, #1
90000e18:	3304      	adds	r3, #4
90000e1a:	3330      	adds	r3, #48	; 0x30
90000e1c:	443b      	add	r3, r7
90000e1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000e22:	4619      	mov	r1, r3
90000e24:	683a      	ldr	r2, [r7, #0]
90000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e28:	330a      	adds	r3, #10
90000e2a:	009b      	lsls	r3, r3, #2
90000e2c:	4413      	add	r3, r2
90000e2e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90000e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000e32:	4613      	mov	r3, r2
90000e34:	005b      	lsls	r3, r3, #1
90000e36:	4413      	add	r3, r2
90000e38:	005b      	lsls	r3, r3, #1
90000e3a:	3305      	adds	r3, #5
90000e3c:	3330      	adds	r3, #48	; 0x30
90000e3e:	443b      	add	r3, r7
90000e40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000e44:	091b      	lsrs	r3, r3, #4
90000e46:	b2db      	uxtb	r3, r3
90000e48:	4619      	mov	r1, r3
90000e4a:	683a      	ldr	r2, [r7, #0]
90000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e4e:	3314      	adds	r3, #20
90000e50:	009b      	lsls	r3, r3, #2
90000e52:	4413      	add	r3, r2
90000e54:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e58:	3301      	adds	r3, #1
90000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
90000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e5e:	2b04      	cmp	r3, #4
90000e60:	d98a      	bls.n	90000d78 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
90000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
90000e64:	4618      	mov	r0, r3
90000e66:	3730      	adds	r7, #48	; 0x30
90000e68:	46bd      	mov	sp, r7
90000e6a:	bd80      	pop	{r7, pc}

90000e6c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90000e6c:	b580      	push	{r7, lr}
90000e6e:	b082      	sub	sp, #8
90000e70:	af00      	add	r7, sp, #0
90000e72:	6078      	str	r0, [r7, #4]
90000e74:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90000e76:	687b      	ldr	r3, [r7, #4]
90000e78:	3318      	adds	r3, #24
90000e7a:	6839      	ldr	r1, [r7, #0]
90000e7c:	4618      	mov	r0, r3
90000e7e:	f000 f8bb 	bl	90000ff8 <ft5336_gest_id>
90000e82:	4603      	mov	r3, r0
}
90000e84:	4618      	mov	r0, r3
90000e86:	3708      	adds	r7, #8
90000e88:	46bd      	mov	sp, r7
90000e8a:	bd80      	pop	{r7, pc}

90000e8c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90000e8c:	b580      	push	{r7, lr}
90000e8e:	b082      	sub	sp, #8
90000e90:	af00      	add	r7, sp, #0
90000e92:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90000e94:	687b      	ldr	r3, [r7, #4]
90000e96:	3318      	adds	r3, #24
90000e98:	2101      	movs	r1, #1
90000e9a:	4618      	mov	r0, r3
90000e9c:	f000 f941 	bl	90001122 <ft5336_g_mode>
90000ea0:	4603      	mov	r3, r0
}
90000ea2:	4618      	mov	r0, r3
90000ea4:	3708      	adds	r7, #8
90000ea6:	46bd      	mov	sp, r7
90000ea8:	bd80      	pop	{r7, pc}

90000eaa <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90000eaa:	b580      	push	{r7, lr}
90000eac:	b082      	sub	sp, #8
90000eae:	af00      	add	r7, sp, #0
90000eb0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90000eb2:	687b      	ldr	r3, [r7, #4]
90000eb4:	3318      	adds	r3, #24
90000eb6:	2100      	movs	r1, #0
90000eb8:	4618      	mov	r0, r3
90000eba:	f000 f932 	bl	90001122 <ft5336_g_mode>
90000ebe:	4603      	mov	r3, r0
}
90000ec0:	4618      	mov	r0, r3
90000ec2:	3708      	adds	r7, #8
90000ec4:	46bd      	mov	sp, r7
90000ec6:	bd80      	pop	{r7, pc}

90000ec8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
90000ec8:	b480      	push	{r7}
90000eca:	b083      	sub	sp, #12
90000ecc:	af00      	add	r7, sp, #0
90000ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000ed0:	2300      	movs	r3, #0
}
90000ed2:	4618      	mov	r0, r3
90000ed4:	370c      	adds	r7, #12
90000ed6:	46bd      	mov	sp, r7
90000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000edc:	4770      	bx	lr

90000ede <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
90000ede:	b480      	push	{r7}
90000ee0:	b083      	sub	sp, #12
90000ee2:	af00      	add	r7, sp, #0
90000ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000ee6:	2300      	movs	r3, #0
}
90000ee8:	4618      	mov	r0, r3
90000eea:	370c      	adds	r7, #12
90000eec:	46bd      	mov	sp, r7
90000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ef2:	4770      	bx	lr

90000ef4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
90000ef4:	b580      	push	{r7, lr}
90000ef6:	b084      	sub	sp, #16
90000ef8:	af00      	add	r7, sp, #0
90000efa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90000efc:	687b      	ldr	r3, [r7, #4]
90000efe:	3318      	adds	r3, #24
90000f00:	f107 020b 	add.w	r2, r7, #11
90000f04:	4611      	mov	r1, r2
90000f06:	4618      	mov	r0, r3
90000f08:	f000 f886 	bl	90001018 <ft5336_td_status>
90000f0c:	4603      	mov	r3, r0
90000f0e:	2b00      	cmp	r3, #0
90000f10:	d003      	beq.n	90000f1a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
90000f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000f16:	60fb      	str	r3, [r7, #12]
90000f18:	e007      	b.n	90000f2a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90000f1a:	7afb      	ldrb	r3, [r7, #11]
90000f1c:	2b05      	cmp	r3, #5
90000f1e:	d902      	bls.n	90000f26 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90000f20:	2300      	movs	r3, #0
90000f22:	60fb      	str	r3, [r7, #12]
90000f24:	e001      	b.n	90000f2a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
90000f26:	7afb      	ldrb	r3, [r7, #11]
90000f28:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
90000f2a:	68fb      	ldr	r3, [r7, #12]
}
90000f2c:	4618      	mov	r0, r3
90000f2e:	3710      	adds	r7, #16
90000f30:	46bd      	mov	sp, r7
90000f32:	bd80      	pop	{r7, pc}

90000f34 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000f34:	b590      	push	{r4, r7, lr}
90000f36:	b087      	sub	sp, #28
90000f38:	af00      	add	r7, sp, #0
90000f3a:	60f8      	str	r0, [r7, #12]
90000f3c:	607a      	str	r2, [r7, #4]
90000f3e:	461a      	mov	r2, r3
90000f40:	460b      	mov	r3, r1
90000f42:	72fb      	strb	r3, [r7, #11]
90000f44:	4613      	mov	r3, r2
90000f46:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000f48:	68fb      	ldr	r3, [r7, #12]
90000f4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90000f4c:	697b      	ldr	r3, [r7, #20]
90000f4e:	691c      	ldr	r4, [r3, #16]
90000f50:	697b      	ldr	r3, [r7, #20]
90000f52:	8918      	ldrh	r0, [r3, #8]
90000f54:	7afb      	ldrb	r3, [r7, #11]
90000f56:	b299      	uxth	r1, r3
90000f58:	893b      	ldrh	r3, [r7, #8]
90000f5a:	687a      	ldr	r2, [r7, #4]
90000f5c:	47a0      	blx	r4
90000f5e:	4603      	mov	r3, r0
}
90000f60:	4618      	mov	r0, r3
90000f62:	371c      	adds	r7, #28
90000f64:	46bd      	mov	sp, r7
90000f66:	bd90      	pop	{r4, r7, pc}

90000f68 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000f68:	b590      	push	{r4, r7, lr}
90000f6a:	b087      	sub	sp, #28
90000f6c:	af00      	add	r7, sp, #0
90000f6e:	60f8      	str	r0, [r7, #12]
90000f70:	607a      	str	r2, [r7, #4]
90000f72:	461a      	mov	r2, r3
90000f74:	460b      	mov	r3, r1
90000f76:	72fb      	strb	r3, [r7, #11]
90000f78:	4613      	mov	r3, r2
90000f7a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000f7c:	68fb      	ldr	r3, [r7, #12]
90000f7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90000f80:	697b      	ldr	r3, [r7, #20]
90000f82:	68dc      	ldr	r4, [r3, #12]
90000f84:	697b      	ldr	r3, [r7, #20]
90000f86:	8918      	ldrh	r0, [r3, #8]
90000f88:	7afb      	ldrb	r3, [r7, #11]
90000f8a:	b299      	uxth	r1, r3
90000f8c:	893b      	ldrh	r3, [r7, #8]
90000f8e:	687a      	ldr	r2, [r7, #4]
90000f90:	47a0      	blx	r4
90000f92:	4603      	mov	r3, r0
}
90000f94:	4618      	mov	r0, r3
90000f96:	371c      	adds	r7, #28
90000f98:	46bd      	mov	sp, r7
90000f9a:	bd90      	pop	{r4, r7, pc}

90000f9c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90000f9c:	b590      	push	{r4, r7, lr}
90000f9e:	b085      	sub	sp, #20
90000fa0:	af00      	add	r7, sp, #0
90000fa2:	60f8      	str	r0, [r7, #12]
90000fa4:	607a      	str	r2, [r7, #4]
90000fa6:	461a      	mov	r2, r3
90000fa8:	460b      	mov	r3, r1
90000faa:	72fb      	strb	r3, [r7, #11]
90000fac:	4613      	mov	r3, r2
90000fae:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90000fb0:	68fb      	ldr	r3, [r7, #12]
90000fb2:	685c      	ldr	r4, [r3, #4]
90000fb4:	68fb      	ldr	r3, [r7, #12]
90000fb6:	6898      	ldr	r0, [r3, #8]
90000fb8:	893b      	ldrh	r3, [r7, #8]
90000fba:	7af9      	ldrb	r1, [r7, #11]
90000fbc:	687a      	ldr	r2, [r7, #4]
90000fbe:	47a0      	blx	r4
90000fc0:	4603      	mov	r3, r0
}
90000fc2:	4618      	mov	r0, r3
90000fc4:	3714      	adds	r7, #20
90000fc6:	46bd      	mov	sp, r7
90000fc8:	bd90      	pop	{r4, r7, pc}

90000fca <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
90000fca:	b590      	push	{r4, r7, lr}
90000fcc:	b085      	sub	sp, #20
90000fce:	af00      	add	r7, sp, #0
90000fd0:	60f8      	str	r0, [r7, #12]
90000fd2:	607a      	str	r2, [r7, #4]
90000fd4:	461a      	mov	r2, r3
90000fd6:	460b      	mov	r3, r1
90000fd8:	72fb      	strb	r3, [r7, #11]
90000fda:	4613      	mov	r3, r2
90000fdc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90000fde:	68fb      	ldr	r3, [r7, #12]
90000fe0:	681c      	ldr	r4, [r3, #0]
90000fe2:	68fb      	ldr	r3, [r7, #12]
90000fe4:	6898      	ldr	r0, [r3, #8]
90000fe6:	893b      	ldrh	r3, [r7, #8]
90000fe8:	7af9      	ldrb	r1, [r7, #11]
90000fea:	687a      	ldr	r2, [r7, #4]
90000fec:	47a0      	blx	r4
90000fee:	4603      	mov	r3, r0
}
90000ff0:	4618      	mov	r0, r3
90000ff2:	3714      	adds	r7, #20
90000ff4:	46bd      	mov	sp, r7
90000ff6:	bd90      	pop	{r4, r7, pc}

90000ff8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90000ff8:	b580      	push	{r7, lr}
90000ffa:	b082      	sub	sp, #8
90000ffc:	af00      	add	r7, sp, #0
90000ffe:	6078      	str	r0, [r7, #4]
90001000:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
90001002:	2301      	movs	r3, #1
90001004:	683a      	ldr	r2, [r7, #0]
90001006:	2101      	movs	r1, #1
90001008:	6878      	ldr	r0, [r7, #4]
9000100a:	f7ff ffc7 	bl	90000f9c <ft5336_read_reg>
9000100e:	4603      	mov	r3, r0
}
90001010:	4618      	mov	r0, r3
90001012:	3708      	adds	r7, #8
90001014:	46bd      	mov	sp, r7
90001016:	bd80      	pop	{r7, pc}

90001018 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90001018:	b580      	push	{r7, lr}
9000101a:	b084      	sub	sp, #16
9000101c:	af00      	add	r7, sp, #0
9000101e:	6078      	str	r0, [r7, #4]
90001020:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
90001022:	2301      	movs	r3, #1
90001024:	683a      	ldr	r2, [r7, #0]
90001026:	2102      	movs	r1, #2
90001028:	6878      	ldr	r0, [r7, #4]
9000102a:	f7ff ffb7 	bl	90000f9c <ft5336_read_reg>
9000102e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90001030:	68fb      	ldr	r3, [r7, #12]
90001032:	2b00      	cmp	r3, #0
90001034:	d10a      	bne.n	9000104c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90001036:	683b      	ldr	r3, [r7, #0]
90001038:	781b      	ldrb	r3, [r3, #0]
9000103a:	f003 030f 	and.w	r3, r3, #15
9000103e:	b2da      	uxtb	r2, r3
90001040:	683b      	ldr	r3, [r7, #0]
90001042:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
90001044:	683b      	ldr	r3, [r7, #0]
90001046:	781a      	ldrb	r2, [r3, #0]
90001048:	683b      	ldr	r3, [r7, #0]
9000104a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000104c:	68fb      	ldr	r3, [r7, #12]
}
9000104e:	4618      	mov	r0, r3
90001050:	3710      	adds	r7, #16
90001052:	46bd      	mov	sp, r7
90001054:	bd80      	pop	{r7, pc}

90001056 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90001056:	b580      	push	{r7, lr}
90001058:	b082      	sub	sp, #8
9000105a:	af00      	add	r7, sp, #0
9000105c:	6078      	str	r0, [r7, #4]
9000105e:	460b      	mov	r3, r1
90001060:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
90001062:	1cfa      	adds	r2, r7, #3
90001064:	2301      	movs	r3, #1
90001066:	2191      	movs	r1, #145	; 0x91
90001068:	6878      	ldr	r0, [r7, #4]
9000106a:	f7ff ffae 	bl	90000fca <ft5336_write_reg>
9000106e:	4603      	mov	r3, r0
}
90001070:	4618      	mov	r0, r3
90001072:	3708      	adds	r7, #8
90001074:	46bd      	mov	sp, r7
90001076:	bd80      	pop	{r7, pc}

90001078 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001078:	b580      	push	{r7, lr}
9000107a:	b082      	sub	sp, #8
9000107c:	af00      	add	r7, sp, #0
9000107e:	6078      	str	r0, [r7, #4]
90001080:	460b      	mov	r3, r1
90001082:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
90001084:	1cfa      	adds	r2, r7, #3
90001086:	2301      	movs	r3, #1
90001088:	2192      	movs	r1, #146	; 0x92
9000108a:	6878      	ldr	r0, [r7, #4]
9000108c:	f7ff ff9d 	bl	90000fca <ft5336_write_reg>
90001090:	4603      	mov	r3, r0
}
90001092:	4618      	mov	r0, r3
90001094:	3708      	adds	r7, #8
90001096:	46bd      	mov	sp, r7
90001098:	bd80      	pop	{r7, pc}

9000109a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
9000109a:	b580      	push	{r7, lr}
9000109c:	b082      	sub	sp, #8
9000109e:	af00      	add	r7, sp, #0
900010a0:	6078      	str	r0, [r7, #4]
900010a2:	460b      	mov	r3, r1
900010a4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
900010a6:	1cfa      	adds	r2, r7, #3
900010a8:	2301      	movs	r3, #1
900010aa:	2193      	movs	r1, #147	; 0x93
900010ac:	6878      	ldr	r0, [r7, #4]
900010ae:	f7ff ff8c 	bl	90000fca <ft5336_write_reg>
900010b2:	4603      	mov	r3, r0
}
900010b4:	4618      	mov	r0, r3
900010b6:	3708      	adds	r7, #8
900010b8:	46bd      	mov	sp, r7
900010ba:	bd80      	pop	{r7, pc}

900010bc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900010bc:	b580      	push	{r7, lr}
900010be:	b082      	sub	sp, #8
900010c0:	af00      	add	r7, sp, #0
900010c2:	6078      	str	r0, [r7, #4]
900010c4:	460b      	mov	r3, r1
900010c6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
900010c8:	1cfa      	adds	r2, r7, #3
900010ca:	2301      	movs	r3, #1
900010cc:	2194      	movs	r1, #148	; 0x94
900010ce:	6878      	ldr	r0, [r7, #4]
900010d0:	f7ff ff7b 	bl	90000fca <ft5336_write_reg>
900010d4:	4603      	mov	r3, r0
}
900010d6:	4618      	mov	r0, r3
900010d8:	3708      	adds	r7, #8
900010da:	46bd      	mov	sp, r7
900010dc:	bd80      	pop	{r7, pc}

900010de <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900010de:	b580      	push	{r7, lr}
900010e0:	b082      	sub	sp, #8
900010e2:	af00      	add	r7, sp, #0
900010e4:	6078      	str	r0, [r7, #4]
900010e6:	460b      	mov	r3, r1
900010e8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
900010ea:	1cfa      	adds	r2, r7, #3
900010ec:	2301      	movs	r3, #1
900010ee:	2195      	movs	r1, #149	; 0x95
900010f0:	6878      	ldr	r0, [r7, #4]
900010f2:	f7ff ff6a 	bl	90000fca <ft5336_write_reg>
900010f6:	4603      	mov	r3, r0
}
900010f8:	4618      	mov	r0, r3
900010fa:	3708      	adds	r7, #8
900010fc:	46bd      	mov	sp, r7
900010fe:	bd80      	pop	{r7, pc}

90001100 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90001100:	b580      	push	{r7, lr}
90001102:	b082      	sub	sp, #8
90001104:	af00      	add	r7, sp, #0
90001106:	6078      	str	r0, [r7, #4]
90001108:	460b      	mov	r3, r1
9000110a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
9000110c:	1cfa      	adds	r2, r7, #3
9000110e:	2301      	movs	r3, #1
90001110:	2196      	movs	r1, #150	; 0x96
90001112:	6878      	ldr	r0, [r7, #4]
90001114:	f7ff ff59 	bl	90000fca <ft5336_write_reg>
90001118:	4603      	mov	r3, r0
}
9000111a:	4618      	mov	r0, r3
9000111c:	3708      	adds	r7, #8
9000111e:	46bd      	mov	sp, r7
90001120:	bd80      	pop	{r7, pc}

90001122 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90001122:	b580      	push	{r7, lr}
90001124:	b082      	sub	sp, #8
90001126:	af00      	add	r7, sp, #0
90001128:	6078      	str	r0, [r7, #4]
9000112a:	460b      	mov	r3, r1
9000112c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
9000112e:	1cfa      	adds	r2, r7, #3
90001130:	2301      	movs	r3, #1
90001132:	21a4      	movs	r1, #164	; 0xa4
90001134:	6878      	ldr	r0, [r7, #4]
90001136:	f7ff ff48 	bl	90000fca <ft5336_write_reg>
9000113a:	4603      	mov	r3, r0
}
9000113c:	4618      	mov	r0, r3
9000113e:	3708      	adds	r7, #8
90001140:	46bd      	mov	sp, r7
90001142:	bd80      	pop	{r7, pc}

90001144 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001144:	b580      	push	{r7, lr}
90001146:	b084      	sub	sp, #16
90001148:	af00      	add	r7, sp, #0
9000114a:	6078      	str	r0, [r7, #4]
9000114c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
9000114e:	2301      	movs	r3, #1
90001150:	683a      	ldr	r2, [r7, #0]
90001152:	21a8      	movs	r1, #168	; 0xa8
90001154:	6878      	ldr	r0, [r7, #4]
90001156:	f7ff ff21 	bl	90000f9c <ft5336_read_reg>
9000115a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000115c:	68fb      	ldr	r3, [r7, #12]
9000115e:	2b00      	cmp	r3, #0
90001160:	d107      	bne.n	90001172 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90001162:	683b      	ldr	r3, [r7, #0]
90001164:	781a      	ldrb	r2, [r3, #0]
90001166:	683b      	ldr	r3, [r7, #0]
90001168:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
9000116a:	683b      	ldr	r3, [r7, #0]
9000116c:	781a      	ldrb	r2, [r3, #0]
9000116e:	683b      	ldr	r3, [r7, #0]
90001170:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90001172:	68fb      	ldr	r3, [r7, #12]
}
90001174:	4618      	mov	r0, r3
90001176:	3710      	adds	r7, #16
90001178:	46bd      	mov	sp, r7
9000117a:	bd80      	pop	{r7, pc}

9000117c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000117c:	b580      	push	{r7, lr}
9000117e:	b084      	sub	sp, #16
90001180:	af00      	add	r7, sp, #0
90001182:	6078      	str	r0, [r7, #4]
90001184:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000118a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000118c:	683b      	ldr	r3, [r7, #0]
9000118e:	681b      	ldr	r3, [r3, #0]
90001190:	4619      	mov	r1, r3
90001192:	6878      	ldr	r0, [r7, #4]
90001194:	f000 f832 	bl	900011fc <MT48LC4M32B2_ClockEnable>
90001198:	4603      	mov	r3, r0
9000119a:	2b00      	cmp	r3, #0
9000119c:	d128      	bne.n	900011f0 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
9000119e:	2001      	movs	r0, #1
900011a0:	f000 f8e2 	bl	90001368 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900011a4:	683b      	ldr	r3, [r7, #0]
900011a6:	681b      	ldr	r3, [r3, #0]
900011a8:	4619      	mov	r1, r3
900011aa:	6878      	ldr	r0, [r7, #4]
900011ac:	f000 f84a 	bl	90001244 <MT48LC4M32B2_Precharge>
900011b0:	4603      	mov	r3, r0
900011b2:	2b00      	cmp	r3, #0
900011b4:	d11c      	bne.n	900011f0 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900011b6:	683b      	ldr	r3, [r7, #0]
900011b8:	6819      	ldr	r1, [r3, #0]
900011ba:	683b      	ldr	r3, [r7, #0]
900011bc:	685b      	ldr	r3, [r3, #4]
900011be:	461a      	mov	r2, r3
900011c0:	6878      	ldr	r0, [r7, #4]
900011c2:	f000 f897 	bl	900012f4 <MT48LC4M32B2_RefreshMode>
900011c6:	4603      	mov	r3, r0
900011c8:	2b00      	cmp	r3, #0
900011ca:	d111      	bne.n	900011f0 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
900011cc:	6839      	ldr	r1, [r7, #0]
900011ce:	6878      	ldr	r0, [r7, #4]
900011d0:	f000 f85c 	bl	9000128c <MT48LC4M32B2_ModeRegConfig>
900011d4:	4603      	mov	r3, r0
900011d6:	2b00      	cmp	r3, #0
900011d8:	d10a      	bne.n	900011f0 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900011da:	683b      	ldr	r3, [r7, #0]
900011dc:	689b      	ldr	r3, [r3, #8]
900011de:	4619      	mov	r1, r3
900011e0:	6878      	ldr	r0, [r7, #4]
900011e2:	f000 f8ad 	bl	90001340 <MT48LC4M32B2_RefreshRate>
900011e6:	4603      	mov	r3, r0
900011e8:	2b00      	cmp	r3, #0
900011ea:	d101      	bne.n	900011f0 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
900011ec:	2300      	movs	r3, #0
900011ee:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
900011f0:	68fb      	ldr	r3, [r7, #12]
}
900011f2:	4618      	mov	r0, r3
900011f4:	3710      	adds	r7, #16
900011f6:	46bd      	mov	sp, r7
900011f8:	bd80      	pop	{r7, pc}
	...

900011fc <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900011fc:	b580      	push	{r7, lr}
900011fe:	b082      	sub	sp, #8
90001200:	af00      	add	r7, sp, #0
90001202:	6078      	str	r0, [r7, #4]
90001204:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90001206:	4b0e      	ldr	r3, [pc, #56]	; (90001240 <MT48LC4M32B2_ClockEnable+0x44>)
90001208:	2201      	movs	r2, #1
9000120a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
9000120c:	4a0c      	ldr	r2, [pc, #48]	; (90001240 <MT48LC4M32B2_ClockEnable+0x44>)
9000120e:	683b      	ldr	r3, [r7, #0]
90001210:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001212:	4b0b      	ldr	r3, [pc, #44]	; (90001240 <MT48LC4M32B2_ClockEnable+0x44>)
90001214:	2201      	movs	r2, #1
90001216:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001218:	4b09      	ldr	r3, [pc, #36]	; (90001240 <MT48LC4M32B2_ClockEnable+0x44>)
9000121a:	2200      	movs	r2, #0
9000121c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001222:	4907      	ldr	r1, [pc, #28]	; (90001240 <MT48LC4M32B2_ClockEnable+0x44>)
90001224:	6878      	ldr	r0, [r7, #4]
90001226:	f008 f881 	bl	9000932c <HAL_SDRAM_SendCommand>
9000122a:	4603      	mov	r3, r0
9000122c:	2b00      	cmp	r3, #0
9000122e:	d002      	beq.n	90001236 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90001234:	e000      	b.n	90001238 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001236:	2300      	movs	r3, #0
  }
}
90001238:	4618      	mov	r0, r3
9000123a:	3708      	adds	r7, #8
9000123c:	46bd      	mov	sp, r7
9000123e:	bd80      	pop	{r7, pc}
90001240:	200004b0 	.word	0x200004b0

90001244 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001244:	b580      	push	{r7, lr}
90001246:	b082      	sub	sp, #8
90001248:	af00      	add	r7, sp, #0
9000124a:	6078      	str	r0, [r7, #4]
9000124c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000124e:	4b0e      	ldr	r3, [pc, #56]	; (90001288 <MT48LC4M32B2_Precharge+0x44>)
90001250:	2202      	movs	r2, #2
90001252:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001254:	4a0c      	ldr	r2, [pc, #48]	; (90001288 <MT48LC4M32B2_Precharge+0x44>)
90001256:	683b      	ldr	r3, [r7, #0]
90001258:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000125a:	4b0b      	ldr	r3, [pc, #44]	; (90001288 <MT48LC4M32B2_Precharge+0x44>)
9000125c:	2201      	movs	r2, #1
9000125e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001260:	4b09      	ldr	r3, [pc, #36]	; (90001288 <MT48LC4M32B2_Precharge+0x44>)
90001262:	2200      	movs	r2, #0
90001264:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000126a:	4907      	ldr	r1, [pc, #28]	; (90001288 <MT48LC4M32B2_Precharge+0x44>)
9000126c:	6878      	ldr	r0, [r7, #4]
9000126e:	f008 f85d 	bl	9000932c <HAL_SDRAM_SendCommand>
90001272:	4603      	mov	r3, r0
90001274:	2b00      	cmp	r3, #0
90001276:	d002      	beq.n	9000127e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000127c:	e000      	b.n	90001280 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000127e:	2300      	movs	r3, #0
  }
}
90001280:	4618      	mov	r0, r3
90001282:	3708      	adds	r7, #8
90001284:	46bd      	mov	sp, r7
90001286:	bd80      	pop	{r7, pc}
90001288:	200004b0 	.word	0x200004b0

9000128c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000128c:	b580      	push	{r7, lr}
9000128e:	b084      	sub	sp, #16
90001290:	af00      	add	r7, sp, #0
90001292:	6078      	str	r0, [r7, #4]
90001294:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001296:	683b      	ldr	r3, [r7, #0]
90001298:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
9000129a:	683b      	ldr	r3, [r7, #0]
9000129c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000129e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
900012a0:	683b      	ldr	r3, [r7, #0]
900012a2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
900012a4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
900012a6:	683b      	ldr	r3, [r7, #0]
900012a8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
900012aa:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
900012ac:	683b      	ldr	r3, [r7, #0]
900012ae:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900012b0:	4313      	orrs	r3, r2
900012b2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900012b4:	4b0e      	ldr	r3, [pc, #56]	; (900012f0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012b6:	2204      	movs	r2, #4
900012b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900012ba:	683b      	ldr	r3, [r7, #0]
900012bc:	681b      	ldr	r3, [r3, #0]
900012be:	4a0c      	ldr	r2, [pc, #48]	; (900012f0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012c0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900012c2:	4b0b      	ldr	r3, [pc, #44]	; (900012f0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012c4:	2201      	movs	r2, #1
900012c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900012c8:	4a09      	ldr	r2, [pc, #36]	; (900012f0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012ca:	68fb      	ldr	r3, [r7, #12]
900012cc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
900012d2:	4907      	ldr	r1, [pc, #28]	; (900012f0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012d4:	6878      	ldr	r0, [r7, #4]
900012d6:	f008 f829 	bl	9000932c <HAL_SDRAM_SendCommand>
900012da:	4603      	mov	r3, r0
900012dc:	2b00      	cmp	r3, #0
900012de:	d002      	beq.n	900012e6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
900012e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900012e4:	e000      	b.n	900012e8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900012e6:	2300      	movs	r3, #0
  }
}
900012e8:	4618      	mov	r0, r3
900012ea:	3710      	adds	r7, #16
900012ec:	46bd      	mov	sp, r7
900012ee:	bd80      	pop	{r7, pc}
900012f0:	200004b0 	.word	0x200004b0

900012f4 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
900012f4:	b580      	push	{r7, lr}
900012f6:	b084      	sub	sp, #16
900012f8:	af00      	add	r7, sp, #0
900012fa:	60f8      	str	r0, [r7, #12]
900012fc:	60b9      	str	r1, [r7, #8]
900012fe:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
90001300:	4a0e      	ldr	r2, [pc, #56]	; (9000133c <MT48LC4M32B2_RefreshMode+0x48>)
90001302:	687b      	ldr	r3, [r7, #4]
90001304:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
90001306:	4a0d      	ldr	r2, [pc, #52]	; (9000133c <MT48LC4M32B2_RefreshMode+0x48>)
90001308:	68bb      	ldr	r3, [r7, #8]
9000130a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
9000130c:	4b0b      	ldr	r3, [pc, #44]	; (9000133c <MT48LC4M32B2_RefreshMode+0x48>)
9000130e:	2208      	movs	r2, #8
90001310:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001312:	4b0a      	ldr	r3, [pc, #40]	; (9000133c <MT48LC4M32B2_RefreshMode+0x48>)
90001314:	2200      	movs	r2, #0
90001316:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001318:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000131c:	4907      	ldr	r1, [pc, #28]	; (9000133c <MT48LC4M32B2_RefreshMode+0x48>)
9000131e:	68f8      	ldr	r0, [r7, #12]
90001320:	f008 f804 	bl	9000932c <HAL_SDRAM_SendCommand>
90001324:	4603      	mov	r3, r0
90001326:	2b00      	cmp	r3, #0
90001328:	d002      	beq.n	90001330 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
9000132a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000132e:	e000      	b.n	90001332 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001330:	2300      	movs	r3, #0
  }
}
90001332:	4618      	mov	r0, r3
90001334:	3710      	adds	r7, #16
90001336:	46bd      	mov	sp, r7
90001338:	bd80      	pop	{r7, pc}
9000133a:	bf00      	nop
9000133c:	200004b0 	.word	0x200004b0

90001340 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001340:	b580      	push	{r7, lr}
90001342:	b082      	sub	sp, #8
90001344:	af00      	add	r7, sp, #0
90001346:	6078      	str	r0, [r7, #4]
90001348:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
9000134a:	6839      	ldr	r1, [r7, #0]
9000134c:	6878      	ldr	r0, [r7, #4]
9000134e:	f008 f822 	bl	90009396 <HAL_SDRAM_ProgramRefreshRate>
90001352:	4603      	mov	r3, r0
90001354:	2b00      	cmp	r3, #0
90001356:	d002      	beq.n	9000135e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000135c:	e000      	b.n	90001360 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000135e:	2300      	movs	r3, #0
  }
}
90001360:	4618      	mov	r0, r3
90001362:	3708      	adds	r7, #8
90001364:	46bd      	mov	sp, r7
90001366:	bd80      	pop	{r7, pc}

90001368 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001368:	b580      	push	{r7, lr}
9000136a:	b084      	sub	sp, #16
9000136c:	af00      	add	r7, sp, #0
9000136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001370:	f002 f832 	bl	900033d8 <HAL_GetTick>
90001374:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001376:	bf00      	nop
90001378:	f002 f82e 	bl	900033d8 <HAL_GetTick>
9000137c:	4602      	mov	r2, r0
9000137e:	68fb      	ldr	r3, [r7, #12]
90001380:	1ad3      	subs	r3, r2, r3
90001382:	687a      	ldr	r2, [r7, #4]
90001384:	429a      	cmp	r2, r3
90001386:	d8f7      	bhi.n	90001378 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001388:	2300      	movs	r3, #0
}
9000138a:	4618      	mov	r0, r3
9000138c:	3710      	adds	r7, #16
9000138e:	46bd      	mov	sp, r7
90001390:	bd80      	pop	{r7, pc}
	...

90001394 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001394:	b580      	push	{r7, lr}
90001396:	b08a      	sub	sp, #40	; 0x28
90001398:	af00      	add	r7, sp, #0
9000139a:	4603      	mov	r3, r0
9000139c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
9000139e:	2300      	movs	r3, #0
900013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
900013a2:	79fb      	ldrb	r3, [r7, #7]
900013a4:	2b00      	cmp	r3, #0
900013a6:	d10f      	bne.n	900013c8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
900013a8:	4b26      	ldr	r3, [pc, #152]	; (90001444 <BSP_LED_Init+0xb0>)
900013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013ae:	4a25      	ldr	r2, [pc, #148]	; (90001444 <BSP_LED_Init+0xb0>)
900013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900013b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013b8:	4b22      	ldr	r3, [pc, #136]	; (90001444 <BSP_LED_Init+0xb0>)
900013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
900013c2:	60fb      	str	r3, [r7, #12]
900013c4:	68fb      	ldr	r3, [r7, #12]
900013c6:	e015      	b.n	900013f4 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
900013c8:	79fb      	ldrb	r3, [r7, #7]
900013ca:	2b01      	cmp	r3, #1
900013cc:	d10f      	bne.n	900013ee <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
900013ce:	4b1d      	ldr	r3, [pc, #116]	; (90001444 <BSP_LED_Init+0xb0>)
900013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013d4:	4a1b      	ldr	r2, [pc, #108]	; (90001444 <BSP_LED_Init+0xb0>)
900013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013de:	4b19      	ldr	r3, [pc, #100]	; (90001444 <BSP_LED_Init+0xb0>)
900013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900013e8:	60bb      	str	r3, [r7, #8]
900013ea:	68bb      	ldr	r3, [r7, #8]
900013ec:	e002      	b.n	900013f4 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
900013ee:	f06f 0301 	mvn.w	r3, #1
900013f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
900013f4:	79fb      	ldrb	r3, [r7, #7]
900013f6:	4a14      	ldr	r2, [pc, #80]	; (90001448 <BSP_LED_Init+0xb4>)
900013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900013fe:	2301      	movs	r3, #1
90001400:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
90001402:	2301      	movs	r3, #1
90001404:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90001406:	2303      	movs	r3, #3
90001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
9000140a:	79fb      	ldrb	r3, [r7, #7]
9000140c:	4a0f      	ldr	r2, [pc, #60]	; (9000144c <BSP_LED_Init+0xb8>)
9000140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001412:	f107 0210 	add.w	r2, r7, #16
90001416:	4611      	mov	r1, r2
90001418:	4618      	mov	r0, r3
9000141a:	f002 fc67 	bl	90003cec <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
9000141e:	79fb      	ldrb	r3, [r7, #7]
90001420:	4a0a      	ldr	r2, [pc, #40]	; (9000144c <BSP_LED_Init+0xb8>)
90001422:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001426:	79fb      	ldrb	r3, [r7, #7]
90001428:	4a07      	ldr	r2, [pc, #28]	; (90001448 <BSP_LED_Init+0xb4>)
9000142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000142e:	b29b      	uxth	r3, r3
90001430:	2201      	movs	r2, #1
90001432:	4619      	mov	r1, r3
90001434:	f002 ff14 	bl	90004260 <HAL_GPIO_WritePin>
  return ret;
90001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
9000143a:	4618      	mov	r0, r3
9000143c:	3728      	adds	r7, #40	; 0x28
9000143e:	46bd      	mov	sp, r7
90001440:	bd80      	pop	{r7, pc}
90001442:	bf00      	nop
90001444:	58024400 	.word	0x58024400
90001448:	9000e338 	.word	0x9000e338
9000144c:	20000030 	.word	0x20000030

90001450 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001450:	b580      	push	{r7, lr}
90001452:	b082      	sub	sp, #8
90001454:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001456:	2300      	movs	r3, #0
90001458:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
9000145a:	4b16      	ldr	r3, [pc, #88]	; (900014b4 <BSP_I2C4_Init+0x64>)
9000145c:	4a16      	ldr	r2, [pc, #88]	; (900014b8 <BSP_I2C4_Init+0x68>)
9000145e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001460:	4b16      	ldr	r3, [pc, #88]	; (900014bc <BSP_I2C4_Init+0x6c>)
90001462:	681b      	ldr	r3, [r3, #0]
90001464:	2b00      	cmp	r3, #0
90001466:	d11f      	bne.n	900014a8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001468:	4b14      	ldr	r3, [pc, #80]	; (900014bc <BSP_I2C4_Init+0x6c>)
9000146a:	681b      	ldr	r3, [r3, #0]
9000146c:	3301      	adds	r3, #1
9000146e:	4a13      	ldr	r2, [pc, #76]	; (900014bc <BSP_I2C4_Init+0x6c>)
90001470:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001472:	4810      	ldr	r0, [pc, #64]	; (900014b4 <BSP_I2C4_Init+0x64>)
90001474:	f004 fc44 	bl	90005d00 <HAL_I2C_GetState>
90001478:	4603      	mov	r3, r0
9000147a:	2b00      	cmp	r3, #0
9000147c:	d114      	bne.n	900014a8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000147e:	480d      	ldr	r0, [pc, #52]	; (900014b4 <BSP_I2C4_Init+0x64>)
90001480:	f000 fb60 	bl	90001b44 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001484:	f006 fb88 	bl	90007b98 <HAL_RCC_GetPCLK2Freq>
90001488:	4603      	mov	r3, r0
9000148a:	490d      	ldr	r1, [pc, #52]	; (900014c0 <BSP_I2C4_Init+0x70>)
9000148c:	4618      	mov	r0, r3
9000148e:	f000 f8e3 	bl	90001658 <I2C_GetTiming>
90001492:	4603      	mov	r3, r0
90001494:	4619      	mov	r1, r3
90001496:	4807      	ldr	r0, [pc, #28]	; (900014b4 <BSP_I2C4_Init+0x64>)
90001498:	f000 f838 	bl	9000150c <MX_I2C4_Init>
9000149c:	4603      	mov	r3, r0
9000149e:	2b00      	cmp	r3, #0
900014a0:	d002      	beq.n	900014a8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
900014a2:	f06f 0307 	mvn.w	r3, #7
900014a6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
900014a8:	687b      	ldr	r3, [r7, #4]
}
900014aa:	4618      	mov	r0, r3
900014ac:	3708      	adds	r7, #8
900014ae:	46bd      	mov	sp, r7
900014b0:	bd80      	pop	{r7, pc}
900014b2:	bf00      	nop
900014b4:	20000ec8 	.word	0x20000ec8
900014b8:	58001c00 	.word	0x58001c00
900014bc:	200004c0 	.word	0x200004c0
900014c0:	000186a0 	.word	0x000186a0

900014c4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
900014c4:	b580      	push	{r7, lr}
900014c6:	b082      	sub	sp, #8
900014c8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
900014ca:	2300      	movs	r3, #0
900014cc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
900014ce:	4b0d      	ldr	r3, [pc, #52]	; (90001504 <BSP_I2C4_DeInit+0x40>)
900014d0:	681b      	ldr	r3, [r3, #0]
900014d2:	3b01      	subs	r3, #1
900014d4:	4a0b      	ldr	r2, [pc, #44]	; (90001504 <BSP_I2C4_DeInit+0x40>)
900014d6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
900014d8:	4b0a      	ldr	r3, [pc, #40]	; (90001504 <BSP_I2C4_DeInit+0x40>)
900014da:	681b      	ldr	r3, [r3, #0]
900014dc:	2b00      	cmp	r3, #0
900014de:	d10b      	bne.n	900014f8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
900014e0:	4809      	ldr	r0, [pc, #36]	; (90001508 <BSP_I2C4_DeInit+0x44>)
900014e2:	f000 fb9b 	bl	90001c1c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900014e6:	4808      	ldr	r0, [pc, #32]	; (90001508 <BSP_I2C4_DeInit+0x44>)
900014e8:	f004 f998 	bl	9000581c <HAL_I2C_DeInit>
900014ec:	4603      	mov	r3, r0
900014ee:	2b00      	cmp	r3, #0
900014f0:	d002      	beq.n	900014f8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
900014f2:	f06f 0307 	mvn.w	r3, #7
900014f6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
900014f8:	687b      	ldr	r3, [r7, #4]
}
900014fa:	4618      	mov	r0, r3
900014fc:	3708      	adds	r7, #8
900014fe:	46bd      	mov	sp, r7
90001500:	bd80      	pop	{r7, pc}
90001502:	bf00      	nop
90001504:	200004c0 	.word	0x200004c0
90001508:	20000ec8 	.word	0x20000ec8

9000150c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
9000150c:	b580      	push	{r7, lr}
9000150e:	b084      	sub	sp, #16
90001510:	af00      	add	r7, sp, #0
90001512:	6078      	str	r0, [r7, #4]
90001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001516:	2300      	movs	r3, #0
90001518:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000151a:	687b      	ldr	r3, [r7, #4]
9000151c:	683a      	ldr	r2, [r7, #0]
9000151e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001520:	687b      	ldr	r3, [r7, #4]
90001522:	2200      	movs	r2, #0
90001524:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001526:	687b      	ldr	r3, [r7, #4]
90001528:	2201      	movs	r2, #1
9000152a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000152c:	687b      	ldr	r3, [r7, #4]
9000152e:	2200      	movs	r2, #0
90001530:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001532:	687b      	ldr	r3, [r7, #4]
90001534:	2200      	movs	r2, #0
90001536:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001538:	687b      	ldr	r3, [r7, #4]
9000153a:	2200      	movs	r2, #0
9000153c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000153e:	687b      	ldr	r3, [r7, #4]
90001540:	2200      	movs	r2, #0
90001542:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001544:	687b      	ldr	r3, [r7, #4]
90001546:	2200      	movs	r2, #0
90001548:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
9000154a:	6878      	ldr	r0, [r7, #4]
9000154c:	f004 f8d6 	bl	900056fc <HAL_I2C_Init>
90001550:	4603      	mov	r3, r0
90001552:	2b00      	cmp	r3, #0
90001554:	d002      	beq.n	9000155c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001556:	2301      	movs	r3, #1
90001558:	73fb      	strb	r3, [r7, #15]
9000155a:	e014      	b.n	90001586 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
9000155c:	2300      	movs	r3, #0
9000155e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001560:	68b9      	ldr	r1, [r7, #8]
90001562:	6878      	ldr	r0, [r7, #4]
90001564:	f004 fe9e 	bl	900062a4 <HAL_I2CEx_ConfigAnalogFilter>
90001568:	4603      	mov	r3, r0
9000156a:	2b00      	cmp	r3, #0
9000156c:	d002      	beq.n	90001574 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000156e:	2301      	movs	r3, #1
90001570:	73fb      	strb	r3, [r7, #15]
90001572:	e008      	b.n	90001586 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001574:	2100      	movs	r1, #0
90001576:	6878      	ldr	r0, [r7, #4]
90001578:	f004 fedf 	bl	9000633a <HAL_I2CEx_ConfigDigitalFilter>
9000157c:	4603      	mov	r3, r0
9000157e:	2b00      	cmp	r3, #0
90001580:	d001      	beq.n	90001586 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001582:	2301      	movs	r3, #1
90001584:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001586:	7bfb      	ldrb	r3, [r7, #15]
}
90001588:	4618      	mov	r0, r3
9000158a:	3710      	adds	r7, #16
9000158c:	46bd      	mov	sp, r7
9000158e:	bd80      	pop	{r7, pc}

90001590 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001590:	b580      	push	{r7, lr}
90001592:	b088      	sub	sp, #32
90001594:	af02      	add	r7, sp, #8
90001596:	60ba      	str	r2, [r7, #8]
90001598:	461a      	mov	r2, r3
9000159a:	4603      	mov	r3, r0
9000159c:	81fb      	strh	r3, [r7, #14]
9000159e:	460b      	mov	r3, r1
900015a0:	81bb      	strh	r3, [r7, #12]
900015a2:	4613      	mov	r3, r2
900015a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900015a6:	89b9      	ldrh	r1, [r7, #12]
900015a8:	89f8      	ldrh	r0, [r7, #14]
900015aa:	88fb      	ldrh	r3, [r7, #6]
900015ac:	9300      	str	r3, [sp, #0]
900015ae:	68bb      	ldr	r3, [r7, #8]
900015b0:	2201      	movs	r2, #1
900015b2:	f000 fb57 	bl	90001c64 <I2C4_WriteReg>
900015b6:	4603      	mov	r3, r0
900015b8:	2b00      	cmp	r3, #0
900015ba:	d102      	bne.n	900015c2 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900015bc:	2300      	movs	r3, #0
900015be:	617b      	str	r3, [r7, #20]
900015c0:	e00c      	b.n	900015dc <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900015c2:	4809      	ldr	r0, [pc, #36]	; (900015e8 <BSP_I2C4_WriteReg+0x58>)
900015c4:	f004 fbaa 	bl	90005d1c <HAL_I2C_GetError>
900015c8:	4603      	mov	r3, r0
900015ca:	2b04      	cmp	r3, #4
900015cc:	d103      	bne.n	900015d6 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900015ce:	f06f 0365 	mvn.w	r3, #101	; 0x65
900015d2:	617b      	str	r3, [r7, #20]
900015d4:	e002      	b.n	900015dc <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900015d6:	f06f 0303 	mvn.w	r3, #3
900015da:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900015dc:	697b      	ldr	r3, [r7, #20]
}
900015de:	4618      	mov	r0, r3
900015e0:	3718      	adds	r7, #24
900015e2:	46bd      	mov	sp, r7
900015e4:	bd80      	pop	{r7, pc}
900015e6:	bf00      	nop
900015e8:	20000ec8 	.word	0x20000ec8

900015ec <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900015ec:	b580      	push	{r7, lr}
900015ee:	b088      	sub	sp, #32
900015f0:	af02      	add	r7, sp, #8
900015f2:	60ba      	str	r2, [r7, #8]
900015f4:	461a      	mov	r2, r3
900015f6:	4603      	mov	r3, r0
900015f8:	81fb      	strh	r3, [r7, #14]
900015fa:	460b      	mov	r3, r1
900015fc:	81bb      	strh	r3, [r7, #12]
900015fe:	4613      	mov	r3, r2
90001600:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001602:	89b9      	ldrh	r1, [r7, #12]
90001604:	89f8      	ldrh	r0, [r7, #14]
90001606:	88fb      	ldrh	r3, [r7, #6]
90001608:	9300      	str	r3, [sp, #0]
9000160a:	68bb      	ldr	r3, [r7, #8]
9000160c:	2201      	movs	r2, #1
9000160e:	f000 fb4f 	bl	90001cb0 <I2C4_ReadReg>
90001612:	4603      	mov	r3, r0
90001614:	2b00      	cmp	r3, #0
90001616:	d102      	bne.n	9000161e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001618:	2300      	movs	r3, #0
9000161a:	617b      	str	r3, [r7, #20]
9000161c:	e00c      	b.n	90001638 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000161e:	4809      	ldr	r0, [pc, #36]	; (90001644 <BSP_I2C4_ReadReg+0x58>)
90001620:	f004 fb7c 	bl	90005d1c <HAL_I2C_GetError>
90001624:	4603      	mov	r3, r0
90001626:	2b04      	cmp	r3, #4
90001628:	d103      	bne.n	90001632 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
9000162a:	f06f 0365 	mvn.w	r3, #101	; 0x65
9000162e:	617b      	str	r3, [r7, #20]
90001630:	e002      	b.n	90001638 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001632:	f06f 0303 	mvn.w	r3, #3
90001636:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001638:	697b      	ldr	r3, [r7, #20]
}
9000163a:	4618      	mov	r0, r3
9000163c:	3718      	adds	r7, #24
9000163e:	46bd      	mov	sp, r7
90001640:	bd80      	pop	{r7, pc}
90001642:	bf00      	nop
90001644:	20000ec8 	.word	0x20000ec8

90001648 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90001648:	b580      	push	{r7, lr}
9000164a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
9000164c:	f001 fec4 	bl	900033d8 <HAL_GetTick>
90001650:	4603      	mov	r3, r0
}
90001652:	4618      	mov	r0, r3
90001654:	bd80      	pop	{r7, pc}
	...

90001658 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001658:	b580      	push	{r7, lr}
9000165a:	b086      	sub	sp, #24
9000165c:	af00      	add	r7, sp, #0
9000165e:	6078      	str	r0, [r7, #4]
90001660:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001662:	2300      	movs	r3, #0
90001664:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001666:	687b      	ldr	r3, [r7, #4]
90001668:	2b00      	cmp	r3, #0
9000166a:	d06b      	beq.n	90001744 <I2C_GetTiming+0xec>
9000166c:	683b      	ldr	r3, [r7, #0]
9000166e:	2b00      	cmp	r3, #0
90001670:	d068      	beq.n	90001744 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001672:	2300      	movs	r3, #0
90001674:	613b      	str	r3, [r7, #16]
90001676:	e060      	b.n	9000173a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001678:	4a35      	ldr	r2, [pc, #212]	; (90001750 <I2C_GetTiming+0xf8>)
9000167a:	693b      	ldr	r3, [r7, #16]
9000167c:	212c      	movs	r1, #44	; 0x2c
9000167e:	fb01 f303 	mul.w	r3, r1, r3
90001682:	4413      	add	r3, r2
90001684:	3304      	adds	r3, #4
90001686:	681b      	ldr	r3, [r3, #0]
90001688:	683a      	ldr	r2, [r7, #0]
9000168a:	429a      	cmp	r2, r3
9000168c:	d352      	bcc.n	90001734 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
9000168e:	4a30      	ldr	r2, [pc, #192]	; (90001750 <I2C_GetTiming+0xf8>)
90001690:	693b      	ldr	r3, [r7, #16]
90001692:	212c      	movs	r1, #44	; 0x2c
90001694:	fb01 f303 	mul.w	r3, r1, r3
90001698:	4413      	add	r3, r2
9000169a:	3308      	adds	r3, #8
9000169c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
9000169e:	683a      	ldr	r2, [r7, #0]
900016a0:	429a      	cmp	r2, r3
900016a2:	d847      	bhi.n	90001734 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
900016a4:	6939      	ldr	r1, [r7, #16]
900016a6:	6878      	ldr	r0, [r7, #4]
900016a8:	f000 f856 	bl	90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
900016ac:	6939      	ldr	r1, [r7, #16]
900016ae:	6878      	ldr	r0, [r7, #4]
900016b0:	f000 f940 	bl	90001934 <I2C_Compute_SCLL_SCLH>
900016b4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900016b6:	68fb      	ldr	r3, [r7, #12]
900016b8:	2b7f      	cmp	r3, #127	; 0x7f
900016ba:	d842      	bhi.n	90001742 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900016bc:	4925      	ldr	r1, [pc, #148]	; (90001754 <I2C_GetTiming+0xfc>)
900016be:	68fa      	ldr	r2, [r7, #12]
900016c0:	4613      	mov	r3, r2
900016c2:	009b      	lsls	r3, r3, #2
900016c4:	4413      	add	r3, r2
900016c6:	009b      	lsls	r3, r3, #2
900016c8:	440b      	add	r3, r1
900016ca:	681b      	ldr	r3, [r3, #0]
900016cc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900016ce:	4821      	ldr	r0, [pc, #132]	; (90001754 <I2C_GetTiming+0xfc>)
900016d0:	68fa      	ldr	r2, [r7, #12]
900016d2:	4613      	mov	r3, r2
900016d4:	009b      	lsls	r3, r3, #2
900016d6:	4413      	add	r3, r2
900016d8:	009b      	lsls	r3, r3, #2
900016da:	4403      	add	r3, r0
900016dc:	3304      	adds	r3, #4
900016de:	681b      	ldr	r3, [r3, #0]
900016e0:	051b      	lsls	r3, r3, #20
900016e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900016e6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900016e8:	481a      	ldr	r0, [pc, #104]	; (90001754 <I2C_GetTiming+0xfc>)
900016ea:	68fa      	ldr	r2, [r7, #12]
900016ec:	4613      	mov	r3, r2
900016ee:	009b      	lsls	r3, r3, #2
900016f0:	4413      	add	r3, r2
900016f2:	009b      	lsls	r3, r3, #2
900016f4:	4403      	add	r3, r0
900016f6:	3308      	adds	r3, #8
900016f8:	681b      	ldr	r3, [r3, #0]
900016fa:	041b      	lsls	r3, r3, #16
900016fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90001700:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90001702:	4814      	ldr	r0, [pc, #80]	; (90001754 <I2C_GetTiming+0xfc>)
90001704:	68fa      	ldr	r2, [r7, #12]
90001706:	4613      	mov	r3, r2
90001708:	009b      	lsls	r3, r3, #2
9000170a:	4413      	add	r3, r2
9000170c:	009b      	lsls	r3, r3, #2
9000170e:	4403      	add	r3, r0
90001710:	330c      	adds	r3, #12
90001712:	681b      	ldr	r3, [r3, #0]
90001714:	021b      	lsls	r3, r3, #8
90001716:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001718:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
9000171a:	480e      	ldr	r0, [pc, #56]	; (90001754 <I2C_GetTiming+0xfc>)
9000171c:	68fa      	ldr	r2, [r7, #12]
9000171e:	4613      	mov	r3, r2
90001720:	009b      	lsls	r3, r3, #2
90001722:	4413      	add	r3, r2
90001724:	009b      	lsls	r3, r3, #2
90001726:	4403      	add	r3, r0
90001728:	3310      	adds	r3, #16
9000172a:	681b      	ldr	r3, [r3, #0]
9000172c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000172e:	430b      	orrs	r3, r1
90001730:	617b      	str	r3, [r7, #20]
        }
        break;
90001732:	e006      	b.n	90001742 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001734:	693b      	ldr	r3, [r7, #16]
90001736:	3301      	adds	r3, #1
90001738:	613b      	str	r3, [r7, #16]
9000173a:	693b      	ldr	r3, [r7, #16]
9000173c:	2b02      	cmp	r3, #2
9000173e:	d99b      	bls.n	90001678 <I2C_GetTiming+0x20>
90001740:	e000      	b.n	90001744 <I2C_GetTiming+0xec>
        break;
90001742:	bf00      	nop
      }
    }
  }

  return ret;
90001744:	697b      	ldr	r3, [r7, #20]
}
90001746:	4618      	mov	r0, r3
90001748:	3718      	adds	r7, #24
9000174a:	46bd      	mov	sp, r7
9000174c:	bd80      	pop	{r7, pc}
9000174e:	bf00      	nop
90001750:	9000e340 	.word	0x9000e340
90001754:	200004c4 	.word	0x200004c4

90001758 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001758:	b480      	push	{r7}
9000175a:	b08f      	sub	sp, #60	; 0x3c
9000175c:	af00      	add	r7, sp, #0
9000175e:	6078      	str	r0, [r7, #4]
90001760:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001762:	2310      	movs	r3, #16
90001764:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001766:	687b      	ldr	r3, [r7, #4]
90001768:	085a      	lsrs	r2, r3, #1
9000176a:	4b6e      	ldr	r3, [pc, #440]	; (90001924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
9000176c:	4413      	add	r3, r2
9000176e:	687a      	ldr	r2, [r7, #4]
90001770:	fbb3 f3f2 	udiv	r3, r3, r2
90001774:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001776:	2332      	movs	r3, #50	; 0x32
90001778:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
9000177a:	f44f 7382 	mov.w	r3, #260	; 0x104
9000177e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001780:	4a69      	ldr	r2, [pc, #420]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001782:	683b      	ldr	r3, [r7, #0]
90001784:	212c      	movs	r1, #44	; 0x2c
90001786:	fb01 f303 	mul.w	r3, r1, r3
9000178a:	4413      	add	r3, r2
9000178c:	3324      	adds	r3, #36	; 0x24
9000178e:	681b      	ldr	r3, [r3, #0]
90001790:	4618      	mov	r0, r3
90001792:	4a65      	ldr	r2, [pc, #404]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001794:	683b      	ldr	r3, [r7, #0]
90001796:	212c      	movs	r1, #44	; 0x2c
90001798:	fb01 f303 	mul.w	r3, r1, r3
9000179c:	4413      	add	r3, r2
9000179e:	330c      	adds	r3, #12
900017a0:	681b      	ldr	r3, [r3, #0]
900017a2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900017a4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900017a6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900017a8:	495f      	ldr	r1, [pc, #380]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017aa:	683b      	ldr	r3, [r7, #0]
900017ac:	202c      	movs	r0, #44	; 0x2c
900017ae:	fb00 f303 	mul.w	r3, r0, r3
900017b2:	440b      	add	r3, r1
900017b4:	3328      	adds	r3, #40	; 0x28
900017b6:	681b      	ldr	r3, [r3, #0]
900017b8:	3303      	adds	r3, #3
900017ba:	69f9      	ldr	r1, [r7, #28]
900017bc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900017c0:	1ad3      	subs	r3, r2, r3
900017c2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900017c4:	4a58      	ldr	r2, [pc, #352]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017c6:	683b      	ldr	r3, [r7, #0]
900017c8:	212c      	movs	r1, #44	; 0x2c
900017ca:	fb01 f303 	mul.w	r3, r1, r3
900017ce:	4413      	add	r3, r2
900017d0:	3310      	adds	r3, #16
900017d2:	681b      	ldr	r3, [r3, #0]
900017d4:	4618      	mov	r0, r3
900017d6:	4a54      	ldr	r2, [pc, #336]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017d8:	683b      	ldr	r3, [r7, #0]
900017da:	212c      	movs	r1, #44	; 0x2c
900017dc:	fb01 f303 	mul.w	r3, r1, r3
900017e0:	4413      	add	r3, r2
900017e2:	3320      	adds	r3, #32
900017e4:	681b      	ldr	r3, [r3, #0]
900017e6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900017e8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900017ea:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900017ec:	494e      	ldr	r1, [pc, #312]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017ee:	683b      	ldr	r3, [r7, #0]
900017f0:	202c      	movs	r0, #44	; 0x2c
900017f2:	fb00 f303 	mul.w	r3, r0, r3
900017f6:	440b      	add	r3, r1
900017f8:	3328      	adds	r3, #40	; 0x28
900017fa:	681b      	ldr	r3, [r3, #0]
900017fc:	3304      	adds	r3, #4
900017fe:	69f9      	ldr	r1, [r7, #28]
90001800:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90001804:	1ad3      	subs	r3, r2, r3
90001806:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
90001808:	4a47      	ldr	r2, [pc, #284]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000180a:	683b      	ldr	r3, [r7, #0]
9000180c:	212c      	movs	r1, #44	; 0x2c
9000180e:	fb01 f303 	mul.w	r3, r1, r3
90001812:	4413      	add	r3, r2
90001814:	3320      	adds	r3, #32
90001816:	681b      	ldr	r3, [r3, #0]
90001818:	4618      	mov	r0, r3
9000181a:	4a43      	ldr	r2, [pc, #268]	; (90001928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000181c:	683b      	ldr	r3, [r7, #0]
9000181e:	212c      	movs	r1, #44	; 0x2c
90001820:	fb01 f303 	mul.w	r3, r1, r3
90001824:	4413      	add	r3, r2
90001826:	3314      	adds	r3, #20
90001828:	681b      	ldr	r3, [r3, #0]
9000182a:	4403      	add	r3, r0
9000182c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
9000182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001830:	2b00      	cmp	r3, #0
90001832:	dc01      	bgt.n	90001838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001834:	2300      	movs	r3, #0
90001836:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
90001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000183a:	2b00      	cmp	r3, #0
9000183c:	dc01      	bgt.n	90001842 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
9000183e:	2300      	movs	r3, #0
90001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001842:	2300      	movs	r3, #0
90001844:	62bb      	str	r3, [r7, #40]	; 0x28
90001846:	e062      	b.n	9000190e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001848:	2300      	movs	r3, #0
9000184a:	627b      	str	r3, [r7, #36]	; 0x24
9000184c:	e059      	b.n	90001902 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
9000184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001850:	3301      	adds	r3, #1
90001852:	6aba      	ldr	r2, [r7, #40]	; 0x28
90001854:	3201      	adds	r2, #1
90001856:	fb03 f202 	mul.w	r2, r3, r2
9000185a:	69fb      	ldr	r3, [r7, #28]
9000185c:	fb02 f303 	mul.w	r3, r2, r3
90001860:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001862:	693b      	ldr	r3, [r7, #16]
90001864:	68fa      	ldr	r2, [r7, #12]
90001866:	429a      	cmp	r2, r3
90001868:	d348      	bcc.n	900018fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000186a:	2300      	movs	r3, #0
9000186c:	623b      	str	r3, [r7, #32]
9000186e:	e042      	b.n	900018f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001872:	3301      	adds	r3, #1
90001874:	6a3a      	ldr	r2, [r7, #32]
90001876:	fb03 f202 	mul.w	r2, r3, r2
9000187a:	69fb      	ldr	r3, [r7, #28]
9000187c:	fb02 f303 	mul.w	r3, r2, r3
90001880:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001884:	68ba      	ldr	r2, [r7, #8]
90001886:	429a      	cmp	r2, r3
90001888:	d332      	bcc.n	900018f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
9000188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000188c:	68ba      	ldr	r2, [r7, #8]
9000188e:	429a      	cmp	r2, r3
90001890:	d82e      	bhi.n	900018f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001892:	6aba      	ldr	r2, [r7, #40]	; 0x28
90001894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001896:	429a      	cmp	r2, r3
90001898:	d02a      	beq.n	900018f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000189a:	4b24      	ldr	r3, [pc, #144]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000189c:	681a      	ldr	r2, [r3, #0]
9000189e:	4924      	ldr	r1, [pc, #144]	; (90001930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900018a0:	4613      	mov	r3, r2
900018a2:	009b      	lsls	r3, r3, #2
900018a4:	4413      	add	r3, r2
900018a6:	009b      	lsls	r3, r3, #2
900018a8:	440b      	add	r3, r1
900018aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
900018ac:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900018ae:	4b1f      	ldr	r3, [pc, #124]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018b0:	681a      	ldr	r2, [r3, #0]
900018b2:	491f      	ldr	r1, [pc, #124]	; (90001930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900018b4:	4613      	mov	r3, r2
900018b6:	009b      	lsls	r3, r3, #2
900018b8:	4413      	add	r3, r2
900018ba:	009b      	lsls	r3, r3, #2
900018bc:	440b      	add	r3, r1
900018be:	3304      	adds	r3, #4
900018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900018c2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900018c4:	4b19      	ldr	r3, [pc, #100]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018c6:	681a      	ldr	r2, [r3, #0]
900018c8:	4919      	ldr	r1, [pc, #100]	; (90001930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900018ca:	4613      	mov	r3, r2
900018cc:	009b      	lsls	r3, r3, #2
900018ce:	4413      	add	r3, r2
900018d0:	009b      	lsls	r3, r3, #2
900018d2:	440b      	add	r3, r1
900018d4:	3308      	adds	r3, #8
900018d6:	6a3a      	ldr	r2, [r7, #32]
900018d8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
900018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
900018dc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
900018de:	4b13      	ldr	r3, [pc, #76]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018e0:	681b      	ldr	r3, [r3, #0]
900018e2:	3301      	adds	r3, #1
900018e4:	4a11      	ldr	r2, [pc, #68]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018e6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900018e8:	4b10      	ldr	r3, [pc, #64]	; (9000192c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018ea:	681b      	ldr	r3, [r3, #0]
900018ec:	2b7f      	cmp	r3, #127	; 0x7f
900018ee:	d812      	bhi.n	90001916 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900018f0:	6a3b      	ldr	r3, [r7, #32]
900018f2:	3301      	adds	r3, #1
900018f4:	623b      	str	r3, [r7, #32]
900018f6:	6a3b      	ldr	r3, [r7, #32]
900018f8:	2b0f      	cmp	r3, #15
900018fa:	d9b9      	bls.n	90001870 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900018fe:	3301      	adds	r3, #1
90001900:	627b      	str	r3, [r7, #36]	; 0x24
90001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001904:	2b0f      	cmp	r3, #15
90001906:	d9a2      	bls.n	9000184e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000190a:	3301      	adds	r3, #1
9000190c:	62bb      	str	r3, [r7, #40]	; 0x28
9000190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001910:	2b0f      	cmp	r3, #15
90001912:	d999      	bls.n	90001848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001914:	e000      	b.n	90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001916:	bf00      	nop
          }
        }
      }
    }
  }
}
90001918:	373c      	adds	r7, #60	; 0x3c
9000191a:	46bd      	mov	sp, r7
9000191c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001920:	4770      	bx	lr
90001922:	bf00      	nop
90001924:	3b9aca00 	.word	0x3b9aca00
90001928:	9000e340 	.word	0x9000e340
9000192c:	20000ec4 	.word	0x20000ec4
90001930:	200004c4 	.word	0x200004c4

90001934 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001934:	b480      	push	{r7}
90001936:	b093      	sub	sp, #76	; 0x4c
90001938:	af00      	add	r7, sp, #0
9000193a:	6078      	str	r0, [r7, #4]
9000193c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
9000193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90001942:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001944:	687b      	ldr	r3, [r7, #4]
90001946:	085a      	lsrs	r2, r3, #1
90001948:	4b7a      	ldr	r3, [pc, #488]	; (90001b34 <I2C_Compute_SCLL_SCLH+0x200>)
9000194a:	4413      	add	r3, r2
9000194c:	687a      	ldr	r2, [r7, #4]
9000194e:	fbb3 f3f2 	udiv	r3, r3, r2
90001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001954:	4a78      	ldr	r2, [pc, #480]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001956:	683b      	ldr	r3, [r7, #0]
90001958:	212c      	movs	r1, #44	; 0x2c
9000195a:	fb01 f303 	mul.w	r3, r1, r3
9000195e:	4413      	add	r3, r2
90001960:	681b      	ldr	r3, [r3, #0]
90001962:	085a      	lsrs	r2, r3, #1
90001964:	4b73      	ldr	r3, [pc, #460]	; (90001b34 <I2C_Compute_SCLL_SCLH+0x200>)
90001966:	4413      	add	r3, r2
90001968:	4973      	ldr	r1, [pc, #460]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
9000196a:	683a      	ldr	r2, [r7, #0]
9000196c:	202c      	movs	r0, #44	; 0x2c
9000196e:	fb00 f202 	mul.w	r2, r0, r2
90001972:	440a      	add	r2, r1
90001974:	6812      	ldr	r2, [r2, #0]
90001976:	fbb3 f3f2 	udiv	r3, r3, r2
9000197a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
9000197c:	2332      	movs	r3, #50	; 0x32
9000197e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001980:	4a6d      	ldr	r2, [pc, #436]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001982:	683b      	ldr	r3, [r7, #0]
90001984:	212c      	movs	r1, #44	; 0x2c
90001986:	fb01 f303 	mul.w	r3, r1, r3
9000198a:	4413      	add	r3, r2
9000198c:	3328      	adds	r3, #40	; 0x28
9000198e:	681a      	ldr	r2, [r3, #0]
90001990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001992:	fb02 f303 	mul.w	r3, r2, r3
90001996:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001998:	4a67      	ldr	r2, [pc, #412]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
9000199a:	683b      	ldr	r3, [r7, #0]
9000199c:	212c      	movs	r1, #44	; 0x2c
9000199e:	fb01 f303 	mul.w	r3, r1, r3
900019a2:	4413      	add	r3, r2
900019a4:	3304      	adds	r3, #4
900019a6:	681b      	ldr	r3, [r3, #0]
900019a8:	4a62      	ldr	r2, [pc, #392]	; (90001b34 <I2C_Compute_SCLL_SCLH+0x200>)
900019aa:	fbb2 f3f3 	udiv	r3, r2, r3
900019ae:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
900019b0:	4a61      	ldr	r2, [pc, #388]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
900019b2:	683b      	ldr	r3, [r7, #0]
900019b4:	212c      	movs	r1, #44	; 0x2c
900019b6:	fb01 f303 	mul.w	r3, r1, r3
900019ba:	4413      	add	r3, r2
900019bc:	3308      	adds	r3, #8
900019be:	681b      	ldr	r3, [r3, #0]
900019c0:	4a5c      	ldr	r2, [pc, #368]	; (90001b34 <I2C_Compute_SCLL_SCLH+0x200>)
900019c2:	fbb2 f3f3 	udiv	r3, r2, r3
900019c6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
900019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900019ca:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900019cc:	2300      	movs	r3, #0
900019ce:	637b      	str	r3, [r7, #52]	; 0x34
900019d0:	e0a3      	b.n	90001b1a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900019d2:	495a      	ldr	r1, [pc, #360]	; (90001b3c <I2C_Compute_SCLL_SCLH+0x208>)
900019d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900019d6:	4613      	mov	r3, r2
900019d8:	009b      	lsls	r3, r3, #2
900019da:	4413      	add	r3, r2
900019dc:	009b      	lsls	r3, r3, #2
900019de:	440b      	add	r3, r1
900019e0:	681b      	ldr	r3, [r3, #0]
900019e2:	1c5a      	adds	r2, r3, #1
900019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900019e6:	fb02 f303 	mul.w	r3, r2, r3
900019ea:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900019ec:	2300      	movs	r3, #0
900019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
900019f0:	e08c      	b.n	90001b0c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900019f4:	6a3b      	ldr	r3, [r7, #32]
900019f6:	441a      	add	r2, r3
900019f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900019fa:	3301      	adds	r3, #1
900019fc:	6979      	ldr	r1, [r7, #20]
900019fe:	fb03 f101 	mul.w	r1, r3, r1
90001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001a04:	005b      	lsls	r3, r3, #1
90001a06:	440b      	add	r3, r1
90001a08:	4413      	add	r3, r2
90001a0a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90001a0c:	4a4a      	ldr	r2, [pc, #296]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001a0e:	683b      	ldr	r3, [r7, #0]
90001a10:	212c      	movs	r1, #44	; 0x2c
90001a12:	fb01 f303 	mul.w	r3, r1, r3
90001a16:	4413      	add	r3, r2
90001a18:	3318      	adds	r3, #24
90001a1a:	681b      	ldr	r3, [r3, #0]
90001a1c:	693a      	ldr	r2, [r7, #16]
90001a1e:	429a      	cmp	r2, r3
90001a20:	d971      	bls.n	90001b06 <I2C_Compute_SCLL_SCLH+0x1d2>
90001a22:	693a      	ldr	r2, [r7, #16]
90001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001a26:	1ad2      	subs	r2, r2, r3
90001a28:	6a3b      	ldr	r3, [r7, #32]
90001a2a:	1ad3      	subs	r3, r2, r3
90001a2c:	089b      	lsrs	r3, r3, #2
90001a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90001a30:	429a      	cmp	r2, r3
90001a32:	d268      	bcs.n	90001b06 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001a34:	2300      	movs	r3, #0
90001a36:	63bb      	str	r3, [r7, #56]	; 0x38
90001a38:	e062      	b.n	90001b00 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90001a3c:	6a3b      	ldr	r3, [r7, #32]
90001a3e:	441a      	add	r2, r3
90001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001a42:	3301      	adds	r3, #1
90001a44:	6979      	ldr	r1, [r7, #20]
90001a46:	fb03 f101 	mul.w	r1, r3, r1
90001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001a4c:	005b      	lsls	r3, r3, #1
90001a4e:	440b      	add	r3, r1
90001a50:	4413      	add	r3, r2
90001a52:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001a54:	693a      	ldr	r2, [r7, #16]
90001a56:	68fb      	ldr	r3, [r7, #12]
90001a58:	441a      	add	r2, r3
90001a5a:	4937      	ldr	r1, [pc, #220]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001a5c:	683b      	ldr	r3, [r7, #0]
90001a5e:	202c      	movs	r0, #44	; 0x2c
90001a60:	fb00 f303 	mul.w	r3, r0, r3
90001a64:	440b      	add	r3, r1
90001a66:	3320      	adds	r3, #32
90001a68:	681b      	ldr	r3, [r3, #0]
90001a6a:	441a      	add	r2, r3
90001a6c:	4932      	ldr	r1, [pc, #200]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001a6e:	683b      	ldr	r3, [r7, #0]
90001a70:	202c      	movs	r0, #44	; 0x2c
90001a72:	fb00 f303 	mul.w	r3, r0, r3
90001a76:	440b      	add	r3, r1
90001a78:	3324      	adds	r3, #36	; 0x24
90001a7a:	681b      	ldr	r3, [r3, #0]
90001a7c:	4413      	add	r3, r2
90001a7e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001a80:	68ba      	ldr	r2, [r7, #8]
90001a82:	69bb      	ldr	r3, [r7, #24]
90001a84:	429a      	cmp	r2, r3
90001a86:	d338      	bcc.n	90001afa <I2C_Compute_SCLL_SCLH+0x1c6>
90001a88:	68ba      	ldr	r2, [r7, #8]
90001a8a:	69fb      	ldr	r3, [r7, #28]
90001a8c:	429a      	cmp	r2, r3
90001a8e:	d834      	bhi.n	90001afa <I2C_Compute_SCLL_SCLH+0x1c6>
90001a90:	4a29      	ldr	r2, [pc, #164]	; (90001b38 <I2C_Compute_SCLL_SCLH+0x204>)
90001a92:	683b      	ldr	r3, [r7, #0]
90001a94:	212c      	movs	r1, #44	; 0x2c
90001a96:	fb01 f303 	mul.w	r3, r1, r3
90001a9a:	4413      	add	r3, r2
90001a9c:	331c      	adds	r3, #28
90001a9e:	681b      	ldr	r3, [r3, #0]
90001aa0:	68fa      	ldr	r2, [r7, #12]
90001aa2:	429a      	cmp	r2, r3
90001aa4:	d329      	bcc.n	90001afa <I2C_Compute_SCLL_SCLH+0x1c6>
90001aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90001aa8:	68fb      	ldr	r3, [r7, #12]
90001aaa:	429a      	cmp	r2, r3
90001aac:	d225      	bcs.n	90001afa <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001aae:	68ba      	ldr	r2, [r7, #8]
90001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001ab2:	1ad3      	subs	r3, r2, r3
90001ab4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
90001ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001ab8:	2b00      	cmp	r3, #0
90001aba:	da02      	bge.n	90001ac2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001abe:	425b      	negs	r3, r3
90001ac0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
90001ac6:	429a      	cmp	r2, r3
90001ac8:	d917      	bls.n	90001afa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001acc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
90001ace:	491b      	ldr	r1, [pc, #108]	; (90001b3c <I2C_Compute_SCLL_SCLH+0x208>)
90001ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001ad2:	4613      	mov	r3, r2
90001ad4:	009b      	lsls	r3, r3, #2
90001ad6:	4413      	add	r3, r2
90001ad8:	009b      	lsls	r3, r3, #2
90001ada:	440b      	add	r3, r1
90001adc:	3310      	adds	r3, #16
90001ade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
90001ae0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001ae2:	4916      	ldr	r1, [pc, #88]	; (90001b3c <I2C_Compute_SCLL_SCLH+0x208>)
90001ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001ae6:	4613      	mov	r3, r2
90001ae8:	009b      	lsls	r3, r3, #2
90001aea:	4413      	add	r3, r2
90001aec:	009b      	lsls	r3, r3, #2
90001aee:	440b      	add	r3, r1
90001af0:	330c      	adds	r3, #12
90001af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
90001af4:	601a      	str	r2, [r3, #0]
              ret = count;
90001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001af8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001afc:	3301      	adds	r3, #1
90001afe:	63bb      	str	r3, [r7, #56]	; 0x38
90001b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001b02:	2bff      	cmp	r3, #255	; 0xff
90001b04:	d999      	bls.n	90001a3a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001b08:	3301      	adds	r3, #1
90001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
90001b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001b0e:	2bff      	cmp	r3, #255	; 0xff
90001b10:	f67f af6f 	bls.w	900019f2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001b16:	3301      	adds	r3, #1
90001b18:	637b      	str	r3, [r7, #52]	; 0x34
90001b1a:	4b09      	ldr	r3, [pc, #36]	; (90001b40 <I2C_Compute_SCLL_SCLH+0x20c>)
90001b1c:	681b      	ldr	r3, [r3, #0]
90001b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001b20:	429a      	cmp	r2, r3
90001b22:	f4ff af56 	bcc.w	900019d2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
90001b28:	4618      	mov	r0, r3
90001b2a:	374c      	adds	r7, #76	; 0x4c
90001b2c:	46bd      	mov	sp, r7
90001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b32:	4770      	bx	lr
90001b34:	3b9aca00 	.word	0x3b9aca00
90001b38:	9000e340 	.word	0x9000e340
90001b3c:	200004c4 	.word	0x200004c4
90001b40:	20000ec4 	.word	0x20000ec4

90001b44 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001b44:	b580      	push	{r7, lr}
90001b46:	b08a      	sub	sp, #40	; 0x28
90001b48:	af00      	add	r7, sp, #0
90001b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001b4c:	4b31      	ldr	r3, [pc, #196]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b52:	4a30      	ldr	r2, [pc, #192]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b54:	f043 0308 	orr.w	r3, r3, #8
90001b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b5c:	4b2d      	ldr	r3, [pc, #180]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b62:	f003 0308 	and.w	r3, r3, #8
90001b66:	613b      	str	r3, [r7, #16]
90001b68:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001b6a:	4b2a      	ldr	r3, [pc, #168]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b70:	4a28      	ldr	r2, [pc, #160]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b72:	f043 0308 	orr.w	r3, r3, #8
90001b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b7a:	4b26      	ldr	r3, [pc, #152]	; (90001c14 <I2C4_MspInit+0xd0>)
90001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b80:	f003 0308 	and.w	r3, r3, #8
90001b84:	60fb      	str	r3, [r7, #12]
90001b86:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001b8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001b8e:	2312      	movs	r3, #18
90001b90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001b92:	2300      	movs	r3, #0
90001b94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001b96:	2302      	movs	r3, #2
90001b98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001b9a:	2304      	movs	r3, #4
90001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001b9e:	f107 0314 	add.w	r3, r7, #20
90001ba2:	4619      	mov	r1, r3
90001ba4:	481c      	ldr	r0, [pc, #112]	; (90001c18 <I2C4_MspInit+0xd4>)
90001ba6:	f002 f8a1 	bl	90003cec <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001bae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001bb0:	2312      	movs	r3, #18
90001bb2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001bb4:	2300      	movs	r3, #0
90001bb6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001bb8:	2302      	movs	r3, #2
90001bba:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001bbc:	2304      	movs	r3, #4
90001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001bc0:	f107 0314 	add.w	r3, r7, #20
90001bc4:	4619      	mov	r1, r3
90001bc6:	4814      	ldr	r0, [pc, #80]	; (90001c18 <I2C4_MspInit+0xd4>)
90001bc8:	f002 f890 	bl	90003cec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001bcc:	4b11      	ldr	r3, [pc, #68]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001bd2:	4a10      	ldr	r2, [pc, #64]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001bdc:	4b0d      	ldr	r3, [pc, #52]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001be6:	60bb      	str	r3, [r7, #8]
90001be8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001bea:	4b0a      	ldr	r3, [pc, #40]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90001bf0:	4a08      	ldr	r2, [pc, #32]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001bf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001bfa:	4b06      	ldr	r3, [pc, #24]	; (90001c14 <I2C4_MspInit+0xd0>)
90001bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90001c00:	4a04      	ldr	r2, [pc, #16]	; (90001c14 <I2C4_MspInit+0xd0>)
90001c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90001c06:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
90001c0a:	bf00      	nop
90001c0c:	3728      	adds	r7, #40	; 0x28
90001c0e:	46bd      	mov	sp, r7
90001c10:	bd80      	pop	{r7, pc}
90001c12:	bf00      	nop
90001c14:	58024400 	.word	0x58024400
90001c18:	58020c00 	.word	0x58020c00

90001c1c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
90001c1c:	b580      	push	{r7, lr}
90001c1e:	b088      	sub	sp, #32
90001c20:	af00      	add	r7, sp, #0
90001c22:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001c28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90001c2a:	68fb      	ldr	r3, [r7, #12]
90001c2c:	4619      	mov	r1, r3
90001c2e:	480b      	ldr	r0, [pc, #44]	; (90001c5c <I2C4_MspDeInit+0x40>)
90001c30:	f002 fa0c 	bl	9000404c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90001c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001c38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90001c3a:	68fb      	ldr	r3, [r7, #12]
90001c3c:	4619      	mov	r1, r3
90001c3e:	4807      	ldr	r0, [pc, #28]	; (90001c5c <I2C4_MspDeInit+0x40>)
90001c40:	f002 fa04 	bl	9000404c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90001c44:	4b06      	ldr	r3, [pc, #24]	; (90001c60 <I2C4_MspDeInit+0x44>)
90001c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001c4a:	4a05      	ldr	r2, [pc, #20]	; (90001c60 <I2C4_MspDeInit+0x44>)
90001c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90001c50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
90001c54:	bf00      	nop
90001c56:	3720      	adds	r7, #32
90001c58:	46bd      	mov	sp, r7
90001c5a:	bd80      	pop	{r7, pc}
90001c5c:	58020c00 	.word	0x58020c00
90001c60:	58024400 	.word	0x58024400

90001c64 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001c64:	b580      	push	{r7, lr}
90001c66:	b088      	sub	sp, #32
90001c68:	af04      	add	r7, sp, #16
90001c6a:	607b      	str	r3, [r7, #4]
90001c6c:	4603      	mov	r3, r0
90001c6e:	81fb      	strh	r3, [r7, #14]
90001c70:	460b      	mov	r3, r1
90001c72:	81bb      	strh	r3, [r7, #12]
90001c74:	4613      	mov	r3, r2
90001c76:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001c78:	8978      	ldrh	r0, [r7, #10]
90001c7a:	89ba      	ldrh	r2, [r7, #12]
90001c7c:	89f9      	ldrh	r1, [r7, #14]
90001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001c82:	9302      	str	r3, [sp, #8]
90001c84:	8b3b      	ldrh	r3, [r7, #24]
90001c86:	9301      	str	r3, [sp, #4]
90001c88:	687b      	ldr	r3, [r7, #4]
90001c8a:	9300      	str	r3, [sp, #0]
90001c8c:	4603      	mov	r3, r0
90001c8e:	4807      	ldr	r0, [pc, #28]	; (90001cac <I2C4_WriteReg+0x48>)
90001c90:	f003 fe08 	bl	900058a4 <HAL_I2C_Mem_Write>
90001c94:	4603      	mov	r3, r0
90001c96:	2b00      	cmp	r3, #0
90001c98:	d101      	bne.n	90001c9e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001c9a:	2300      	movs	r3, #0
90001c9c:	e001      	b.n	90001ca2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001c9e:	f06f 0307 	mvn.w	r3, #7
}
90001ca2:	4618      	mov	r0, r3
90001ca4:	3710      	adds	r7, #16
90001ca6:	46bd      	mov	sp, r7
90001ca8:	bd80      	pop	{r7, pc}
90001caa:	bf00      	nop
90001cac:	20000ec8 	.word	0x20000ec8

90001cb0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001cb0:	b580      	push	{r7, lr}
90001cb2:	b088      	sub	sp, #32
90001cb4:	af04      	add	r7, sp, #16
90001cb6:	607b      	str	r3, [r7, #4]
90001cb8:	4603      	mov	r3, r0
90001cba:	81fb      	strh	r3, [r7, #14]
90001cbc:	460b      	mov	r3, r1
90001cbe:	81bb      	strh	r3, [r7, #12]
90001cc0:	4613      	mov	r3, r2
90001cc2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001cc4:	8978      	ldrh	r0, [r7, #10]
90001cc6:	89ba      	ldrh	r2, [r7, #12]
90001cc8:	89f9      	ldrh	r1, [r7, #14]
90001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001cce:	9302      	str	r3, [sp, #8]
90001cd0:	8b3b      	ldrh	r3, [r7, #24]
90001cd2:	9301      	str	r3, [sp, #4]
90001cd4:	687b      	ldr	r3, [r7, #4]
90001cd6:	9300      	str	r3, [sp, #0]
90001cd8:	4603      	mov	r3, r0
90001cda:	4807      	ldr	r0, [pc, #28]	; (90001cf8 <I2C4_ReadReg+0x48>)
90001cdc:	f003 fef6 	bl	90005acc <HAL_I2C_Mem_Read>
90001ce0:	4603      	mov	r3, r0
90001ce2:	2b00      	cmp	r3, #0
90001ce4:	d101      	bne.n	90001cea <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001ce6:	2300      	movs	r3, #0
90001ce8:	e001      	b.n	90001cee <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001cea:	f06f 0307 	mvn.w	r3, #7
}
90001cee:	4618      	mov	r0, r3
90001cf0:	3710      	adds	r7, #16
90001cf2:	46bd      	mov	sp, r7
90001cf4:	bd80      	pop	{r7, pc}
90001cf6:	bf00      	nop
90001cf8:	20000ec8 	.word	0x20000ec8

90001cfc <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001cfc:	b580      	push	{r7, lr}
90001cfe:	b084      	sub	sp, #16
90001d00:	af02      	add	r7, sp, #8
90001d02:	6078      	str	r0, [r7, #4]
90001d04:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001d06:	f44f 7388 	mov.w	r3, #272	; 0x110
90001d0a:	9300      	str	r3, [sp, #0]
90001d0c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90001d10:	2200      	movs	r2, #0
90001d12:	6839      	ldr	r1, [r7, #0]
90001d14:	6878      	ldr	r0, [r7, #4]
90001d16:	f000 f805 	bl	90001d24 <BSP_LCD_InitEx>
90001d1a:	4603      	mov	r3, r0
}
90001d1c:	4618      	mov	r0, r3
90001d1e:	3708      	adds	r7, #8
90001d20:	46bd      	mov	sp, r7
90001d22:	bd80      	pop	{r7, pc}

90001d24 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001d24:	b580      	push	{r7, lr}
90001d26:	b09e      	sub	sp, #120	; 0x78
90001d28:	af00      	add	r7, sp, #0
90001d2a:	60f8      	str	r0, [r7, #12]
90001d2c:	60b9      	str	r1, [r7, #8]
90001d2e:	607a      	str	r2, [r7, #4]
90001d30:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001d32:	2300      	movs	r3, #0
90001d34:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001d36:	2300      	movs	r3, #0
90001d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001d3a:	68bb      	ldr	r3, [r7, #8]
90001d3c:	2b01      	cmp	r3, #1
90001d3e:	d808      	bhi.n	90001d52 <BSP_LCD_InitEx+0x2e>
90001d40:	68fb      	ldr	r3, [r7, #12]
90001d42:	2b00      	cmp	r3, #0
90001d44:	d105      	bne.n	90001d52 <BSP_LCD_InitEx+0x2e>
90001d46:	687b      	ldr	r3, [r7, #4]
90001d48:	2b02      	cmp	r3, #2
90001d4a:	d006      	beq.n	90001d5a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001d4c:	687b      	ldr	r3, [r7, #4]
90001d4e:	2b00      	cmp	r3, #0
90001d50:	d003      	beq.n	90001d5a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001d52:	f06f 0301 	mvn.w	r3, #1
90001d56:	677b      	str	r3, [r7, #116]	; 0x74
90001d58:	e0a8      	b.n	90001eac <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001d5a:	687b      	ldr	r3, [r7, #4]
90001d5c:	2b02      	cmp	r3, #2
90001d5e:	d109      	bne.n	90001d74 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001d60:	2302      	movs	r3, #2
90001d62:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001d64:	4a54      	ldr	r2, [pc, #336]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001d66:	68fb      	ldr	r3, [r7, #12]
90001d68:	015b      	lsls	r3, r3, #5
90001d6a:	4413      	add	r3, r2
90001d6c:	3310      	adds	r3, #16
90001d6e:	2202      	movs	r2, #2
90001d70:	601a      	str	r2, [r3, #0]
90001d72:	e008      	b.n	90001d86 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001d74:	2300      	movs	r3, #0
90001d76:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001d78:	4a4f      	ldr	r2, [pc, #316]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001d7a:	68fb      	ldr	r3, [r7, #12]
90001d7c:	015b      	lsls	r3, r3, #5
90001d7e:	4413      	add	r3, r2
90001d80:	3310      	adds	r3, #16
90001d82:	2204      	movs	r2, #4
90001d84:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001d86:	4a4c      	ldr	r2, [pc, #304]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001d88:	68fb      	ldr	r3, [r7, #12]
90001d8a:	015b      	lsls	r3, r3, #5
90001d8c:	4413      	add	r3, r2
90001d8e:	330c      	adds	r3, #12
90001d90:	687a      	ldr	r2, [r7, #4]
90001d92:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001d94:	4a48      	ldr	r2, [pc, #288]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001d96:	68fb      	ldr	r3, [r7, #12]
90001d98:	015b      	lsls	r3, r3, #5
90001d9a:	4413      	add	r3, r2
90001d9c:	683a      	ldr	r2, [r7, #0]
90001d9e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001da0:	4a45      	ldr	r2, [pc, #276]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001da2:	68fb      	ldr	r3, [r7, #12]
90001da4:	015b      	lsls	r3, r3, #5
90001da6:	4413      	add	r3, r2
90001da8:	3304      	adds	r3, #4
90001daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
90001dae:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001db0:	4b42      	ldr	r3, [pc, #264]	; (90001ebc <BSP_LCD_InitEx+0x198>)
90001db2:	4a43      	ldr	r2, [pc, #268]	; (90001ec0 <BSP_LCD_InitEx+0x19c>)
90001db4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001db6:	4b43      	ldr	r3, [pc, #268]	; (90001ec4 <BSP_LCD_InitEx+0x1a0>)
90001db8:	4a43      	ldr	r2, [pc, #268]	; (90001ec8 <BSP_LCD_InitEx+0x1a4>)
90001dba:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001dbc:	483f      	ldr	r0, [pc, #252]	; (90001ebc <BSP_LCD_InitEx+0x198>)
90001dbe:	f000 fcf9 	bl	900027b4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001dc2:	4840      	ldr	r0, [pc, #256]	; (90001ec4 <BSP_LCD_InitEx+0x1a0>)
90001dc4:	f000 fdc2 	bl	9000294c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001dc8:	4b40      	ldr	r3, [pc, #256]	; (90001ecc <BSP_LCD_InitEx+0x1a8>)
90001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001dcc:	4b40      	ldr	r3, [pc, #256]	; (90001ed0 <BSP_LCD_InitEx+0x1ac>)
90001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001dd0:	2370      	movs	r3, #112	; 0x70
90001dd2:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
90001dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
90001ddc:	4611      	mov	r1, r2
90001dde:	4618      	mov	r0, r3
90001de0:	f7fe fe6c 	bl	90000abc <FT5336_RegisterBusIO>
90001de4:	4603      	mov	r3, r0
90001de6:	2b00      	cmp	r3, #0
90001de8:	da03      	bge.n	90001df2 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001dea:	f06f 0304 	mvn.w	r3, #4
90001dee:	677b      	str	r3, [r7, #116]	; 0x74
90001df0:	e02b      	b.n	90001e4a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001df2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
90001df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
90001dfa:	4611      	mov	r1, r2
90001dfc:	4618      	mov	r0, r3
90001dfe:	f7fe ff57 	bl	90000cb0 <FT5336_ReadID>
90001e02:	4603      	mov	r3, r0
90001e04:	2b00      	cmp	r3, #0
90001e06:	da03      	bge.n	90001e10 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001e08:	f06f 0304 	mvn.w	r3, #4
90001e0c:	677b      	str	r3, [r7, #116]	; 0x74
90001e0e:	e01c      	b.n	90001e4a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90001e12:	2b51      	cmp	r3, #81	; 0x51
90001e14:	d003      	beq.n	90001e1e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001e16:	f06f 0306 	mvn.w	r3, #6
90001e1a:	677b      	str	r3, [r7, #116]	; 0x74
90001e1c:	e015      	b.n	90001e4a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001e1e:	4827      	ldr	r0, [pc, #156]	; (90001ebc <BSP_LCD_InitEx+0x198>)
90001e20:	f7fe fc9e 	bl	90000760 <MX_LTDC_ClockConfig>
90001e24:	4603      	mov	r3, r0
90001e26:	2b00      	cmp	r3, #0
90001e28:	d003      	beq.n	90001e32 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001e2a:	f06f 0303 	mvn.w	r3, #3
90001e2e:	677b      	str	r3, [r7, #116]	; 0x74
90001e30:	e00b      	b.n	90001e4a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
90001e36:	6839      	ldr	r1, [r7, #0]
90001e38:	4820      	ldr	r0, [pc, #128]	; (90001ebc <BSP_LCD_InitEx+0x198>)
90001e3a:	f000 f84d 	bl	90001ed8 <MX_LTDC_Init>
90001e3e:	4603      	mov	r3, r0
90001e40:	2b00      	cmp	r3, #0
90001e42:	d002      	beq.n	90001e4a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001e44:	f06f 0303 	mvn.w	r3, #3
90001e48:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
90001e4c:	2b00      	cmp	r3, #0
90001e4e:	d12d      	bne.n	90001eac <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001e50:	2000      	movs	r0, #0
90001e52:	f000 fe0d 	bl	90002a70 <BSP_SDRAM_Init>
90001e56:	4603      	mov	r3, r0
90001e58:	2b00      	cmp	r3, #0
90001e5a:	d002      	beq.n	90001e62 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001e5c:	f06f 0303 	mvn.w	r3, #3
90001e60:	e025      	b.n	90001eae <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001e62:	2300      	movs	r3, #0
90001e64:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001e66:	683b      	ldr	r3, [r7, #0]
90001e68:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001e6a:	2300      	movs	r3, #0
90001e6c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
90001e72:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90001e76:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001e78:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
90001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001e7e:	f107 0314 	add.w	r3, r7, #20
90001e82:	461a      	mov	r2, r3
90001e84:	2100      	movs	r1, #0
90001e86:	480d      	ldr	r0, [pc, #52]	; (90001ebc <BSP_LCD_InitEx+0x198>)
90001e88:	f000 f872 	bl	90001f70 <MX_LTDC_ConfigLayer>
90001e8c:	4603      	mov	r3, r0
90001e8e:	2b00      	cmp	r3, #0
90001e90:	d002      	beq.n	90001e98 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001e92:	f06f 0303 	mvn.w	r3, #3
90001e96:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001e98:	480e      	ldr	r0, [pc, #56]	; (90001ed4 <BSP_LCD_InitEx+0x1b0>)
90001e9a:	f000 fdbf 	bl	90002a1c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001e9e:	4a06      	ldr	r2, [pc, #24]	; (90001eb8 <BSP_LCD_InitEx+0x194>)
90001ea0:	68fb      	ldr	r3, [r7, #12]
90001ea2:	015b      	lsls	r3, r3, #5
90001ea4:	4413      	add	r3, r2
90001ea6:	3318      	adds	r3, #24
90001ea8:	2201      	movs	r2, #1
90001eaa:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
90001eae:	4618      	mov	r0, r3
90001eb0:	3778      	adds	r7, #120	; 0x78
90001eb2:	46bd      	mov	sp, r7
90001eb4:	bd80      	pop	{r7, pc}
90001eb6:	bf00      	nop
90001eb8:	20001078 	.word	0x20001078
90001ebc:	20000fd0 	.word	0x20000fd0
90001ec0:	50001000 	.word	0x50001000
90001ec4:	20000f68 	.word	0x20000f68
90001ec8:	52001000 	.word	0x52001000
90001ecc:	90001451 	.word	0x90001451
90001ed0:	900015ed 	.word	0x900015ed
90001ed4:	20000f1c 	.word	0x20000f1c

90001ed8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001ed8:	b580      	push	{r7, lr}
90001eda:	b084      	sub	sp, #16
90001edc:	af00      	add	r7, sp, #0
90001ede:	60f8      	str	r0, [r7, #12]
90001ee0:	60b9      	str	r1, [r7, #8]
90001ee2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001ee4:	68fb      	ldr	r3, [r7, #12]
90001ee6:	4a21      	ldr	r2, [pc, #132]	; (90001f6c <MX_LTDC_Init+0x94>)
90001ee8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001eea:	68fb      	ldr	r3, [r7, #12]
90001eec:	2200      	movs	r2, #0
90001eee:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001ef0:	68fb      	ldr	r3, [r7, #12]
90001ef2:	2200      	movs	r2, #0
90001ef4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001ef6:	68fb      	ldr	r3, [r7, #12]
90001ef8:	2200      	movs	r2, #0
90001efa:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001efc:	68fb      	ldr	r3, [r7, #12]
90001efe:	2200      	movs	r2, #0
90001f00:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001f02:	68fb      	ldr	r3, [r7, #12]
90001f04:	2228      	movs	r2, #40	; 0x28
90001f06:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001f08:	68fb      	ldr	r3, [r7, #12]
90001f0a:	222a      	movs	r2, #42	; 0x2a
90001f0c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001f0e:	68bb      	ldr	r3, [r7, #8]
90001f10:	f103 0235 	add.w	r2, r3, #53	; 0x35
90001f14:	68fb      	ldr	r3, [r7, #12]
90001f16:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90001f18:	68bb      	ldr	r3, [r7, #8]
90001f1a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
90001f1e:	68fb      	ldr	r3, [r7, #12]
90001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90001f22:	68fb      	ldr	r3, [r7, #12]
90001f24:	2209      	movs	r2, #9
90001f26:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90001f28:	68fb      	ldr	r3, [r7, #12]
90001f2a:	220b      	movs	r2, #11
90001f2c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90001f2e:	687b      	ldr	r3, [r7, #4]
90001f30:	f103 020b 	add.w	r2, r3, #11
90001f34:	68fb      	ldr	r3, [r7, #12]
90001f36:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90001f38:	687b      	ldr	r3, [r7, #4]
90001f3a:	f103 020d 	add.w	r2, r3, #13
90001f3e:	68fb      	ldr	r3, [r7, #12]
90001f40:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90001f42:	68fb      	ldr	r3, [r7, #12]
90001f44:	22ff      	movs	r2, #255	; 0xff
90001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90001f4a:	68fb      	ldr	r3, [r7, #12]
90001f4c:	22ff      	movs	r2, #255	; 0xff
90001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90001f52:	68fb      	ldr	r3, [r7, #12]
90001f54:	22ff      	movs	r2, #255	; 0xff
90001f56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
90001f5a:	68f8      	ldr	r0, [r7, #12]
90001f5c:	f004 fa3a 	bl	900063d4 <HAL_LTDC_Init>
90001f60:	4603      	mov	r3, r0
}
90001f62:	4618      	mov	r0, r3
90001f64:	3710      	adds	r7, #16
90001f66:	46bd      	mov	sp, r7
90001f68:	bd80      	pop	{r7, pc}
90001f6a:	bf00      	nop
90001f6c:	50001000 	.word	0x50001000

90001f70 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90001f70:	b580      	push	{r7, lr}
90001f72:	b092      	sub	sp, #72	; 0x48
90001f74:	af00      	add	r7, sp, #0
90001f76:	60f8      	str	r0, [r7, #12]
90001f78:	60b9      	str	r1, [r7, #8]
90001f7a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90001f7c:	687b      	ldr	r3, [r7, #4]
90001f7e:	681b      	ldr	r3, [r3, #0]
90001f80:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90001f82:	687b      	ldr	r3, [r7, #4]
90001f84:	685b      	ldr	r3, [r3, #4]
90001f86:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90001f88:	687b      	ldr	r3, [r7, #4]
90001f8a:	689b      	ldr	r3, [r3, #8]
90001f8c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90001f8e:	687b      	ldr	r3, [r7, #4]
90001f90:	68db      	ldr	r3, [r3, #12]
90001f92:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90001f94:	687b      	ldr	r3, [r7, #4]
90001f96:	691b      	ldr	r3, [r3, #16]
90001f98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
90001f9a:	23ff      	movs	r3, #255	; 0xff
90001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
90001f9e:	2300      	movs	r3, #0
90001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001fa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
90001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001fa8:	2307      	movs	r3, #7
90001faa:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90001fac:	687b      	ldr	r3, [r7, #4]
90001fae:	695b      	ldr	r3, [r3, #20]
90001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90001fb2:	687b      	ldr	r3, [r7, #4]
90001fb4:	685a      	ldr	r2, [r3, #4]
90001fb6:	687b      	ldr	r3, [r7, #4]
90001fb8:	681b      	ldr	r3, [r3, #0]
90001fba:	1ad3      	subs	r3, r2, r3
90001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90001fbe:	687b      	ldr	r3, [r7, #4]
90001fc0:	68da      	ldr	r2, [r3, #12]
90001fc2:	687b      	ldr	r3, [r7, #4]
90001fc4:	689b      	ldr	r3, [r3, #8]
90001fc6:	1ad3      	subs	r3, r2, r3
90001fc8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
90001fca:	2300      	movs	r3, #0
90001fcc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
90001fd0:	2300      	movs	r3, #0
90001fd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
90001fd6:	2300      	movs	r3, #0
90001fd8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90001fdc:	f107 0314 	add.w	r3, r7, #20
90001fe0:	68ba      	ldr	r2, [r7, #8]
90001fe2:	4619      	mov	r1, r3
90001fe4:	68f8      	ldr	r0, [r7, #12]
90001fe6:	f004 facf 	bl	90006588 <HAL_LTDC_ConfigLayer>
90001fea:	4603      	mov	r3, r0
}
90001fec:	4618      	mov	r0, r3
90001fee:	3748      	adds	r7, #72	; 0x48
90001ff0:	46bd      	mov	sp, r7
90001ff2:	bd80      	pop	{r7, pc}

90001ff4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90001ff4:	b480      	push	{r7}
90001ff6:	b085      	sub	sp, #20
90001ff8:	af00      	add	r7, sp, #0
90001ffa:	6078      	str	r0, [r7, #4]
90001ffc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001ffe:	2300      	movs	r3, #0
90002000:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002002:	687b      	ldr	r3, [r7, #4]
90002004:	2b00      	cmp	r3, #0
90002006:	d003      	beq.n	90002010 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002008:	f06f 0301 	mvn.w	r3, #1
9000200c:	60fb      	str	r3, [r7, #12]
9000200e:	e007      	b.n	90002020 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002010:	4a07      	ldr	r2, [pc, #28]	; (90002030 <BSP_LCD_GetPixelFormat+0x3c>)
90002012:	687b      	ldr	r3, [r7, #4]
90002014:	015b      	lsls	r3, r3, #5
90002016:	4413      	add	r3, r2
90002018:	330c      	adds	r3, #12
9000201a:	681a      	ldr	r2, [r3, #0]
9000201c:	683b      	ldr	r3, [r7, #0]
9000201e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002020:	68fb      	ldr	r3, [r7, #12]
}
90002022:	4618      	mov	r0, r3
90002024:	3714      	adds	r7, #20
90002026:	46bd      	mov	sp, r7
90002028:	f85d 7b04 	ldr.w	r7, [sp], #4
9000202c:	4770      	bx	lr
9000202e:	bf00      	nop
90002030:	20001078 	.word	0x20001078

90002034 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002034:	b480      	push	{r7}
90002036:	b085      	sub	sp, #20
90002038:	af00      	add	r7, sp, #0
9000203a:	6078      	str	r0, [r7, #4]
9000203c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000203e:	2300      	movs	r3, #0
90002040:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002042:	687b      	ldr	r3, [r7, #4]
90002044:	2b00      	cmp	r3, #0
90002046:	d003      	beq.n	90002050 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002048:	f06f 0301 	mvn.w	r3, #1
9000204c:	60fb      	str	r3, [r7, #12]
9000204e:	e006      	b.n	9000205e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002050:	4a06      	ldr	r2, [pc, #24]	; (9000206c <BSP_LCD_SetActiveLayer+0x38>)
90002052:	687b      	ldr	r3, [r7, #4]
90002054:	015b      	lsls	r3, r3, #5
90002056:	4413      	add	r3, r2
90002058:	3308      	adds	r3, #8
9000205a:	683a      	ldr	r2, [r7, #0]
9000205c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000205e:	68fb      	ldr	r3, [r7, #12]
}
90002060:	4618      	mov	r0, r3
90002062:	3714      	adds	r7, #20
90002064:	46bd      	mov	sp, r7
90002066:	f85d 7b04 	ldr.w	r7, [sp], #4
9000206a:	4770      	bx	lr
9000206c:	20001078 	.word	0x20001078

90002070 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002070:	b480      	push	{r7}
90002072:	b085      	sub	sp, #20
90002074:	af00      	add	r7, sp, #0
90002076:	6078      	str	r0, [r7, #4]
90002078:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000207a:	2300      	movs	r3, #0
9000207c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000207e:	687b      	ldr	r3, [r7, #4]
90002080:	2b00      	cmp	r3, #0
90002082:	d003      	beq.n	9000208c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002084:	f06f 0301 	mvn.w	r3, #1
90002088:	60fb      	str	r3, [r7, #12]
9000208a:	e006      	b.n	9000209a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
9000208c:	4a06      	ldr	r2, [pc, #24]	; (900020a8 <BSP_LCD_GetXSize+0x38>)
9000208e:	687b      	ldr	r3, [r7, #4]
90002090:	015b      	lsls	r3, r3, #5
90002092:	4413      	add	r3, r2
90002094:	681a      	ldr	r2, [r3, #0]
90002096:	683b      	ldr	r3, [r7, #0]
90002098:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000209a:	68fb      	ldr	r3, [r7, #12]
}
9000209c:	4618      	mov	r0, r3
9000209e:	3714      	adds	r7, #20
900020a0:	46bd      	mov	sp, r7
900020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900020a6:	4770      	bx	lr
900020a8:	20001078 	.word	0x20001078

900020ac <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
900020ac:	b480      	push	{r7}
900020ae:	b085      	sub	sp, #20
900020b0:	af00      	add	r7, sp, #0
900020b2:	6078      	str	r0, [r7, #4]
900020b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020b6:	2300      	movs	r3, #0
900020b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900020ba:	687b      	ldr	r3, [r7, #4]
900020bc:	2b00      	cmp	r3, #0
900020be:	d003      	beq.n	900020c8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900020c0:	f06f 0301 	mvn.w	r3, #1
900020c4:	60fb      	str	r3, [r7, #12]
900020c6:	e007      	b.n	900020d8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900020c8:	4a07      	ldr	r2, [pc, #28]	; (900020e8 <BSP_LCD_GetYSize+0x3c>)
900020ca:	687b      	ldr	r3, [r7, #4]
900020cc:	015b      	lsls	r3, r3, #5
900020ce:	4413      	add	r3, r2
900020d0:	3304      	adds	r3, #4
900020d2:	681a      	ldr	r2, [r3, #0]
900020d4:	683b      	ldr	r3, [r7, #0]
900020d6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900020d8:	68fb      	ldr	r3, [r7, #12]
}
900020da:	4618      	mov	r0, r3
900020dc:	3714      	adds	r7, #20
900020de:	46bd      	mov	sp, r7
900020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
900020e4:	4770      	bx	lr
900020e6:	bf00      	nop
900020e8:	20001078 	.word	0x20001078

900020ec <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900020ec:	b580      	push	{r7, lr}
900020ee:	b08e      	sub	sp, #56	; 0x38
900020f0:	af02      	add	r7, sp, #8
900020f2:	60f8      	str	r0, [r7, #12]
900020f4:	60b9      	str	r1, [r7, #8]
900020f6:	607a      	str	r2, [r7, #4]
900020f8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020fa:	2300      	movs	r3, #0
900020fc:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900020fe:	683b      	ldr	r3, [r7, #0]
90002100:	330a      	adds	r3, #10
90002102:	781b      	ldrb	r3, [r3, #0]
90002104:	461a      	mov	r2, r3
90002106:	683b      	ldr	r3, [r7, #0]
90002108:	330b      	adds	r3, #11
9000210a:	781b      	ldrb	r3, [r3, #0]
9000210c:	021b      	lsls	r3, r3, #8
9000210e:	441a      	add	r2, r3
90002110:	683b      	ldr	r3, [r7, #0]
90002112:	330c      	adds	r3, #12
90002114:	781b      	ldrb	r3, [r3, #0]
90002116:	041b      	lsls	r3, r3, #16
90002118:	441a      	add	r2, r3
9000211a:	683b      	ldr	r3, [r7, #0]
9000211c:	330d      	adds	r3, #13
9000211e:	781b      	ldrb	r3, [r3, #0]
90002120:	061b      	lsls	r3, r3, #24
90002122:	4413      	add	r3, r2
90002124:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002126:	683b      	ldr	r3, [r7, #0]
90002128:	3312      	adds	r3, #18
9000212a:	781b      	ldrb	r3, [r3, #0]
9000212c:	461a      	mov	r2, r3
9000212e:	683b      	ldr	r3, [r7, #0]
90002130:	3313      	adds	r3, #19
90002132:	781b      	ldrb	r3, [r3, #0]
90002134:	021b      	lsls	r3, r3, #8
90002136:	441a      	add	r2, r3
90002138:	683b      	ldr	r3, [r7, #0]
9000213a:	3314      	adds	r3, #20
9000213c:	781b      	ldrb	r3, [r3, #0]
9000213e:	041b      	lsls	r3, r3, #16
90002140:	441a      	add	r2, r3
90002142:	683b      	ldr	r3, [r7, #0]
90002144:	3315      	adds	r3, #21
90002146:	781b      	ldrb	r3, [r3, #0]
90002148:	061b      	lsls	r3, r3, #24
9000214a:	4413      	add	r3, r2
9000214c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000214e:	683b      	ldr	r3, [r7, #0]
90002150:	3316      	adds	r3, #22
90002152:	781b      	ldrb	r3, [r3, #0]
90002154:	461a      	mov	r2, r3
90002156:	683b      	ldr	r3, [r7, #0]
90002158:	3317      	adds	r3, #23
9000215a:	781b      	ldrb	r3, [r3, #0]
9000215c:	021b      	lsls	r3, r3, #8
9000215e:	441a      	add	r2, r3
90002160:	683b      	ldr	r3, [r7, #0]
90002162:	3318      	adds	r3, #24
90002164:	781b      	ldrb	r3, [r3, #0]
90002166:	041b      	lsls	r3, r3, #16
90002168:	441a      	add	r2, r3
9000216a:	683b      	ldr	r3, [r7, #0]
9000216c:	3319      	adds	r3, #25
9000216e:	781b      	ldrb	r3, [r3, #0]
90002170:	061b      	lsls	r3, r3, #24
90002172:	4413      	add	r3, r2
90002174:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002176:	683b      	ldr	r3, [r7, #0]
90002178:	331c      	adds	r3, #28
9000217a:	781b      	ldrb	r3, [r3, #0]
9000217c:	461a      	mov	r2, r3
9000217e:	683b      	ldr	r3, [r7, #0]
90002180:	331d      	adds	r3, #29
90002182:	781b      	ldrb	r3, [r3, #0]
90002184:	021b      	lsls	r3, r3, #8
90002186:	4413      	add	r3, r2
90002188:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000218a:	4a37      	ldr	r2, [pc, #220]	; (90002268 <BSP_LCD_DrawBitmap+0x17c>)
9000218c:	68fb      	ldr	r3, [r7, #12]
9000218e:	015b      	lsls	r3, r3, #5
90002190:	4413      	add	r3, r2
90002192:	3308      	adds	r3, #8
90002194:	681b      	ldr	r3, [r3, #0]
90002196:	4a35      	ldr	r2, [pc, #212]	; (9000226c <BSP_LCD_DrawBitmap+0x180>)
90002198:	2134      	movs	r1, #52	; 0x34
9000219a:	fb01 f303 	mul.w	r3, r1, r3
9000219e:	4413      	add	r3, r2
900021a0:	335c      	adds	r3, #92	; 0x5c
900021a2:	681a      	ldr	r2, [r3, #0]
900021a4:	4930      	ldr	r1, [pc, #192]	; (90002268 <BSP_LCD_DrawBitmap+0x17c>)
900021a6:	68fb      	ldr	r3, [r7, #12]
900021a8:	015b      	lsls	r3, r3, #5
900021aa:	440b      	add	r3, r1
900021ac:	681b      	ldr	r3, [r3, #0]
900021ae:	6879      	ldr	r1, [r7, #4]
900021b0:	fb03 f101 	mul.w	r1, r3, r1
900021b4:	68bb      	ldr	r3, [r7, #8]
900021b6:	440b      	add	r3, r1
900021b8:	482b      	ldr	r0, [pc, #172]	; (90002268 <BSP_LCD_DrawBitmap+0x17c>)
900021ba:	68f9      	ldr	r1, [r7, #12]
900021bc:	0149      	lsls	r1, r1, #5
900021be:	4401      	add	r1, r0
900021c0:	3110      	adds	r1, #16
900021c2:	6809      	ldr	r1, [r1, #0]
900021c4:	fb01 f303 	mul.w	r3, r1, r3
900021c8:	4413      	add	r3, r2
900021ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900021cc:	693b      	ldr	r3, [r7, #16]
900021ce:	3b20      	subs	r3, #32
900021d0:	2b07      	cmp	r3, #7
900021d2:	d802      	bhi.n	900021da <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900021d4:	2300      	movs	r3, #0
900021d6:	627b      	str	r3, [r7, #36]	; 0x24
900021d8:	e008      	b.n	900021ec <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900021da:	693b      	ldr	r3, [r7, #16]
900021dc:	3b10      	subs	r3, #16
900021de:	2b07      	cmp	r3, #7
900021e0:	d802      	bhi.n	900021e8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900021e2:	2302      	movs	r3, #2
900021e4:	627b      	str	r3, [r7, #36]	; 0x24
900021e6:	e001      	b.n	900021ec <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900021e8:	2301      	movs	r3, #1
900021ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900021ec:	697b      	ldr	r3, [r7, #20]
900021ee:	3b01      	subs	r3, #1
900021f0:	69ba      	ldr	r2, [r7, #24]
900021f2:	fb02 f303 	mul.w	r3, r2, r3
900021f6:	693a      	ldr	r2, [r7, #16]
900021f8:	08d2      	lsrs	r2, r2, #3
900021fa:	fb03 f202 	mul.w	r2, r3, r2
900021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002200:	4413      	add	r3, r2
90002202:	683a      	ldr	r2, [r7, #0]
90002204:	4413      	add	r3, r2
90002206:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
90002208:	2300      	movs	r3, #0
9000220a:	62fb      	str	r3, [r7, #44]	; 0x2c
9000220c:	e023      	b.n	90002256 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
9000220e:	6aba      	ldr	r2, [r7, #40]	; 0x28
90002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002212:	9300      	str	r3, [sp, #0]
90002214:	69bb      	ldr	r3, [r7, #24]
90002216:	6a39      	ldr	r1, [r7, #32]
90002218:	68f8      	ldr	r0, [r7, #12]
9000221a:	f000 fa77 	bl	9000270c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000221e:	4a12      	ldr	r2, [pc, #72]	; (90002268 <BSP_LCD_DrawBitmap+0x17c>)
90002220:	68fb      	ldr	r3, [r7, #12]
90002222:	015b      	lsls	r3, r3, #5
90002224:	4413      	add	r3, r2
90002226:	681b      	ldr	r3, [r3, #0]
90002228:	490f      	ldr	r1, [pc, #60]	; (90002268 <BSP_LCD_DrawBitmap+0x17c>)
9000222a:	68fa      	ldr	r2, [r7, #12]
9000222c:	0152      	lsls	r2, r2, #5
9000222e:	440a      	add	r2, r1
90002230:	3210      	adds	r2, #16
90002232:	6812      	ldr	r2, [r2, #0]
90002234:	fb02 f303 	mul.w	r3, r2, r3
90002238:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000223a:	4413      	add	r3, r2
9000223c:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
9000223e:	693b      	ldr	r3, [r7, #16]
90002240:	08db      	lsrs	r3, r3, #3
90002242:	69ba      	ldr	r2, [r7, #24]
90002244:	fb02 f303 	mul.w	r3, r2, r3
90002248:	425b      	negs	r3, r3
9000224a:	6a3a      	ldr	r2, [r7, #32]
9000224c:	4413      	add	r3, r2
9000224e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002252:	3301      	adds	r3, #1
90002254:	62fb      	str	r3, [r7, #44]	; 0x2c
90002256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002258:	697b      	ldr	r3, [r7, #20]
9000225a:	429a      	cmp	r2, r3
9000225c:	d3d7      	bcc.n	9000220e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000225e:	69fb      	ldr	r3, [r7, #28]
}
90002260:	4618      	mov	r0, r3
90002262:	3730      	adds	r7, #48	; 0x30
90002264:	46bd      	mov	sp, r7
90002266:	bd80      	pop	{r7, pc}
90002268:	20001078 	.word	0x20001078
9000226c:	20000fd0 	.word	0x20000fd0

90002270 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002270:	b580      	push	{r7, lr}
90002272:	b088      	sub	sp, #32
90002274:	af00      	add	r7, sp, #0
90002276:	60f8      	str	r0, [r7, #12]
90002278:	60b9      	str	r1, [r7, #8]
9000227a:	607a      	str	r2, [r7, #4]
9000227c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
9000227e:	683b      	ldr	r3, [r7, #0]
90002280:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002282:	2300      	movs	r3, #0
90002284:	61fb      	str	r3, [r7, #28]
90002286:	e032      	b.n	900022ee <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002288:	2300      	movs	r3, #0
9000228a:	617b      	str	r3, [r7, #20]
9000228c:	e028      	b.n	900022e0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000228e:	69bb      	ldr	r3, [r7, #24]
90002290:	781b      	ldrb	r3, [r3, #0]
90002292:	461a      	mov	r2, r3
90002294:	69bb      	ldr	r3, [r7, #24]
90002296:	3301      	adds	r3, #1
90002298:	781b      	ldrb	r3, [r3, #0]
9000229a:	021b      	lsls	r3, r3, #8
9000229c:	431a      	orrs	r2, r3
9000229e:	69bb      	ldr	r3, [r7, #24]
900022a0:	3302      	adds	r3, #2
900022a2:	781b      	ldrb	r3, [r3, #0]
900022a4:	041b      	lsls	r3, r3, #16
900022a6:	431a      	orrs	r2, r3
900022a8:	69bb      	ldr	r3, [r7, #24]
900022aa:	3303      	adds	r3, #3
900022ac:	781b      	ldrb	r3, [r3, #0]
900022ae:	061b      	lsls	r3, r3, #24
900022b0:	4313      	orrs	r3, r2
900022b2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900022b4:	68ba      	ldr	r2, [r7, #8]
900022b6:	697b      	ldr	r3, [r7, #20]
900022b8:	18d1      	adds	r1, r2, r3
900022ba:	687a      	ldr	r2, [r7, #4]
900022bc:	69fb      	ldr	r3, [r7, #28]
900022be:	441a      	add	r2, r3
900022c0:	693b      	ldr	r3, [r7, #16]
900022c2:	68f8      	ldr	r0, [r7, #12]
900022c4:	f000 f95e 	bl	90002584 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900022c8:	4a0d      	ldr	r2, [pc, #52]	; (90002300 <BSP_LCD_FillRGBRect+0x90>)
900022ca:	68fb      	ldr	r3, [r7, #12]
900022cc:	015b      	lsls	r3, r3, #5
900022ce:	4413      	add	r3, r2
900022d0:	3310      	adds	r3, #16
900022d2:	681b      	ldr	r3, [r3, #0]
900022d4:	69ba      	ldr	r2, [r7, #24]
900022d6:	4413      	add	r3, r2
900022d8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900022da:	697b      	ldr	r3, [r7, #20]
900022dc:	3301      	adds	r3, #1
900022de:	617b      	str	r3, [r7, #20]
900022e0:	697a      	ldr	r2, [r7, #20]
900022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900022e4:	429a      	cmp	r2, r3
900022e6:	d3d2      	bcc.n	9000228e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900022e8:	69fb      	ldr	r3, [r7, #28]
900022ea:	3301      	adds	r3, #1
900022ec:	61fb      	str	r3, [r7, #28]
900022ee:	69fa      	ldr	r2, [r7, #28]
900022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900022f2:	429a      	cmp	r2, r3
900022f4:	d3c8      	bcc.n	90002288 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900022f6:	2300      	movs	r3, #0
}
900022f8:	4618      	mov	r0, r3
900022fa:	3720      	adds	r7, #32
900022fc:	46bd      	mov	sp, r7
900022fe:	bd80      	pop	{r7, pc}
90002300:	20001078 	.word	0x20001078

90002304 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002304:	b580      	push	{r7, lr}
90002306:	b088      	sub	sp, #32
90002308:	af02      	add	r7, sp, #8
9000230a:	60f8      	str	r0, [r7, #12]
9000230c:	60b9      	str	r1, [r7, #8]
9000230e:	607a      	str	r2, [r7, #4]
90002310:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002312:	4a21      	ldr	r2, [pc, #132]	; (90002398 <BSP_LCD_DrawHLine+0x94>)
90002314:	68fb      	ldr	r3, [r7, #12]
90002316:	015b      	lsls	r3, r3, #5
90002318:	4413      	add	r3, r2
9000231a:	3308      	adds	r3, #8
9000231c:	681b      	ldr	r3, [r3, #0]
9000231e:	4a1f      	ldr	r2, [pc, #124]	; (9000239c <BSP_LCD_DrawHLine+0x98>)
90002320:	2134      	movs	r1, #52	; 0x34
90002322:	fb01 f303 	mul.w	r3, r1, r3
90002326:	4413      	add	r3, r2
90002328:	335c      	adds	r3, #92	; 0x5c
9000232a:	681a      	ldr	r2, [r3, #0]
9000232c:	491a      	ldr	r1, [pc, #104]	; (90002398 <BSP_LCD_DrawHLine+0x94>)
9000232e:	68fb      	ldr	r3, [r7, #12]
90002330:	015b      	lsls	r3, r3, #5
90002332:	440b      	add	r3, r1
90002334:	3310      	adds	r3, #16
90002336:	681b      	ldr	r3, [r3, #0]
90002338:	4817      	ldr	r0, [pc, #92]	; (90002398 <BSP_LCD_DrawHLine+0x94>)
9000233a:	68f9      	ldr	r1, [r7, #12]
9000233c:	0149      	lsls	r1, r1, #5
9000233e:	4401      	add	r1, r0
90002340:	6809      	ldr	r1, [r1, #0]
90002342:	6878      	ldr	r0, [r7, #4]
90002344:	fb01 f000 	mul.w	r0, r1, r0
90002348:	68b9      	ldr	r1, [r7, #8]
9000234a:	4401      	add	r1, r0
9000234c:	fb01 f303 	mul.w	r3, r1, r3
90002350:	4413      	add	r3, r2
90002352:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002354:	68ba      	ldr	r2, [r7, #8]
90002356:	683b      	ldr	r3, [r7, #0]
90002358:	441a      	add	r2, r3
9000235a:	490f      	ldr	r1, [pc, #60]	; (90002398 <BSP_LCD_DrawHLine+0x94>)
9000235c:	68fb      	ldr	r3, [r7, #12]
9000235e:	015b      	lsls	r3, r3, #5
90002360:	440b      	add	r3, r1
90002362:	681b      	ldr	r3, [r3, #0]
90002364:	429a      	cmp	r2, r3
90002366:	d907      	bls.n	90002378 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002368:	4a0b      	ldr	r2, [pc, #44]	; (90002398 <BSP_LCD_DrawHLine+0x94>)
9000236a:	68fb      	ldr	r3, [r7, #12]
9000236c:	015b      	lsls	r3, r3, #5
9000236e:	4413      	add	r3, r2
90002370:	681a      	ldr	r2, [r3, #0]
90002372:	68bb      	ldr	r3, [r7, #8]
90002374:	1ad3      	subs	r3, r2, r3
90002376:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002378:	6979      	ldr	r1, [r7, #20]
9000237a:	6a3b      	ldr	r3, [r7, #32]
9000237c:	9301      	str	r3, [sp, #4]
9000237e:	2300      	movs	r3, #0
90002380:	9300      	str	r3, [sp, #0]
90002382:	2301      	movs	r3, #1
90002384:	683a      	ldr	r2, [r7, #0]
90002386:	68f8      	ldr	r0, [r7, #12]
90002388:	f000 f956 	bl	90002638 <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000238c:	2300      	movs	r3, #0
}
9000238e:	4618      	mov	r0, r3
90002390:	3718      	adds	r7, #24
90002392:	46bd      	mov	sp, r7
90002394:	bd80      	pop	{r7, pc}
90002396:	bf00      	nop
90002398:	20001078 	.word	0x20001078
9000239c:	20000fd0 	.word	0x20000fd0

900023a0 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900023a0:	b580      	push	{r7, lr}
900023a2:	b088      	sub	sp, #32
900023a4:	af02      	add	r7, sp, #8
900023a6:	60f8      	str	r0, [r7, #12]
900023a8:	60b9      	str	r1, [r7, #8]
900023aa:	607a      	str	r2, [r7, #4]
900023ac:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
900023ae:	4a24      	ldr	r2, [pc, #144]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
900023b0:	68fb      	ldr	r3, [r7, #12]
900023b2:	015b      	lsls	r3, r3, #5
900023b4:	4413      	add	r3, r2
900023b6:	3308      	adds	r3, #8
900023b8:	681b      	ldr	r3, [r3, #0]
900023ba:	4a22      	ldr	r2, [pc, #136]	; (90002444 <BSP_LCD_DrawVLine+0xa4>)
900023bc:	2134      	movs	r1, #52	; 0x34
900023be:	fb01 f303 	mul.w	r3, r1, r3
900023c2:	4413      	add	r3, r2
900023c4:	335c      	adds	r3, #92	; 0x5c
900023c6:	681a      	ldr	r2, [r3, #0]
900023c8:	491d      	ldr	r1, [pc, #116]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
900023ca:	68fb      	ldr	r3, [r7, #12]
900023cc:	015b      	lsls	r3, r3, #5
900023ce:	440b      	add	r3, r1
900023d0:	3310      	adds	r3, #16
900023d2:	681b      	ldr	r3, [r3, #0]
900023d4:	481a      	ldr	r0, [pc, #104]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
900023d6:	68f9      	ldr	r1, [r7, #12]
900023d8:	0149      	lsls	r1, r1, #5
900023da:	4401      	add	r1, r0
900023dc:	6809      	ldr	r1, [r1, #0]
900023de:	6878      	ldr	r0, [r7, #4]
900023e0:	fb01 f000 	mul.w	r0, r1, r0
900023e4:	68b9      	ldr	r1, [r7, #8]
900023e6:	4401      	add	r1, r0
900023e8:	fb01 f303 	mul.w	r3, r1, r3
900023ec:	4413      	add	r3, r2
900023ee:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900023f0:	687a      	ldr	r2, [r7, #4]
900023f2:	683b      	ldr	r3, [r7, #0]
900023f4:	441a      	add	r2, r3
900023f6:	4912      	ldr	r1, [pc, #72]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
900023f8:	68fb      	ldr	r3, [r7, #12]
900023fa:	015b      	lsls	r3, r3, #5
900023fc:	440b      	add	r3, r1
900023fe:	3304      	adds	r3, #4
90002400:	681b      	ldr	r3, [r3, #0]
90002402:	429a      	cmp	r2, r3
90002404:	d908      	bls.n	90002418 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
90002406:	4a0e      	ldr	r2, [pc, #56]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
90002408:	68fb      	ldr	r3, [r7, #12]
9000240a:	015b      	lsls	r3, r3, #5
9000240c:	4413      	add	r3, r2
9000240e:	3304      	adds	r3, #4
90002410:	681a      	ldr	r2, [r3, #0]
90002412:	687b      	ldr	r3, [r7, #4]
90002414:	1ad3      	subs	r3, r2, r3
90002416:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002418:	6979      	ldr	r1, [r7, #20]
9000241a:	4a09      	ldr	r2, [pc, #36]	; (90002440 <BSP_LCD_DrawVLine+0xa0>)
9000241c:	68fb      	ldr	r3, [r7, #12]
9000241e:	015b      	lsls	r3, r3, #5
90002420:	4413      	add	r3, r2
90002422:	681b      	ldr	r3, [r3, #0]
90002424:	3b01      	subs	r3, #1
90002426:	6a3a      	ldr	r2, [r7, #32]
90002428:	9201      	str	r2, [sp, #4]
9000242a:	9300      	str	r3, [sp, #0]
9000242c:	683b      	ldr	r3, [r7, #0]
9000242e:	2201      	movs	r2, #1
90002430:	68f8      	ldr	r0, [r7, #12]
90002432:	f000 f901 	bl	90002638 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002436:	2300      	movs	r3, #0
}
90002438:	4618      	mov	r0, r3
9000243a:	3718      	adds	r7, #24
9000243c:	46bd      	mov	sp, r7
9000243e:	bd80      	pop	{r7, pc}
90002440:	20001078 	.word	0x20001078
90002444:	20000fd0 	.word	0x20000fd0

90002448 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002448:	b580      	push	{r7, lr}
9000244a:	b088      	sub	sp, #32
9000244c:	af02      	add	r7, sp, #8
9000244e:	60f8      	str	r0, [r7, #12]
90002450:	60b9      	str	r1, [r7, #8]
90002452:	607a      	str	r2, [r7, #4]
90002454:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002456:	4a1b      	ldr	r2, [pc, #108]	; (900024c4 <BSP_LCD_FillRect+0x7c>)
90002458:	68fb      	ldr	r3, [r7, #12]
9000245a:	015b      	lsls	r3, r3, #5
9000245c:	4413      	add	r3, r2
9000245e:	3308      	adds	r3, #8
90002460:	681b      	ldr	r3, [r3, #0]
90002462:	4a19      	ldr	r2, [pc, #100]	; (900024c8 <BSP_LCD_FillRect+0x80>)
90002464:	2134      	movs	r1, #52	; 0x34
90002466:	fb01 f303 	mul.w	r3, r1, r3
9000246a:	4413      	add	r3, r2
9000246c:	335c      	adds	r3, #92	; 0x5c
9000246e:	681a      	ldr	r2, [r3, #0]
90002470:	4914      	ldr	r1, [pc, #80]	; (900024c4 <BSP_LCD_FillRect+0x7c>)
90002472:	68fb      	ldr	r3, [r7, #12]
90002474:	015b      	lsls	r3, r3, #5
90002476:	440b      	add	r3, r1
90002478:	3310      	adds	r3, #16
9000247a:	681b      	ldr	r3, [r3, #0]
9000247c:	4811      	ldr	r0, [pc, #68]	; (900024c4 <BSP_LCD_FillRect+0x7c>)
9000247e:	68f9      	ldr	r1, [r7, #12]
90002480:	0149      	lsls	r1, r1, #5
90002482:	4401      	add	r1, r0
90002484:	6809      	ldr	r1, [r1, #0]
90002486:	6878      	ldr	r0, [r7, #4]
90002488:	fb01 f000 	mul.w	r0, r1, r0
9000248c:	68b9      	ldr	r1, [r7, #8]
9000248e:	4401      	add	r1, r0
90002490:	fb01 f303 	mul.w	r3, r1, r3
90002494:	4413      	add	r3, r2
90002496:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002498:	6979      	ldr	r1, [r7, #20]
9000249a:	4a0a      	ldr	r2, [pc, #40]	; (900024c4 <BSP_LCD_FillRect+0x7c>)
9000249c:	68fb      	ldr	r3, [r7, #12]
9000249e:	015b      	lsls	r3, r3, #5
900024a0:	4413      	add	r3, r2
900024a2:	681a      	ldr	r2, [r3, #0]
900024a4:	683b      	ldr	r3, [r7, #0]
900024a6:	1ad3      	subs	r3, r2, r3
900024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900024aa:	9201      	str	r2, [sp, #4]
900024ac:	9300      	str	r3, [sp, #0]
900024ae:	6a3b      	ldr	r3, [r7, #32]
900024b0:	683a      	ldr	r2, [r7, #0]
900024b2:	68f8      	ldr	r0, [r7, #12]
900024b4:	f000 f8c0 	bl	90002638 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900024b8:	2300      	movs	r3, #0
}
900024ba:	4618      	mov	r0, r3
900024bc:	3718      	adds	r7, #24
900024be:	46bd      	mov	sp, r7
900024c0:	bd80      	pop	{r7, pc}
900024c2:	bf00      	nop
900024c4:	20001078 	.word	0x20001078
900024c8:	20000fd0 	.word	0x20000fd0

900024cc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900024cc:	b480      	push	{r7}
900024ce:	b085      	sub	sp, #20
900024d0:	af00      	add	r7, sp, #0
900024d2:	60f8      	str	r0, [r7, #12]
900024d4:	60b9      	str	r1, [r7, #8]
900024d6:	607a      	str	r2, [r7, #4]
900024d8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900024da:	4a28      	ldr	r2, [pc, #160]	; (9000257c <BSP_LCD_ReadPixel+0xb0>)
900024dc:	68fb      	ldr	r3, [r7, #12]
900024de:	015b      	lsls	r3, r3, #5
900024e0:	4413      	add	r3, r2
900024e2:	3308      	adds	r3, #8
900024e4:	681b      	ldr	r3, [r3, #0]
900024e6:	4a26      	ldr	r2, [pc, #152]	; (90002580 <BSP_LCD_ReadPixel+0xb4>)
900024e8:	2134      	movs	r1, #52	; 0x34
900024ea:	fb01 f303 	mul.w	r3, r1, r3
900024ee:	4413      	add	r3, r2
900024f0:	3348      	adds	r3, #72	; 0x48
900024f2:	681b      	ldr	r3, [r3, #0]
900024f4:	2b00      	cmp	r3, #0
900024f6:	d11c      	bne.n	90002532 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900024f8:	4a20      	ldr	r2, [pc, #128]	; (9000257c <BSP_LCD_ReadPixel+0xb0>)
900024fa:	68fb      	ldr	r3, [r7, #12]
900024fc:	015b      	lsls	r3, r3, #5
900024fe:	4413      	add	r3, r2
90002500:	3308      	adds	r3, #8
90002502:	681b      	ldr	r3, [r3, #0]
90002504:	4a1e      	ldr	r2, [pc, #120]	; (90002580 <BSP_LCD_ReadPixel+0xb4>)
90002506:	2134      	movs	r1, #52	; 0x34
90002508:	fb01 f303 	mul.w	r3, r1, r3
9000250c:	4413      	add	r3, r2
9000250e:	335c      	adds	r3, #92	; 0x5c
90002510:	681a      	ldr	r2, [r3, #0]
90002512:	491a      	ldr	r1, [pc, #104]	; (9000257c <BSP_LCD_ReadPixel+0xb0>)
90002514:	68fb      	ldr	r3, [r7, #12]
90002516:	015b      	lsls	r3, r3, #5
90002518:	440b      	add	r3, r1
9000251a:	681b      	ldr	r3, [r3, #0]
9000251c:	6879      	ldr	r1, [r7, #4]
9000251e:	fb03 f101 	mul.w	r1, r3, r1
90002522:	68bb      	ldr	r3, [r7, #8]
90002524:	440b      	add	r3, r1
90002526:	009b      	lsls	r3, r3, #2
90002528:	4413      	add	r3, r2
9000252a:	681a      	ldr	r2, [r3, #0]
9000252c:	683b      	ldr	r3, [r7, #0]
9000252e:	601a      	str	r2, [r3, #0]
90002530:	e01d      	b.n	9000256e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002532:	4a12      	ldr	r2, [pc, #72]	; (9000257c <BSP_LCD_ReadPixel+0xb0>)
90002534:	68fb      	ldr	r3, [r7, #12]
90002536:	015b      	lsls	r3, r3, #5
90002538:	4413      	add	r3, r2
9000253a:	3308      	adds	r3, #8
9000253c:	681b      	ldr	r3, [r3, #0]
9000253e:	4a10      	ldr	r2, [pc, #64]	; (90002580 <BSP_LCD_ReadPixel+0xb4>)
90002540:	2134      	movs	r1, #52	; 0x34
90002542:	fb01 f303 	mul.w	r3, r1, r3
90002546:	4413      	add	r3, r2
90002548:	335c      	adds	r3, #92	; 0x5c
9000254a:	681a      	ldr	r2, [r3, #0]
9000254c:	490b      	ldr	r1, [pc, #44]	; (9000257c <BSP_LCD_ReadPixel+0xb0>)
9000254e:	68fb      	ldr	r3, [r7, #12]
90002550:	015b      	lsls	r3, r3, #5
90002552:	440b      	add	r3, r1
90002554:	681b      	ldr	r3, [r3, #0]
90002556:	6879      	ldr	r1, [r7, #4]
90002558:	fb03 f101 	mul.w	r1, r3, r1
9000255c:	68bb      	ldr	r3, [r7, #8]
9000255e:	440b      	add	r3, r1
90002560:	005b      	lsls	r3, r3, #1
90002562:	4413      	add	r3, r2
90002564:	881b      	ldrh	r3, [r3, #0]
90002566:	b29b      	uxth	r3, r3
90002568:	461a      	mov	r2, r3
9000256a:	683b      	ldr	r3, [r7, #0]
9000256c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000256e:	2300      	movs	r3, #0
}
90002570:	4618      	mov	r0, r3
90002572:	3714      	adds	r7, #20
90002574:	46bd      	mov	sp, r7
90002576:	f85d 7b04 	ldr.w	r7, [sp], #4
9000257a:	4770      	bx	lr
9000257c:	20001078 	.word	0x20001078
90002580:	20000fd0 	.word	0x20000fd0

90002584 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002584:	b480      	push	{r7}
90002586:	b085      	sub	sp, #20
90002588:	af00      	add	r7, sp, #0
9000258a:	60f8      	str	r0, [r7, #12]
9000258c:	60b9      	str	r1, [r7, #8]
9000258e:	607a      	str	r2, [r7, #4]
90002590:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002592:	4a27      	ldr	r2, [pc, #156]	; (90002630 <BSP_LCD_WritePixel+0xac>)
90002594:	68fb      	ldr	r3, [r7, #12]
90002596:	015b      	lsls	r3, r3, #5
90002598:	4413      	add	r3, r2
9000259a:	3308      	adds	r3, #8
9000259c:	681b      	ldr	r3, [r3, #0]
9000259e:	4a25      	ldr	r2, [pc, #148]	; (90002634 <BSP_LCD_WritePixel+0xb0>)
900025a0:	2134      	movs	r1, #52	; 0x34
900025a2:	fb01 f303 	mul.w	r3, r1, r3
900025a6:	4413      	add	r3, r2
900025a8:	3348      	adds	r3, #72	; 0x48
900025aa:	681b      	ldr	r3, [r3, #0]
900025ac:	2b00      	cmp	r3, #0
900025ae:	d11c      	bne.n	900025ea <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900025b0:	4a1f      	ldr	r2, [pc, #124]	; (90002630 <BSP_LCD_WritePixel+0xac>)
900025b2:	68fb      	ldr	r3, [r7, #12]
900025b4:	015b      	lsls	r3, r3, #5
900025b6:	4413      	add	r3, r2
900025b8:	3308      	adds	r3, #8
900025ba:	681b      	ldr	r3, [r3, #0]
900025bc:	4a1d      	ldr	r2, [pc, #116]	; (90002634 <BSP_LCD_WritePixel+0xb0>)
900025be:	2134      	movs	r1, #52	; 0x34
900025c0:	fb01 f303 	mul.w	r3, r1, r3
900025c4:	4413      	add	r3, r2
900025c6:	335c      	adds	r3, #92	; 0x5c
900025c8:	681a      	ldr	r2, [r3, #0]
900025ca:	4919      	ldr	r1, [pc, #100]	; (90002630 <BSP_LCD_WritePixel+0xac>)
900025cc:	68fb      	ldr	r3, [r7, #12]
900025ce:	015b      	lsls	r3, r3, #5
900025d0:	440b      	add	r3, r1
900025d2:	681b      	ldr	r3, [r3, #0]
900025d4:	6879      	ldr	r1, [r7, #4]
900025d6:	fb03 f101 	mul.w	r1, r3, r1
900025da:	68bb      	ldr	r3, [r7, #8]
900025dc:	440b      	add	r3, r1
900025de:	009b      	lsls	r3, r3, #2
900025e0:	4413      	add	r3, r2
900025e2:	461a      	mov	r2, r3
900025e4:	683b      	ldr	r3, [r7, #0]
900025e6:	6013      	str	r3, [r2, #0]
900025e8:	e01b      	b.n	90002622 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900025ea:	4a11      	ldr	r2, [pc, #68]	; (90002630 <BSP_LCD_WritePixel+0xac>)
900025ec:	68fb      	ldr	r3, [r7, #12]
900025ee:	015b      	lsls	r3, r3, #5
900025f0:	4413      	add	r3, r2
900025f2:	3308      	adds	r3, #8
900025f4:	681b      	ldr	r3, [r3, #0]
900025f6:	4a0f      	ldr	r2, [pc, #60]	; (90002634 <BSP_LCD_WritePixel+0xb0>)
900025f8:	2134      	movs	r1, #52	; 0x34
900025fa:	fb01 f303 	mul.w	r3, r1, r3
900025fe:	4413      	add	r3, r2
90002600:	335c      	adds	r3, #92	; 0x5c
90002602:	681a      	ldr	r2, [r3, #0]
90002604:	490a      	ldr	r1, [pc, #40]	; (90002630 <BSP_LCD_WritePixel+0xac>)
90002606:	68fb      	ldr	r3, [r7, #12]
90002608:	015b      	lsls	r3, r3, #5
9000260a:	440b      	add	r3, r1
9000260c:	681b      	ldr	r3, [r3, #0]
9000260e:	6879      	ldr	r1, [r7, #4]
90002610:	fb03 f101 	mul.w	r1, r3, r1
90002614:	68bb      	ldr	r3, [r7, #8]
90002616:	440b      	add	r3, r1
90002618:	005b      	lsls	r3, r3, #1
9000261a:	4413      	add	r3, r2
9000261c:	683a      	ldr	r2, [r7, #0]
9000261e:	b292      	uxth	r2, r2
90002620:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002622:	2300      	movs	r3, #0
}
90002624:	4618      	mov	r0, r3
90002626:	3714      	adds	r7, #20
90002628:	46bd      	mov	sp, r7
9000262a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000262e:	4770      	bx	lr
90002630:	20001078 	.word	0x20001078
90002634:	20000fd0 	.word	0x20000fd0

90002638 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002638:	b580      	push	{r7, lr}
9000263a:	b088      	sub	sp, #32
9000263c:	af02      	add	r7, sp, #8
9000263e:	60f8      	str	r0, [r7, #12]
90002640:	60b9      	str	r1, [r7, #8]
90002642:	607a      	str	r2, [r7, #4]
90002644:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002648:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
9000264a:	4a2d      	ldr	r2, [pc, #180]	; (90002700 <LL_FillBuffer+0xc8>)
9000264c:	68fb      	ldr	r3, [r7, #12]
9000264e:	015b      	lsls	r3, r3, #5
90002650:	4413      	add	r3, r2
90002652:	330c      	adds	r3, #12
90002654:	681b      	ldr	r3, [r3, #0]
90002656:	2b02      	cmp	r3, #2
90002658:	d129      	bne.n	900026ae <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000265a:	2302      	movs	r3, #2
9000265c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002660:	0adb      	lsrs	r3, r3, #11
90002662:	f003 021f 	and.w	r2, r3, #31
90002666:	4613      	mov	r3, r2
90002668:	011b      	lsls	r3, r3, #4
9000266a:	4413      	add	r3, r2
9000266c:	015a      	lsls	r2, r3, #5
9000266e:	1ad3      	subs	r3, r2, r3
90002670:	3317      	adds	r3, #23
90002672:	099b      	lsrs	r3, r3, #6
90002674:	0419      	lsls	r1, r3, #16
90002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002678:	095b      	lsrs	r3, r3, #5
9000267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000267e:	4613      	mov	r3, r2
90002680:	01db      	lsls	r3, r3, #7
90002682:	4413      	add	r3, r2
90002684:	005b      	lsls	r3, r3, #1
90002686:	4413      	add	r3, r2
90002688:	3321      	adds	r3, #33	; 0x21
9000268a:	099b      	lsrs	r3, r3, #6
9000268c:	021b      	lsls	r3, r3, #8
9000268e:	4319      	orrs	r1, r3
90002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002692:	f003 021f 	and.w	r2, r3, #31
90002696:	4613      	mov	r3, r2
90002698:	011b      	lsls	r3, r3, #4
9000269a:	4413      	add	r3, r2
9000269c:	015a      	lsls	r2, r3, #5
9000269e:	1ad3      	subs	r3, r2, r3
900026a0:	3317      	adds	r3, #23
900026a2:	099b      	lsrs	r3, r3, #6
900026a4:	430b      	orrs	r3, r1
900026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
900026aa:	613b      	str	r3, [r7, #16]
    break;
900026ac:	e002      	b.n	900026b4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
900026ae:	2300      	movs	r3, #0
900026b0:	617b      	str	r3, [r7, #20]
    break;
900026b2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900026b4:	4b13      	ldr	r3, [pc, #76]	; (90002704 <LL_FillBuffer+0xcc>)
900026b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
900026ba:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900026bc:	4a11      	ldr	r2, [pc, #68]	; (90002704 <LL_FillBuffer+0xcc>)
900026be:	697b      	ldr	r3, [r7, #20]
900026c0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900026c2:	4a10      	ldr	r2, [pc, #64]	; (90002704 <LL_FillBuffer+0xcc>)
900026c4:	6a3b      	ldr	r3, [r7, #32]
900026c6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900026c8:	4b0e      	ldr	r3, [pc, #56]	; (90002704 <LL_FillBuffer+0xcc>)
900026ca:	4a0f      	ldr	r2, [pc, #60]	; (90002708 <LL_FillBuffer+0xd0>)
900026cc:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900026ce:	480d      	ldr	r0, [pc, #52]	; (90002704 <LL_FillBuffer+0xcc>)
900026d0:	f001 f836 	bl	90003740 <HAL_DMA2D_Init>
900026d4:	4603      	mov	r3, r0
900026d6:	2b00      	cmp	r3, #0
900026d8:	d10e      	bne.n	900026f8 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900026da:	68ba      	ldr	r2, [r7, #8]
900026dc:	683b      	ldr	r3, [r7, #0]
900026de:	9300      	str	r3, [sp, #0]
900026e0:	687b      	ldr	r3, [r7, #4]
900026e2:	6939      	ldr	r1, [r7, #16]
900026e4:	4807      	ldr	r0, [pc, #28]	; (90002704 <LL_FillBuffer+0xcc>)
900026e6:	f001 f899 	bl	9000381c <HAL_DMA2D_Start>
900026ea:	4603      	mov	r3, r0
900026ec:	2b00      	cmp	r3, #0
900026ee:	d103      	bne.n	900026f8 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900026f0:	2132      	movs	r1, #50	; 0x32
900026f2:	4804      	ldr	r0, [pc, #16]	; (90002704 <LL_FillBuffer+0xcc>)
900026f4:	f001 f8bd 	bl	90003872 <HAL_DMA2D_PollForTransfer>
    }
  }
}
900026f8:	bf00      	nop
900026fa:	3718      	adds	r7, #24
900026fc:	46bd      	mov	sp, r7
900026fe:	bd80      	pop	{r7, pc}
90002700:	20001078 	.word	0x20001078
90002704:	20000f68 	.word	0x20000f68
90002708:	52001000 	.word	0x52001000

9000270c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
9000270c:	b580      	push	{r7, lr}
9000270e:	b088      	sub	sp, #32
90002710:	af02      	add	r7, sp, #8
90002712:	60f8      	str	r0, [r7, #12]
90002714:	60b9      	str	r1, [r7, #8]
90002716:	607a      	str	r2, [r7, #4]
90002718:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000271a:	4a23      	ldr	r2, [pc, #140]	; (900027a8 <LL_ConvertLineToRGB+0x9c>)
9000271c:	68fb      	ldr	r3, [r7, #12]
9000271e:	015b      	lsls	r3, r3, #5
90002720:	4413      	add	r3, r2
90002722:	330c      	adds	r3, #12
90002724:	681b      	ldr	r3, [r3, #0]
90002726:	2b02      	cmp	r3, #2
90002728:	d102      	bne.n	90002730 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000272a:	2302      	movs	r3, #2
9000272c:	617b      	str	r3, [r7, #20]
    break;
9000272e:	e002      	b.n	90002736 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002730:	2300      	movs	r3, #0
90002732:	617b      	str	r3, [r7, #20]
    break;
90002734:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002736:	4b1d      	ldr	r3, [pc, #116]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
9000273c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
9000273e:	4a1b      	ldr	r2, [pc, #108]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002740:	697b      	ldr	r3, [r7, #20]
90002742:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002744:	4b19      	ldr	r3, [pc, #100]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002746:	2200      	movs	r2, #0
90002748:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
9000274a:	4b18      	ldr	r3, [pc, #96]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
9000274c:	2200      	movs	r2, #0
9000274e:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002750:	4b16      	ldr	r3, [pc, #88]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002752:	22ff      	movs	r2, #255	; 0xff
90002754:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002756:	4a15      	ldr	r2, [pc, #84]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002758:	6a3b      	ldr	r3, [r7, #32]
9000275a:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
9000275c:	4b13      	ldr	r3, [pc, #76]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
9000275e:	2200      	movs	r2, #0
90002760:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
90002762:	4b12      	ldr	r3, [pc, #72]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002764:	4a12      	ldr	r2, [pc, #72]	; (900027b0 <LL_ConvertLineToRGB+0xa4>)
90002766:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002768:	4810      	ldr	r0, [pc, #64]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
9000276a:	f000 ffe9 	bl	90003740 <HAL_DMA2D_Init>
9000276e:	4603      	mov	r3, r0
90002770:	2b00      	cmp	r3, #0
90002772:	d115      	bne.n	900027a0 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002774:	2101      	movs	r1, #1
90002776:	480d      	ldr	r0, [pc, #52]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
90002778:	f001 f964 	bl	90003a44 <HAL_DMA2D_ConfigLayer>
9000277c:	4603      	mov	r3, r0
9000277e:	2b00      	cmp	r3, #0
90002780:	d10e      	bne.n	900027a0 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002782:	68b9      	ldr	r1, [r7, #8]
90002784:	687a      	ldr	r2, [r7, #4]
90002786:	2301      	movs	r3, #1
90002788:	9300      	str	r3, [sp, #0]
9000278a:	683b      	ldr	r3, [r7, #0]
9000278c:	4807      	ldr	r0, [pc, #28]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
9000278e:	f001 f845 	bl	9000381c <HAL_DMA2D_Start>
90002792:	4603      	mov	r3, r0
90002794:	2b00      	cmp	r3, #0
90002796:	d103      	bne.n	900027a0 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002798:	2132      	movs	r1, #50	; 0x32
9000279a:	4804      	ldr	r0, [pc, #16]	; (900027ac <LL_ConvertLineToRGB+0xa0>)
9000279c:	f001 f869 	bl	90003872 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
900027a0:	bf00      	nop
900027a2:	3718      	adds	r7, #24
900027a4:	46bd      	mov	sp, r7
900027a6:	bd80      	pop	{r7, pc}
900027a8:	20001078 	.word	0x20001078
900027ac:	20000f68 	.word	0x20000f68
900027b0:	52001000 	.word	0x52001000

900027b4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900027b4:	b580      	push	{r7, lr}
900027b6:	b08e      	sub	sp, #56	; 0x38
900027b8:	af00      	add	r7, sp, #0
900027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900027bc:	687b      	ldr	r3, [r7, #4]
900027be:	681b      	ldr	r3, [r3, #0]
900027c0:	4a5b      	ldr	r2, [pc, #364]	; (90002930 <LTDC_MspInit+0x17c>)
900027c2:	4293      	cmp	r3, r2
900027c4:	f040 80b0 	bne.w	90002928 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900027c8:	4b5a      	ldr	r3, [pc, #360]	; (90002934 <LTDC_MspInit+0x180>)
900027ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
900027ce:	4a59      	ldr	r2, [pc, #356]	; (90002934 <LTDC_MspInit+0x180>)
900027d0:	f043 0308 	orr.w	r3, r3, #8
900027d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
900027d8:	4b56      	ldr	r3, [pc, #344]	; (90002934 <LTDC_MspInit+0x180>)
900027da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
900027de:	f003 0308 	and.w	r3, r3, #8
900027e2:	623b      	str	r3, [r7, #32]
900027e4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
900027e6:	4b53      	ldr	r3, [pc, #332]	; (90002934 <LTDC_MspInit+0x180>)
900027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027ec:	4a51      	ldr	r2, [pc, #324]	; (90002934 <LTDC_MspInit+0x180>)
900027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900027f6:	4b4f      	ldr	r3, [pc, #316]	; (90002934 <LTDC_MspInit+0x180>)
900027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002800:	61fb      	str	r3, [r7, #28]
90002802:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002804:	4b4b      	ldr	r3, [pc, #300]	; (90002934 <LTDC_MspInit+0x180>)
90002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000280a:	4a4a      	ldr	r2, [pc, #296]	; (90002934 <LTDC_MspInit+0x180>)
9000280c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90002810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002814:	4b47      	ldr	r3, [pc, #284]	; (90002934 <LTDC_MspInit+0x180>)
90002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000281e:	61bb      	str	r3, [r7, #24]
90002820:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002822:	4b44      	ldr	r3, [pc, #272]	; (90002934 <LTDC_MspInit+0x180>)
90002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002828:	4a42      	ldr	r2, [pc, #264]	; (90002934 <LTDC_MspInit+0x180>)
9000282a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
9000282e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002832:	4b40      	ldr	r3, [pc, #256]	; (90002934 <LTDC_MspInit+0x180>)
90002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000283c:	617b      	str	r3, [r7, #20]
9000283e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002840:	4b3c      	ldr	r3, [pc, #240]	; (90002934 <LTDC_MspInit+0x180>)
90002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002846:	4a3b      	ldr	r2, [pc, #236]	; (90002934 <LTDC_MspInit+0x180>)
90002848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000284c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002850:	4b38      	ldr	r3, [pc, #224]	; (90002934 <LTDC_MspInit+0x180>)
90002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000285a:	613b      	str	r3, [r7, #16]
9000285c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000285e:	4b35      	ldr	r3, [pc, #212]	; (90002934 <LTDC_MspInit+0x180>)
90002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002864:	4a33      	ldr	r2, [pc, #204]	; (90002934 <LTDC_MspInit+0x180>)
90002866:	f043 0308 	orr.w	r3, r3, #8
9000286a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000286e:	4b31      	ldr	r3, [pc, #196]	; (90002934 <LTDC_MspInit+0x180>)
90002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002874:	f003 0308 	and.w	r3, r3, #8
90002878:	60fb      	str	r3, [r7, #12]
9000287a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
9000287c:	f24d 2303 	movw	r3, #53763	; 0xd203
90002880:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002882:	2302      	movs	r3, #2
90002884:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002886:	2300      	movs	r3, #0
90002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000288a:	2302      	movs	r3, #2
9000288c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000288e:	230e      	movs	r3, #14
90002890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002896:	4619      	mov	r1, r3
90002898:	4827      	ldr	r0, [pc, #156]	; (90002938 <LTDC_MspInit+0x184>)
9000289a:	f001 fa27 	bl	90003cec <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
9000289e:	f64f 73ff 	movw	r3, #65535	; 0xffff
900028a2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900028a4:	230e      	movs	r3, #14
900028a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
900028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028ac:	4619      	mov	r1, r3
900028ae:	4823      	ldr	r0, [pc, #140]	; (9000293c <LTDC_MspInit+0x188>)
900028b0:	f001 fa1c 	bl	90003cec <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900028b4:	23ff      	movs	r3, #255	; 0xff
900028b6:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900028b8:	230e      	movs	r3, #14
900028ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028c0:	4619      	mov	r1, r3
900028c2:	481f      	ldr	r0, [pc, #124]	; (90002940 <LTDC_MspInit+0x18c>)
900028c4:	f001 fa12 	bl	90003cec <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900028c8:	f240 2302 	movw	r3, #514	; 0x202
900028cc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900028ce:	2302      	movs	r3, #2
900028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900028d2:	2300      	movs	r3, #0
900028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900028d6:	2302      	movs	r3, #2
900028d8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900028da:	230e      	movs	r3, #14
900028dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028e2:	4619      	mov	r1, r3
900028e4:	4817      	ldr	r0, [pc, #92]	; (90002944 <LTDC_MspInit+0x190>)
900028e6:	f001 fa01 	bl	90003cec <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
900028ea:	2380      	movs	r3, #128	; 0x80
900028ec:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900028ee:	2301      	movs	r3, #1
900028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028f6:	4619      	mov	r1, r3
900028f8:	4813      	ldr	r0, [pc, #76]	; (90002948 <LTDC_MspInit+0x194>)
900028fa:	f001 f9f7 	bl	90003cec <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
900028fe:	2201      	movs	r2, #1
90002900:	2180      	movs	r1, #128	; 0x80
90002902:	4811      	ldr	r0, [pc, #68]	; (90002948 <LTDC_MspInit+0x194>)
90002904:	f001 fcac 	bl	90004260 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
90002908:	4b0a      	ldr	r3, [pc, #40]	; (90002934 <LTDC_MspInit+0x180>)
9000290a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000290e:	4a09      	ldr	r2, [pc, #36]	; (90002934 <LTDC_MspInit+0x180>)
90002910:	f043 0308 	orr.w	r3, r3, #8
90002914:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002918:	4b06      	ldr	r3, [pc, #24]	; (90002934 <LTDC_MspInit+0x180>)
9000291a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000291e:	4a05      	ldr	r2, [pc, #20]	; (90002934 <LTDC_MspInit+0x180>)
90002920:	f023 0308 	bic.w	r3, r3, #8
90002924:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
90002928:	bf00      	nop
9000292a:	3738      	adds	r7, #56	; 0x38
9000292c:	46bd      	mov	sp, r7
9000292e:	bd80      	pop	{r7, pc}
90002930:	50001000 	.word	0x50001000
90002934:	58024400 	.word	0x58024400
90002938:	58022000 	.word	0x58022000
9000293c:	58022400 	.word	0x58022400
90002940:	58022800 	.word	0x58022800
90002944:	58021c00 	.word	0x58021c00
90002948:	58020c00 	.word	0x58020c00

9000294c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000294c:	b480      	push	{r7}
9000294e:	b085      	sub	sp, #20
90002950:	af00      	add	r7, sp, #0
90002952:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002954:	687b      	ldr	r3, [r7, #4]
90002956:	681b      	ldr	r3, [r3, #0]
90002958:	4a11      	ldr	r2, [pc, #68]	; (900029a0 <DMA2D_MspInit+0x54>)
9000295a:	4293      	cmp	r3, r2
9000295c:	d11a      	bne.n	90002994 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000295e:	4b11      	ldr	r3, [pc, #68]	; (900029a4 <DMA2D_MspInit+0x58>)
90002960:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002964:	4a0f      	ldr	r2, [pc, #60]	; (900029a4 <DMA2D_MspInit+0x58>)
90002966:	f043 0310 	orr.w	r3, r3, #16
9000296a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
9000296e:	4b0d      	ldr	r3, [pc, #52]	; (900029a4 <DMA2D_MspInit+0x58>)
90002970:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002974:	f003 0310 	and.w	r3, r3, #16
90002978:	60fb      	str	r3, [r7, #12]
9000297a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
9000297c:	4b09      	ldr	r3, [pc, #36]	; (900029a4 <DMA2D_MspInit+0x58>)
9000297e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90002980:	4a08      	ldr	r2, [pc, #32]	; (900029a4 <DMA2D_MspInit+0x58>)
90002982:	f043 0310 	orr.w	r3, r3, #16
90002986:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002988:	4b06      	ldr	r3, [pc, #24]	; (900029a4 <DMA2D_MspInit+0x58>)
9000298a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000298c:	4a05      	ldr	r2, [pc, #20]	; (900029a4 <DMA2D_MspInit+0x58>)
9000298e:	f023 0310 	bic.w	r3, r3, #16
90002992:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
90002994:	bf00      	nop
90002996:	3714      	adds	r7, #20
90002998:	46bd      	mov	sp, r7
9000299a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000299e:	4770      	bx	lr
900029a0:	52001000 	.word	0x52001000
900029a4:	58024400 	.word	0x58024400

900029a8 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
900029a8:	b580      	push	{r7, lr}
900029aa:	b08a      	sub	sp, #40	; 0x28
900029ac:	af00      	add	r7, sp, #0
900029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900029b0:	4b18      	ldr	r3, [pc, #96]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900029b6:	4a17      	ldr	r2, [pc, #92]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900029c0:	4b14      	ldr	r3, [pc, #80]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900029ca:	613b      	str	r3, [r7, #16]
900029cc:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
900029ce:	4b11      	ldr	r3, [pc, #68]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900029d4:	4a0f      	ldr	r2, [pc, #60]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029d6:	f043 0302 	orr.w	r3, r3, #2
900029da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
900029de:	4b0d      	ldr	r3, [pc, #52]	; (90002a14 <TIMx_PWM_MspInit+0x6c>)
900029e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900029e4:	f003 0302 	and.w	r3, r3, #2
900029e8:	60fb      	str	r3, [r7, #12]
900029ea:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
900029ec:	2302      	movs	r3, #2
900029ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
900029f0:	2300      	movs	r3, #0
900029f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
900029f4:	2301      	movs	r3, #1
900029f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
900029f8:	2303      	movs	r3, #3
900029fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
900029fc:	2301      	movs	r3, #1
900029fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
90002a00:	f107 0314 	add.w	r3, r7, #20
90002a04:	4619      	mov	r1, r3
90002a06:	4804      	ldr	r0, [pc, #16]	; (90002a18 <TIMx_PWM_MspInit+0x70>)
90002a08:	f001 f970 	bl	90003cec <HAL_GPIO_Init>
}
90002a0c:	bf00      	nop
90002a0e:	3728      	adds	r7, #40	; 0x28
90002a10:	46bd      	mov	sp, r7
90002a12:	bd80      	pop	{r7, pc}
90002a14:	58024400 	.word	0x58024400
90002a18:	58022800 	.word	0x58022800

90002a1c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002a1c:	b580      	push	{r7, lr}
90002a1e:	b082      	sub	sp, #8
90002a20:	af00      	add	r7, sp, #0
90002a22:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002a24:	687b      	ldr	r3, [r7, #4]
90002a26:	4a11      	ldr	r2, [pc, #68]	; (90002a6c <TIMx_PWM_Init+0x50>)
90002a28:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002a2a:	6878      	ldr	r0, [r7, #4]
90002a2c:	f006 fd32 	bl	90009494 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002a30:	6878      	ldr	r0, [r7, #4]
90002a32:	f7ff ffb9 	bl	900029a8 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002a36:	687b      	ldr	r3, [r7, #4]
90002a38:	2204      	movs	r2, #4
90002a3a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002a3c:	687b      	ldr	r3, [r7, #4]
90002a3e:	f24c 3250 	movw	r2, #50000	; 0xc350
90002a42:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002a44:	687b      	ldr	r3, [r7, #4]
90002a46:	2200      	movs	r2, #0
90002a48:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002a4a:	687b      	ldr	r3, [r7, #4]
90002a4c:	2200      	movs	r2, #0
90002a4e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002a50:	687b      	ldr	r3, [r7, #4]
90002a52:	2200      	movs	r2, #0
90002a54:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002a56:	687b      	ldr	r3, [r7, #4]
90002a58:	2200      	movs	r2, #0
90002a5a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002a5c:	6878      	ldr	r0, [r7, #4]
90002a5e:	f006 fcc2 	bl	900093e6 <HAL_TIM_PWM_Init>
}
90002a62:	bf00      	nop
90002a64:	3708      	adds	r7, #8
90002a66:	46bd      	mov	sp, r7
90002a68:	bd80      	pop	{r7, pc}
90002a6a:	bf00      	nop
90002a6c:	40010400 	.word	0x40010400

90002a70 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002a70:	b580      	push	{r7, lr}
90002a72:	b084      	sub	sp, #16
90002a74:	af00      	add	r7, sp, #0
90002a76:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002a78:	2300      	movs	r3, #0
90002a7a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002a7c:	687b      	ldr	r3, [r7, #4]
90002a7e:	2b00      	cmp	r3, #0
90002a80:	d003      	beq.n	90002a8a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002a82:	f06f 0301 	mvn.w	r3, #1
90002a86:	60fb      	str	r3, [r7, #12]
90002a88:	e044      	b.n	90002b14 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002a8a:	687b      	ldr	r3, [r7, #4]
90002a8c:	2234      	movs	r2, #52	; 0x34
90002a8e:	fb02 f303 	mul.w	r3, r2, r3
90002a92:	4a23      	ldr	r2, [pc, #140]	; (90002b20 <BSP_SDRAM_Init+0xb0>)
90002a94:	4413      	add	r3, r2
90002a96:	4618      	mov	r0, r3
90002a98:	f000 f892 	bl	90002bc0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002a9c:	687b      	ldr	r3, [r7, #4]
90002a9e:	2234      	movs	r2, #52	; 0x34
90002aa0:	fb02 f303 	mul.w	r3, r2, r3
90002aa4:	4a1e      	ldr	r2, [pc, #120]	; (90002b20 <BSP_SDRAM_Init+0xb0>)
90002aa6:	4413      	add	r3, r2
90002aa8:	2210      	movs	r2, #16
90002aaa:	2104      	movs	r1, #4
90002aac:	4618      	mov	r0, r3
90002aae:	f000 f83b 	bl	90002b28 <MX_SDRAM_BANK2_Init>
90002ab2:	4603      	mov	r3, r0
90002ab4:	2b00      	cmp	r3, #0
90002ab6:	d003      	beq.n	90002ac0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90002abc:	60fb      	str	r3, [r7, #12]
90002abe:	e029      	b.n	90002b14 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002ac0:	4b18      	ldr	r3, [pc, #96]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ac2:	2208      	movs	r2, #8
90002ac4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002ac6:	4b17      	ldr	r3, [pc, #92]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ac8:	2203      	movs	r2, #3
90002aca:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002acc:	4b15      	ldr	r3, [pc, #84]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ace:	f240 6203 	movw	r2, #1539	; 0x603
90002ad2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002ad4:	4b13      	ldr	r3, [pc, #76]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ad6:	2200      	movs	r2, #0
90002ad8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002ada:	4b12      	ldr	r3, [pc, #72]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002adc:	2200      	movs	r2, #0
90002ade:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002ae0:	4b10      	ldr	r3, [pc, #64]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ae2:	2230      	movs	r2, #48	; 0x30
90002ae4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002ae6:	4b0f      	ldr	r3, [pc, #60]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002ae8:	2200      	movs	r2, #0
90002aea:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002aec:	4b0d      	ldr	r3, [pc, #52]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
90002af2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002af4:	687b      	ldr	r3, [r7, #4]
90002af6:	2234      	movs	r2, #52	; 0x34
90002af8:	fb02 f303 	mul.w	r3, r2, r3
90002afc:	4a08      	ldr	r2, [pc, #32]	; (90002b20 <BSP_SDRAM_Init+0xb0>)
90002afe:	4413      	add	r3, r2
90002b00:	4908      	ldr	r1, [pc, #32]	; (90002b24 <BSP_SDRAM_Init+0xb4>)
90002b02:	4618      	mov	r0, r3
90002b04:	f7fe fb3a 	bl	9000117c <MT48LC4M32B2_Init>
90002b08:	4603      	mov	r3, r0
90002b0a:	2b00      	cmp	r3, #0
90002b0c:	d002      	beq.n	90002b14 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002b0e:	f06f 0304 	mvn.w	r3, #4
90002b12:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002b14:	68fb      	ldr	r3, [r7, #12]
}
90002b16:	4618      	mov	r0, r3
90002b18:	3710      	adds	r7, #16
90002b1a:	46bd      	mov	sp, r7
90002b1c:	bd80      	pop	{r7, pc}
90002b1e:	bf00      	nop
90002b20:	20001098 	.word	0x20001098
90002b24:	200010cc 	.word	0x200010cc

90002b28 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002b28:	b580      	push	{r7, lr}
90002b2a:	b08c      	sub	sp, #48	; 0x30
90002b2c:	af00      	add	r7, sp, #0
90002b2e:	60f8      	str	r0, [r7, #12]
90002b30:	60b9      	str	r1, [r7, #8]
90002b32:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002b34:	4b20      	ldr	r3, [pc, #128]	; (90002bb8 <MX_SDRAM_BANK2_Init+0x90>)
90002b36:	4a21      	ldr	r2, [pc, #132]	; (90002bbc <MX_SDRAM_BANK2_Init+0x94>)
90002b38:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002b3a:	68fb      	ldr	r3, [r7, #12]
90002b3c:	2201      	movs	r2, #1
90002b3e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002b40:	68fb      	ldr	r3, [r7, #12]
90002b42:	2200      	movs	r2, #0
90002b44:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002b46:	68fb      	ldr	r3, [r7, #12]
90002b48:	68ba      	ldr	r2, [r7, #8]
90002b4a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002b4c:	68fb      	ldr	r3, [r7, #12]
90002b4e:	687a      	ldr	r2, [r7, #4]
90002b50:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002b52:	4b19      	ldr	r3, [pc, #100]	; (90002bb8 <MX_SDRAM_BANK2_Init+0x90>)
90002b54:	2240      	movs	r2, #64	; 0x40
90002b56:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002b58:	68fb      	ldr	r3, [r7, #12]
90002b5a:	f44f 72c0 	mov.w	r2, #384	; 0x180
90002b5e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002b60:	68fb      	ldr	r3, [r7, #12]
90002b62:	2200      	movs	r2, #0
90002b64:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002b66:	68fb      	ldr	r3, [r7, #12]
90002b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
90002b6c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002b6e:	68fb      	ldr	r3, [r7, #12]
90002b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90002b74:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002b76:	68fb      	ldr	r3, [r7, #12]
90002b78:	2200      	movs	r2, #0
90002b7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002b7c:	2302      	movs	r3, #2
90002b7e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002b80:	2307      	movs	r3, #7
90002b82:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002b84:	2304      	movs	r3, #4
90002b86:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002b88:	2307      	movs	r3, #7
90002b8a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002b8c:	2302      	movs	r3, #2
90002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
90002b90:	2302      	movs	r3, #2
90002b92:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
90002b94:	2302      	movs	r3, #2
90002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002b98:	f107 0314 	add.w	r3, r7, #20
90002b9c:	4619      	mov	r1, r3
90002b9e:	68f8      	ldr	r0, [r7, #12]
90002ba0:	f006 fb7e 	bl	900092a0 <HAL_SDRAM_Init>
90002ba4:	4603      	mov	r3, r0
90002ba6:	2b00      	cmp	r3, #0
90002ba8:	d001      	beq.n	90002bae <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002baa:	2301      	movs	r3, #1
90002bac:	e000      	b.n	90002bb0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002bae:	2300      	movs	r3, #0
}
90002bb0:	4618      	mov	r0, r3
90002bb2:	3730      	adds	r7, #48	; 0x30
90002bb4:	46bd      	mov	sp, r7
90002bb6:	bd80      	pop	{r7, pc}
90002bb8:	20001098 	.word	0x20001098
90002bbc:	52004140 	.word	0x52004140

90002bc0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002bc0:	b580      	push	{r7, lr}
90002bc2:	b08e      	sub	sp, #56	; 0x38
90002bc4:	af00      	add	r7, sp, #0
90002bc6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002bc8:	4b73      	ldr	r3, [pc, #460]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002bca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bce:	4a72      	ldr	r2, [pc, #456]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90002bd4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90002bd8:	4b6f      	ldr	r3, [pc, #444]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002bda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90002be2:	623b      	str	r3, [r7, #32]
90002be4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002be6:	4b6c      	ldr	r3, [pc, #432]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002be8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bec:	4a6a      	ldr	r2, [pc, #424]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002bee:	f043 0301 	orr.w	r3, r3, #1
90002bf2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90002bf6:	4b68      	ldr	r3, [pc, #416]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002bf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bfc:	f003 0301 	and.w	r3, r3, #1
90002c00:	61fb      	str	r3, [r7, #28]
90002c02:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002c04:	4b64      	ldr	r3, [pc, #400]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c0a:	4a63      	ldr	r2, [pc, #396]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c0c:	f043 0308 	orr.w	r3, r3, #8
90002c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c14:	4b60      	ldr	r3, [pc, #384]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c1a:	f003 0308 	and.w	r3, r3, #8
90002c1e:	61bb      	str	r3, [r7, #24]
90002c20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002c22:	4b5d      	ldr	r3, [pc, #372]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c28:	4a5b      	ldr	r2, [pc, #364]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c2a:	f043 0310 	orr.w	r3, r3, #16
90002c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c32:	4b59      	ldr	r3, [pc, #356]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c38:	f003 0310 	and.w	r3, r3, #16
90002c3c:	617b      	str	r3, [r7, #20]
90002c3e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002c40:	4b55      	ldr	r3, [pc, #340]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c46:	4a54      	ldr	r2, [pc, #336]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c48:	f043 0320 	orr.w	r3, r3, #32
90002c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c50:	4b51      	ldr	r3, [pc, #324]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c56:	f003 0320 	and.w	r3, r3, #32
90002c5a:	613b      	str	r3, [r7, #16]
90002c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002c5e:	4b4e      	ldr	r3, [pc, #312]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c64:	4a4c      	ldr	r2, [pc, #304]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90002c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c6e:	4b4a      	ldr	r3, [pc, #296]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
90002c78:	60fb      	str	r3, [r7, #12]
90002c7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002c7c:	4b46      	ldr	r3, [pc, #280]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c82:	4a45      	ldr	r2, [pc, #276]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90002c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c8c:	4b42      	ldr	r3, [pc, #264]	; (90002d98 <SDRAM_MspInit+0x1d8>)
90002c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002c96:	60bb      	str	r3, [r7, #8]
90002c98:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002c9a:	2302      	movs	r3, #2
90002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002c9e:	2301      	movs	r3, #1
90002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002ca2:	2303      	movs	r3, #3
90002ca4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002ca6:	230c      	movs	r3, #12
90002ca8:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002caa:	f24c 7303 	movw	r3, #50947	; 0xc703
90002cae:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cb4:	4619      	mov	r1, r3
90002cb6:	4839      	ldr	r0, [pc, #228]	; (90002d9c <SDRAM_MspInit+0x1dc>)
90002cb8:	f001 f818 	bl	90003cec <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002cbc:	f64f 7383 	movw	r3, #65411	; 0xff83
90002cc0:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cc6:	4619      	mov	r1, r3
90002cc8:	4835      	ldr	r0, [pc, #212]	; (90002da0 <SDRAM_MspInit+0x1e0>)
90002cca:	f001 f80f 	bl	90003cec <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002cce:	f64f 033f 	movw	r3, #63551	; 0xf83f
90002cd2:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cd8:	4619      	mov	r1, r3
90002cda:	4832      	ldr	r0, [pc, #200]	; (90002da4 <SDRAM_MspInit+0x1e4>)
90002cdc:	f001 f806 	bl	90003cec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002ce0:	f248 1333 	movw	r3, #33075	; 0x8133
90002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cea:	4619      	mov	r1, r3
90002cec:	482e      	ldr	r0, [pc, #184]	; (90002da8 <SDRAM_MspInit+0x1e8>)
90002cee:	f000 fffd 	bl	90003cec <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002cf2:	23e0      	movs	r3, #224	; 0xe0
90002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cfa:	4619      	mov	r1, r3
90002cfc:	482b      	ldr	r0, [pc, #172]	; (90002dac <SDRAM_MspInit+0x1ec>)
90002cfe:	f000 fff5 	bl	90003cec <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002d02:	4b2b      	ldr	r3, [pc, #172]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90002d08:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002d0a:	4b29      	ldr	r3, [pc, #164]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90002d10:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002d12:	4b27      	ldr	r3, [pc, #156]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d14:	2280      	movs	r2, #128	; 0x80
90002d16:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002d18:	4b25      	ldr	r3, [pc, #148]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d1a:	2200      	movs	r2, #0
90002d1c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002d1e:	4b24      	ldr	r3, [pc, #144]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d20:	f240 2202 	movw	r2, #514	; 0x202
90002d24:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002d26:	4b22      	ldr	r3, [pc, #136]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d28:	f640 0208 	movw	r2, #2056	; 0x808
90002d2c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002d2e:	4b20      	ldr	r3, [pc, #128]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d30:	2220      	movs	r2, #32
90002d32:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002d34:	4b1e      	ldr	r3, [pc, #120]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d36:	2280      	movs	r2, #128	; 0x80
90002d38:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002d3a:	4b1d      	ldr	r3, [pc, #116]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90002d40:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002d42:	4b1b      	ldr	r3, [pc, #108]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d44:	2200      	movs	r2, #0
90002d46:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002d48:	4b19      	ldr	r3, [pc, #100]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d4a:	2200      	movs	r2, #0
90002d4c:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002d4e:	4b18      	ldr	r3, [pc, #96]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d50:	2280      	movs	r2, #128	; 0x80
90002d52:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002d54:	4b16      	ldr	r3, [pc, #88]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d56:	2200      	movs	r2, #0
90002d58:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002d5a:	4b15      	ldr	r3, [pc, #84]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d5c:	2200      	movs	r2, #0
90002d5e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002d60:	4b13      	ldr	r3, [pc, #76]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d62:	4a14      	ldr	r2, [pc, #80]	; (90002db4 <SDRAM_MspInit+0x1f4>)
90002d64:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002d66:	4b14      	ldr	r3, [pc, #80]	; (90002db8 <SDRAM_MspInit+0x1f8>)
90002d68:	4a11      	ldr	r2, [pc, #68]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d6a:	631a      	str	r2, [r3, #48]	; 0x30
90002d6c:	4b10      	ldr	r3, [pc, #64]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d6e:	4a12      	ldr	r2, [pc, #72]	; (90002db8 <SDRAM_MspInit+0x1f8>)
90002d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002d72:	480f      	ldr	r0, [pc, #60]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d74:	f003 fe2c 	bl	900069d0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002d78:	480d      	ldr	r0, [pc, #52]	; (90002db0 <SDRAM_MspInit+0x1f0>)
90002d7a:	f003 fddd 	bl	90006938 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002d7e:	2200      	movs	r2, #0
90002d80:	210f      	movs	r1, #15
90002d82:	207a      	movs	r0, #122	; 0x7a
90002d84:	f000 fc2b 	bl	900035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002d88:	207a      	movs	r0, #122	; 0x7a
90002d8a:	f000 fc42 	bl	90003612 <HAL_NVIC_EnableIRQ>
}
90002d8e:	bf00      	nop
90002d90:	3738      	adds	r7, #56	; 0x38
90002d92:	46bd      	mov	sp, r7
90002d94:	bd80      	pop	{r7, pc}
90002d96:	bf00      	nop
90002d98:	58024400 	.word	0x58024400
90002d9c:	58020c00 	.word	0x58020c00
90002da0:	58021000 	.word	0x58021000
90002da4:	58021400 	.word	0x58021400
90002da8:	58021800 	.word	0x58021800
90002dac:	58021c00 	.word	0x58021c00
90002db0:	200010ec 	.word	0x200010ec
90002db4:	52000040 	.word	0x52000040
90002db8:	20001098 	.word	0x20001098

90002dbc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90002dbc:	b580      	push	{r7, lr}
90002dbe:	b088      	sub	sp, #32
90002dc0:	af00      	add	r7, sp, #0
90002dc2:	6078      	str	r0, [r7, #4]
90002dc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002dc6:	2300      	movs	r3, #0
90002dc8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002dca:	687b      	ldr	r3, [r7, #4]
90002dcc:	2b00      	cmp	r3, #0
90002dce:	d11c      	bne.n	90002e0a <BSP_TS_Init+0x4e>
90002dd0:	683b      	ldr	r3, [r7, #0]
90002dd2:	681b      	ldr	r3, [r3, #0]
90002dd4:	2b00      	cmp	r3, #0
90002dd6:	d018      	beq.n	90002e0a <BSP_TS_Init+0x4e>
90002dd8:	683b      	ldr	r3, [r7, #0]
90002dda:	681b      	ldr	r3, [r3, #0]
90002ddc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
90002de0:	d813      	bhi.n	90002e0a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002de2:	683b      	ldr	r3, [r7, #0]
90002de4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002de6:	2b00      	cmp	r3, #0
90002de8:	d00f      	beq.n	90002e0a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002dea:	683b      	ldr	r3, [r7, #0]
90002dec:	685b      	ldr	r3, [r3, #4]
90002dee:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
90002df2:	d80a      	bhi.n	90002e0a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90002df4:	683b      	ldr	r3, [r7, #0]
90002df6:	68da      	ldr	r2, [r3, #12]
90002df8:	683b      	ldr	r3, [r7, #0]
90002dfa:	6819      	ldr	r1, [r3, #0]
90002dfc:	683b      	ldr	r3, [r7, #0]
90002dfe:	685b      	ldr	r3, [r3, #4]
90002e00:	428b      	cmp	r3, r1
90002e02:	bf28      	it	cs
90002e04:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002e06:	429a      	cmp	r2, r3
90002e08:	d903      	bls.n	90002e12 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002e0a:	f06f 0301 	mvn.w	r3, #1
90002e0e:	61fb      	str	r3, [r7, #28]
90002e10:	e06e      	b.n	90002ef0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
90002e12:	6878      	ldr	r0, [r7, #4]
90002e14:	f000 f98c 	bl	90003130 <FT5336_Probe>
90002e18:	4603      	mov	r3, r0
90002e1a:	2b00      	cmp	r3, #0
90002e1c:	d003      	beq.n	90002e26 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
90002e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90002e22:	61fb      	str	r3, [r7, #28]
90002e24:	e064      	b.n	90002ef0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90002e26:	683b      	ldr	r3, [r7, #0]
90002e28:	681a      	ldr	r2, [r3, #0]
90002e2a:	4934      	ldr	r1, [pc, #208]	; (90002efc <BSP_TS_Init+0x140>)
90002e2c:	687b      	ldr	r3, [r7, #4]
90002e2e:	019b      	lsls	r3, r3, #6
90002e30:	440b      	add	r3, r1
90002e32:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
90002e34:	683b      	ldr	r3, [r7, #0]
90002e36:	685a      	ldr	r2, [r3, #4]
90002e38:	4930      	ldr	r1, [pc, #192]	; (90002efc <BSP_TS_Init+0x140>)
90002e3a:	687b      	ldr	r3, [r7, #4]
90002e3c:	019b      	lsls	r3, r3, #6
90002e3e:	440b      	add	r3, r1
90002e40:	3304      	adds	r3, #4
90002e42:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
90002e44:	683b      	ldr	r3, [r7, #0]
90002e46:	689a      	ldr	r2, [r3, #8]
90002e48:	492c      	ldr	r1, [pc, #176]	; (90002efc <BSP_TS_Init+0x140>)
90002e4a:	687b      	ldr	r3, [r7, #4]
90002e4c:	019b      	lsls	r3, r3, #6
90002e4e:	440b      	add	r3, r1
90002e50:	3308      	adds	r3, #8
90002e52:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90002e54:	683b      	ldr	r3, [r7, #0]
90002e56:	68da      	ldr	r2, [r3, #12]
90002e58:	4928      	ldr	r1, [pc, #160]	; (90002efc <BSP_TS_Init+0x140>)
90002e5a:	687b      	ldr	r3, [r7, #4]
90002e5c:	019b      	lsls	r3, r3, #6
90002e5e:	440b      	add	r3, r1
90002e60:	330c      	adds	r3, #12
90002e62:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90002e64:	4b26      	ldr	r3, [pc, #152]	; (90002f00 <BSP_TS_Init+0x144>)
90002e66:	681b      	ldr	r3, [r3, #0]
90002e68:	69db      	ldr	r3, [r3, #28]
90002e6a:	4926      	ldr	r1, [pc, #152]	; (90002f04 <BSP_TS_Init+0x148>)
90002e6c:	687a      	ldr	r2, [r7, #4]
90002e6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002e72:	f107 010c 	add.w	r1, r7, #12
90002e76:	4610      	mov	r0, r2
90002e78:	4798      	blx	r3
90002e7a:	4603      	mov	r3, r0
90002e7c:	2b00      	cmp	r3, #0
90002e7e:	da03      	bge.n	90002e88 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002e80:	f06f 0304 	mvn.w	r3, #4
90002e84:	61fb      	str	r3, [r7, #28]
90002e86:	e033      	b.n	90002ef0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90002e88:	693a      	ldr	r2, [r7, #16]
90002e8a:	491c      	ldr	r1, [pc, #112]	; (90002efc <BSP_TS_Init+0x140>)
90002e8c:	687b      	ldr	r3, [r7, #4]
90002e8e:	019b      	lsls	r3, r3, #6
90002e90:	440b      	add	r3, r1
90002e92:	3310      	adds	r3, #16
90002e94:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
90002e96:	697a      	ldr	r2, [r7, #20]
90002e98:	4918      	ldr	r1, [pc, #96]	; (90002efc <BSP_TS_Init+0x140>)
90002e9a:	687b      	ldr	r3, [r7, #4]
90002e9c:	019b      	lsls	r3, r3, #6
90002e9e:	440b      	add	r3, r1
90002ea0:	3314      	adds	r3, #20
90002ea2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002ea4:	2300      	movs	r3, #0
90002ea6:	61bb      	str	r3, [r7, #24]
90002ea8:	e01f      	b.n	90002eea <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90002eaa:	683b      	ldr	r3, [r7, #0]
90002eac:	681a      	ldr	r2, [r3, #0]
90002eae:	683b      	ldr	r3, [r7, #0]
90002eb0:	68db      	ldr	r3, [r3, #12]
90002eb2:	4413      	add	r3, r2
90002eb4:	1c5a      	adds	r2, r3, #1
90002eb6:	4811      	ldr	r0, [pc, #68]	; (90002efc <BSP_TS_Init+0x140>)
90002eb8:	687b      	ldr	r3, [r7, #4]
90002eba:	0119      	lsls	r1, r3, #4
90002ebc:	69bb      	ldr	r3, [r7, #24]
90002ebe:	440b      	add	r3, r1
90002ec0:	3306      	adds	r3, #6
90002ec2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90002ec6:	683b      	ldr	r3, [r7, #0]
90002ec8:	685a      	ldr	r2, [r3, #4]
90002eca:	683b      	ldr	r3, [r7, #0]
90002ecc:	68db      	ldr	r3, [r3, #12]
90002ece:	4413      	add	r3, r2
90002ed0:	1c5a      	adds	r2, r3, #1
90002ed2:	480a      	ldr	r0, [pc, #40]	; (90002efc <BSP_TS_Init+0x140>)
90002ed4:	687b      	ldr	r3, [r7, #4]
90002ed6:	0119      	lsls	r1, r3, #4
90002ed8:	69bb      	ldr	r3, [r7, #24]
90002eda:	440b      	add	r3, r1
90002edc:	330a      	adds	r3, #10
90002ede:	009b      	lsls	r3, r3, #2
90002ee0:	4403      	add	r3, r0
90002ee2:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002ee4:	69bb      	ldr	r3, [r7, #24]
90002ee6:	3301      	adds	r3, #1
90002ee8:	61bb      	str	r3, [r7, #24]
90002eea:	69bb      	ldr	r3, [r7, #24]
90002eec:	2b04      	cmp	r3, #4
90002eee:	d9dc      	bls.n	90002eaa <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90002ef0:	69fb      	ldr	r3, [r7, #28]
}
90002ef2:	4618      	mov	r0, r3
90002ef4:	3720      	adds	r7, #32
90002ef6:	46bd      	mov	sp, r7
90002ef8:	bd80      	pop	{r7, pc}
90002efa:	bf00      	nop
90002efc:	20001160 	.word	0x20001160
90002f00:	20001158 	.word	0x20001158
90002f04:	2000115c 	.word	0x2000115c

90002f08 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
90002f08:	b580      	push	{r7, lr}
90002f0a:	b08a      	sub	sp, #40	; 0x28
90002f0c:	af00      	add	r7, sp, #0
90002f0e:	6078      	str	r0, [r7, #4]
90002f10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002f12:	2300      	movs	r3, #0
90002f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
90002f16:	687b      	ldr	r3, [r7, #4]
90002f18:	2b00      	cmp	r3, #0
90002f1a:	d003      	beq.n	90002f24 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002f1c:	f06f 0301 	mvn.w	r3, #1
90002f20:	627b      	str	r3, [r7, #36]	; 0x24
90002f22:	e0f9      	b.n	90003118 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90002f24:	4b7f      	ldr	r3, [pc, #508]	; (90003124 <BSP_TS_GetState+0x21c>)
90002f26:	681b      	ldr	r3, [r3, #0]
90002f28:	691b      	ldr	r3, [r3, #16]
90002f2a:	497f      	ldr	r1, [pc, #508]	; (90003128 <BSP_TS_GetState+0x220>)
90002f2c:	687a      	ldr	r2, [r7, #4]
90002f2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002f32:	f107 0108 	add.w	r1, r7, #8
90002f36:	4610      	mov	r0, r2
90002f38:	4798      	blx	r3
90002f3a:	4603      	mov	r3, r0
90002f3c:	2b00      	cmp	r3, #0
90002f3e:	da03      	bge.n	90002f48 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90002f40:	f06f 0304 	mvn.w	r3, #4
90002f44:	627b      	str	r3, [r7, #36]	; 0x24
90002f46:	e0e7      	b.n	90003118 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
90002f48:	68bb      	ldr	r3, [r7, #8]
90002f4a:	2b00      	cmp	r3, #0
90002f4c:	f000 80d1 	beq.w	900030f2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
90002f50:	68fb      	ldr	r3, [r7, #12]
90002f52:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
90002f54:	693b      	ldr	r3, [r7, #16]
90002f56:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90002f58:	4a74      	ldr	r2, [pc, #464]	; (9000312c <BSP_TS_GetState+0x224>)
90002f5a:	687b      	ldr	r3, [r7, #4]
90002f5c:	019b      	lsls	r3, r3, #6
90002f5e:	4413      	add	r3, r2
90002f60:	3308      	adds	r3, #8
90002f62:	681b      	ldr	r3, [r3, #0]
90002f64:	f003 0308 	and.w	r3, r3, #8
90002f68:	2b00      	cmp	r3, #0
90002f6a:	d003      	beq.n	90002f74 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
90002f6c:	693b      	ldr	r3, [r7, #16]
90002f6e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
90002f70:	68fb      	ldr	r3, [r7, #12]
90002f72:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90002f74:	4a6d      	ldr	r2, [pc, #436]	; (9000312c <BSP_TS_GetState+0x224>)
90002f76:	687b      	ldr	r3, [r7, #4]
90002f78:	019b      	lsls	r3, r3, #6
90002f7a:	4413      	add	r3, r2
90002f7c:	3308      	adds	r3, #8
90002f7e:	681b      	ldr	r3, [r3, #0]
90002f80:	f003 0302 	and.w	r3, r3, #2
90002f84:	2b00      	cmp	r3, #0
90002f86:	d009      	beq.n	90002f9c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90002f88:	4a68      	ldr	r2, [pc, #416]	; (9000312c <BSP_TS_GetState+0x224>)
90002f8a:	687b      	ldr	r3, [r7, #4]
90002f8c:	019b      	lsls	r3, r3, #6
90002f8e:	4413      	add	r3, r2
90002f90:	3310      	adds	r3, #16
90002f92:	681a      	ldr	r2, [r3, #0]
90002f94:	68fb      	ldr	r3, [r7, #12]
90002f96:	1ad3      	subs	r3, r2, r3
90002f98:	3b01      	subs	r3, #1
90002f9a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90002f9c:	4a63      	ldr	r2, [pc, #396]	; (9000312c <BSP_TS_GetState+0x224>)
90002f9e:	687b      	ldr	r3, [r7, #4]
90002fa0:	019b      	lsls	r3, r3, #6
90002fa2:	4413      	add	r3, r2
90002fa4:	3308      	adds	r3, #8
90002fa6:	681b      	ldr	r3, [r3, #0]
90002fa8:	f003 0304 	and.w	r3, r3, #4
90002fac:	2b00      	cmp	r3, #0
90002fae:	d008      	beq.n	90002fc2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90002fb0:	4a5e      	ldr	r2, [pc, #376]	; (9000312c <BSP_TS_GetState+0x224>)
90002fb2:	687b      	ldr	r3, [r7, #4]
90002fb4:	019b      	lsls	r3, r3, #6
90002fb6:	4413      	add	r3, r2
90002fb8:	3314      	adds	r3, #20
90002fba:	681a      	ldr	r2, [r3, #0]
90002fbc:	693b      	ldr	r3, [r7, #16]
90002fbe:	1ad3      	subs	r3, r2, r3
90002fc0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90002fc2:	4a5a      	ldr	r2, [pc, #360]	; (9000312c <BSP_TS_GetState+0x224>)
90002fc4:	687b      	ldr	r3, [r7, #4]
90002fc6:	019b      	lsls	r3, r3, #6
90002fc8:	4413      	add	r3, r2
90002fca:	681b      	ldr	r3, [r3, #0]
90002fcc:	6a3a      	ldr	r2, [r7, #32]
90002fce:	fb03 f202 	mul.w	r2, r3, r2
90002fd2:	4956      	ldr	r1, [pc, #344]	; (9000312c <BSP_TS_GetState+0x224>)
90002fd4:	687b      	ldr	r3, [r7, #4]
90002fd6:	019b      	lsls	r3, r3, #6
90002fd8:	440b      	add	r3, r1
90002fda:	3310      	adds	r3, #16
90002fdc:	681b      	ldr	r3, [r3, #0]
90002fde:	fbb2 f2f3 	udiv	r2, r2, r3
90002fe2:	683b      	ldr	r3, [r7, #0]
90002fe4:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90002fe6:	4a51      	ldr	r2, [pc, #324]	; (9000312c <BSP_TS_GetState+0x224>)
90002fe8:	687b      	ldr	r3, [r7, #4]
90002fea:	019b      	lsls	r3, r3, #6
90002fec:	4413      	add	r3, r2
90002fee:	3304      	adds	r3, #4
90002ff0:	681b      	ldr	r3, [r3, #0]
90002ff2:	69fa      	ldr	r2, [r7, #28]
90002ff4:	fb03 f202 	mul.w	r2, r3, r2
90002ff8:	494c      	ldr	r1, [pc, #304]	; (9000312c <BSP_TS_GetState+0x224>)
90002ffa:	687b      	ldr	r3, [r7, #4]
90002ffc:	019b      	lsls	r3, r3, #6
90002ffe:	440b      	add	r3, r1
90003000:	3314      	adds	r3, #20
90003002:	681b      	ldr	r3, [r3, #0]
90003004:	fbb2 f2f3 	udiv	r2, r2, r3
90003008:	683b      	ldr	r3, [r7, #0]
9000300a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
9000300c:	68ba      	ldr	r2, [r7, #8]
9000300e:	683b      	ldr	r3, [r7, #0]
90003010:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90003012:	683b      	ldr	r3, [r7, #0]
90003014:	685a      	ldr	r2, [r3, #4]
90003016:	4945      	ldr	r1, [pc, #276]	; (9000312c <BSP_TS_GetState+0x224>)
90003018:	687b      	ldr	r3, [r7, #4]
9000301a:	019b      	lsls	r3, r3, #6
9000301c:	440b      	add	r3, r1
9000301e:	3318      	adds	r3, #24
90003020:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90003022:	429a      	cmp	r2, r3
90003024:	d909      	bls.n	9000303a <BSP_TS_GetState+0x132>
90003026:	683b      	ldr	r3, [r7, #0]
90003028:	685a      	ldr	r2, [r3, #4]
9000302a:	4940      	ldr	r1, [pc, #256]	; (9000312c <BSP_TS_GetState+0x224>)
9000302c:	687b      	ldr	r3, [r7, #4]
9000302e:	019b      	lsls	r3, r3, #6
90003030:	440b      	add	r3, r1
90003032:	3318      	adds	r3, #24
90003034:	681b      	ldr	r3, [r3, #0]
90003036:	1ad3      	subs	r3, r2, r3
90003038:	e008      	b.n	9000304c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
9000303a:	4a3c      	ldr	r2, [pc, #240]	; (9000312c <BSP_TS_GetState+0x224>)
9000303c:	687b      	ldr	r3, [r7, #4]
9000303e:	019b      	lsls	r3, r3, #6
90003040:	4413      	add	r3, r2
90003042:	3318      	adds	r3, #24
90003044:	681a      	ldr	r2, [r3, #0]
90003046:	683b      	ldr	r3, [r7, #0]
90003048:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000304a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
9000304c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000304e:	683b      	ldr	r3, [r7, #0]
90003050:	689a      	ldr	r2, [r3, #8]
90003052:	4936      	ldr	r1, [pc, #216]	; (9000312c <BSP_TS_GetState+0x224>)
90003054:	687b      	ldr	r3, [r7, #4]
90003056:	019b      	lsls	r3, r3, #6
90003058:	440b      	add	r3, r1
9000305a:	332c      	adds	r3, #44	; 0x2c
9000305c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000305e:	429a      	cmp	r2, r3
90003060:	d909      	bls.n	90003076 <BSP_TS_GetState+0x16e>
90003062:	683b      	ldr	r3, [r7, #0]
90003064:	689a      	ldr	r2, [r3, #8]
90003066:	4931      	ldr	r1, [pc, #196]	; (9000312c <BSP_TS_GetState+0x224>)
90003068:	687b      	ldr	r3, [r7, #4]
9000306a:	019b      	lsls	r3, r3, #6
9000306c:	440b      	add	r3, r1
9000306e:	332c      	adds	r3, #44	; 0x2c
90003070:	681b      	ldr	r3, [r3, #0]
90003072:	1ad3      	subs	r3, r2, r3
90003074:	e008      	b.n	90003088 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
90003076:	4a2d      	ldr	r2, [pc, #180]	; (9000312c <BSP_TS_GetState+0x224>)
90003078:	687b      	ldr	r3, [r7, #4]
9000307a:	019b      	lsls	r3, r3, #6
9000307c:	4413      	add	r3, r2
9000307e:	332c      	adds	r3, #44	; 0x2c
90003080:	681a      	ldr	r2, [r3, #0]
90003082:	683b      	ldr	r3, [r7, #0]
90003084:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90003086:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90003088:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000308a:	4a28      	ldr	r2, [pc, #160]	; (9000312c <BSP_TS_GetState+0x224>)
9000308c:	687b      	ldr	r3, [r7, #4]
9000308e:	019b      	lsls	r3, r3, #6
90003090:	4413      	add	r3, r2
90003092:	330c      	adds	r3, #12
90003094:	681b      	ldr	r3, [r3, #0]
90003096:	69ba      	ldr	r2, [r7, #24]
90003098:	429a      	cmp	r2, r3
9000309a:	d808      	bhi.n	900030ae <BSP_TS_GetState+0x1a6>
9000309c:	4a23      	ldr	r2, [pc, #140]	; (9000312c <BSP_TS_GetState+0x224>)
9000309e:	687b      	ldr	r3, [r7, #4]
900030a0:	019b      	lsls	r3, r3, #6
900030a2:	4413      	add	r3, r2
900030a4:	330c      	adds	r3, #12
900030a6:	681b      	ldr	r3, [r3, #0]
900030a8:	697a      	ldr	r2, [r7, #20]
900030aa:	429a      	cmp	r2, r3
900030ac:	d910      	bls.n	900030d0 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
900030ae:	683b      	ldr	r3, [r7, #0]
900030b0:	685a      	ldr	r2, [r3, #4]
900030b2:	491e      	ldr	r1, [pc, #120]	; (9000312c <BSP_TS_GetState+0x224>)
900030b4:	687b      	ldr	r3, [r7, #4]
900030b6:	019b      	lsls	r3, r3, #6
900030b8:	440b      	add	r3, r1
900030ba:	3318      	adds	r3, #24
900030bc:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
900030be:	683b      	ldr	r3, [r7, #0]
900030c0:	689a      	ldr	r2, [r3, #8]
900030c2:	491a      	ldr	r1, [pc, #104]	; (9000312c <BSP_TS_GetState+0x224>)
900030c4:	687b      	ldr	r3, [r7, #4]
900030c6:	019b      	lsls	r3, r3, #6
900030c8:	440b      	add	r3, r1
900030ca:	332c      	adds	r3, #44	; 0x2c
900030cc:	601a      	str	r2, [r3, #0]
900030ce:	e023      	b.n	90003118 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900030d0:	4a16      	ldr	r2, [pc, #88]	; (9000312c <BSP_TS_GetState+0x224>)
900030d2:	687b      	ldr	r3, [r7, #4]
900030d4:	019b      	lsls	r3, r3, #6
900030d6:	4413      	add	r3, r2
900030d8:	3318      	adds	r3, #24
900030da:	681a      	ldr	r2, [r3, #0]
900030dc:	683b      	ldr	r3, [r7, #0]
900030de:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900030e0:	4a12      	ldr	r2, [pc, #72]	; (9000312c <BSP_TS_GetState+0x224>)
900030e2:	687b      	ldr	r3, [r7, #4]
900030e4:	019b      	lsls	r3, r3, #6
900030e6:	4413      	add	r3, r2
900030e8:	332c      	adds	r3, #44	; 0x2c
900030ea:	681a      	ldr	r2, [r3, #0]
900030ec:	683b      	ldr	r3, [r7, #0]
900030ee:	609a      	str	r2, [r3, #8]
900030f0:	e012      	b.n	90003118 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
900030f2:	683b      	ldr	r3, [r7, #0]
900030f4:	2200      	movs	r2, #0
900030f6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900030f8:	4a0c      	ldr	r2, [pc, #48]	; (9000312c <BSP_TS_GetState+0x224>)
900030fa:	687b      	ldr	r3, [r7, #4]
900030fc:	019b      	lsls	r3, r3, #6
900030fe:	4413      	add	r3, r2
90003100:	3318      	adds	r3, #24
90003102:	681a      	ldr	r2, [r3, #0]
90003104:	683b      	ldr	r3, [r7, #0]
90003106:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90003108:	4a08      	ldr	r2, [pc, #32]	; (9000312c <BSP_TS_GetState+0x224>)
9000310a:	687b      	ldr	r3, [r7, #4]
9000310c:	019b      	lsls	r3, r3, #6
9000310e:	4413      	add	r3, r2
90003110:	332c      	adds	r3, #44	; 0x2c
90003112:	681a      	ldr	r2, [r3, #0]
90003114:	683b      	ldr	r3, [r7, #0]
90003116:	609a      	str	r2, [r3, #8]
    }
}

return ret;
90003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000311a:	4618      	mov	r0, r3
9000311c:	3728      	adds	r7, #40	; 0x28
9000311e:	46bd      	mov	sp, r7
90003120:	bd80      	pop	{r7, pc}
90003122:	bf00      	nop
90003124:	20001158 	.word	0x20001158
90003128:	2000115c 	.word	0x2000115c
9000312c:	20001160 	.word	0x20001160

90003130 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
90003130:	b580      	push	{r7, lr}
90003132:	b08a      	sub	sp, #40	; 0x28
90003134:	af00      	add	r7, sp, #0
90003136:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003138:	2300      	movs	r3, #0
9000313a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
9000313c:	2300      	movs	r3, #0
9000313e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90003140:	2370      	movs	r3, #112	; 0x70
90003142:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
90003144:	4b23      	ldr	r3, [pc, #140]	; (900031d4 <FT5336_Probe+0xa4>)
90003146:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90003148:	4b23      	ldr	r3, [pc, #140]	; (900031d8 <FT5336_Probe+0xa8>)
9000314a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000314c:	4b23      	ldr	r3, [pc, #140]	; (900031dc <FT5336_Probe+0xac>)
9000314e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90003150:	4b23      	ldr	r3, [pc, #140]	; (900031e0 <FT5336_Probe+0xb0>)
90003152:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
90003154:	4b23      	ldr	r3, [pc, #140]	; (900031e4 <FT5336_Probe+0xb4>)
90003156:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90003158:	f107 030c 	add.w	r3, r7, #12
9000315c:	4619      	mov	r1, r3
9000315e:	4822      	ldr	r0, [pc, #136]	; (900031e8 <FT5336_Probe+0xb8>)
90003160:	f7fd fcac 	bl	90000abc <FT5336_RegisterBusIO>
90003164:	4603      	mov	r3, r0
90003166:	2b00      	cmp	r3, #0
90003168:	d003      	beq.n	90003172 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
9000316a:	f06f 0307 	mvn.w	r3, #7
9000316e:	627b      	str	r3, [r7, #36]	; 0x24
90003170:	e02a      	b.n	900031c8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90003172:	f107 0308 	add.w	r3, r7, #8
90003176:	4619      	mov	r1, r3
90003178:	481b      	ldr	r0, [pc, #108]	; (900031e8 <FT5336_Probe+0xb8>)
9000317a:	f7fd fd99 	bl	90000cb0 <FT5336_ReadID>
9000317e:	4603      	mov	r3, r0
90003180:	2b00      	cmp	r3, #0
90003182:	d003      	beq.n	9000318c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
90003184:	f06f 0304 	mvn.w	r3, #4
90003188:	627b      	str	r3, [r7, #36]	; 0x24
9000318a:	e01d      	b.n	900031c8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
9000318c:	68bb      	ldr	r3, [r7, #8]
9000318e:	2b51      	cmp	r3, #81	; 0x51
90003190:	d003      	beq.n	9000319a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90003192:	f06f 0306 	mvn.w	r3, #6
90003196:	627b      	str	r3, [r7, #36]	; 0x24
90003198:	e016      	b.n	900031c8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
9000319a:	4a14      	ldr	r2, [pc, #80]	; (900031ec <FT5336_Probe+0xbc>)
9000319c:	687b      	ldr	r3, [r7, #4]
9000319e:	4912      	ldr	r1, [pc, #72]	; (900031e8 <FT5336_Probe+0xb8>)
900031a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900031a4:	4b12      	ldr	r3, [pc, #72]	; (900031f0 <FT5336_Probe+0xc0>)
900031a6:	4a13      	ldr	r2, [pc, #76]	; (900031f4 <FT5336_Probe+0xc4>)
900031a8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900031aa:	4b11      	ldr	r3, [pc, #68]	; (900031f0 <FT5336_Probe+0xc0>)
900031ac:	681b      	ldr	r3, [r3, #0]
900031ae:	681b      	ldr	r3, [r3, #0]
900031b0:	490e      	ldr	r1, [pc, #56]	; (900031ec <FT5336_Probe+0xbc>)
900031b2:	687a      	ldr	r2, [r7, #4]
900031b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900031b8:	4610      	mov	r0, r2
900031ba:	4798      	blx	r3
900031bc:	4603      	mov	r3, r0
900031be:	2b00      	cmp	r3, #0
900031c0:	d002      	beq.n	900031c8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
900031c2:	f06f 0304 	mvn.w	r3, #4
900031c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
900031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
900031ca:	4618      	mov	r0, r3
900031cc:	3728      	adds	r7, #40	; 0x28
900031ce:	46bd      	mov	sp, r7
900031d0:	bd80      	pop	{r7, pc}
900031d2:	bf00      	nop
900031d4:	90001451 	.word	0x90001451
900031d8:	900014c5 	.word	0x900014c5
900031dc:	900015ed 	.word	0x900015ed
900031e0:	90001591 	.word	0x90001591
900031e4:	90001649 	.word	0x90001649
900031e8:	200011a0 	.word	0x200011a0
900031ec:	2000115c 	.word	0x2000115c
900031f0:	20001158 	.word	0x20001158
900031f4:	20000000 	.word	0x20000000

900031f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900031f8:	b480      	push	{r7}
900031fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900031fc:	4b29      	ldr	r3, [pc, #164]	; (900032a4 <SystemInit+0xac>)
900031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003202:	4a28      	ldr	r2, [pc, #160]	; (900032a4 <SystemInit+0xac>)
90003204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90003208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
9000320c:	4b26      	ldr	r3, [pc, #152]	; (900032a8 <SystemInit+0xb0>)
9000320e:	681b      	ldr	r3, [r3, #0]
90003210:	4a25      	ldr	r2, [pc, #148]	; (900032a8 <SystemInit+0xb0>)
90003212:	f043 0301 	orr.w	r3, r3, #1
90003216:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003218:	4b23      	ldr	r3, [pc, #140]	; (900032a8 <SystemInit+0xb0>)
9000321a:	2200      	movs	r2, #0
9000321c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
9000321e:	4b22      	ldr	r3, [pc, #136]	; (900032a8 <SystemInit+0xb0>)
90003220:	681a      	ldr	r2, [r3, #0]
90003222:	4921      	ldr	r1, [pc, #132]	; (900032a8 <SystemInit+0xb0>)
90003224:	4b21      	ldr	r3, [pc, #132]	; (900032ac <SystemInit+0xb4>)
90003226:	4013      	ands	r3, r2
90003228:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000322a:	4b1f      	ldr	r3, [pc, #124]	; (900032a8 <SystemInit+0xb0>)
9000322c:	2200      	movs	r2, #0
9000322e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003230:	4b1d      	ldr	r3, [pc, #116]	; (900032a8 <SystemInit+0xb0>)
90003232:	2200      	movs	r2, #0
90003234:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90003236:	4b1c      	ldr	r3, [pc, #112]	; (900032a8 <SystemInit+0xb0>)
90003238:	2200      	movs	r2, #0
9000323a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
9000323c:	4b1a      	ldr	r3, [pc, #104]	; (900032a8 <SystemInit+0xb0>)
9000323e:	2200      	movs	r2, #0
90003240:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003242:	4b19      	ldr	r3, [pc, #100]	; (900032a8 <SystemInit+0xb0>)
90003244:	2200      	movs	r2, #0
90003246:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003248:	4b17      	ldr	r3, [pc, #92]	; (900032a8 <SystemInit+0xb0>)
9000324a:	2200      	movs	r2, #0
9000324c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000324e:	4b16      	ldr	r3, [pc, #88]	; (900032a8 <SystemInit+0xb0>)
90003250:	2200      	movs	r2, #0
90003252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003254:	4b14      	ldr	r3, [pc, #80]	; (900032a8 <SystemInit+0xb0>)
90003256:	2200      	movs	r2, #0
90003258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000325a:	4b13      	ldr	r3, [pc, #76]	; (900032a8 <SystemInit+0xb0>)
9000325c:	2200      	movs	r2, #0
9000325e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003260:	4b11      	ldr	r3, [pc, #68]	; (900032a8 <SystemInit+0xb0>)
90003262:	2200      	movs	r2, #0
90003264:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90003266:	4b10      	ldr	r3, [pc, #64]	; (900032a8 <SystemInit+0xb0>)
90003268:	2200      	movs	r2, #0
9000326a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
9000326c:	4b0e      	ldr	r3, [pc, #56]	; (900032a8 <SystemInit+0xb0>)
9000326e:	681b      	ldr	r3, [r3, #0]
90003270:	4a0d      	ldr	r2, [pc, #52]	; (900032a8 <SystemInit+0xb0>)
90003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003276:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003278:	4b0b      	ldr	r3, [pc, #44]	; (900032a8 <SystemInit+0xb0>)
9000327a:	2200      	movs	r2, #0
9000327c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000327e:	4b0c      	ldr	r3, [pc, #48]	; (900032b0 <SystemInit+0xb8>)
90003280:	681a      	ldr	r2, [r3, #0]
90003282:	4b0c      	ldr	r3, [pc, #48]	; (900032b4 <SystemInit+0xbc>)
90003284:	4013      	ands	r3, r2
90003286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000328a:	d202      	bcs.n	90003292 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
9000328c:	4b0a      	ldr	r3, [pc, #40]	; (900032b8 <SystemInit+0xc0>)
9000328e:	2201      	movs	r2, #1
90003290:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90003292:	4b04      	ldr	r3, [pc, #16]	; (900032a4 <SystemInit+0xac>)
90003294:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90003298:	609a      	str	r2, [r3, #8]
#endif  


}
9000329a:	bf00      	nop
9000329c:	46bd      	mov	sp, r7
9000329e:	f85d 7b04 	ldr.w	r7, [sp], #4
900032a2:	4770      	bx	lr
900032a4:	e000ed00 	.word	0xe000ed00
900032a8:	58024400 	.word	0x58024400
900032ac:	eaf6ed7f 	.word	0xeaf6ed7f
900032b0:	5c001000 	.word	0x5c001000
900032b4:	ffff0000 	.word	0xffff0000
900032b8:	51008108 	.word	0x51008108

900032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900032bc:	b580      	push	{r7, lr}
900032be:	b082      	sub	sp, #8
900032c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900032c2:	2003      	movs	r0, #3
900032c4:	f000 f980 	bl	900035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900032c8:	f004 fabc 	bl	90007844 <HAL_RCC_GetSysClockFreq>
900032cc:	4602      	mov	r2, r0
900032ce:	4b15      	ldr	r3, [pc, #84]	; (90003324 <HAL_Init+0x68>)
900032d0:	699b      	ldr	r3, [r3, #24]
900032d2:	0a1b      	lsrs	r3, r3, #8
900032d4:	f003 030f 	and.w	r3, r3, #15
900032d8:	4913      	ldr	r1, [pc, #76]	; (90003328 <HAL_Init+0x6c>)
900032da:	5ccb      	ldrb	r3, [r1, r3]
900032dc:	f003 031f 	and.w	r3, r3, #31
900032e0:	fa22 f303 	lsr.w	r3, r2, r3
900032e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900032e6:	4b0f      	ldr	r3, [pc, #60]	; (90003324 <HAL_Init+0x68>)
900032e8:	699b      	ldr	r3, [r3, #24]
900032ea:	f003 030f 	and.w	r3, r3, #15
900032ee:	4a0e      	ldr	r2, [pc, #56]	; (90003328 <HAL_Init+0x6c>)
900032f0:	5cd3      	ldrb	r3, [r2, r3]
900032f2:	f003 031f 	and.w	r3, r3, #31
900032f6:	687a      	ldr	r2, [r7, #4]
900032f8:	fa22 f303 	lsr.w	r3, r2, r3
900032fc:	4a0b      	ldr	r2, [pc, #44]	; (9000332c <HAL_Init+0x70>)
900032fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90003300:	4a0b      	ldr	r2, [pc, #44]	; (90003330 <HAL_Init+0x74>)
90003302:	687b      	ldr	r3, [r7, #4]
90003304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90003306:	200f      	movs	r0, #15
90003308:	f000 f81c 	bl	90003344 <HAL_InitTick>
9000330c:	4603      	mov	r3, r0
9000330e:	2b00      	cmp	r3, #0
90003310:	d001      	beq.n	90003316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003312:	2301      	movs	r3, #1
90003314:	e002      	b.n	9000331c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003316:	f000 f80d 	bl	90003334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000331a:	2300      	movs	r3, #0
}
9000331c:	4618      	mov	r0, r3
9000331e:	3708      	adds	r7, #8
90003320:	46bd      	mov	sp, r7
90003322:	bd80      	pop	{r7, pc}
90003324:	58024400 	.word	0x58024400
90003328:	9000e3f0 	.word	0x9000e3f0
9000332c:	2000003c 	.word	0x2000003c
90003330:	20000038 	.word	0x20000038

90003334 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003334:	b480      	push	{r7}
90003336:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003338:	bf00      	nop
9000333a:	46bd      	mov	sp, r7
9000333c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003340:	4770      	bx	lr
	...

90003344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003344:	b580      	push	{r7, lr}
90003346:	b082      	sub	sp, #8
90003348:	af00      	add	r7, sp, #0
9000334a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
9000334c:	4b15      	ldr	r3, [pc, #84]	; (900033a4 <HAL_InitTick+0x60>)
9000334e:	781b      	ldrb	r3, [r3, #0]
90003350:	2b00      	cmp	r3, #0
90003352:	d101      	bne.n	90003358 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003354:	2301      	movs	r3, #1
90003356:	e021      	b.n	9000339c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003358:	4b13      	ldr	r3, [pc, #76]	; (900033a8 <HAL_InitTick+0x64>)
9000335a:	681a      	ldr	r2, [r3, #0]
9000335c:	4b11      	ldr	r3, [pc, #68]	; (900033a4 <HAL_InitTick+0x60>)
9000335e:	781b      	ldrb	r3, [r3, #0]
90003360:	4619      	mov	r1, r3
90003362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90003366:	fbb3 f3f1 	udiv	r3, r3, r1
9000336a:	fbb2 f3f3 	udiv	r3, r2, r3
9000336e:	4618      	mov	r0, r3
90003370:	f000 f95d 	bl	9000362e <HAL_SYSTICK_Config>
90003374:	4603      	mov	r3, r0
90003376:	2b00      	cmp	r3, #0
90003378:	d001      	beq.n	9000337e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000337a:	2301      	movs	r3, #1
9000337c:	e00e      	b.n	9000339c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000337e:	687b      	ldr	r3, [r7, #4]
90003380:	2b0f      	cmp	r3, #15
90003382:	d80a      	bhi.n	9000339a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003384:	2200      	movs	r2, #0
90003386:	6879      	ldr	r1, [r7, #4]
90003388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000338c:	f000 f927 	bl	900035de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003390:	4a06      	ldr	r2, [pc, #24]	; (900033ac <HAL_InitTick+0x68>)
90003392:	687b      	ldr	r3, [r7, #4]
90003394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90003396:	2300      	movs	r3, #0
90003398:	e000      	b.n	9000339c <HAL_InitTick+0x58>
    return HAL_ERROR;
9000339a:	2301      	movs	r3, #1
}
9000339c:	4618      	mov	r0, r3
9000339e:	3708      	adds	r7, #8
900033a0:	46bd      	mov	sp, r7
900033a2:	bd80      	pop	{r7, pc}
900033a4:	20000044 	.word	0x20000044
900033a8:	20000038 	.word	0x20000038
900033ac:	20000040 	.word	0x20000040

900033b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900033b0:	b480      	push	{r7}
900033b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900033b4:	4b06      	ldr	r3, [pc, #24]	; (900033d0 <HAL_IncTick+0x20>)
900033b6:	781b      	ldrb	r3, [r3, #0]
900033b8:	461a      	mov	r2, r3
900033ba:	4b06      	ldr	r3, [pc, #24]	; (900033d4 <HAL_IncTick+0x24>)
900033bc:	681b      	ldr	r3, [r3, #0]
900033be:	4413      	add	r3, r2
900033c0:	4a04      	ldr	r2, [pc, #16]	; (900033d4 <HAL_IncTick+0x24>)
900033c2:	6013      	str	r3, [r2, #0]
}
900033c4:	bf00      	nop
900033c6:	46bd      	mov	sp, r7
900033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033cc:	4770      	bx	lr
900033ce:	bf00      	nop
900033d0:	20000044 	.word	0x20000044
900033d4:	200011c8 	.word	0x200011c8

900033d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900033d8:	b480      	push	{r7}
900033da:	af00      	add	r7, sp, #0
  return uwTick;
900033dc:	4b03      	ldr	r3, [pc, #12]	; (900033ec <HAL_GetTick+0x14>)
900033de:	681b      	ldr	r3, [r3, #0]
}
900033e0:	4618      	mov	r0, r3
900033e2:	46bd      	mov	sp, r7
900033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
900033e8:	4770      	bx	lr
900033ea:	bf00      	nop
900033ec:	200011c8 	.word	0x200011c8

900033f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900033f0:	b480      	push	{r7}
900033f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900033f4:	4b03      	ldr	r3, [pc, #12]	; (90003404 <HAL_GetREVID+0x14>)
900033f6:	681b      	ldr	r3, [r3, #0]
900033f8:	0c1b      	lsrs	r3, r3, #16
}
900033fa:	4618      	mov	r0, r3
900033fc:	46bd      	mov	sp, r7
900033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90003402:	4770      	bx	lr
90003404:	5c001000 	.word	0x5c001000

90003408 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
90003408:	b480      	push	{r7}
9000340a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
9000340c:	4b05      	ldr	r3, [pc, #20]	; (90003424 <HAL_EnableCompensationCell+0x1c>)
9000340e:	6a1b      	ldr	r3, [r3, #32]
90003410:	4a04      	ldr	r2, [pc, #16]	; (90003424 <HAL_EnableCompensationCell+0x1c>)
90003412:	f043 0301 	orr.w	r3, r3, #1
90003416:	6213      	str	r3, [r2, #32]
}
90003418:	bf00      	nop
9000341a:	46bd      	mov	sp, r7
9000341c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003420:	4770      	bx	lr
90003422:	bf00      	nop
90003424:	58000400 	.word	0x58000400

90003428 <__NVIC_SetPriorityGrouping>:
{
90003428:	b480      	push	{r7}
9000342a:	b085      	sub	sp, #20
9000342c:	af00      	add	r7, sp, #0
9000342e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003430:	687b      	ldr	r3, [r7, #4]
90003432:	f003 0307 	and.w	r3, r3, #7
90003436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003438:	4b0b      	ldr	r3, [pc, #44]	; (90003468 <__NVIC_SetPriorityGrouping+0x40>)
9000343a:	68db      	ldr	r3, [r3, #12]
9000343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000343e:	68ba      	ldr	r2, [r7, #8]
90003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90003444:	4013      	ands	r3, r2
90003446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003448:	68fb      	ldr	r3, [r7, #12]
9000344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000344c:	68bb      	ldr	r3, [r7, #8]
9000344e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003450:	4b06      	ldr	r3, [pc, #24]	; (9000346c <__NVIC_SetPriorityGrouping+0x44>)
90003452:	4313      	orrs	r3, r2
90003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003456:	4a04      	ldr	r2, [pc, #16]	; (90003468 <__NVIC_SetPriorityGrouping+0x40>)
90003458:	68bb      	ldr	r3, [r7, #8]
9000345a:	60d3      	str	r3, [r2, #12]
}
9000345c:	bf00      	nop
9000345e:	3714      	adds	r7, #20
90003460:	46bd      	mov	sp, r7
90003462:	f85d 7b04 	ldr.w	r7, [sp], #4
90003466:	4770      	bx	lr
90003468:	e000ed00 	.word	0xe000ed00
9000346c:	05fa0000 	.word	0x05fa0000

90003470 <__NVIC_GetPriorityGrouping>:
{
90003470:	b480      	push	{r7}
90003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003474:	4b04      	ldr	r3, [pc, #16]	; (90003488 <__NVIC_GetPriorityGrouping+0x18>)
90003476:	68db      	ldr	r3, [r3, #12]
90003478:	0a1b      	lsrs	r3, r3, #8
9000347a:	f003 0307 	and.w	r3, r3, #7
}
9000347e:	4618      	mov	r0, r3
90003480:	46bd      	mov	sp, r7
90003482:	f85d 7b04 	ldr.w	r7, [sp], #4
90003486:	4770      	bx	lr
90003488:	e000ed00 	.word	0xe000ed00

9000348c <__NVIC_EnableIRQ>:
{
9000348c:	b480      	push	{r7}
9000348e:	b083      	sub	sp, #12
90003490:	af00      	add	r7, sp, #0
90003492:	4603      	mov	r3, r0
90003494:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000349a:	2b00      	cmp	r3, #0
9000349c:	db0b      	blt.n	900034b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000349e:	88fb      	ldrh	r3, [r7, #6]
900034a0:	f003 021f 	and.w	r2, r3, #31
900034a4:	4907      	ldr	r1, [pc, #28]	; (900034c4 <__NVIC_EnableIRQ+0x38>)
900034a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034aa:	095b      	lsrs	r3, r3, #5
900034ac:	2001      	movs	r0, #1
900034ae:	fa00 f202 	lsl.w	r2, r0, r2
900034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900034b6:	bf00      	nop
900034b8:	370c      	adds	r7, #12
900034ba:	46bd      	mov	sp, r7
900034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900034c0:	4770      	bx	lr
900034c2:	bf00      	nop
900034c4:	e000e100 	.word	0xe000e100

900034c8 <__NVIC_SetPriority>:
{
900034c8:	b480      	push	{r7}
900034ca:	b083      	sub	sp, #12
900034cc:	af00      	add	r7, sp, #0
900034ce:	4603      	mov	r3, r0
900034d0:	6039      	str	r1, [r7, #0]
900034d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900034d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034d8:	2b00      	cmp	r3, #0
900034da:	db0a      	blt.n	900034f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034dc:	683b      	ldr	r3, [r7, #0]
900034de:	b2da      	uxtb	r2, r3
900034e0:	490c      	ldr	r1, [pc, #48]	; (90003514 <__NVIC_SetPriority+0x4c>)
900034e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034e6:	0112      	lsls	r2, r2, #4
900034e8:	b2d2      	uxtb	r2, r2
900034ea:	440b      	add	r3, r1
900034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
900034f0:	e00a      	b.n	90003508 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034f2:	683b      	ldr	r3, [r7, #0]
900034f4:	b2da      	uxtb	r2, r3
900034f6:	4908      	ldr	r1, [pc, #32]	; (90003518 <__NVIC_SetPriority+0x50>)
900034f8:	88fb      	ldrh	r3, [r7, #6]
900034fa:	f003 030f 	and.w	r3, r3, #15
900034fe:	3b04      	subs	r3, #4
90003500:	0112      	lsls	r2, r2, #4
90003502:	b2d2      	uxtb	r2, r2
90003504:	440b      	add	r3, r1
90003506:	761a      	strb	r2, [r3, #24]
}
90003508:	bf00      	nop
9000350a:	370c      	adds	r7, #12
9000350c:	46bd      	mov	sp, r7
9000350e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003512:	4770      	bx	lr
90003514:	e000e100 	.word	0xe000e100
90003518:	e000ed00 	.word	0xe000ed00

9000351c <NVIC_EncodePriority>:
{
9000351c:	b480      	push	{r7}
9000351e:	b089      	sub	sp, #36	; 0x24
90003520:	af00      	add	r7, sp, #0
90003522:	60f8      	str	r0, [r7, #12]
90003524:	60b9      	str	r1, [r7, #8]
90003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003528:	68fb      	ldr	r3, [r7, #12]
9000352a:	f003 0307 	and.w	r3, r3, #7
9000352e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003530:	69fb      	ldr	r3, [r7, #28]
90003532:	f1c3 0307 	rsb	r3, r3, #7
90003536:	2b04      	cmp	r3, #4
90003538:	bf28      	it	cs
9000353a:	2304      	movcs	r3, #4
9000353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000353e:	69fb      	ldr	r3, [r7, #28]
90003540:	3304      	adds	r3, #4
90003542:	2b06      	cmp	r3, #6
90003544:	d902      	bls.n	9000354c <NVIC_EncodePriority+0x30>
90003546:	69fb      	ldr	r3, [r7, #28]
90003548:	3b03      	subs	r3, #3
9000354a:	e000      	b.n	9000354e <NVIC_EncodePriority+0x32>
9000354c:	2300      	movs	r3, #0
9000354e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90003554:	69bb      	ldr	r3, [r7, #24]
90003556:	fa02 f303 	lsl.w	r3, r2, r3
9000355a:	43da      	mvns	r2, r3
9000355c:	68bb      	ldr	r3, [r7, #8]
9000355e:	401a      	ands	r2, r3
90003560:	697b      	ldr	r3, [r7, #20]
90003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90003568:	697b      	ldr	r3, [r7, #20]
9000356a:	fa01 f303 	lsl.w	r3, r1, r3
9000356e:	43d9      	mvns	r1, r3
90003570:	687b      	ldr	r3, [r7, #4]
90003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003574:	4313      	orrs	r3, r2
}
90003576:	4618      	mov	r0, r3
90003578:	3724      	adds	r7, #36	; 0x24
9000357a:	46bd      	mov	sp, r7
9000357c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003580:	4770      	bx	lr
	...

90003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003584:	b580      	push	{r7, lr}
90003586:	b082      	sub	sp, #8
90003588:	af00      	add	r7, sp, #0
9000358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000358c:	687b      	ldr	r3, [r7, #4]
9000358e:	3b01      	subs	r3, #1
90003590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90003594:	d301      	bcc.n	9000359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003596:	2301      	movs	r3, #1
90003598:	e00f      	b.n	900035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000359a:	4a0a      	ldr	r2, [pc, #40]	; (900035c4 <SysTick_Config+0x40>)
9000359c:	687b      	ldr	r3, [r7, #4]
9000359e:	3b01      	subs	r3, #1
900035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
900035a2:	210f      	movs	r1, #15
900035a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900035a8:	f7ff ff8e 	bl	900034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
900035ac:	4b05      	ldr	r3, [pc, #20]	; (900035c4 <SysTick_Config+0x40>)
900035ae:	2200      	movs	r2, #0
900035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900035b2:	4b04      	ldr	r3, [pc, #16]	; (900035c4 <SysTick_Config+0x40>)
900035b4:	2207      	movs	r2, #7
900035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900035b8:	2300      	movs	r3, #0
}
900035ba:	4618      	mov	r0, r3
900035bc:	3708      	adds	r7, #8
900035be:	46bd      	mov	sp, r7
900035c0:	bd80      	pop	{r7, pc}
900035c2:	bf00      	nop
900035c4:	e000e010 	.word	0xe000e010

900035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900035c8:	b580      	push	{r7, lr}
900035ca:	b082      	sub	sp, #8
900035cc:	af00      	add	r7, sp, #0
900035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900035d0:	6878      	ldr	r0, [r7, #4]
900035d2:	f7ff ff29 	bl	90003428 <__NVIC_SetPriorityGrouping>
}
900035d6:	bf00      	nop
900035d8:	3708      	adds	r7, #8
900035da:	46bd      	mov	sp, r7
900035dc:	bd80      	pop	{r7, pc}

900035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900035de:	b580      	push	{r7, lr}
900035e0:	b086      	sub	sp, #24
900035e2:	af00      	add	r7, sp, #0
900035e4:	4603      	mov	r3, r0
900035e6:	60b9      	str	r1, [r7, #8]
900035e8:	607a      	str	r2, [r7, #4]
900035ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900035ec:	f7ff ff40 	bl	90003470 <__NVIC_GetPriorityGrouping>
900035f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900035f2:	687a      	ldr	r2, [r7, #4]
900035f4:	68b9      	ldr	r1, [r7, #8]
900035f6:	6978      	ldr	r0, [r7, #20]
900035f8:	f7ff ff90 	bl	9000351c <NVIC_EncodePriority>
900035fc:	4602      	mov	r2, r0
900035fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90003602:	4611      	mov	r1, r2
90003604:	4618      	mov	r0, r3
90003606:	f7ff ff5f 	bl	900034c8 <__NVIC_SetPriority>
}
9000360a:	bf00      	nop
9000360c:	3718      	adds	r7, #24
9000360e:	46bd      	mov	sp, r7
90003610:	bd80      	pop	{r7, pc}

90003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003612:	b580      	push	{r7, lr}
90003614:	b082      	sub	sp, #8
90003616:	af00      	add	r7, sp, #0
90003618:	4603      	mov	r3, r0
9000361a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000361c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003620:	4618      	mov	r0, r3
90003622:	f7ff ff33 	bl	9000348c <__NVIC_EnableIRQ>
}
90003626:	bf00      	nop
90003628:	3708      	adds	r7, #8
9000362a:	46bd      	mov	sp, r7
9000362c:	bd80      	pop	{r7, pc}

9000362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000362e:	b580      	push	{r7, lr}
90003630:	b082      	sub	sp, #8
90003632:	af00      	add	r7, sp, #0
90003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003636:	6878      	ldr	r0, [r7, #4]
90003638:	f7ff ffa4 	bl	90003584 <SysTick_Config>
9000363c:	4603      	mov	r3, r0
}
9000363e:	4618      	mov	r0, r3
90003640:	3708      	adds	r7, #8
90003642:	46bd      	mov	sp, r7
90003644:	bd80      	pop	{r7, pc}
	...

90003648 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003648:	b480      	push	{r7}
9000364a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000364c:	f3bf 8f5f 	dmb	sy
}
90003650:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003652:	4b07      	ldr	r3, [pc, #28]	; (90003670 <HAL_MPU_Disable+0x28>)
90003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003656:	4a06      	ldr	r2, [pc, #24]	; (90003670 <HAL_MPU_Disable+0x28>)
90003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000365c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000365e:	4b05      	ldr	r3, [pc, #20]	; (90003674 <HAL_MPU_Disable+0x2c>)
90003660:	2200      	movs	r2, #0
90003662:	605a      	str	r2, [r3, #4]
}
90003664:	bf00      	nop
90003666:	46bd      	mov	sp, r7
90003668:	f85d 7b04 	ldr.w	r7, [sp], #4
9000366c:	4770      	bx	lr
9000366e:	bf00      	nop
90003670:	e000ed00 	.word	0xe000ed00
90003674:	e000ed90 	.word	0xe000ed90

90003678 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003678:	b480      	push	{r7}
9000367a:	b083      	sub	sp, #12
9000367c:	af00      	add	r7, sp, #0
9000367e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003680:	4a0b      	ldr	r2, [pc, #44]	; (900036b0 <HAL_MPU_Enable+0x38>)
90003682:	687b      	ldr	r3, [r7, #4]
90003684:	f043 0301 	orr.w	r3, r3, #1
90003688:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000368a:	4b0a      	ldr	r3, [pc, #40]	; (900036b4 <HAL_MPU_Enable+0x3c>)
9000368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000368e:	4a09      	ldr	r2, [pc, #36]	; (900036b4 <HAL_MPU_Enable+0x3c>)
90003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003694:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003696:	f3bf 8f4f 	dsb	sy
}
9000369a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000369c:	f3bf 8f6f 	isb	sy
}
900036a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900036a2:	bf00      	nop
900036a4:	370c      	adds	r7, #12
900036a6:	46bd      	mov	sp, r7
900036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900036ac:	4770      	bx	lr
900036ae:	bf00      	nop
900036b0:	e000ed90 	.word	0xe000ed90
900036b4:	e000ed00 	.word	0xe000ed00

900036b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
900036b8:	b480      	push	{r7}
900036ba:	b083      	sub	sp, #12
900036bc:	af00      	add	r7, sp, #0
900036be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900036c0:	687b      	ldr	r3, [r7, #4]
900036c2:	785a      	ldrb	r2, [r3, #1]
900036c4:	4b1d      	ldr	r3, [pc, #116]	; (9000373c <HAL_MPU_ConfigRegion+0x84>)
900036c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	781b      	ldrb	r3, [r3, #0]
900036cc:	2b00      	cmp	r3, #0
900036ce:	d029      	beq.n	90003724 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
900036d0:	4a1a      	ldr	r2, [pc, #104]	; (9000373c <HAL_MPU_ConfigRegion+0x84>)
900036d2:	687b      	ldr	r3, [r7, #4]
900036d4:	685b      	ldr	r3, [r3, #4]
900036d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036d8:	687b      	ldr	r3, [r7, #4]
900036da:	7b1b      	ldrb	r3, [r3, #12]
900036dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036de:	687b      	ldr	r3, [r7, #4]
900036e0:	7adb      	ldrb	r3, [r3, #11]
900036e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036e6:	687b      	ldr	r3, [r7, #4]
900036e8:	7a9b      	ldrb	r3, [r3, #10]
900036ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900036ee:	687b      	ldr	r3, [r7, #4]
900036f0:	7b5b      	ldrb	r3, [r3, #13]
900036f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900036f6:	687b      	ldr	r3, [r7, #4]
900036f8:	7b9b      	ldrb	r3, [r3, #14]
900036fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900036fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	7bdb      	ldrb	r3, [r3, #15]
90003702:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90003704:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003706:	687b      	ldr	r3, [r7, #4]
90003708:	7a5b      	ldrb	r3, [r3, #9]
9000370a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000370c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000370e:	687b      	ldr	r3, [r7, #4]
90003710:	7a1b      	ldrb	r3, [r3, #8]
90003712:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003714:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003716:	687a      	ldr	r2, [r7, #4]
90003718:	7812      	ldrb	r2, [r2, #0]
9000371a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000371c:	4a07      	ldr	r2, [pc, #28]	; (9000373c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000371e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003720:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90003722:	e005      	b.n	90003730 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90003724:	4b05      	ldr	r3, [pc, #20]	; (9000373c <HAL_MPU_ConfigRegion+0x84>)
90003726:	2200      	movs	r2, #0
90003728:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
9000372a:	4b04      	ldr	r3, [pc, #16]	; (9000373c <HAL_MPU_ConfigRegion+0x84>)
9000372c:	2200      	movs	r2, #0
9000372e:	611a      	str	r2, [r3, #16]
}
90003730:	bf00      	nop
90003732:	370c      	adds	r7, #12
90003734:	46bd      	mov	sp, r7
90003736:	f85d 7b04 	ldr.w	r7, [sp], #4
9000373a:	4770      	bx	lr
9000373c:	e000ed90 	.word	0xe000ed90

90003740 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003740:	b580      	push	{r7, lr}
90003742:	b082      	sub	sp, #8
90003744:	af00      	add	r7, sp, #0
90003746:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003748:	687b      	ldr	r3, [r7, #4]
9000374a:	2b00      	cmp	r3, #0
9000374c:	d101      	bne.n	90003752 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
9000374e:	2301      	movs	r3, #1
90003750:	e04f      	b.n	900037f2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003752:	687b      	ldr	r3, [r7, #4]
90003754:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
90003758:	b2db      	uxtb	r3, r3
9000375a:	2b00      	cmp	r3, #0
9000375c:	d106      	bne.n	9000376c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
9000375e:	687b      	ldr	r3, [r7, #4]
90003760:	2200      	movs	r2, #0
90003762:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003766:	6878      	ldr	r0, [r7, #4]
90003768:	f000 f84e 	bl	90003808 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000376c:	687b      	ldr	r3, [r7, #4]
9000376e:	2202      	movs	r2, #2
90003770:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003774:	687b      	ldr	r3, [r7, #4]
90003776:	681b      	ldr	r3, [r3, #0]
90003778:	681a      	ldr	r2, [r3, #0]
9000377a:	4b20      	ldr	r3, [pc, #128]	; (900037fc <HAL_DMA2D_Init+0xbc>)
9000377c:	4013      	ands	r3, r2
9000377e:	687a      	ldr	r2, [r7, #4]
90003780:	6851      	ldr	r1, [r2, #4]
90003782:	687a      	ldr	r2, [r7, #4]
90003784:	69d2      	ldr	r2, [r2, #28]
90003786:	4311      	orrs	r1, r2
90003788:	687a      	ldr	r2, [r7, #4]
9000378a:	6812      	ldr	r2, [r2, #0]
9000378c:	430b      	orrs	r3, r1
9000378e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003790:	687b      	ldr	r3, [r7, #4]
90003792:	681b      	ldr	r3, [r3, #0]
90003794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003796:	4b1a      	ldr	r3, [pc, #104]	; (90003800 <HAL_DMA2D_Init+0xc0>)
90003798:	4013      	ands	r3, r2
9000379a:	687a      	ldr	r2, [r7, #4]
9000379c:	6891      	ldr	r1, [r2, #8]
9000379e:	687a      	ldr	r2, [r7, #4]
900037a0:	6992      	ldr	r2, [r2, #24]
900037a2:	4311      	orrs	r1, r2
900037a4:	687a      	ldr	r2, [r7, #4]
900037a6:	6812      	ldr	r2, [r2, #0]
900037a8:	430b      	orrs	r3, r1
900037aa:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
900037ac:	687b      	ldr	r3, [r7, #4]
900037ae:	681b      	ldr	r3, [r3, #0]
900037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900037b2:	4b14      	ldr	r3, [pc, #80]	; (90003804 <HAL_DMA2D_Init+0xc4>)
900037b4:	4013      	ands	r3, r2
900037b6:	687a      	ldr	r2, [r7, #4]
900037b8:	68d1      	ldr	r1, [r2, #12]
900037ba:	687a      	ldr	r2, [r7, #4]
900037bc:	6812      	ldr	r2, [r2, #0]
900037be:	430b      	orrs	r3, r1
900037c0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900037c2:	687b      	ldr	r3, [r7, #4]
900037c4:	681b      	ldr	r3, [r3, #0]
900037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900037c8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
900037cc:	687b      	ldr	r3, [r7, #4]
900037ce:	691b      	ldr	r3, [r3, #16]
900037d0:	051a      	lsls	r2, r3, #20
900037d2:	687b      	ldr	r3, [r7, #4]
900037d4:	695b      	ldr	r3, [r3, #20]
900037d6:	055b      	lsls	r3, r3, #21
900037d8:	431a      	orrs	r2, r3
900037da:	687b      	ldr	r3, [r7, #4]
900037dc:	681b      	ldr	r3, [r3, #0]
900037de:	430a      	orrs	r2, r1
900037e0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
900037e2:	687b      	ldr	r3, [r7, #4]
900037e4:	2200      	movs	r2, #0
900037e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900037e8:	687b      	ldr	r3, [r7, #4]
900037ea:	2201      	movs	r2, #1
900037ec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
900037f0:	2300      	movs	r3, #0
}
900037f2:	4618      	mov	r0, r3
900037f4:	3708      	adds	r7, #8
900037f6:	46bd      	mov	sp, r7
900037f8:	bd80      	pop	{r7, pc}
900037fa:	bf00      	nop
900037fc:	fff8ffbf 	.word	0xfff8ffbf
90003800:	fffffef8 	.word	0xfffffef8
90003804:	ffff0000 	.word	0xffff0000

90003808 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
90003808:	b480      	push	{r7}
9000380a:	b083      	sub	sp, #12
9000380c:	af00      	add	r7, sp, #0
9000380e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003810:	bf00      	nop
90003812:	370c      	adds	r7, #12
90003814:	46bd      	mov	sp, r7
90003816:	f85d 7b04 	ldr.w	r7, [sp], #4
9000381a:	4770      	bx	lr

9000381c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
9000381c:	b580      	push	{r7, lr}
9000381e:	b086      	sub	sp, #24
90003820:	af02      	add	r7, sp, #8
90003822:	60f8      	str	r0, [r7, #12]
90003824:	60b9      	str	r1, [r7, #8]
90003826:	607a      	str	r2, [r7, #4]
90003828:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000382a:	68fb      	ldr	r3, [r7, #12]
9000382c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90003830:	2b01      	cmp	r3, #1
90003832:	d101      	bne.n	90003838 <HAL_DMA2D_Start+0x1c>
90003834:	2302      	movs	r3, #2
90003836:	e018      	b.n	9000386a <HAL_DMA2D_Start+0x4e>
90003838:	68fb      	ldr	r3, [r7, #12]
9000383a:	2201      	movs	r2, #1
9000383c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003840:	68fb      	ldr	r3, [r7, #12]
90003842:	2202      	movs	r2, #2
90003844:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003848:	69bb      	ldr	r3, [r7, #24]
9000384a:	9300      	str	r3, [sp, #0]
9000384c:	683b      	ldr	r3, [r7, #0]
9000384e:	687a      	ldr	r2, [r7, #4]
90003850:	68b9      	ldr	r1, [r7, #8]
90003852:	68f8      	ldr	r0, [r7, #12]
90003854:	f000 f9a4 	bl	90003ba0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003858:	68fb      	ldr	r3, [r7, #12]
9000385a:	681b      	ldr	r3, [r3, #0]
9000385c:	681a      	ldr	r2, [r3, #0]
9000385e:	68fb      	ldr	r3, [r7, #12]
90003860:	681b      	ldr	r3, [r3, #0]
90003862:	f042 0201 	orr.w	r2, r2, #1
90003866:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003868:	2300      	movs	r3, #0
}
9000386a:	4618      	mov	r0, r3
9000386c:	3710      	adds	r7, #16
9000386e:	46bd      	mov	sp, r7
90003870:	bd80      	pop	{r7, pc}

90003872 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003872:	b580      	push	{r7, lr}
90003874:	b086      	sub	sp, #24
90003876:	af00      	add	r7, sp, #0
90003878:	6078      	str	r0, [r7, #4]
9000387a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
9000387c:	2300      	movs	r3, #0
9000387e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003880:	687b      	ldr	r3, [r7, #4]
90003882:	681b      	ldr	r3, [r3, #0]
90003884:	681b      	ldr	r3, [r3, #0]
90003886:	f003 0301 	and.w	r3, r3, #1
9000388a:	2b00      	cmp	r3, #0
9000388c:	d056      	beq.n	9000393c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000388e:	f7ff fda3 	bl	900033d8 <HAL_GetTick>
90003892:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003894:	e04b      	b.n	9000392e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003896:	687b      	ldr	r3, [r7, #4]
90003898:	681b      	ldr	r3, [r3, #0]
9000389a:	685b      	ldr	r3, [r3, #4]
9000389c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000389e:	68fb      	ldr	r3, [r7, #12]
900038a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
900038a4:	2b00      	cmp	r3, #0
900038a6:	d023      	beq.n	900038f0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
900038a8:	68fb      	ldr	r3, [r7, #12]
900038aa:	f003 0320 	and.w	r3, r3, #32
900038ae:	2b00      	cmp	r3, #0
900038b0:	d005      	beq.n	900038be <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900038b2:	687b      	ldr	r3, [r7, #4]
900038b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900038b6:	f043 0202 	orr.w	r2, r3, #2
900038ba:	687b      	ldr	r3, [r7, #4]
900038bc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900038be:	68fb      	ldr	r3, [r7, #12]
900038c0:	f003 0301 	and.w	r3, r3, #1
900038c4:	2b00      	cmp	r3, #0
900038c6:	d005      	beq.n	900038d4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900038c8:	687b      	ldr	r3, [r7, #4]
900038ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900038cc:	f043 0201 	orr.w	r2, r3, #1
900038d0:	687b      	ldr	r3, [r7, #4]
900038d2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	681b      	ldr	r3, [r3, #0]
900038d8:	2221      	movs	r2, #33	; 0x21
900038da:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900038dc:	687b      	ldr	r3, [r7, #4]
900038de:	2204      	movs	r2, #4
900038e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900038e4:	687b      	ldr	r3, [r7, #4]
900038e6:	2200      	movs	r2, #0
900038e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
900038ec:	2301      	movs	r3, #1
900038ee:	e0a5      	b.n	90003a3c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900038f0:	683b      	ldr	r3, [r7, #0]
900038f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900038f6:	d01a      	beq.n	9000392e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900038f8:	f7ff fd6e 	bl	900033d8 <HAL_GetTick>
900038fc:	4602      	mov	r2, r0
900038fe:	697b      	ldr	r3, [r7, #20]
90003900:	1ad3      	subs	r3, r2, r3
90003902:	683a      	ldr	r2, [r7, #0]
90003904:	429a      	cmp	r2, r3
90003906:	d302      	bcc.n	9000390e <HAL_DMA2D_PollForTransfer+0x9c>
90003908:	683b      	ldr	r3, [r7, #0]
9000390a:	2b00      	cmp	r3, #0
9000390c:	d10f      	bne.n	9000392e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
9000390e:	687b      	ldr	r3, [r7, #4]
90003910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003912:	f043 0220 	orr.w	r2, r3, #32
90003916:	687b      	ldr	r3, [r7, #4]
90003918:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	2203      	movs	r2, #3
9000391e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003922:	687b      	ldr	r3, [r7, #4]
90003924:	2200      	movs	r2, #0
90003926:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
9000392a:	2303      	movs	r3, #3
9000392c:	e086      	b.n	90003a3c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000392e:	687b      	ldr	r3, [r7, #4]
90003930:	681b      	ldr	r3, [r3, #0]
90003932:	685b      	ldr	r3, [r3, #4]
90003934:	f003 0302 	and.w	r3, r3, #2
90003938:	2b00      	cmp	r3, #0
9000393a:	d0ac      	beq.n	90003896 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
9000393c:	687b      	ldr	r3, [r7, #4]
9000393e:	681b      	ldr	r3, [r3, #0]
90003940:	69db      	ldr	r3, [r3, #28]
90003942:	f003 0320 	and.w	r3, r3, #32
90003946:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003948:	687b      	ldr	r3, [r7, #4]
9000394a:	681b      	ldr	r3, [r3, #0]
9000394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000394e:	f003 0320 	and.w	r3, r3, #32
90003952:	693a      	ldr	r2, [r7, #16]
90003954:	4313      	orrs	r3, r2
90003956:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003958:	693b      	ldr	r3, [r7, #16]
9000395a:	2b00      	cmp	r3, #0
9000395c:	d061      	beq.n	90003a22 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000395e:	f7ff fd3b 	bl	900033d8 <HAL_GetTick>
90003962:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003964:	e056      	b.n	90003a14 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003966:	687b      	ldr	r3, [r7, #4]
90003968:	681b      	ldr	r3, [r3, #0]
9000396a:	685b      	ldr	r3, [r3, #4]
9000396c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000396e:	68fb      	ldr	r3, [r7, #12]
90003970:	f003 0329 	and.w	r3, r3, #41	; 0x29
90003974:	2b00      	cmp	r3, #0
90003976:	d02e      	beq.n	900039d6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003978:	68fb      	ldr	r3, [r7, #12]
9000397a:	f003 0308 	and.w	r3, r3, #8
9000397e:	2b00      	cmp	r3, #0
90003980:	d005      	beq.n	9000398e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003982:	687b      	ldr	r3, [r7, #4]
90003984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003986:	f043 0204 	orr.w	r2, r3, #4
9000398a:	687b      	ldr	r3, [r7, #4]
9000398c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000398e:	68fb      	ldr	r3, [r7, #12]
90003990:	f003 0320 	and.w	r3, r3, #32
90003994:	2b00      	cmp	r3, #0
90003996:	d005      	beq.n	900039a4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003998:	687b      	ldr	r3, [r7, #4]
9000399a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000399c:	f043 0202 	orr.w	r2, r3, #2
900039a0:	687b      	ldr	r3, [r7, #4]
900039a2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900039a4:	68fb      	ldr	r3, [r7, #12]
900039a6:	f003 0301 	and.w	r3, r3, #1
900039aa:	2b00      	cmp	r3, #0
900039ac:	d005      	beq.n	900039ba <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900039ae:	687b      	ldr	r3, [r7, #4]
900039b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900039b2:	f043 0201 	orr.w	r2, r3, #1
900039b6:	687b      	ldr	r3, [r7, #4]
900039b8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900039ba:	687b      	ldr	r3, [r7, #4]
900039bc:	681b      	ldr	r3, [r3, #0]
900039be:	2229      	movs	r2, #41	; 0x29
900039c0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900039c2:	687b      	ldr	r3, [r7, #4]
900039c4:	2204      	movs	r2, #4
900039c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900039ca:	687b      	ldr	r3, [r7, #4]
900039cc:	2200      	movs	r2, #0
900039ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
900039d2:	2301      	movs	r3, #1
900039d4:	e032      	b.n	90003a3c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900039d6:	683b      	ldr	r3, [r7, #0]
900039d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900039dc:	d01a      	beq.n	90003a14 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900039de:	f7ff fcfb 	bl	900033d8 <HAL_GetTick>
900039e2:	4602      	mov	r2, r0
900039e4:	697b      	ldr	r3, [r7, #20]
900039e6:	1ad3      	subs	r3, r2, r3
900039e8:	683a      	ldr	r2, [r7, #0]
900039ea:	429a      	cmp	r2, r3
900039ec:	d302      	bcc.n	900039f4 <HAL_DMA2D_PollForTransfer+0x182>
900039ee:	683b      	ldr	r3, [r7, #0]
900039f0:	2b00      	cmp	r3, #0
900039f2:	d10f      	bne.n	90003a14 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900039f4:	687b      	ldr	r3, [r7, #4]
900039f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900039f8:	f043 0220 	orr.w	r2, r3, #32
900039fc:	687b      	ldr	r3, [r7, #4]
900039fe:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
90003a00:	687b      	ldr	r3, [r7, #4]
90003a02:	2203      	movs	r2, #3
90003a04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003a08:	687b      	ldr	r3, [r7, #4]
90003a0a:	2200      	movs	r2, #0
90003a0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
90003a10:	2303      	movs	r3, #3
90003a12:	e013      	b.n	90003a3c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003a14:	687b      	ldr	r3, [r7, #4]
90003a16:	681b      	ldr	r3, [r3, #0]
90003a18:	685b      	ldr	r3, [r3, #4]
90003a1a:	f003 0310 	and.w	r3, r3, #16
90003a1e:	2b00      	cmp	r3, #0
90003a20:	d0a1      	beq.n	90003966 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003a22:	687b      	ldr	r3, [r7, #4]
90003a24:	681b      	ldr	r3, [r3, #0]
90003a26:	2212      	movs	r2, #18
90003a28:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003a2a:	687b      	ldr	r3, [r7, #4]
90003a2c:	2201      	movs	r2, #1
90003a2e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003a32:	687b      	ldr	r3, [r7, #4]
90003a34:	2200      	movs	r2, #0
90003a36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90003a3a:	2300      	movs	r3, #0
}
90003a3c:	4618      	mov	r0, r3
90003a3e:	3718      	adds	r7, #24
90003a40:	46bd      	mov	sp, r7
90003a42:	bd80      	pop	{r7, pc}

90003a44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003a44:	b480      	push	{r7}
90003a46:	b087      	sub	sp, #28
90003a48:	af00      	add	r7, sp, #0
90003a4a:	6078      	str	r0, [r7, #4]
90003a4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003a4e:	687b      	ldr	r3, [r7, #4]
90003a50:	685b      	ldr	r3, [r3, #4]
90003a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003a56:	683b      	ldr	r3, [r7, #0]
90003a58:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003a5a:	687b      	ldr	r3, [r7, #4]
90003a5c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90003a60:	2b01      	cmp	r3, #1
90003a62:	d101      	bne.n	90003a68 <HAL_DMA2D_ConfigLayer+0x24>
90003a64:	2302      	movs	r3, #2
90003a66:	e092      	b.n	90003b8e <HAL_DMA2D_ConfigLayer+0x14a>
90003a68:	687b      	ldr	r3, [r7, #4]
90003a6a:	2201      	movs	r2, #1
90003a6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003a70:	687b      	ldr	r3, [r7, #4]
90003a72:	2202      	movs	r2, #2
90003a74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003a78:	683a      	ldr	r2, [r7, #0]
90003a7a:	4613      	mov	r3, r2
90003a7c:	00db      	lsls	r3, r3, #3
90003a7e:	1a9b      	subs	r3, r3, r2
90003a80:	009b      	lsls	r3, r3, #2
90003a82:	3328      	adds	r3, #40	; 0x28
90003a84:	687a      	ldr	r2, [r7, #4]
90003a86:	4413      	add	r3, r2
90003a88:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a8a:	68fb      	ldr	r3, [r7, #12]
90003a8c:	685a      	ldr	r2, [r3, #4]
90003a8e:	68fb      	ldr	r3, [r7, #12]
90003a90:	689b      	ldr	r3, [r3, #8]
90003a92:	041b      	lsls	r3, r3, #16
90003a94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a96:	68fb      	ldr	r3, [r7, #12]
90003a98:	691b      	ldr	r3, [r3, #16]
90003a9a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a9e:	68fb      	ldr	r3, [r7, #12]
90003aa0:	695b      	ldr	r3, [r3, #20]
90003aa2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003aa4:	4313      	orrs	r3, r2
90003aa6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003aa8:	4b3c      	ldr	r3, [pc, #240]	; (90003b9c <HAL_DMA2D_ConfigLayer+0x158>)
90003aaa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003aac:	68fb      	ldr	r3, [r7, #12]
90003aae:	685b      	ldr	r3, [r3, #4]
90003ab0:	2b0a      	cmp	r3, #10
90003ab2:	d003      	beq.n	90003abc <HAL_DMA2D_ConfigLayer+0x78>
90003ab4:	68fb      	ldr	r3, [r7, #12]
90003ab6:	685b      	ldr	r3, [r3, #4]
90003ab8:	2b09      	cmp	r3, #9
90003aba:	d107      	bne.n	90003acc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003abc:	68fb      	ldr	r3, [r7, #12]
90003abe:	68db      	ldr	r3, [r3, #12]
90003ac0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90003ac4:	693a      	ldr	r2, [r7, #16]
90003ac6:	4313      	orrs	r3, r2
90003ac8:	613b      	str	r3, [r7, #16]
90003aca:	e005      	b.n	90003ad8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003acc:	68fb      	ldr	r3, [r7, #12]
90003ace:	68db      	ldr	r3, [r3, #12]
90003ad0:	061b      	lsls	r3, r3, #24
90003ad2:	693a      	ldr	r2, [r7, #16]
90003ad4:	4313      	orrs	r3, r2
90003ad6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003ad8:	683b      	ldr	r3, [r7, #0]
90003ada:	2b00      	cmp	r3, #0
90003adc:	d120      	bne.n	90003b20 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003ade:	687b      	ldr	r3, [r7, #4]
90003ae0:	681b      	ldr	r3, [r3, #0]
90003ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003ae4:	697b      	ldr	r3, [r7, #20]
90003ae6:	43db      	mvns	r3, r3
90003ae8:	ea02 0103 	and.w	r1, r2, r3
90003aec:	687b      	ldr	r3, [r7, #4]
90003aee:	681b      	ldr	r3, [r3, #0]
90003af0:	693a      	ldr	r2, [r7, #16]
90003af2:	430a      	orrs	r2, r1
90003af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003af6:	687b      	ldr	r3, [r7, #4]
90003af8:	681b      	ldr	r3, [r3, #0]
90003afa:	68fa      	ldr	r2, [r7, #12]
90003afc:	6812      	ldr	r2, [r2, #0]
90003afe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003b00:	68fb      	ldr	r3, [r7, #12]
90003b02:	685b      	ldr	r3, [r3, #4]
90003b04:	2b0a      	cmp	r3, #10
90003b06:	d003      	beq.n	90003b10 <HAL_DMA2D_ConfigLayer+0xcc>
90003b08:	68fb      	ldr	r3, [r7, #12]
90003b0a:	685b      	ldr	r3, [r3, #4]
90003b0c:	2b09      	cmp	r3, #9
90003b0e:	d135      	bne.n	90003b7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003b10:	68fb      	ldr	r3, [r7, #12]
90003b12:	68da      	ldr	r2, [r3, #12]
90003b14:	687b      	ldr	r3, [r7, #4]
90003b16:	681b      	ldr	r3, [r3, #0]
90003b18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003b1c:	629a      	str	r2, [r3, #40]	; 0x28
90003b1e:	e02d      	b.n	90003b7c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003b20:	68fb      	ldr	r3, [r7, #12]
90003b22:	685b      	ldr	r3, [r3, #4]
90003b24:	2b0b      	cmp	r3, #11
90003b26:	d109      	bne.n	90003b3c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003b28:	68fb      	ldr	r3, [r7, #12]
90003b2a:	699b      	ldr	r3, [r3, #24]
90003b2c:	049b      	lsls	r3, r3, #18
90003b2e:	693a      	ldr	r2, [r7, #16]
90003b30:	4313      	orrs	r3, r2
90003b32:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003b34:	697b      	ldr	r3, [r7, #20]
90003b36:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
90003b3a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003b3c:	687b      	ldr	r3, [r7, #4]
90003b3e:	681b      	ldr	r3, [r3, #0]
90003b40:	69da      	ldr	r2, [r3, #28]
90003b42:	697b      	ldr	r3, [r7, #20]
90003b44:	43db      	mvns	r3, r3
90003b46:	ea02 0103 	and.w	r1, r2, r3
90003b4a:	687b      	ldr	r3, [r7, #4]
90003b4c:	681b      	ldr	r3, [r3, #0]
90003b4e:	693a      	ldr	r2, [r7, #16]
90003b50:	430a      	orrs	r2, r1
90003b52:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003b54:	687b      	ldr	r3, [r7, #4]
90003b56:	681b      	ldr	r3, [r3, #0]
90003b58:	68fa      	ldr	r2, [r7, #12]
90003b5a:	6812      	ldr	r2, [r2, #0]
90003b5c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003b5e:	68fb      	ldr	r3, [r7, #12]
90003b60:	685b      	ldr	r3, [r3, #4]
90003b62:	2b0a      	cmp	r3, #10
90003b64:	d003      	beq.n	90003b6e <HAL_DMA2D_ConfigLayer+0x12a>
90003b66:	68fb      	ldr	r3, [r7, #12]
90003b68:	685b      	ldr	r3, [r3, #4]
90003b6a:	2b09      	cmp	r3, #9
90003b6c:	d106      	bne.n	90003b7c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003b6e:	68fb      	ldr	r3, [r7, #12]
90003b70:	68da      	ldr	r2, [r3, #12]
90003b72:	687b      	ldr	r3, [r7, #4]
90003b74:	681b      	ldr	r3, [r3, #0]
90003b76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003b7a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003b7c:	687b      	ldr	r3, [r7, #4]
90003b7e:	2201      	movs	r2, #1
90003b80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003b84:	687b      	ldr	r3, [r7, #4]
90003b86:	2200      	movs	r2, #0
90003b88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90003b8c:	2300      	movs	r3, #0
}
90003b8e:	4618      	mov	r0, r3
90003b90:	371c      	adds	r7, #28
90003b92:	46bd      	mov	sp, r7
90003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b98:	4770      	bx	lr
90003b9a:	bf00      	nop
90003b9c:	ff33000f 	.word	0xff33000f

90003ba0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003ba0:	b480      	push	{r7}
90003ba2:	b08b      	sub	sp, #44	; 0x2c
90003ba4:	af00      	add	r7, sp, #0
90003ba6:	60f8      	str	r0, [r7, #12]
90003ba8:	60b9      	str	r1, [r7, #8]
90003baa:	607a      	str	r2, [r7, #4]
90003bac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003bae:	68fb      	ldr	r3, [r7, #12]
90003bb0:	681b      	ldr	r3, [r3, #0]
90003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003bb4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
90003bb8:	683b      	ldr	r3, [r7, #0]
90003bba:	041a      	lsls	r2, r3, #16
90003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90003bbe:	431a      	orrs	r2, r3
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	681b      	ldr	r3, [r3, #0]
90003bc4:	430a      	orrs	r2, r1
90003bc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003bc8:	68fb      	ldr	r3, [r7, #12]
90003bca:	681b      	ldr	r3, [r3, #0]
90003bcc:	687a      	ldr	r2, [r7, #4]
90003bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003bd0:	68fb      	ldr	r3, [r7, #12]
90003bd2:	685b      	ldr	r3, [r3, #4]
90003bd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90003bd8:	d174      	bne.n	90003cc4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003bda:	68bb      	ldr	r3, [r7, #8]
90003bdc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90003be0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003be2:	68bb      	ldr	r3, [r7, #8]
90003be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003be8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003bea:	68bb      	ldr	r3, [r7, #8]
90003bec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003bf0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003bf2:	68bb      	ldr	r3, [r7, #8]
90003bf4:	b2db      	uxtb	r3, r3
90003bf6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003bf8:	68fb      	ldr	r3, [r7, #12]
90003bfa:	689b      	ldr	r3, [r3, #8]
90003bfc:	2b00      	cmp	r3, #0
90003bfe:	d108      	bne.n	90003c12 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003c00:	69ba      	ldr	r2, [r7, #24]
90003c02:	69fb      	ldr	r3, [r7, #28]
90003c04:	431a      	orrs	r2, r3
90003c06:	6a3b      	ldr	r3, [r7, #32]
90003c08:	4313      	orrs	r3, r2
90003c0a:	697a      	ldr	r2, [r7, #20]
90003c0c:	4313      	orrs	r3, r2
90003c0e:	627b      	str	r3, [r7, #36]	; 0x24
90003c10:	e053      	b.n	90003cba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003c12:	68fb      	ldr	r3, [r7, #12]
90003c14:	689b      	ldr	r3, [r3, #8]
90003c16:	2b01      	cmp	r3, #1
90003c18:	d106      	bne.n	90003c28 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003c1a:	69ba      	ldr	r2, [r7, #24]
90003c1c:	69fb      	ldr	r3, [r7, #28]
90003c1e:	4313      	orrs	r3, r2
90003c20:	697a      	ldr	r2, [r7, #20]
90003c22:	4313      	orrs	r3, r2
90003c24:	627b      	str	r3, [r7, #36]	; 0x24
90003c26:	e048      	b.n	90003cba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003c28:	68fb      	ldr	r3, [r7, #12]
90003c2a:	689b      	ldr	r3, [r3, #8]
90003c2c:	2b02      	cmp	r3, #2
90003c2e:	d111      	bne.n	90003c54 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003c30:	69fb      	ldr	r3, [r7, #28]
90003c32:	0cdb      	lsrs	r3, r3, #19
90003c34:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003c36:	69bb      	ldr	r3, [r7, #24]
90003c38:	0a9b      	lsrs	r3, r3, #10
90003c3a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c3c:	697b      	ldr	r3, [r7, #20]
90003c3e:	08db      	lsrs	r3, r3, #3
90003c40:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003c42:	69bb      	ldr	r3, [r7, #24]
90003c44:	015a      	lsls	r2, r3, #5
90003c46:	69fb      	ldr	r3, [r7, #28]
90003c48:	02db      	lsls	r3, r3, #11
90003c4a:	4313      	orrs	r3, r2
90003c4c:	697a      	ldr	r2, [r7, #20]
90003c4e:	4313      	orrs	r3, r2
90003c50:	627b      	str	r3, [r7, #36]	; 0x24
90003c52:	e032      	b.n	90003cba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003c54:	68fb      	ldr	r3, [r7, #12]
90003c56:	689b      	ldr	r3, [r3, #8]
90003c58:	2b03      	cmp	r3, #3
90003c5a:	d117      	bne.n	90003c8c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003c5c:	6a3b      	ldr	r3, [r7, #32]
90003c5e:	0fdb      	lsrs	r3, r3, #31
90003c60:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003c62:	69fb      	ldr	r3, [r7, #28]
90003c64:	0cdb      	lsrs	r3, r3, #19
90003c66:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003c68:	69bb      	ldr	r3, [r7, #24]
90003c6a:	0adb      	lsrs	r3, r3, #11
90003c6c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c6e:	697b      	ldr	r3, [r7, #20]
90003c70:	08db      	lsrs	r3, r3, #3
90003c72:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003c74:	69bb      	ldr	r3, [r7, #24]
90003c76:	015a      	lsls	r2, r3, #5
90003c78:	69fb      	ldr	r3, [r7, #28]
90003c7a:	029b      	lsls	r3, r3, #10
90003c7c:	431a      	orrs	r2, r3
90003c7e:	6a3b      	ldr	r3, [r7, #32]
90003c80:	03db      	lsls	r3, r3, #15
90003c82:	4313      	orrs	r3, r2
90003c84:	697a      	ldr	r2, [r7, #20]
90003c86:	4313      	orrs	r3, r2
90003c88:	627b      	str	r3, [r7, #36]	; 0x24
90003c8a:	e016      	b.n	90003cba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003c8c:	6a3b      	ldr	r3, [r7, #32]
90003c8e:	0f1b      	lsrs	r3, r3, #28
90003c90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003c92:	69fb      	ldr	r3, [r7, #28]
90003c94:	0d1b      	lsrs	r3, r3, #20
90003c96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003c98:	69bb      	ldr	r3, [r7, #24]
90003c9a:	0b1b      	lsrs	r3, r3, #12
90003c9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003c9e:	697b      	ldr	r3, [r7, #20]
90003ca0:	091b      	lsrs	r3, r3, #4
90003ca2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003ca4:	69bb      	ldr	r3, [r7, #24]
90003ca6:	011a      	lsls	r2, r3, #4
90003ca8:	69fb      	ldr	r3, [r7, #28]
90003caa:	021b      	lsls	r3, r3, #8
90003cac:	431a      	orrs	r2, r3
90003cae:	6a3b      	ldr	r3, [r7, #32]
90003cb0:	031b      	lsls	r3, r3, #12
90003cb2:	4313      	orrs	r3, r2
90003cb4:	697a      	ldr	r2, [r7, #20]
90003cb6:	4313      	orrs	r3, r2
90003cb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003cba:	68fb      	ldr	r3, [r7, #12]
90003cbc:	681b      	ldr	r3, [r3, #0]
90003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003cc2:	e00d      	b.n	90003ce0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003cc4:	68fb      	ldr	r3, [r7, #12]
90003cc6:	685b      	ldr	r3, [r3, #4]
90003cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90003ccc:	d104      	bne.n	90003cd8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003cce:	68fb      	ldr	r3, [r7, #12]
90003cd0:	681b      	ldr	r3, [r3, #0]
90003cd2:	68ba      	ldr	r2, [r7, #8]
90003cd4:	615a      	str	r2, [r3, #20]
}
90003cd6:	e003      	b.n	90003ce0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003cd8:	68fb      	ldr	r3, [r7, #12]
90003cda:	681b      	ldr	r3, [r3, #0]
90003cdc:	68ba      	ldr	r2, [r7, #8]
90003cde:	60da      	str	r2, [r3, #12]
}
90003ce0:	bf00      	nop
90003ce2:	372c      	adds	r7, #44	; 0x2c
90003ce4:	46bd      	mov	sp, r7
90003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cea:	4770      	bx	lr

90003cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90003cec:	b480      	push	{r7}
90003cee:	b089      	sub	sp, #36	; 0x24
90003cf0:	af00      	add	r7, sp, #0
90003cf2:	6078      	str	r0, [r7, #4]
90003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003cf6:	2300      	movs	r3, #0
90003cf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003cfa:	4b89      	ldr	r3, [pc, #548]	; (90003f20 <HAL_GPIO_Init+0x234>)
90003cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003cfe:	e194      	b.n	9000402a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003d00:	683b      	ldr	r3, [r7, #0]
90003d02:	681a      	ldr	r2, [r3, #0]
90003d04:	2101      	movs	r1, #1
90003d06:	69fb      	ldr	r3, [r7, #28]
90003d08:	fa01 f303 	lsl.w	r3, r1, r3
90003d0c:	4013      	ands	r3, r2
90003d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003d10:	693b      	ldr	r3, [r7, #16]
90003d12:	2b00      	cmp	r3, #0
90003d14:	f000 8186 	beq.w	90004024 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003d18:	683b      	ldr	r3, [r7, #0]
90003d1a:	685b      	ldr	r3, [r3, #4]
90003d1c:	f003 0303 	and.w	r3, r3, #3
90003d20:	2b01      	cmp	r3, #1
90003d22:	d005      	beq.n	90003d30 <HAL_GPIO_Init+0x44>
90003d24:	683b      	ldr	r3, [r7, #0]
90003d26:	685b      	ldr	r3, [r3, #4]
90003d28:	f003 0303 	and.w	r3, r3, #3
90003d2c:	2b02      	cmp	r3, #2
90003d2e:	d130      	bne.n	90003d92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003d30:	687b      	ldr	r3, [r7, #4]
90003d32:	689b      	ldr	r3, [r3, #8]
90003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003d36:	69fb      	ldr	r3, [r7, #28]
90003d38:	005b      	lsls	r3, r3, #1
90003d3a:	2203      	movs	r2, #3
90003d3c:	fa02 f303 	lsl.w	r3, r2, r3
90003d40:	43db      	mvns	r3, r3
90003d42:	69ba      	ldr	r2, [r7, #24]
90003d44:	4013      	ands	r3, r2
90003d46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003d48:	683b      	ldr	r3, [r7, #0]
90003d4a:	68da      	ldr	r2, [r3, #12]
90003d4c:	69fb      	ldr	r3, [r7, #28]
90003d4e:	005b      	lsls	r3, r3, #1
90003d50:	fa02 f303 	lsl.w	r3, r2, r3
90003d54:	69ba      	ldr	r2, [r7, #24]
90003d56:	4313      	orrs	r3, r2
90003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003d5a:	687b      	ldr	r3, [r7, #4]
90003d5c:	69ba      	ldr	r2, [r7, #24]
90003d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003d60:	687b      	ldr	r3, [r7, #4]
90003d62:	685b      	ldr	r3, [r3, #4]
90003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003d66:	2201      	movs	r2, #1
90003d68:	69fb      	ldr	r3, [r7, #28]
90003d6a:	fa02 f303 	lsl.w	r3, r2, r3
90003d6e:	43db      	mvns	r3, r3
90003d70:	69ba      	ldr	r2, [r7, #24]
90003d72:	4013      	ands	r3, r2
90003d74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003d76:	683b      	ldr	r3, [r7, #0]
90003d78:	685b      	ldr	r3, [r3, #4]
90003d7a:	091b      	lsrs	r3, r3, #4
90003d7c:	f003 0201 	and.w	r2, r3, #1
90003d80:	69fb      	ldr	r3, [r7, #28]
90003d82:	fa02 f303 	lsl.w	r3, r2, r3
90003d86:	69ba      	ldr	r2, [r7, #24]
90003d88:	4313      	orrs	r3, r2
90003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003d8c:	687b      	ldr	r3, [r7, #4]
90003d8e:	69ba      	ldr	r2, [r7, #24]
90003d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003d92:	683b      	ldr	r3, [r7, #0]
90003d94:	685b      	ldr	r3, [r3, #4]
90003d96:	f003 0303 	and.w	r3, r3, #3
90003d9a:	2b03      	cmp	r3, #3
90003d9c:	d017      	beq.n	90003dce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003d9e:	687b      	ldr	r3, [r7, #4]
90003da0:	68db      	ldr	r3, [r3, #12]
90003da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003da4:	69fb      	ldr	r3, [r7, #28]
90003da6:	005b      	lsls	r3, r3, #1
90003da8:	2203      	movs	r2, #3
90003daa:	fa02 f303 	lsl.w	r3, r2, r3
90003dae:	43db      	mvns	r3, r3
90003db0:	69ba      	ldr	r2, [r7, #24]
90003db2:	4013      	ands	r3, r2
90003db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003db6:	683b      	ldr	r3, [r7, #0]
90003db8:	689a      	ldr	r2, [r3, #8]
90003dba:	69fb      	ldr	r3, [r7, #28]
90003dbc:	005b      	lsls	r3, r3, #1
90003dbe:	fa02 f303 	lsl.w	r3, r2, r3
90003dc2:	69ba      	ldr	r2, [r7, #24]
90003dc4:	4313      	orrs	r3, r2
90003dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003dc8:	687b      	ldr	r3, [r7, #4]
90003dca:	69ba      	ldr	r2, [r7, #24]
90003dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003dce:	683b      	ldr	r3, [r7, #0]
90003dd0:	685b      	ldr	r3, [r3, #4]
90003dd2:	f003 0303 	and.w	r3, r3, #3
90003dd6:	2b02      	cmp	r3, #2
90003dd8:	d123      	bne.n	90003e22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003dda:	69fb      	ldr	r3, [r7, #28]
90003ddc:	08da      	lsrs	r2, r3, #3
90003dde:	687b      	ldr	r3, [r7, #4]
90003de0:	3208      	adds	r2, #8
90003de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003de8:	69fb      	ldr	r3, [r7, #28]
90003dea:	f003 0307 	and.w	r3, r3, #7
90003dee:	009b      	lsls	r3, r3, #2
90003df0:	220f      	movs	r2, #15
90003df2:	fa02 f303 	lsl.w	r3, r2, r3
90003df6:	43db      	mvns	r3, r3
90003df8:	69ba      	ldr	r2, [r7, #24]
90003dfa:	4013      	ands	r3, r2
90003dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003dfe:	683b      	ldr	r3, [r7, #0]
90003e00:	691a      	ldr	r2, [r3, #16]
90003e02:	69fb      	ldr	r3, [r7, #28]
90003e04:	f003 0307 	and.w	r3, r3, #7
90003e08:	009b      	lsls	r3, r3, #2
90003e0a:	fa02 f303 	lsl.w	r3, r2, r3
90003e0e:	69ba      	ldr	r2, [r7, #24]
90003e10:	4313      	orrs	r3, r2
90003e12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003e14:	69fb      	ldr	r3, [r7, #28]
90003e16:	08da      	lsrs	r2, r3, #3
90003e18:	687b      	ldr	r3, [r7, #4]
90003e1a:	3208      	adds	r2, #8
90003e1c:	69b9      	ldr	r1, [r7, #24]
90003e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003e22:	687b      	ldr	r3, [r7, #4]
90003e24:	681b      	ldr	r3, [r3, #0]
90003e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003e28:	69fb      	ldr	r3, [r7, #28]
90003e2a:	005b      	lsls	r3, r3, #1
90003e2c:	2203      	movs	r2, #3
90003e2e:	fa02 f303 	lsl.w	r3, r2, r3
90003e32:	43db      	mvns	r3, r3
90003e34:	69ba      	ldr	r2, [r7, #24]
90003e36:	4013      	ands	r3, r2
90003e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003e3a:	683b      	ldr	r3, [r7, #0]
90003e3c:	685b      	ldr	r3, [r3, #4]
90003e3e:	f003 0203 	and.w	r2, r3, #3
90003e42:	69fb      	ldr	r3, [r7, #28]
90003e44:	005b      	lsls	r3, r3, #1
90003e46:	fa02 f303 	lsl.w	r3, r2, r3
90003e4a:	69ba      	ldr	r2, [r7, #24]
90003e4c:	4313      	orrs	r3, r2
90003e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003e50:	687b      	ldr	r3, [r7, #4]
90003e52:	69ba      	ldr	r2, [r7, #24]
90003e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003e56:	683b      	ldr	r3, [r7, #0]
90003e58:	685b      	ldr	r3, [r3, #4]
90003e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90003e5e:	2b00      	cmp	r3, #0
90003e60:	f000 80e0 	beq.w	90004024 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003e64:	4b2f      	ldr	r3, [pc, #188]	; (90003f24 <HAL_GPIO_Init+0x238>)
90003e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003e6a:	4a2e      	ldr	r2, [pc, #184]	; (90003f24 <HAL_GPIO_Init+0x238>)
90003e6c:	f043 0302 	orr.w	r3, r3, #2
90003e70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90003e74:	4b2b      	ldr	r3, [pc, #172]	; (90003f24 <HAL_GPIO_Init+0x238>)
90003e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003e7a:	f003 0302 	and.w	r3, r3, #2
90003e7e:	60fb      	str	r3, [r7, #12]
90003e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003e82:	4a29      	ldr	r2, [pc, #164]	; (90003f28 <HAL_GPIO_Init+0x23c>)
90003e84:	69fb      	ldr	r3, [r7, #28]
90003e86:	089b      	lsrs	r3, r3, #2
90003e88:	3302      	adds	r3, #2
90003e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003e90:	69fb      	ldr	r3, [r7, #28]
90003e92:	f003 0303 	and.w	r3, r3, #3
90003e96:	009b      	lsls	r3, r3, #2
90003e98:	220f      	movs	r2, #15
90003e9a:	fa02 f303 	lsl.w	r3, r2, r3
90003e9e:	43db      	mvns	r3, r3
90003ea0:	69ba      	ldr	r2, [r7, #24]
90003ea2:	4013      	ands	r3, r2
90003ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003ea6:	687b      	ldr	r3, [r7, #4]
90003ea8:	4a20      	ldr	r2, [pc, #128]	; (90003f2c <HAL_GPIO_Init+0x240>)
90003eaa:	4293      	cmp	r3, r2
90003eac:	d052      	beq.n	90003f54 <HAL_GPIO_Init+0x268>
90003eae:	687b      	ldr	r3, [r7, #4]
90003eb0:	4a1f      	ldr	r2, [pc, #124]	; (90003f30 <HAL_GPIO_Init+0x244>)
90003eb2:	4293      	cmp	r3, r2
90003eb4:	d031      	beq.n	90003f1a <HAL_GPIO_Init+0x22e>
90003eb6:	687b      	ldr	r3, [r7, #4]
90003eb8:	4a1e      	ldr	r2, [pc, #120]	; (90003f34 <HAL_GPIO_Init+0x248>)
90003eba:	4293      	cmp	r3, r2
90003ebc:	d02b      	beq.n	90003f16 <HAL_GPIO_Init+0x22a>
90003ebe:	687b      	ldr	r3, [r7, #4]
90003ec0:	4a1d      	ldr	r2, [pc, #116]	; (90003f38 <HAL_GPIO_Init+0x24c>)
90003ec2:	4293      	cmp	r3, r2
90003ec4:	d025      	beq.n	90003f12 <HAL_GPIO_Init+0x226>
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	4a1c      	ldr	r2, [pc, #112]	; (90003f3c <HAL_GPIO_Init+0x250>)
90003eca:	4293      	cmp	r3, r2
90003ecc:	d01f      	beq.n	90003f0e <HAL_GPIO_Init+0x222>
90003ece:	687b      	ldr	r3, [r7, #4]
90003ed0:	4a1b      	ldr	r2, [pc, #108]	; (90003f40 <HAL_GPIO_Init+0x254>)
90003ed2:	4293      	cmp	r3, r2
90003ed4:	d019      	beq.n	90003f0a <HAL_GPIO_Init+0x21e>
90003ed6:	687b      	ldr	r3, [r7, #4]
90003ed8:	4a1a      	ldr	r2, [pc, #104]	; (90003f44 <HAL_GPIO_Init+0x258>)
90003eda:	4293      	cmp	r3, r2
90003edc:	d013      	beq.n	90003f06 <HAL_GPIO_Init+0x21a>
90003ede:	687b      	ldr	r3, [r7, #4]
90003ee0:	4a19      	ldr	r2, [pc, #100]	; (90003f48 <HAL_GPIO_Init+0x25c>)
90003ee2:	4293      	cmp	r3, r2
90003ee4:	d00d      	beq.n	90003f02 <HAL_GPIO_Init+0x216>
90003ee6:	687b      	ldr	r3, [r7, #4]
90003ee8:	4a18      	ldr	r2, [pc, #96]	; (90003f4c <HAL_GPIO_Init+0x260>)
90003eea:	4293      	cmp	r3, r2
90003eec:	d007      	beq.n	90003efe <HAL_GPIO_Init+0x212>
90003eee:	687b      	ldr	r3, [r7, #4]
90003ef0:	4a17      	ldr	r2, [pc, #92]	; (90003f50 <HAL_GPIO_Init+0x264>)
90003ef2:	4293      	cmp	r3, r2
90003ef4:	d101      	bne.n	90003efa <HAL_GPIO_Init+0x20e>
90003ef6:	2309      	movs	r3, #9
90003ef8:	e02d      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003efa:	230a      	movs	r3, #10
90003efc:	e02b      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003efe:	2308      	movs	r3, #8
90003f00:	e029      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f02:	2307      	movs	r3, #7
90003f04:	e027      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f06:	2306      	movs	r3, #6
90003f08:	e025      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f0a:	2305      	movs	r3, #5
90003f0c:	e023      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f0e:	2304      	movs	r3, #4
90003f10:	e021      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f12:	2303      	movs	r3, #3
90003f14:	e01f      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f16:	2302      	movs	r3, #2
90003f18:	e01d      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f1a:	2301      	movs	r3, #1
90003f1c:	e01b      	b.n	90003f56 <HAL_GPIO_Init+0x26a>
90003f1e:	bf00      	nop
90003f20:	58000080 	.word	0x58000080
90003f24:	58024400 	.word	0x58024400
90003f28:	58000400 	.word	0x58000400
90003f2c:	58020000 	.word	0x58020000
90003f30:	58020400 	.word	0x58020400
90003f34:	58020800 	.word	0x58020800
90003f38:	58020c00 	.word	0x58020c00
90003f3c:	58021000 	.word	0x58021000
90003f40:	58021400 	.word	0x58021400
90003f44:	58021800 	.word	0x58021800
90003f48:	58021c00 	.word	0x58021c00
90003f4c:	58022000 	.word	0x58022000
90003f50:	58022400 	.word	0x58022400
90003f54:	2300      	movs	r3, #0
90003f56:	69fa      	ldr	r2, [r7, #28]
90003f58:	f002 0203 	and.w	r2, r2, #3
90003f5c:	0092      	lsls	r2, r2, #2
90003f5e:	4093      	lsls	r3, r2
90003f60:	69ba      	ldr	r2, [r7, #24]
90003f62:	4313      	orrs	r3, r2
90003f64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003f66:	4938      	ldr	r1, [pc, #224]	; (90004048 <HAL_GPIO_Init+0x35c>)
90003f68:	69fb      	ldr	r3, [r7, #28]
90003f6a:	089b      	lsrs	r3, r3, #2
90003f6c:	3302      	adds	r3, #2
90003f6e:	69ba      	ldr	r2, [r7, #24]
90003f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003f78:	681b      	ldr	r3, [r3, #0]
90003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f7c:	693b      	ldr	r3, [r7, #16]
90003f7e:	43db      	mvns	r3, r3
90003f80:	69ba      	ldr	r2, [r7, #24]
90003f82:	4013      	ands	r3, r2
90003f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003f86:	683b      	ldr	r3, [r7, #0]
90003f88:	685b      	ldr	r3, [r3, #4]
90003f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90003f8e:	2b00      	cmp	r3, #0
90003f90:	d003      	beq.n	90003f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003f92:	69ba      	ldr	r2, [r7, #24]
90003f94:	693b      	ldr	r3, [r7, #16]
90003f96:	4313      	orrs	r3, r2
90003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90003f9e:	69bb      	ldr	r3, [r7, #24]
90003fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003fa6:	685b      	ldr	r3, [r3, #4]
90003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003faa:	693b      	ldr	r3, [r7, #16]
90003fac:	43db      	mvns	r3, r3
90003fae:	69ba      	ldr	r2, [r7, #24]
90003fb0:	4013      	ands	r3, r2
90003fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003fb4:	683b      	ldr	r3, [r7, #0]
90003fb6:	685b      	ldr	r3, [r3, #4]
90003fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003fbc:	2b00      	cmp	r3, #0
90003fbe:	d003      	beq.n	90003fc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003fc0:	69ba      	ldr	r2, [r7, #24]
90003fc2:	693b      	ldr	r3, [r7, #16]
90003fc4:	4313      	orrs	r3, r2
90003fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90003fcc:	69bb      	ldr	r3, [r7, #24]
90003fce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003fd0:	697b      	ldr	r3, [r7, #20]
90003fd2:	685b      	ldr	r3, [r3, #4]
90003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003fd6:	693b      	ldr	r3, [r7, #16]
90003fd8:	43db      	mvns	r3, r3
90003fda:	69ba      	ldr	r2, [r7, #24]
90003fdc:	4013      	ands	r3, r2
90003fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003fe0:	683b      	ldr	r3, [r7, #0]
90003fe2:	685b      	ldr	r3, [r3, #4]
90003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003fe8:	2b00      	cmp	r3, #0
90003fea:	d003      	beq.n	90003ff4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003fec:	69ba      	ldr	r2, [r7, #24]
90003fee:	693b      	ldr	r3, [r7, #16]
90003ff0:	4313      	orrs	r3, r2
90003ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003ff4:	697b      	ldr	r3, [r7, #20]
90003ff6:	69ba      	ldr	r2, [r7, #24]
90003ff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003ffa:	697b      	ldr	r3, [r7, #20]
90003ffc:	681b      	ldr	r3, [r3, #0]
90003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004000:	693b      	ldr	r3, [r7, #16]
90004002:	43db      	mvns	r3, r3
90004004:	69ba      	ldr	r2, [r7, #24]
90004006:	4013      	ands	r3, r2
90004008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000400a:	683b      	ldr	r3, [r7, #0]
9000400c:	685b      	ldr	r3, [r3, #4]
9000400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90004012:	2b00      	cmp	r3, #0
90004014:	d003      	beq.n	9000401e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90004016:	69ba      	ldr	r2, [r7, #24]
90004018:	693b      	ldr	r3, [r7, #16]
9000401a:	4313      	orrs	r3, r2
9000401c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000401e:	697b      	ldr	r3, [r7, #20]
90004020:	69ba      	ldr	r2, [r7, #24]
90004022:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90004024:	69fb      	ldr	r3, [r7, #28]
90004026:	3301      	adds	r3, #1
90004028:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000402a:	683b      	ldr	r3, [r7, #0]
9000402c:	681a      	ldr	r2, [r3, #0]
9000402e:	69fb      	ldr	r3, [r7, #28]
90004030:	fa22 f303 	lsr.w	r3, r2, r3
90004034:	2b00      	cmp	r3, #0
90004036:	f47f ae63 	bne.w	90003d00 <HAL_GPIO_Init+0x14>
  }
}
9000403a:	bf00      	nop
9000403c:	bf00      	nop
9000403e:	3724      	adds	r7, #36	; 0x24
90004040:	46bd      	mov	sp, r7
90004042:	f85d 7b04 	ldr.w	r7, [sp], #4
90004046:	4770      	bx	lr
90004048:	58000400 	.word	0x58000400

9000404c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
9000404c:	b480      	push	{r7}
9000404e:	b087      	sub	sp, #28
90004050:	af00      	add	r7, sp, #0
90004052:	6078      	str	r0, [r7, #4]
90004054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90004056:	2300      	movs	r3, #0
90004058:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000405a:	4b75      	ldr	r3, [pc, #468]	; (90004230 <HAL_GPIO_DeInit+0x1e4>)
9000405c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000405e:	e0d9      	b.n	90004214 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90004060:	2201      	movs	r2, #1
90004062:	697b      	ldr	r3, [r7, #20]
90004064:	fa02 f303 	lsl.w	r3, r2, r3
90004068:	683a      	ldr	r2, [r7, #0]
9000406a:	4013      	ands	r3, r2
9000406c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
9000406e:	68fb      	ldr	r3, [r7, #12]
90004070:	2b00      	cmp	r3, #0
90004072:	f000 80cc 	beq.w	9000420e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
90004076:	4a6f      	ldr	r2, [pc, #444]	; (90004234 <HAL_GPIO_DeInit+0x1e8>)
90004078:	697b      	ldr	r3, [r7, #20]
9000407a:	089b      	lsrs	r3, r3, #2
9000407c:	3302      	adds	r3, #2
9000407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90004082:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90004084:	697b      	ldr	r3, [r7, #20]
90004086:	f003 0303 	and.w	r3, r3, #3
9000408a:	009b      	lsls	r3, r3, #2
9000408c:	220f      	movs	r2, #15
9000408e:	fa02 f303 	lsl.w	r3, r2, r3
90004092:	68ba      	ldr	r2, [r7, #8]
90004094:	4013      	ands	r3, r2
90004096:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90004098:	687b      	ldr	r3, [r7, #4]
9000409a:	4a67      	ldr	r2, [pc, #412]	; (90004238 <HAL_GPIO_DeInit+0x1ec>)
9000409c:	4293      	cmp	r3, r2
9000409e:	d037      	beq.n	90004110 <HAL_GPIO_DeInit+0xc4>
900040a0:	687b      	ldr	r3, [r7, #4]
900040a2:	4a66      	ldr	r2, [pc, #408]	; (9000423c <HAL_GPIO_DeInit+0x1f0>)
900040a4:	4293      	cmp	r3, r2
900040a6:	d031      	beq.n	9000410c <HAL_GPIO_DeInit+0xc0>
900040a8:	687b      	ldr	r3, [r7, #4]
900040aa:	4a65      	ldr	r2, [pc, #404]	; (90004240 <HAL_GPIO_DeInit+0x1f4>)
900040ac:	4293      	cmp	r3, r2
900040ae:	d02b      	beq.n	90004108 <HAL_GPIO_DeInit+0xbc>
900040b0:	687b      	ldr	r3, [r7, #4]
900040b2:	4a64      	ldr	r2, [pc, #400]	; (90004244 <HAL_GPIO_DeInit+0x1f8>)
900040b4:	4293      	cmp	r3, r2
900040b6:	d025      	beq.n	90004104 <HAL_GPIO_DeInit+0xb8>
900040b8:	687b      	ldr	r3, [r7, #4]
900040ba:	4a63      	ldr	r2, [pc, #396]	; (90004248 <HAL_GPIO_DeInit+0x1fc>)
900040bc:	4293      	cmp	r3, r2
900040be:	d01f      	beq.n	90004100 <HAL_GPIO_DeInit+0xb4>
900040c0:	687b      	ldr	r3, [r7, #4]
900040c2:	4a62      	ldr	r2, [pc, #392]	; (9000424c <HAL_GPIO_DeInit+0x200>)
900040c4:	4293      	cmp	r3, r2
900040c6:	d019      	beq.n	900040fc <HAL_GPIO_DeInit+0xb0>
900040c8:	687b      	ldr	r3, [r7, #4]
900040ca:	4a61      	ldr	r2, [pc, #388]	; (90004250 <HAL_GPIO_DeInit+0x204>)
900040cc:	4293      	cmp	r3, r2
900040ce:	d013      	beq.n	900040f8 <HAL_GPIO_DeInit+0xac>
900040d0:	687b      	ldr	r3, [r7, #4]
900040d2:	4a60      	ldr	r2, [pc, #384]	; (90004254 <HAL_GPIO_DeInit+0x208>)
900040d4:	4293      	cmp	r3, r2
900040d6:	d00d      	beq.n	900040f4 <HAL_GPIO_DeInit+0xa8>
900040d8:	687b      	ldr	r3, [r7, #4]
900040da:	4a5f      	ldr	r2, [pc, #380]	; (90004258 <HAL_GPIO_DeInit+0x20c>)
900040dc:	4293      	cmp	r3, r2
900040de:	d007      	beq.n	900040f0 <HAL_GPIO_DeInit+0xa4>
900040e0:	687b      	ldr	r3, [r7, #4]
900040e2:	4a5e      	ldr	r2, [pc, #376]	; (9000425c <HAL_GPIO_DeInit+0x210>)
900040e4:	4293      	cmp	r3, r2
900040e6:	d101      	bne.n	900040ec <HAL_GPIO_DeInit+0xa0>
900040e8:	2309      	movs	r3, #9
900040ea:	e012      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
900040ec:	230a      	movs	r3, #10
900040ee:	e010      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
900040f0:	2308      	movs	r3, #8
900040f2:	e00e      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
900040f4:	2307      	movs	r3, #7
900040f6:	e00c      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
900040f8:	2306      	movs	r3, #6
900040fa:	e00a      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
900040fc:	2305      	movs	r3, #5
900040fe:	e008      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
90004100:	2304      	movs	r3, #4
90004102:	e006      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
90004104:	2303      	movs	r3, #3
90004106:	e004      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
90004108:	2302      	movs	r3, #2
9000410a:	e002      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
9000410c:	2301      	movs	r3, #1
9000410e:	e000      	b.n	90004112 <HAL_GPIO_DeInit+0xc6>
90004110:	2300      	movs	r3, #0
90004112:	697a      	ldr	r2, [r7, #20]
90004114:	f002 0203 	and.w	r2, r2, #3
90004118:	0092      	lsls	r2, r2, #2
9000411a:	4093      	lsls	r3, r2
9000411c:	68ba      	ldr	r2, [r7, #8]
9000411e:	429a      	cmp	r2, r3
90004120:	d136      	bne.n	90004190 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90004122:	693b      	ldr	r3, [r7, #16]
90004124:	681a      	ldr	r2, [r3, #0]
90004126:	68fb      	ldr	r3, [r7, #12]
90004128:	43db      	mvns	r3, r3
9000412a:	401a      	ands	r2, r3
9000412c:	693b      	ldr	r3, [r7, #16]
9000412e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90004130:	693b      	ldr	r3, [r7, #16]
90004132:	685a      	ldr	r2, [r3, #4]
90004134:	68fb      	ldr	r3, [r7, #12]
90004136:	43db      	mvns	r3, r3
90004138:	401a      	ands	r2, r3
9000413a:	693b      	ldr	r3, [r7, #16]
9000413c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
9000413e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90004142:	685a      	ldr	r2, [r3, #4]
90004144:	68fb      	ldr	r3, [r7, #12]
90004146:	43db      	mvns	r3, r3
90004148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
9000414c:	4013      	ands	r3, r2
9000414e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90004154:	681a      	ldr	r2, [r3, #0]
90004156:	68fb      	ldr	r3, [r7, #12]
90004158:	43db      	mvns	r3, r3
9000415a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
9000415e:	4013      	ands	r3, r2
90004160:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90004162:	697b      	ldr	r3, [r7, #20]
90004164:	f003 0303 	and.w	r3, r3, #3
90004168:	009b      	lsls	r3, r3, #2
9000416a:	220f      	movs	r2, #15
9000416c:	fa02 f303 	lsl.w	r3, r2, r3
90004170:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90004172:	4a30      	ldr	r2, [pc, #192]	; (90004234 <HAL_GPIO_DeInit+0x1e8>)
90004174:	697b      	ldr	r3, [r7, #20]
90004176:	089b      	lsrs	r3, r3, #2
90004178:	3302      	adds	r3, #2
9000417a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
9000417e:	68bb      	ldr	r3, [r7, #8]
90004180:	43da      	mvns	r2, r3
90004182:	482c      	ldr	r0, [pc, #176]	; (90004234 <HAL_GPIO_DeInit+0x1e8>)
90004184:	697b      	ldr	r3, [r7, #20]
90004186:	089b      	lsrs	r3, r3, #2
90004188:	400a      	ands	r2, r1
9000418a:	3302      	adds	r3, #2
9000418c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90004190:	687b      	ldr	r3, [r7, #4]
90004192:	681a      	ldr	r2, [r3, #0]
90004194:	697b      	ldr	r3, [r7, #20]
90004196:	005b      	lsls	r3, r3, #1
90004198:	2103      	movs	r1, #3
9000419a:	fa01 f303 	lsl.w	r3, r1, r3
9000419e:	431a      	orrs	r2, r3
900041a0:	687b      	ldr	r3, [r7, #4]
900041a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900041a4:	697b      	ldr	r3, [r7, #20]
900041a6:	08da      	lsrs	r2, r3, #3
900041a8:	687b      	ldr	r3, [r7, #4]
900041aa:	3208      	adds	r2, #8
900041ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900041b0:	697b      	ldr	r3, [r7, #20]
900041b2:	f003 0307 	and.w	r3, r3, #7
900041b6:	009b      	lsls	r3, r3, #2
900041b8:	220f      	movs	r2, #15
900041ba:	fa02 f303 	lsl.w	r3, r2, r3
900041be:	43db      	mvns	r3, r3
900041c0:	697a      	ldr	r2, [r7, #20]
900041c2:	08d2      	lsrs	r2, r2, #3
900041c4:	4019      	ands	r1, r3
900041c6:	687b      	ldr	r3, [r7, #4]
900041c8:	3208      	adds	r2, #8
900041ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900041ce:	687b      	ldr	r3, [r7, #4]
900041d0:	68da      	ldr	r2, [r3, #12]
900041d2:	697b      	ldr	r3, [r7, #20]
900041d4:	005b      	lsls	r3, r3, #1
900041d6:	2103      	movs	r1, #3
900041d8:	fa01 f303 	lsl.w	r3, r1, r3
900041dc:	43db      	mvns	r3, r3
900041de:	401a      	ands	r2, r3
900041e0:	687b      	ldr	r3, [r7, #4]
900041e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900041e4:	687b      	ldr	r3, [r7, #4]
900041e6:	685a      	ldr	r2, [r3, #4]
900041e8:	2101      	movs	r1, #1
900041ea:	697b      	ldr	r3, [r7, #20]
900041ec:	fa01 f303 	lsl.w	r3, r1, r3
900041f0:	43db      	mvns	r3, r3
900041f2:	401a      	ands	r2, r3
900041f4:	687b      	ldr	r3, [r7, #4]
900041f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	689a      	ldr	r2, [r3, #8]
900041fc:	697b      	ldr	r3, [r7, #20]
900041fe:	005b      	lsls	r3, r3, #1
90004200:	2103      	movs	r1, #3
90004202:	fa01 f303 	lsl.w	r3, r1, r3
90004206:	43db      	mvns	r3, r3
90004208:	401a      	ands	r2, r3
9000420a:	687b      	ldr	r3, [r7, #4]
9000420c:	609a      	str	r2, [r3, #8]
    }

    position++;
9000420e:	697b      	ldr	r3, [r7, #20]
90004210:	3301      	adds	r3, #1
90004212:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90004214:	683a      	ldr	r2, [r7, #0]
90004216:	697b      	ldr	r3, [r7, #20]
90004218:	fa22 f303 	lsr.w	r3, r2, r3
9000421c:	2b00      	cmp	r3, #0
9000421e:	f47f af1f 	bne.w	90004060 <HAL_GPIO_DeInit+0x14>
  }
}
90004222:	bf00      	nop
90004224:	bf00      	nop
90004226:	371c      	adds	r7, #28
90004228:	46bd      	mov	sp, r7
9000422a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000422e:	4770      	bx	lr
90004230:	58000080 	.word	0x58000080
90004234:	58000400 	.word	0x58000400
90004238:	58020000 	.word	0x58020000
9000423c:	58020400 	.word	0x58020400
90004240:	58020800 	.word	0x58020800
90004244:	58020c00 	.word	0x58020c00
90004248:	58021000 	.word	0x58021000
9000424c:	58021400 	.word	0x58021400
90004250:	58021800 	.word	0x58021800
90004254:	58021c00 	.word	0x58021c00
90004258:	58022000 	.word	0x58022000
9000425c:	58022400 	.word	0x58022400

90004260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90004260:	b480      	push	{r7}
90004262:	b083      	sub	sp, #12
90004264:	af00      	add	r7, sp, #0
90004266:	6078      	str	r0, [r7, #4]
90004268:	460b      	mov	r3, r1
9000426a:	807b      	strh	r3, [r7, #2]
9000426c:	4613      	mov	r3, r2
9000426e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004270:	787b      	ldrb	r3, [r7, #1]
90004272:	2b00      	cmp	r3, #0
90004274:	d003      	beq.n	9000427e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90004276:	887a      	ldrh	r2, [r7, #2]
90004278:	687b      	ldr	r3, [r7, #4]
9000427a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
9000427c:	e003      	b.n	90004286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000427e:	887b      	ldrh	r3, [r7, #2]
90004280:	041a      	lsls	r2, r3, #16
90004282:	687b      	ldr	r3, [r7, #4]
90004284:	619a      	str	r2, [r3, #24]
}
90004286:	bf00      	nop
90004288:	370c      	adds	r7, #12
9000428a:	46bd      	mov	sp, r7
9000428c:	f85d 7b04 	ldr.w	r7, [sp], #4
90004290:	4770      	bx	lr

90004292 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90004292:	b580      	push	{r7, lr}
90004294:	b086      	sub	sp, #24
90004296:	af00      	add	r7, sp, #0
90004298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000429a:	687b      	ldr	r3, [r7, #4]
9000429c:	681b      	ldr	r3, [r3, #0]
9000429e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
900042a0:	693b      	ldr	r3, [r7, #16]
900042a2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
900042a4:	687b      	ldr	r3, [r7, #4]
900042a6:	681b      	ldr	r3, [r3, #0]
900042a8:	4618      	mov	r0, r3
900042aa:	f005 fc11 	bl	90009ad0 <USB_GetMode>
900042ae:	4603      	mov	r3, r0
900042b0:	2b01      	cmp	r3, #1
900042b2:	f040 80fa 	bne.w	900044aa <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
900042b6:	687b      	ldr	r3, [r7, #4]
900042b8:	681b      	ldr	r3, [r3, #0]
900042ba:	4618      	mov	r0, r3
900042bc:	f005 fbd4 	bl	90009a68 <USB_ReadInterrupts>
900042c0:	4603      	mov	r3, r0
900042c2:	2b00      	cmp	r3, #0
900042c4:	f000 80f0 	beq.w	900044a8 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
900042c8:	687b      	ldr	r3, [r7, #4]
900042ca:	681b      	ldr	r3, [r3, #0]
900042cc:	4618      	mov	r0, r3
900042ce:	f005 fbcb 	bl	90009a68 <USB_ReadInterrupts>
900042d2:	4603      	mov	r3, r0
900042d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900042d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900042dc:	d104      	bne.n	900042e8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
900042de:	687b      	ldr	r3, [r7, #4]
900042e0:	681b      	ldr	r3, [r3, #0]
900042e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
900042e6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
900042e8:	687b      	ldr	r3, [r7, #4]
900042ea:	681b      	ldr	r3, [r3, #0]
900042ec:	4618      	mov	r0, r3
900042ee:	f005 fbbb 	bl	90009a68 <USB_ReadInterrupts>
900042f2:	4603      	mov	r3, r0
900042f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900042f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900042fc:	d104      	bne.n	90004308 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
900042fe:	687b      	ldr	r3, [r7, #4]
90004300:	681b      	ldr	r3, [r3, #0]
90004302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
90004306:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
90004308:	687b      	ldr	r3, [r7, #4]
9000430a:	681b      	ldr	r3, [r3, #0]
9000430c:	4618      	mov	r0, r3
9000430e:	f005 fbab 	bl	90009a68 <USB_ReadInterrupts>
90004312:	4603      	mov	r3, r0
90004314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90004318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000431c:	d104      	bne.n	90004328 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
9000431e:	687b      	ldr	r3, [r7, #4]
90004320:	681b      	ldr	r3, [r3, #0]
90004322:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90004326:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90004328:	687b      	ldr	r3, [r7, #4]
9000432a:	681b      	ldr	r3, [r3, #0]
9000432c:	4618      	mov	r0, r3
9000432e:	f005 fb9b 	bl	90009a68 <USB_ReadInterrupts>
90004332:	4603      	mov	r3, r0
90004334:	f003 0302 	and.w	r3, r3, #2
90004338:	2b02      	cmp	r3, #2
9000433a:	d103      	bne.n	90004344 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
9000433c:	687b      	ldr	r3, [r7, #4]
9000433e:	681b      	ldr	r3, [r3, #0]
90004340:	2202      	movs	r2, #2
90004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90004344:	687b      	ldr	r3, [r7, #4]
90004346:	681b      	ldr	r3, [r3, #0]
90004348:	4618      	mov	r0, r3
9000434a:	f005 fb8d 	bl	90009a68 <USB_ReadInterrupts>
9000434e:	4603      	mov	r3, r0
90004350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90004354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90004358:	d120      	bne.n	9000439c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000435a:	687b      	ldr	r3, [r7, #4]
9000435c:	681b      	ldr	r3, [r3, #0]
9000435e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90004362:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004364:	68fb      	ldr	r3, [r7, #12]
90004366:	f503 6388 	add.w	r3, r3, #1088	; 0x440
9000436a:	681b      	ldr	r3, [r3, #0]
9000436c:	f003 0301 	and.w	r3, r3, #1
90004370:	2b00      	cmp	r3, #0
90004372:	d113      	bne.n	9000439c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004374:	2110      	movs	r1, #16
90004376:	6938      	ldr	r0, [r7, #16]
90004378:	f005 faba 	bl	900098f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
9000437c:	6938      	ldr	r0, [r7, #16]
9000437e:	f005 faeb 	bl	90009958 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004382:	687b      	ldr	r3, [r7, #4]
90004384:	699b      	ldr	r3, [r3, #24]
90004386:	2b02      	cmp	r3, #2
90004388:	d105      	bne.n	90004396 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000438a:	687b      	ldr	r3, [r7, #4]
9000438c:	681b      	ldr	r3, [r3, #0]
9000438e:	2101      	movs	r1, #1
90004390:	4618      	mov	r0, r3
90004392:	f005 fbab 	bl	90009aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004396:	6878      	ldr	r0, [r7, #4]
90004398:	f7fc fb48 	bl	90000a2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
9000439c:	687b      	ldr	r3, [r7, #4]
9000439e:	681b      	ldr	r3, [r3, #0]
900043a0:	4618      	mov	r0, r3
900043a2:	f005 fb61 	bl	90009a68 <USB_ReadInterrupts>
900043a6:	4603      	mov	r3, r0
900043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
900043ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900043b0:	d102      	bne.n	900043b8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
900043b2:	6878      	ldr	r0, [r7, #4]
900043b4:	f001 f92e 	bl	90005614 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
900043b8:	687b      	ldr	r3, [r7, #4]
900043ba:	681b      	ldr	r3, [r3, #0]
900043bc:	4618      	mov	r0, r3
900043be:	f005 fb53 	bl	90009a68 <USB_ReadInterrupts>
900043c2:	4603      	mov	r3, r0
900043c4:	f003 0308 	and.w	r3, r3, #8
900043c8:	2b08      	cmp	r3, #8
900043ca:	d106      	bne.n	900043da <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
900043cc:	6878      	ldr	r0, [r7, #4]
900043ce:	f7fc fb11 	bl	900009f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
900043d2:	687b      	ldr	r3, [r7, #4]
900043d4:	681b      	ldr	r3, [r3, #0]
900043d6:	2208      	movs	r2, #8
900043d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900043da:	687b      	ldr	r3, [r7, #4]
900043dc:	681b      	ldr	r3, [r3, #0]
900043de:	4618      	mov	r0, r3
900043e0:	f005 fb42 	bl	90009a68 <USB_ReadInterrupts>
900043e4:	4603      	mov	r3, r0
900043e6:	f003 0310 	and.w	r3, r3, #16
900043ea:	2b10      	cmp	r3, #16
900043ec:	d101      	bne.n	900043f2 <HAL_HCD_IRQHandler+0x160>
900043ee:	2301      	movs	r3, #1
900043f0:	e000      	b.n	900043f4 <HAL_HCD_IRQHandler+0x162>
900043f2:	2300      	movs	r3, #0
900043f4:	2b00      	cmp	r3, #0
900043f6:	d012      	beq.n	9000441e <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900043f8:	687b      	ldr	r3, [r7, #4]
900043fa:	681b      	ldr	r3, [r3, #0]
900043fc:	699a      	ldr	r2, [r3, #24]
900043fe:	687b      	ldr	r3, [r7, #4]
90004400:	681b      	ldr	r3, [r3, #0]
90004402:	f022 0210 	bic.w	r2, r2, #16
90004406:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
90004408:	6878      	ldr	r0, [r7, #4]
9000440a:	f001 f831 	bl	90005470 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
9000440e:	687b      	ldr	r3, [r7, #4]
90004410:	681b      	ldr	r3, [r3, #0]
90004412:	699a      	ldr	r2, [r3, #24]
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	681b      	ldr	r3, [r3, #0]
90004418:	f042 0210 	orr.w	r2, r2, #16
9000441c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000441e:	687b      	ldr	r3, [r7, #4]
90004420:	681b      	ldr	r3, [r3, #0]
90004422:	4618      	mov	r0, r3
90004424:	f005 fb20 	bl	90009a68 <USB_ReadInterrupts>
90004428:	4603      	mov	r3, r0
9000442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000442e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90004432:	d13a      	bne.n	900044aa <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004434:	687b      	ldr	r3, [r7, #4]
90004436:	681b      	ldr	r3, [r3, #0]
90004438:	4618      	mov	r0, r3
9000443a:	f005 fb94 	bl	90009b66 <USB_HC_ReadInterrupt>
9000443e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004440:	2300      	movs	r3, #0
90004442:	617b      	str	r3, [r7, #20]
90004444:	e025      	b.n	90004492 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90004446:	697b      	ldr	r3, [r7, #20]
90004448:	f003 030f 	and.w	r3, r3, #15
9000444c:	68ba      	ldr	r2, [r7, #8]
9000444e:	fa22 f303 	lsr.w	r3, r2, r3
90004452:	f003 0301 	and.w	r3, r3, #1
90004456:	2b00      	cmp	r3, #0
90004458:	d018      	beq.n	9000448c <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000445a:	697b      	ldr	r3, [r7, #20]
9000445c:	015a      	lsls	r2, r3, #5
9000445e:	68fb      	ldr	r3, [r7, #12]
90004460:	4413      	add	r3, r2
90004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004466:	681b      	ldr	r3, [r3, #0]
90004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90004470:	d106      	bne.n	90004480 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004472:	697b      	ldr	r3, [r7, #20]
90004474:	b2db      	uxtb	r3, r3
90004476:	4619      	mov	r1, r3
90004478:	6878      	ldr	r0, [r7, #4]
9000447a:	f000 f836 	bl	900044ea <HCD_HC_IN_IRQHandler>
9000447e:	e005      	b.n	9000448c <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004480:	697b      	ldr	r3, [r7, #20]
90004482:	b2db      	uxtb	r3, r3
90004484:	4619      	mov	r1, r3
90004486:	6878      	ldr	r0, [r7, #4]
90004488:	f000 fc40 	bl	90004d0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000448c:	697b      	ldr	r3, [r7, #20]
9000448e:	3301      	adds	r3, #1
90004490:	617b      	str	r3, [r7, #20]
90004492:	687b      	ldr	r3, [r7, #4]
90004494:	689b      	ldr	r3, [r3, #8]
90004496:	697a      	ldr	r2, [r7, #20]
90004498:	429a      	cmp	r2, r3
9000449a:	d3d4      	bcc.n	90004446 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000449c:	687b      	ldr	r3, [r7, #4]
9000449e:	681b      	ldr	r3, [r3, #0]
900044a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
900044a4:	615a      	str	r2, [r3, #20]
900044a6:	e000      	b.n	900044aa <HAL_HCD_IRQHandler+0x218>
      return;
900044a8:	bf00      	nop
    }
  }
}
900044aa:	3718      	adds	r7, #24
900044ac:	46bd      	mov	sp, r7
900044ae:	bd80      	pop	{r7, pc}

900044b0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
900044b0:	b580      	push	{r7, lr}
900044b2:	b082      	sub	sp, #8
900044b4:	af00      	add	r7, sp, #0
900044b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
900044b8:	687b      	ldr	r3, [r7, #4]
900044ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
900044be:	2b01      	cmp	r3, #1
900044c0:	d101      	bne.n	900044c6 <HAL_HCD_Stop+0x16>
900044c2:	2302      	movs	r3, #2
900044c4:	e00d      	b.n	900044e2 <HAL_HCD_Stop+0x32>
900044c6:	687b      	ldr	r3, [r7, #4]
900044c8:	2201      	movs	r2, #1
900044ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
900044ce:	687b      	ldr	r3, [r7, #4]
900044d0:	681b      	ldr	r3, [r3, #0]
900044d2:	4618      	mov	r0, r3
900044d4:	f005 fc54 	bl	90009d80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
900044d8:	687b      	ldr	r3, [r7, #4]
900044da:	2200      	movs	r2, #0
900044dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
900044e0:	2300      	movs	r3, #0
}
900044e2:	4618      	mov	r0, r3
900044e4:	3708      	adds	r7, #8
900044e6:	46bd      	mov	sp, r7
900044e8:	bd80      	pop	{r7, pc}

900044ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
900044ea:	b580      	push	{r7, lr}
900044ec:	b086      	sub	sp, #24
900044ee:	af00      	add	r7, sp, #0
900044f0:	6078      	str	r0, [r7, #4]
900044f2:	460b      	mov	r3, r1
900044f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900044f6:	687b      	ldr	r3, [r7, #4]
900044f8:	681b      	ldr	r3, [r3, #0]
900044fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900044fc:	697b      	ldr	r3, [r7, #20]
900044fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004500:	687b      	ldr	r3, [r7, #4]
90004502:	681b      	ldr	r3, [r3, #0]
90004504:	78fa      	ldrb	r2, [r7, #3]
90004506:	4611      	mov	r1, r2
90004508:	4618      	mov	r0, r3
9000450a:	f005 fac0 	bl	90009a8e <USB_ReadChInterrupts>
9000450e:	4603      	mov	r3, r0
90004510:	f003 0304 	and.w	r3, r3, #4
90004514:	2b04      	cmp	r3, #4
90004516:	d119      	bne.n	9000454c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004518:	78fb      	ldrb	r3, [r7, #3]
9000451a:	015a      	lsls	r2, r3, #5
9000451c:	693b      	ldr	r3, [r7, #16]
9000451e:	4413      	add	r3, r2
90004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004524:	461a      	mov	r2, r3
90004526:	2304      	movs	r3, #4
90004528:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
9000452a:	78fb      	ldrb	r3, [r7, #3]
9000452c:	687a      	ldr	r2, [r7, #4]
9000452e:	212c      	movs	r1, #44	; 0x2c
90004530:	fb01 f303 	mul.w	r3, r1, r3
90004534:	4413      	add	r3, r2
90004536:	3361      	adds	r3, #97	; 0x61
90004538:	2207      	movs	r2, #7
9000453a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000453c:	687b      	ldr	r3, [r7, #4]
9000453e:	681b      	ldr	r3, [r3, #0]
90004540:	78fa      	ldrb	r2, [r7, #3]
90004542:	4611      	mov	r1, r2
90004544:	4618      	mov	r0, r3
90004546:	f005 fb1f 	bl	90009b88 <USB_HC_Halt>
9000454a:	e09a      	b.n	90004682 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
9000454c:	687b      	ldr	r3, [r7, #4]
9000454e:	681b      	ldr	r3, [r3, #0]
90004550:	78fa      	ldrb	r2, [r7, #3]
90004552:	4611      	mov	r1, r2
90004554:	4618      	mov	r0, r3
90004556:	f005 fa9a 	bl	90009a8e <USB_ReadChInterrupts>
9000455a:	4603      	mov	r3, r0
9000455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90004564:	d11a      	bne.n	9000459c <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90004566:	78fb      	ldrb	r3, [r7, #3]
90004568:	015a      	lsls	r2, r3, #5
9000456a:	693b      	ldr	r3, [r7, #16]
9000456c:	4413      	add	r3, r2
9000456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004572:	461a      	mov	r2, r3
90004574:	f44f 7380 	mov.w	r3, #256	; 0x100
90004578:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
9000457a:	78fb      	ldrb	r3, [r7, #3]
9000457c:	687a      	ldr	r2, [r7, #4]
9000457e:	212c      	movs	r1, #44	; 0x2c
90004580:	fb01 f303 	mul.w	r3, r1, r3
90004584:	4413      	add	r3, r2
90004586:	3361      	adds	r3, #97	; 0x61
90004588:	2208      	movs	r2, #8
9000458a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000458c:	687b      	ldr	r3, [r7, #4]
9000458e:	681b      	ldr	r3, [r3, #0]
90004590:	78fa      	ldrb	r2, [r7, #3]
90004592:	4611      	mov	r1, r2
90004594:	4618      	mov	r0, r3
90004596:	f005 faf7 	bl	90009b88 <USB_HC_Halt>
9000459a:	e072      	b.n	90004682 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000459c:	687b      	ldr	r3, [r7, #4]
9000459e:	681b      	ldr	r3, [r3, #0]
900045a0:	78fa      	ldrb	r2, [r7, #3]
900045a2:	4611      	mov	r1, r2
900045a4:	4618      	mov	r0, r3
900045a6:	f005 fa72 	bl	90009a8e <USB_ReadChInterrupts>
900045aa:	4603      	mov	r3, r0
900045ac:	f003 0308 	and.w	r3, r3, #8
900045b0:	2b08      	cmp	r3, #8
900045b2:	d119      	bne.n	900045e8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900045b4:	78fb      	ldrb	r3, [r7, #3]
900045b6:	015a      	lsls	r2, r3, #5
900045b8:	693b      	ldr	r3, [r7, #16]
900045ba:	4413      	add	r3, r2
900045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900045c0:	461a      	mov	r2, r3
900045c2:	2308      	movs	r3, #8
900045c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900045c6:	78fb      	ldrb	r3, [r7, #3]
900045c8:	687a      	ldr	r2, [r7, #4]
900045ca:	212c      	movs	r1, #44	; 0x2c
900045cc:	fb01 f303 	mul.w	r3, r1, r3
900045d0:	4413      	add	r3, r2
900045d2:	3361      	adds	r3, #97	; 0x61
900045d4:	2206      	movs	r2, #6
900045d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900045d8:	687b      	ldr	r3, [r7, #4]
900045da:	681b      	ldr	r3, [r3, #0]
900045dc:	78fa      	ldrb	r2, [r7, #3]
900045de:	4611      	mov	r1, r2
900045e0:	4618      	mov	r0, r3
900045e2:	f005 fad1 	bl	90009b88 <USB_HC_Halt>
900045e6:	e04c      	b.n	90004682 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900045e8:	687b      	ldr	r3, [r7, #4]
900045ea:	681b      	ldr	r3, [r3, #0]
900045ec:	78fa      	ldrb	r2, [r7, #3]
900045ee:	4611      	mov	r1, r2
900045f0:	4618      	mov	r0, r3
900045f2:	f005 fa4c 	bl	90009a8e <USB_ReadChInterrupts>
900045f6:	4603      	mov	r3, r0
900045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90004600:	d11a      	bne.n	90004638 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90004602:	78fb      	ldrb	r3, [r7, #3]
90004604:	015a      	lsls	r2, r3, #5
90004606:	693b      	ldr	r3, [r7, #16]
90004608:	4413      	add	r3, r2
9000460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000460e:	461a      	mov	r2, r3
90004610:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004614:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004616:	78fb      	ldrb	r3, [r7, #3]
90004618:	687a      	ldr	r2, [r7, #4]
9000461a:	212c      	movs	r1, #44	; 0x2c
9000461c:	fb01 f303 	mul.w	r3, r1, r3
90004620:	4413      	add	r3, r2
90004622:	3361      	adds	r3, #97	; 0x61
90004624:	2209      	movs	r2, #9
90004626:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004628:	687b      	ldr	r3, [r7, #4]
9000462a:	681b      	ldr	r3, [r3, #0]
9000462c:	78fa      	ldrb	r2, [r7, #3]
9000462e:	4611      	mov	r1, r2
90004630:	4618      	mov	r0, r3
90004632:	f005 faa9 	bl	90009b88 <USB_HC_Halt>
90004636:	e024      	b.n	90004682 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004638:	687b      	ldr	r3, [r7, #4]
9000463a:	681b      	ldr	r3, [r3, #0]
9000463c:	78fa      	ldrb	r2, [r7, #3]
9000463e:	4611      	mov	r1, r2
90004640:	4618      	mov	r0, r3
90004642:	f005 fa24 	bl	90009a8e <USB_ReadChInterrupts>
90004646:	4603      	mov	r3, r0
90004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000464c:	2b80      	cmp	r3, #128	; 0x80
9000464e:	d118      	bne.n	90004682 <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90004650:	78fb      	ldrb	r3, [r7, #3]
90004652:	015a      	lsls	r2, r3, #5
90004654:	693b      	ldr	r3, [r7, #16]
90004656:	4413      	add	r3, r2
90004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000465c:	461a      	mov	r2, r3
9000465e:	2380      	movs	r3, #128	; 0x80
90004660:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004662:	78fb      	ldrb	r3, [r7, #3]
90004664:	687a      	ldr	r2, [r7, #4]
90004666:	212c      	movs	r1, #44	; 0x2c
90004668:	fb01 f303 	mul.w	r3, r1, r3
9000466c:	4413      	add	r3, r2
9000466e:	3361      	adds	r3, #97	; 0x61
90004670:	2207      	movs	r2, #7
90004672:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004674:	687b      	ldr	r3, [r7, #4]
90004676:	681b      	ldr	r3, [r3, #0]
90004678:	78fa      	ldrb	r2, [r7, #3]
9000467a:	4611      	mov	r1, r2
9000467c:	4618      	mov	r0, r3
9000467e:	f005 fa83 	bl	90009b88 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004682:	687b      	ldr	r3, [r7, #4]
90004684:	681b      	ldr	r3, [r3, #0]
90004686:	78fa      	ldrb	r2, [r7, #3]
90004688:	4611      	mov	r1, r2
9000468a:	4618      	mov	r0, r3
9000468c:	f005 f9ff 	bl	90009a8e <USB_ReadChInterrupts>
90004690:	4603      	mov	r3, r0
90004692:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000469a:	d111      	bne.n	900046c0 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000469c:	687b      	ldr	r3, [r7, #4]
9000469e:	681b      	ldr	r3, [r3, #0]
900046a0:	78fa      	ldrb	r2, [r7, #3]
900046a2:	4611      	mov	r1, r2
900046a4:	4618      	mov	r0, r3
900046a6:	f005 fa6f 	bl	90009b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
900046aa:	78fb      	ldrb	r3, [r7, #3]
900046ac:	015a      	lsls	r2, r3, #5
900046ae:	693b      	ldr	r3, [r7, #16]
900046b0:	4413      	add	r3, r2
900046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900046b6:	461a      	mov	r2, r3
900046b8:	f44f 7300 	mov.w	r3, #512	; 0x200
900046bc:	6093      	str	r3, [r2, #8]
900046be:	e322      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900046c0:	687b      	ldr	r3, [r7, #4]
900046c2:	681b      	ldr	r3, [r3, #0]
900046c4:	78fa      	ldrb	r2, [r7, #3]
900046c6:	4611      	mov	r1, r2
900046c8:	4618      	mov	r0, r3
900046ca:	f005 f9e0 	bl	90009a8e <USB_ReadChInterrupts>
900046ce:	4603      	mov	r3, r0
900046d0:	f003 0301 	and.w	r3, r3, #1
900046d4:	2b01      	cmp	r3, #1
900046d6:	f040 80f0 	bne.w	900048ba <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900046da:	78fb      	ldrb	r3, [r7, #3]
900046dc:	015a      	lsls	r2, r3, #5
900046de:	693b      	ldr	r3, [r7, #16]
900046e0:	4413      	add	r3, r2
900046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900046e6:	461a      	mov	r2, r3
900046e8:	2320      	movs	r3, #32
900046ea:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
900046ec:	687b      	ldr	r3, [r7, #4]
900046ee:	68db      	ldr	r3, [r3, #12]
900046f0:	2b00      	cmp	r3, #0
900046f2:	d019      	beq.n	90004728 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900046f4:	78fb      	ldrb	r3, [r7, #3]
900046f6:	687a      	ldr	r2, [r7, #4]
900046f8:	212c      	movs	r1, #44	; 0x2c
900046fa:	fb01 f303 	mul.w	r3, r1, r3
900046fe:	4413      	add	r3, r2
90004700:	3348      	adds	r3, #72	; 0x48
90004702:	6819      	ldr	r1, [r3, #0]
90004704:	78fb      	ldrb	r3, [r7, #3]
90004706:	015a      	lsls	r2, r3, #5
90004708:	693b      	ldr	r3, [r7, #16]
9000470a:	4413      	add	r3, r2
9000470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004710:	691b      	ldr	r3, [r3, #16]
90004712:	f3c3 0212 	ubfx	r2, r3, #0, #19
90004716:	78fb      	ldrb	r3, [r7, #3]
90004718:	1a8a      	subs	r2, r1, r2
9000471a:	6879      	ldr	r1, [r7, #4]
9000471c:	202c      	movs	r0, #44	; 0x2c
9000471e:	fb00 f303 	mul.w	r3, r0, r3
90004722:	440b      	add	r3, r1
90004724:	3350      	adds	r3, #80	; 0x50
90004726:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004728:	78fb      	ldrb	r3, [r7, #3]
9000472a:	687a      	ldr	r2, [r7, #4]
9000472c:	212c      	movs	r1, #44	; 0x2c
9000472e:	fb01 f303 	mul.w	r3, r1, r3
90004732:	4413      	add	r3, r2
90004734:	3361      	adds	r3, #97	; 0x61
90004736:	2201      	movs	r2, #1
90004738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
9000473a:	78fb      	ldrb	r3, [r7, #3]
9000473c:	687a      	ldr	r2, [r7, #4]
9000473e:	212c      	movs	r1, #44	; 0x2c
90004740:	fb01 f303 	mul.w	r3, r1, r3
90004744:	4413      	add	r3, r2
90004746:	335c      	adds	r3, #92	; 0x5c
90004748:	2200      	movs	r2, #0
9000474a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000474c:	78fb      	ldrb	r3, [r7, #3]
9000474e:	015a      	lsls	r2, r3, #5
90004750:	693b      	ldr	r3, [r7, #16]
90004752:	4413      	add	r3, r2
90004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004758:	461a      	mov	r2, r3
9000475a:	2301      	movs	r3, #1
9000475c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000475e:	78fb      	ldrb	r3, [r7, #3]
90004760:	687a      	ldr	r2, [r7, #4]
90004762:	212c      	movs	r1, #44	; 0x2c
90004764:	fb01 f303 	mul.w	r3, r1, r3
90004768:	4413      	add	r3, r2
9000476a:	333f      	adds	r3, #63	; 0x3f
9000476c:	781b      	ldrb	r3, [r3, #0]
9000476e:	2b00      	cmp	r3, #0
90004770:	d009      	beq.n	90004786 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004772:	78fb      	ldrb	r3, [r7, #3]
90004774:	687a      	ldr	r2, [r7, #4]
90004776:	212c      	movs	r1, #44	; 0x2c
90004778:	fb01 f303 	mul.w	r3, r1, r3
9000477c:	4413      	add	r3, r2
9000477e:	333f      	adds	r3, #63	; 0x3f
90004780:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004782:	2b02      	cmp	r3, #2
90004784:	d110      	bne.n	900047a8 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004786:	687b      	ldr	r3, [r7, #4]
90004788:	681b      	ldr	r3, [r3, #0]
9000478a:	78fa      	ldrb	r2, [r7, #3]
9000478c:	4611      	mov	r1, r2
9000478e:	4618      	mov	r0, r3
90004790:	f005 f9fa 	bl	90009b88 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004794:	78fb      	ldrb	r3, [r7, #3]
90004796:	015a      	lsls	r2, r3, #5
90004798:	693b      	ldr	r3, [r7, #16]
9000479a:	4413      	add	r3, r2
9000479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900047a0:	461a      	mov	r2, r3
900047a2:	2310      	movs	r3, #16
900047a4:	6093      	str	r3, [r2, #8]
900047a6:	e039      	b.n	9000481c <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900047a8:	78fb      	ldrb	r3, [r7, #3]
900047aa:	687a      	ldr	r2, [r7, #4]
900047ac:	212c      	movs	r1, #44	; 0x2c
900047ae:	fb01 f303 	mul.w	r3, r1, r3
900047b2:	4413      	add	r3, r2
900047b4:	333f      	adds	r3, #63	; 0x3f
900047b6:	781b      	ldrb	r3, [r3, #0]
900047b8:	2b03      	cmp	r3, #3
900047ba:	d009      	beq.n	900047d0 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900047bc:	78fb      	ldrb	r3, [r7, #3]
900047be:	687a      	ldr	r2, [r7, #4]
900047c0:	212c      	movs	r1, #44	; 0x2c
900047c2:	fb01 f303 	mul.w	r3, r1, r3
900047c6:	4413      	add	r3, r2
900047c8:	333f      	adds	r3, #63	; 0x3f
900047ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900047cc:	2b01      	cmp	r3, #1
900047ce:	d125      	bne.n	9000481c <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900047d0:	78fb      	ldrb	r3, [r7, #3]
900047d2:	015a      	lsls	r2, r3, #5
900047d4:	693b      	ldr	r3, [r7, #16]
900047d6:	4413      	add	r3, r2
900047d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900047dc:	681b      	ldr	r3, [r3, #0]
900047de:	78fa      	ldrb	r2, [r7, #3]
900047e0:	0151      	lsls	r1, r2, #5
900047e2:	693a      	ldr	r2, [r7, #16]
900047e4:	440a      	add	r2, r1
900047e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
900047ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900047ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900047f0:	78fb      	ldrb	r3, [r7, #3]
900047f2:	687a      	ldr	r2, [r7, #4]
900047f4:	212c      	movs	r1, #44	; 0x2c
900047f6:	fb01 f303 	mul.w	r3, r1, r3
900047fa:	4413      	add	r3, r2
900047fc:	3360      	adds	r3, #96	; 0x60
900047fe:	2201      	movs	r2, #1
90004800:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004802:	78fb      	ldrb	r3, [r7, #3]
90004804:	687a      	ldr	r2, [r7, #4]
90004806:	212c      	movs	r1, #44	; 0x2c
90004808:	fb01 f303 	mul.w	r3, r1, r3
9000480c:	4413      	add	r3, r2
9000480e:	3360      	adds	r3, #96	; 0x60
90004810:	781a      	ldrb	r2, [r3, #0]
90004812:	78fb      	ldrb	r3, [r7, #3]
90004814:	4619      	mov	r1, r3
90004816:	6878      	ldr	r0, [r7, #4]
90004818:	f7fc f932 	bl	90000a80 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000481c:	687b      	ldr	r3, [r7, #4]
9000481e:	68db      	ldr	r3, [r3, #12]
90004820:	2b01      	cmp	r3, #1
90004822:	d135      	bne.n	90004890 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004824:	78fb      	ldrb	r3, [r7, #3]
90004826:	687a      	ldr	r2, [r7, #4]
90004828:	212c      	movs	r1, #44	; 0x2c
9000482a:	fb01 f303 	mul.w	r3, r1, r3
9000482e:	4413      	add	r3, r2
90004830:	3350      	adds	r3, #80	; 0x50
90004832:	681b      	ldr	r3, [r3, #0]
90004834:	78fa      	ldrb	r2, [r7, #3]
90004836:	6879      	ldr	r1, [r7, #4]
90004838:	202c      	movs	r0, #44	; 0x2c
9000483a:	fb00 f202 	mul.w	r2, r0, r2
9000483e:	440a      	add	r2, r1
90004840:	3240      	adds	r2, #64	; 0x40
90004842:	8812      	ldrh	r2, [r2, #0]
90004844:	4413      	add	r3, r2
90004846:	3b01      	subs	r3, #1
90004848:	78fa      	ldrb	r2, [r7, #3]
9000484a:	6879      	ldr	r1, [r7, #4]
9000484c:	202c      	movs	r0, #44	; 0x2c
9000484e:	fb00 f202 	mul.w	r2, r0, r2
90004852:	440a      	add	r2, r1
90004854:	3240      	adds	r2, #64	; 0x40
90004856:	8812      	ldrh	r2, [r2, #0]
90004858:	fbb3 f3f2 	udiv	r3, r3, r2
9000485c:	f003 0301 	and.w	r3, r3, #1
90004860:	2b00      	cmp	r3, #0
90004862:	f000 8250 	beq.w	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004866:	78fb      	ldrb	r3, [r7, #3]
90004868:	687a      	ldr	r2, [r7, #4]
9000486a:	212c      	movs	r1, #44	; 0x2c
9000486c:	fb01 f303 	mul.w	r3, r1, r3
90004870:	4413      	add	r3, r2
90004872:	3354      	adds	r3, #84	; 0x54
90004874:	781a      	ldrb	r2, [r3, #0]
90004876:	78fb      	ldrb	r3, [r7, #3]
90004878:	f082 0201 	eor.w	r2, r2, #1
9000487c:	b2d0      	uxtb	r0, r2
9000487e:	687a      	ldr	r2, [r7, #4]
90004880:	212c      	movs	r1, #44	; 0x2c
90004882:	fb01 f303 	mul.w	r3, r1, r3
90004886:	4413      	add	r3, r2
90004888:	3354      	adds	r3, #84	; 0x54
9000488a:	4602      	mov	r2, r0
9000488c:	701a      	strb	r2, [r3, #0]
9000488e:	e23a      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004890:	78fb      	ldrb	r3, [r7, #3]
90004892:	687a      	ldr	r2, [r7, #4]
90004894:	212c      	movs	r1, #44	; 0x2c
90004896:	fb01 f303 	mul.w	r3, r1, r3
9000489a:	4413      	add	r3, r2
9000489c:	3354      	adds	r3, #84	; 0x54
9000489e:	781a      	ldrb	r2, [r3, #0]
900048a0:	78fb      	ldrb	r3, [r7, #3]
900048a2:	f082 0201 	eor.w	r2, r2, #1
900048a6:	b2d0      	uxtb	r0, r2
900048a8:	687a      	ldr	r2, [r7, #4]
900048aa:	212c      	movs	r1, #44	; 0x2c
900048ac:	fb01 f303 	mul.w	r3, r1, r3
900048b0:	4413      	add	r3, r2
900048b2:	3354      	adds	r3, #84	; 0x54
900048b4:	4602      	mov	r2, r0
900048b6:	701a      	strb	r2, [r3, #0]
900048b8:	e225      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900048ba:	687b      	ldr	r3, [r7, #4]
900048bc:	681b      	ldr	r3, [r3, #0]
900048be:	78fa      	ldrb	r2, [r7, #3]
900048c0:	4611      	mov	r1, r2
900048c2:	4618      	mov	r0, r3
900048c4:	f005 f8e3 	bl	90009a8e <USB_ReadChInterrupts>
900048c8:	4603      	mov	r3, r0
900048ca:	f003 0320 	and.w	r3, r3, #32
900048ce:	2b20      	cmp	r3, #32
900048d0:	d109      	bne.n	900048e6 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900048d2:	78fb      	ldrb	r3, [r7, #3]
900048d4:	015a      	lsls	r2, r3, #5
900048d6:	693b      	ldr	r3, [r7, #16]
900048d8:	4413      	add	r3, r2
900048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900048de:	461a      	mov	r2, r3
900048e0:	2320      	movs	r3, #32
900048e2:	6093      	str	r3, [r2, #8]
900048e4:	e20f      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900048e6:	687b      	ldr	r3, [r7, #4]
900048e8:	681b      	ldr	r3, [r3, #0]
900048ea:	78fa      	ldrb	r2, [r7, #3]
900048ec:	4611      	mov	r1, r2
900048ee:	4618      	mov	r0, r3
900048f0:	f005 f8cd 	bl	90009a8e <USB_ReadChInterrupts>
900048f4:	4603      	mov	r3, r0
900048f6:	f003 0302 	and.w	r3, r3, #2
900048fa:	2b02      	cmp	r3, #2
900048fc:	f040 8168 	bne.w	90004bd0 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90004900:	78fb      	ldrb	r3, [r7, #3]
90004902:	015a      	lsls	r2, r3, #5
90004904:	693b      	ldr	r3, [r7, #16]
90004906:	4413      	add	r3, r2
90004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000490c:	461a      	mov	r2, r3
9000490e:	2302      	movs	r3, #2
90004910:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
90004912:	78fb      	ldrb	r3, [r7, #3]
90004914:	687a      	ldr	r2, [r7, #4]
90004916:	212c      	movs	r1, #44	; 0x2c
90004918:	fb01 f303 	mul.w	r3, r1, r3
9000491c:	4413      	add	r3, r2
9000491e:	3361      	adds	r3, #97	; 0x61
90004920:	781b      	ldrb	r3, [r3, #0]
90004922:	2b01      	cmp	r3, #1
90004924:	d112      	bne.n	9000494c <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004926:	78fb      	ldrb	r3, [r7, #3]
90004928:	687a      	ldr	r2, [r7, #4]
9000492a:	212c      	movs	r1, #44	; 0x2c
9000492c:	fb01 f303 	mul.w	r3, r1, r3
90004930:	4413      	add	r3, r2
90004932:	3361      	adds	r3, #97	; 0x61
90004934:	2202      	movs	r2, #2
90004936:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004938:	78fb      	ldrb	r3, [r7, #3]
9000493a:	687a      	ldr	r2, [r7, #4]
9000493c:	212c      	movs	r1, #44	; 0x2c
9000493e:	fb01 f303 	mul.w	r3, r1, r3
90004942:	4413      	add	r3, r2
90004944:	3360      	adds	r3, #96	; 0x60
90004946:	2201      	movs	r2, #1
90004948:	701a      	strb	r2, [r3, #0]
9000494a:	e133      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000494c:	78fb      	ldrb	r3, [r7, #3]
9000494e:	687a      	ldr	r2, [r7, #4]
90004950:	212c      	movs	r1, #44	; 0x2c
90004952:	fb01 f303 	mul.w	r3, r1, r3
90004956:	4413      	add	r3, r2
90004958:	3361      	adds	r3, #97	; 0x61
9000495a:	781b      	ldrb	r3, [r3, #0]
9000495c:	2b06      	cmp	r3, #6
9000495e:	d112      	bne.n	90004986 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004960:	78fb      	ldrb	r3, [r7, #3]
90004962:	687a      	ldr	r2, [r7, #4]
90004964:	212c      	movs	r1, #44	; 0x2c
90004966:	fb01 f303 	mul.w	r3, r1, r3
9000496a:	4413      	add	r3, r2
9000496c:	3361      	adds	r3, #97	; 0x61
9000496e:	2202      	movs	r2, #2
90004970:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
90004972:	78fb      	ldrb	r3, [r7, #3]
90004974:	687a      	ldr	r2, [r7, #4]
90004976:	212c      	movs	r1, #44	; 0x2c
90004978:	fb01 f303 	mul.w	r3, r1, r3
9000497c:	4413      	add	r3, r2
9000497e:	3360      	adds	r3, #96	; 0x60
90004980:	2205      	movs	r2, #5
90004982:	701a      	strb	r2, [r3, #0]
90004984:	e116      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004986:	78fb      	ldrb	r3, [r7, #3]
90004988:	687a      	ldr	r2, [r7, #4]
9000498a:	212c      	movs	r1, #44	; 0x2c
9000498c:	fb01 f303 	mul.w	r3, r1, r3
90004990:	4413      	add	r3, r2
90004992:	3361      	adds	r3, #97	; 0x61
90004994:	781b      	ldrb	r3, [r3, #0]
90004996:	2b07      	cmp	r3, #7
90004998:	d009      	beq.n	900049ae <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000499a:	78fb      	ldrb	r3, [r7, #3]
9000499c:	687a      	ldr	r2, [r7, #4]
9000499e:	212c      	movs	r1, #44	; 0x2c
900049a0:	fb01 f303 	mul.w	r3, r1, r3
900049a4:	4413      	add	r3, r2
900049a6:	3361      	adds	r3, #97	; 0x61
900049a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
900049aa:	2b09      	cmp	r3, #9
900049ac:	d158      	bne.n	90004a60 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900049ae:	78fb      	ldrb	r3, [r7, #3]
900049b0:	687a      	ldr	r2, [r7, #4]
900049b2:	212c      	movs	r1, #44	; 0x2c
900049b4:	fb01 f303 	mul.w	r3, r1, r3
900049b8:	4413      	add	r3, r2
900049ba:	3361      	adds	r3, #97	; 0x61
900049bc:	2202      	movs	r2, #2
900049be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900049c0:	78fb      	ldrb	r3, [r7, #3]
900049c2:	6879      	ldr	r1, [r7, #4]
900049c4:	222c      	movs	r2, #44	; 0x2c
900049c6:	fb03 f202 	mul.w	r2, r3, r2
900049ca:	440a      	add	r2, r1
900049cc:	325c      	adds	r2, #92	; 0x5c
900049ce:	6812      	ldr	r2, [r2, #0]
900049d0:	3201      	adds	r2, #1
900049d2:	6879      	ldr	r1, [r7, #4]
900049d4:	202c      	movs	r0, #44	; 0x2c
900049d6:	fb00 f303 	mul.w	r3, r0, r3
900049da:	440b      	add	r3, r1
900049dc:	335c      	adds	r3, #92	; 0x5c
900049de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900049e0:	78fb      	ldrb	r3, [r7, #3]
900049e2:	687a      	ldr	r2, [r7, #4]
900049e4:	212c      	movs	r1, #44	; 0x2c
900049e6:	fb01 f303 	mul.w	r3, r1, r3
900049ea:	4413      	add	r3, r2
900049ec:	335c      	adds	r3, #92	; 0x5c
900049ee:	681b      	ldr	r3, [r3, #0]
900049f0:	2b02      	cmp	r3, #2
900049f2:	d912      	bls.n	90004a1a <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900049f4:	78fb      	ldrb	r3, [r7, #3]
900049f6:	687a      	ldr	r2, [r7, #4]
900049f8:	212c      	movs	r1, #44	; 0x2c
900049fa:	fb01 f303 	mul.w	r3, r1, r3
900049fe:	4413      	add	r3, r2
90004a00:	335c      	adds	r3, #92	; 0x5c
90004a02:	2200      	movs	r2, #0
90004a04:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90004a06:	78fb      	ldrb	r3, [r7, #3]
90004a08:	687a      	ldr	r2, [r7, #4]
90004a0a:	212c      	movs	r1, #44	; 0x2c
90004a0c:	fb01 f303 	mul.w	r3, r1, r3
90004a10:	4413      	add	r3, r2
90004a12:	3360      	adds	r3, #96	; 0x60
90004a14:	2204      	movs	r2, #4
90004a16:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004a18:	e0cc      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a1a:	78fb      	ldrb	r3, [r7, #3]
90004a1c:	687a      	ldr	r2, [r7, #4]
90004a1e:	212c      	movs	r1, #44	; 0x2c
90004a20:	fb01 f303 	mul.w	r3, r1, r3
90004a24:	4413      	add	r3, r2
90004a26:	3360      	adds	r3, #96	; 0x60
90004a28:	2202      	movs	r2, #2
90004a2a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004a2c:	78fb      	ldrb	r3, [r7, #3]
90004a2e:	015a      	lsls	r2, r3, #5
90004a30:	693b      	ldr	r3, [r7, #16]
90004a32:	4413      	add	r3, r2
90004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004a38:	681b      	ldr	r3, [r3, #0]
90004a3a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a3c:	68fb      	ldr	r3, [r7, #12]
90004a3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
90004a42:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a44:	68fb      	ldr	r3, [r7, #12]
90004a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90004a4a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004a4c:	78fb      	ldrb	r3, [r7, #3]
90004a4e:	015a      	lsls	r2, r3, #5
90004a50:	693b      	ldr	r3, [r7, #16]
90004a52:	4413      	add	r3, r2
90004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004a58:	461a      	mov	r2, r3
90004a5a:	68fb      	ldr	r3, [r7, #12]
90004a5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004a5e:	e0a9      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004a60:	78fb      	ldrb	r3, [r7, #3]
90004a62:	687a      	ldr	r2, [r7, #4]
90004a64:	212c      	movs	r1, #44	; 0x2c
90004a66:	fb01 f303 	mul.w	r3, r1, r3
90004a6a:	4413      	add	r3, r2
90004a6c:	3361      	adds	r3, #97	; 0x61
90004a6e:	781b      	ldrb	r3, [r3, #0]
90004a70:	2b05      	cmp	r3, #5
90004a72:	d109      	bne.n	90004a88 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a74:	78fb      	ldrb	r3, [r7, #3]
90004a76:	687a      	ldr	r2, [r7, #4]
90004a78:	212c      	movs	r1, #44	; 0x2c
90004a7a:	fb01 f303 	mul.w	r3, r1, r3
90004a7e:	4413      	add	r3, r2
90004a80:	3361      	adds	r3, #97	; 0x61
90004a82:	2202      	movs	r2, #2
90004a84:	701a      	strb	r2, [r3, #0]
90004a86:	e095      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004a88:	78fb      	ldrb	r3, [r7, #3]
90004a8a:	687a      	ldr	r2, [r7, #4]
90004a8c:	212c      	movs	r1, #44	; 0x2c
90004a8e:	fb01 f303 	mul.w	r3, r1, r3
90004a92:	4413      	add	r3, r2
90004a94:	3361      	adds	r3, #97	; 0x61
90004a96:	781b      	ldrb	r3, [r3, #0]
90004a98:	2b03      	cmp	r3, #3
90004a9a:	d109      	bne.n	90004ab0 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a9c:	78fb      	ldrb	r3, [r7, #3]
90004a9e:	687a      	ldr	r2, [r7, #4]
90004aa0:	212c      	movs	r1, #44	; 0x2c
90004aa2:	fb01 f303 	mul.w	r3, r1, r3
90004aa6:	4413      	add	r3, r2
90004aa8:	3361      	adds	r3, #97	; 0x61
90004aaa:	2202      	movs	r2, #2
90004aac:	701a      	strb	r2, [r3, #0]
90004aae:	e081      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004ab0:	78fb      	ldrb	r3, [r7, #3]
90004ab2:	687a      	ldr	r2, [r7, #4]
90004ab4:	212c      	movs	r1, #44	; 0x2c
90004ab6:	fb01 f303 	mul.w	r3, r1, r3
90004aba:	4413      	add	r3, r2
90004abc:	3361      	adds	r3, #97	; 0x61
90004abe:	781b      	ldrb	r3, [r3, #0]
90004ac0:	2b04      	cmp	r3, #4
90004ac2:	d13f      	bne.n	90004b44 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ac4:	78fb      	ldrb	r3, [r7, #3]
90004ac6:	687a      	ldr	r2, [r7, #4]
90004ac8:	212c      	movs	r1, #44	; 0x2c
90004aca:	fb01 f303 	mul.w	r3, r1, r3
90004ace:	4413      	add	r3, r2
90004ad0:	3361      	adds	r3, #97	; 0x61
90004ad2:	2202      	movs	r2, #2
90004ad4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004ad6:	78fb      	ldrb	r3, [r7, #3]
90004ad8:	687a      	ldr	r2, [r7, #4]
90004ada:	212c      	movs	r1, #44	; 0x2c
90004adc:	fb01 f303 	mul.w	r3, r1, r3
90004ae0:	4413      	add	r3, r2
90004ae2:	3360      	adds	r3, #96	; 0x60
90004ae4:	2202      	movs	r2, #2
90004ae6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ae8:	78fb      	ldrb	r3, [r7, #3]
90004aea:	687a      	ldr	r2, [r7, #4]
90004aec:	212c      	movs	r1, #44	; 0x2c
90004aee:	fb01 f303 	mul.w	r3, r1, r3
90004af2:	4413      	add	r3, r2
90004af4:	333f      	adds	r3, #63	; 0x3f
90004af6:	781b      	ldrb	r3, [r3, #0]
90004af8:	2b00      	cmp	r3, #0
90004afa:	d009      	beq.n	90004b10 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004afc:	78fb      	ldrb	r3, [r7, #3]
90004afe:	687a      	ldr	r2, [r7, #4]
90004b00:	212c      	movs	r1, #44	; 0x2c
90004b02:	fb01 f303 	mul.w	r3, r1, r3
90004b06:	4413      	add	r3, r2
90004b08:	333f      	adds	r3, #63	; 0x3f
90004b0a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004b0c:	2b02      	cmp	r3, #2
90004b0e:	d151      	bne.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004b10:	78fb      	ldrb	r3, [r7, #3]
90004b12:	015a      	lsls	r2, r3, #5
90004b14:	693b      	ldr	r3, [r7, #16]
90004b16:	4413      	add	r3, r2
90004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004b1c:	681b      	ldr	r3, [r3, #0]
90004b1e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b20:	68fb      	ldr	r3, [r7, #12]
90004b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
90004b26:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b28:	68fb      	ldr	r3, [r7, #12]
90004b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90004b2e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004b30:	78fb      	ldrb	r3, [r7, #3]
90004b32:	015a      	lsls	r2, r3, #5
90004b34:	693b      	ldr	r3, [r7, #16]
90004b36:	4413      	add	r3, r2
90004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004b3c:	461a      	mov	r2, r3
90004b3e:	68fb      	ldr	r3, [r7, #12]
90004b40:	6013      	str	r3, [r2, #0]
90004b42:	e037      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004b44:	78fb      	ldrb	r3, [r7, #3]
90004b46:	687a      	ldr	r2, [r7, #4]
90004b48:	212c      	movs	r1, #44	; 0x2c
90004b4a:	fb01 f303 	mul.w	r3, r1, r3
90004b4e:	4413      	add	r3, r2
90004b50:	3361      	adds	r3, #97	; 0x61
90004b52:	781b      	ldrb	r3, [r3, #0]
90004b54:	2b08      	cmp	r3, #8
90004b56:	d122      	bne.n	90004b9e <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b58:	78fb      	ldrb	r3, [r7, #3]
90004b5a:	687a      	ldr	r2, [r7, #4]
90004b5c:	212c      	movs	r1, #44	; 0x2c
90004b5e:	fb01 f303 	mul.w	r3, r1, r3
90004b62:	4413      	add	r3, r2
90004b64:	3361      	adds	r3, #97	; 0x61
90004b66:	2202      	movs	r2, #2
90004b68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004b6a:	78fb      	ldrb	r3, [r7, #3]
90004b6c:	6879      	ldr	r1, [r7, #4]
90004b6e:	222c      	movs	r2, #44	; 0x2c
90004b70:	fb03 f202 	mul.w	r2, r3, r2
90004b74:	440a      	add	r2, r1
90004b76:	325c      	adds	r2, #92	; 0x5c
90004b78:	6812      	ldr	r2, [r2, #0]
90004b7a:	3201      	adds	r2, #1
90004b7c:	6879      	ldr	r1, [r7, #4]
90004b7e:	202c      	movs	r0, #44	; 0x2c
90004b80:	fb00 f303 	mul.w	r3, r0, r3
90004b84:	440b      	add	r3, r1
90004b86:	335c      	adds	r3, #92	; 0x5c
90004b88:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004b8a:	78fb      	ldrb	r3, [r7, #3]
90004b8c:	687a      	ldr	r2, [r7, #4]
90004b8e:	212c      	movs	r1, #44	; 0x2c
90004b90:	fb01 f303 	mul.w	r3, r1, r3
90004b94:	4413      	add	r3, r2
90004b96:	3360      	adds	r3, #96	; 0x60
90004b98:	2204      	movs	r2, #4
90004b9a:	701a      	strb	r2, [r3, #0]
90004b9c:	e00a      	b.n	90004bb4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004b9e:	78fb      	ldrb	r3, [r7, #3]
90004ba0:	687a      	ldr	r2, [r7, #4]
90004ba2:	212c      	movs	r1, #44	; 0x2c
90004ba4:	fb01 f303 	mul.w	r3, r1, r3
90004ba8:	4413      	add	r3, r2
90004baa:	3361      	adds	r3, #97	; 0x61
90004bac:	781b      	ldrb	r3, [r3, #0]
90004bae:	2b02      	cmp	r3, #2
90004bb0:	f000 80a8 	beq.w	90004d04 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004bb4:	78fb      	ldrb	r3, [r7, #3]
90004bb6:	687a      	ldr	r2, [r7, #4]
90004bb8:	212c      	movs	r1, #44	; 0x2c
90004bba:	fb01 f303 	mul.w	r3, r1, r3
90004bbe:	4413      	add	r3, r2
90004bc0:	3360      	adds	r3, #96	; 0x60
90004bc2:	781a      	ldrb	r2, [r3, #0]
90004bc4:	78fb      	ldrb	r3, [r7, #3]
90004bc6:	4619      	mov	r1, r3
90004bc8:	6878      	ldr	r0, [r7, #4]
90004bca:	f7fb ff59 	bl	90000a80 <HAL_HCD_HC_NotifyURBChange_Callback>
90004bce:	e09a      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004bd0:	687b      	ldr	r3, [r7, #4]
90004bd2:	681b      	ldr	r3, [r3, #0]
90004bd4:	78fa      	ldrb	r2, [r7, #3]
90004bd6:	4611      	mov	r1, r2
90004bd8:	4618      	mov	r0, r3
90004bda:	f004 ff58 	bl	90009a8e <USB_ReadChInterrupts>
90004bde:	4603      	mov	r3, r0
90004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004be4:	2b40      	cmp	r3, #64	; 0x40
90004be6:	d122      	bne.n	90004c2e <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004be8:	78fb      	ldrb	r3, [r7, #3]
90004bea:	015a      	lsls	r2, r3, #5
90004bec:	693b      	ldr	r3, [r7, #16]
90004bee:	4413      	add	r3, r2
90004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004bf4:	461a      	mov	r2, r3
90004bf6:	2340      	movs	r3, #64	; 0x40
90004bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004bfa:	78fb      	ldrb	r3, [r7, #3]
90004bfc:	687a      	ldr	r2, [r7, #4]
90004bfe:	212c      	movs	r1, #44	; 0x2c
90004c00:	fb01 f303 	mul.w	r3, r1, r3
90004c04:	4413      	add	r3, r2
90004c06:	3361      	adds	r3, #97	; 0x61
90004c08:	2205      	movs	r2, #5
90004c0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004c0c:	78fb      	ldrb	r3, [r7, #3]
90004c0e:	687a      	ldr	r2, [r7, #4]
90004c10:	212c      	movs	r1, #44	; 0x2c
90004c12:	fb01 f303 	mul.w	r3, r1, r3
90004c16:	4413      	add	r3, r2
90004c18:	335c      	adds	r3, #92	; 0x5c
90004c1a:	2200      	movs	r2, #0
90004c1c:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c1e:	687b      	ldr	r3, [r7, #4]
90004c20:	681b      	ldr	r3, [r3, #0]
90004c22:	78fa      	ldrb	r2, [r7, #3]
90004c24:	4611      	mov	r1, r2
90004c26:	4618      	mov	r0, r3
90004c28:	f004 ffae 	bl	90009b88 <USB_HC_Halt>
90004c2c:	e06b      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004c2e:	687b      	ldr	r3, [r7, #4]
90004c30:	681b      	ldr	r3, [r3, #0]
90004c32:	78fa      	ldrb	r2, [r7, #3]
90004c34:	4611      	mov	r1, r2
90004c36:	4618      	mov	r0, r3
90004c38:	f004 ff29 	bl	90009a8e <USB_ReadChInterrupts>
90004c3c:	4603      	mov	r3, r0
90004c3e:	f003 0310 	and.w	r3, r3, #16
90004c42:	2b10      	cmp	r3, #16
90004c44:	d15f      	bne.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004c46:	78fb      	ldrb	r3, [r7, #3]
90004c48:	687a      	ldr	r2, [r7, #4]
90004c4a:	212c      	movs	r1, #44	; 0x2c
90004c4c:	fb01 f303 	mul.w	r3, r1, r3
90004c50:	4413      	add	r3, r2
90004c52:	333f      	adds	r3, #63	; 0x3f
90004c54:	781b      	ldrb	r3, [r3, #0]
90004c56:	2b03      	cmp	r3, #3
90004c58:	d119      	bne.n	90004c8e <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c5a:	78fb      	ldrb	r3, [r7, #3]
90004c5c:	687a      	ldr	r2, [r7, #4]
90004c5e:	212c      	movs	r1, #44	; 0x2c
90004c60:	fb01 f303 	mul.w	r3, r1, r3
90004c64:	4413      	add	r3, r2
90004c66:	335c      	adds	r3, #92	; 0x5c
90004c68:	2200      	movs	r2, #0
90004c6a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004c6c:	78fb      	ldrb	r3, [r7, #3]
90004c6e:	687a      	ldr	r2, [r7, #4]
90004c70:	212c      	movs	r1, #44	; 0x2c
90004c72:	fb01 f303 	mul.w	r3, r1, r3
90004c76:	4413      	add	r3, r2
90004c78:	3361      	adds	r3, #97	; 0x61
90004c7a:	2204      	movs	r2, #4
90004c7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c7e:	687b      	ldr	r3, [r7, #4]
90004c80:	681b      	ldr	r3, [r3, #0]
90004c82:	78fa      	ldrb	r2, [r7, #3]
90004c84:	4611      	mov	r1, r2
90004c86:	4618      	mov	r0, r3
90004c88:	f004 ff7e 	bl	90009b88 <USB_HC_Halt>
90004c8c:	e030      	b.n	90004cf0 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c8e:	78fb      	ldrb	r3, [r7, #3]
90004c90:	687a      	ldr	r2, [r7, #4]
90004c92:	212c      	movs	r1, #44	; 0x2c
90004c94:	fb01 f303 	mul.w	r3, r1, r3
90004c98:	4413      	add	r3, r2
90004c9a:	333f      	adds	r3, #63	; 0x3f
90004c9c:	781b      	ldrb	r3, [r3, #0]
90004c9e:	2b00      	cmp	r3, #0
90004ca0:	d009      	beq.n	90004cb6 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004ca2:	78fb      	ldrb	r3, [r7, #3]
90004ca4:	687a      	ldr	r2, [r7, #4]
90004ca6:	212c      	movs	r1, #44	; 0x2c
90004ca8:	fb01 f303 	mul.w	r3, r1, r3
90004cac:	4413      	add	r3, r2
90004cae:	333f      	adds	r3, #63	; 0x3f
90004cb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004cb2:	2b02      	cmp	r3, #2
90004cb4:	d11c      	bne.n	90004cf0 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004cb6:	78fb      	ldrb	r3, [r7, #3]
90004cb8:	687a      	ldr	r2, [r7, #4]
90004cba:	212c      	movs	r1, #44	; 0x2c
90004cbc:	fb01 f303 	mul.w	r3, r1, r3
90004cc0:	4413      	add	r3, r2
90004cc2:	335c      	adds	r3, #92	; 0x5c
90004cc4:	2200      	movs	r2, #0
90004cc6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
90004cc8:	687b      	ldr	r3, [r7, #4]
90004cca:	68db      	ldr	r3, [r3, #12]
90004ccc:	2b00      	cmp	r3, #0
90004cce:	d10f      	bne.n	90004cf0 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004cd0:	78fb      	ldrb	r3, [r7, #3]
90004cd2:	687a      	ldr	r2, [r7, #4]
90004cd4:	212c      	movs	r1, #44	; 0x2c
90004cd6:	fb01 f303 	mul.w	r3, r1, r3
90004cda:	4413      	add	r3, r2
90004cdc:	3361      	adds	r3, #97	; 0x61
90004cde:	2204      	movs	r2, #4
90004ce0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ce2:	687b      	ldr	r3, [r7, #4]
90004ce4:	681b      	ldr	r3, [r3, #0]
90004ce6:	78fa      	ldrb	r2, [r7, #3]
90004ce8:	4611      	mov	r1, r2
90004cea:	4618      	mov	r0, r3
90004cec:	f004 ff4c 	bl	90009b88 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004cf0:	78fb      	ldrb	r3, [r7, #3]
90004cf2:	015a      	lsls	r2, r3, #5
90004cf4:	693b      	ldr	r3, [r7, #16]
90004cf6:	4413      	add	r3, r2
90004cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004cfc:	461a      	mov	r2, r3
90004cfe:	2310      	movs	r3, #16
90004d00:	6093      	str	r3, [r2, #8]
90004d02:	e000      	b.n	90004d06 <HCD_HC_IN_IRQHandler+0x81c>
        return;
90004d04:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004d06:	3718      	adds	r7, #24
90004d08:	46bd      	mov	sp, r7
90004d0a:	bd80      	pop	{r7, pc}

90004d0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004d0c:	b580      	push	{r7, lr}
90004d0e:	b086      	sub	sp, #24
90004d10:	af00      	add	r7, sp, #0
90004d12:	6078      	str	r0, [r7, #4]
90004d14:	460b      	mov	r3, r1
90004d16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004d18:	687b      	ldr	r3, [r7, #4]
90004d1a:	681b      	ldr	r3, [r3, #0]
90004d1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004d1e:	697b      	ldr	r3, [r7, #20]
90004d20:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004d22:	687b      	ldr	r3, [r7, #4]
90004d24:	681b      	ldr	r3, [r3, #0]
90004d26:	78fa      	ldrb	r2, [r7, #3]
90004d28:	4611      	mov	r1, r2
90004d2a:	4618      	mov	r0, r3
90004d2c:	f004 feaf 	bl	90009a8e <USB_ReadChInterrupts>
90004d30:	4603      	mov	r3, r0
90004d32:	f003 0304 	and.w	r3, r3, #4
90004d36:	2b04      	cmp	r3, #4
90004d38:	d119      	bne.n	90004d6e <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004d3a:	78fb      	ldrb	r3, [r7, #3]
90004d3c:	015a      	lsls	r2, r3, #5
90004d3e:	693b      	ldr	r3, [r7, #16]
90004d40:	4413      	add	r3, r2
90004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004d46:	461a      	mov	r2, r3
90004d48:	2304      	movs	r3, #4
90004d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004d4c:	78fb      	ldrb	r3, [r7, #3]
90004d4e:	687a      	ldr	r2, [r7, #4]
90004d50:	212c      	movs	r1, #44	; 0x2c
90004d52:	fb01 f303 	mul.w	r3, r1, r3
90004d56:	4413      	add	r3, r2
90004d58:	3361      	adds	r3, #97	; 0x61
90004d5a:	2207      	movs	r2, #7
90004d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d5e:	687b      	ldr	r3, [r7, #4]
90004d60:	681b      	ldr	r3, [r3, #0]
90004d62:	78fa      	ldrb	r2, [r7, #3]
90004d64:	4611      	mov	r1, r2
90004d66:	4618      	mov	r0, r3
90004d68:	f004 ff0e 	bl	90009b88 <USB_HC_Halt>
90004d6c:	e37d      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004d6e:	687b      	ldr	r3, [r7, #4]
90004d70:	681b      	ldr	r3, [r3, #0]
90004d72:	78fa      	ldrb	r2, [r7, #3]
90004d74:	4611      	mov	r1, r2
90004d76:	4618      	mov	r0, r3
90004d78:	f004 fe89 	bl	90009a8e <USB_ReadChInterrupts>
90004d7c:	4603      	mov	r3, r0
90004d7e:	f003 0320 	and.w	r3, r3, #32
90004d82:	2b20      	cmp	r3, #32
90004d84:	d136      	bne.n	90004df4 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004d86:	78fb      	ldrb	r3, [r7, #3]
90004d88:	015a      	lsls	r2, r3, #5
90004d8a:	693b      	ldr	r3, [r7, #16]
90004d8c:	4413      	add	r3, r2
90004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004d92:	461a      	mov	r2, r3
90004d94:	2320      	movs	r3, #32
90004d96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004d98:	78fb      	ldrb	r3, [r7, #3]
90004d9a:	687a      	ldr	r2, [r7, #4]
90004d9c:	212c      	movs	r1, #44	; 0x2c
90004d9e:	fb01 f303 	mul.w	r3, r1, r3
90004da2:	4413      	add	r3, r2
90004da4:	333d      	adds	r3, #61	; 0x3d
90004da6:	781b      	ldrb	r3, [r3, #0]
90004da8:	2b01      	cmp	r3, #1
90004daa:	f040 835e 	bne.w	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004dae:	78fb      	ldrb	r3, [r7, #3]
90004db0:	687a      	ldr	r2, [r7, #4]
90004db2:	212c      	movs	r1, #44	; 0x2c
90004db4:	fb01 f303 	mul.w	r3, r1, r3
90004db8:	4413      	add	r3, r2
90004dba:	333d      	adds	r3, #61	; 0x3d
90004dbc:	2200      	movs	r2, #0
90004dbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004dc0:	78fb      	ldrb	r3, [r7, #3]
90004dc2:	687a      	ldr	r2, [r7, #4]
90004dc4:	212c      	movs	r1, #44	; 0x2c
90004dc6:	fb01 f303 	mul.w	r3, r1, r3
90004dca:	4413      	add	r3, r2
90004dcc:	3360      	adds	r3, #96	; 0x60
90004dce:	2202      	movs	r2, #2
90004dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004dd2:	78fb      	ldrb	r3, [r7, #3]
90004dd4:	687a      	ldr	r2, [r7, #4]
90004dd6:	212c      	movs	r1, #44	; 0x2c
90004dd8:	fb01 f303 	mul.w	r3, r1, r3
90004ddc:	4413      	add	r3, r2
90004dde:	3361      	adds	r3, #97	; 0x61
90004de0:	2203      	movs	r2, #3
90004de2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004de4:	687b      	ldr	r3, [r7, #4]
90004de6:	681b      	ldr	r3, [r3, #0]
90004de8:	78fa      	ldrb	r2, [r7, #3]
90004dea:	4611      	mov	r1, r2
90004dec:	4618      	mov	r0, r3
90004dee:	f004 fecb 	bl	90009b88 <USB_HC_Halt>
90004df2:	e33a      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004df4:	687b      	ldr	r3, [r7, #4]
90004df6:	681b      	ldr	r3, [r3, #0]
90004df8:	78fa      	ldrb	r2, [r7, #3]
90004dfa:	4611      	mov	r1, r2
90004dfc:	4618      	mov	r0, r3
90004dfe:	f004 fe46 	bl	90009a8e <USB_ReadChInterrupts>
90004e02:	4603      	mov	r3, r0
90004e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90004e0c:	d111      	bne.n	90004e32 <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004e0e:	78fb      	ldrb	r3, [r7, #3]
90004e10:	015a      	lsls	r2, r3, #5
90004e12:	693b      	ldr	r3, [r7, #16]
90004e14:	4413      	add	r3, r2
90004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004e1a:	461a      	mov	r2, r3
90004e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
90004e20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e22:	687b      	ldr	r3, [r7, #4]
90004e24:	681b      	ldr	r3, [r3, #0]
90004e26:	78fa      	ldrb	r2, [r7, #3]
90004e28:	4611      	mov	r1, r2
90004e2a:	4618      	mov	r0, r3
90004e2c:	f004 feac 	bl	90009b88 <USB_HC_Halt>
90004e30:	e31b      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004e32:	687b      	ldr	r3, [r7, #4]
90004e34:	681b      	ldr	r3, [r3, #0]
90004e36:	78fa      	ldrb	r2, [r7, #3]
90004e38:	4611      	mov	r1, r2
90004e3a:	4618      	mov	r0, r3
90004e3c:	f004 fe27 	bl	90009a8e <USB_ReadChInterrupts>
90004e40:	4603      	mov	r3, r0
90004e42:	f003 0301 	and.w	r3, r3, #1
90004e46:	2b01      	cmp	r3, #1
90004e48:	d140      	bne.n	90004ecc <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004e4a:	78fb      	ldrb	r3, [r7, #3]
90004e4c:	687a      	ldr	r2, [r7, #4]
90004e4e:	212c      	movs	r1, #44	; 0x2c
90004e50:	fb01 f303 	mul.w	r3, r1, r3
90004e54:	4413      	add	r3, r2
90004e56:	335c      	adds	r3, #92	; 0x5c
90004e58:	2200      	movs	r2, #0
90004e5a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004e5c:	687b      	ldr	r3, [r7, #4]
90004e5e:	681b      	ldr	r3, [r3, #0]
90004e60:	78fa      	ldrb	r2, [r7, #3]
90004e62:	4611      	mov	r1, r2
90004e64:	4618      	mov	r0, r3
90004e66:	f004 fe12 	bl	90009a8e <USB_ReadChInterrupts>
90004e6a:	4603      	mov	r3, r0
90004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004e70:	2b40      	cmp	r3, #64	; 0x40
90004e72:	d111      	bne.n	90004e98 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004e74:	78fb      	ldrb	r3, [r7, #3]
90004e76:	687a      	ldr	r2, [r7, #4]
90004e78:	212c      	movs	r1, #44	; 0x2c
90004e7a:	fb01 f303 	mul.w	r3, r1, r3
90004e7e:	4413      	add	r3, r2
90004e80:	333d      	adds	r3, #61	; 0x3d
90004e82:	2201      	movs	r2, #1
90004e84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004e86:	78fb      	ldrb	r3, [r7, #3]
90004e88:	015a      	lsls	r2, r3, #5
90004e8a:	693b      	ldr	r3, [r7, #16]
90004e8c:	4413      	add	r3, r2
90004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004e92:	461a      	mov	r2, r3
90004e94:	2340      	movs	r3, #64	; 0x40
90004e96:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004e98:	78fb      	ldrb	r3, [r7, #3]
90004e9a:	015a      	lsls	r2, r3, #5
90004e9c:	693b      	ldr	r3, [r7, #16]
90004e9e:	4413      	add	r3, r2
90004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004ea4:	461a      	mov	r2, r3
90004ea6:	2301      	movs	r3, #1
90004ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90004eaa:	78fb      	ldrb	r3, [r7, #3]
90004eac:	687a      	ldr	r2, [r7, #4]
90004eae:	212c      	movs	r1, #44	; 0x2c
90004eb0:	fb01 f303 	mul.w	r3, r1, r3
90004eb4:	4413      	add	r3, r2
90004eb6:	3361      	adds	r3, #97	; 0x61
90004eb8:	2201      	movs	r2, #1
90004eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ebc:	687b      	ldr	r3, [r7, #4]
90004ebe:	681b      	ldr	r3, [r3, #0]
90004ec0:	78fa      	ldrb	r2, [r7, #3]
90004ec2:	4611      	mov	r1, r2
90004ec4:	4618      	mov	r0, r3
90004ec6:	f004 fe5f 	bl	90009b88 <USB_HC_Halt>
90004eca:	e2ce      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004ecc:	687b      	ldr	r3, [r7, #4]
90004ece:	681b      	ldr	r3, [r3, #0]
90004ed0:	78fa      	ldrb	r2, [r7, #3]
90004ed2:	4611      	mov	r1, r2
90004ed4:	4618      	mov	r0, r3
90004ed6:	f004 fdda 	bl	90009a8e <USB_ReadChInterrupts>
90004eda:	4603      	mov	r3, r0
90004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004ee0:	2b40      	cmp	r3, #64	; 0x40
90004ee2:	d12b      	bne.n	90004f3c <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
90004ee4:	78fb      	ldrb	r3, [r7, #3]
90004ee6:	687a      	ldr	r2, [r7, #4]
90004ee8:	212c      	movs	r1, #44	; 0x2c
90004eea:	fb01 f303 	mul.w	r3, r1, r3
90004eee:	4413      	add	r3, r2
90004ef0:	3361      	adds	r3, #97	; 0x61
90004ef2:	2205      	movs	r2, #5
90004ef4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
90004ef6:	78fb      	ldrb	r3, [r7, #3]
90004ef8:	687a      	ldr	r2, [r7, #4]
90004efa:	212c      	movs	r1, #44	; 0x2c
90004efc:	fb01 f303 	mul.w	r3, r1, r3
90004f00:	4413      	add	r3, r2
90004f02:	333d      	adds	r3, #61	; 0x3d
90004f04:	2201      	movs	r2, #1
90004f06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004f08:	78fb      	ldrb	r3, [r7, #3]
90004f0a:	687a      	ldr	r2, [r7, #4]
90004f0c:	212c      	movs	r1, #44	; 0x2c
90004f0e:	fb01 f303 	mul.w	r3, r1, r3
90004f12:	4413      	add	r3, r2
90004f14:	335c      	adds	r3, #92	; 0x5c
90004f16:	2200      	movs	r2, #0
90004f18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f1a:	687b      	ldr	r3, [r7, #4]
90004f1c:	681b      	ldr	r3, [r3, #0]
90004f1e:	78fa      	ldrb	r2, [r7, #3]
90004f20:	4611      	mov	r1, r2
90004f22:	4618      	mov	r0, r3
90004f24:	f004 fe30 	bl	90009b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004f28:	78fb      	ldrb	r3, [r7, #3]
90004f2a:	015a      	lsls	r2, r3, #5
90004f2c:	693b      	ldr	r3, [r7, #16]
90004f2e:	4413      	add	r3, r2
90004f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004f34:	461a      	mov	r2, r3
90004f36:	2340      	movs	r3, #64	; 0x40
90004f38:	6093      	str	r3, [r2, #8]
90004f3a:	e296      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004f3c:	687b      	ldr	r3, [r7, #4]
90004f3e:	681b      	ldr	r3, [r3, #0]
90004f40:	78fa      	ldrb	r2, [r7, #3]
90004f42:	4611      	mov	r1, r2
90004f44:	4618      	mov	r0, r3
90004f46:	f004 fda2 	bl	90009a8e <USB_ReadChInterrupts>
90004f4a:	4603      	mov	r3, r0
90004f4c:	f003 0308 	and.w	r3, r3, #8
90004f50:	2b08      	cmp	r3, #8
90004f52:	d119      	bne.n	90004f88 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004f54:	78fb      	ldrb	r3, [r7, #3]
90004f56:	015a      	lsls	r2, r3, #5
90004f58:	693b      	ldr	r3, [r7, #16]
90004f5a:	4413      	add	r3, r2
90004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004f60:	461a      	mov	r2, r3
90004f62:	2308      	movs	r3, #8
90004f64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004f66:	78fb      	ldrb	r3, [r7, #3]
90004f68:	687a      	ldr	r2, [r7, #4]
90004f6a:	212c      	movs	r1, #44	; 0x2c
90004f6c:	fb01 f303 	mul.w	r3, r1, r3
90004f70:	4413      	add	r3, r2
90004f72:	3361      	adds	r3, #97	; 0x61
90004f74:	2206      	movs	r2, #6
90004f76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f78:	687b      	ldr	r3, [r7, #4]
90004f7a:	681b      	ldr	r3, [r3, #0]
90004f7c:	78fa      	ldrb	r2, [r7, #3]
90004f7e:	4611      	mov	r1, r2
90004f80:	4618      	mov	r0, r3
90004f82:	f004 fe01 	bl	90009b88 <USB_HC_Halt>
90004f86:	e270      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004f88:	687b      	ldr	r3, [r7, #4]
90004f8a:	681b      	ldr	r3, [r3, #0]
90004f8c:	78fa      	ldrb	r2, [r7, #3]
90004f8e:	4611      	mov	r1, r2
90004f90:	4618      	mov	r0, r3
90004f92:	f004 fd7c 	bl	90009a8e <USB_ReadChInterrupts>
90004f96:	4603      	mov	r3, r0
90004f98:	f003 0310 	and.w	r3, r3, #16
90004f9c:	2b10      	cmp	r3, #16
90004f9e:	d13f      	bne.n	90005020 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004fa0:	78fb      	ldrb	r3, [r7, #3]
90004fa2:	687a      	ldr	r2, [r7, #4]
90004fa4:	212c      	movs	r1, #44	; 0x2c
90004fa6:	fb01 f303 	mul.w	r3, r1, r3
90004faa:	4413      	add	r3, r2
90004fac:	335c      	adds	r3, #92	; 0x5c
90004fae:	2200      	movs	r2, #0
90004fb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90004fb2:	78fb      	ldrb	r3, [r7, #3]
90004fb4:	687a      	ldr	r2, [r7, #4]
90004fb6:	212c      	movs	r1, #44	; 0x2c
90004fb8:	fb01 f303 	mul.w	r3, r1, r3
90004fbc:	4413      	add	r3, r2
90004fbe:	3361      	adds	r3, #97	; 0x61
90004fc0:	2204      	movs	r2, #4
90004fc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90004fc4:	78fb      	ldrb	r3, [r7, #3]
90004fc6:	687a      	ldr	r2, [r7, #4]
90004fc8:	212c      	movs	r1, #44	; 0x2c
90004fca:	fb01 f303 	mul.w	r3, r1, r3
90004fce:	4413      	add	r3, r2
90004fd0:	333d      	adds	r3, #61	; 0x3d
90004fd2:	781b      	ldrb	r3, [r3, #0]
90004fd4:	2b00      	cmp	r3, #0
90004fd6:	d112      	bne.n	90004ffe <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90004fd8:	78fb      	ldrb	r3, [r7, #3]
90004fda:	687a      	ldr	r2, [r7, #4]
90004fdc:	212c      	movs	r1, #44	; 0x2c
90004fde:	fb01 f303 	mul.w	r3, r1, r3
90004fe2:	4413      	add	r3, r2
90004fe4:	333c      	adds	r3, #60	; 0x3c
90004fe6:	781b      	ldrb	r3, [r3, #0]
90004fe8:	2b00      	cmp	r3, #0
90004fea:	d108      	bne.n	90004ffe <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
90004fec:	78fb      	ldrb	r3, [r7, #3]
90004fee:	687a      	ldr	r2, [r7, #4]
90004ff0:	212c      	movs	r1, #44	; 0x2c
90004ff2:	fb01 f303 	mul.w	r3, r1, r3
90004ff6:	4413      	add	r3, r2
90004ff8:	333d      	adds	r3, #61	; 0x3d
90004ffa:	2201      	movs	r2, #1
90004ffc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004ffe:	687b      	ldr	r3, [r7, #4]
90005000:	681b      	ldr	r3, [r3, #0]
90005002:	78fa      	ldrb	r2, [r7, #3]
90005004:	4611      	mov	r1, r2
90005006:	4618      	mov	r0, r3
90005008:	f004 fdbe 	bl	90009b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
9000500c:	78fb      	ldrb	r3, [r7, #3]
9000500e:	015a      	lsls	r2, r3, #5
90005010:	693b      	ldr	r3, [r7, #16]
90005012:	4413      	add	r3, r2
90005014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005018:	461a      	mov	r2, r3
9000501a:	2310      	movs	r3, #16
9000501c:	6093      	str	r3, [r2, #8]
9000501e:	e224      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005020:	687b      	ldr	r3, [r7, #4]
90005022:	681b      	ldr	r3, [r3, #0]
90005024:	78fa      	ldrb	r2, [r7, #3]
90005026:	4611      	mov	r1, r2
90005028:	4618      	mov	r0, r3
9000502a:	f004 fd30 	bl	90009a8e <USB_ReadChInterrupts>
9000502e:	4603      	mov	r3, r0
90005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005034:	2b80      	cmp	r3, #128	; 0x80
90005036:	d161      	bne.n	900050fc <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
90005038:	687b      	ldr	r3, [r7, #4]
9000503a:	68db      	ldr	r3, [r3, #12]
9000503c:	2b00      	cmp	r3, #0
9000503e:	d110      	bne.n	90005062 <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005040:	78fb      	ldrb	r3, [r7, #3]
90005042:	687a      	ldr	r2, [r7, #4]
90005044:	212c      	movs	r1, #44	; 0x2c
90005046:	fb01 f303 	mul.w	r3, r1, r3
9000504a:	4413      	add	r3, r2
9000504c:	3361      	adds	r3, #97	; 0x61
9000504e:	2207      	movs	r2, #7
90005050:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005052:	687b      	ldr	r3, [r7, #4]
90005054:	681b      	ldr	r3, [r3, #0]
90005056:	78fa      	ldrb	r2, [r7, #3]
90005058:	4611      	mov	r1, r2
9000505a:	4618      	mov	r0, r3
9000505c:	f004 fd94 	bl	90009b88 <USB_HC_Halt>
90005060:	e042      	b.n	900050e8 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005062:	78fb      	ldrb	r3, [r7, #3]
90005064:	6879      	ldr	r1, [r7, #4]
90005066:	222c      	movs	r2, #44	; 0x2c
90005068:	fb03 f202 	mul.w	r2, r3, r2
9000506c:	440a      	add	r2, r1
9000506e:	325c      	adds	r2, #92	; 0x5c
90005070:	6812      	ldr	r2, [r2, #0]
90005072:	3201      	adds	r2, #1
90005074:	6879      	ldr	r1, [r7, #4]
90005076:	202c      	movs	r0, #44	; 0x2c
90005078:	fb00 f303 	mul.w	r3, r0, r3
9000507c:	440b      	add	r3, r1
9000507e:	335c      	adds	r3, #92	; 0x5c
90005080:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005082:	78fb      	ldrb	r3, [r7, #3]
90005084:	687a      	ldr	r2, [r7, #4]
90005086:	212c      	movs	r1, #44	; 0x2c
90005088:	fb01 f303 	mul.w	r3, r1, r3
9000508c:	4413      	add	r3, r2
9000508e:	335c      	adds	r3, #92	; 0x5c
90005090:	681b      	ldr	r3, [r3, #0]
90005092:	2b02      	cmp	r3, #2
90005094:	d91f      	bls.n	900050d6 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005096:	78fb      	ldrb	r3, [r7, #3]
90005098:	687a      	ldr	r2, [r7, #4]
9000509a:	212c      	movs	r1, #44	; 0x2c
9000509c:	fb01 f303 	mul.w	r3, r1, r3
900050a0:	4413      	add	r3, r2
900050a2:	335c      	adds	r3, #92	; 0x5c
900050a4:	2200      	movs	r2, #0
900050a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900050a8:	78fb      	ldrb	r3, [r7, #3]
900050aa:	687a      	ldr	r2, [r7, #4]
900050ac:	212c      	movs	r1, #44	; 0x2c
900050ae:	fb01 f303 	mul.w	r3, r1, r3
900050b2:	4413      	add	r3, r2
900050b4:	3360      	adds	r3, #96	; 0x60
900050b6:	2204      	movs	r2, #4
900050b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900050ba:	78fb      	ldrb	r3, [r7, #3]
900050bc:	687a      	ldr	r2, [r7, #4]
900050be:	212c      	movs	r1, #44	; 0x2c
900050c0:	fb01 f303 	mul.w	r3, r1, r3
900050c4:	4413      	add	r3, r2
900050c6:	3360      	adds	r3, #96	; 0x60
900050c8:	781a      	ldrb	r2, [r3, #0]
900050ca:	78fb      	ldrb	r3, [r7, #3]
900050cc:	4619      	mov	r1, r3
900050ce:	6878      	ldr	r0, [r7, #4]
900050d0:	f7fb fcd6 	bl	90000a80 <HAL_HCD_HC_NotifyURBChange_Callback>
900050d4:	e008      	b.n	900050e8 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900050d6:	78fb      	ldrb	r3, [r7, #3]
900050d8:	687a      	ldr	r2, [r7, #4]
900050da:	212c      	movs	r1, #44	; 0x2c
900050dc:	fb01 f303 	mul.w	r3, r1, r3
900050e0:	4413      	add	r3, r2
900050e2:	3360      	adds	r3, #96	; 0x60
900050e4:	2202      	movs	r2, #2
900050e6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900050e8:	78fb      	ldrb	r3, [r7, #3]
900050ea:	015a      	lsls	r2, r3, #5
900050ec:	693b      	ldr	r3, [r7, #16]
900050ee:	4413      	add	r3, r2
900050f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900050f4:	461a      	mov	r2, r3
900050f6:	2380      	movs	r3, #128	; 0x80
900050f8:	6093      	str	r3, [r2, #8]
900050fa:	e1b6      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900050fc:	687b      	ldr	r3, [r7, #4]
900050fe:	681b      	ldr	r3, [r3, #0]
90005100:	78fa      	ldrb	r2, [r7, #3]
90005102:	4611      	mov	r1, r2
90005104:	4618      	mov	r0, r3
90005106:	f004 fcc2 	bl	90009a8e <USB_ReadChInterrupts>
9000510a:	4603      	mov	r3, r0
9000510c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90005110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005114:	d11a      	bne.n	9000514c <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005116:	78fb      	ldrb	r3, [r7, #3]
90005118:	687a      	ldr	r2, [r7, #4]
9000511a:	212c      	movs	r1, #44	; 0x2c
9000511c:	fb01 f303 	mul.w	r3, r1, r3
90005120:	4413      	add	r3, r2
90005122:	3361      	adds	r3, #97	; 0x61
90005124:	2209      	movs	r2, #9
90005126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005128:	687b      	ldr	r3, [r7, #4]
9000512a:	681b      	ldr	r3, [r3, #0]
9000512c:	78fa      	ldrb	r2, [r7, #3]
9000512e:	4611      	mov	r1, r2
90005130:	4618      	mov	r0, r3
90005132:	f004 fd29 	bl	90009b88 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005136:	78fb      	ldrb	r3, [r7, #3]
90005138:	015a      	lsls	r2, r3, #5
9000513a:	693b      	ldr	r3, [r7, #16]
9000513c:	4413      	add	r3, r2
9000513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005142:	461a      	mov	r2, r3
90005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
90005148:	6093      	str	r3, [r2, #8]
9000514a:	e18e      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000514c:	687b      	ldr	r3, [r7, #4]
9000514e:	681b      	ldr	r3, [r3, #0]
90005150:	78fa      	ldrb	r2, [r7, #3]
90005152:	4611      	mov	r1, r2
90005154:	4618      	mov	r0, r3
90005156:	f004 fc9a 	bl	90009a8e <USB_ReadChInterrupts>
9000515a:	4603      	mov	r3, r0
9000515c:	f003 0302 	and.w	r3, r3, #2
90005160:	2b02      	cmp	r3, #2
90005162:	f040 8182 	bne.w	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005166:	78fb      	ldrb	r3, [r7, #3]
90005168:	015a      	lsls	r2, r3, #5
9000516a:	693b      	ldr	r3, [r7, #16]
9000516c:	4413      	add	r3, r2
9000516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005172:	461a      	mov	r2, r3
90005174:	2302      	movs	r3, #2
90005176:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
90005178:	78fb      	ldrb	r3, [r7, #3]
9000517a:	687a      	ldr	r2, [r7, #4]
9000517c:	212c      	movs	r1, #44	; 0x2c
9000517e:	fb01 f303 	mul.w	r3, r1, r3
90005182:	4413      	add	r3, r2
90005184:	3361      	adds	r3, #97	; 0x61
90005186:	781b      	ldrb	r3, [r3, #0]
90005188:	2b01      	cmp	r3, #1
9000518a:	f040 8087 	bne.w	9000529c <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000518e:	78fb      	ldrb	r3, [r7, #3]
90005190:	687a      	ldr	r2, [r7, #4]
90005192:	212c      	movs	r1, #44	; 0x2c
90005194:	fb01 f303 	mul.w	r3, r1, r3
90005198:	4413      	add	r3, r2
9000519a:	3361      	adds	r3, #97	; 0x61
9000519c:	2202      	movs	r2, #2
9000519e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
900051a0:	78fb      	ldrb	r3, [r7, #3]
900051a2:	687a      	ldr	r2, [r7, #4]
900051a4:	212c      	movs	r1, #44	; 0x2c
900051a6:	fb01 f303 	mul.w	r3, r1, r3
900051aa:	4413      	add	r3, r2
900051ac:	3360      	adds	r3, #96	; 0x60
900051ae:	2201      	movs	r2, #1
900051b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900051b2:	78fb      	ldrb	r3, [r7, #3]
900051b4:	687a      	ldr	r2, [r7, #4]
900051b6:	212c      	movs	r1, #44	; 0x2c
900051b8:	fb01 f303 	mul.w	r3, r1, r3
900051bc:	4413      	add	r3, r2
900051be:	333f      	adds	r3, #63	; 0x3f
900051c0:	781b      	ldrb	r3, [r3, #0]
900051c2:	2b02      	cmp	r3, #2
900051c4:	d00a      	beq.n	900051dc <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
900051c6:	78fb      	ldrb	r3, [r7, #3]
900051c8:	687a      	ldr	r2, [r7, #4]
900051ca:	212c      	movs	r1, #44	; 0x2c
900051cc:	fb01 f303 	mul.w	r3, r1, r3
900051d0:	4413      	add	r3, r2
900051d2:	333f      	adds	r3, #63	; 0x3f
900051d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900051d6:	2b03      	cmp	r3, #3
900051d8:	f040 8138 	bne.w	9000544c <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
900051dc:	687b      	ldr	r3, [r7, #4]
900051de:	68db      	ldr	r3, [r3, #12]
900051e0:	2b00      	cmp	r3, #0
900051e2:	d113      	bne.n	9000520c <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900051e4:	78fb      	ldrb	r3, [r7, #3]
900051e6:	687a      	ldr	r2, [r7, #4]
900051e8:	212c      	movs	r1, #44	; 0x2c
900051ea:	fb01 f303 	mul.w	r3, r1, r3
900051ee:	4413      	add	r3, r2
900051f0:	3355      	adds	r3, #85	; 0x55
900051f2:	781a      	ldrb	r2, [r3, #0]
900051f4:	78fb      	ldrb	r3, [r7, #3]
900051f6:	f082 0201 	eor.w	r2, r2, #1
900051fa:	b2d0      	uxtb	r0, r2
900051fc:	687a      	ldr	r2, [r7, #4]
900051fe:	212c      	movs	r1, #44	; 0x2c
90005200:	fb01 f303 	mul.w	r3, r1, r3
90005204:	4413      	add	r3, r2
90005206:	3355      	adds	r3, #85	; 0x55
90005208:	4602      	mov	r2, r0
9000520a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
9000520c:	687b      	ldr	r3, [r7, #4]
9000520e:	68db      	ldr	r3, [r3, #12]
90005210:	2b01      	cmp	r3, #1
90005212:	f040 811b 	bne.w	9000544c <HCD_HC_OUT_IRQHandler+0x740>
90005216:	78fb      	ldrb	r3, [r7, #3]
90005218:	687a      	ldr	r2, [r7, #4]
9000521a:	212c      	movs	r1, #44	; 0x2c
9000521c:	fb01 f303 	mul.w	r3, r1, r3
90005220:	4413      	add	r3, r2
90005222:	334c      	adds	r3, #76	; 0x4c
90005224:	681b      	ldr	r3, [r3, #0]
90005226:	2b00      	cmp	r3, #0
90005228:	f000 8110 	beq.w	9000544c <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
9000522c:	78fb      	ldrb	r3, [r7, #3]
9000522e:	687a      	ldr	r2, [r7, #4]
90005230:	212c      	movs	r1, #44	; 0x2c
90005232:	fb01 f303 	mul.w	r3, r1, r3
90005236:	4413      	add	r3, r2
90005238:	334c      	adds	r3, #76	; 0x4c
9000523a:	681b      	ldr	r3, [r3, #0]
9000523c:	78fa      	ldrb	r2, [r7, #3]
9000523e:	6879      	ldr	r1, [r7, #4]
90005240:	202c      	movs	r0, #44	; 0x2c
90005242:	fb00 f202 	mul.w	r2, r0, r2
90005246:	440a      	add	r2, r1
90005248:	3240      	adds	r2, #64	; 0x40
9000524a:	8812      	ldrh	r2, [r2, #0]
9000524c:	4413      	add	r3, r2
9000524e:	3b01      	subs	r3, #1
90005250:	78fa      	ldrb	r2, [r7, #3]
90005252:	6879      	ldr	r1, [r7, #4]
90005254:	202c      	movs	r0, #44	; 0x2c
90005256:	fb00 f202 	mul.w	r2, r0, r2
9000525a:	440a      	add	r2, r1
9000525c:	3240      	adds	r2, #64	; 0x40
9000525e:	8812      	ldrh	r2, [r2, #0]
90005260:	fbb3 f3f2 	udiv	r3, r3, r2
90005264:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005266:	68bb      	ldr	r3, [r7, #8]
90005268:	f003 0301 	and.w	r3, r3, #1
9000526c:	2b00      	cmp	r3, #0
9000526e:	f000 80ed 	beq.w	9000544c <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005272:	78fb      	ldrb	r3, [r7, #3]
90005274:	687a      	ldr	r2, [r7, #4]
90005276:	212c      	movs	r1, #44	; 0x2c
90005278:	fb01 f303 	mul.w	r3, r1, r3
9000527c:	4413      	add	r3, r2
9000527e:	3355      	adds	r3, #85	; 0x55
90005280:	781a      	ldrb	r2, [r3, #0]
90005282:	78fb      	ldrb	r3, [r7, #3]
90005284:	f082 0201 	eor.w	r2, r2, #1
90005288:	b2d0      	uxtb	r0, r2
9000528a:	687a      	ldr	r2, [r7, #4]
9000528c:	212c      	movs	r1, #44	; 0x2c
9000528e:	fb01 f303 	mul.w	r3, r1, r3
90005292:	4413      	add	r3, r2
90005294:	3355      	adds	r3, #85	; 0x55
90005296:	4602      	mov	r2, r0
90005298:	701a      	strb	r2, [r3, #0]
9000529a:	e0d7      	b.n	9000544c <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000529c:	78fb      	ldrb	r3, [r7, #3]
9000529e:	687a      	ldr	r2, [r7, #4]
900052a0:	212c      	movs	r1, #44	; 0x2c
900052a2:	fb01 f303 	mul.w	r3, r1, r3
900052a6:	4413      	add	r3, r2
900052a8:	3361      	adds	r3, #97	; 0x61
900052aa:	781b      	ldrb	r3, [r3, #0]
900052ac:	2b03      	cmp	r3, #3
900052ae:	d109      	bne.n	900052c4 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052b0:	78fb      	ldrb	r3, [r7, #3]
900052b2:	687a      	ldr	r2, [r7, #4]
900052b4:	212c      	movs	r1, #44	; 0x2c
900052b6:	fb01 f303 	mul.w	r3, r1, r3
900052ba:	4413      	add	r3, r2
900052bc:	3361      	adds	r3, #97	; 0x61
900052be:	2202      	movs	r2, #2
900052c0:	701a      	strb	r2, [r3, #0]
900052c2:	e0c3      	b.n	9000544c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900052c4:	78fb      	ldrb	r3, [r7, #3]
900052c6:	687a      	ldr	r2, [r7, #4]
900052c8:	212c      	movs	r1, #44	; 0x2c
900052ca:	fb01 f303 	mul.w	r3, r1, r3
900052ce:	4413      	add	r3, r2
900052d0:	3361      	adds	r3, #97	; 0x61
900052d2:	781b      	ldrb	r3, [r3, #0]
900052d4:	2b04      	cmp	r3, #4
900052d6:	d112      	bne.n	900052fe <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052d8:	78fb      	ldrb	r3, [r7, #3]
900052da:	687a      	ldr	r2, [r7, #4]
900052dc:	212c      	movs	r1, #44	; 0x2c
900052de:	fb01 f303 	mul.w	r3, r1, r3
900052e2:	4413      	add	r3, r2
900052e4:	3361      	adds	r3, #97	; 0x61
900052e6:	2202      	movs	r2, #2
900052e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900052ea:	78fb      	ldrb	r3, [r7, #3]
900052ec:	687a      	ldr	r2, [r7, #4]
900052ee:	212c      	movs	r1, #44	; 0x2c
900052f0:	fb01 f303 	mul.w	r3, r1, r3
900052f4:	4413      	add	r3, r2
900052f6:	3360      	adds	r3, #96	; 0x60
900052f8:	2202      	movs	r2, #2
900052fa:	701a      	strb	r2, [r3, #0]
900052fc:	e0a6      	b.n	9000544c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900052fe:	78fb      	ldrb	r3, [r7, #3]
90005300:	687a      	ldr	r2, [r7, #4]
90005302:	212c      	movs	r1, #44	; 0x2c
90005304:	fb01 f303 	mul.w	r3, r1, r3
90005308:	4413      	add	r3, r2
9000530a:	3361      	adds	r3, #97	; 0x61
9000530c:	781b      	ldrb	r3, [r3, #0]
9000530e:	2b05      	cmp	r3, #5
90005310:	d112      	bne.n	90005338 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005312:	78fb      	ldrb	r3, [r7, #3]
90005314:	687a      	ldr	r2, [r7, #4]
90005316:	212c      	movs	r1, #44	; 0x2c
90005318:	fb01 f303 	mul.w	r3, r1, r3
9000531c:	4413      	add	r3, r2
9000531e:	3361      	adds	r3, #97	; 0x61
90005320:	2202      	movs	r2, #2
90005322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005324:	78fb      	ldrb	r3, [r7, #3]
90005326:	687a      	ldr	r2, [r7, #4]
90005328:	212c      	movs	r1, #44	; 0x2c
9000532a:	fb01 f303 	mul.w	r3, r1, r3
9000532e:	4413      	add	r3, r2
90005330:	3360      	adds	r3, #96	; 0x60
90005332:	2202      	movs	r2, #2
90005334:	701a      	strb	r2, [r3, #0]
90005336:	e089      	b.n	9000544c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005338:	78fb      	ldrb	r3, [r7, #3]
9000533a:	687a      	ldr	r2, [r7, #4]
9000533c:	212c      	movs	r1, #44	; 0x2c
9000533e:	fb01 f303 	mul.w	r3, r1, r3
90005342:	4413      	add	r3, r2
90005344:	3361      	adds	r3, #97	; 0x61
90005346:	781b      	ldrb	r3, [r3, #0]
90005348:	2b06      	cmp	r3, #6
9000534a:	d112      	bne.n	90005372 <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000534c:	78fb      	ldrb	r3, [r7, #3]
9000534e:	687a      	ldr	r2, [r7, #4]
90005350:	212c      	movs	r1, #44	; 0x2c
90005352:	fb01 f303 	mul.w	r3, r1, r3
90005356:	4413      	add	r3, r2
90005358:	3361      	adds	r3, #97	; 0x61
9000535a:	2202      	movs	r2, #2
9000535c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000535e:	78fb      	ldrb	r3, [r7, #3]
90005360:	687a      	ldr	r2, [r7, #4]
90005362:	212c      	movs	r1, #44	; 0x2c
90005364:	fb01 f303 	mul.w	r3, r1, r3
90005368:	4413      	add	r3, r2
9000536a:	3360      	adds	r3, #96	; 0x60
9000536c:	2205      	movs	r2, #5
9000536e:	701a      	strb	r2, [r3, #0]
90005370:	e06c      	b.n	9000544c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005372:	78fb      	ldrb	r3, [r7, #3]
90005374:	687a      	ldr	r2, [r7, #4]
90005376:	212c      	movs	r1, #44	; 0x2c
90005378:	fb01 f303 	mul.w	r3, r1, r3
9000537c:	4413      	add	r3, r2
9000537e:	3361      	adds	r3, #97	; 0x61
90005380:	781b      	ldrb	r3, [r3, #0]
90005382:	2b07      	cmp	r3, #7
90005384:	d009      	beq.n	9000539a <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005386:	78fb      	ldrb	r3, [r7, #3]
90005388:	687a      	ldr	r2, [r7, #4]
9000538a:	212c      	movs	r1, #44	; 0x2c
9000538c:	fb01 f303 	mul.w	r3, r1, r3
90005390:	4413      	add	r3, r2
90005392:	3361      	adds	r3, #97	; 0x61
90005394:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005396:	2b09      	cmp	r3, #9
90005398:	d166      	bne.n	90005468 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000539a:	78fb      	ldrb	r3, [r7, #3]
9000539c:	687a      	ldr	r2, [r7, #4]
9000539e:	212c      	movs	r1, #44	; 0x2c
900053a0:	fb01 f303 	mul.w	r3, r1, r3
900053a4:	4413      	add	r3, r2
900053a6:	3361      	adds	r3, #97	; 0x61
900053a8:	2202      	movs	r2, #2
900053aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900053ac:	78fb      	ldrb	r3, [r7, #3]
900053ae:	6879      	ldr	r1, [r7, #4]
900053b0:	222c      	movs	r2, #44	; 0x2c
900053b2:	fb03 f202 	mul.w	r2, r3, r2
900053b6:	440a      	add	r2, r1
900053b8:	325c      	adds	r2, #92	; 0x5c
900053ba:	6812      	ldr	r2, [r2, #0]
900053bc:	3201      	adds	r2, #1
900053be:	6879      	ldr	r1, [r7, #4]
900053c0:	202c      	movs	r0, #44	; 0x2c
900053c2:	fb00 f303 	mul.w	r3, r0, r3
900053c6:	440b      	add	r3, r1
900053c8:	335c      	adds	r3, #92	; 0x5c
900053ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053cc:	78fb      	ldrb	r3, [r7, #3]
900053ce:	687a      	ldr	r2, [r7, #4]
900053d0:	212c      	movs	r1, #44	; 0x2c
900053d2:	fb01 f303 	mul.w	r3, r1, r3
900053d6:	4413      	add	r3, r2
900053d8:	335c      	adds	r3, #92	; 0x5c
900053da:	681b      	ldr	r3, [r3, #0]
900053dc:	2b02      	cmp	r3, #2
900053de:	d912      	bls.n	90005406 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900053e0:	78fb      	ldrb	r3, [r7, #3]
900053e2:	687a      	ldr	r2, [r7, #4]
900053e4:	212c      	movs	r1, #44	; 0x2c
900053e6:	fb01 f303 	mul.w	r3, r1, r3
900053ea:	4413      	add	r3, r2
900053ec:	335c      	adds	r3, #92	; 0x5c
900053ee:	2200      	movs	r2, #0
900053f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900053f2:	78fb      	ldrb	r3, [r7, #3]
900053f4:	687a      	ldr	r2, [r7, #4]
900053f6:	212c      	movs	r1, #44	; 0x2c
900053f8:	fb01 f303 	mul.w	r3, r1, r3
900053fc:	4413      	add	r3, r2
900053fe:	3360      	adds	r3, #96	; 0x60
90005400:	2204      	movs	r2, #4
90005402:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005404:	e021      	b.n	9000544a <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90005406:	78fb      	ldrb	r3, [r7, #3]
90005408:	687a      	ldr	r2, [r7, #4]
9000540a:	212c      	movs	r1, #44	; 0x2c
9000540c:	fb01 f303 	mul.w	r3, r1, r3
90005410:	4413      	add	r3, r2
90005412:	3360      	adds	r3, #96	; 0x60
90005414:	2202      	movs	r2, #2
90005416:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005418:	78fb      	ldrb	r3, [r7, #3]
9000541a:	015a      	lsls	r2, r3, #5
9000541c:	693b      	ldr	r3, [r7, #16]
9000541e:	4413      	add	r3, r2
90005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005424:	681b      	ldr	r3, [r3, #0]
90005426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005428:	68fb      	ldr	r3, [r7, #12]
9000542a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
9000542e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005430:	68fb      	ldr	r3, [r7, #12]
90005432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005438:	78fb      	ldrb	r3, [r7, #3]
9000543a:	015a      	lsls	r2, r3, #5
9000543c:	693b      	ldr	r3, [r7, #16]
9000543e:	4413      	add	r3, r2
90005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005444:	461a      	mov	r2, r3
90005446:	68fb      	ldr	r3, [r7, #12]
90005448:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000544a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000544c:	78fb      	ldrb	r3, [r7, #3]
9000544e:	687a      	ldr	r2, [r7, #4]
90005450:	212c      	movs	r1, #44	; 0x2c
90005452:	fb01 f303 	mul.w	r3, r1, r3
90005456:	4413      	add	r3, r2
90005458:	3360      	adds	r3, #96	; 0x60
9000545a:	781a      	ldrb	r2, [r3, #0]
9000545c:	78fb      	ldrb	r3, [r7, #3]
9000545e:	4619      	mov	r1, r3
90005460:	6878      	ldr	r0, [r7, #4]
90005462:	f7fb fb0d 	bl	90000a80 <HAL_HCD_HC_NotifyURBChange_Callback>
90005466:	e000      	b.n	9000546a <HCD_HC_OUT_IRQHandler+0x75e>
      return;
90005468:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
9000546a:	3718      	adds	r7, #24
9000546c:	46bd      	mov	sp, r7
9000546e:	bd80      	pop	{r7, pc}

90005470 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005470:	b580      	push	{r7, lr}
90005472:	b08a      	sub	sp, #40	; 0x28
90005474:	af00      	add	r7, sp, #0
90005476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005478:	687b      	ldr	r3, [r7, #4]
9000547a:	681b      	ldr	r3, [r3, #0]
9000547c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005480:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005482:	687b      	ldr	r3, [r7, #4]
90005484:	681b      	ldr	r3, [r3, #0]
90005486:	6a1b      	ldr	r3, [r3, #32]
90005488:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000548a:	69fb      	ldr	r3, [r7, #28]
9000548c:	f003 030f 	and.w	r3, r3, #15
90005490:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005492:	69fb      	ldr	r3, [r7, #28]
90005494:	0c5b      	lsrs	r3, r3, #17
90005496:	f003 030f 	and.w	r3, r3, #15
9000549a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000549c:	69fb      	ldr	r3, [r7, #28]
9000549e:	091b      	lsrs	r3, r3, #4
900054a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
900054a4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
900054a6:	697b      	ldr	r3, [r7, #20]
900054a8:	2b02      	cmp	r3, #2
900054aa:	d004      	beq.n	900054b6 <HCD_RXQLVL_IRQHandler+0x46>
900054ac:	697b      	ldr	r3, [r7, #20]
900054ae:	2b05      	cmp	r3, #5
900054b0:	f000 80a9 	beq.w	90005606 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900054b4:	e0aa      	b.n	9000560c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900054b6:	693b      	ldr	r3, [r7, #16]
900054b8:	2b00      	cmp	r3, #0
900054ba:	f000 80a6 	beq.w	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
900054be:	687a      	ldr	r2, [r7, #4]
900054c0:	69bb      	ldr	r3, [r7, #24]
900054c2:	212c      	movs	r1, #44	; 0x2c
900054c4:	fb01 f303 	mul.w	r3, r1, r3
900054c8:	4413      	add	r3, r2
900054ca:	3344      	adds	r3, #68	; 0x44
900054cc:	681b      	ldr	r3, [r3, #0]
900054ce:	2b00      	cmp	r3, #0
900054d0:	f000 809b 	beq.w	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900054d4:	687a      	ldr	r2, [r7, #4]
900054d6:	69bb      	ldr	r3, [r7, #24]
900054d8:	212c      	movs	r1, #44	; 0x2c
900054da:	fb01 f303 	mul.w	r3, r1, r3
900054de:	4413      	add	r3, r2
900054e0:	3350      	adds	r3, #80	; 0x50
900054e2:	681a      	ldr	r2, [r3, #0]
900054e4:	693b      	ldr	r3, [r7, #16]
900054e6:	441a      	add	r2, r3
900054e8:	6879      	ldr	r1, [r7, #4]
900054ea:	69bb      	ldr	r3, [r7, #24]
900054ec:	202c      	movs	r0, #44	; 0x2c
900054ee:	fb00 f303 	mul.w	r3, r0, r3
900054f2:	440b      	add	r3, r1
900054f4:	334c      	adds	r3, #76	; 0x4c
900054f6:	681b      	ldr	r3, [r3, #0]
900054f8:	429a      	cmp	r2, r3
900054fa:	d87a      	bhi.n	900055f2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
900054fc:	687b      	ldr	r3, [r7, #4]
900054fe:	6818      	ldr	r0, [r3, #0]
90005500:	687a      	ldr	r2, [r7, #4]
90005502:	69bb      	ldr	r3, [r7, #24]
90005504:	212c      	movs	r1, #44	; 0x2c
90005506:	fb01 f303 	mul.w	r3, r1, r3
9000550a:	4413      	add	r3, r2
9000550c:	3344      	adds	r3, #68	; 0x44
9000550e:	681b      	ldr	r3, [r3, #0]
90005510:	693a      	ldr	r2, [r7, #16]
90005512:	b292      	uxth	r2, r2
90005514:	4619      	mov	r1, r3
90005516:	f004 fa4f 	bl	900099b8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
9000551a:	687a      	ldr	r2, [r7, #4]
9000551c:	69bb      	ldr	r3, [r7, #24]
9000551e:	212c      	movs	r1, #44	; 0x2c
90005520:	fb01 f303 	mul.w	r3, r1, r3
90005524:	4413      	add	r3, r2
90005526:	3344      	adds	r3, #68	; 0x44
90005528:	681a      	ldr	r2, [r3, #0]
9000552a:	693b      	ldr	r3, [r7, #16]
9000552c:	441a      	add	r2, r3
9000552e:	6879      	ldr	r1, [r7, #4]
90005530:	69bb      	ldr	r3, [r7, #24]
90005532:	202c      	movs	r0, #44	; 0x2c
90005534:	fb00 f303 	mul.w	r3, r0, r3
90005538:	440b      	add	r3, r1
9000553a:	3344      	adds	r3, #68	; 0x44
9000553c:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
9000553e:	687a      	ldr	r2, [r7, #4]
90005540:	69bb      	ldr	r3, [r7, #24]
90005542:	212c      	movs	r1, #44	; 0x2c
90005544:	fb01 f303 	mul.w	r3, r1, r3
90005548:	4413      	add	r3, r2
9000554a:	3350      	adds	r3, #80	; 0x50
9000554c:	681a      	ldr	r2, [r3, #0]
9000554e:	693b      	ldr	r3, [r7, #16]
90005550:	441a      	add	r2, r3
90005552:	6879      	ldr	r1, [r7, #4]
90005554:	69bb      	ldr	r3, [r7, #24]
90005556:	202c      	movs	r0, #44	; 0x2c
90005558:	fb00 f303 	mul.w	r3, r0, r3
9000555c:	440b      	add	r3, r1
9000555e:	3350      	adds	r3, #80	; 0x50
90005560:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005562:	69bb      	ldr	r3, [r7, #24]
90005564:	015a      	lsls	r2, r3, #5
90005566:	6a3b      	ldr	r3, [r7, #32]
90005568:	4413      	add	r3, r2
9000556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000556e:	691b      	ldr	r3, [r3, #16]
90005570:	0cdb      	lsrs	r3, r3, #19
90005572:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005576:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005578:	687a      	ldr	r2, [r7, #4]
9000557a:	69bb      	ldr	r3, [r7, #24]
9000557c:	212c      	movs	r1, #44	; 0x2c
9000557e:	fb01 f303 	mul.w	r3, r1, r3
90005582:	4413      	add	r3, r2
90005584:	3340      	adds	r3, #64	; 0x40
90005586:	881b      	ldrh	r3, [r3, #0]
90005588:	461a      	mov	r2, r3
9000558a:	693b      	ldr	r3, [r7, #16]
9000558c:	4293      	cmp	r3, r2
9000558e:	d13c      	bne.n	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
90005590:	68fb      	ldr	r3, [r7, #12]
90005592:	2b00      	cmp	r3, #0
90005594:	d039      	beq.n	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
90005596:	69bb      	ldr	r3, [r7, #24]
90005598:	015a      	lsls	r2, r3, #5
9000559a:	6a3b      	ldr	r3, [r7, #32]
9000559c:	4413      	add	r3, r2
9000559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900055a2:	681b      	ldr	r3, [r3, #0]
900055a4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
900055a6:	68bb      	ldr	r3, [r7, #8]
900055a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
900055ac:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
900055ae:	68bb      	ldr	r3, [r7, #8]
900055b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900055b4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900055b6:	69bb      	ldr	r3, [r7, #24]
900055b8:	015a      	lsls	r2, r3, #5
900055ba:	6a3b      	ldr	r3, [r7, #32]
900055bc:	4413      	add	r3, r2
900055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900055c2:	461a      	mov	r2, r3
900055c4:	68bb      	ldr	r3, [r7, #8]
900055c6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
900055c8:	687a      	ldr	r2, [r7, #4]
900055ca:	69bb      	ldr	r3, [r7, #24]
900055cc:	212c      	movs	r1, #44	; 0x2c
900055ce:	fb01 f303 	mul.w	r3, r1, r3
900055d2:	4413      	add	r3, r2
900055d4:	3354      	adds	r3, #84	; 0x54
900055d6:	781b      	ldrb	r3, [r3, #0]
900055d8:	f083 0301 	eor.w	r3, r3, #1
900055dc:	b2d8      	uxtb	r0, r3
900055de:	687a      	ldr	r2, [r7, #4]
900055e0:	69bb      	ldr	r3, [r7, #24]
900055e2:	212c      	movs	r1, #44	; 0x2c
900055e4:	fb01 f303 	mul.w	r3, r1, r3
900055e8:	4413      	add	r3, r2
900055ea:	3354      	adds	r3, #84	; 0x54
900055ec:	4602      	mov	r2, r0
900055ee:	701a      	strb	r2, [r3, #0]
      break;
900055f0:	e00b      	b.n	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
900055f2:	687a      	ldr	r2, [r7, #4]
900055f4:	69bb      	ldr	r3, [r7, #24]
900055f6:	212c      	movs	r1, #44	; 0x2c
900055f8:	fb01 f303 	mul.w	r3, r1, r3
900055fc:	4413      	add	r3, r2
900055fe:	3360      	adds	r3, #96	; 0x60
90005600:	2204      	movs	r2, #4
90005602:	701a      	strb	r2, [r3, #0]
      break;
90005604:	e001      	b.n	9000560a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
90005606:	bf00      	nop
90005608:	e000      	b.n	9000560c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
9000560a:	bf00      	nop
  }
}
9000560c:	bf00      	nop
9000560e:	3728      	adds	r7, #40	; 0x28
90005610:	46bd      	mov	sp, r7
90005612:	bd80      	pop	{r7, pc}

90005614 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005614:	b580      	push	{r7, lr}
90005616:	b086      	sub	sp, #24
90005618:	af00      	add	r7, sp, #0
9000561a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000561c:	687b      	ldr	r3, [r7, #4]
9000561e:	681b      	ldr	r3, [r3, #0]
90005620:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005622:	697b      	ldr	r3, [r7, #20]
90005624:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005626:	693b      	ldr	r3, [r7, #16]
90005628:	f503 6388 	add.w	r3, r3, #1088	; 0x440
9000562c:	681b      	ldr	r3, [r3, #0]
9000562e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005630:	693b      	ldr	r3, [r7, #16]
90005632:	f503 6388 	add.w	r3, r3, #1088	; 0x440
90005636:	681b      	ldr	r3, [r3, #0]
90005638:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
9000563a:	68bb      	ldr	r3, [r7, #8]
9000563c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005640:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005642:	68fb      	ldr	r3, [r7, #12]
90005644:	f003 0302 	and.w	r3, r3, #2
90005648:	2b02      	cmp	r3, #2
9000564a:	d10b      	bne.n	90005664 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
9000564c:	68fb      	ldr	r3, [r7, #12]
9000564e:	f003 0301 	and.w	r3, r3, #1
90005652:	2b01      	cmp	r3, #1
90005654:	d102      	bne.n	9000565c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005656:	6878      	ldr	r0, [r7, #4]
90005658:	f7fb f9da 	bl	90000a10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
9000565c:	68bb      	ldr	r3, [r7, #8]
9000565e:	f043 0302 	orr.w	r3, r3, #2
90005662:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005664:	68fb      	ldr	r3, [r7, #12]
90005666:	f003 0308 	and.w	r3, r3, #8
9000566a:	2b08      	cmp	r3, #8
9000566c:	d132      	bne.n	900056d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
9000566e:	68bb      	ldr	r3, [r7, #8]
90005670:	f043 0308 	orr.w	r3, r3, #8
90005674:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005676:	68fb      	ldr	r3, [r7, #12]
90005678:	f003 0304 	and.w	r3, r3, #4
9000567c:	2b04      	cmp	r3, #4
9000567e:	d126      	bne.n	900056ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005680:	687b      	ldr	r3, [r7, #4]
90005682:	699b      	ldr	r3, [r3, #24]
90005684:	2b02      	cmp	r3, #2
90005686:	d113      	bne.n	900056b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005688:	68fb      	ldr	r3, [r7, #12]
9000568a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
9000568e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90005692:	d106      	bne.n	900056a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005694:	687b      	ldr	r3, [r7, #4]
90005696:	681b      	ldr	r3, [r3, #0]
90005698:	2102      	movs	r1, #2
9000569a:	4618      	mov	r0, r3
9000569c:	f004 fa26 	bl	90009aec <USB_InitFSLSPClkSel>
900056a0:	e011      	b.n	900056c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
900056a2:	687b      	ldr	r3, [r7, #4]
900056a4:	681b      	ldr	r3, [r3, #0]
900056a6:	2101      	movs	r1, #1
900056a8:	4618      	mov	r0, r3
900056aa:	f004 fa1f 	bl	90009aec <USB_InitFSLSPClkSel>
900056ae:	e00a      	b.n	900056c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900056b0:	687b      	ldr	r3, [r7, #4]
900056b2:	691b      	ldr	r3, [r3, #16]
900056b4:	2b01      	cmp	r3, #1
900056b6:	d106      	bne.n	900056c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900056b8:	693b      	ldr	r3, [r7, #16]
900056ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900056be:	461a      	mov	r2, r3
900056c0:	f64e 2360 	movw	r3, #60000	; 0xea60
900056c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900056c6:	6878      	ldr	r0, [r7, #4]
900056c8:	f7fb f9be 	bl	90000a48 <HAL_HCD_PortEnabled_Callback>
900056cc:	e002      	b.n	900056d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
900056ce:	6878      	ldr	r0, [r7, #4]
900056d0:	f7fb f9c8 	bl	90000a64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900056d4:	68fb      	ldr	r3, [r7, #12]
900056d6:	f003 0320 	and.w	r3, r3, #32
900056da:	2b20      	cmp	r3, #32
900056dc:	d103      	bne.n	900056e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
900056de:	68bb      	ldr	r3, [r7, #8]
900056e0:	f043 0320 	orr.w	r3, r3, #32
900056e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
900056e6:	693b      	ldr	r3, [r7, #16]
900056e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
900056ec:	461a      	mov	r2, r3
900056ee:	68bb      	ldr	r3, [r7, #8]
900056f0:	6013      	str	r3, [r2, #0]
}
900056f2:	bf00      	nop
900056f4:	3718      	adds	r7, #24
900056f6:	46bd      	mov	sp, r7
900056f8:	bd80      	pop	{r7, pc}
	...

900056fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
900056fc:	b580      	push	{r7, lr}
900056fe:	b082      	sub	sp, #8
90005700:	af00      	add	r7, sp, #0
90005702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005704:	687b      	ldr	r3, [r7, #4]
90005706:	2b00      	cmp	r3, #0
90005708:	d101      	bne.n	9000570e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
9000570a:	2301      	movs	r3, #1
9000570c:	e07f      	b.n	9000580e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
9000570e:	687b      	ldr	r3, [r7, #4]
90005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005714:	b2db      	uxtb	r3, r3
90005716:	2b00      	cmp	r3, #0
90005718:	d106      	bne.n	90005728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
9000571a:	687b      	ldr	r3, [r7, #4]
9000571c:	2200      	movs	r2, #0
9000571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005722:	6878      	ldr	r0, [r7, #4]
90005724:	f000 f8a9 	bl	9000587a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005728:	687b      	ldr	r3, [r7, #4]
9000572a:	2224      	movs	r2, #36	; 0x24
9000572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005730:	687b      	ldr	r3, [r7, #4]
90005732:	681b      	ldr	r3, [r3, #0]
90005734:	681a      	ldr	r2, [r3, #0]
90005736:	687b      	ldr	r3, [r7, #4]
90005738:	681b      	ldr	r3, [r3, #0]
9000573a:	f022 0201 	bic.w	r2, r2, #1
9000573e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005740:	687b      	ldr	r3, [r7, #4]
90005742:	685a      	ldr	r2, [r3, #4]
90005744:	687b      	ldr	r3, [r7, #4]
90005746:	681b      	ldr	r3, [r3, #0]
90005748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
9000574c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000574e:	687b      	ldr	r3, [r7, #4]
90005750:	681b      	ldr	r3, [r3, #0]
90005752:	689a      	ldr	r2, [r3, #8]
90005754:	687b      	ldr	r3, [r7, #4]
90005756:	681b      	ldr	r3, [r3, #0]
90005758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000575c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000575e:	687b      	ldr	r3, [r7, #4]
90005760:	68db      	ldr	r3, [r3, #12]
90005762:	2b01      	cmp	r3, #1
90005764:	d107      	bne.n	90005776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005766:	687b      	ldr	r3, [r7, #4]
90005768:	689a      	ldr	r2, [r3, #8]
9000576a:	687b      	ldr	r3, [r7, #4]
9000576c:	681b      	ldr	r3, [r3, #0]
9000576e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90005772:	609a      	str	r2, [r3, #8]
90005774:	e006      	b.n	90005784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005776:	687b      	ldr	r3, [r7, #4]
90005778:	689a      	ldr	r2, [r3, #8]
9000577a:	687b      	ldr	r3, [r7, #4]
9000577c:	681b      	ldr	r3, [r3, #0]
9000577e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
90005782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005784:	687b      	ldr	r3, [r7, #4]
90005786:	68db      	ldr	r3, [r3, #12]
90005788:	2b02      	cmp	r3, #2
9000578a:	d104      	bne.n	90005796 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000578c:	687b      	ldr	r3, [r7, #4]
9000578e:	681b      	ldr	r3, [r3, #0]
90005790:	f44f 6200 	mov.w	r2, #2048	; 0x800
90005794:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005796:	687b      	ldr	r3, [r7, #4]
90005798:	681b      	ldr	r3, [r3, #0]
9000579a:	6859      	ldr	r1, [r3, #4]
9000579c:	687b      	ldr	r3, [r7, #4]
9000579e:	681a      	ldr	r2, [r3, #0]
900057a0:	4b1d      	ldr	r3, [pc, #116]	; (90005818 <HAL_I2C_Init+0x11c>)
900057a2:	430b      	orrs	r3, r1
900057a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900057a6:	687b      	ldr	r3, [r7, #4]
900057a8:	681b      	ldr	r3, [r3, #0]
900057aa:	68da      	ldr	r2, [r3, #12]
900057ac:	687b      	ldr	r3, [r7, #4]
900057ae:	681b      	ldr	r3, [r3, #0]
900057b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900057b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900057b6:	687b      	ldr	r3, [r7, #4]
900057b8:	691a      	ldr	r2, [r3, #16]
900057ba:	687b      	ldr	r3, [r7, #4]
900057bc:	695b      	ldr	r3, [r3, #20]
900057be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
900057c2:	687b      	ldr	r3, [r7, #4]
900057c4:	699b      	ldr	r3, [r3, #24]
900057c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900057c8:	687b      	ldr	r3, [r7, #4]
900057ca:	681b      	ldr	r3, [r3, #0]
900057cc:	430a      	orrs	r2, r1
900057ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900057d0:	687b      	ldr	r3, [r7, #4]
900057d2:	69d9      	ldr	r1, [r3, #28]
900057d4:	687b      	ldr	r3, [r7, #4]
900057d6:	6a1a      	ldr	r2, [r3, #32]
900057d8:	687b      	ldr	r3, [r7, #4]
900057da:	681b      	ldr	r3, [r3, #0]
900057dc:	430a      	orrs	r2, r1
900057de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
900057e0:	687b      	ldr	r3, [r7, #4]
900057e2:	681b      	ldr	r3, [r3, #0]
900057e4:	681a      	ldr	r2, [r3, #0]
900057e6:	687b      	ldr	r3, [r7, #4]
900057e8:	681b      	ldr	r3, [r3, #0]
900057ea:	f042 0201 	orr.w	r2, r2, #1
900057ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900057f0:	687b      	ldr	r3, [r7, #4]
900057f2:	2200      	movs	r2, #0
900057f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900057f6:	687b      	ldr	r3, [r7, #4]
900057f8:	2220      	movs	r2, #32
900057fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900057fe:	687b      	ldr	r3, [r7, #4]
90005800:	2200      	movs	r2, #0
90005802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005804:	687b      	ldr	r3, [r7, #4]
90005806:	2200      	movs	r2, #0
90005808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
9000580c:	2300      	movs	r3, #0
}
9000580e:	4618      	mov	r0, r3
90005810:	3708      	adds	r7, #8
90005812:	46bd      	mov	sp, r7
90005814:	bd80      	pop	{r7, pc}
90005816:	bf00      	nop
90005818:	02008000 	.word	0x02008000

9000581c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
9000581c:	b580      	push	{r7, lr}
9000581e:	b082      	sub	sp, #8
90005820:	af00      	add	r7, sp, #0
90005822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005824:	687b      	ldr	r3, [r7, #4]
90005826:	2b00      	cmp	r3, #0
90005828:	d101      	bne.n	9000582e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
9000582a:	2301      	movs	r3, #1
9000582c:	e021      	b.n	90005872 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
9000582e:	687b      	ldr	r3, [r7, #4]
90005830:	2224      	movs	r2, #36	; 0x24
90005832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90005836:	687b      	ldr	r3, [r7, #4]
90005838:	681b      	ldr	r3, [r3, #0]
9000583a:	681a      	ldr	r2, [r3, #0]
9000583c:	687b      	ldr	r3, [r7, #4]
9000583e:	681b      	ldr	r3, [r3, #0]
90005840:	f022 0201 	bic.w	r2, r2, #1
90005844:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90005846:	6878      	ldr	r0, [r7, #4]
90005848:	f000 f821 	bl	9000588e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000584c:	687b      	ldr	r3, [r7, #4]
9000584e:	2200      	movs	r2, #0
90005850:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90005852:	687b      	ldr	r3, [r7, #4]
90005854:	2200      	movs	r2, #0
90005856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000585a:	687b      	ldr	r3, [r7, #4]
9000585c:	2200      	movs	r2, #0
9000585e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005860:	687b      	ldr	r3, [r7, #4]
90005862:	2200      	movs	r2, #0
90005864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90005868:	687b      	ldr	r3, [r7, #4]
9000586a:	2200      	movs	r2, #0
9000586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
90005870:	2300      	movs	r3, #0
}
90005872:	4618      	mov	r0, r3
90005874:	3708      	adds	r7, #8
90005876:	46bd      	mov	sp, r7
90005878:	bd80      	pop	{r7, pc}

9000587a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
9000587a:	b480      	push	{r7}
9000587c:	b083      	sub	sp, #12
9000587e:	af00      	add	r7, sp, #0
90005880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005882:	bf00      	nop
90005884:	370c      	adds	r7, #12
90005886:	46bd      	mov	sp, r7
90005888:	f85d 7b04 	ldr.w	r7, [sp], #4
9000588c:	4770      	bx	lr

9000588e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
9000588e:	b480      	push	{r7}
90005890:	b083      	sub	sp, #12
90005892:	af00      	add	r7, sp, #0
90005894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90005896:	bf00      	nop
90005898:	370c      	adds	r7, #12
9000589a:	46bd      	mov	sp, r7
9000589c:	f85d 7b04 	ldr.w	r7, [sp], #4
900058a0:	4770      	bx	lr
	...

900058a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900058a4:	b580      	push	{r7, lr}
900058a6:	b088      	sub	sp, #32
900058a8:	af02      	add	r7, sp, #8
900058aa:	60f8      	str	r0, [r7, #12]
900058ac:	4608      	mov	r0, r1
900058ae:	4611      	mov	r1, r2
900058b0:	461a      	mov	r2, r3
900058b2:	4603      	mov	r3, r0
900058b4:	817b      	strh	r3, [r7, #10]
900058b6:	460b      	mov	r3, r1
900058b8:	813b      	strh	r3, [r7, #8]
900058ba:	4613      	mov	r3, r2
900058bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
900058be:	68fb      	ldr	r3, [r7, #12]
900058c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900058c4:	b2db      	uxtb	r3, r3
900058c6:	2b20      	cmp	r3, #32
900058c8:	f040 80f9 	bne.w	90005abe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
900058cc:	6a3b      	ldr	r3, [r7, #32]
900058ce:	2b00      	cmp	r3, #0
900058d0:	d002      	beq.n	900058d8 <HAL_I2C_Mem_Write+0x34>
900058d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
900058d4:	2b00      	cmp	r3, #0
900058d6:	d105      	bne.n	900058e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900058d8:	68fb      	ldr	r3, [r7, #12]
900058da:	f44f 7200 	mov.w	r2, #512	; 0x200
900058de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
900058e0:	2301      	movs	r3, #1
900058e2:	e0ed      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
900058e4:	68fb      	ldr	r3, [r7, #12]
900058e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900058ea:	2b01      	cmp	r3, #1
900058ec:	d101      	bne.n	900058f2 <HAL_I2C_Mem_Write+0x4e>
900058ee:	2302      	movs	r3, #2
900058f0:	e0e6      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
900058f2:	68fb      	ldr	r3, [r7, #12]
900058f4:	2201      	movs	r2, #1
900058f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
900058fa:	f7fd fd6d 	bl	900033d8 <HAL_GetTick>
900058fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005900:	697b      	ldr	r3, [r7, #20]
90005902:	9300      	str	r3, [sp, #0]
90005904:	2319      	movs	r3, #25
90005906:	2201      	movs	r2, #1
90005908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000590c:	68f8      	ldr	r0, [r7, #12]
9000590e:	f000 fadd 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005912:	4603      	mov	r3, r0
90005914:	2b00      	cmp	r3, #0
90005916:	d001      	beq.n	9000591c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90005918:	2301      	movs	r3, #1
9000591a:	e0d1      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000591c:	68fb      	ldr	r3, [r7, #12]
9000591e:	2221      	movs	r2, #33	; 0x21
90005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005924:	68fb      	ldr	r3, [r7, #12]
90005926:	2240      	movs	r2, #64	; 0x40
90005928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000592c:	68fb      	ldr	r3, [r7, #12]
9000592e:	2200      	movs	r2, #0
90005930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005932:	68fb      	ldr	r3, [r7, #12]
90005934:	6a3a      	ldr	r2, [r7, #32]
90005936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90005938:	68fb      	ldr	r3, [r7, #12]
9000593a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000593c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
9000593e:	68fb      	ldr	r3, [r7, #12]
90005940:	2200      	movs	r2, #0
90005942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005944:	88f8      	ldrh	r0, [r7, #6]
90005946:	893a      	ldrh	r2, [r7, #8]
90005948:	8979      	ldrh	r1, [r7, #10]
9000594a:	697b      	ldr	r3, [r7, #20]
9000594c:	9301      	str	r3, [sp, #4]
9000594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005950:	9300      	str	r3, [sp, #0]
90005952:	4603      	mov	r3, r0
90005954:	68f8      	ldr	r0, [r7, #12]
90005956:	f000 f9ed 	bl	90005d34 <I2C_RequestMemoryWrite>
9000595a:	4603      	mov	r3, r0
9000595c:	2b00      	cmp	r3, #0
9000595e:	d005      	beq.n	9000596c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005960:	68fb      	ldr	r3, [r7, #12]
90005962:	2200      	movs	r2, #0
90005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
90005968:	2301      	movs	r3, #1
9000596a:	e0a9      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000596c:	68fb      	ldr	r3, [r7, #12]
9000596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005970:	b29b      	uxth	r3, r3
90005972:	2bff      	cmp	r3, #255	; 0xff
90005974:	d90e      	bls.n	90005994 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005976:	68fb      	ldr	r3, [r7, #12]
90005978:	22ff      	movs	r2, #255	; 0xff
9000597a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
9000597c:	68fb      	ldr	r3, [r7, #12]
9000597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005980:	b2da      	uxtb	r2, r3
90005982:	8979      	ldrh	r1, [r7, #10]
90005984:	2300      	movs	r3, #0
90005986:	9300      	str	r3, [sp, #0]
90005988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000598c:	68f8      	ldr	r0, [r7, #12]
9000598e:	f000 fc57 	bl	90006240 <I2C_TransferConfig>
90005992:	e00f      	b.n	900059b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005994:	68fb      	ldr	r3, [r7, #12]
90005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005998:	b29a      	uxth	r2, r3
9000599a:	68fb      	ldr	r3, [r7, #12]
9000599c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000599e:	68fb      	ldr	r3, [r7, #12]
900059a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900059a2:	b2da      	uxtb	r2, r3
900059a4:	8979      	ldrh	r1, [r7, #10]
900059a6:	2300      	movs	r3, #0
900059a8:	9300      	str	r3, [sp, #0]
900059aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
900059ae:	68f8      	ldr	r0, [r7, #12]
900059b0:	f000 fc46 	bl	90006240 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900059b4:	697a      	ldr	r2, [r7, #20]
900059b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
900059b8:	68f8      	ldr	r0, [r7, #12]
900059ba:	f000 fad6 	bl	90005f6a <I2C_WaitOnTXISFlagUntilTimeout>
900059be:	4603      	mov	r3, r0
900059c0:	2b00      	cmp	r3, #0
900059c2:	d001      	beq.n	900059c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
900059c4:	2301      	movs	r3, #1
900059c6:	e07b      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900059c8:	68fb      	ldr	r3, [r7, #12]
900059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900059cc:	781a      	ldrb	r2, [r3, #0]
900059ce:	68fb      	ldr	r3, [r7, #12]
900059d0:	681b      	ldr	r3, [r3, #0]
900059d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
900059d4:	68fb      	ldr	r3, [r7, #12]
900059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900059d8:	1c5a      	adds	r2, r3, #1
900059da:	68fb      	ldr	r3, [r7, #12]
900059dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
900059de:	68fb      	ldr	r3, [r7, #12]
900059e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900059e2:	b29b      	uxth	r3, r3
900059e4:	3b01      	subs	r3, #1
900059e6:	b29a      	uxth	r2, r3
900059e8:	68fb      	ldr	r3, [r7, #12]
900059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
900059ec:	68fb      	ldr	r3, [r7, #12]
900059ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900059f0:	3b01      	subs	r3, #1
900059f2:	b29a      	uxth	r2, r3
900059f4:	68fb      	ldr	r3, [r7, #12]
900059f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900059f8:	68fb      	ldr	r3, [r7, #12]
900059fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900059fc:	b29b      	uxth	r3, r3
900059fe:	2b00      	cmp	r3, #0
90005a00:	d034      	beq.n	90005a6c <HAL_I2C_Mem_Write+0x1c8>
90005a02:	68fb      	ldr	r3, [r7, #12]
90005a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005a06:	2b00      	cmp	r3, #0
90005a08:	d130      	bne.n	90005a6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005a0a:	697b      	ldr	r3, [r7, #20]
90005a0c:	9300      	str	r3, [sp, #0]
90005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005a10:	2200      	movs	r2, #0
90005a12:	2180      	movs	r1, #128	; 0x80
90005a14:	68f8      	ldr	r0, [r7, #12]
90005a16:	f000 fa59 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005a1a:	4603      	mov	r3, r0
90005a1c:	2b00      	cmp	r3, #0
90005a1e:	d001      	beq.n	90005a24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90005a20:	2301      	movs	r3, #1
90005a22:	e04d      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005a24:	68fb      	ldr	r3, [r7, #12]
90005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a28:	b29b      	uxth	r3, r3
90005a2a:	2bff      	cmp	r3, #255	; 0xff
90005a2c:	d90e      	bls.n	90005a4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005a2e:	68fb      	ldr	r3, [r7, #12]
90005a30:	22ff      	movs	r2, #255	; 0xff
90005a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005a34:	68fb      	ldr	r3, [r7, #12]
90005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005a38:	b2da      	uxtb	r2, r3
90005a3a:	8979      	ldrh	r1, [r7, #10]
90005a3c:	2300      	movs	r3, #0
90005a3e:	9300      	str	r3, [sp, #0]
90005a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005a44:	68f8      	ldr	r0, [r7, #12]
90005a46:	f000 fbfb 	bl	90006240 <I2C_TransferConfig>
90005a4a:	e00f      	b.n	90005a6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005a4c:	68fb      	ldr	r3, [r7, #12]
90005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a50:	b29a      	uxth	r2, r3
90005a52:	68fb      	ldr	r3, [r7, #12]
90005a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005a56:	68fb      	ldr	r3, [r7, #12]
90005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005a5a:	b2da      	uxtb	r2, r3
90005a5c:	8979      	ldrh	r1, [r7, #10]
90005a5e:	2300      	movs	r3, #0
90005a60:	9300      	str	r3, [sp, #0]
90005a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005a66:	68f8      	ldr	r0, [r7, #12]
90005a68:	f000 fbea 	bl	90006240 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90005a6c:	68fb      	ldr	r3, [r7, #12]
90005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a70:	b29b      	uxth	r3, r3
90005a72:	2b00      	cmp	r3, #0
90005a74:	d19e      	bne.n	900059b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005a76:	697a      	ldr	r2, [r7, #20]
90005a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90005a7a:	68f8      	ldr	r0, [r7, #12]
90005a7c:	f000 fabc 	bl	90005ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
90005a80:	4603      	mov	r3, r0
90005a82:	2b00      	cmp	r3, #0
90005a84:	d001      	beq.n	90005a8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
90005a86:	2301      	movs	r3, #1
90005a88:	e01a      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005a8a:	68fb      	ldr	r3, [r7, #12]
90005a8c:	681b      	ldr	r3, [r3, #0]
90005a8e:	2220      	movs	r2, #32
90005a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005a92:	68fb      	ldr	r3, [r7, #12]
90005a94:	681b      	ldr	r3, [r3, #0]
90005a96:	6859      	ldr	r1, [r3, #4]
90005a98:	68fb      	ldr	r3, [r7, #12]
90005a9a:	681a      	ldr	r2, [r3, #0]
90005a9c:	4b0a      	ldr	r3, [pc, #40]	; (90005ac8 <HAL_I2C_Mem_Write+0x224>)
90005a9e:	400b      	ands	r3, r1
90005aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005aa2:	68fb      	ldr	r3, [r7, #12]
90005aa4:	2220      	movs	r2, #32
90005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005aaa:	68fb      	ldr	r3, [r7, #12]
90005aac:	2200      	movs	r2, #0
90005aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005ab2:	68fb      	ldr	r3, [r7, #12]
90005ab4:	2200      	movs	r2, #0
90005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90005aba:	2300      	movs	r3, #0
90005abc:	e000      	b.n	90005ac0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90005abe:	2302      	movs	r3, #2
  }
}
90005ac0:	4618      	mov	r0, r3
90005ac2:	3718      	adds	r7, #24
90005ac4:	46bd      	mov	sp, r7
90005ac6:	bd80      	pop	{r7, pc}
90005ac8:	fe00e800 	.word	0xfe00e800

90005acc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005acc:	b580      	push	{r7, lr}
90005ace:	b088      	sub	sp, #32
90005ad0:	af02      	add	r7, sp, #8
90005ad2:	60f8      	str	r0, [r7, #12]
90005ad4:	4608      	mov	r0, r1
90005ad6:	4611      	mov	r1, r2
90005ad8:	461a      	mov	r2, r3
90005ada:	4603      	mov	r3, r0
90005adc:	817b      	strh	r3, [r7, #10]
90005ade:	460b      	mov	r3, r1
90005ae0:	813b      	strh	r3, [r7, #8]
90005ae2:	4613      	mov	r3, r2
90005ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005ae6:	68fb      	ldr	r3, [r7, #12]
90005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005aec:	b2db      	uxtb	r3, r3
90005aee:	2b20      	cmp	r3, #32
90005af0:	f040 80fd 	bne.w	90005cee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005af4:	6a3b      	ldr	r3, [r7, #32]
90005af6:	2b00      	cmp	r3, #0
90005af8:	d002      	beq.n	90005b00 <HAL_I2C_Mem_Read+0x34>
90005afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90005afc:	2b00      	cmp	r3, #0
90005afe:	d105      	bne.n	90005b0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005b00:	68fb      	ldr	r3, [r7, #12]
90005b02:	f44f 7200 	mov.w	r2, #512	; 0x200
90005b06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
90005b08:	2301      	movs	r3, #1
90005b0a:	e0f1      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005b0c:	68fb      	ldr	r3, [r7, #12]
90005b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90005b12:	2b01      	cmp	r3, #1
90005b14:	d101      	bne.n	90005b1a <HAL_I2C_Mem_Read+0x4e>
90005b16:	2302      	movs	r3, #2
90005b18:	e0ea      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
90005b1a:	68fb      	ldr	r3, [r7, #12]
90005b1c:	2201      	movs	r2, #1
90005b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005b22:	f7fd fc59 	bl	900033d8 <HAL_GetTick>
90005b26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005b28:	697b      	ldr	r3, [r7, #20]
90005b2a:	9300      	str	r3, [sp, #0]
90005b2c:	2319      	movs	r3, #25
90005b2e:	2201      	movs	r2, #1
90005b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90005b34:	68f8      	ldr	r0, [r7, #12]
90005b36:	f000 f9c9 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005b3a:	4603      	mov	r3, r0
90005b3c:	2b00      	cmp	r3, #0
90005b3e:	d001      	beq.n	90005b44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005b40:	2301      	movs	r3, #1
90005b42:	e0d5      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005b44:	68fb      	ldr	r3, [r7, #12]
90005b46:	2222      	movs	r2, #34	; 0x22
90005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005b4c:	68fb      	ldr	r3, [r7, #12]
90005b4e:	2240      	movs	r2, #64	; 0x40
90005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005b54:	68fb      	ldr	r3, [r7, #12]
90005b56:	2200      	movs	r2, #0
90005b58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005b5a:	68fb      	ldr	r3, [r7, #12]
90005b5c:	6a3a      	ldr	r2, [r7, #32]
90005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90005b60:	68fb      	ldr	r3, [r7, #12]
90005b62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
90005b66:	68fb      	ldr	r3, [r7, #12]
90005b68:	2200      	movs	r2, #0
90005b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005b6c:	88f8      	ldrh	r0, [r7, #6]
90005b6e:	893a      	ldrh	r2, [r7, #8]
90005b70:	8979      	ldrh	r1, [r7, #10]
90005b72:	697b      	ldr	r3, [r7, #20]
90005b74:	9301      	str	r3, [sp, #4]
90005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005b78:	9300      	str	r3, [sp, #0]
90005b7a:	4603      	mov	r3, r0
90005b7c:	68f8      	ldr	r0, [r7, #12]
90005b7e:	f000 f92d 	bl	90005ddc <I2C_RequestMemoryRead>
90005b82:	4603      	mov	r3, r0
90005b84:	2b00      	cmp	r3, #0
90005b86:	d005      	beq.n	90005b94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005b88:	68fb      	ldr	r3, [r7, #12]
90005b8a:	2200      	movs	r2, #0
90005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
90005b90:	2301      	movs	r3, #1
90005b92:	e0ad      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005b94:	68fb      	ldr	r3, [r7, #12]
90005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005b98:	b29b      	uxth	r3, r3
90005b9a:	2bff      	cmp	r3, #255	; 0xff
90005b9c:	d90e      	bls.n	90005bbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005b9e:	68fb      	ldr	r3, [r7, #12]
90005ba0:	22ff      	movs	r2, #255	; 0xff
90005ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005ba4:	68fb      	ldr	r3, [r7, #12]
90005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005ba8:	b2da      	uxtb	r2, r3
90005baa:	8979      	ldrh	r1, [r7, #10]
90005bac:	4b52      	ldr	r3, [pc, #328]	; (90005cf8 <HAL_I2C_Mem_Read+0x22c>)
90005bae:	9300      	str	r3, [sp, #0]
90005bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005bb4:	68f8      	ldr	r0, [r7, #12]
90005bb6:	f000 fb43 	bl	90006240 <I2C_TransferConfig>
90005bba:	e00f      	b.n	90005bdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005bbc:	68fb      	ldr	r3, [r7, #12]
90005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005bc0:	b29a      	uxth	r2, r3
90005bc2:	68fb      	ldr	r3, [r7, #12]
90005bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005bc6:	68fb      	ldr	r3, [r7, #12]
90005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005bca:	b2da      	uxtb	r2, r3
90005bcc:	8979      	ldrh	r1, [r7, #10]
90005bce:	4b4a      	ldr	r3, [pc, #296]	; (90005cf8 <HAL_I2C_Mem_Read+0x22c>)
90005bd0:	9300      	str	r3, [sp, #0]
90005bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005bd6:	68f8      	ldr	r0, [r7, #12]
90005bd8:	f000 fb32 	bl	90006240 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005bdc:	697b      	ldr	r3, [r7, #20]
90005bde:	9300      	str	r3, [sp, #0]
90005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005be2:	2200      	movs	r2, #0
90005be4:	2104      	movs	r1, #4
90005be6:	68f8      	ldr	r0, [r7, #12]
90005be8:	f000 f970 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005bec:	4603      	mov	r3, r0
90005bee:	2b00      	cmp	r3, #0
90005bf0:	d001      	beq.n	90005bf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005bf2:	2301      	movs	r3, #1
90005bf4:	e07c      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005bf6:	68fb      	ldr	r3, [r7, #12]
90005bf8:	681b      	ldr	r3, [r3, #0]
90005bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90005bfc:	68fb      	ldr	r3, [r7, #12]
90005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005c00:	b2d2      	uxtb	r2, r2
90005c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005c04:	68fb      	ldr	r3, [r7, #12]
90005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005c08:	1c5a      	adds	r2, r3, #1
90005c0a:	68fb      	ldr	r3, [r7, #12]
90005c0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
90005c0e:	68fb      	ldr	r3, [r7, #12]
90005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c12:	3b01      	subs	r3, #1
90005c14:	b29a      	uxth	r2, r3
90005c16:	68fb      	ldr	r3, [r7, #12]
90005c18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c1e:	b29b      	uxth	r3, r3
90005c20:	3b01      	subs	r3, #1
90005c22:	b29a      	uxth	r2, r3
90005c24:	68fb      	ldr	r3, [r7, #12]
90005c26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005c28:	68fb      	ldr	r3, [r7, #12]
90005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c2c:	b29b      	uxth	r3, r3
90005c2e:	2b00      	cmp	r3, #0
90005c30:	d034      	beq.n	90005c9c <HAL_I2C_Mem_Read+0x1d0>
90005c32:	68fb      	ldr	r3, [r7, #12]
90005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c36:	2b00      	cmp	r3, #0
90005c38:	d130      	bne.n	90005c9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005c3a:	697b      	ldr	r3, [r7, #20]
90005c3c:	9300      	str	r3, [sp, #0]
90005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005c40:	2200      	movs	r2, #0
90005c42:	2180      	movs	r1, #128	; 0x80
90005c44:	68f8      	ldr	r0, [r7, #12]
90005c46:	f000 f941 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005c4a:	4603      	mov	r3, r0
90005c4c:	2b00      	cmp	r3, #0
90005c4e:	d001      	beq.n	90005c54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005c50:	2301      	movs	r3, #1
90005c52:	e04d      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005c54:	68fb      	ldr	r3, [r7, #12]
90005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c58:	b29b      	uxth	r3, r3
90005c5a:	2bff      	cmp	r3, #255	; 0xff
90005c5c:	d90e      	bls.n	90005c7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005c5e:	68fb      	ldr	r3, [r7, #12]
90005c60:	22ff      	movs	r2, #255	; 0xff
90005c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005c64:	68fb      	ldr	r3, [r7, #12]
90005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c68:	b2da      	uxtb	r2, r3
90005c6a:	8979      	ldrh	r1, [r7, #10]
90005c6c:	2300      	movs	r3, #0
90005c6e:	9300      	str	r3, [sp, #0]
90005c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005c74:	68f8      	ldr	r0, [r7, #12]
90005c76:	f000 fae3 	bl	90006240 <I2C_TransferConfig>
90005c7a:	e00f      	b.n	90005c9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005c7c:	68fb      	ldr	r3, [r7, #12]
90005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c80:	b29a      	uxth	r2, r3
90005c82:	68fb      	ldr	r3, [r7, #12]
90005c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005c86:	68fb      	ldr	r3, [r7, #12]
90005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c8a:	b2da      	uxtb	r2, r3
90005c8c:	8979      	ldrh	r1, [r7, #10]
90005c8e:	2300      	movs	r3, #0
90005c90:	9300      	str	r3, [sp, #0]
90005c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005c96:	68f8      	ldr	r0, [r7, #12]
90005c98:	f000 fad2 	bl	90006240 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005c9c:	68fb      	ldr	r3, [r7, #12]
90005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005ca0:	b29b      	uxth	r3, r3
90005ca2:	2b00      	cmp	r3, #0
90005ca4:	d19a      	bne.n	90005bdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005ca6:	697a      	ldr	r2, [r7, #20]
90005ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90005caa:	68f8      	ldr	r0, [r7, #12]
90005cac:	f000 f9a4 	bl	90005ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
90005cb0:	4603      	mov	r3, r0
90005cb2:	2b00      	cmp	r3, #0
90005cb4:	d001      	beq.n	90005cba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005cb6:	2301      	movs	r3, #1
90005cb8:	e01a      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005cba:	68fb      	ldr	r3, [r7, #12]
90005cbc:	681b      	ldr	r3, [r3, #0]
90005cbe:	2220      	movs	r2, #32
90005cc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005cc2:	68fb      	ldr	r3, [r7, #12]
90005cc4:	681b      	ldr	r3, [r3, #0]
90005cc6:	6859      	ldr	r1, [r3, #4]
90005cc8:	68fb      	ldr	r3, [r7, #12]
90005cca:	681a      	ldr	r2, [r3, #0]
90005ccc:	4b0b      	ldr	r3, [pc, #44]	; (90005cfc <HAL_I2C_Mem_Read+0x230>)
90005cce:	400b      	ands	r3, r1
90005cd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005cd2:	68fb      	ldr	r3, [r7, #12]
90005cd4:	2220      	movs	r2, #32
90005cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005cda:	68fb      	ldr	r3, [r7, #12]
90005cdc:	2200      	movs	r2, #0
90005cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005ce2:	68fb      	ldr	r3, [r7, #12]
90005ce4:	2200      	movs	r2, #0
90005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90005cea:	2300      	movs	r3, #0
90005cec:	e000      	b.n	90005cf0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005cee:	2302      	movs	r3, #2
  }
}
90005cf0:	4618      	mov	r0, r3
90005cf2:	3718      	adds	r7, #24
90005cf4:	46bd      	mov	sp, r7
90005cf6:	bd80      	pop	{r7, pc}
90005cf8:	80002400 	.word	0x80002400
90005cfc:	fe00e800 	.word	0xfe00e800

90005d00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
90005d00:	b480      	push	{r7}
90005d02:	b083      	sub	sp, #12
90005d04:	af00      	add	r7, sp, #0
90005d06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005d08:	687b      	ldr	r3, [r7, #4]
90005d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005d0e:	b2db      	uxtb	r3, r3
}
90005d10:	4618      	mov	r0, r3
90005d12:	370c      	adds	r7, #12
90005d14:	46bd      	mov	sp, r7
90005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d1a:	4770      	bx	lr

90005d1c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
90005d1c:	b480      	push	{r7}
90005d1e:	b083      	sub	sp, #12
90005d20:	af00      	add	r7, sp, #0
90005d22:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005d24:	687b      	ldr	r3, [r7, #4]
90005d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
90005d28:	4618      	mov	r0, r3
90005d2a:	370c      	adds	r7, #12
90005d2c:	46bd      	mov	sp, r7
90005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d32:	4770      	bx	lr

90005d34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
90005d34:	b580      	push	{r7, lr}
90005d36:	b086      	sub	sp, #24
90005d38:	af02      	add	r7, sp, #8
90005d3a:	60f8      	str	r0, [r7, #12]
90005d3c:	4608      	mov	r0, r1
90005d3e:	4611      	mov	r1, r2
90005d40:	461a      	mov	r2, r3
90005d42:	4603      	mov	r3, r0
90005d44:	817b      	strh	r3, [r7, #10]
90005d46:	460b      	mov	r3, r1
90005d48:	813b      	strh	r3, [r7, #8]
90005d4a:	4613      	mov	r3, r2
90005d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90005d4e:	88fb      	ldrh	r3, [r7, #6]
90005d50:	b2da      	uxtb	r2, r3
90005d52:	8979      	ldrh	r1, [r7, #10]
90005d54:	4b20      	ldr	r3, [pc, #128]	; (90005dd8 <I2C_RequestMemoryWrite+0xa4>)
90005d56:	9300      	str	r3, [sp, #0]
90005d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005d5c:	68f8      	ldr	r0, [r7, #12]
90005d5e:	f000 fa6f 	bl	90006240 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d62:	69fa      	ldr	r2, [r7, #28]
90005d64:	69b9      	ldr	r1, [r7, #24]
90005d66:	68f8      	ldr	r0, [r7, #12]
90005d68:	f000 f8ff 	bl	90005f6a <I2C_WaitOnTXISFlagUntilTimeout>
90005d6c:	4603      	mov	r3, r0
90005d6e:	2b00      	cmp	r3, #0
90005d70:	d001      	beq.n	90005d76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90005d72:	2301      	movs	r3, #1
90005d74:	e02c      	b.n	90005dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005d76:	88fb      	ldrh	r3, [r7, #6]
90005d78:	2b01      	cmp	r3, #1
90005d7a:	d105      	bne.n	90005d88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d7c:	893b      	ldrh	r3, [r7, #8]
90005d7e:	b2da      	uxtb	r2, r3
90005d80:	68fb      	ldr	r3, [r7, #12]
90005d82:	681b      	ldr	r3, [r3, #0]
90005d84:	629a      	str	r2, [r3, #40]	; 0x28
90005d86:	e015      	b.n	90005db4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005d88:	893b      	ldrh	r3, [r7, #8]
90005d8a:	0a1b      	lsrs	r3, r3, #8
90005d8c:	b29b      	uxth	r3, r3
90005d8e:	b2da      	uxtb	r2, r3
90005d90:	68fb      	ldr	r3, [r7, #12]
90005d92:	681b      	ldr	r3, [r3, #0]
90005d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d96:	69fa      	ldr	r2, [r7, #28]
90005d98:	69b9      	ldr	r1, [r7, #24]
90005d9a:	68f8      	ldr	r0, [r7, #12]
90005d9c:	f000 f8e5 	bl	90005f6a <I2C_WaitOnTXISFlagUntilTimeout>
90005da0:	4603      	mov	r3, r0
90005da2:	2b00      	cmp	r3, #0
90005da4:	d001      	beq.n	90005daa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
90005da6:	2301      	movs	r3, #1
90005da8:	e012      	b.n	90005dd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005daa:	893b      	ldrh	r3, [r7, #8]
90005dac:	b2da      	uxtb	r2, r3
90005dae:	68fb      	ldr	r3, [r7, #12]
90005db0:	681b      	ldr	r3, [r3, #0]
90005db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90005db4:	69fb      	ldr	r3, [r7, #28]
90005db6:	9300      	str	r3, [sp, #0]
90005db8:	69bb      	ldr	r3, [r7, #24]
90005dba:	2200      	movs	r2, #0
90005dbc:	2180      	movs	r1, #128	; 0x80
90005dbe:	68f8      	ldr	r0, [r7, #12]
90005dc0:	f000 f884 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005dc4:	4603      	mov	r3, r0
90005dc6:	2b00      	cmp	r3, #0
90005dc8:	d001      	beq.n	90005dce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90005dca:	2301      	movs	r3, #1
90005dcc:	e000      	b.n	90005dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90005dce:	2300      	movs	r3, #0
}
90005dd0:	4618      	mov	r0, r3
90005dd2:	3710      	adds	r7, #16
90005dd4:	46bd      	mov	sp, r7
90005dd6:	bd80      	pop	{r7, pc}
90005dd8:	80002000 	.word	0x80002000

90005ddc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005ddc:	b580      	push	{r7, lr}
90005dde:	b086      	sub	sp, #24
90005de0:	af02      	add	r7, sp, #8
90005de2:	60f8      	str	r0, [r7, #12]
90005de4:	4608      	mov	r0, r1
90005de6:	4611      	mov	r1, r2
90005de8:	461a      	mov	r2, r3
90005dea:	4603      	mov	r3, r0
90005dec:	817b      	strh	r3, [r7, #10]
90005dee:	460b      	mov	r3, r1
90005df0:	813b      	strh	r3, [r7, #8]
90005df2:	4613      	mov	r3, r2
90005df4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005df6:	88fb      	ldrh	r3, [r7, #6]
90005df8:	b2da      	uxtb	r2, r3
90005dfa:	8979      	ldrh	r1, [r7, #10]
90005dfc:	4b20      	ldr	r3, [pc, #128]	; (90005e80 <I2C_RequestMemoryRead+0xa4>)
90005dfe:	9300      	str	r3, [sp, #0]
90005e00:	2300      	movs	r3, #0
90005e02:	68f8      	ldr	r0, [r7, #12]
90005e04:	f000 fa1c 	bl	90006240 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e08:	69fa      	ldr	r2, [r7, #28]
90005e0a:	69b9      	ldr	r1, [r7, #24]
90005e0c:	68f8      	ldr	r0, [r7, #12]
90005e0e:	f000 f8ac 	bl	90005f6a <I2C_WaitOnTXISFlagUntilTimeout>
90005e12:	4603      	mov	r3, r0
90005e14:	2b00      	cmp	r3, #0
90005e16:	d001      	beq.n	90005e1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005e18:	2301      	movs	r3, #1
90005e1a:	e02c      	b.n	90005e76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005e1c:	88fb      	ldrh	r3, [r7, #6]
90005e1e:	2b01      	cmp	r3, #1
90005e20:	d105      	bne.n	90005e2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e22:	893b      	ldrh	r3, [r7, #8]
90005e24:	b2da      	uxtb	r2, r3
90005e26:	68fb      	ldr	r3, [r7, #12]
90005e28:	681b      	ldr	r3, [r3, #0]
90005e2a:	629a      	str	r2, [r3, #40]	; 0x28
90005e2c:	e015      	b.n	90005e5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005e2e:	893b      	ldrh	r3, [r7, #8]
90005e30:	0a1b      	lsrs	r3, r3, #8
90005e32:	b29b      	uxth	r3, r3
90005e34:	b2da      	uxtb	r2, r3
90005e36:	68fb      	ldr	r3, [r7, #12]
90005e38:	681b      	ldr	r3, [r3, #0]
90005e3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e3c:	69fa      	ldr	r2, [r7, #28]
90005e3e:	69b9      	ldr	r1, [r7, #24]
90005e40:	68f8      	ldr	r0, [r7, #12]
90005e42:	f000 f892 	bl	90005f6a <I2C_WaitOnTXISFlagUntilTimeout>
90005e46:	4603      	mov	r3, r0
90005e48:	2b00      	cmp	r3, #0
90005e4a:	d001      	beq.n	90005e50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005e4c:	2301      	movs	r3, #1
90005e4e:	e012      	b.n	90005e76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e50:	893b      	ldrh	r3, [r7, #8]
90005e52:	b2da      	uxtb	r2, r3
90005e54:	68fb      	ldr	r3, [r7, #12]
90005e56:	681b      	ldr	r3, [r3, #0]
90005e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005e5a:	69fb      	ldr	r3, [r7, #28]
90005e5c:	9300      	str	r3, [sp, #0]
90005e5e:	69bb      	ldr	r3, [r7, #24]
90005e60:	2200      	movs	r2, #0
90005e62:	2140      	movs	r1, #64	; 0x40
90005e64:	68f8      	ldr	r0, [r7, #12]
90005e66:	f000 f831 	bl	90005ecc <I2C_WaitOnFlagUntilTimeout>
90005e6a:	4603      	mov	r3, r0
90005e6c:	2b00      	cmp	r3, #0
90005e6e:	d001      	beq.n	90005e74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005e70:	2301      	movs	r3, #1
90005e72:	e000      	b.n	90005e76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005e74:	2300      	movs	r3, #0
}
90005e76:	4618      	mov	r0, r3
90005e78:	3710      	adds	r7, #16
90005e7a:	46bd      	mov	sp, r7
90005e7c:	bd80      	pop	{r7, pc}
90005e7e:	bf00      	nop
90005e80:	80002000 	.word	0x80002000

90005e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005e84:	b480      	push	{r7}
90005e86:	b083      	sub	sp, #12
90005e88:	af00      	add	r7, sp, #0
90005e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005e8c:	687b      	ldr	r3, [r7, #4]
90005e8e:	681b      	ldr	r3, [r3, #0]
90005e90:	699b      	ldr	r3, [r3, #24]
90005e92:	f003 0302 	and.w	r3, r3, #2
90005e96:	2b02      	cmp	r3, #2
90005e98:	d103      	bne.n	90005ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005e9a:	687b      	ldr	r3, [r7, #4]
90005e9c:	681b      	ldr	r3, [r3, #0]
90005e9e:	2200      	movs	r2, #0
90005ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005ea2:	687b      	ldr	r3, [r7, #4]
90005ea4:	681b      	ldr	r3, [r3, #0]
90005ea6:	699b      	ldr	r3, [r3, #24]
90005ea8:	f003 0301 	and.w	r3, r3, #1
90005eac:	2b01      	cmp	r3, #1
90005eae:	d007      	beq.n	90005ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005eb0:	687b      	ldr	r3, [r7, #4]
90005eb2:	681b      	ldr	r3, [r3, #0]
90005eb4:	699a      	ldr	r2, [r3, #24]
90005eb6:	687b      	ldr	r3, [r7, #4]
90005eb8:	681b      	ldr	r3, [r3, #0]
90005eba:	f042 0201 	orr.w	r2, r2, #1
90005ebe:	619a      	str	r2, [r3, #24]
  }
}
90005ec0:	bf00      	nop
90005ec2:	370c      	adds	r7, #12
90005ec4:	46bd      	mov	sp, r7
90005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005eca:	4770      	bx	lr

90005ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005ecc:	b580      	push	{r7, lr}
90005ece:	b084      	sub	sp, #16
90005ed0:	af00      	add	r7, sp, #0
90005ed2:	60f8      	str	r0, [r7, #12]
90005ed4:	60b9      	str	r1, [r7, #8]
90005ed6:	603b      	str	r3, [r7, #0]
90005ed8:	4613      	mov	r3, r2
90005eda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005edc:	e031      	b.n	90005f42 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005ede:	683b      	ldr	r3, [r7, #0]
90005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005ee4:	d02d      	beq.n	90005f42 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005ee6:	f7fd fa77 	bl	900033d8 <HAL_GetTick>
90005eea:	4602      	mov	r2, r0
90005eec:	69bb      	ldr	r3, [r7, #24]
90005eee:	1ad3      	subs	r3, r2, r3
90005ef0:	683a      	ldr	r2, [r7, #0]
90005ef2:	429a      	cmp	r2, r3
90005ef4:	d302      	bcc.n	90005efc <I2C_WaitOnFlagUntilTimeout+0x30>
90005ef6:	683b      	ldr	r3, [r7, #0]
90005ef8:	2b00      	cmp	r3, #0
90005efa:	d122      	bne.n	90005f42 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005efc:	68fb      	ldr	r3, [r7, #12]
90005efe:	681b      	ldr	r3, [r3, #0]
90005f00:	699a      	ldr	r2, [r3, #24]
90005f02:	68bb      	ldr	r3, [r7, #8]
90005f04:	4013      	ands	r3, r2
90005f06:	68ba      	ldr	r2, [r7, #8]
90005f08:	429a      	cmp	r2, r3
90005f0a:	bf0c      	ite	eq
90005f0c:	2301      	moveq	r3, #1
90005f0e:	2300      	movne	r3, #0
90005f10:	b2db      	uxtb	r3, r3
90005f12:	461a      	mov	r2, r3
90005f14:	79fb      	ldrb	r3, [r7, #7]
90005f16:	429a      	cmp	r2, r3
90005f18:	d113      	bne.n	90005f42 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f1a:	68fb      	ldr	r3, [r7, #12]
90005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005f1e:	f043 0220 	orr.w	r2, r3, #32
90005f22:	68fb      	ldr	r3, [r7, #12]
90005f24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005f26:	68fb      	ldr	r3, [r7, #12]
90005f28:	2220      	movs	r2, #32
90005f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005f2e:	68fb      	ldr	r3, [r7, #12]
90005f30:	2200      	movs	r2, #0
90005f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005f36:	68fb      	ldr	r3, [r7, #12]
90005f38:	2200      	movs	r2, #0
90005f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
90005f3e:	2301      	movs	r3, #1
90005f40:	e00f      	b.n	90005f62 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005f42:	68fb      	ldr	r3, [r7, #12]
90005f44:	681b      	ldr	r3, [r3, #0]
90005f46:	699a      	ldr	r2, [r3, #24]
90005f48:	68bb      	ldr	r3, [r7, #8]
90005f4a:	4013      	ands	r3, r2
90005f4c:	68ba      	ldr	r2, [r7, #8]
90005f4e:	429a      	cmp	r2, r3
90005f50:	bf0c      	ite	eq
90005f52:	2301      	moveq	r3, #1
90005f54:	2300      	movne	r3, #0
90005f56:	b2db      	uxtb	r3, r3
90005f58:	461a      	mov	r2, r3
90005f5a:	79fb      	ldrb	r3, [r7, #7]
90005f5c:	429a      	cmp	r2, r3
90005f5e:	d0be      	beq.n	90005ede <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005f60:	2300      	movs	r3, #0
}
90005f62:	4618      	mov	r0, r3
90005f64:	3710      	adds	r7, #16
90005f66:	46bd      	mov	sp, r7
90005f68:	bd80      	pop	{r7, pc}

90005f6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005f6a:	b580      	push	{r7, lr}
90005f6c:	b084      	sub	sp, #16
90005f6e:	af00      	add	r7, sp, #0
90005f70:	60f8      	str	r0, [r7, #12]
90005f72:	60b9      	str	r1, [r7, #8]
90005f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005f76:	e033      	b.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f78:	687a      	ldr	r2, [r7, #4]
90005f7a:	68b9      	ldr	r1, [r7, #8]
90005f7c:	68f8      	ldr	r0, [r7, #12]
90005f7e:	f000 f87f 	bl	90006080 <I2C_IsErrorOccurred>
90005f82:	4603      	mov	r3, r0
90005f84:	2b00      	cmp	r3, #0
90005f86:	d001      	beq.n	90005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005f88:	2301      	movs	r3, #1
90005f8a:	e031      	b.n	90005ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005f8c:	68bb      	ldr	r3, [r7, #8]
90005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005f92:	d025      	beq.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f94:	f7fd fa20 	bl	900033d8 <HAL_GetTick>
90005f98:	4602      	mov	r2, r0
90005f9a:	687b      	ldr	r3, [r7, #4]
90005f9c:	1ad3      	subs	r3, r2, r3
90005f9e:	68ba      	ldr	r2, [r7, #8]
90005fa0:	429a      	cmp	r2, r3
90005fa2:	d302      	bcc.n	90005faa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005fa4:	68bb      	ldr	r3, [r7, #8]
90005fa6:	2b00      	cmp	r3, #0
90005fa8:	d11a      	bne.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005faa:	68fb      	ldr	r3, [r7, #12]
90005fac:	681b      	ldr	r3, [r3, #0]
90005fae:	699b      	ldr	r3, [r3, #24]
90005fb0:	f003 0302 	and.w	r3, r3, #2
90005fb4:	2b02      	cmp	r3, #2
90005fb6:	d013      	beq.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005fb8:	68fb      	ldr	r3, [r7, #12]
90005fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005fbc:	f043 0220 	orr.w	r2, r3, #32
90005fc0:	68fb      	ldr	r3, [r7, #12]
90005fc2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005fc4:	68fb      	ldr	r3, [r7, #12]
90005fc6:	2220      	movs	r2, #32
90005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005fcc:	68fb      	ldr	r3, [r7, #12]
90005fce:	2200      	movs	r2, #0
90005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005fd4:	68fb      	ldr	r3, [r7, #12]
90005fd6:	2200      	movs	r2, #0
90005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
90005fdc:	2301      	movs	r3, #1
90005fde:	e007      	b.n	90005ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005fe0:	68fb      	ldr	r3, [r7, #12]
90005fe2:	681b      	ldr	r3, [r3, #0]
90005fe4:	699b      	ldr	r3, [r3, #24]
90005fe6:	f003 0302 	and.w	r3, r3, #2
90005fea:	2b02      	cmp	r3, #2
90005fec:	d1c4      	bne.n	90005f78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90005fee:	2300      	movs	r3, #0
}
90005ff0:	4618      	mov	r0, r3
90005ff2:	3710      	adds	r7, #16
90005ff4:	46bd      	mov	sp, r7
90005ff6:	bd80      	pop	{r7, pc}

90005ff8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005ff8:	b580      	push	{r7, lr}
90005ffa:	b084      	sub	sp, #16
90005ffc:	af00      	add	r7, sp, #0
90005ffe:	60f8      	str	r0, [r7, #12]
90006000:	60b9      	str	r1, [r7, #8]
90006002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006004:	e02f      	b.n	90006066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90006006:	687a      	ldr	r2, [r7, #4]
90006008:	68b9      	ldr	r1, [r7, #8]
9000600a:	68f8      	ldr	r0, [r7, #12]
9000600c:	f000 f838 	bl	90006080 <I2C_IsErrorOccurred>
90006010:	4603      	mov	r3, r0
90006012:	2b00      	cmp	r3, #0
90006014:	d001      	beq.n	9000601a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006016:	2301      	movs	r3, #1
90006018:	e02d      	b.n	90006076 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000601a:	f7fd f9dd 	bl	900033d8 <HAL_GetTick>
9000601e:	4602      	mov	r2, r0
90006020:	687b      	ldr	r3, [r7, #4]
90006022:	1ad3      	subs	r3, r2, r3
90006024:	68ba      	ldr	r2, [r7, #8]
90006026:	429a      	cmp	r2, r3
90006028:	d302      	bcc.n	90006030 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
9000602a:	68bb      	ldr	r3, [r7, #8]
9000602c:	2b00      	cmp	r3, #0
9000602e:	d11a      	bne.n	90006066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006030:	68fb      	ldr	r3, [r7, #12]
90006032:	681b      	ldr	r3, [r3, #0]
90006034:	699b      	ldr	r3, [r3, #24]
90006036:	f003 0320 	and.w	r3, r3, #32
9000603a:	2b20      	cmp	r3, #32
9000603c:	d013      	beq.n	90006066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000603e:	68fb      	ldr	r3, [r7, #12]
90006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006042:	f043 0220 	orr.w	r2, r3, #32
90006046:	68fb      	ldr	r3, [r7, #12]
90006048:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
9000604a:	68fb      	ldr	r3, [r7, #12]
9000604c:	2220      	movs	r2, #32
9000604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006052:	68fb      	ldr	r3, [r7, #12]
90006054:	2200      	movs	r2, #0
90006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
9000605a:	68fb      	ldr	r3, [r7, #12]
9000605c:	2200      	movs	r2, #0
9000605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
90006062:	2301      	movs	r3, #1
90006064:	e007      	b.n	90006076 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006066:	68fb      	ldr	r3, [r7, #12]
90006068:	681b      	ldr	r3, [r3, #0]
9000606a:	699b      	ldr	r3, [r3, #24]
9000606c:	f003 0320 	and.w	r3, r3, #32
90006070:	2b20      	cmp	r3, #32
90006072:	d1c8      	bne.n	90006006 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006074:	2300      	movs	r3, #0
}
90006076:	4618      	mov	r0, r3
90006078:	3710      	adds	r7, #16
9000607a:	46bd      	mov	sp, r7
9000607c:	bd80      	pop	{r7, pc}
	...

90006080 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006080:	b580      	push	{r7, lr}
90006082:	b08a      	sub	sp, #40	; 0x28
90006084:	af00      	add	r7, sp, #0
90006086:	60f8      	str	r0, [r7, #12]
90006088:	60b9      	str	r1, [r7, #8]
9000608a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000608c:	2300      	movs	r3, #0
9000608e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006092:	68fb      	ldr	r3, [r7, #12]
90006094:	681b      	ldr	r3, [r3, #0]
90006096:	699b      	ldr	r3, [r3, #24]
90006098:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
9000609a:	2300      	movs	r3, #0
9000609c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000609e:	687b      	ldr	r3, [r7, #4]
900060a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900060a2:	69bb      	ldr	r3, [r7, #24]
900060a4:	f003 0310 	and.w	r3, r3, #16
900060a8:	2b00      	cmp	r3, #0
900060aa:	d068      	beq.n	9000617e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900060ac:	68fb      	ldr	r3, [r7, #12]
900060ae:	681b      	ldr	r3, [r3, #0]
900060b0:	2210      	movs	r2, #16
900060b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900060b4:	e049      	b.n	9000614a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900060b6:	68bb      	ldr	r3, [r7, #8]
900060b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900060bc:	d045      	beq.n	9000614a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900060be:	f7fd f98b 	bl	900033d8 <HAL_GetTick>
900060c2:	4602      	mov	r2, r0
900060c4:	69fb      	ldr	r3, [r7, #28]
900060c6:	1ad3      	subs	r3, r2, r3
900060c8:	68ba      	ldr	r2, [r7, #8]
900060ca:	429a      	cmp	r2, r3
900060cc:	d302      	bcc.n	900060d4 <I2C_IsErrorOccurred+0x54>
900060ce:	68bb      	ldr	r3, [r7, #8]
900060d0:	2b00      	cmp	r3, #0
900060d2:	d13a      	bne.n	9000614a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900060d4:	68fb      	ldr	r3, [r7, #12]
900060d6:	681b      	ldr	r3, [r3, #0]
900060d8:	685b      	ldr	r3, [r3, #4]
900060da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900060de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
900060e0:	68fb      	ldr	r3, [r7, #12]
900060e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900060e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900060e8:	68fb      	ldr	r3, [r7, #12]
900060ea:	681b      	ldr	r3, [r3, #0]
900060ec:	699b      	ldr	r3, [r3, #24]
900060ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900060f6:	d121      	bne.n	9000613c <I2C_IsErrorOccurred+0xbc>
900060f8:	697b      	ldr	r3, [r7, #20]
900060fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900060fe:	d01d      	beq.n	9000613c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
90006100:	7cfb      	ldrb	r3, [r7, #19]
90006102:	2b20      	cmp	r3, #32
90006104:	d01a      	beq.n	9000613c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90006106:	68fb      	ldr	r3, [r7, #12]
90006108:	681b      	ldr	r3, [r3, #0]
9000610a:	685a      	ldr	r2, [r3, #4]
9000610c:	68fb      	ldr	r3, [r7, #12]
9000610e:	681b      	ldr	r3, [r3, #0]
90006110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90006114:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006116:	f7fd f95f 	bl	900033d8 <HAL_GetTick>
9000611a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000611c:	e00e      	b.n	9000613c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000611e:	f7fd f95b 	bl	900033d8 <HAL_GetTick>
90006122:	4602      	mov	r2, r0
90006124:	69fb      	ldr	r3, [r7, #28]
90006126:	1ad3      	subs	r3, r2, r3
90006128:	2b19      	cmp	r3, #25
9000612a:	d907      	bls.n	9000613c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000612c:	6a3b      	ldr	r3, [r7, #32]
9000612e:	f043 0320 	orr.w	r3, r3, #32
90006132:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006134:	2301      	movs	r3, #1
90006136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
9000613a:	e006      	b.n	9000614a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000613c:	68fb      	ldr	r3, [r7, #12]
9000613e:	681b      	ldr	r3, [r3, #0]
90006140:	699b      	ldr	r3, [r3, #24]
90006142:	f003 0320 	and.w	r3, r3, #32
90006146:	2b20      	cmp	r3, #32
90006148:	d1e9      	bne.n	9000611e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000614a:	68fb      	ldr	r3, [r7, #12]
9000614c:	681b      	ldr	r3, [r3, #0]
9000614e:	699b      	ldr	r3, [r3, #24]
90006150:	f003 0320 	and.w	r3, r3, #32
90006154:	2b20      	cmp	r3, #32
90006156:	d003      	beq.n	90006160 <I2C_IsErrorOccurred+0xe0>
90006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000615c:	2b00      	cmp	r3, #0
9000615e:	d0aa      	beq.n	900060b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90006164:	2b00      	cmp	r3, #0
90006166:	d103      	bne.n	90006170 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006168:	68fb      	ldr	r3, [r7, #12]
9000616a:	681b      	ldr	r3, [r3, #0]
9000616c:	2220      	movs	r2, #32
9000616e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006170:	6a3b      	ldr	r3, [r7, #32]
90006172:	f043 0304 	orr.w	r3, r3, #4
90006176:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006178:	2301      	movs	r3, #1
9000617a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000617e:	68fb      	ldr	r3, [r7, #12]
90006180:	681b      	ldr	r3, [r3, #0]
90006182:	699b      	ldr	r3, [r3, #24]
90006184:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006186:	69bb      	ldr	r3, [r7, #24]
90006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000618c:	2b00      	cmp	r3, #0
9000618e:	d00b      	beq.n	900061a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006190:	6a3b      	ldr	r3, [r7, #32]
90006192:	f043 0301 	orr.w	r3, r3, #1
90006196:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006198:	68fb      	ldr	r3, [r7, #12]
9000619a:	681b      	ldr	r3, [r3, #0]
9000619c:	f44f 7280 	mov.w	r2, #256	; 0x100
900061a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061a2:	2301      	movs	r3, #1
900061a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900061a8:	69bb      	ldr	r3, [r7, #24]
900061aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900061ae:	2b00      	cmp	r3, #0
900061b0:	d00b      	beq.n	900061ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900061b2:	6a3b      	ldr	r3, [r7, #32]
900061b4:	f043 0308 	orr.w	r3, r3, #8
900061b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900061ba:	68fb      	ldr	r3, [r7, #12]
900061bc:	681b      	ldr	r3, [r3, #0]
900061be:	f44f 6280 	mov.w	r2, #1024	; 0x400
900061c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061c4:	2301      	movs	r3, #1
900061c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900061ca:	69bb      	ldr	r3, [r7, #24]
900061cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
900061d0:	2b00      	cmp	r3, #0
900061d2:	d00b      	beq.n	900061ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900061d4:	6a3b      	ldr	r3, [r7, #32]
900061d6:	f043 0302 	orr.w	r3, r3, #2
900061da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900061dc:	68fb      	ldr	r3, [r7, #12]
900061de:	681b      	ldr	r3, [r3, #0]
900061e0:	f44f 7200 	mov.w	r2, #512	; 0x200
900061e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061e6:	2301      	movs	r3, #1
900061e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
900061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900061f0:	2b00      	cmp	r3, #0
900061f2:	d01c      	beq.n	9000622e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
900061f4:	68f8      	ldr	r0, [r7, #12]
900061f6:	f7ff fe45 	bl	90005e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900061fa:	68fb      	ldr	r3, [r7, #12]
900061fc:	681b      	ldr	r3, [r3, #0]
900061fe:	6859      	ldr	r1, [r3, #4]
90006200:	68fb      	ldr	r3, [r7, #12]
90006202:	681a      	ldr	r2, [r3, #0]
90006204:	4b0d      	ldr	r3, [pc, #52]	; (9000623c <I2C_IsErrorOccurred+0x1bc>)
90006206:	400b      	ands	r3, r1
90006208:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
9000620a:	68fb      	ldr	r3, [r7, #12]
9000620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000620e:	6a3b      	ldr	r3, [r7, #32]
90006210:	431a      	orrs	r2, r3
90006212:	68fb      	ldr	r3, [r7, #12]
90006214:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006216:	68fb      	ldr	r3, [r7, #12]
90006218:	2220      	movs	r2, #32
9000621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000621e:	68fb      	ldr	r3, [r7, #12]
90006220:	2200      	movs	r2, #0
90006222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006226:	68fb      	ldr	r3, [r7, #12]
90006228:	2200      	movs	r2, #0
9000622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
9000622e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
90006232:	4618      	mov	r0, r3
90006234:	3728      	adds	r7, #40	; 0x28
90006236:	46bd      	mov	sp, r7
90006238:	bd80      	pop	{r7, pc}
9000623a:	bf00      	nop
9000623c:	fe00e800 	.word	0xfe00e800

90006240 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006240:	b480      	push	{r7}
90006242:	b087      	sub	sp, #28
90006244:	af00      	add	r7, sp, #0
90006246:	60f8      	str	r0, [r7, #12]
90006248:	607b      	str	r3, [r7, #4]
9000624a:	460b      	mov	r3, r1
9000624c:	817b      	strh	r3, [r7, #10]
9000624e:	4613      	mov	r3, r2
90006250:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006252:	897b      	ldrh	r3, [r7, #10]
90006254:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006258:	7a7b      	ldrb	r3, [r7, #9]
9000625a:	041b      	lsls	r3, r3, #16
9000625c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006260:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006262:	687b      	ldr	r3, [r7, #4]
90006264:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006266:	6a3b      	ldr	r3, [r7, #32]
90006268:	4313      	orrs	r3, r2
9000626a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
9000626e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006270:	68fb      	ldr	r3, [r7, #12]
90006272:	681b      	ldr	r3, [r3, #0]
90006274:	685a      	ldr	r2, [r3, #4]
90006276:	6a3b      	ldr	r3, [r7, #32]
90006278:	0d5b      	lsrs	r3, r3, #21
9000627a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
9000627e:	4b08      	ldr	r3, [pc, #32]	; (900062a0 <I2C_TransferConfig+0x60>)
90006280:	430b      	orrs	r3, r1
90006282:	43db      	mvns	r3, r3
90006284:	ea02 0103 	and.w	r1, r2, r3
90006288:	68fb      	ldr	r3, [r7, #12]
9000628a:	681b      	ldr	r3, [r3, #0]
9000628c:	697a      	ldr	r2, [r7, #20]
9000628e:	430a      	orrs	r2, r1
90006290:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006292:	bf00      	nop
90006294:	371c      	adds	r7, #28
90006296:	46bd      	mov	sp, r7
90006298:	f85d 7b04 	ldr.w	r7, [sp], #4
9000629c:	4770      	bx	lr
9000629e:	bf00      	nop
900062a0:	03ff63ff 	.word	0x03ff63ff

900062a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
900062a4:	b480      	push	{r7}
900062a6:	b083      	sub	sp, #12
900062a8:	af00      	add	r7, sp, #0
900062aa:	6078      	str	r0, [r7, #4]
900062ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900062ae:	687b      	ldr	r3, [r7, #4]
900062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900062b4:	b2db      	uxtb	r3, r3
900062b6:	2b20      	cmp	r3, #32
900062b8:	d138      	bne.n	9000632c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900062ba:	687b      	ldr	r3, [r7, #4]
900062bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900062c0:	2b01      	cmp	r3, #1
900062c2:	d101      	bne.n	900062c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900062c4:	2302      	movs	r3, #2
900062c6:	e032      	b.n	9000632e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900062c8:	687b      	ldr	r3, [r7, #4]
900062ca:	2201      	movs	r2, #1
900062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900062d0:	687b      	ldr	r3, [r7, #4]
900062d2:	2224      	movs	r2, #36	; 0x24
900062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900062d8:	687b      	ldr	r3, [r7, #4]
900062da:	681b      	ldr	r3, [r3, #0]
900062dc:	681a      	ldr	r2, [r3, #0]
900062de:	687b      	ldr	r3, [r7, #4]
900062e0:	681b      	ldr	r3, [r3, #0]
900062e2:	f022 0201 	bic.w	r2, r2, #1
900062e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900062e8:	687b      	ldr	r3, [r7, #4]
900062ea:	681b      	ldr	r3, [r3, #0]
900062ec:	681a      	ldr	r2, [r3, #0]
900062ee:	687b      	ldr	r3, [r7, #4]
900062f0:	681b      	ldr	r3, [r3, #0]
900062f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
900062f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
900062f8:	687b      	ldr	r3, [r7, #4]
900062fa:	681b      	ldr	r3, [r3, #0]
900062fc:	6819      	ldr	r1, [r3, #0]
900062fe:	687b      	ldr	r3, [r7, #4]
90006300:	681b      	ldr	r3, [r3, #0]
90006302:	683a      	ldr	r2, [r7, #0]
90006304:	430a      	orrs	r2, r1
90006306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006308:	687b      	ldr	r3, [r7, #4]
9000630a:	681b      	ldr	r3, [r3, #0]
9000630c:	681a      	ldr	r2, [r3, #0]
9000630e:	687b      	ldr	r3, [r7, #4]
90006310:	681b      	ldr	r3, [r3, #0]
90006312:	f042 0201 	orr.w	r2, r2, #1
90006316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006318:	687b      	ldr	r3, [r7, #4]
9000631a:	2220      	movs	r2, #32
9000631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006320:	687b      	ldr	r3, [r7, #4]
90006322:	2200      	movs	r2, #0
90006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90006328:	2300      	movs	r3, #0
9000632a:	e000      	b.n	9000632e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
9000632c:	2302      	movs	r3, #2
  }
}
9000632e:	4618      	mov	r0, r3
90006330:	370c      	adds	r7, #12
90006332:	46bd      	mov	sp, r7
90006334:	f85d 7b04 	ldr.w	r7, [sp], #4
90006338:	4770      	bx	lr

9000633a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
9000633a:	b480      	push	{r7}
9000633c:	b085      	sub	sp, #20
9000633e:	af00      	add	r7, sp, #0
90006340:	6078      	str	r0, [r7, #4]
90006342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006344:	687b      	ldr	r3, [r7, #4]
90006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
9000634a:	b2db      	uxtb	r3, r3
9000634c:	2b20      	cmp	r3, #32
9000634e:	d139      	bne.n	900063c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006350:	687b      	ldr	r3, [r7, #4]
90006352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90006356:	2b01      	cmp	r3, #1
90006358:	d101      	bne.n	9000635e <HAL_I2CEx_ConfigDigitalFilter+0x24>
9000635a:	2302      	movs	r3, #2
9000635c:	e033      	b.n	900063c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000635e:	687b      	ldr	r3, [r7, #4]
90006360:	2201      	movs	r2, #1
90006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006366:	687b      	ldr	r3, [r7, #4]
90006368:	2224      	movs	r2, #36	; 0x24
9000636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000636e:	687b      	ldr	r3, [r7, #4]
90006370:	681b      	ldr	r3, [r3, #0]
90006372:	681a      	ldr	r2, [r3, #0]
90006374:	687b      	ldr	r3, [r7, #4]
90006376:	681b      	ldr	r3, [r3, #0]
90006378:	f022 0201 	bic.w	r2, r2, #1
9000637c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000637e:	687b      	ldr	r3, [r7, #4]
90006380:	681b      	ldr	r3, [r3, #0]
90006382:	681b      	ldr	r3, [r3, #0]
90006384:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006386:	68fb      	ldr	r3, [r7, #12]
90006388:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000638c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000638e:	683b      	ldr	r3, [r7, #0]
90006390:	021b      	lsls	r3, r3, #8
90006392:	68fa      	ldr	r2, [r7, #12]
90006394:	4313      	orrs	r3, r2
90006396:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006398:	687b      	ldr	r3, [r7, #4]
9000639a:	681b      	ldr	r3, [r3, #0]
9000639c:	68fa      	ldr	r2, [r7, #12]
9000639e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900063a0:	687b      	ldr	r3, [r7, #4]
900063a2:	681b      	ldr	r3, [r3, #0]
900063a4:	681a      	ldr	r2, [r3, #0]
900063a6:	687b      	ldr	r3, [r7, #4]
900063a8:	681b      	ldr	r3, [r3, #0]
900063aa:	f042 0201 	orr.w	r2, r2, #1
900063ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900063b0:	687b      	ldr	r3, [r7, #4]
900063b2:	2220      	movs	r2, #32
900063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900063b8:	687b      	ldr	r3, [r7, #4]
900063ba:	2200      	movs	r2, #0
900063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900063c0:	2300      	movs	r3, #0
900063c2:	e000      	b.n	900063c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900063c4:	2302      	movs	r3, #2
  }
}
900063c6:	4618      	mov	r0, r3
900063c8:	3714      	adds	r7, #20
900063ca:	46bd      	mov	sp, r7
900063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900063d0:	4770      	bx	lr
	...

900063d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900063d4:	b580      	push	{r7, lr}
900063d6:	b084      	sub	sp, #16
900063d8:	af00      	add	r7, sp, #0
900063da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900063dc:	687b      	ldr	r3, [r7, #4]
900063de:	2b00      	cmp	r3, #0
900063e0:	d101      	bne.n	900063e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900063e2:	2301      	movs	r3, #1
900063e4:	e0bf      	b.n	90006566 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900063e6:	687b      	ldr	r3, [r7, #4]
900063e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
900063ec:	b2db      	uxtb	r3, r3
900063ee:	2b00      	cmp	r3, #0
900063f0:	d106      	bne.n	90006400 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
900063f2:	687b      	ldr	r3, [r7, #4]
900063f4:	2200      	movs	r2, #0
900063f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
900063fa:	6878      	ldr	r0, [r7, #4]
900063fc:	f000 f8ba 	bl	90006574 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90006400:	687b      	ldr	r3, [r7, #4]
90006402:	2202      	movs	r2, #2
90006404:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90006408:	687b      	ldr	r3, [r7, #4]
9000640a:	681b      	ldr	r3, [r3, #0]
9000640c:	699a      	ldr	r2, [r3, #24]
9000640e:	687b      	ldr	r3, [r7, #4]
90006410:	681b      	ldr	r3, [r3, #0]
90006412:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90006416:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006418:	687b      	ldr	r3, [r7, #4]
9000641a:	681b      	ldr	r3, [r3, #0]
9000641c:	6999      	ldr	r1, [r3, #24]
9000641e:	687b      	ldr	r3, [r7, #4]
90006420:	685a      	ldr	r2, [r3, #4]
90006422:	687b      	ldr	r3, [r7, #4]
90006424:	689b      	ldr	r3, [r3, #8]
90006426:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006428:	687b      	ldr	r3, [r7, #4]
9000642a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000642c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000642e:	687b      	ldr	r3, [r7, #4]
90006430:	691b      	ldr	r3, [r3, #16]
90006432:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006434:	687b      	ldr	r3, [r7, #4]
90006436:	681b      	ldr	r3, [r3, #0]
90006438:	430a      	orrs	r2, r1
9000643a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000643c:	687b      	ldr	r3, [r7, #4]
9000643e:	681b      	ldr	r3, [r3, #0]
90006440:	6899      	ldr	r1, [r3, #8]
90006442:	687b      	ldr	r3, [r7, #4]
90006444:	681a      	ldr	r2, [r3, #0]
90006446:	4b4a      	ldr	r3, [pc, #296]	; (90006570 <HAL_LTDC_Init+0x19c>)
90006448:	400b      	ands	r3, r1
9000644a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000644c:	687b      	ldr	r3, [r7, #4]
9000644e:	695b      	ldr	r3, [r3, #20]
90006450:	041b      	lsls	r3, r3, #16
90006452:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90006454:	687b      	ldr	r3, [r7, #4]
90006456:	681b      	ldr	r3, [r3, #0]
90006458:	6899      	ldr	r1, [r3, #8]
9000645a:	687b      	ldr	r3, [r7, #4]
9000645c:	699a      	ldr	r2, [r3, #24]
9000645e:	68fb      	ldr	r3, [r7, #12]
90006460:	431a      	orrs	r2, r3
90006462:	687b      	ldr	r3, [r7, #4]
90006464:	681b      	ldr	r3, [r3, #0]
90006466:	430a      	orrs	r2, r1
90006468:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000646a:	687b      	ldr	r3, [r7, #4]
9000646c:	681b      	ldr	r3, [r3, #0]
9000646e:	68d9      	ldr	r1, [r3, #12]
90006470:	687b      	ldr	r3, [r7, #4]
90006472:	681a      	ldr	r2, [r3, #0]
90006474:	4b3e      	ldr	r3, [pc, #248]	; (90006570 <HAL_LTDC_Init+0x19c>)
90006476:	400b      	ands	r3, r1
90006478:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000647a:	687b      	ldr	r3, [r7, #4]
9000647c:	69db      	ldr	r3, [r3, #28]
9000647e:	041b      	lsls	r3, r3, #16
90006480:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90006482:	687b      	ldr	r3, [r7, #4]
90006484:	681b      	ldr	r3, [r3, #0]
90006486:	68d9      	ldr	r1, [r3, #12]
90006488:	687b      	ldr	r3, [r7, #4]
9000648a:	6a1a      	ldr	r2, [r3, #32]
9000648c:	68fb      	ldr	r3, [r7, #12]
9000648e:	431a      	orrs	r2, r3
90006490:	687b      	ldr	r3, [r7, #4]
90006492:	681b      	ldr	r3, [r3, #0]
90006494:	430a      	orrs	r2, r1
90006496:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90006498:	687b      	ldr	r3, [r7, #4]
9000649a:	681b      	ldr	r3, [r3, #0]
9000649c:	6919      	ldr	r1, [r3, #16]
9000649e:	687b      	ldr	r3, [r7, #4]
900064a0:	681a      	ldr	r2, [r3, #0]
900064a2:	4b33      	ldr	r3, [pc, #204]	; (90006570 <HAL_LTDC_Init+0x19c>)
900064a4:	400b      	ands	r3, r1
900064a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
900064a8:	687b      	ldr	r3, [r7, #4]
900064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900064ac:	041b      	lsls	r3, r3, #16
900064ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900064b0:	687b      	ldr	r3, [r7, #4]
900064b2:	681b      	ldr	r3, [r3, #0]
900064b4:	6919      	ldr	r1, [r3, #16]
900064b6:	687b      	ldr	r3, [r7, #4]
900064b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900064ba:	68fb      	ldr	r3, [r7, #12]
900064bc:	431a      	orrs	r2, r3
900064be:	687b      	ldr	r3, [r7, #4]
900064c0:	681b      	ldr	r3, [r3, #0]
900064c2:	430a      	orrs	r2, r1
900064c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900064c6:	687b      	ldr	r3, [r7, #4]
900064c8:	681b      	ldr	r3, [r3, #0]
900064ca:	6959      	ldr	r1, [r3, #20]
900064cc:	687b      	ldr	r3, [r7, #4]
900064ce:	681a      	ldr	r2, [r3, #0]
900064d0:	4b27      	ldr	r3, [pc, #156]	; (90006570 <HAL_LTDC_Init+0x19c>)
900064d2:	400b      	ands	r3, r1
900064d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900064d6:	687b      	ldr	r3, [r7, #4]
900064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900064da:	041b      	lsls	r3, r3, #16
900064dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900064de:	687b      	ldr	r3, [r7, #4]
900064e0:	681b      	ldr	r3, [r3, #0]
900064e2:	6959      	ldr	r1, [r3, #20]
900064e4:	687b      	ldr	r3, [r7, #4]
900064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900064e8:	68fb      	ldr	r3, [r7, #12]
900064ea:	431a      	orrs	r2, r3
900064ec:	687b      	ldr	r3, [r7, #4]
900064ee:	681b      	ldr	r3, [r3, #0]
900064f0:	430a      	orrs	r2, r1
900064f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900064f4:	687b      	ldr	r3, [r7, #4]
900064f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
900064fa:	021b      	lsls	r3, r3, #8
900064fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900064fe:	687b      	ldr	r3, [r7, #4]
90006500:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
90006504:	041b      	lsls	r3, r3, #16
90006506:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	681b      	ldr	r3, [r3, #0]
9000650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000650e:	687b      	ldr	r3, [r7, #4]
90006510:	681b      	ldr	r3, [r3, #0]
90006512:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
90006516:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006518:	687b      	ldr	r3, [r7, #4]
9000651a:	681b      	ldr	r3, [r3, #0]
9000651c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000651e:	68ba      	ldr	r2, [r7, #8]
90006520:	68fb      	ldr	r3, [r7, #12]
90006522:	4313      	orrs	r3, r2
90006524:	687a      	ldr	r2, [r7, #4]
90006526:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
9000652a:	431a      	orrs	r2, r3
9000652c:	687b      	ldr	r3, [r7, #4]
9000652e:	681b      	ldr	r3, [r3, #0]
90006530:	430a      	orrs	r2, r1
90006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006534:	687b      	ldr	r3, [r7, #4]
90006536:	681b      	ldr	r3, [r3, #0]
90006538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000653a:	687b      	ldr	r3, [r7, #4]
9000653c:	681b      	ldr	r3, [r3, #0]
9000653e:	f042 0206 	orr.w	r2, r2, #6
90006542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006544:	687b      	ldr	r3, [r7, #4]
90006546:	681b      	ldr	r3, [r3, #0]
90006548:	699a      	ldr	r2, [r3, #24]
9000654a:	687b      	ldr	r3, [r7, #4]
9000654c:	681b      	ldr	r3, [r3, #0]
9000654e:	f042 0201 	orr.w	r2, r2, #1
90006552:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006554:	687b      	ldr	r3, [r7, #4]
90006556:	2200      	movs	r2, #0
90006558:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000655c:	687b      	ldr	r3, [r7, #4]
9000655e:	2201      	movs	r2, #1
90006560:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
90006564:	2300      	movs	r3, #0
}
90006566:	4618      	mov	r0, r3
90006568:	3710      	adds	r7, #16
9000656a:	46bd      	mov	sp, r7
9000656c:	bd80      	pop	{r7, pc}
9000656e:	bf00      	nop
90006570:	f000f800 	.word	0xf000f800

90006574 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006574:	b480      	push	{r7}
90006576:	b083      	sub	sp, #12
90006578:	af00      	add	r7, sp, #0
9000657a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
9000657c:	bf00      	nop
9000657e:	370c      	adds	r7, #12
90006580:	46bd      	mov	sp, r7
90006582:	f85d 7b04 	ldr.w	r7, [sp], #4
90006586:	4770      	bx	lr

90006588 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006588:	b5b0      	push	{r4, r5, r7, lr}
9000658a:	b084      	sub	sp, #16
9000658c:	af00      	add	r7, sp, #0
9000658e:	60f8      	str	r0, [r7, #12]
90006590:	60b9      	str	r1, [r7, #8]
90006592:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006594:	68fb      	ldr	r3, [r7, #12]
90006596:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
9000659a:	2b01      	cmp	r3, #1
9000659c:	d101      	bne.n	900065a2 <HAL_LTDC_ConfigLayer+0x1a>
9000659e:	2302      	movs	r3, #2
900065a0:	e02c      	b.n	900065fc <HAL_LTDC_ConfigLayer+0x74>
900065a2:	68fb      	ldr	r3, [r7, #12]
900065a4:	2201      	movs	r2, #1
900065a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900065aa:	68fb      	ldr	r3, [r7, #12]
900065ac:	2202      	movs	r2, #2
900065ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900065b2:	68fa      	ldr	r2, [r7, #12]
900065b4:	687b      	ldr	r3, [r7, #4]
900065b6:	2134      	movs	r1, #52	; 0x34
900065b8:	fb01 f303 	mul.w	r3, r1, r3
900065bc:	4413      	add	r3, r2
900065be:	f103 0238 	add.w	r2, r3, #56	; 0x38
900065c2:	68bb      	ldr	r3, [r7, #8]
900065c4:	4614      	mov	r4, r2
900065c6:	461d      	mov	r5, r3
900065c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065d4:	682b      	ldr	r3, [r5, #0]
900065d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900065d8:	687a      	ldr	r2, [r7, #4]
900065da:	68b9      	ldr	r1, [r7, #8]
900065dc:	68f8      	ldr	r0, [r7, #12]
900065de:	f000 f811 	bl	90006604 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900065e2:	68fb      	ldr	r3, [r7, #12]
900065e4:	681b      	ldr	r3, [r3, #0]
900065e6:	2201      	movs	r2, #1
900065e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900065ea:	68fb      	ldr	r3, [r7, #12]
900065ec:	2201      	movs	r2, #1
900065ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900065f2:	68fb      	ldr	r3, [r7, #12]
900065f4:	2200      	movs	r2, #0
900065f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900065fa:	2300      	movs	r3, #0
}
900065fc:	4618      	mov	r0, r3
900065fe:	3710      	adds	r7, #16
90006600:	46bd      	mov	sp, r7
90006602:	bdb0      	pop	{r4, r5, r7, pc}

90006604 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006604:	b480      	push	{r7}
90006606:	b089      	sub	sp, #36	; 0x24
90006608:	af00      	add	r7, sp, #0
9000660a:	60f8      	str	r0, [r7, #12]
9000660c:	60b9      	str	r1, [r7, #8]
9000660e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006610:	68bb      	ldr	r3, [r7, #8]
90006612:	685a      	ldr	r2, [r3, #4]
90006614:	68fb      	ldr	r3, [r7, #12]
90006616:	681b      	ldr	r3, [r3, #0]
90006618:	68db      	ldr	r3, [r3, #12]
9000661a:	0c1b      	lsrs	r3, r3, #16
9000661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006620:	4413      	add	r3, r2
90006622:	041b      	lsls	r3, r3, #16
90006624:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90006626:	68fb      	ldr	r3, [r7, #12]
90006628:	681b      	ldr	r3, [r3, #0]
9000662a:	461a      	mov	r2, r3
9000662c:	687b      	ldr	r3, [r7, #4]
9000662e:	01db      	lsls	r3, r3, #7
90006630:	4413      	add	r3, r2
90006632:	3384      	adds	r3, #132	; 0x84
90006634:	685b      	ldr	r3, [r3, #4]
90006636:	68fa      	ldr	r2, [r7, #12]
90006638:	6812      	ldr	r2, [r2, #0]
9000663a:	4611      	mov	r1, r2
9000663c:	687a      	ldr	r2, [r7, #4]
9000663e:	01d2      	lsls	r2, r2, #7
90006640:	440a      	add	r2, r1
90006642:	3284      	adds	r2, #132	; 0x84
90006644:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90006648:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000664a:	68bb      	ldr	r3, [r7, #8]
9000664c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000664e:	68fb      	ldr	r3, [r7, #12]
90006650:	681b      	ldr	r3, [r3, #0]
90006652:	68db      	ldr	r3, [r3, #12]
90006654:	0c1b      	lsrs	r3, r3, #16
90006656:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000665a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000665c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000665e:	68fb      	ldr	r3, [r7, #12]
90006660:	681b      	ldr	r3, [r3, #0]
90006662:	4619      	mov	r1, r3
90006664:	687b      	ldr	r3, [r7, #4]
90006666:	01db      	lsls	r3, r3, #7
90006668:	440b      	add	r3, r1
9000666a:	3384      	adds	r3, #132	; 0x84
9000666c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000666e:	69fb      	ldr	r3, [r7, #28]
90006670:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006672:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006674:	68bb      	ldr	r3, [r7, #8]
90006676:	68da      	ldr	r2, [r3, #12]
90006678:	68fb      	ldr	r3, [r7, #12]
9000667a:	681b      	ldr	r3, [r3, #0]
9000667c:	68db      	ldr	r3, [r3, #12]
9000667e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006682:	4413      	add	r3, r2
90006684:	041b      	lsls	r3, r3, #16
90006686:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006688:	68fb      	ldr	r3, [r7, #12]
9000668a:	681b      	ldr	r3, [r3, #0]
9000668c:	461a      	mov	r2, r3
9000668e:	687b      	ldr	r3, [r7, #4]
90006690:	01db      	lsls	r3, r3, #7
90006692:	4413      	add	r3, r2
90006694:	3384      	adds	r3, #132	; 0x84
90006696:	689b      	ldr	r3, [r3, #8]
90006698:	68fa      	ldr	r2, [r7, #12]
9000669a:	6812      	ldr	r2, [r2, #0]
9000669c:	4611      	mov	r1, r2
9000669e:	687a      	ldr	r2, [r7, #4]
900066a0:	01d2      	lsls	r2, r2, #7
900066a2:	440a      	add	r2, r1
900066a4:	3284      	adds	r2, #132	; 0x84
900066a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
900066aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
900066ac:	68bb      	ldr	r3, [r7, #8]
900066ae:	689a      	ldr	r2, [r3, #8]
900066b0:	68fb      	ldr	r3, [r7, #12]
900066b2:	681b      	ldr	r3, [r3, #0]
900066b4:	68db      	ldr	r3, [r3, #12]
900066b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900066ba:	4413      	add	r3, r2
900066bc:	1c5a      	adds	r2, r3, #1
900066be:	68fb      	ldr	r3, [r7, #12]
900066c0:	681b      	ldr	r3, [r3, #0]
900066c2:	4619      	mov	r1, r3
900066c4:	687b      	ldr	r3, [r7, #4]
900066c6:	01db      	lsls	r3, r3, #7
900066c8:	440b      	add	r3, r1
900066ca:	3384      	adds	r3, #132	; 0x84
900066cc:	4619      	mov	r1, r3
900066ce:	69fb      	ldr	r3, [r7, #28]
900066d0:	4313      	orrs	r3, r2
900066d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900066d4:	68fb      	ldr	r3, [r7, #12]
900066d6:	681b      	ldr	r3, [r3, #0]
900066d8:	461a      	mov	r2, r3
900066da:	687b      	ldr	r3, [r7, #4]
900066dc:	01db      	lsls	r3, r3, #7
900066de:	4413      	add	r3, r2
900066e0:	3384      	adds	r3, #132	; 0x84
900066e2:	691b      	ldr	r3, [r3, #16]
900066e4:	68fa      	ldr	r2, [r7, #12]
900066e6:	6812      	ldr	r2, [r2, #0]
900066e8:	4611      	mov	r1, r2
900066ea:	687a      	ldr	r2, [r7, #4]
900066ec:	01d2      	lsls	r2, r2, #7
900066ee:	440a      	add	r2, r1
900066f0:	3284      	adds	r2, #132	; 0x84
900066f2:	f023 0307 	bic.w	r3, r3, #7
900066f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900066f8:	68fb      	ldr	r3, [r7, #12]
900066fa:	681b      	ldr	r3, [r3, #0]
900066fc:	461a      	mov	r2, r3
900066fe:	687b      	ldr	r3, [r7, #4]
90006700:	01db      	lsls	r3, r3, #7
90006702:	4413      	add	r3, r2
90006704:	3384      	adds	r3, #132	; 0x84
90006706:	461a      	mov	r2, r3
90006708:	68bb      	ldr	r3, [r7, #8]
9000670a:	691b      	ldr	r3, [r3, #16]
9000670c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000670e:	68bb      	ldr	r3, [r7, #8]
90006710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90006714:	021b      	lsls	r3, r3, #8
90006716:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006718:	68bb      	ldr	r3, [r7, #8]
9000671a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
9000671e:	041b      	lsls	r3, r3, #16
90006720:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90006722:	68bb      	ldr	r3, [r7, #8]
90006724:	699b      	ldr	r3, [r3, #24]
90006726:	061b      	lsls	r3, r3, #24
90006728:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000672a:	68fb      	ldr	r3, [r7, #12]
9000672c:	681b      	ldr	r3, [r3, #0]
9000672e:	461a      	mov	r2, r3
90006730:	687b      	ldr	r3, [r7, #4]
90006732:	01db      	lsls	r3, r3, #7
90006734:	4413      	add	r3, r2
90006736:	3384      	adds	r3, #132	; 0x84
90006738:	699b      	ldr	r3, [r3, #24]
9000673a:	68fb      	ldr	r3, [r7, #12]
9000673c:	681b      	ldr	r3, [r3, #0]
9000673e:	461a      	mov	r2, r3
90006740:	687b      	ldr	r3, [r7, #4]
90006742:	01db      	lsls	r3, r3, #7
90006744:	4413      	add	r3, r2
90006746:	3384      	adds	r3, #132	; 0x84
90006748:	461a      	mov	r2, r3
9000674a:	2300      	movs	r3, #0
9000674c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000674e:	68bb      	ldr	r3, [r7, #8]
90006750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90006754:	461a      	mov	r2, r3
90006756:	69fb      	ldr	r3, [r7, #28]
90006758:	431a      	orrs	r2, r3
9000675a:	69bb      	ldr	r3, [r7, #24]
9000675c:	431a      	orrs	r2, r3
9000675e:	68fb      	ldr	r3, [r7, #12]
90006760:	681b      	ldr	r3, [r3, #0]
90006762:	4619      	mov	r1, r3
90006764:	687b      	ldr	r3, [r7, #4]
90006766:	01db      	lsls	r3, r3, #7
90006768:	440b      	add	r3, r1
9000676a:	3384      	adds	r3, #132	; 0x84
9000676c:	4619      	mov	r1, r3
9000676e:	697b      	ldr	r3, [r7, #20]
90006770:	4313      	orrs	r3, r2
90006772:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006774:	68fb      	ldr	r3, [r7, #12]
90006776:	681b      	ldr	r3, [r3, #0]
90006778:	461a      	mov	r2, r3
9000677a:	687b      	ldr	r3, [r7, #4]
9000677c:	01db      	lsls	r3, r3, #7
9000677e:	4413      	add	r3, r2
90006780:	3384      	adds	r3, #132	; 0x84
90006782:	695b      	ldr	r3, [r3, #20]
90006784:	68fa      	ldr	r2, [r7, #12]
90006786:	6812      	ldr	r2, [r2, #0]
90006788:	4611      	mov	r1, r2
9000678a:	687a      	ldr	r2, [r7, #4]
9000678c:	01d2      	lsls	r2, r2, #7
9000678e:	440a      	add	r2, r1
90006790:	3284      	adds	r2, #132	; 0x84
90006792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90006796:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006798:	68fb      	ldr	r3, [r7, #12]
9000679a:	681b      	ldr	r3, [r3, #0]
9000679c:	461a      	mov	r2, r3
9000679e:	687b      	ldr	r3, [r7, #4]
900067a0:	01db      	lsls	r3, r3, #7
900067a2:	4413      	add	r3, r2
900067a4:	3384      	adds	r3, #132	; 0x84
900067a6:	461a      	mov	r2, r3
900067a8:	68bb      	ldr	r3, [r7, #8]
900067aa:	695b      	ldr	r3, [r3, #20]
900067ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900067ae:	68fb      	ldr	r3, [r7, #12]
900067b0:	681b      	ldr	r3, [r3, #0]
900067b2:	461a      	mov	r2, r3
900067b4:	687b      	ldr	r3, [r7, #4]
900067b6:	01db      	lsls	r3, r3, #7
900067b8:	4413      	add	r3, r2
900067ba:	3384      	adds	r3, #132	; 0x84
900067bc:	69da      	ldr	r2, [r3, #28]
900067be:	68fb      	ldr	r3, [r7, #12]
900067c0:	681b      	ldr	r3, [r3, #0]
900067c2:	4619      	mov	r1, r3
900067c4:	687b      	ldr	r3, [r7, #4]
900067c6:	01db      	lsls	r3, r3, #7
900067c8:	440b      	add	r3, r1
900067ca:	3384      	adds	r3, #132	; 0x84
900067cc:	4619      	mov	r1, r3
900067ce:	4b58      	ldr	r3, [pc, #352]	; (90006930 <LTDC_SetConfig+0x32c>)
900067d0:	4013      	ands	r3, r2
900067d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900067d4:	68bb      	ldr	r3, [r7, #8]
900067d6:	69da      	ldr	r2, [r3, #28]
900067d8:	68bb      	ldr	r3, [r7, #8]
900067da:	6a1b      	ldr	r3, [r3, #32]
900067dc:	68f9      	ldr	r1, [r7, #12]
900067de:	6809      	ldr	r1, [r1, #0]
900067e0:	4608      	mov	r0, r1
900067e2:	6879      	ldr	r1, [r7, #4]
900067e4:	01c9      	lsls	r1, r1, #7
900067e6:	4401      	add	r1, r0
900067e8:	3184      	adds	r1, #132	; 0x84
900067ea:	4313      	orrs	r3, r2
900067ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900067ee:	68fb      	ldr	r3, [r7, #12]
900067f0:	681b      	ldr	r3, [r3, #0]
900067f2:	461a      	mov	r2, r3
900067f4:	687b      	ldr	r3, [r7, #4]
900067f6:	01db      	lsls	r3, r3, #7
900067f8:	4413      	add	r3, r2
900067fa:	3384      	adds	r3, #132	; 0x84
900067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900067fe:	68fb      	ldr	r3, [r7, #12]
90006800:	681b      	ldr	r3, [r3, #0]
90006802:	461a      	mov	r2, r3
90006804:	687b      	ldr	r3, [r7, #4]
90006806:	01db      	lsls	r3, r3, #7
90006808:	4413      	add	r3, r2
9000680a:	3384      	adds	r3, #132	; 0x84
9000680c:	461a      	mov	r2, r3
9000680e:	2300      	movs	r3, #0
90006810:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90006812:	68fb      	ldr	r3, [r7, #12]
90006814:	681b      	ldr	r3, [r3, #0]
90006816:	461a      	mov	r2, r3
90006818:	687b      	ldr	r3, [r7, #4]
9000681a:	01db      	lsls	r3, r3, #7
9000681c:	4413      	add	r3, r2
9000681e:	3384      	adds	r3, #132	; 0x84
90006820:	461a      	mov	r2, r3
90006822:	68bb      	ldr	r3, [r7, #8]
90006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006826:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006828:	68bb      	ldr	r3, [r7, #8]
9000682a:	691b      	ldr	r3, [r3, #16]
9000682c:	2b00      	cmp	r3, #0
9000682e:	d102      	bne.n	90006836 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90006830:	2304      	movs	r3, #4
90006832:	61fb      	str	r3, [r7, #28]
90006834:	e01b      	b.n	9000686e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006836:	68bb      	ldr	r3, [r7, #8]
90006838:	691b      	ldr	r3, [r3, #16]
9000683a:	2b01      	cmp	r3, #1
9000683c:	d102      	bne.n	90006844 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
9000683e:	2303      	movs	r3, #3
90006840:	61fb      	str	r3, [r7, #28]
90006842:	e014      	b.n	9000686e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006844:	68bb      	ldr	r3, [r7, #8]
90006846:	691b      	ldr	r3, [r3, #16]
90006848:	2b04      	cmp	r3, #4
9000684a:	d00b      	beq.n	90006864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000684c:	68bb      	ldr	r3, [r7, #8]
9000684e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006850:	2b02      	cmp	r3, #2
90006852:	d007      	beq.n	90006864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006854:	68bb      	ldr	r3, [r7, #8]
90006856:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006858:	2b03      	cmp	r3, #3
9000685a:	d003      	beq.n	90006864 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000685c:	68bb      	ldr	r3, [r7, #8]
9000685e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006860:	2b07      	cmp	r3, #7
90006862:	d102      	bne.n	9000686a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
90006864:	2302      	movs	r3, #2
90006866:	61fb      	str	r3, [r7, #28]
90006868:	e001      	b.n	9000686e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
9000686a:	2301      	movs	r3, #1
9000686c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000686e:	68fb      	ldr	r3, [r7, #12]
90006870:	681b      	ldr	r3, [r3, #0]
90006872:	461a      	mov	r2, r3
90006874:	687b      	ldr	r3, [r7, #4]
90006876:	01db      	lsls	r3, r3, #7
90006878:	4413      	add	r3, r2
9000687a:	3384      	adds	r3, #132	; 0x84
9000687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000687e:	68fa      	ldr	r2, [r7, #12]
90006880:	6812      	ldr	r2, [r2, #0]
90006882:	4611      	mov	r1, r2
90006884:	687a      	ldr	r2, [r7, #4]
90006886:	01d2      	lsls	r2, r2, #7
90006888:	440a      	add	r2, r1
9000688a:	3284      	adds	r2, #132	; 0x84
9000688c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90006890:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006892:	68bb      	ldr	r3, [r7, #8]
90006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006896:	69fa      	ldr	r2, [r7, #28]
90006898:	fb02 f303 	mul.w	r3, r2, r3
9000689c:	041a      	lsls	r2, r3, #16
9000689e:	68bb      	ldr	r3, [r7, #8]
900068a0:	6859      	ldr	r1, [r3, #4]
900068a2:	68bb      	ldr	r3, [r7, #8]
900068a4:	681b      	ldr	r3, [r3, #0]
900068a6:	1acb      	subs	r3, r1, r3
900068a8:	69f9      	ldr	r1, [r7, #28]
900068aa:	fb01 f303 	mul.w	r3, r1, r3
900068ae:	3307      	adds	r3, #7
900068b0:	68f9      	ldr	r1, [r7, #12]
900068b2:	6809      	ldr	r1, [r1, #0]
900068b4:	4608      	mov	r0, r1
900068b6:	6879      	ldr	r1, [r7, #4]
900068b8:	01c9      	lsls	r1, r1, #7
900068ba:	4401      	add	r1, r0
900068bc:	3184      	adds	r1, #132	; 0x84
900068be:	4313      	orrs	r3, r2
900068c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900068c2:	68fb      	ldr	r3, [r7, #12]
900068c4:	681b      	ldr	r3, [r3, #0]
900068c6:	461a      	mov	r2, r3
900068c8:	687b      	ldr	r3, [r7, #4]
900068ca:	01db      	lsls	r3, r3, #7
900068cc:	4413      	add	r3, r2
900068ce:	3384      	adds	r3, #132	; 0x84
900068d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900068d2:	68fb      	ldr	r3, [r7, #12]
900068d4:	681b      	ldr	r3, [r3, #0]
900068d6:	4619      	mov	r1, r3
900068d8:	687b      	ldr	r3, [r7, #4]
900068da:	01db      	lsls	r3, r3, #7
900068dc:	440b      	add	r3, r1
900068de:	3384      	adds	r3, #132	; 0x84
900068e0:	4619      	mov	r1, r3
900068e2:	4b14      	ldr	r3, [pc, #80]	; (90006934 <LTDC_SetConfig+0x330>)
900068e4:	4013      	ands	r3, r2
900068e6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900068e8:	68fb      	ldr	r3, [r7, #12]
900068ea:	681b      	ldr	r3, [r3, #0]
900068ec:	461a      	mov	r2, r3
900068ee:	687b      	ldr	r3, [r7, #4]
900068f0:	01db      	lsls	r3, r3, #7
900068f2:	4413      	add	r3, r2
900068f4:	3384      	adds	r3, #132	; 0x84
900068f6:	461a      	mov	r2, r3
900068f8:	68bb      	ldr	r3, [r7, #8]
900068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900068fe:	68fb      	ldr	r3, [r7, #12]
90006900:	681b      	ldr	r3, [r3, #0]
90006902:	461a      	mov	r2, r3
90006904:	687b      	ldr	r3, [r7, #4]
90006906:	01db      	lsls	r3, r3, #7
90006908:	4413      	add	r3, r2
9000690a:	3384      	adds	r3, #132	; 0x84
9000690c:	681b      	ldr	r3, [r3, #0]
9000690e:	68fa      	ldr	r2, [r7, #12]
90006910:	6812      	ldr	r2, [r2, #0]
90006912:	4611      	mov	r1, r2
90006914:	687a      	ldr	r2, [r7, #4]
90006916:	01d2      	lsls	r2, r2, #7
90006918:	440a      	add	r2, r1
9000691a:	3284      	adds	r2, #132	; 0x84
9000691c:	f043 0301 	orr.w	r3, r3, #1
90006920:	6013      	str	r3, [r2, #0]
}
90006922:	bf00      	nop
90006924:	3724      	adds	r7, #36	; 0x24
90006926:	46bd      	mov	sp, r7
90006928:	f85d 7b04 	ldr.w	r7, [sp], #4
9000692c:	4770      	bx	lr
9000692e:	bf00      	nop
90006930:	fffff8f8 	.word	0xfffff8f8
90006934:	fffff800 	.word	0xfffff800

90006938 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006938:	b580      	push	{r7, lr}
9000693a:	b084      	sub	sp, #16
9000693c:	af00      	add	r7, sp, #0
9000693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006940:	f7fc fd4a 	bl	900033d8 <HAL_GetTick>
90006944:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006946:	687b      	ldr	r3, [r7, #4]
90006948:	2b00      	cmp	r3, #0
9000694a:	d101      	bne.n	90006950 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
9000694c:	2301      	movs	r3, #1
9000694e:	e03b      	b.n	900069c8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006950:	687b      	ldr	r3, [r7, #4]
90006952:	2200      	movs	r2, #0
90006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006958:	687b      	ldr	r3, [r7, #4]
9000695a:	2202      	movs	r2, #2
9000695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006960:	687b      	ldr	r3, [r7, #4]
90006962:	681b      	ldr	r3, [r3, #0]
90006964:	68da      	ldr	r2, [r3, #12]
90006966:	687b      	ldr	r3, [r7, #4]
90006968:	681b      	ldr	r3, [r3, #0]
9000696a:	f022 0201 	bic.w	r2, r2, #1
9000696e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006970:	e00f      	b.n	90006992 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006972:	f7fc fd31 	bl	900033d8 <HAL_GetTick>
90006976:	4602      	mov	r2, r0
90006978:	68fb      	ldr	r3, [r7, #12]
9000697a:	1ad3      	subs	r3, r2, r3
9000697c:	2b05      	cmp	r3, #5
9000697e:	d908      	bls.n	90006992 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006980:	687b      	ldr	r3, [r7, #4]
90006982:	2240      	movs	r2, #64	; 0x40
90006984:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006986:	687b      	ldr	r3, [r7, #4]
90006988:	2203      	movs	r2, #3
9000698a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
9000698e:	2301      	movs	r3, #1
90006990:	e01a      	b.n	900069c8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006992:	687b      	ldr	r3, [r7, #4]
90006994:	681b      	ldr	r3, [r3, #0]
90006996:	68db      	ldr	r3, [r3, #12]
90006998:	f003 0301 	and.w	r3, r3, #1
9000699c:	2b00      	cmp	r3, #0
9000699e:	d1e8      	bne.n	90006972 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
900069a0:	6878      	ldr	r0, [r7, #4]
900069a2:	f000 f86d 	bl	90006a80 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
900069a6:	687b      	ldr	r3, [r7, #4]
900069a8:	2200      	movs	r2, #0
900069aa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
900069ac:	687b      	ldr	r3, [r7, #4]
900069ae:	2200      	movs	r2, #0
900069b0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
900069b2:	687b      	ldr	r3, [r7, #4]
900069b4:	2200      	movs	r2, #0
900069b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900069b8:	687b      	ldr	r3, [r7, #4]
900069ba:	2200      	movs	r2, #0
900069bc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
900069be:	687b      	ldr	r3, [r7, #4]
900069c0:	2201      	movs	r2, #1
900069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
900069c6:	2300      	movs	r3, #0
}
900069c8:	4618      	mov	r0, r3
900069ca:	3710      	adds	r7, #16
900069cc:	46bd      	mov	sp, r7
900069ce:	bd80      	pop	{r7, pc}

900069d0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900069d0:	b480      	push	{r7}
900069d2:	b083      	sub	sp, #12
900069d4:	af00      	add	r7, sp, #0
900069d6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	2b00      	cmp	r3, #0
900069dc:	d101      	bne.n	900069e2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900069de:	2301      	movs	r3, #1
900069e0:	e048      	b.n	90006a74 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900069e2:	687b      	ldr	r3, [r7, #4]
900069e4:	681b      	ldr	r3, [r3, #0]
900069e6:	68da      	ldr	r2, [r3, #12]
900069e8:	687b      	ldr	r3, [r7, #4]
900069ea:	681b      	ldr	r3, [r3, #0]
900069ec:	f022 0201 	bic.w	r2, r2, #1
900069f0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900069f2:	687b      	ldr	r3, [r7, #4]
900069f4:	681b      	ldr	r3, [r3, #0]
900069f6:	2200      	movs	r2, #0
900069f8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	681b      	ldr	r3, [r3, #0]
900069fe:	2200      	movs	r2, #0
90006a00:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
90006a02:	687b      	ldr	r3, [r7, #4]
90006a04:	681b      	ldr	r3, [r3, #0]
90006a06:	2200      	movs	r2, #0
90006a08:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
90006a0a:	687b      	ldr	r3, [r7, #4]
90006a0c:	681b      	ldr	r3, [r3, #0]
90006a0e:	2200      	movs	r2, #0
90006a10:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006a12:	687b      	ldr	r3, [r7, #4]
90006a14:	681b      	ldr	r3, [r3, #0]
90006a16:	2200      	movs	r2, #0
90006a18:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	681b      	ldr	r3, [r3, #0]
90006a1e:	2200      	movs	r2, #0
90006a20:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006a22:	687b      	ldr	r3, [r7, #4]
90006a24:	681b      	ldr	r3, [r3, #0]
90006a26:	2200      	movs	r2, #0
90006a28:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90006a2a:	687b      	ldr	r3, [r7, #4]
90006a2c:	681b      	ldr	r3, [r3, #0]
90006a2e:	2200      	movs	r2, #0
90006a30:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90006a32:	687b      	ldr	r3, [r7, #4]
90006a34:	681b      	ldr	r3, [r3, #0]
90006a36:	2200      	movs	r2, #0
90006a38:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90006a3a:	687b      	ldr	r3, [r7, #4]
90006a3c:	681b      	ldr	r3, [r3, #0]
90006a3e:	2200      	movs	r2, #0
90006a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006a42:	687b      	ldr	r3, [r7, #4]
90006a44:	681b      	ldr	r3, [r3, #0]
90006a46:	221f      	movs	r2, #31
90006a48:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a4a:	687b      	ldr	r3, [r7, #4]
90006a4c:	2200      	movs	r2, #0
90006a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a50:	687b      	ldr	r3, [r7, #4]
90006a52:	2200      	movs	r2, #0
90006a54:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a56:	687b      	ldr	r3, [r7, #4]
90006a58:	2200      	movs	r2, #0
90006a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a5c:	687b      	ldr	r3, [r7, #4]
90006a5e:	2200      	movs	r2, #0
90006a60:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006a62:	687b      	ldr	r3, [r7, #4]
90006a64:	2200      	movs	r2, #0
90006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006a6a:	687b      	ldr	r3, [r7, #4]
90006a6c:	2200      	movs	r2, #0
90006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
90006a72:	2300      	movs	r3, #0
}
90006a74:	4618      	mov	r0, r3
90006a76:	370c      	adds	r7, #12
90006a78:	46bd      	mov	sp, r7
90006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a7e:	4770      	bx	lr

90006a80 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006a80:	b480      	push	{r7}
90006a82:	b085      	sub	sp, #20
90006a84:	af00      	add	r7, sp, #0
90006a86:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006a88:	687b      	ldr	r3, [r7, #4]
90006a8a:	68d9      	ldr	r1, [r3, #12]
90006a8c:	687b      	ldr	r3, [r7, #4]
90006a8e:	691a      	ldr	r2, [r3, #16]
90006a90:	687b      	ldr	r3, [r7, #4]
90006a92:	681b      	ldr	r3, [r3, #0]
90006a94:	430a      	orrs	r2, r1
90006a96:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a98:	687b      	ldr	r3, [r7, #4]
90006a9a:	695a      	ldr	r2, [r3, #20]
90006a9c:	687b      	ldr	r3, [r7, #4]
90006a9e:	699b      	ldr	r3, [r3, #24]
90006aa0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006aa2:	687b      	ldr	r3, [r7, #4]
90006aa4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006aa6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006aa8:	687b      	ldr	r3, [r7, #4]
90006aaa:	6a1b      	ldr	r3, [r3, #32]
90006aac:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006aae:	687b      	ldr	r3, [r7, #4]
90006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006ab2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006ab4:	687b      	ldr	r3, [r7, #4]
90006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006ab8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006aba:	687b      	ldr	r3, [r7, #4]
90006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006abe:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ac0:	687b      	ldr	r3, [r7, #4]
90006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006ac4:	3b01      	subs	r3, #1
90006ac6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006ac8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006acc:	687b      	ldr	r3, [r7, #4]
90006ace:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ad0:	687b      	ldr	r3, [r7, #4]
90006ad2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ad4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ad6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006ad8:	687b      	ldr	r3, [r7, #4]
90006ada:	685b      	ldr	r3, [r3, #4]
90006adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006ae0:	d107      	bne.n	90006af2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006ae2:	687b      	ldr	r3, [r7, #4]
90006ae4:	681b      	ldr	r3, [r3, #0]
90006ae6:	691a      	ldr	r2, [r3, #16]
90006ae8:	687b      	ldr	r3, [r7, #4]
90006aea:	681b      	ldr	r3, [r3, #0]
90006aec:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
90006af0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006af2:	687b      	ldr	r3, [r7, #4]
90006af4:	681b      	ldr	r3, [r3, #0]
90006af6:	2200      	movs	r2, #0
90006af8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006afa:	687b      	ldr	r3, [r7, #4]
90006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006afe:	2b00      	cmp	r3, #0
90006b00:	da11      	bge.n	90006b26 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006b02:	687b      	ldr	r3, [r7, #4]
90006b04:	681b      	ldr	r3, [r3, #0]
90006b06:	695a      	ldr	r2, [r3, #20]
90006b08:	687b      	ldr	r3, [r7, #4]
90006b0a:	681b      	ldr	r3, [r3, #0]
90006b0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
90006b10:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006b12:	687b      	ldr	r3, [r7, #4]
90006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006b16:	425b      	negs	r3, r3
90006b18:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006b1a:	687b      	ldr	r3, [r7, #4]
90006b1c:	681b      	ldr	r3, [r3, #0]
90006b1e:	68fa      	ldr	r2, [r7, #12]
90006b20:	b292      	uxth	r2, r2
90006b22:	621a      	str	r2, [r3, #32]
90006b24:	e006      	b.n	90006b34 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006b26:	687b      	ldr	r3, [r7, #4]
90006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006b2a:	461a      	mov	r2, r3
90006b2c:	687b      	ldr	r3, [r7, #4]
90006b2e:	681b      	ldr	r3, [r3, #0]
90006b30:	b292      	uxth	r2, r2
90006b32:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006b34:	687b      	ldr	r3, [r7, #4]
90006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b38:	2b00      	cmp	r3, #0
90006b3a:	da15      	bge.n	90006b68 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006b3c:	687b      	ldr	r3, [r7, #4]
90006b3e:	681b      	ldr	r3, [r3, #0]
90006b40:	695a      	ldr	r2, [r3, #20]
90006b42:	687b      	ldr	r3, [r7, #4]
90006b44:	681b      	ldr	r3, [r3, #0]
90006b46:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90006b4a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006b4c:	687b      	ldr	r3, [r7, #4]
90006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b50:	425b      	negs	r3, r3
90006b52:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b54:	687b      	ldr	r3, [r7, #4]
90006b56:	681b      	ldr	r3, [r3, #0]
90006b58:	6a19      	ldr	r1, [r3, #32]
90006b5a:	68fb      	ldr	r3, [r7, #12]
90006b5c:	041a      	lsls	r2, r3, #16
90006b5e:	687b      	ldr	r3, [r7, #4]
90006b60:	681b      	ldr	r3, [r3, #0]
90006b62:	430a      	orrs	r2, r1
90006b64:	621a      	str	r2, [r3, #32]
90006b66:	e009      	b.n	90006b7c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b68:	687b      	ldr	r3, [r7, #4]
90006b6a:	681b      	ldr	r3, [r3, #0]
90006b6c:	6a19      	ldr	r1, [r3, #32]
90006b6e:	687b      	ldr	r3, [r7, #4]
90006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b72:	041a      	lsls	r2, r3, #16
90006b74:	687b      	ldr	r3, [r7, #4]
90006b76:	681b      	ldr	r3, [r3, #0]
90006b78:	430a      	orrs	r2, r1
90006b7a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006b7c:	687b      	ldr	r3, [r7, #4]
90006b7e:	685b      	ldr	r3, [r3, #4]
90006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006b84:	d006      	beq.n	90006b94 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006b86:	687b      	ldr	r3, [r7, #4]
90006b88:	685a      	ldr	r2, [r3, #4]
90006b8a:	687b      	ldr	r3, [r7, #4]
90006b8c:	681b      	ldr	r3, [r3, #0]
90006b8e:	b2d2      	uxtb	r2, r2
90006b90:	629a      	str	r2, [r3, #40]	; 0x28
90006b92:	e003      	b.n	90006b9c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006b94:	687b      	ldr	r3, [r7, #4]
90006b96:	681b      	ldr	r3, [r3, #0]
90006b98:	2200      	movs	r2, #0
90006b9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006b9c:	687b      	ldr	r3, [r7, #4]
90006b9e:	681b      	ldr	r3, [r3, #0]
90006ba0:	2200      	movs	r2, #0
90006ba2:	625a      	str	r2, [r3, #36]	; 0x24
}
90006ba4:	bf00      	nop
90006ba6:	3714      	adds	r7, #20
90006ba8:	46bd      	mov	sp, r7
90006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
90006bae:	4770      	bx	lr

90006bb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90006bb0:	b580      	push	{r7, lr}
90006bb2:	b084      	sub	sp, #16
90006bb4:	af00      	add	r7, sp, #0
90006bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90006bb8:	4b19      	ldr	r3, [pc, #100]	; (90006c20 <HAL_PWREx_ConfigSupply+0x70>)
90006bba:	68db      	ldr	r3, [r3, #12]
90006bbc:	f003 0304 	and.w	r3, r3, #4
90006bc0:	2b04      	cmp	r3, #4
90006bc2:	d00a      	beq.n	90006bda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90006bc4:	4b16      	ldr	r3, [pc, #88]	; (90006c20 <HAL_PWREx_ConfigSupply+0x70>)
90006bc6:	68db      	ldr	r3, [r3, #12]
90006bc8:	f003 0307 	and.w	r3, r3, #7
90006bcc:	687a      	ldr	r2, [r7, #4]
90006bce:	429a      	cmp	r2, r3
90006bd0:	d001      	beq.n	90006bd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90006bd2:	2301      	movs	r3, #1
90006bd4:	e01f      	b.n	90006c16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
90006bd6:	2300      	movs	r3, #0
90006bd8:	e01d      	b.n	90006c16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90006bda:	4b11      	ldr	r3, [pc, #68]	; (90006c20 <HAL_PWREx_ConfigSupply+0x70>)
90006bdc:	68db      	ldr	r3, [r3, #12]
90006bde:	f023 0207 	bic.w	r2, r3, #7
90006be2:	490f      	ldr	r1, [pc, #60]	; (90006c20 <HAL_PWREx_ConfigSupply+0x70>)
90006be4:	687b      	ldr	r3, [r7, #4]
90006be6:	4313      	orrs	r3, r2
90006be8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
90006bea:	f7fc fbf5 	bl	900033d8 <HAL_GetTick>
90006bee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90006bf0:	e009      	b.n	90006c06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90006bf2:	f7fc fbf1 	bl	900033d8 <HAL_GetTick>
90006bf6:	4602      	mov	r2, r0
90006bf8:	68fb      	ldr	r3, [r7, #12]
90006bfa:	1ad3      	subs	r3, r2, r3
90006bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90006c00:	d901      	bls.n	90006c06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
90006c02:	2301      	movs	r3, #1
90006c04:	e007      	b.n	90006c16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90006c06:	4b06      	ldr	r3, [pc, #24]	; (90006c20 <HAL_PWREx_ConfigSupply+0x70>)
90006c08:	685b      	ldr	r3, [r3, #4]
90006c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90006c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90006c12:	d1ee      	bne.n	90006bf2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
90006c14:	2300      	movs	r3, #0
}
90006c16:	4618      	mov	r0, r3
90006c18:	3710      	adds	r7, #16
90006c1a:	46bd      	mov	sp, r7
90006c1c:	bd80      	pop	{r7, pc}
90006c1e:	bf00      	nop
90006c20:	58024800 	.word	0x58024800

90006c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006c24:	b580      	push	{r7, lr}
90006c26:	b08c      	sub	sp, #48	; 0x30
90006c28:	af00      	add	r7, sp, #0
90006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006c2c:	687b      	ldr	r3, [r7, #4]
90006c2e:	2b00      	cmp	r3, #0
90006c30:	d102      	bne.n	90006c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006c32:	2301      	movs	r3, #1
90006c34:	f000 bc48 	b.w	900074c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006c38:	687b      	ldr	r3, [r7, #4]
90006c3a:	681b      	ldr	r3, [r3, #0]
90006c3c:	f003 0301 	and.w	r3, r3, #1
90006c40:	2b00      	cmp	r3, #0
90006c42:	f000 8088 	beq.w	90006d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006c46:	4b99      	ldr	r3, [pc, #612]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006c48:	691b      	ldr	r3, [r3, #16]
90006c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006c50:	4b96      	ldr	r3, [pc, #600]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006c54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c58:	2b10      	cmp	r3, #16
90006c5a:	d007      	beq.n	90006c6c <HAL_RCC_OscConfig+0x48>
90006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c5e:	2b18      	cmp	r3, #24
90006c60:	d111      	bne.n	90006c86 <HAL_RCC_OscConfig+0x62>
90006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c64:	f003 0303 	and.w	r3, r3, #3
90006c68:	2b02      	cmp	r3, #2
90006c6a:	d10c      	bne.n	90006c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006c6c:	4b8f      	ldr	r3, [pc, #572]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006c6e:	681b      	ldr	r3, [r3, #0]
90006c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006c74:	2b00      	cmp	r3, #0
90006c76:	d06d      	beq.n	90006d54 <HAL_RCC_OscConfig+0x130>
90006c78:	687b      	ldr	r3, [r7, #4]
90006c7a:	685b      	ldr	r3, [r3, #4]
90006c7c:	2b00      	cmp	r3, #0
90006c7e:	d169      	bne.n	90006d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006c80:	2301      	movs	r3, #1
90006c82:	f000 bc21 	b.w	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006c86:	687b      	ldr	r3, [r7, #4]
90006c88:	685b      	ldr	r3, [r3, #4]
90006c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90006c8e:	d106      	bne.n	90006c9e <HAL_RCC_OscConfig+0x7a>
90006c90:	4b86      	ldr	r3, [pc, #536]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006c92:	681b      	ldr	r3, [r3, #0]
90006c94:	4a85      	ldr	r2, [pc, #532]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90006c9a:	6013      	str	r3, [r2, #0]
90006c9c:	e02e      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006c9e:	687b      	ldr	r3, [r7, #4]
90006ca0:	685b      	ldr	r3, [r3, #4]
90006ca2:	2b00      	cmp	r3, #0
90006ca4:	d10c      	bne.n	90006cc0 <HAL_RCC_OscConfig+0x9c>
90006ca6:	4b81      	ldr	r3, [pc, #516]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006ca8:	681b      	ldr	r3, [r3, #0]
90006caa:	4a80      	ldr	r2, [pc, #512]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90006cb0:	6013      	str	r3, [r2, #0]
90006cb2:	4b7e      	ldr	r3, [pc, #504]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cb4:	681b      	ldr	r3, [r3, #0]
90006cb6:	4a7d      	ldr	r2, [pc, #500]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90006cbc:	6013      	str	r3, [r2, #0]
90006cbe:	e01d      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006cc0:	687b      	ldr	r3, [r7, #4]
90006cc2:	685b      	ldr	r3, [r3, #4]
90006cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90006cc8:	d10c      	bne.n	90006ce4 <HAL_RCC_OscConfig+0xc0>
90006cca:	4b78      	ldr	r3, [pc, #480]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006ccc:	681b      	ldr	r3, [r3, #0]
90006cce:	4a77      	ldr	r2, [pc, #476]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90006cd4:	6013      	str	r3, [r2, #0]
90006cd6:	4b75      	ldr	r3, [pc, #468]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cd8:	681b      	ldr	r3, [r3, #0]
90006cda:	4a74      	ldr	r2, [pc, #464]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90006ce0:	6013      	str	r3, [r2, #0]
90006ce2:	e00b      	b.n	90006cfc <HAL_RCC_OscConfig+0xd8>
90006ce4:	4b71      	ldr	r3, [pc, #452]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006ce6:	681b      	ldr	r3, [r3, #0]
90006ce8:	4a70      	ldr	r2, [pc, #448]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90006cee:	6013      	str	r3, [r2, #0]
90006cf0:	4b6e      	ldr	r3, [pc, #440]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cf2:	681b      	ldr	r3, [r3, #0]
90006cf4:	4a6d      	ldr	r2, [pc, #436]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90006cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006cfc:	687b      	ldr	r3, [r7, #4]
90006cfe:	685b      	ldr	r3, [r3, #4]
90006d00:	2b00      	cmp	r3, #0
90006d02:	d013      	beq.n	90006d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d04:	f7fc fb68 	bl	900033d8 <HAL_GetTick>
90006d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d0a:	e008      	b.n	90006d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d0c:	f7fc fb64 	bl	900033d8 <HAL_GetTick>
90006d10:	4602      	mov	r2, r0
90006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006d14:	1ad3      	subs	r3, r2, r3
90006d16:	2b64      	cmp	r3, #100	; 0x64
90006d18:	d901      	bls.n	90006d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006d1a:	2303      	movs	r3, #3
90006d1c:	e3d4      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d1e:	4b63      	ldr	r3, [pc, #396]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006d20:	681b      	ldr	r3, [r3, #0]
90006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006d26:	2b00      	cmp	r3, #0
90006d28:	d0f0      	beq.n	90006d0c <HAL_RCC_OscConfig+0xe8>
90006d2a:	e014      	b.n	90006d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d2c:	f7fc fb54 	bl	900033d8 <HAL_GetTick>
90006d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d32:	e008      	b.n	90006d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d34:	f7fc fb50 	bl	900033d8 <HAL_GetTick>
90006d38:	4602      	mov	r2, r0
90006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006d3c:	1ad3      	subs	r3, r2, r3
90006d3e:	2b64      	cmp	r3, #100	; 0x64
90006d40:	d901      	bls.n	90006d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006d42:	2303      	movs	r3, #3
90006d44:	e3c0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d46:	4b59      	ldr	r3, [pc, #356]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006d48:	681b      	ldr	r3, [r3, #0]
90006d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006d4e:	2b00      	cmp	r3, #0
90006d50:	d1f0      	bne.n	90006d34 <HAL_RCC_OscConfig+0x110>
90006d52:	e000      	b.n	90006d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006d56:	687b      	ldr	r3, [r7, #4]
90006d58:	681b      	ldr	r3, [r3, #0]
90006d5a:	f003 0302 	and.w	r3, r3, #2
90006d5e:	2b00      	cmp	r3, #0
90006d60:	f000 80ca 	beq.w	90006ef8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006d64:	4b51      	ldr	r3, [pc, #324]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006d66:	691b      	ldr	r3, [r3, #16]
90006d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006d6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006d6e:	4b4f      	ldr	r3, [pc, #316]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006d72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006d74:	6a3b      	ldr	r3, [r7, #32]
90006d76:	2b00      	cmp	r3, #0
90006d78:	d007      	beq.n	90006d8a <HAL_RCC_OscConfig+0x166>
90006d7a:	6a3b      	ldr	r3, [r7, #32]
90006d7c:	2b18      	cmp	r3, #24
90006d7e:	d156      	bne.n	90006e2e <HAL_RCC_OscConfig+0x20a>
90006d80:	69fb      	ldr	r3, [r7, #28]
90006d82:	f003 0303 	and.w	r3, r3, #3
90006d86:	2b00      	cmp	r3, #0
90006d88:	d151      	bne.n	90006e2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d8a:	4b48      	ldr	r3, [pc, #288]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006d8c:	681b      	ldr	r3, [r3, #0]
90006d8e:	f003 0304 	and.w	r3, r3, #4
90006d92:	2b00      	cmp	r3, #0
90006d94:	d005      	beq.n	90006da2 <HAL_RCC_OscConfig+0x17e>
90006d96:	687b      	ldr	r3, [r7, #4]
90006d98:	68db      	ldr	r3, [r3, #12]
90006d9a:	2b00      	cmp	r3, #0
90006d9c:	d101      	bne.n	90006da2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006d9e:	2301      	movs	r3, #1
90006da0:	e392      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006da2:	4b42      	ldr	r3, [pc, #264]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006da4:	681b      	ldr	r3, [r3, #0]
90006da6:	f023 0219 	bic.w	r2, r3, #25
90006daa:	687b      	ldr	r3, [r7, #4]
90006dac:	68db      	ldr	r3, [r3, #12]
90006dae:	493f      	ldr	r1, [pc, #252]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006db0:	4313      	orrs	r3, r2
90006db2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006db4:	f7fc fb10 	bl	900033d8 <HAL_GetTick>
90006db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dba:	e008      	b.n	90006dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dbc:	f7fc fb0c 	bl	900033d8 <HAL_GetTick>
90006dc0:	4602      	mov	r2, r0
90006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006dc4:	1ad3      	subs	r3, r2, r3
90006dc6:	2b02      	cmp	r3, #2
90006dc8:	d901      	bls.n	90006dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006dca:	2303      	movs	r3, #3
90006dcc:	e37c      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dce:	4b37      	ldr	r3, [pc, #220]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	f003 0304 	and.w	r3, r3, #4
90006dd6:	2b00      	cmp	r3, #0
90006dd8:	d0f0      	beq.n	90006dbc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dda:	f7fc fb09 	bl	900033f0 <HAL_GetREVID>
90006dde:	4603      	mov	r3, r0
90006de0:	f241 0203 	movw	r2, #4099	; 0x1003
90006de4:	4293      	cmp	r3, r2
90006de6:	d817      	bhi.n	90006e18 <HAL_RCC_OscConfig+0x1f4>
90006de8:	687b      	ldr	r3, [r7, #4]
90006dea:	691b      	ldr	r3, [r3, #16]
90006dec:	2b40      	cmp	r3, #64	; 0x40
90006dee:	d108      	bne.n	90006e02 <HAL_RCC_OscConfig+0x1de>
90006df0:	4b2e      	ldr	r3, [pc, #184]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006df2:	685b      	ldr	r3, [r3, #4]
90006df4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90006df8:	4a2c      	ldr	r2, [pc, #176]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90006dfe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e00:	e07a      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e02:	4b2a      	ldr	r3, [pc, #168]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e04:	685b      	ldr	r3, [r3, #4]
90006e06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006e0a:	687b      	ldr	r3, [r7, #4]
90006e0c:	691b      	ldr	r3, [r3, #16]
90006e0e:	031b      	lsls	r3, r3, #12
90006e10:	4926      	ldr	r1, [pc, #152]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e12:	4313      	orrs	r3, r2
90006e14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e16:	e06f      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e18:	4b24      	ldr	r3, [pc, #144]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e1a:	685b      	ldr	r3, [r3, #4]
90006e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90006e20:	687b      	ldr	r3, [r7, #4]
90006e22:	691b      	ldr	r3, [r3, #16]
90006e24:	061b      	lsls	r3, r3, #24
90006e26:	4921      	ldr	r1, [pc, #132]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e28:	4313      	orrs	r3, r2
90006e2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e2c:	e064      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006e2e:	687b      	ldr	r3, [r7, #4]
90006e30:	68db      	ldr	r3, [r3, #12]
90006e32:	2b00      	cmp	r3, #0
90006e34:	d047      	beq.n	90006ec6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006e36:	4b1d      	ldr	r3, [pc, #116]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e38:	681b      	ldr	r3, [r3, #0]
90006e3a:	f023 0219 	bic.w	r2, r3, #25
90006e3e:	687b      	ldr	r3, [r7, #4]
90006e40:	68db      	ldr	r3, [r3, #12]
90006e42:	491a      	ldr	r1, [pc, #104]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e44:	4313      	orrs	r3, r2
90006e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e48:	f7fc fac6 	bl	900033d8 <HAL_GetTick>
90006e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e4e:	e008      	b.n	90006e62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e50:	f7fc fac2 	bl	900033d8 <HAL_GetTick>
90006e54:	4602      	mov	r2, r0
90006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006e58:	1ad3      	subs	r3, r2, r3
90006e5a:	2b02      	cmp	r3, #2
90006e5c:	d901      	bls.n	90006e62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006e5e:	2303      	movs	r3, #3
90006e60:	e332      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e62:	4b12      	ldr	r3, [pc, #72]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e64:	681b      	ldr	r3, [r3, #0]
90006e66:	f003 0304 	and.w	r3, r3, #4
90006e6a:	2b00      	cmp	r3, #0
90006e6c:	d0f0      	beq.n	90006e50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e6e:	f7fc fabf 	bl	900033f0 <HAL_GetREVID>
90006e72:	4603      	mov	r3, r0
90006e74:	f241 0203 	movw	r2, #4099	; 0x1003
90006e78:	4293      	cmp	r3, r2
90006e7a:	d819      	bhi.n	90006eb0 <HAL_RCC_OscConfig+0x28c>
90006e7c:	687b      	ldr	r3, [r7, #4]
90006e7e:	691b      	ldr	r3, [r3, #16]
90006e80:	2b40      	cmp	r3, #64	; 0x40
90006e82:	d108      	bne.n	90006e96 <HAL_RCC_OscConfig+0x272>
90006e84:	4b09      	ldr	r3, [pc, #36]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e86:	685b      	ldr	r3, [r3, #4]
90006e88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90006e8c:	4a07      	ldr	r2, [pc, #28]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90006e92:	6053      	str	r3, [r2, #4]
90006e94:	e030      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
90006e96:	4b05      	ldr	r3, [pc, #20]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006e98:	685b      	ldr	r3, [r3, #4]
90006e9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006e9e:	687b      	ldr	r3, [r7, #4]
90006ea0:	691b      	ldr	r3, [r3, #16]
90006ea2:	031b      	lsls	r3, r3, #12
90006ea4:	4901      	ldr	r1, [pc, #4]	; (90006eac <HAL_RCC_OscConfig+0x288>)
90006ea6:	4313      	orrs	r3, r2
90006ea8:	604b      	str	r3, [r1, #4]
90006eaa:	e025      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
90006eac:	58024400 	.word	0x58024400
90006eb0:	4b9a      	ldr	r3, [pc, #616]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006eb2:	685b      	ldr	r3, [r3, #4]
90006eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90006eb8:	687b      	ldr	r3, [r7, #4]
90006eba:	691b      	ldr	r3, [r3, #16]
90006ebc:	061b      	lsls	r3, r3, #24
90006ebe:	4997      	ldr	r1, [pc, #604]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ec0:	4313      	orrs	r3, r2
90006ec2:	604b      	str	r3, [r1, #4]
90006ec4:	e018      	b.n	90006ef8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006ec6:	4b95      	ldr	r3, [pc, #596]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ec8:	681b      	ldr	r3, [r3, #0]
90006eca:	4a94      	ldr	r2, [pc, #592]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ecc:	f023 0301 	bic.w	r3, r3, #1
90006ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ed2:	f7fc fa81 	bl	900033d8 <HAL_GetTick>
90006ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006ed8:	e008      	b.n	90006eec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006eda:	f7fc fa7d 	bl	900033d8 <HAL_GetTick>
90006ede:	4602      	mov	r2, r0
90006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006ee2:	1ad3      	subs	r3, r2, r3
90006ee4:	2b02      	cmp	r3, #2
90006ee6:	d901      	bls.n	90006eec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006ee8:	2303      	movs	r3, #3
90006eea:	e2ed      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006eec:	4b8b      	ldr	r3, [pc, #556]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006eee:	681b      	ldr	r3, [r3, #0]
90006ef0:	f003 0304 	and.w	r3, r3, #4
90006ef4:	2b00      	cmp	r3, #0
90006ef6:	d1f0      	bne.n	90006eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006ef8:	687b      	ldr	r3, [r7, #4]
90006efa:	681b      	ldr	r3, [r3, #0]
90006efc:	f003 0310 	and.w	r3, r3, #16
90006f00:	2b00      	cmp	r3, #0
90006f02:	f000 80a9 	beq.w	90007058 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006f06:	4b85      	ldr	r3, [pc, #532]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f08:	691b      	ldr	r3, [r3, #16]
90006f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006f0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006f10:	4b82      	ldr	r3, [pc, #520]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006f14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006f16:	69bb      	ldr	r3, [r7, #24]
90006f18:	2b08      	cmp	r3, #8
90006f1a:	d007      	beq.n	90006f2c <HAL_RCC_OscConfig+0x308>
90006f1c:	69bb      	ldr	r3, [r7, #24]
90006f1e:	2b18      	cmp	r3, #24
90006f20:	d13a      	bne.n	90006f98 <HAL_RCC_OscConfig+0x374>
90006f22:	697b      	ldr	r3, [r7, #20]
90006f24:	f003 0303 	and.w	r3, r3, #3
90006f28:	2b01      	cmp	r3, #1
90006f2a:	d135      	bne.n	90006f98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f2c:	4b7b      	ldr	r3, [pc, #492]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f2e:	681b      	ldr	r3, [r3, #0]
90006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006f34:	2b00      	cmp	r3, #0
90006f36:	d005      	beq.n	90006f44 <HAL_RCC_OscConfig+0x320>
90006f38:	687b      	ldr	r3, [r7, #4]
90006f3a:	69db      	ldr	r3, [r3, #28]
90006f3c:	2b80      	cmp	r3, #128	; 0x80
90006f3e:	d001      	beq.n	90006f44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006f40:	2301      	movs	r3, #1
90006f42:	e2c1      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f44:	f7fc fa54 	bl	900033f0 <HAL_GetREVID>
90006f48:	4603      	mov	r3, r0
90006f4a:	f241 0203 	movw	r2, #4099	; 0x1003
90006f4e:	4293      	cmp	r3, r2
90006f50:	d817      	bhi.n	90006f82 <HAL_RCC_OscConfig+0x35e>
90006f52:	687b      	ldr	r3, [r7, #4]
90006f54:	6a1b      	ldr	r3, [r3, #32]
90006f56:	2b20      	cmp	r3, #32
90006f58:	d108      	bne.n	90006f6c <HAL_RCC_OscConfig+0x348>
90006f5a:	4b70      	ldr	r3, [pc, #448]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f5c:	685b      	ldr	r3, [r3, #4]
90006f5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90006f62:	4a6e      	ldr	r2, [pc, #440]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90006f68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f6a:	e075      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f6c:	4b6b      	ldr	r3, [pc, #428]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f6e:	685b      	ldr	r3, [r3, #4]
90006f70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90006f74:	687b      	ldr	r3, [r7, #4]
90006f76:	6a1b      	ldr	r3, [r3, #32]
90006f78:	069b      	lsls	r3, r3, #26
90006f7a:	4968      	ldr	r1, [pc, #416]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f7c:	4313      	orrs	r3, r2
90006f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f80:	e06a      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f82:	4b66      	ldr	r3, [pc, #408]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f84:	68db      	ldr	r3, [r3, #12]
90006f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90006f8a:	687b      	ldr	r3, [r7, #4]
90006f8c:	6a1b      	ldr	r3, [r3, #32]
90006f8e:	061b      	lsls	r3, r3, #24
90006f90:	4962      	ldr	r1, [pc, #392]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006f92:	4313      	orrs	r3, r2
90006f94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f96:	e05f      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006f98:	687b      	ldr	r3, [r7, #4]
90006f9a:	69db      	ldr	r3, [r3, #28]
90006f9c:	2b00      	cmp	r3, #0
90006f9e:	d042      	beq.n	90007026 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006fa0:	4b5e      	ldr	r3, [pc, #376]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fa2:	681b      	ldr	r3, [r3, #0]
90006fa4:	4a5d      	ldr	r2, [pc, #372]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90006faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006fac:	f7fc fa14 	bl	900033d8 <HAL_GetTick>
90006fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fb2:	e008      	b.n	90006fc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006fb4:	f7fc fa10 	bl	900033d8 <HAL_GetTick>
90006fb8:	4602      	mov	r2, r0
90006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006fbc:	1ad3      	subs	r3, r2, r3
90006fbe:	2b02      	cmp	r3, #2
90006fc0:	d901      	bls.n	90006fc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006fc2:	2303      	movs	r3, #3
90006fc4:	e280      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fc6:	4b55      	ldr	r3, [pc, #340]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fc8:	681b      	ldr	r3, [r3, #0]
90006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006fce:	2b00      	cmp	r3, #0
90006fd0:	d0f0      	beq.n	90006fb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006fd2:	f7fc fa0d 	bl	900033f0 <HAL_GetREVID>
90006fd6:	4603      	mov	r3, r0
90006fd8:	f241 0203 	movw	r2, #4099	; 0x1003
90006fdc:	4293      	cmp	r3, r2
90006fde:	d817      	bhi.n	90007010 <HAL_RCC_OscConfig+0x3ec>
90006fe0:	687b      	ldr	r3, [r7, #4]
90006fe2:	6a1b      	ldr	r3, [r3, #32]
90006fe4:	2b20      	cmp	r3, #32
90006fe6:	d108      	bne.n	90006ffa <HAL_RCC_OscConfig+0x3d6>
90006fe8:	4b4c      	ldr	r3, [pc, #304]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006fea:	685b      	ldr	r3, [r3, #4]
90006fec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90006ff0:	4a4a      	ldr	r2, [pc, #296]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90006ff6:	6053      	str	r3, [r2, #4]
90006ff8:	e02e      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
90006ffa:	4b48      	ldr	r3, [pc, #288]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90006ffc:	685b      	ldr	r3, [r3, #4]
90006ffe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90007002:	687b      	ldr	r3, [r7, #4]
90007004:	6a1b      	ldr	r3, [r3, #32]
90007006:	069b      	lsls	r3, r3, #26
90007008:	4944      	ldr	r1, [pc, #272]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000700a:	4313      	orrs	r3, r2
9000700c:	604b      	str	r3, [r1, #4]
9000700e:	e023      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
90007010:	4b42      	ldr	r3, [pc, #264]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007012:	68db      	ldr	r3, [r3, #12]
90007014:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90007018:	687b      	ldr	r3, [r7, #4]
9000701a:	6a1b      	ldr	r3, [r3, #32]
9000701c:	061b      	lsls	r3, r3, #24
9000701e:	493f      	ldr	r1, [pc, #252]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007020:	4313      	orrs	r3, r2
90007022:	60cb      	str	r3, [r1, #12]
90007024:	e018      	b.n	90007058 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90007026:	4b3d      	ldr	r3, [pc, #244]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007028:	681b      	ldr	r3, [r3, #0]
9000702a:	4a3c      	ldr	r2, [pc, #240]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000702c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90007030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007032:	f7fc f9d1 	bl	900033d8 <HAL_GetTick>
90007036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007038:	e008      	b.n	9000704c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000703a:	f7fc f9cd 	bl	900033d8 <HAL_GetTick>
9000703e:	4602      	mov	r2, r0
90007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007042:	1ad3      	subs	r3, r2, r3
90007044:	2b02      	cmp	r3, #2
90007046:	d901      	bls.n	9000704c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007048:	2303      	movs	r3, #3
9000704a:	e23d      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000704c:	4b33      	ldr	r3, [pc, #204]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000704e:	681b      	ldr	r3, [r3, #0]
90007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007054:	2b00      	cmp	r3, #0
90007056:	d1f0      	bne.n	9000703a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007058:	687b      	ldr	r3, [r7, #4]
9000705a:	681b      	ldr	r3, [r3, #0]
9000705c:	f003 0308 	and.w	r3, r3, #8
90007060:	2b00      	cmp	r3, #0
90007062:	d036      	beq.n	900070d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007064:	687b      	ldr	r3, [r7, #4]
90007066:	695b      	ldr	r3, [r3, #20]
90007068:	2b00      	cmp	r3, #0
9000706a:	d019      	beq.n	900070a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
9000706c:	4b2b      	ldr	r3, [pc, #172]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000706e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007070:	4a2a      	ldr	r2, [pc, #168]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007072:	f043 0301 	orr.w	r3, r3, #1
90007076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007078:	f7fc f9ae 	bl	900033d8 <HAL_GetTick>
9000707c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000707e:	e008      	b.n	90007092 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007080:	f7fc f9aa 	bl	900033d8 <HAL_GetTick>
90007084:	4602      	mov	r2, r0
90007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007088:	1ad3      	subs	r3, r2, r3
9000708a:	2b02      	cmp	r3, #2
9000708c:	d901      	bls.n	90007092 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000708e:	2303      	movs	r3, #3
90007090:	e21a      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007092:	4b22      	ldr	r3, [pc, #136]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
90007094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007096:	f003 0302 	and.w	r3, r3, #2
9000709a:	2b00      	cmp	r3, #0
9000709c:	d0f0      	beq.n	90007080 <HAL_RCC_OscConfig+0x45c>
9000709e:	e018      	b.n	900070d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
900070a0:	4b1e      	ldr	r3, [pc, #120]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900070a4:	4a1d      	ldr	r2, [pc, #116]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070a6:	f023 0301 	bic.w	r3, r3, #1
900070aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900070ac:	f7fc f994 	bl	900033d8 <HAL_GetTick>
900070b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070b2:	e008      	b.n	900070c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900070b4:	f7fc f990 	bl	900033d8 <HAL_GetTick>
900070b8:	4602      	mov	r2, r0
900070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900070bc:	1ad3      	subs	r3, r2, r3
900070be:	2b02      	cmp	r3, #2
900070c0:	d901      	bls.n	900070c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900070c2:	2303      	movs	r3, #3
900070c4:	e200      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070c6:	4b15      	ldr	r3, [pc, #84]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900070ca:	f003 0302 	and.w	r3, r3, #2
900070ce:	2b00      	cmp	r3, #0
900070d0:	d1f0      	bne.n	900070b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	681b      	ldr	r3, [r3, #0]
900070d6:	f003 0320 	and.w	r3, r3, #32
900070da:	2b00      	cmp	r3, #0
900070dc:	d039      	beq.n	90007152 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900070de:	687b      	ldr	r3, [r7, #4]
900070e0:	699b      	ldr	r3, [r3, #24]
900070e2:	2b00      	cmp	r3, #0
900070e4:	d01c      	beq.n	90007120 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900070e6:	4b0d      	ldr	r3, [pc, #52]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070e8:	681b      	ldr	r3, [r3, #0]
900070ea:	4a0c      	ldr	r2, [pc, #48]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
900070ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900070f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900070f2:	f7fc f971 	bl	900033d8 <HAL_GetTick>
900070f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900070f8:	e008      	b.n	9000710c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900070fa:	f7fc f96d 	bl	900033d8 <HAL_GetTick>
900070fe:	4602      	mov	r2, r0
90007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007102:	1ad3      	subs	r3, r2, r3
90007104:	2b02      	cmp	r3, #2
90007106:	d901      	bls.n	9000710c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90007108:	2303      	movs	r3, #3
9000710a:	e1dd      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000710c:	4b03      	ldr	r3, [pc, #12]	; (9000711c <HAL_RCC_OscConfig+0x4f8>)
9000710e:	681b      	ldr	r3, [r3, #0]
90007110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90007114:	2b00      	cmp	r3, #0
90007116:	d0f0      	beq.n	900070fa <HAL_RCC_OscConfig+0x4d6>
90007118:	e01b      	b.n	90007152 <HAL_RCC_OscConfig+0x52e>
9000711a:	bf00      	nop
9000711c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007120:	4b9b      	ldr	r3, [pc, #620]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007122:	681b      	ldr	r3, [r3, #0]
90007124:	4a9a      	ldr	r2, [pc, #616]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000712a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000712c:	f7fc f954 	bl	900033d8 <HAL_GetTick>
90007130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007132:	e008      	b.n	90007146 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007134:	f7fc f950 	bl	900033d8 <HAL_GetTick>
90007138:	4602      	mov	r2, r0
9000713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000713c:	1ad3      	subs	r3, r2, r3
9000713e:	2b02      	cmp	r3, #2
90007140:	d901      	bls.n	90007146 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007142:	2303      	movs	r3, #3
90007144:	e1c0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007146:	4b92      	ldr	r3, [pc, #584]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007148:	681b      	ldr	r3, [r3, #0]
9000714a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000714e:	2b00      	cmp	r3, #0
90007150:	d1f0      	bne.n	90007134 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007152:	687b      	ldr	r3, [r7, #4]
90007154:	681b      	ldr	r3, [r3, #0]
90007156:	f003 0304 	and.w	r3, r3, #4
9000715a:	2b00      	cmp	r3, #0
9000715c:	f000 8081 	beq.w	90007262 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007160:	4b8c      	ldr	r3, [pc, #560]	; (90007394 <HAL_RCC_OscConfig+0x770>)
90007162:	681b      	ldr	r3, [r3, #0]
90007164:	4a8b      	ldr	r2, [pc, #556]	; (90007394 <HAL_RCC_OscConfig+0x770>)
90007166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000716a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000716c:	f7fc f934 	bl	900033d8 <HAL_GetTick>
90007170:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007172:	e008      	b.n	90007186 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007174:	f7fc f930 	bl	900033d8 <HAL_GetTick>
90007178:	4602      	mov	r2, r0
9000717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000717c:	1ad3      	subs	r3, r2, r3
9000717e:	2b64      	cmp	r3, #100	; 0x64
90007180:	d901      	bls.n	90007186 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007182:	2303      	movs	r3, #3
90007184:	e1a0      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007186:	4b83      	ldr	r3, [pc, #524]	; (90007394 <HAL_RCC_OscConfig+0x770>)
90007188:	681b      	ldr	r3, [r3, #0]
9000718a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000718e:	2b00      	cmp	r3, #0
90007190:	d0f0      	beq.n	90007174 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90007192:	687b      	ldr	r3, [r7, #4]
90007194:	689b      	ldr	r3, [r3, #8]
90007196:	2b01      	cmp	r3, #1
90007198:	d106      	bne.n	900071a8 <HAL_RCC_OscConfig+0x584>
9000719a:	4b7d      	ldr	r3, [pc, #500]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000719e:	4a7c      	ldr	r2, [pc, #496]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071a0:	f043 0301 	orr.w	r3, r3, #1
900071a4:	6713      	str	r3, [r2, #112]	; 0x70
900071a6:	e02d      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071a8:	687b      	ldr	r3, [r7, #4]
900071aa:	689b      	ldr	r3, [r3, #8]
900071ac:	2b00      	cmp	r3, #0
900071ae:	d10c      	bne.n	900071ca <HAL_RCC_OscConfig+0x5a6>
900071b0:	4b77      	ldr	r3, [pc, #476]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071b4:	4a76      	ldr	r2, [pc, #472]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071b6:	f023 0301 	bic.w	r3, r3, #1
900071ba:	6713      	str	r3, [r2, #112]	; 0x70
900071bc:	4b74      	ldr	r3, [pc, #464]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071c0:	4a73      	ldr	r2, [pc, #460]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071c2:	f023 0304 	bic.w	r3, r3, #4
900071c6:	6713      	str	r3, [r2, #112]	; 0x70
900071c8:	e01c      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071ca:	687b      	ldr	r3, [r7, #4]
900071cc:	689b      	ldr	r3, [r3, #8]
900071ce:	2b05      	cmp	r3, #5
900071d0:	d10c      	bne.n	900071ec <HAL_RCC_OscConfig+0x5c8>
900071d2:	4b6f      	ldr	r3, [pc, #444]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071d6:	4a6e      	ldr	r2, [pc, #440]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071d8:	f043 0304 	orr.w	r3, r3, #4
900071dc:	6713      	str	r3, [r2, #112]	; 0x70
900071de:	4b6c      	ldr	r3, [pc, #432]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071e2:	4a6b      	ldr	r2, [pc, #428]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071e4:	f043 0301 	orr.w	r3, r3, #1
900071e8:	6713      	str	r3, [r2, #112]	; 0x70
900071ea:	e00b      	b.n	90007204 <HAL_RCC_OscConfig+0x5e0>
900071ec:	4b68      	ldr	r3, [pc, #416]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071f0:	4a67      	ldr	r2, [pc, #412]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071f2:	f023 0301 	bic.w	r3, r3, #1
900071f6:	6713      	str	r3, [r2, #112]	; 0x70
900071f8:	4b65      	ldr	r3, [pc, #404]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071fc:	4a64      	ldr	r2, [pc, #400]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900071fe:	f023 0304 	bic.w	r3, r3, #4
90007202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90007204:	687b      	ldr	r3, [r7, #4]
90007206:	689b      	ldr	r3, [r3, #8]
90007208:	2b00      	cmp	r3, #0
9000720a:	d015      	beq.n	90007238 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000720c:	f7fc f8e4 	bl	900033d8 <HAL_GetTick>
90007210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007212:	e00a      	b.n	9000722a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007214:	f7fc f8e0 	bl	900033d8 <HAL_GetTick>
90007218:	4602      	mov	r2, r0
9000721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000721c:	1ad3      	subs	r3, r2, r3
9000721e:	f241 3288 	movw	r2, #5000	; 0x1388
90007222:	4293      	cmp	r3, r2
90007224:	d901      	bls.n	9000722a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007226:	2303      	movs	r3, #3
90007228:	e14e      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000722a:	4b59      	ldr	r3, [pc, #356]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000722e:	f003 0302 	and.w	r3, r3, #2
90007232:	2b00      	cmp	r3, #0
90007234:	d0ee      	beq.n	90007214 <HAL_RCC_OscConfig+0x5f0>
90007236:	e014      	b.n	90007262 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007238:	f7fc f8ce 	bl	900033d8 <HAL_GetTick>
9000723c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000723e:	e00a      	b.n	90007256 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007240:	f7fc f8ca 	bl	900033d8 <HAL_GetTick>
90007244:	4602      	mov	r2, r0
90007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007248:	1ad3      	subs	r3, r2, r3
9000724a:	f241 3288 	movw	r2, #5000	; 0x1388
9000724e:	4293      	cmp	r3, r2
90007250:	d901      	bls.n	90007256 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007252:	2303      	movs	r3, #3
90007254:	e138      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007256:	4b4e      	ldr	r3, [pc, #312]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000725a:	f003 0302 	and.w	r3, r3, #2
9000725e:	2b00      	cmp	r3, #0
90007260:	d1ee      	bne.n	90007240 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007262:	687b      	ldr	r3, [r7, #4]
90007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007266:	2b00      	cmp	r3, #0
90007268:	f000 812d 	beq.w	900074c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000726c:	4b48      	ldr	r3, [pc, #288]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000726e:	691b      	ldr	r3, [r3, #16]
90007270:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007274:	2b18      	cmp	r3, #24
90007276:	f000 80bd 	beq.w	900073f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000727a:	687b      	ldr	r3, [r7, #4]
9000727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000727e:	2b02      	cmp	r3, #2
90007280:	f040 809e 	bne.w	900073c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007284:	4b42      	ldr	r3, [pc, #264]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007286:	681b      	ldr	r3, [r3, #0]
90007288:	4a41      	ldr	r2, [pc, #260]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000728a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000728e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007290:	f7fc f8a2 	bl	900033d8 <HAL_GetTick>
90007294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007296:	e008      	b.n	900072aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007298:	f7fc f89e 	bl	900033d8 <HAL_GetTick>
9000729c:	4602      	mov	r2, r0
9000729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900072a0:	1ad3      	subs	r3, r2, r3
900072a2:	2b02      	cmp	r3, #2
900072a4:	d901      	bls.n	900072aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
900072a6:	2303      	movs	r3, #3
900072a8:	e10e      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900072aa:	4b39      	ldr	r3, [pc, #228]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900072ac:	681b      	ldr	r3, [r3, #0]
900072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900072b2:	2b00      	cmp	r3, #0
900072b4:	d1f0      	bne.n	90007298 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900072b6:	4b36      	ldr	r3, [pc, #216]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900072ba:	4b37      	ldr	r3, [pc, #220]	; (90007398 <HAL_RCC_OscConfig+0x774>)
900072bc:	4013      	ands	r3, r2
900072be:	687a      	ldr	r2, [r7, #4]
900072c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
900072c2:	687a      	ldr	r2, [r7, #4]
900072c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900072c6:	0112      	lsls	r2, r2, #4
900072c8:	430a      	orrs	r2, r1
900072ca:	4931      	ldr	r1, [pc, #196]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
900072cc:	4313      	orrs	r3, r2
900072ce:	628b      	str	r3, [r1, #40]	; 0x28
900072d0:	687b      	ldr	r3, [r7, #4]
900072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900072d4:	3b01      	subs	r3, #1
900072d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900072da:	687b      	ldr	r3, [r7, #4]
900072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900072de:	3b01      	subs	r3, #1
900072e0:	025b      	lsls	r3, r3, #9
900072e2:	b29b      	uxth	r3, r3
900072e4:	431a      	orrs	r2, r3
900072e6:	687b      	ldr	r3, [r7, #4]
900072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900072ea:	3b01      	subs	r3, #1
900072ec:	041b      	lsls	r3, r3, #16
900072ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900072f2:	431a      	orrs	r2, r3
900072f4:	687b      	ldr	r3, [r7, #4]
900072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900072f8:	3b01      	subs	r3, #1
900072fa:	061b      	lsls	r3, r3, #24
900072fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90007300:	4923      	ldr	r1, [pc, #140]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007302:	4313      	orrs	r3, r2
90007304:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
90007306:	4b22      	ldr	r3, [pc, #136]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000730a:	4a21      	ldr	r2, [pc, #132]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000730c:	f023 0301 	bic.w	r3, r3, #1
90007310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007312:	4b1f      	ldr	r3, [pc, #124]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90007316:	4b21      	ldr	r3, [pc, #132]	; (9000739c <HAL_RCC_OscConfig+0x778>)
90007318:	4013      	ands	r3, r2
9000731a:	687a      	ldr	r2, [r7, #4]
9000731c:	6c92      	ldr	r2, [r2, #72]	; 0x48
9000731e:	00d2      	lsls	r2, r2, #3
90007320:	491b      	ldr	r1, [pc, #108]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007322:	4313      	orrs	r3, r2
90007324:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007326:	4b1a      	ldr	r3, [pc, #104]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000732a:	f023 020c 	bic.w	r2, r3, #12
9000732e:	687b      	ldr	r3, [r7, #4]
90007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007332:	4917      	ldr	r1, [pc, #92]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007334:	4313      	orrs	r3, r2
90007336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007338:	4b15      	ldr	r3, [pc, #84]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000733c:	f023 0202 	bic.w	r2, r3, #2
90007340:	687b      	ldr	r3, [r7, #4]
90007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007344:	4912      	ldr	r1, [pc, #72]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007346:	4313      	orrs	r3, r2
90007348:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000734a:	4b11      	ldr	r3, [pc, #68]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000734e:	4a10      	ldr	r2, [pc, #64]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90007354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007356:	4b0e      	ldr	r3, [pc, #56]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000735a:	4a0d      	ldr	r2, [pc, #52]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000735c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007362:	4b0b      	ldr	r3, [pc, #44]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007366:	4a0a      	ldr	r2, [pc, #40]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000736c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
9000736e:	4b08      	ldr	r3, [pc, #32]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007372:	4a07      	ldr	r2, [pc, #28]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007374:	f043 0301 	orr.w	r3, r3, #1
90007378:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
9000737a:	4b05      	ldr	r3, [pc, #20]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
9000737c:	681b      	ldr	r3, [r3, #0]
9000737e:	4a04      	ldr	r2, [pc, #16]	; (90007390 <HAL_RCC_OscConfig+0x76c>)
90007380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90007384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007386:	f7fc f827 	bl	900033d8 <HAL_GetTick>
9000738a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000738c:	e011      	b.n	900073b2 <HAL_RCC_OscConfig+0x78e>
9000738e:	bf00      	nop
90007390:	58024400 	.word	0x58024400
90007394:	58024800 	.word	0x58024800
90007398:	fffffc0c 	.word	0xfffffc0c
9000739c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073a0:	f7fc f81a 	bl	900033d8 <HAL_GetTick>
900073a4:	4602      	mov	r2, r0
900073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900073a8:	1ad3      	subs	r3, r2, r3
900073aa:	2b02      	cmp	r3, #2
900073ac:	d901      	bls.n	900073b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
900073ae:	2303      	movs	r3, #3
900073b0:	e08a      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900073b2:	4b47      	ldr	r3, [pc, #284]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073b4:	681b      	ldr	r3, [r3, #0]
900073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900073ba:	2b00      	cmp	r3, #0
900073bc:	d0f0      	beq.n	900073a0 <HAL_RCC_OscConfig+0x77c>
900073be:	e082      	b.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900073c0:	4b43      	ldr	r3, [pc, #268]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073c2:	681b      	ldr	r3, [r3, #0]
900073c4:	4a42      	ldr	r2, [pc, #264]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900073cc:	f7fc f804 	bl	900033d8 <HAL_GetTick>
900073d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073d2:	e008      	b.n	900073e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073d4:	f7fc f800 	bl	900033d8 <HAL_GetTick>
900073d8:	4602      	mov	r2, r0
900073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900073dc:	1ad3      	subs	r3, r2, r3
900073de:	2b02      	cmp	r3, #2
900073e0:	d901      	bls.n	900073e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900073e2:	2303      	movs	r3, #3
900073e4:	e070      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073e6:	4b3a      	ldr	r3, [pc, #232]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073e8:	681b      	ldr	r3, [r3, #0]
900073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900073ee:	2b00      	cmp	r3, #0
900073f0:	d1f0      	bne.n	900073d4 <HAL_RCC_OscConfig+0x7b0>
900073f2:	e068      	b.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900073f4:	4b36      	ldr	r3, [pc, #216]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900073f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900073fa:	4b35      	ldr	r3, [pc, #212]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900073fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007400:	687b      	ldr	r3, [r7, #4]
90007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007404:	2b01      	cmp	r3, #1
90007406:	d031      	beq.n	9000746c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007408:	693b      	ldr	r3, [r7, #16]
9000740a:	f003 0203 	and.w	r2, r3, #3
9000740e:	687b      	ldr	r3, [r7, #4]
90007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007412:	429a      	cmp	r2, r3
90007414:	d12a      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007416:	693b      	ldr	r3, [r7, #16]
90007418:	091b      	lsrs	r3, r3, #4
9000741a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000741e:	687b      	ldr	r3, [r7, #4]
90007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007422:	429a      	cmp	r2, r3
90007424:	d122      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007426:	68fb      	ldr	r3, [r7, #12]
90007428:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000742c:	687b      	ldr	r3, [r7, #4]
9000742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007430:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007432:	429a      	cmp	r2, r3
90007434:	d11a      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007436:	68fb      	ldr	r3, [r7, #12]
90007438:	0a5b      	lsrs	r3, r3, #9
9000743a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
9000743e:	687b      	ldr	r3, [r7, #4]
90007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007442:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007444:	429a      	cmp	r2, r3
90007446:	d111      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007448:	68fb      	ldr	r3, [r7, #12]
9000744a:	0c1b      	lsrs	r3, r3, #16
9000744c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90007450:	687b      	ldr	r3, [r7, #4]
90007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007454:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007456:	429a      	cmp	r2, r3
90007458:	d108      	bne.n	9000746c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000745a:	68fb      	ldr	r3, [r7, #12]
9000745c:	0e1b      	lsrs	r3, r3, #24
9000745e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90007462:	687b      	ldr	r3, [r7, #4]
90007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007466:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007468:	429a      	cmp	r2, r3
9000746a:	d001      	beq.n	90007470 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
9000746c:	2301      	movs	r3, #1
9000746e:	e02b      	b.n	900074c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007470:	4b17      	ldr	r3, [pc, #92]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
90007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007474:	08db      	lsrs	r3, r3, #3
90007476:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000747a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000747c:	687b      	ldr	r3, [r7, #4]
9000747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007480:	693a      	ldr	r2, [r7, #16]
90007482:	429a      	cmp	r2, r3
90007484:	d01f      	beq.n	900074c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007486:	4b12      	ldr	r3, [pc, #72]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
90007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000748a:	4a11      	ldr	r2, [pc, #68]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
9000748c:	f023 0301 	bic.w	r3, r3, #1
90007490:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90007492:	f7fb ffa1 	bl	900033d8 <HAL_GetTick>
90007496:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007498:	bf00      	nop
9000749a:	f7fb ff9d 	bl	900033d8 <HAL_GetTick>
9000749e:	4602      	mov	r2, r0
900074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900074a2:	4293      	cmp	r3, r2
900074a4:	d0f9      	beq.n	9000749a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
900074a6:	4b0a      	ldr	r3, [pc, #40]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900074aa:	4b0a      	ldr	r3, [pc, #40]	; (900074d4 <HAL_RCC_OscConfig+0x8b0>)
900074ac:	4013      	ands	r3, r2
900074ae:	687a      	ldr	r2, [r7, #4]
900074b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
900074b2:	00d2      	lsls	r2, r2, #3
900074b4:	4906      	ldr	r1, [pc, #24]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074b6:	4313      	orrs	r3, r2
900074b8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900074ba:	4b05      	ldr	r3, [pc, #20]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900074be:	4a04      	ldr	r2, [pc, #16]	; (900074d0 <HAL_RCC_OscConfig+0x8ac>)
900074c0:	f043 0301 	orr.w	r3, r3, #1
900074c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
900074c6:	2300      	movs	r3, #0
}
900074c8:	4618      	mov	r0, r3
900074ca:	3730      	adds	r7, #48	; 0x30
900074cc:	46bd      	mov	sp, r7
900074ce:	bd80      	pop	{r7, pc}
900074d0:	58024400 	.word	0x58024400
900074d4:	ffff0007 	.word	0xffff0007

900074d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900074d8:	b580      	push	{r7, lr}
900074da:	b086      	sub	sp, #24
900074dc:	af00      	add	r7, sp, #0
900074de:	6078      	str	r0, [r7, #4]
900074e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900074e2:	687b      	ldr	r3, [r7, #4]
900074e4:	2b00      	cmp	r3, #0
900074e6:	d101      	bne.n	900074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900074e8:	2301      	movs	r3, #1
900074ea:	e19c      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900074ec:	4b8a      	ldr	r3, [pc, #552]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
900074ee:	681b      	ldr	r3, [r3, #0]
900074f0:	f003 030f 	and.w	r3, r3, #15
900074f4:	683a      	ldr	r2, [r7, #0]
900074f6:	429a      	cmp	r2, r3
900074f8:	d910      	bls.n	9000751c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900074fa:	4b87      	ldr	r3, [pc, #540]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
900074fc:	681b      	ldr	r3, [r3, #0]
900074fe:	f023 020f 	bic.w	r2, r3, #15
90007502:	4985      	ldr	r1, [pc, #532]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
90007504:	683b      	ldr	r3, [r7, #0]
90007506:	4313      	orrs	r3, r2
90007508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000750a:	4b83      	ldr	r3, [pc, #524]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
9000750c:	681b      	ldr	r3, [r3, #0]
9000750e:	f003 030f 	and.w	r3, r3, #15
90007512:	683a      	ldr	r2, [r7, #0]
90007514:	429a      	cmp	r2, r3
90007516:	d001      	beq.n	9000751c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007518:	2301      	movs	r3, #1
9000751a:	e184      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000751c:	687b      	ldr	r3, [r7, #4]
9000751e:	681b      	ldr	r3, [r3, #0]
90007520:	f003 0304 	and.w	r3, r3, #4
90007524:	2b00      	cmp	r3, #0
90007526:	d010      	beq.n	9000754a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	691a      	ldr	r2, [r3, #16]
9000752c:	4b7b      	ldr	r3, [pc, #492]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000752e:	699b      	ldr	r3, [r3, #24]
90007530:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007534:	429a      	cmp	r2, r3
90007536:	d908      	bls.n	9000754a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007538:	4b78      	ldr	r3, [pc, #480]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000753a:	699b      	ldr	r3, [r3, #24]
9000753c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007540:	687b      	ldr	r3, [r7, #4]
90007542:	691b      	ldr	r3, [r3, #16]
90007544:	4975      	ldr	r1, [pc, #468]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007546:	4313      	orrs	r3, r2
90007548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000754a:	687b      	ldr	r3, [r7, #4]
9000754c:	681b      	ldr	r3, [r3, #0]
9000754e:	f003 0308 	and.w	r3, r3, #8
90007552:	2b00      	cmp	r3, #0
90007554:	d010      	beq.n	90007578 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007556:	687b      	ldr	r3, [r7, #4]
90007558:	695a      	ldr	r2, [r3, #20]
9000755a:	4b70      	ldr	r3, [pc, #448]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000755c:	69db      	ldr	r3, [r3, #28]
9000755e:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007562:	429a      	cmp	r2, r3
90007564:	d908      	bls.n	90007578 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007566:	4b6d      	ldr	r3, [pc, #436]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007568:	69db      	ldr	r3, [r3, #28]
9000756a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
9000756e:	687b      	ldr	r3, [r7, #4]
90007570:	695b      	ldr	r3, [r3, #20]
90007572:	496a      	ldr	r1, [pc, #424]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007574:	4313      	orrs	r3, r2
90007576:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007578:	687b      	ldr	r3, [r7, #4]
9000757a:	681b      	ldr	r3, [r3, #0]
9000757c:	f003 0310 	and.w	r3, r3, #16
90007580:	2b00      	cmp	r3, #0
90007582:	d010      	beq.n	900075a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007584:	687b      	ldr	r3, [r7, #4]
90007586:	699a      	ldr	r2, [r3, #24]
90007588:	4b64      	ldr	r3, [pc, #400]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000758a:	69db      	ldr	r3, [r3, #28]
9000758c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007590:	429a      	cmp	r2, r3
90007592:	d908      	bls.n	900075a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007594:	4b61      	ldr	r3, [pc, #388]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007596:	69db      	ldr	r3, [r3, #28]
90007598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
9000759c:	687b      	ldr	r3, [r7, #4]
9000759e:	699b      	ldr	r3, [r3, #24]
900075a0:	495e      	ldr	r1, [pc, #376]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075a2:	4313      	orrs	r3, r2
900075a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900075a6:	687b      	ldr	r3, [r7, #4]
900075a8:	681b      	ldr	r3, [r3, #0]
900075aa:	f003 0320 	and.w	r3, r3, #32
900075ae:	2b00      	cmp	r3, #0
900075b0:	d010      	beq.n	900075d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900075b2:	687b      	ldr	r3, [r7, #4]
900075b4:	69da      	ldr	r2, [r3, #28]
900075b6:	4b59      	ldr	r3, [pc, #356]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075b8:	6a1b      	ldr	r3, [r3, #32]
900075ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
900075be:	429a      	cmp	r2, r3
900075c0:	d908      	bls.n	900075d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075c2:	4b56      	ldr	r3, [pc, #344]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075c4:	6a1b      	ldr	r3, [r3, #32]
900075c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900075ca:	687b      	ldr	r3, [r7, #4]
900075cc:	69db      	ldr	r3, [r3, #28]
900075ce:	4953      	ldr	r1, [pc, #332]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075d0:	4313      	orrs	r3, r2
900075d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900075d4:	687b      	ldr	r3, [r7, #4]
900075d6:	681b      	ldr	r3, [r3, #0]
900075d8:	f003 0302 	and.w	r3, r3, #2
900075dc:	2b00      	cmp	r3, #0
900075de:	d010      	beq.n	90007602 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900075e0:	687b      	ldr	r3, [r7, #4]
900075e2:	68da      	ldr	r2, [r3, #12]
900075e4:	4b4d      	ldr	r3, [pc, #308]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075e6:	699b      	ldr	r3, [r3, #24]
900075e8:	f003 030f 	and.w	r3, r3, #15
900075ec:	429a      	cmp	r2, r3
900075ee:	d908      	bls.n	90007602 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900075f0:	4b4a      	ldr	r3, [pc, #296]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075f2:	699b      	ldr	r3, [r3, #24]
900075f4:	f023 020f 	bic.w	r2, r3, #15
900075f8:	687b      	ldr	r3, [r7, #4]
900075fa:	68db      	ldr	r3, [r3, #12]
900075fc:	4947      	ldr	r1, [pc, #284]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900075fe:	4313      	orrs	r3, r2
90007600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90007602:	687b      	ldr	r3, [r7, #4]
90007604:	681b      	ldr	r3, [r3, #0]
90007606:	f003 0301 	and.w	r3, r3, #1
9000760a:	2b00      	cmp	r3, #0
9000760c:	d055      	beq.n	900076ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000760e:	4b43      	ldr	r3, [pc, #268]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007610:	699b      	ldr	r3, [r3, #24]
90007612:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90007616:	687b      	ldr	r3, [r7, #4]
90007618:	689b      	ldr	r3, [r3, #8]
9000761a:	4940      	ldr	r1, [pc, #256]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000761c:	4313      	orrs	r3, r2
9000761e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007620:	687b      	ldr	r3, [r7, #4]
90007622:	685b      	ldr	r3, [r3, #4]
90007624:	2b02      	cmp	r3, #2
90007626:	d107      	bne.n	90007638 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007628:	4b3c      	ldr	r3, [pc, #240]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000762a:	681b      	ldr	r3, [r3, #0]
9000762c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90007630:	2b00      	cmp	r3, #0
90007632:	d121      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007634:	2301      	movs	r3, #1
90007636:	e0f6      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007638:	687b      	ldr	r3, [r7, #4]
9000763a:	685b      	ldr	r3, [r3, #4]
9000763c:	2b03      	cmp	r3, #3
9000763e:	d107      	bne.n	90007650 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007640:	4b36      	ldr	r3, [pc, #216]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007642:	681b      	ldr	r3, [r3, #0]
90007644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90007648:	2b00      	cmp	r3, #0
9000764a:	d115      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000764c:	2301      	movs	r3, #1
9000764e:	e0ea      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007650:	687b      	ldr	r3, [r7, #4]
90007652:	685b      	ldr	r3, [r3, #4]
90007654:	2b01      	cmp	r3, #1
90007656:	d107      	bne.n	90007668 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007658:	4b30      	ldr	r3, [pc, #192]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000765a:	681b      	ldr	r3, [r3, #0]
9000765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007660:	2b00      	cmp	r3, #0
90007662:	d109      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007664:	2301      	movs	r3, #1
90007666:	e0de      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007668:	4b2c      	ldr	r3, [pc, #176]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000766a:	681b      	ldr	r3, [r3, #0]
9000766c:	f003 0304 	and.w	r3, r3, #4
90007670:	2b00      	cmp	r3, #0
90007672:	d101      	bne.n	90007678 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007674:	2301      	movs	r3, #1
90007676:	e0d6      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007678:	4b28      	ldr	r3, [pc, #160]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
9000767a:	691b      	ldr	r3, [r3, #16]
9000767c:	f023 0207 	bic.w	r2, r3, #7
90007680:	687b      	ldr	r3, [r7, #4]
90007682:	685b      	ldr	r3, [r3, #4]
90007684:	4925      	ldr	r1, [pc, #148]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
90007686:	4313      	orrs	r3, r2
90007688:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000768a:	f7fb fea5 	bl	900033d8 <HAL_GetTick>
9000768e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007690:	e00a      	b.n	900076a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90007692:	f7fb fea1 	bl	900033d8 <HAL_GetTick>
90007696:	4602      	mov	r2, r0
90007698:	697b      	ldr	r3, [r7, #20]
9000769a:	1ad3      	subs	r3, r2, r3
9000769c:	f241 3288 	movw	r2, #5000	; 0x1388
900076a0:	4293      	cmp	r3, r2
900076a2:	d901      	bls.n	900076a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
900076a4:	2303      	movs	r3, #3
900076a6:	e0be      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900076a8:	4b1c      	ldr	r3, [pc, #112]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900076aa:	691b      	ldr	r3, [r3, #16]
900076ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
900076b0:	687b      	ldr	r3, [r7, #4]
900076b2:	685b      	ldr	r3, [r3, #4]
900076b4:	00db      	lsls	r3, r3, #3
900076b6:	429a      	cmp	r2, r3
900076b8:	d1eb      	bne.n	90007692 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900076ba:	687b      	ldr	r3, [r7, #4]
900076bc:	681b      	ldr	r3, [r3, #0]
900076be:	f003 0302 	and.w	r3, r3, #2
900076c2:	2b00      	cmp	r3, #0
900076c4:	d010      	beq.n	900076e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900076c6:	687b      	ldr	r3, [r7, #4]
900076c8:	68da      	ldr	r2, [r3, #12]
900076ca:	4b14      	ldr	r3, [pc, #80]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900076cc:	699b      	ldr	r3, [r3, #24]
900076ce:	f003 030f 	and.w	r3, r3, #15
900076d2:	429a      	cmp	r2, r3
900076d4:	d208      	bcs.n	900076e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900076d6:	4b11      	ldr	r3, [pc, #68]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900076d8:	699b      	ldr	r3, [r3, #24]
900076da:	f023 020f 	bic.w	r2, r3, #15
900076de:	687b      	ldr	r3, [r7, #4]
900076e0:	68db      	ldr	r3, [r3, #12]
900076e2:	490e      	ldr	r1, [pc, #56]	; (9000771c <HAL_RCC_ClockConfig+0x244>)
900076e4:	4313      	orrs	r3, r2
900076e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900076e8:	4b0b      	ldr	r3, [pc, #44]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
900076ea:	681b      	ldr	r3, [r3, #0]
900076ec:	f003 030f 	and.w	r3, r3, #15
900076f0:	683a      	ldr	r2, [r7, #0]
900076f2:	429a      	cmp	r2, r3
900076f4:	d214      	bcs.n	90007720 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900076f6:	4b08      	ldr	r3, [pc, #32]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
900076f8:	681b      	ldr	r3, [r3, #0]
900076fa:	f023 020f 	bic.w	r2, r3, #15
900076fe:	4906      	ldr	r1, [pc, #24]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
90007700:	683b      	ldr	r3, [r7, #0]
90007702:	4313      	orrs	r3, r2
90007704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90007706:	4b04      	ldr	r3, [pc, #16]	; (90007718 <HAL_RCC_ClockConfig+0x240>)
90007708:	681b      	ldr	r3, [r3, #0]
9000770a:	f003 030f 	and.w	r3, r3, #15
9000770e:	683a      	ldr	r2, [r7, #0]
90007710:	429a      	cmp	r2, r3
90007712:	d005      	beq.n	90007720 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007714:	2301      	movs	r3, #1
90007716:	e086      	b.n	90007826 <HAL_RCC_ClockConfig+0x34e>
90007718:	52002000 	.word	0x52002000
9000771c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007720:	687b      	ldr	r3, [r7, #4]
90007722:	681b      	ldr	r3, [r3, #0]
90007724:	f003 0304 	and.w	r3, r3, #4
90007728:	2b00      	cmp	r3, #0
9000772a:	d010      	beq.n	9000774e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000772c:	687b      	ldr	r3, [r7, #4]
9000772e:	691a      	ldr	r2, [r3, #16]
90007730:	4b3f      	ldr	r3, [pc, #252]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
90007732:	699b      	ldr	r3, [r3, #24]
90007734:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007738:	429a      	cmp	r2, r3
9000773a:	d208      	bcs.n	9000774e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000773c:	4b3c      	ldr	r3, [pc, #240]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
9000773e:	699b      	ldr	r3, [r3, #24]
90007740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007744:	687b      	ldr	r3, [r7, #4]
90007746:	691b      	ldr	r3, [r3, #16]
90007748:	4939      	ldr	r1, [pc, #228]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
9000774a:	4313      	orrs	r3, r2
9000774c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000774e:	687b      	ldr	r3, [r7, #4]
90007750:	681b      	ldr	r3, [r3, #0]
90007752:	f003 0308 	and.w	r3, r3, #8
90007756:	2b00      	cmp	r3, #0
90007758:	d010      	beq.n	9000777c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000775a:	687b      	ldr	r3, [r7, #4]
9000775c:	695a      	ldr	r2, [r3, #20]
9000775e:	4b34      	ldr	r3, [pc, #208]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
90007760:	69db      	ldr	r3, [r3, #28]
90007762:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007766:	429a      	cmp	r2, r3
90007768:	d208      	bcs.n	9000777c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000776a:	4b31      	ldr	r3, [pc, #196]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
9000776c:	69db      	ldr	r3, [r3, #28]
9000776e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007772:	687b      	ldr	r3, [r7, #4]
90007774:	695b      	ldr	r3, [r3, #20]
90007776:	492e      	ldr	r1, [pc, #184]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
90007778:	4313      	orrs	r3, r2
9000777a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000777c:	687b      	ldr	r3, [r7, #4]
9000777e:	681b      	ldr	r3, [r3, #0]
90007780:	f003 0310 	and.w	r3, r3, #16
90007784:	2b00      	cmp	r3, #0
90007786:	d010      	beq.n	900077aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007788:	687b      	ldr	r3, [r7, #4]
9000778a:	699a      	ldr	r2, [r3, #24]
9000778c:	4b28      	ldr	r3, [pc, #160]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
9000778e:	69db      	ldr	r3, [r3, #28]
90007790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007794:	429a      	cmp	r2, r3
90007796:	d208      	bcs.n	900077aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007798:	4b25      	ldr	r3, [pc, #148]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
9000779a:	69db      	ldr	r3, [r3, #28]
9000779c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
900077a0:	687b      	ldr	r3, [r7, #4]
900077a2:	699b      	ldr	r3, [r3, #24]
900077a4:	4922      	ldr	r1, [pc, #136]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077a6:	4313      	orrs	r3, r2
900077a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900077aa:	687b      	ldr	r3, [r7, #4]
900077ac:	681b      	ldr	r3, [r3, #0]
900077ae:	f003 0320 	and.w	r3, r3, #32
900077b2:	2b00      	cmp	r3, #0
900077b4:	d010      	beq.n	900077d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900077b6:	687b      	ldr	r3, [r7, #4]
900077b8:	69da      	ldr	r2, [r3, #28]
900077ba:	4b1d      	ldr	r3, [pc, #116]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077bc:	6a1b      	ldr	r3, [r3, #32]
900077be:	f003 0370 	and.w	r3, r3, #112	; 0x70
900077c2:	429a      	cmp	r2, r3
900077c4:	d208      	bcs.n	900077d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900077c6:	4b1a      	ldr	r3, [pc, #104]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077c8:	6a1b      	ldr	r3, [r3, #32]
900077ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900077ce:	687b      	ldr	r3, [r7, #4]
900077d0:	69db      	ldr	r3, [r3, #28]
900077d2:	4917      	ldr	r1, [pc, #92]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077d4:	4313      	orrs	r3, r2
900077d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900077d8:	f000 f834 	bl	90007844 <HAL_RCC_GetSysClockFreq>
900077dc:	4602      	mov	r2, r0
900077de:	4b14      	ldr	r3, [pc, #80]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077e0:	699b      	ldr	r3, [r3, #24]
900077e2:	0a1b      	lsrs	r3, r3, #8
900077e4:	f003 030f 	and.w	r3, r3, #15
900077e8:	4912      	ldr	r1, [pc, #72]	; (90007834 <HAL_RCC_ClockConfig+0x35c>)
900077ea:	5ccb      	ldrb	r3, [r1, r3]
900077ec:	f003 031f 	and.w	r3, r3, #31
900077f0:	fa22 f303 	lsr.w	r3, r2, r3
900077f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900077f6:	4b0e      	ldr	r3, [pc, #56]	; (90007830 <HAL_RCC_ClockConfig+0x358>)
900077f8:	699b      	ldr	r3, [r3, #24]
900077fa:	f003 030f 	and.w	r3, r3, #15
900077fe:	4a0d      	ldr	r2, [pc, #52]	; (90007834 <HAL_RCC_ClockConfig+0x35c>)
90007800:	5cd3      	ldrb	r3, [r2, r3]
90007802:	f003 031f 	and.w	r3, r3, #31
90007806:	693a      	ldr	r2, [r7, #16]
90007808:	fa22 f303 	lsr.w	r3, r2, r3
9000780c:	4a0a      	ldr	r2, [pc, #40]	; (90007838 <HAL_RCC_ClockConfig+0x360>)
9000780e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007810:	4a0a      	ldr	r2, [pc, #40]	; (9000783c <HAL_RCC_ClockConfig+0x364>)
90007812:	693b      	ldr	r3, [r7, #16]
90007814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007816:	4b0a      	ldr	r3, [pc, #40]	; (90007840 <HAL_RCC_ClockConfig+0x368>)
90007818:	681b      	ldr	r3, [r3, #0]
9000781a:	4618      	mov	r0, r3
9000781c:	f7fb fd92 	bl	90003344 <HAL_InitTick>
90007820:	4603      	mov	r3, r0
90007822:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007824:	7bfb      	ldrb	r3, [r7, #15]
}
90007826:	4618      	mov	r0, r3
90007828:	3718      	adds	r7, #24
9000782a:	46bd      	mov	sp, r7
9000782c:	bd80      	pop	{r7, pc}
9000782e:	bf00      	nop
90007830:	58024400 	.word	0x58024400
90007834:	9000e3f0 	.word	0x9000e3f0
90007838:	2000003c 	.word	0x2000003c
9000783c:	20000038 	.word	0x20000038
90007840:	20000040 	.word	0x20000040

90007844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007844:	b480      	push	{r7}
90007846:	b089      	sub	sp, #36	; 0x24
90007848:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
9000784a:	4bb3      	ldr	r3, [pc, #716]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000784c:	691b      	ldr	r3, [r3, #16]
9000784e:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007852:	2b18      	cmp	r3, #24
90007854:	f200 8155 	bhi.w	90007b02 <HAL_RCC_GetSysClockFreq+0x2be>
90007858:	a201      	add	r2, pc, #4	; (adr r2, 90007860 <HAL_RCC_GetSysClockFreq+0x1c>)
9000785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000785e:	bf00      	nop
90007860:	900078c5 	.word	0x900078c5
90007864:	90007b03 	.word	0x90007b03
90007868:	90007b03 	.word	0x90007b03
9000786c:	90007b03 	.word	0x90007b03
90007870:	90007b03 	.word	0x90007b03
90007874:	90007b03 	.word	0x90007b03
90007878:	90007b03 	.word	0x90007b03
9000787c:	90007b03 	.word	0x90007b03
90007880:	900078eb 	.word	0x900078eb
90007884:	90007b03 	.word	0x90007b03
90007888:	90007b03 	.word	0x90007b03
9000788c:	90007b03 	.word	0x90007b03
90007890:	90007b03 	.word	0x90007b03
90007894:	90007b03 	.word	0x90007b03
90007898:	90007b03 	.word	0x90007b03
9000789c:	90007b03 	.word	0x90007b03
900078a0:	900078f1 	.word	0x900078f1
900078a4:	90007b03 	.word	0x90007b03
900078a8:	90007b03 	.word	0x90007b03
900078ac:	90007b03 	.word	0x90007b03
900078b0:	90007b03 	.word	0x90007b03
900078b4:	90007b03 	.word	0x90007b03
900078b8:	90007b03 	.word	0x90007b03
900078bc:	90007b03 	.word	0x90007b03
900078c0:	900078f7 	.word	0x900078f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078c4:	4b94      	ldr	r3, [pc, #592]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078c6:	681b      	ldr	r3, [r3, #0]
900078c8:	f003 0320 	and.w	r3, r3, #32
900078cc:	2b00      	cmp	r3, #0
900078ce:	d009      	beq.n	900078e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078d0:	4b91      	ldr	r3, [pc, #580]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078d2:	681b      	ldr	r3, [r3, #0]
900078d4:	08db      	lsrs	r3, r3, #3
900078d6:	f003 0303 	and.w	r3, r3, #3
900078da:	4a90      	ldr	r2, [pc, #576]	; (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078dc:	fa22 f303 	lsr.w	r3, r2, r3
900078e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900078e2:	e111      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900078e4:	4b8d      	ldr	r3, [pc, #564]	; (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078e6:	61bb      	str	r3, [r7, #24]
      break;
900078e8:	e10e      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900078ea:	4b8d      	ldr	r3, [pc, #564]	; (90007b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
900078ec:	61bb      	str	r3, [r7, #24]
      break;
900078ee:	e10b      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900078f0:	4b8c      	ldr	r3, [pc, #560]	; (90007b24 <HAL_RCC_GetSysClockFreq+0x2e0>)
900078f2:	61bb      	str	r3, [r7, #24]
      break;
900078f4:	e108      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900078f6:	4b88      	ldr	r3, [pc, #544]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900078fa:	f003 0303 	and.w	r3, r3, #3
900078fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
90007900:	4b85      	ldr	r3, [pc, #532]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90007904:	091b      	lsrs	r3, r3, #4
90007906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000790a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000790c:	4b82      	ldr	r3, [pc, #520]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007910:	f003 0301 	and.w	r3, r3, #1
90007914:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007916:	4b80      	ldr	r3, [pc, #512]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000791a:	08db      	lsrs	r3, r3, #3
9000791c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007920:	68fa      	ldr	r2, [r7, #12]
90007922:	fb02 f303 	mul.w	r3, r2, r3
90007926:	ee07 3a90 	vmov	s15, r3
9000792a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000792e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007932:	693b      	ldr	r3, [r7, #16]
90007934:	2b00      	cmp	r3, #0
90007936:	f000 80e1 	beq.w	90007afc <HAL_RCC_GetSysClockFreq+0x2b8>
9000793a:	697b      	ldr	r3, [r7, #20]
9000793c:	2b02      	cmp	r3, #2
9000793e:	f000 8083 	beq.w	90007a48 <HAL_RCC_GetSysClockFreq+0x204>
90007942:	697b      	ldr	r3, [r7, #20]
90007944:	2b02      	cmp	r3, #2
90007946:	f200 80a1 	bhi.w	90007a8c <HAL_RCC_GetSysClockFreq+0x248>
9000794a:	697b      	ldr	r3, [r7, #20]
9000794c:	2b00      	cmp	r3, #0
9000794e:	d003      	beq.n	90007958 <HAL_RCC_GetSysClockFreq+0x114>
90007950:	697b      	ldr	r3, [r7, #20]
90007952:	2b01      	cmp	r3, #1
90007954:	d056      	beq.n	90007a04 <HAL_RCC_GetSysClockFreq+0x1c0>
90007956:	e099      	b.n	90007a8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007958:	4b6f      	ldr	r3, [pc, #444]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000795a:	681b      	ldr	r3, [r3, #0]
9000795c:	f003 0320 	and.w	r3, r3, #32
90007960:	2b00      	cmp	r3, #0
90007962:	d02d      	beq.n	900079c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007964:	4b6c      	ldr	r3, [pc, #432]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007966:	681b      	ldr	r3, [r3, #0]
90007968:	08db      	lsrs	r3, r3, #3
9000796a:	f003 0303 	and.w	r3, r3, #3
9000796e:	4a6b      	ldr	r2, [pc, #428]	; (90007b1c <HAL_RCC_GetSysClockFreq+0x2d8>)
90007970:	fa22 f303 	lsr.w	r3, r2, r3
90007974:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007976:	687b      	ldr	r3, [r7, #4]
90007978:	ee07 3a90 	vmov	s15, r3
9000797c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007980:	693b      	ldr	r3, [r7, #16]
90007982:	ee07 3a90 	vmov	s15, r3
90007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000798e:	4b62      	ldr	r3, [pc, #392]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007992:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007996:	ee07 3a90 	vmov	s15, r3
9000799a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000799e:	ed97 6a02 	vldr	s12, [r7, #8]
900079a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
900079a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900079b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
900079ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900079be:	e087      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079c0:	693b      	ldr	r3, [r7, #16]
900079c2:	ee07 3a90 	vmov	s15, r3
900079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 90007b2c <HAL_RCC_GetSysClockFreq+0x2e8>
900079ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079d2:	4b51      	ldr	r3, [pc, #324]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079da:	ee07 3a90 	vmov	s15, r3
900079de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079e2:	ed97 6a02 	vldr	s12, [r7, #8]
900079e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
900079ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900079f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900079fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a02:	e065      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a04:	693b      	ldr	r3, [r7, #16]
90007a06:	ee07 3a90 	vmov	s15, r3
90007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 90007b30 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a16:	4b40      	ldr	r3, [pc, #256]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a1e:	ee07 3a90 	vmov	s15, r3
90007a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a26:	ed97 6a02 	vldr	s12, [r7, #8]
90007a2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a46:	e043      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a48:	693b      	ldr	r3, [r7, #16]
90007a4a:	ee07 3a90 	vmov	s15, r3
90007a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a52:	eddf 6a38 	vldr	s13, [pc, #224]	; 90007b34 <HAL_RCC_GetSysClockFreq+0x2f0>
90007a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a5a:	4b2f      	ldr	r3, [pc, #188]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a62:	ee07 3a90 	vmov	s15, r3
90007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a6a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a8a:	e021      	b.n	90007ad0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a8c:	693b      	ldr	r3, [r7, #16]
90007a8e:	ee07 3a90 	vmov	s15, r3
90007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a96:	eddf 6a26 	vldr	s13, [pc, #152]	; 90007b30 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a9e:	4b1e      	ldr	r3, [pc, #120]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007aa6:	ee07 3a90 	vmov	s15, r3
90007aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007aae:	ed97 6a02 	vldr	s12, [r7, #8]
90007ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90007b28 <HAL_RCC_GetSysClockFreq+0x2e4>
90007ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
90007aca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007ace:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007ad0:	4b11      	ldr	r3, [pc, #68]	; (90007b18 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007ad4:	0a5b      	lsrs	r3, r3, #9
90007ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90007ada:	3301      	adds	r3, #1
90007adc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007ade:	683b      	ldr	r3, [r7, #0]
90007ae0:	ee07 3a90 	vmov	s15, r3
90007ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007ae8:	edd7 6a07 	vldr	s13, [r7, #28]
90007aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007af4:	ee17 3a90 	vmov	r3, s15
90007af8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007afa:	e005      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007afc:	2300      	movs	r3, #0
90007afe:	61bb      	str	r3, [r7, #24]
      break;
90007b00:	e002      	b.n	90007b08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007b02:	4b07      	ldr	r3, [pc, #28]	; (90007b20 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007b04:	61bb      	str	r3, [r7, #24]
      break;
90007b06:	bf00      	nop
  }

  return sysclockfreq;
90007b08:	69bb      	ldr	r3, [r7, #24]
}
90007b0a:	4618      	mov	r0, r3
90007b0c:	3724      	adds	r7, #36	; 0x24
90007b0e:	46bd      	mov	sp, r7
90007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b14:	4770      	bx	lr
90007b16:	bf00      	nop
90007b18:	58024400 	.word	0x58024400
90007b1c:	03d09000 	.word	0x03d09000
90007b20:	003d0900 	.word	0x003d0900
90007b24:	017d7840 	.word	0x017d7840
90007b28:	46000000 	.word	0x46000000
90007b2c:	4c742400 	.word	0x4c742400
90007b30:	4a742400 	.word	0x4a742400
90007b34:	4bbebc20 	.word	0x4bbebc20

90007b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007b38:	b580      	push	{r7, lr}
90007b3a:	b082      	sub	sp, #8
90007b3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007b3e:	f7ff fe81 	bl	90007844 <HAL_RCC_GetSysClockFreq>
90007b42:	4602      	mov	r2, r0
90007b44:	4b10      	ldr	r3, [pc, #64]	; (90007b88 <HAL_RCC_GetHCLKFreq+0x50>)
90007b46:	699b      	ldr	r3, [r3, #24]
90007b48:	0a1b      	lsrs	r3, r3, #8
90007b4a:	f003 030f 	and.w	r3, r3, #15
90007b4e:	490f      	ldr	r1, [pc, #60]	; (90007b8c <HAL_RCC_GetHCLKFreq+0x54>)
90007b50:	5ccb      	ldrb	r3, [r1, r3]
90007b52:	f003 031f 	and.w	r3, r3, #31
90007b56:	fa22 f303 	lsr.w	r3, r2, r3
90007b5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007b5c:	4b0a      	ldr	r3, [pc, #40]	; (90007b88 <HAL_RCC_GetHCLKFreq+0x50>)
90007b5e:	699b      	ldr	r3, [r3, #24]
90007b60:	f003 030f 	and.w	r3, r3, #15
90007b64:	4a09      	ldr	r2, [pc, #36]	; (90007b8c <HAL_RCC_GetHCLKFreq+0x54>)
90007b66:	5cd3      	ldrb	r3, [r2, r3]
90007b68:	f003 031f 	and.w	r3, r3, #31
90007b6c:	687a      	ldr	r2, [r7, #4]
90007b6e:	fa22 f303 	lsr.w	r3, r2, r3
90007b72:	4a07      	ldr	r2, [pc, #28]	; (90007b90 <HAL_RCC_GetHCLKFreq+0x58>)
90007b74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007b76:	4a07      	ldr	r2, [pc, #28]	; (90007b94 <HAL_RCC_GetHCLKFreq+0x5c>)
90007b78:	687b      	ldr	r3, [r7, #4]
90007b7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007b7c:	4b04      	ldr	r3, [pc, #16]	; (90007b90 <HAL_RCC_GetHCLKFreq+0x58>)
90007b7e:	681b      	ldr	r3, [r3, #0]
}
90007b80:	4618      	mov	r0, r3
90007b82:	3708      	adds	r7, #8
90007b84:	46bd      	mov	sp, r7
90007b86:	bd80      	pop	{r7, pc}
90007b88:	58024400 	.word	0x58024400
90007b8c:	9000e3f0 	.word	0x9000e3f0
90007b90:	2000003c 	.word	0x2000003c
90007b94:	20000038 	.word	0x20000038

90007b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007b98:	b580      	push	{r7, lr}
90007b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007b9c:	f7ff ffcc 	bl	90007b38 <HAL_RCC_GetHCLKFreq>
90007ba0:	4602      	mov	r2, r0
90007ba2:	4b06      	ldr	r3, [pc, #24]	; (90007bbc <HAL_RCC_GetPCLK2Freq+0x24>)
90007ba4:	69db      	ldr	r3, [r3, #28]
90007ba6:	0a1b      	lsrs	r3, r3, #8
90007ba8:	f003 0307 	and.w	r3, r3, #7
90007bac:	4904      	ldr	r1, [pc, #16]	; (90007bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
90007bae:	5ccb      	ldrb	r3, [r1, r3]
90007bb0:	f003 031f 	and.w	r3, r3, #31
90007bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007bb8:	4618      	mov	r0, r3
90007bba:	bd80      	pop	{r7, pc}
90007bbc:	58024400 	.word	0x58024400
90007bc0:	9000e3f0 	.word	0x9000e3f0

90007bc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007bc8:	b0ca      	sub	sp, #296	; 0x128
90007bca:	af00      	add	r7, sp, #0
90007bcc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007bd0:	2300      	movs	r3, #0
90007bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007bd6:	2300      	movs	r3, #0
90007bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007be4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
90007be8:	2500      	movs	r5, #0
90007bea:	ea54 0305 	orrs.w	r3, r4, r5
90007bee:	d049      	beq.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90007bfa:	d02f      	beq.n	90007c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
90007bfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90007c00:	d828      	bhi.n	90007c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007c06:	d01a      	beq.n	90007c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007c0c:	d822      	bhi.n	90007c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007c0e:	2b00      	cmp	r3, #0
90007c10:	d003      	beq.n	90007c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
90007c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007c16:	d007      	beq.n	90007c28 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007c18:	e01c      	b.n	90007c54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c1a:	4bb8      	ldr	r3, [pc, #736]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007c1e:	4ab7      	ldr	r2, [pc, #732]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c26:	e01a      	b.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c2c:	3308      	adds	r3, #8
90007c2e:	2102      	movs	r1, #2
90007c30:	4618      	mov	r0, r3
90007c32:	f001 f9d1 	bl	90008fd8 <RCCEx_PLL2_Config>
90007c36:	4603      	mov	r3, r0
90007c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c3c:	e00f      	b.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c42:	3328      	adds	r3, #40	; 0x28
90007c44:	2102      	movs	r1, #2
90007c46:	4618      	mov	r0, r3
90007c48:	f001 fa78 	bl	9000913c <RCCEx_PLL3_Config>
90007c4c:	4603      	mov	r3, r0
90007c4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c52:	e004      	b.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c54:	2301      	movs	r3, #1
90007c56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007c5a:	e000      	b.n	90007c5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007c62:	2b00      	cmp	r3, #0
90007c64:	d10a      	bne.n	90007c7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007c66:	4ba5      	ldr	r3, [pc, #660]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007c6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
90007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007c74:	4aa1      	ldr	r2, [pc, #644]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c76:	430b      	orrs	r3, r1
90007c78:	6513      	str	r3, [r2, #80]	; 0x50
90007c7a:	e003      	b.n	90007c84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
90007c90:	f04f 0900 	mov.w	r9, #0
90007c94:	ea58 0309 	orrs.w	r3, r8, r9
90007c98:	d047      	beq.n	90007d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007ca0:	2b04      	cmp	r3, #4
90007ca2:	d82a      	bhi.n	90007cfa <HAL_RCCEx_PeriphCLKConfig+0x136>
90007ca4:	a201      	add	r2, pc, #4	; (adr r2, 90007cac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007caa:	bf00      	nop
90007cac:	90007cc1 	.word	0x90007cc1
90007cb0:	90007ccf 	.word	0x90007ccf
90007cb4:	90007ce5 	.word	0x90007ce5
90007cb8:	90007d03 	.word	0x90007d03
90007cbc:	90007d03 	.word	0x90007d03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007cc0:	4b8e      	ldr	r3, [pc, #568]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007cc4:	4a8d      	ldr	r2, [pc, #564]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ccc:	e01a      	b.n	90007d04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007cd2:	3308      	adds	r3, #8
90007cd4:	2100      	movs	r1, #0
90007cd6:	4618      	mov	r0, r3
90007cd8:	f001 f97e 	bl	90008fd8 <RCCEx_PLL2_Config>
90007cdc:	4603      	mov	r3, r0
90007cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ce2:	e00f      	b.n	90007d04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007ce8:	3328      	adds	r3, #40	; 0x28
90007cea:	2100      	movs	r1, #0
90007cec:	4618      	mov	r0, r3
90007cee:	f001 fa25 	bl	9000913c <RCCEx_PLL3_Config>
90007cf2:	4603      	mov	r3, r0
90007cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007cf8:	e004      	b.n	90007d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007cfa:	2301      	movs	r3, #1
90007cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007d00:	e000      	b.n	90007d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007d02:	bf00      	nop
    }

    if (ret == HAL_OK)
90007d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007d08:	2b00      	cmp	r3, #0
90007d0a:	d10a      	bne.n	90007d22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007d0c:	4b7b      	ldr	r3, [pc, #492]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007d10:	f023 0107 	bic.w	r1, r3, #7
90007d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007d1a:	4a78      	ldr	r2, [pc, #480]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d1c:	430b      	orrs	r3, r1
90007d1e:	6513      	str	r3, [r2, #80]	; 0x50
90007d20:	e003      	b.n	90007d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d32:	f402 7a00 	and.w	sl, r2, #512	; 0x200
90007d36:	f04f 0b00 	mov.w	fp, #0
90007d3a:	ea5a 030b 	orrs.w	r3, sl, fp
90007d3e:	d04c      	beq.n	90007dda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90007d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007d4a:	d030      	beq.n	90007dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007d50:	d829      	bhi.n	90007da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d52:	2bc0      	cmp	r3, #192	; 0xc0
90007d54:	d02d      	beq.n	90007db2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007d56:	2bc0      	cmp	r3, #192	; 0xc0
90007d58:	d825      	bhi.n	90007da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d5a:	2b80      	cmp	r3, #128	; 0x80
90007d5c:	d018      	beq.n	90007d90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007d5e:	2b80      	cmp	r3, #128	; 0x80
90007d60:	d821      	bhi.n	90007da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d62:	2b00      	cmp	r3, #0
90007d64:	d002      	beq.n	90007d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007d66:	2b40      	cmp	r3, #64	; 0x40
90007d68:	d007      	beq.n	90007d7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007d6a:	e01c      	b.n	90007da6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d6c:	4b63      	ldr	r3, [pc, #396]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007d70:	4a62      	ldr	r2, [pc, #392]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007d76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d78:	e01c      	b.n	90007db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d7e:	3308      	adds	r3, #8
90007d80:	2100      	movs	r1, #0
90007d82:	4618      	mov	r0, r3
90007d84:	f001 f928 	bl	90008fd8 <RCCEx_PLL2_Config>
90007d88:	4603      	mov	r3, r0
90007d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d8e:	e011      	b.n	90007db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d94:	3328      	adds	r3, #40	; 0x28
90007d96:	2100      	movs	r1, #0
90007d98:	4618      	mov	r0, r3
90007d9a:	f001 f9cf 	bl	9000913c <RCCEx_PLL3_Config>
90007d9e:	4603      	mov	r3, r0
90007da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007da4:	e006      	b.n	90007db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007da6:	2301      	movs	r3, #1
90007da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007dac:	e002      	b.n	90007db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007dae:	bf00      	nop
90007db0:	e000      	b.n	90007db4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007db2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007db8:	2b00      	cmp	r3, #0
90007dba:	d10a      	bne.n	90007dd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007dbc:	4b4f      	ldr	r3, [pc, #316]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007dc0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
90007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90007dca:	4a4c      	ldr	r2, [pc, #304]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dcc:	430b      	orrs	r3, r1
90007dce:	6513      	str	r3, [r2, #80]	; 0x50
90007dd0:	e003      	b.n	90007dda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
90007de2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
90007de6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
90007dea:	2300      	movs	r3, #0
90007dec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
90007df0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
90007df4:	460b      	mov	r3, r1
90007df6:	4313      	orrs	r3, r2
90007df8:	d053      	beq.n	90007ea2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007dfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90007e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90007e06:	d035      	beq.n	90007e74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90007e0c:	d82e      	bhi.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90007e12:	d031      	beq.n	90007e78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90007e18:	d828      	bhi.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90007e1e:	d01a      	beq.n	90007e56 <HAL_RCCEx_PeriphCLKConfig+0x292>
90007e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90007e24:	d822      	bhi.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e26:	2b00      	cmp	r3, #0
90007e28:	d003      	beq.n	90007e32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007e2e:	d007      	beq.n	90007e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007e30:	e01c      	b.n	90007e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e32:	4b32      	ldr	r3, [pc, #200]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007e36:	4a31      	ldr	r2, [pc, #196]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e3e:	e01c      	b.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e44:	3308      	adds	r3, #8
90007e46:	2100      	movs	r1, #0
90007e48:	4618      	mov	r0, r3
90007e4a:	f001 f8c5 	bl	90008fd8 <RCCEx_PLL2_Config>
90007e4e:	4603      	mov	r3, r0
90007e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007e54:	e011      	b.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e5a:	3328      	adds	r3, #40	; 0x28
90007e5c:	2100      	movs	r1, #0
90007e5e:	4618      	mov	r0, r3
90007e60:	f001 f96c 	bl	9000913c <RCCEx_PLL3_Config>
90007e64:	4603      	mov	r3, r0
90007e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e6a:	e006      	b.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007e6c:	2301      	movs	r3, #1
90007e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007e72:	e002      	b.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e74:	bf00      	nop
90007e76:	e000      	b.n	90007e7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e78:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007e7e:	2b00      	cmp	r3, #0
90007e80:	d10b      	bne.n	90007e9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007e82:	4b1e      	ldr	r3, [pc, #120]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007e86:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
90007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90007e92:	4a1a      	ldr	r2, [pc, #104]	; (90007efc <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e94:	430b      	orrs	r3, r1
90007e96:	6593      	str	r3, [r2, #88]	; 0x58
90007e98:	e003      	b.n	90007ea2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
90007eaa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
90007eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
90007eb2:	2300      	movs	r3, #0
90007eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
90007eb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
90007ebc:	460b      	mov	r3, r1
90007ebe:	4313      	orrs	r3, r2
90007ec0:	d056      	beq.n	90007f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90007eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90007ece:	d038      	beq.n	90007f42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90007ed4:	d831      	bhi.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90007eda:	d034      	beq.n	90007f46 <HAL_RCCEx_PeriphCLKConfig+0x382>
90007edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90007ee0:	d82b      	bhi.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007ee6:	d01d      	beq.n	90007f24 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007eec:	d825      	bhi.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007eee:	2b00      	cmp	r3, #0
90007ef0:	d006      	beq.n	90007f00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90007ef6:	d00a      	beq.n	90007f0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007ef8:	e01f      	b.n	90007f3a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007efa:	bf00      	nop
90007efc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f00:	4ba2      	ldr	r3, [pc, #648]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007f04:	4aa1      	ldr	r2, [pc, #644]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f0c:	e01c      	b.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f12:	3308      	adds	r3, #8
90007f14:	2100      	movs	r1, #0
90007f16:	4618      	mov	r0, r3
90007f18:	f001 f85e 	bl	90008fd8 <RCCEx_PLL2_Config>
90007f1c:	4603      	mov	r3, r0
90007f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007f22:	e011      	b.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f28:	3328      	adds	r3, #40	; 0x28
90007f2a:	2100      	movs	r1, #0
90007f2c:	4618      	mov	r0, r3
90007f2e:	f001 f905 	bl	9000913c <RCCEx_PLL3_Config>
90007f32:	4603      	mov	r3, r0
90007f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f38:	e006      	b.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007f3a:	2301      	movs	r3, #1
90007f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007f40:	e002      	b.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f42:	bf00      	nop
90007f44:	e000      	b.n	90007f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f46:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007f4c:	2b00      	cmp	r3, #0
90007f4e:	d10b      	bne.n	90007f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007f50:	4b8e      	ldr	r3, [pc, #568]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007f54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
90007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90007f60:	4a8a      	ldr	r2, [pc, #552]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f62:	430b      	orrs	r3, r1
90007f64:	6593      	str	r3, [r2, #88]	; 0x58
90007f66:	e003      	b.n	90007f70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
90007f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
90007f80:	2300      	movs	r3, #0
90007f82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
90007f86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
90007f8a:	460b      	mov	r3, r1
90007f8c:	4313      	orrs	r3, r2
90007f8e:	d03a      	beq.n	90008006 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007f96:	2b30      	cmp	r3, #48	; 0x30
90007f98:	d01f      	beq.n	90007fda <HAL_RCCEx_PeriphCLKConfig+0x416>
90007f9a:	2b30      	cmp	r3, #48	; 0x30
90007f9c:	d819      	bhi.n	90007fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f9e:	2b20      	cmp	r3, #32
90007fa0:	d00c      	beq.n	90007fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007fa2:	2b20      	cmp	r3, #32
90007fa4:	d815      	bhi.n	90007fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007fa6:	2b00      	cmp	r3, #0
90007fa8:	d019      	beq.n	90007fde <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007faa:	2b10      	cmp	r3, #16
90007fac:	d111      	bne.n	90007fd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007fae:	4b77      	ldr	r3, [pc, #476]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007fb2:	4a76      	ldr	r2, [pc, #472]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007fba:	e011      	b.n	90007fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007fc0:	3308      	adds	r3, #8
90007fc2:	2102      	movs	r1, #2
90007fc4:	4618      	mov	r0, r3
90007fc6:	f001 f807 	bl	90008fd8 <RCCEx_PLL2_Config>
90007fca:	4603      	mov	r3, r0
90007fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007fd0:	e006      	b.n	90007fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007fd2:	2301      	movs	r3, #1
90007fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007fd8:	e002      	b.n	90007fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007fda:	bf00      	nop
90007fdc:	e000      	b.n	90007fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007fde:	bf00      	nop
    }

    if (ret == HAL_OK)
90007fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007fe4:	2b00      	cmp	r3, #0
90007fe6:	d10a      	bne.n	90007ffe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007fe8:	4b68      	ldr	r3, [pc, #416]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007fec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
90007ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007ff6:	4a65      	ldr	r2, [pc, #404]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ff8:	430b      	orrs	r3, r1
90007ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
90007ffc:	e003      	b.n	90008006 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000800a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000800e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
90008012:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
90008016:	2300      	movs	r3, #0
90008018:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
9000801c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
90008020:	460b      	mov	r3, r1
90008022:	4313      	orrs	r3, r2
90008024:	d051      	beq.n	900080ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000802a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000802c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008030:	d035      	beq.n	9000809e <HAL_RCCEx_PeriphCLKConfig+0x4da>
90008032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008036:	d82e      	bhi.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000803c:	d031      	beq.n	900080a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000803e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90008042:	d828      	bhi.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90008048:	d01a      	beq.n	90008080 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000804e:	d822      	bhi.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008050:	2b00      	cmp	r3, #0
90008052:	d003      	beq.n	9000805c <HAL_RCCEx_PeriphCLKConfig+0x498>
90008054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008058:	d007      	beq.n	9000806a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000805a:	e01c      	b.n	90008096 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000805c:	4b4b      	ldr	r3, [pc, #300]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008060:	4a4a      	ldr	r2, [pc, #296]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008068:	e01c      	b.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000806e:	3308      	adds	r3, #8
90008070:	2100      	movs	r1, #0
90008072:	4618      	mov	r0, r3
90008074:	f000 ffb0 	bl	90008fd8 <RCCEx_PLL2_Config>
90008078:	4603      	mov	r3, r0
9000807a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000807e:	e011      	b.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008084:	3328      	adds	r3, #40	; 0x28
90008086:	2100      	movs	r1, #0
90008088:	4618      	mov	r0, r3
9000808a:	f001 f857 	bl	9000913c <RCCEx_PLL3_Config>
9000808e:	4603      	mov	r3, r0
90008090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008094:	e006      	b.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008096:	2301      	movs	r3, #1
90008098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000809c:	e002      	b.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000809e:	bf00      	nop
900080a0:	e000      	b.n	900080a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
900080a2:	bf00      	nop
    }

    if (ret == HAL_OK)
900080a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900080a8:	2b00      	cmp	r3, #0
900080aa:	d10a      	bne.n	900080c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
900080ac:	4b37      	ldr	r3, [pc, #220]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900080b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
900080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900080ba:	4a34      	ldr	r2, [pc, #208]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080bc:	430b      	orrs	r3, r1
900080be:	6513      	str	r3, [r2, #80]	; 0x50
900080c0:	e003      	b.n	900080ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900080c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
900080d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
900080d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
900080da:	2300      	movs	r3, #0
900080dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
900080e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
900080e4:	460b      	mov	r3, r1
900080e6:	4313      	orrs	r3, r2
900080e8:	d056      	beq.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
900080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900080f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900080f4:	d033      	beq.n	9000815e <HAL_RCCEx_PeriphCLKConfig+0x59a>
900080f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900080fa:	d82c      	bhi.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x592>
900080fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90008100:	d02f      	beq.n	90008162 <HAL_RCCEx_PeriphCLKConfig+0x59e>
90008102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90008106:	d826      	bhi.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000810c:	d02b      	beq.n	90008166 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
9000810e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90008112:	d820      	bhi.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008118:	d012      	beq.n	90008140 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000811a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000811e:	d81a      	bhi.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008120:	2b00      	cmp	r3, #0
90008122:	d022      	beq.n	9000816a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008128:	d115      	bne.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000812e:	3308      	adds	r3, #8
90008130:	2101      	movs	r1, #1
90008132:	4618      	mov	r0, r3
90008134:	f000 ff50 	bl	90008fd8 <RCCEx_PLL2_Config>
90008138:	4603      	mov	r3, r0
9000813a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000813e:	e015      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008144:	3328      	adds	r3, #40	; 0x28
90008146:	2101      	movs	r1, #1
90008148:	4618      	mov	r0, r3
9000814a:	f000 fff7 	bl	9000913c <RCCEx_PLL3_Config>
9000814e:	4603      	mov	r3, r0
90008150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008154:	e00a      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008156:	2301      	movs	r3, #1
90008158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000815c:	e006      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000815e:	bf00      	nop
90008160:	e004      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008162:	bf00      	nop
90008164:	e002      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008166:	bf00      	nop
90008168:	e000      	b.n	9000816c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000816a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000816c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008170:	2b00      	cmp	r3, #0
90008172:	d10d      	bne.n	90008190 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90008174:	4b05      	ldr	r3, [pc, #20]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008178:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
9000817c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90008182:	4a02      	ldr	r2, [pc, #8]	; (9000818c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008184:	430b      	orrs	r3, r1
90008186:	6513      	str	r3, [r2, #80]	; 0x50
90008188:	e006      	b.n	90008198 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
9000818a:	bf00      	nop
9000818c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000819c:	e9d3 2300 	ldrd	r2, r3, [r3]
900081a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
900081a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
900081a8:	2300      	movs	r3, #0
900081aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
900081ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
900081b2:	460b      	mov	r3, r1
900081b4:	4313      	orrs	r3, r2
900081b6:	d055      	beq.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900081bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900081c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900081c4:	d033      	beq.n	9000822e <HAL_RCCEx_PeriphCLKConfig+0x66a>
900081c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900081ca:	d82c      	bhi.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900081d0:	d02f      	beq.n	90008232 <HAL_RCCEx_PeriphCLKConfig+0x66e>
900081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900081d6:	d826      	bhi.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900081dc:	d02b      	beq.n	90008236 <HAL_RCCEx_PeriphCLKConfig+0x672>
900081de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900081e2:	d820      	bhi.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900081e8:	d012      	beq.n	90008210 <HAL_RCCEx_PeriphCLKConfig+0x64c>
900081ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900081ee:	d81a      	bhi.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081f0:	2b00      	cmp	r3, #0
900081f2:	d022      	beq.n	9000823a <HAL_RCCEx_PeriphCLKConfig+0x676>
900081f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900081f8:	d115      	bne.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900081fe:	3308      	adds	r3, #8
90008200:	2101      	movs	r1, #1
90008202:	4618      	mov	r0, r3
90008204:	f000 fee8 	bl	90008fd8 <RCCEx_PLL2_Config>
90008208:	4603      	mov	r3, r0
9000820a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
9000820e:	e015      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008214:	3328      	adds	r3, #40	; 0x28
90008216:	2101      	movs	r1, #1
90008218:	4618      	mov	r0, r3
9000821a:	f000 ff8f 	bl	9000913c <RCCEx_PLL3_Config>
9000821e:	4603      	mov	r3, r0
90008220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008224:	e00a      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008226:	2301      	movs	r3, #1
90008228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000822c:	e006      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000822e:	bf00      	nop
90008230:	e004      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008232:	bf00      	nop
90008234:	e002      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008236:	bf00      	nop
90008238:	e000      	b.n	9000823c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000823a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000823c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008240:	2b00      	cmp	r3, #0
90008242:	d10b      	bne.n	9000825c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008244:	4ba3      	ldr	r3, [pc, #652]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008248:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
9000824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90008254:	4a9f      	ldr	r2, [pc, #636]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008256:	430b      	orrs	r3, r1
90008258:	6593      	str	r3, [r2, #88]	; 0x58
9000825a:	e003      	b.n	90008264 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000825c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008268:	e9d3 2300 	ldrd	r2, r3, [r3]
9000826c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
90008270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
90008274:	2300      	movs	r3, #0
90008276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
9000827a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
9000827e:	460b      	mov	r3, r1
90008280:	4313      	orrs	r3, r2
90008282:	d037      	beq.n	900082f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000828a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000828e:	d00e      	beq.n	900082ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90008294:	d816      	bhi.n	900082c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
90008296:	2b00      	cmp	r3, #0
90008298:	d018      	beq.n	900082cc <HAL_RCCEx_PeriphCLKConfig+0x708>
9000829a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000829e:	d111      	bne.n	900082c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900082a0:	4b8c      	ldr	r3, [pc, #560]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900082a4:	4a8b      	ldr	r2, [pc, #556]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900082aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082ac:	e00f      	b.n	900082ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082b2:	3308      	adds	r3, #8
900082b4:	2101      	movs	r1, #1
900082b6:	4618      	mov	r0, r3
900082b8:	f000 fe8e 	bl	90008fd8 <RCCEx_PLL2_Config>
900082bc:	4603      	mov	r3, r0
900082be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082c2:	e004      	b.n	900082ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900082c4:	2301      	movs	r3, #1
900082c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900082ca:	e000      	b.n	900082ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900082cc:	bf00      	nop
    }

    if (ret == HAL_OK)
900082ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900082d2:	2b00      	cmp	r3, #0
900082d4:	d10a      	bne.n	900082ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900082d6:	4b7f      	ldr	r3, [pc, #508]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900082da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
900082de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900082e4:	4a7b      	ldr	r2, [pc, #492]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082e6:	430b      	orrs	r3, r1
900082e8:	6513      	str	r3, [r2, #80]	; 0x50
900082ea:	e003      	b.n	900082f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900082f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
900082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
900082fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
90008300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
90008304:	2300      	movs	r3, #0
90008306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
9000830a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
9000830e:	460b      	mov	r3, r1
90008310:	4313      	orrs	r3, r2
90008312:	d039      	beq.n	90008388 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000831a:	2b03      	cmp	r3, #3
9000831c:	d81c      	bhi.n	90008358 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000831e:	a201      	add	r2, pc, #4	; (adr r2, 90008324 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008324:	90008361 	.word	0x90008361
90008328:	90008335 	.word	0x90008335
9000832c:	90008343 	.word	0x90008343
90008330:	90008361 	.word	0x90008361
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008334:	4b67      	ldr	r3, [pc, #412]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008338:	4a66      	ldr	r2, [pc, #408]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000833a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000833e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008340:	e00f      	b.n	90008362 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008346:	3308      	adds	r3, #8
90008348:	2102      	movs	r1, #2
9000834a:	4618      	mov	r0, r3
9000834c:	f000 fe44 	bl	90008fd8 <RCCEx_PLL2_Config>
90008350:	4603      	mov	r3, r0
90008352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90008356:	e004      	b.n	90008362 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008358:	2301      	movs	r3, #1
9000835a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000835e:	e000      	b.n	90008362 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008360:	bf00      	nop
    }

    if (ret == HAL_OK)
90008362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008366:	2b00      	cmp	r3, #0
90008368:	d10a      	bne.n	90008380 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000836a:	4b5a      	ldr	r3, [pc, #360]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000836e:	f023 0103 	bic.w	r1, r3, #3
90008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90008378:	4a56      	ldr	r2, [pc, #344]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000837a:	430b      	orrs	r3, r1
9000837c:	64d3      	str	r3, [r2, #76]	; 0x4c
9000837e:	e003      	b.n	90008388 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000838c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008390:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
90008394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
90008398:	2300      	movs	r3, #0
9000839a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
9000839e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
900083a2:	460b      	mov	r3, r1
900083a4:	4313      	orrs	r3, r2
900083a6:	f000 809f 	beq.w	900084e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
900083aa:	4b4b      	ldr	r3, [pc, #300]	; (900084d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083ac:	681b      	ldr	r3, [r3, #0]
900083ae:	4a4a      	ldr	r2, [pc, #296]	; (900084d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900083b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900083b6:	f7fb f80f 	bl	900033d8 <HAL_GetTick>
900083ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083be:	e00b      	b.n	900083d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900083c0:	f7fb f80a 	bl	900033d8 <HAL_GetTick>
900083c4:	4602      	mov	r2, r0
900083c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
900083ca:	1ad3      	subs	r3, r2, r3
900083cc:	2b64      	cmp	r3, #100	; 0x64
900083ce:	d903      	bls.n	900083d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900083d0:	2303      	movs	r3, #3
900083d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900083d6:	e005      	b.n	900083e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083d8:	4b3f      	ldr	r3, [pc, #252]	; (900084d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083da:	681b      	ldr	r3, [r3, #0]
900083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
900083e0:	2b00      	cmp	r3, #0
900083e2:	d0ed      	beq.n	900083c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900083e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900083e8:	2b00      	cmp	r3, #0
900083ea:	d179      	bne.n	900084e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
900083ec:	4b39      	ldr	r3, [pc, #228]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900083f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900083f8:	4053      	eors	r3, r2
900083fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
900083fe:	2b00      	cmp	r3, #0
90008400:	d015      	beq.n	9000842e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90008402:	4b34      	ldr	r3, [pc, #208]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000840a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
9000840e:	4b31      	ldr	r3, [pc, #196]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008412:	4a30      	ldr	r2, [pc, #192]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90008418:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000841a:	4b2e      	ldr	r3, [pc, #184]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000841e:	4a2d      	ldr	r2, [pc, #180]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90008424:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90008426:	4a2b      	ldr	r2, [pc, #172]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
9000842c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90008436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000843a:	d118      	bne.n	9000846e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000843c:	f7fa ffcc 	bl	900033d8 <HAL_GetTick>
90008440:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008444:	e00d      	b.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90008446:	f7fa ffc7 	bl	900033d8 <HAL_GetTick>
9000844a:	4602      	mov	r2, r0
9000844c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
90008450:	1ad2      	subs	r2, r2, r3
90008452:	f241 3388 	movw	r3, #5000	; 0x1388
90008456:	429a      	cmp	r2, r3
90008458:	d903      	bls.n	90008462 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000845a:	2303      	movs	r3, #3
9000845c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
90008460:	e005      	b.n	9000846e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008462:	4b1c      	ldr	r3, [pc, #112]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008466:	f003 0302 	and.w	r3, r3, #2
9000846a:	2b00      	cmp	r3, #0
9000846c:	d0eb      	beq.n	90008446 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
9000846e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008472:	2b00      	cmp	r3, #0
90008474:	d129      	bne.n	900084ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90008476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000847a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000847e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90008482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008486:	d10e      	bne.n	900084a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008488:	4b12      	ldr	r3, [pc, #72]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000848a:	691b      	ldr	r3, [r3, #16]
9000848c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
90008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90008498:	091a      	lsrs	r2, r3, #4
9000849a:	4b10      	ldr	r3, [pc, #64]	; (900084dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
9000849c:	4013      	ands	r3, r2
9000849e:	4a0d      	ldr	r2, [pc, #52]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084a0:	430b      	orrs	r3, r1
900084a2:	6113      	str	r3, [r2, #16]
900084a4:	e005      	b.n	900084b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
900084a6:	4b0b      	ldr	r3, [pc, #44]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084a8:	691b      	ldr	r3, [r3, #16]
900084aa:	4a0a      	ldr	r2, [pc, #40]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900084b0:	6113      	str	r3, [r2, #16]
900084b2:	4b08      	ldr	r3, [pc, #32]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
900084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900084ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900084be:	f3c3 030b 	ubfx	r3, r3, #0, #12
900084c2:	4a04      	ldr	r2, [pc, #16]	; (900084d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084c4:	430b      	orrs	r3, r1
900084c6:	6713      	str	r3, [r2, #112]	; 0x70
900084c8:	e00e      	b.n	900084e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900084ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900084ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
900084d2:	e009      	b.n	900084e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
900084d4:	58024400 	.word	0x58024400
900084d8:	58024800 	.word	0x58024800
900084dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900084e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900084e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
900084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
900084f0:	f002 0301 	and.w	r3, r2, #1
900084f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
900084f8:	2300      	movs	r3, #0
900084fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
900084fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
90008502:	460b      	mov	r3, r1
90008504:	4313      	orrs	r3, r2
90008506:	f000 8089 	beq.w	9000861c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
9000850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000850e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90008510:	2b28      	cmp	r3, #40	; 0x28
90008512:	d86b      	bhi.n	900085ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008514:	a201      	add	r2, pc, #4	; (adr r2, 9000851c <HAL_RCCEx_PeriphCLKConfig+0x958>)
90008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000851a:	bf00      	nop
9000851c:	900085f5 	.word	0x900085f5
90008520:	900085ed 	.word	0x900085ed
90008524:	900085ed 	.word	0x900085ed
90008528:	900085ed 	.word	0x900085ed
9000852c:	900085ed 	.word	0x900085ed
90008530:	900085ed 	.word	0x900085ed
90008534:	900085ed 	.word	0x900085ed
90008538:	900085ed 	.word	0x900085ed
9000853c:	900085c1 	.word	0x900085c1
90008540:	900085ed 	.word	0x900085ed
90008544:	900085ed 	.word	0x900085ed
90008548:	900085ed 	.word	0x900085ed
9000854c:	900085ed 	.word	0x900085ed
90008550:	900085ed 	.word	0x900085ed
90008554:	900085ed 	.word	0x900085ed
90008558:	900085ed 	.word	0x900085ed
9000855c:	900085d7 	.word	0x900085d7
90008560:	900085ed 	.word	0x900085ed
90008564:	900085ed 	.word	0x900085ed
90008568:	900085ed 	.word	0x900085ed
9000856c:	900085ed 	.word	0x900085ed
90008570:	900085ed 	.word	0x900085ed
90008574:	900085ed 	.word	0x900085ed
90008578:	900085ed 	.word	0x900085ed
9000857c:	900085f5 	.word	0x900085f5
90008580:	900085ed 	.word	0x900085ed
90008584:	900085ed 	.word	0x900085ed
90008588:	900085ed 	.word	0x900085ed
9000858c:	900085ed 	.word	0x900085ed
90008590:	900085ed 	.word	0x900085ed
90008594:	900085ed 	.word	0x900085ed
90008598:	900085ed 	.word	0x900085ed
9000859c:	900085f5 	.word	0x900085f5
900085a0:	900085ed 	.word	0x900085ed
900085a4:	900085ed 	.word	0x900085ed
900085a8:	900085ed 	.word	0x900085ed
900085ac:	900085ed 	.word	0x900085ed
900085b0:	900085ed 	.word	0x900085ed
900085b4:	900085ed 	.word	0x900085ed
900085b8:	900085ed 	.word	0x900085ed
900085bc:	900085f5 	.word	0x900085f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900085c4:	3308      	adds	r3, #8
900085c6:	2101      	movs	r1, #1
900085c8:	4618      	mov	r0, r3
900085ca:	f000 fd05 	bl	90008fd8 <RCCEx_PLL2_Config>
900085ce:	4603      	mov	r3, r0
900085d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900085d4:	e00f      	b.n	900085f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900085da:	3328      	adds	r3, #40	; 0x28
900085dc:	2101      	movs	r1, #1
900085de:	4618      	mov	r0, r3
900085e0:	f000 fdac 	bl	9000913c <RCCEx_PLL3_Config>
900085e4:	4603      	mov	r3, r0
900085e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900085ea:	e004      	b.n	900085f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900085ec:	2301      	movs	r3, #1
900085ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900085f2:	e000      	b.n	900085f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
900085f4:	bf00      	nop
    }

    if (ret == HAL_OK)
900085f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900085fa:	2b00      	cmp	r3, #0
900085fc:	d10a      	bne.n	90008614 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900085fe:	4bbf      	ldr	r3, [pc, #764]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008602:	f023 0138 	bic.w	r1, r3, #56	; 0x38
90008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000860a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000860c:	4abb      	ldr	r2, [pc, #748]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000860e:	430b      	orrs	r3, r1
90008610:	6553      	str	r3, [r2, #84]	; 0x54
90008612:	e003      	b.n	9000861c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008618:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008620:	e9d3 2300 	ldrd	r2, r3, [r3]
90008624:	f002 0302 	and.w	r3, r2, #2
90008628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000862c:	2300      	movs	r3, #0
9000862e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
90008632:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
90008636:	460b      	mov	r3, r1
90008638:	4313      	orrs	r3, r2
9000863a:	d041      	beq.n	900086c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
9000863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90008642:	2b05      	cmp	r3, #5
90008644:	d824      	bhi.n	90008690 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90008646:	a201      	add	r2, pc, #4	; (adr r2, 9000864c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000864c:	90008699 	.word	0x90008699
90008650:	90008665 	.word	0x90008665
90008654:	9000867b 	.word	0x9000867b
90008658:	90008699 	.word	0x90008699
9000865c:	90008699 	.word	0x90008699
90008660:	90008699 	.word	0x90008699
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008668:	3308      	adds	r3, #8
9000866a:	2101      	movs	r1, #1
9000866c:	4618      	mov	r0, r3
9000866e:	f000 fcb3 	bl	90008fd8 <RCCEx_PLL2_Config>
90008672:	4603      	mov	r3, r0
90008674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008678:	e00f      	b.n	9000869a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000867e:	3328      	adds	r3, #40	; 0x28
90008680:	2101      	movs	r1, #1
90008682:	4618      	mov	r0, r3
90008684:	f000 fd5a 	bl	9000913c <RCCEx_PLL3_Config>
90008688:	4603      	mov	r3, r0
9000868a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000868e:	e004      	b.n	9000869a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008690:	2301      	movs	r3, #1
90008692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008696:	e000      	b.n	9000869a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008698:	bf00      	nop
    }

    if (ret == HAL_OK)
9000869a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000869e:	2b00      	cmp	r3, #0
900086a0:	d10a      	bne.n	900086b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
900086a2:	4b96      	ldr	r3, [pc, #600]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900086a6:	f023 0107 	bic.w	r1, r3, #7
900086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900086ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900086b0:	4a92      	ldr	r2, [pc, #584]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086b2:	430b      	orrs	r3, r1
900086b4:	6553      	str	r3, [r2, #84]	; 0x54
900086b6:	e003      	b.n	900086c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900086bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
900086c8:	f002 0304 	and.w	r3, r2, #4
900086cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
900086d0:	2300      	movs	r3, #0
900086d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
900086d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
900086da:	460b      	mov	r3, r1
900086dc:	4313      	orrs	r3, r2
900086de:	d044      	beq.n	9000876a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900086e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900086e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
900086e8:	2b05      	cmp	r3, #5
900086ea:	d825      	bhi.n	90008738 <HAL_RCCEx_PeriphCLKConfig+0xb74>
900086ec:	a201      	add	r2, pc, #4	; (adr r2, 900086f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
900086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900086f2:	bf00      	nop
900086f4:	90008741 	.word	0x90008741
900086f8:	9000870d 	.word	0x9000870d
900086fc:	90008723 	.word	0x90008723
90008700:	90008741 	.word	0x90008741
90008704:	90008741 	.word	0x90008741
90008708:	90008741 	.word	0x90008741
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008710:	3308      	adds	r3, #8
90008712:	2101      	movs	r1, #1
90008714:	4618      	mov	r0, r3
90008716:	f000 fc5f 	bl	90008fd8 <RCCEx_PLL2_Config>
9000871a:	4603      	mov	r3, r0
9000871c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008720:	e00f      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008726:	3328      	adds	r3, #40	; 0x28
90008728:	2101      	movs	r1, #1
9000872a:	4618      	mov	r0, r3
9000872c:	f000 fd06 	bl	9000913c <RCCEx_PLL3_Config>
90008730:	4603      	mov	r3, r0
90008732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008736:	e004      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008738:	2301      	movs	r3, #1
9000873a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000873e:	e000      	b.n	90008742 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008740:	bf00      	nop
    }

    if (ret == HAL_OK)
90008742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008746:	2b00      	cmp	r3, #0
90008748:	d10b      	bne.n	90008762 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000874a:	4b6c      	ldr	r3, [pc, #432]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000874c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000874e:	f023 0107 	bic.w	r1, r3, #7
90008752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9000875a:	4a68      	ldr	r2, [pc, #416]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000875c:	430b      	orrs	r3, r1
9000875e:	6593      	str	r3, [r2, #88]	; 0x58
90008760:	e003      	b.n	9000876a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000876a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000876e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008772:	f002 0320 	and.w	r3, r2, #32
90008776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
9000877a:	2300      	movs	r3, #0
9000877c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
90008780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
90008784:	460b      	mov	r3, r1
90008786:	4313      	orrs	r3, r2
90008788:	d055      	beq.n	90008836 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90008792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90008796:	d033      	beq.n	90008800 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000879c:	d82c      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900087a2:	d02f      	beq.n	90008804 <HAL_RCCEx_PeriphCLKConfig+0xc40>
900087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900087a8:	d826      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900087ae:	d02b      	beq.n	90008808 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900087b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900087b4:	d820      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900087ba:	d012      	beq.n	900087e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900087bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900087c0:	d81a      	bhi.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087c2:	2b00      	cmp	r3, #0
900087c4:	d022      	beq.n	9000880c <HAL_RCCEx_PeriphCLKConfig+0xc48>
900087c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900087ca:	d115      	bne.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900087d0:	3308      	adds	r3, #8
900087d2:	2100      	movs	r1, #0
900087d4:	4618      	mov	r0, r3
900087d6:	f000 fbff 	bl	90008fd8 <RCCEx_PLL2_Config>
900087da:	4603      	mov	r3, r0
900087dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900087e0:	e015      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900087e6:	3328      	adds	r3, #40	; 0x28
900087e8:	2102      	movs	r1, #2
900087ea:	4618      	mov	r0, r3
900087ec:	f000 fca6 	bl	9000913c <RCCEx_PLL3_Config>
900087f0:	4603      	mov	r3, r0
900087f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900087f6:	e00a      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087f8:	2301      	movs	r3, #1
900087fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900087fe:	e006      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008800:	bf00      	nop
90008802:	e004      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008804:	bf00      	nop
90008806:	e002      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
90008808:	bf00      	nop
9000880a:	e000      	b.n	9000880e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
9000880c:	bf00      	nop
    }

    if (ret == HAL_OK)
9000880e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008812:	2b00      	cmp	r3, #0
90008814:	d10b      	bne.n	9000882e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008816:	4b39      	ldr	r3, [pc, #228]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000881a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
9000881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90008826:	4a35      	ldr	r2, [pc, #212]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008828:	430b      	orrs	r3, r1
9000882a:	6553      	str	r3, [r2, #84]	; 0x54
9000882c:	e003      	b.n	90008836 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000882e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000883a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000883e:	f002 0340 	and.w	r3, r2, #64	; 0x40
90008842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
90008846:	2300      	movs	r3, #0
90008848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
9000884c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
90008850:	460b      	mov	r3, r1
90008852:	4313      	orrs	r3, r2
90008854:	d058      	beq.n	90008908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000885a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000885e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90008862:	d033      	beq.n	900088cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008864:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90008868:	d82c      	bhi.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000886a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000886e:	d02f      	beq.n	900088d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008874:	d826      	bhi.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
9000887a:	d02b      	beq.n	900088d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
9000887c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90008880:	d820      	bhi.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90008886:	d012      	beq.n	900088ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000888c:	d81a      	bhi.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000888e:	2b00      	cmp	r3, #0
90008890:	d022      	beq.n	900088d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90008892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90008896:	d115      	bne.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000889c:	3308      	adds	r3, #8
9000889e:	2100      	movs	r1, #0
900088a0:	4618      	mov	r0, r3
900088a2:	f000 fb99 	bl	90008fd8 <RCCEx_PLL2_Config>
900088a6:	4603      	mov	r3, r0
900088a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088ac:	e015      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900088b2:	3328      	adds	r3, #40	; 0x28
900088b4:	2102      	movs	r1, #2
900088b6:	4618      	mov	r0, r3
900088b8:	f000 fc40 	bl	9000913c <RCCEx_PLL3_Config>
900088bc:	4603      	mov	r3, r0
900088be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088c2:	e00a      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088c4:	2301      	movs	r3, #1
900088c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900088ca:	e006      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088cc:	bf00      	nop
900088ce:	e004      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088d0:	bf00      	nop
900088d2:	e002      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088d4:	bf00      	nop
900088d6:	e000      	b.n	900088da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088d8:	bf00      	nop
    }

    if (ret == HAL_OK)
900088da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900088de:	2b00      	cmp	r3, #0
900088e0:	d10e      	bne.n	90008900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
900088e2:	4b06      	ldr	r3, [pc, #24]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900088e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
900088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900088ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900088f2:	4a02      	ldr	r2, [pc, #8]	; (900088fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088f4:	430b      	orrs	r3, r1
900088f6:	6593      	str	r3, [r2, #88]	; 0x58
900088f8:	e006      	b.n	90008908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900088fa:	bf00      	nop
900088fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000890c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008910:	f002 0380 	and.w	r3, r2, #128	; 0x80
90008914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
90008918:	2300      	movs	r3, #0
9000891a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
9000891e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
90008922:	460b      	mov	r3, r1
90008924:	4313      	orrs	r3, r2
90008926:	d055      	beq.n	900089d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000892c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90008930:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90008934:	d033      	beq.n	9000899e <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008936:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
9000893a:	d82c      	bhi.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000893c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90008940:	d02f      	beq.n	900089a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90008946:	d826      	bhi.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008948:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
9000894c:	d02b      	beq.n	900089a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
9000894e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90008952:	d820      	bhi.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008958:	d012      	beq.n	90008980 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000895a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000895e:	d81a      	bhi.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008960:	2b00      	cmp	r3, #0
90008962:	d022      	beq.n	900089aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90008968:	d115      	bne.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000896e:	3308      	adds	r3, #8
90008970:	2100      	movs	r1, #0
90008972:	4618      	mov	r0, r3
90008974:	f000 fb30 	bl	90008fd8 <RCCEx_PLL2_Config>
90008978:	4603      	mov	r3, r0
9000897a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000897e:	e015      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008984:	3328      	adds	r3, #40	; 0x28
90008986:	2102      	movs	r1, #2
90008988:	4618      	mov	r0, r3
9000898a:	f000 fbd7 	bl	9000913c <RCCEx_PLL3_Config>
9000898e:	4603      	mov	r3, r0
90008990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008994:	e00a      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008996:	2301      	movs	r3, #1
90008998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000899c:	e006      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000899e:	bf00      	nop
900089a0:	e004      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089a2:	bf00      	nop
900089a4:	e002      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089a6:	bf00      	nop
900089a8:	e000      	b.n	900089ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
900089aa:	bf00      	nop
    }

    if (ret == HAL_OK)
900089ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900089b0:	2b00      	cmp	r3, #0
900089b2:	d10b      	bne.n	900089cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900089b4:	4ba1      	ldr	r3, [pc, #644]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900089b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
900089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900089c4:	4a9d      	ldr	r2, [pc, #628]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089c6:	430b      	orrs	r3, r1
900089c8:	6593      	str	r3, [r2, #88]	; 0x58
900089ca:	e003      	b.n	900089d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900089d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
900089d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
900089dc:	f002 0308 	and.w	r3, r2, #8
900089e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
900089e4:	2300      	movs	r3, #0
900089e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
900089ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
900089ee:	460b      	mov	r3, r1
900089f0:	4313      	orrs	r3, r2
900089f2:	d01e      	beq.n	90008a32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
900089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900089fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008a00:	d10c      	bne.n	90008a1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a06:	3328      	adds	r3, #40	; 0x28
90008a08:	2102      	movs	r1, #2
90008a0a:	4618      	mov	r0, r3
90008a0c:	f000 fb96 	bl	9000913c <RCCEx_PLL3_Config>
90008a10:	4603      	mov	r3, r0
90008a12:	2b00      	cmp	r3, #0
90008a14:	d002      	beq.n	90008a1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008a16:	2301      	movs	r3, #1
90008a18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008a1c:	4b87      	ldr	r3, [pc, #540]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90008a2c:	4a83      	ldr	r2, [pc, #524]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a2e:	430b      	orrs	r3, r1
90008a30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a3a:	f002 0310 	and.w	r3, r2, #16
90008a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
90008a42:	2300      	movs	r3, #0
90008a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
90008a48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
90008a4c:	460b      	mov	r3, r1
90008a4e:	4313      	orrs	r3, r2
90008a50:	d01e      	beq.n	90008a90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008a5e:	d10c      	bne.n	90008a7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a64:	3328      	adds	r3, #40	; 0x28
90008a66:	2102      	movs	r1, #2
90008a68:	4618      	mov	r0, r3
90008a6a:	f000 fb67 	bl	9000913c <RCCEx_PLL3_Config>
90008a6e:	4603      	mov	r3, r0
90008a70:	2b00      	cmp	r3, #0
90008a72:	d002      	beq.n	90008a7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008a74:	2301      	movs	r3, #1
90008a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008a7a:	4b70      	ldr	r3, [pc, #448]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90008a8a:	4a6c      	ldr	r2, [pc, #432]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a8c:	430b      	orrs	r3, r1
90008a8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
90008a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
90008aa0:	2300      	movs	r3, #0
90008aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
90008aa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
90008aaa:	460b      	mov	r3, r1
90008aac:	4313      	orrs	r3, r2
90008aae:	d03e      	beq.n	90008b2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90008ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008abc:	d022      	beq.n	90008b04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008ac2:	d81b      	bhi.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008ac4:	2b00      	cmp	r3, #0
90008ac6:	d003      	beq.n	90008ad0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008acc:	d00b      	beq.n	90008ae6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008ace:	e015      	b.n	90008afc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ad4:	3308      	adds	r3, #8
90008ad6:	2100      	movs	r1, #0
90008ad8:	4618      	mov	r0, r3
90008ada:	f000 fa7d 	bl	90008fd8 <RCCEx_PLL2_Config>
90008ade:	4603      	mov	r3, r0
90008ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008ae4:	e00f      	b.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008aea:	3328      	adds	r3, #40	; 0x28
90008aec:	2102      	movs	r1, #2
90008aee:	4618      	mov	r0, r3
90008af0:	f000 fb24 	bl	9000913c <RCCEx_PLL3_Config>
90008af4:	4603      	mov	r3, r0
90008af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008afa:	e004      	b.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008afc:	2301      	movs	r3, #1
90008afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008b02:	e000      	b.n	90008b06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008b04:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008b0a:	2b00      	cmp	r3, #0
90008b0c:	d10b      	bne.n	90008b26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008b0e:	4b4b      	ldr	r3, [pc, #300]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008b12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
90008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90008b1e:	4a47      	ldr	r2, [pc, #284]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b20:	430b      	orrs	r3, r1
90008b22:	6593      	str	r3, [r2, #88]	; 0x58
90008b24:	e003      	b.n	90008b2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
90008b3a:	67bb      	str	r3, [r7, #120]	; 0x78
90008b3c:	2300      	movs	r3, #0
90008b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
90008b40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
90008b44:	460b      	mov	r3, r1
90008b46:	4313      	orrs	r3, r2
90008b48:	d03b      	beq.n	90008bc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90008b56:	d01f      	beq.n	90008b98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008b58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90008b5c:	d818      	bhi.n	90008b90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90008b62:	d003      	beq.n	90008b6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90008b68:	d007      	beq.n	90008b7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008b6a:	e011      	b.n	90008b90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b6c:	4b33      	ldr	r3, [pc, #204]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008b70:	4a32      	ldr	r2, [pc, #200]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008b78:	e00f      	b.n	90008b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b7e:	3328      	adds	r3, #40	; 0x28
90008b80:	2101      	movs	r1, #1
90008b82:	4618      	mov	r0, r3
90008b84:	f000 fada 	bl	9000913c <RCCEx_PLL3_Config>
90008b88:	4603      	mov	r3, r0
90008b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008b8e:	e004      	b.n	90008b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b90:	2301      	movs	r3, #1
90008b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008b96:	e000      	b.n	90008b9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008b98:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008b9e:	2b00      	cmp	r3, #0
90008ba0:	d10b      	bne.n	90008bba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008ba2:	4b26      	ldr	r3, [pc, #152]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008ba6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
90008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008bb2:	4a22      	ldr	r2, [pc, #136]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bb4:	430b      	orrs	r3, r1
90008bb6:	6553      	str	r3, [r2, #84]	; 0x54
90008bb8:	e003      	b.n	90008bc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
90008bce:	673b      	str	r3, [r7, #112]	; 0x70
90008bd0:	2300      	movs	r3, #0
90008bd2:	677b      	str	r3, [r7, #116]	; 0x74
90008bd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
90008bd8:	460b      	mov	r3, r1
90008bda:	4313      	orrs	r3, r2
90008bdc:	d034      	beq.n	90008c48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008be4:	2b00      	cmp	r3, #0
90008be6:	d003      	beq.n	90008bf0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008bec:	d007      	beq.n	90008bfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008bee:	e011      	b.n	90008c14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008bf0:	4b12      	ldr	r3, [pc, #72]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008bf4:	4a11      	ldr	r2, [pc, #68]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008bfc:	e00e      	b.n	90008c1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c02:	3308      	adds	r3, #8
90008c04:	2102      	movs	r1, #2
90008c06:	4618      	mov	r0, r3
90008c08:	f000 f9e6 	bl	90008fd8 <RCCEx_PLL2_Config>
90008c0c:	4603      	mov	r3, r0
90008c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c12:	e003      	b.n	90008c1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008c14:	2301      	movs	r3, #1
90008c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008c20:	2b00      	cmp	r3, #0
90008c22:	d10d      	bne.n	90008c40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008c24:	4b05      	ldr	r3, [pc, #20]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008c32:	4a02      	ldr	r2, [pc, #8]	; (90008c3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c34:	430b      	orrs	r3, r1
90008c36:	64d3      	str	r3, [r2, #76]	; 0x4c
90008c38:	e006      	b.n	90008c48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008c3a:	bf00      	nop
90008c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008c44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c50:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
90008c54:	66bb      	str	r3, [r7, #104]	; 0x68
90008c56:	2300      	movs	r3, #0
90008c58:	66fb      	str	r3, [r7, #108]	; 0x6c
90008c5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
90008c5e:	460b      	mov	r3, r1
90008c60:	4313      	orrs	r3, r2
90008c62:	d00c      	beq.n	90008c7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c68:	3328      	adds	r3, #40	; 0x28
90008c6a:	2102      	movs	r1, #2
90008c6c:	4618      	mov	r0, r3
90008c6e:	f000 fa65 	bl	9000913c <RCCEx_PLL3_Config>
90008c72:	4603      	mov	r3, r0
90008c74:	2b00      	cmp	r3, #0
90008c76:	d002      	beq.n	90008c7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008c78:	2301      	movs	r3, #1
90008c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c86:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
90008c8a:	663b      	str	r3, [r7, #96]	; 0x60
90008c8c:	2300      	movs	r3, #0
90008c8e:	667b      	str	r3, [r7, #100]	; 0x64
90008c90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
90008c94:	460b      	mov	r3, r1
90008c96:	4313      	orrs	r3, r2
90008c98:	d038      	beq.n	90008d0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008ca6:	d018      	beq.n	90008cda <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008cac:	d811      	bhi.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90008cb2:	d014      	beq.n	90008cde <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90008cb8:	d80b      	bhi.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008cba:	2b00      	cmp	r3, #0
90008cbc:	d011      	beq.n	90008ce2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008cc2:	d106      	bne.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008cc4:	4bc3      	ldr	r3, [pc, #780]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008cc8:	4ac2      	ldr	r2, [pc, #776]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008cd0:	e008      	b.n	90008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008cd2:	2301      	movs	r3, #1
90008cd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008cd8:	e004      	b.n	90008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008cda:	bf00      	nop
90008cdc:	e002      	b.n	90008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008cde:	bf00      	nop
90008ce0:	e000      	b.n	90008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
90008ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008ce8:	2b00      	cmp	r3, #0
90008cea:	d10b      	bne.n	90008d04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008cec:	4bb9      	ldr	r3, [pc, #740]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008cf0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90008cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008cfc:	4ab5      	ldr	r2, [pc, #724]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cfe:	430b      	orrs	r3, r1
90008d00:	6553      	str	r3, [r2, #84]	; 0x54
90008d02:	e003      	b.n	90008d0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
90008d18:	65bb      	str	r3, [r7, #88]	; 0x58
90008d1a:	2300      	movs	r3, #0
90008d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
90008d1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
90008d22:	460b      	mov	r3, r1
90008d24:	4313      	orrs	r3, r2
90008d26:	d009      	beq.n	90008d3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008d28:	4baa      	ldr	r3, [pc, #680]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008d2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
90008d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90008d36:	4aa7      	ldr	r2, [pc, #668]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d38:	430b      	orrs	r3, r1
90008d3a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d44:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
90008d48:	653b      	str	r3, [r7, #80]	; 0x50
90008d4a:	2300      	movs	r3, #0
90008d4c:	657b      	str	r3, [r7, #84]	; 0x54
90008d4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
90008d52:	460b      	mov	r3, r1
90008d54:	4313      	orrs	r3, r2
90008d56:	d00a      	beq.n	90008d6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008d58:	4b9e      	ldr	r3, [pc, #632]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d5a:	691b      	ldr	r3, [r3, #16]
90008d5c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
90008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90008d68:	4a9a      	ldr	r2, [pc, #616]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d6a:	430b      	orrs	r3, r1
90008d6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d76:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
90008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
90008d7c:	2300      	movs	r3, #0
90008d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
90008d80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
90008d84:	460b      	mov	r3, r1
90008d86:	4313      	orrs	r3, r2
90008d88:	d009      	beq.n	90008d9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008d8a:	4b92      	ldr	r3, [pc, #584]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008d8e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
90008d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90008d98:	4a8e      	ldr	r2, [pc, #568]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d9a:	430b      	orrs	r3, r1
90008d9c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
90008da6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
90008daa:	643b      	str	r3, [r7, #64]	; 0x40
90008dac:	2300      	movs	r3, #0
90008dae:	647b      	str	r3, [r7, #68]	; 0x44
90008db0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
90008db4:	460b      	mov	r3, r1
90008db6:	4313      	orrs	r3, r2
90008db8:	d00e      	beq.n	90008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008dba:	4b86      	ldr	r3, [pc, #536]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dbc:	691b      	ldr	r3, [r3, #16]
90008dbe:	4a85      	ldr	r2, [pc, #532]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90008dc4:	6113      	str	r3, [r2, #16]
90008dc6:	4b83      	ldr	r3, [pc, #524]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dc8:	6919      	ldr	r1, [r3, #16]
90008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008dce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90008dd2:	4a80      	ldr	r2, [pc, #512]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dd4:	430b      	orrs	r3, r1
90008dd6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
90008de0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
90008de4:	63bb      	str	r3, [r7, #56]	; 0x38
90008de6:	2300      	movs	r3, #0
90008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
90008dea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
90008dee:	460b      	mov	r3, r1
90008df0:	4313      	orrs	r3, r2
90008df2:	d009      	beq.n	90008e08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008df4:	4b77      	ldr	r3, [pc, #476]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008df8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
90008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008e02:	4a74      	ldr	r2, [pc, #464]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e04:	430b      	orrs	r3, r1
90008e06:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e10:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
90008e14:	633b      	str	r3, [r7, #48]	; 0x30
90008e16:	2300      	movs	r3, #0
90008e18:	637b      	str	r3, [r7, #52]	; 0x34
90008e1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
90008e1e:	460b      	mov	r3, r1
90008e20:	4313      	orrs	r3, r2
90008e22:	d00a      	beq.n	90008e3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008e24:	4b6b      	ldr	r3, [pc, #428]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008e28:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
90008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90008e34:	4a67      	ldr	r2, [pc, #412]	; (90008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e36:	430b      	orrs	r3, r1
90008e38:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e42:	2100      	movs	r1, #0
90008e44:	62b9      	str	r1, [r7, #40]	; 0x28
90008e46:	f003 0301 	and.w	r3, r3, #1
90008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
90008e4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
90008e50:	460b      	mov	r3, r1
90008e52:	4313      	orrs	r3, r2
90008e54:	d011      	beq.n	90008e7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e5a:	3308      	adds	r3, #8
90008e5c:	2100      	movs	r1, #0
90008e5e:	4618      	mov	r0, r3
90008e60:	f000 f8ba 	bl	90008fd8 <RCCEx_PLL2_Config>
90008e64:	4603      	mov	r3, r0
90008e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008e6e:	2b00      	cmp	r3, #0
90008e70:	d003      	beq.n	90008e7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008e76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e82:	2100      	movs	r1, #0
90008e84:	6239      	str	r1, [r7, #32]
90008e86:	f003 0302 	and.w	r3, r3, #2
90008e8a:	627b      	str	r3, [r7, #36]	; 0x24
90008e8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008e90:	460b      	mov	r3, r1
90008e92:	4313      	orrs	r3, r2
90008e94:	d011      	beq.n	90008eba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e9a:	3308      	adds	r3, #8
90008e9c:	2101      	movs	r1, #1
90008e9e:	4618      	mov	r0, r3
90008ea0:	f000 f89a 	bl	90008fd8 <RCCEx_PLL2_Config>
90008ea4:	4603      	mov	r3, r0
90008ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008eae:	2b00      	cmp	r3, #0
90008eb0:	d003      	beq.n	90008eba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ec2:	2100      	movs	r1, #0
90008ec4:	61b9      	str	r1, [r7, #24]
90008ec6:	f003 0304 	and.w	r3, r3, #4
90008eca:	61fb      	str	r3, [r7, #28]
90008ecc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008ed0:	460b      	mov	r3, r1
90008ed2:	4313      	orrs	r3, r2
90008ed4:	d011      	beq.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008eda:	3308      	adds	r3, #8
90008edc:	2102      	movs	r1, #2
90008ede:	4618      	mov	r0, r3
90008ee0:	f000 f87a 	bl	90008fd8 <RCCEx_PLL2_Config>
90008ee4:	4603      	mov	r3, r0
90008ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008eee:	2b00      	cmp	r3, #0
90008ef0:	d003      	beq.n	90008efa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f02:	2100      	movs	r1, #0
90008f04:	6139      	str	r1, [r7, #16]
90008f06:	f003 0308 	and.w	r3, r3, #8
90008f0a:	617b      	str	r3, [r7, #20]
90008f0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008f10:	460b      	mov	r3, r1
90008f12:	4313      	orrs	r3, r2
90008f14:	d011      	beq.n	90008f3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f1a:	3328      	adds	r3, #40	; 0x28
90008f1c:	2100      	movs	r1, #0
90008f1e:	4618      	mov	r0, r3
90008f20:	f000 f90c 	bl	9000913c <RCCEx_PLL3_Config>
90008f24:	4603      	mov	r3, r0
90008f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
90008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f2e:	2b00      	cmp	r3, #0
90008f30:	d003      	beq.n	90008f3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f42:	2100      	movs	r1, #0
90008f44:	60b9      	str	r1, [r7, #8]
90008f46:	f003 0310 	and.w	r3, r3, #16
90008f4a:	60fb      	str	r3, [r7, #12]
90008f4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008f50:	460b      	mov	r3, r1
90008f52:	4313      	orrs	r3, r2
90008f54:	d011      	beq.n	90008f7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f5a:	3328      	adds	r3, #40	; 0x28
90008f5c:	2101      	movs	r1, #1
90008f5e:	4618      	mov	r0, r3
90008f60:	f000 f8ec 	bl	9000913c <RCCEx_PLL3_Config>
90008f64:	4603      	mov	r3, r0
90008f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f6e:	2b00      	cmp	r3, #0
90008f70:	d003      	beq.n	90008f7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f82:	2100      	movs	r1, #0
90008f84:	6039      	str	r1, [r7, #0]
90008f86:	f003 0320 	and.w	r3, r3, #32
90008f8a:	607b      	str	r3, [r7, #4]
90008f8c:	e9d7 1200 	ldrd	r1, r2, [r7]
90008f90:	460b      	mov	r3, r1
90008f92:	4313      	orrs	r3, r2
90008f94:	d011      	beq.n	90008fba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f9a:	3328      	adds	r3, #40	; 0x28
90008f9c:	2102      	movs	r1, #2
90008f9e:	4618      	mov	r0, r3
90008fa0:	f000 f8cc 	bl	9000913c <RCCEx_PLL3_Config>
90008fa4:	4603      	mov	r3, r0
90008fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008fae:	2b00      	cmp	r3, #0
90008fb0:	d003      	beq.n	90008fba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
90008fba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
90008fbe:	2b00      	cmp	r3, #0
90008fc0:	d101      	bne.n	90008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008fc2:	2300      	movs	r3, #0
90008fc4:	e000      	b.n	90008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008fc6:	2301      	movs	r3, #1
}
90008fc8:	4618      	mov	r0, r3
90008fca:	f507 7794 	add.w	r7, r7, #296	; 0x128
90008fce:	46bd      	mov	sp, r7
90008fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008fd4:	58024400 	.word	0x58024400

90008fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90008fd8:	b580      	push	{r7, lr}
90008fda:	b084      	sub	sp, #16
90008fdc:	af00      	add	r7, sp, #0
90008fde:	6078      	str	r0, [r7, #4]
90008fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90008fe2:	2300      	movs	r3, #0
90008fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90008fe6:	4b53      	ldr	r3, [pc, #332]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008fea:	f003 0303 	and.w	r3, r3, #3
90008fee:	2b03      	cmp	r3, #3
90008ff0:	d101      	bne.n	90008ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90008ff2:	2301      	movs	r3, #1
90008ff4:	e099      	b.n	9000912a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90008ff6:	4b4f      	ldr	r3, [pc, #316]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90008ff8:	681b      	ldr	r3, [r3, #0]
90008ffa:	4a4e      	ldr	r2, [pc, #312]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90008ffc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90009000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009002:	f7fa f9e9 	bl	900033d8 <HAL_GetTick>
90009006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90009008:	e008      	b.n	9000901c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000900a:	f7fa f9e5 	bl	900033d8 <HAL_GetTick>
9000900e:	4602      	mov	r2, r0
90009010:	68bb      	ldr	r3, [r7, #8]
90009012:	1ad3      	subs	r3, r2, r3
90009014:	2b02      	cmp	r3, #2
90009016:	d901      	bls.n	9000901c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009018:	2303      	movs	r3, #3
9000901a:	e086      	b.n	9000912a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000901c:	4b45      	ldr	r3, [pc, #276]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
9000901e:	681b      	ldr	r3, [r3, #0]
90009020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90009024:	2b00      	cmp	r3, #0
90009026:	d1f0      	bne.n	9000900a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009028:	4b42      	ldr	r3, [pc, #264]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
9000902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000902c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90009030:	687b      	ldr	r3, [r7, #4]
90009032:	681b      	ldr	r3, [r3, #0]
90009034:	031b      	lsls	r3, r3, #12
90009036:	493f      	ldr	r1, [pc, #252]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009038:	4313      	orrs	r3, r2
9000903a:	628b      	str	r3, [r1, #40]	; 0x28
9000903c:	687b      	ldr	r3, [r7, #4]
9000903e:	685b      	ldr	r3, [r3, #4]
90009040:	3b01      	subs	r3, #1
90009042:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009046:	687b      	ldr	r3, [r7, #4]
90009048:	689b      	ldr	r3, [r3, #8]
9000904a:	3b01      	subs	r3, #1
9000904c:	025b      	lsls	r3, r3, #9
9000904e:	b29b      	uxth	r3, r3
90009050:	431a      	orrs	r2, r3
90009052:	687b      	ldr	r3, [r7, #4]
90009054:	68db      	ldr	r3, [r3, #12]
90009056:	3b01      	subs	r3, #1
90009058:	041b      	lsls	r3, r3, #16
9000905a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000905e:	431a      	orrs	r2, r3
90009060:	687b      	ldr	r3, [r7, #4]
90009062:	691b      	ldr	r3, [r3, #16]
90009064:	3b01      	subs	r3, #1
90009066:	061b      	lsls	r3, r3, #24
90009068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
9000906c:	4931      	ldr	r1, [pc, #196]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
9000906e:	4313      	orrs	r3, r2
90009070:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009072:	4b30      	ldr	r3, [pc, #192]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
9000907a:	687b      	ldr	r3, [r7, #4]
9000907c:	695b      	ldr	r3, [r3, #20]
9000907e:	492d      	ldr	r1, [pc, #180]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009080:	4313      	orrs	r3, r2
90009082:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009084:	4b2b      	ldr	r3, [pc, #172]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009088:	f023 0220 	bic.w	r2, r3, #32
9000908c:	687b      	ldr	r3, [r7, #4]
9000908e:	699b      	ldr	r3, [r3, #24]
90009090:	4928      	ldr	r1, [pc, #160]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009092:	4313      	orrs	r3, r2
90009094:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009096:	4b27      	ldr	r3, [pc, #156]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
90009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000909a:	4a26      	ldr	r2, [pc, #152]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
9000909c:	f023 0310 	bic.w	r3, r3, #16
900090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
900090a2:	4b24      	ldr	r3, [pc, #144]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
900090a6:	4b24      	ldr	r3, [pc, #144]	; (90009138 <RCCEx_PLL2_Config+0x160>)
900090a8:	4013      	ands	r3, r2
900090aa:	687a      	ldr	r2, [r7, #4]
900090ac:	69d2      	ldr	r2, [r2, #28]
900090ae:	00d2      	lsls	r2, r2, #3
900090b0:	4920      	ldr	r1, [pc, #128]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090b2:	4313      	orrs	r3, r2
900090b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900090b6:	4b1f      	ldr	r3, [pc, #124]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090ba:	4a1e      	ldr	r2, [pc, #120]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090bc:	f043 0310 	orr.w	r3, r3, #16
900090c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900090c2:	683b      	ldr	r3, [r7, #0]
900090c4:	2b00      	cmp	r3, #0
900090c6:	d106      	bne.n	900090d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900090c8:	4b1a      	ldr	r3, [pc, #104]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090cc:	4a19      	ldr	r2, [pc, #100]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
900090d2:	62d3      	str	r3, [r2, #44]	; 0x2c
900090d4:	e00f      	b.n	900090f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900090d6:	683b      	ldr	r3, [r7, #0]
900090d8:	2b01      	cmp	r3, #1
900090da:	d106      	bne.n	900090ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900090dc:	4b15      	ldr	r3, [pc, #84]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090e0:	4a14      	ldr	r2, [pc, #80]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900090e6:	62d3      	str	r3, [r2, #44]	; 0x2c
900090e8:	e005      	b.n	900090f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900090ea:	4b12      	ldr	r3, [pc, #72]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090ee:	4a11      	ldr	r2, [pc, #68]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900090f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900090f6:	4b0f      	ldr	r3, [pc, #60]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090f8:	681b      	ldr	r3, [r3, #0]
900090fa:	4a0e      	ldr	r2, [pc, #56]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
900090fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90009100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009102:	f7fa f969 	bl	900033d8 <HAL_GetTick>
90009106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90009108:	e008      	b.n	9000911c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000910a:	f7fa f965 	bl	900033d8 <HAL_GetTick>
9000910e:	4602      	mov	r2, r0
90009110:	68bb      	ldr	r3, [r7, #8]
90009112:	1ad3      	subs	r3, r2, r3
90009114:	2b02      	cmp	r3, #2
90009116:	d901      	bls.n	9000911c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90009118:	2303      	movs	r3, #3
9000911a:	e006      	b.n	9000912a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000911c:	4b05      	ldr	r3, [pc, #20]	; (90009134 <RCCEx_PLL2_Config+0x15c>)
9000911e:	681b      	ldr	r3, [r3, #0]
90009120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90009124:	2b00      	cmp	r3, #0
90009126:	d0f0      	beq.n	9000910a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90009128:	7bfb      	ldrb	r3, [r7, #15]
}
9000912a:	4618      	mov	r0, r3
9000912c:	3710      	adds	r7, #16
9000912e:	46bd      	mov	sp, r7
90009130:	bd80      	pop	{r7, pc}
90009132:	bf00      	nop
90009134:	58024400 	.word	0x58024400
90009138:	ffff0007 	.word	0xffff0007

9000913c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000913c:	b580      	push	{r7, lr}
9000913e:	b084      	sub	sp, #16
90009140:	af00      	add	r7, sp, #0
90009142:	6078      	str	r0, [r7, #4]
90009144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009146:	2300      	movs	r3, #0
90009148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000914a:	4b53      	ldr	r3, [pc, #332]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000914e:	f003 0303 	and.w	r3, r3, #3
90009152:	2b03      	cmp	r3, #3
90009154:	d101      	bne.n	9000915a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90009156:	2301      	movs	r3, #1
90009158:	e099      	b.n	9000928e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000915a:	4b4f      	ldr	r3, [pc, #316]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000915c:	681b      	ldr	r3, [r3, #0]
9000915e:	4a4e      	ldr	r2, [pc, #312]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90009164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009166:	f7fa f937 	bl	900033d8 <HAL_GetTick>
9000916a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000916c:	e008      	b.n	90009180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000916e:	f7fa f933 	bl	900033d8 <HAL_GetTick>
90009172:	4602      	mov	r2, r0
90009174:	68bb      	ldr	r3, [r7, #8]
90009176:	1ad3      	subs	r3, r2, r3
90009178:	2b02      	cmp	r3, #2
9000917a:	d901      	bls.n	90009180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000917c:	2303      	movs	r3, #3
9000917e:	e086      	b.n	9000928e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009180:	4b45      	ldr	r3, [pc, #276]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009182:	681b      	ldr	r3, [r3, #0]
90009184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90009188:	2b00      	cmp	r3, #0
9000918a:	d1f0      	bne.n	9000916e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000918c:	4b42      	ldr	r3, [pc, #264]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009190:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90009194:	687b      	ldr	r3, [r7, #4]
90009196:	681b      	ldr	r3, [r3, #0]
90009198:	051b      	lsls	r3, r3, #20
9000919a:	493f      	ldr	r1, [pc, #252]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000919c:	4313      	orrs	r3, r2
9000919e:	628b      	str	r3, [r1, #40]	; 0x28
900091a0:	687b      	ldr	r3, [r7, #4]
900091a2:	685b      	ldr	r3, [r3, #4]
900091a4:	3b01      	subs	r3, #1
900091a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900091aa:	687b      	ldr	r3, [r7, #4]
900091ac:	689b      	ldr	r3, [r3, #8]
900091ae:	3b01      	subs	r3, #1
900091b0:	025b      	lsls	r3, r3, #9
900091b2:	b29b      	uxth	r3, r3
900091b4:	431a      	orrs	r2, r3
900091b6:	687b      	ldr	r3, [r7, #4]
900091b8:	68db      	ldr	r3, [r3, #12]
900091ba:	3b01      	subs	r3, #1
900091bc:	041b      	lsls	r3, r3, #16
900091be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900091c2:	431a      	orrs	r2, r3
900091c4:	687b      	ldr	r3, [r7, #4]
900091c6:	691b      	ldr	r3, [r3, #16]
900091c8:	3b01      	subs	r3, #1
900091ca:	061b      	lsls	r3, r3, #24
900091cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
900091d0:	4931      	ldr	r1, [pc, #196]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091d2:	4313      	orrs	r3, r2
900091d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900091d6:	4b30      	ldr	r3, [pc, #192]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
900091de:	687b      	ldr	r3, [r7, #4]
900091e0:	695b      	ldr	r3, [r3, #20]
900091e2:	492d      	ldr	r1, [pc, #180]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091e4:	4313      	orrs	r3, r2
900091e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900091e8:	4b2b      	ldr	r3, [pc, #172]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
900091f0:	687b      	ldr	r3, [r7, #4]
900091f2:	699b      	ldr	r3, [r3, #24]
900091f4:	4928      	ldr	r1, [pc, #160]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091f6:	4313      	orrs	r3, r2
900091f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900091fa:	4b27      	ldr	r3, [pc, #156]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
900091fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091fe:	4a26      	ldr	r2, [pc, #152]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90009204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90009206:	4b24      	ldr	r3, [pc, #144]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000920a:	4b24      	ldr	r3, [pc, #144]	; (9000929c <RCCEx_PLL3_Config+0x160>)
9000920c:	4013      	ands	r3, r2
9000920e:	687a      	ldr	r2, [r7, #4]
90009210:	69d2      	ldr	r2, [r2, #28]
90009212:	00d2      	lsls	r2, r2, #3
90009214:	4920      	ldr	r1, [pc, #128]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009216:	4313      	orrs	r3, r2
90009218:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000921a:	4b1f      	ldr	r3, [pc, #124]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000921e:	4a1e      	ldr	r2, [pc, #120]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90009224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009226:	683b      	ldr	r3, [r7, #0]
90009228:	2b00      	cmp	r3, #0
9000922a:	d106      	bne.n	9000923a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000922c:	4b1a      	ldr	r3, [pc, #104]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009230:	4a19      	ldr	r2, [pc, #100]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90009236:	62d3      	str	r3, [r2, #44]	; 0x2c
90009238:	e00f      	b.n	9000925a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000923a:	683b      	ldr	r3, [r7, #0]
9000923c:	2b01      	cmp	r3, #1
9000923e:	d106      	bne.n	9000924e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009240:	4b15      	ldr	r3, [pc, #84]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009244:	4a14      	ldr	r2, [pc, #80]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
9000924a:	62d3      	str	r3, [r2, #44]	; 0x2c
9000924c:	e005      	b.n	9000925a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000924e:	4b12      	ldr	r3, [pc, #72]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009252:	4a11      	ldr	r2, [pc, #68]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90009258:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000925a:	4b0f      	ldr	r3, [pc, #60]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
9000925c:	681b      	ldr	r3, [r3, #0]
9000925e:	4a0e      	ldr	r2, [pc, #56]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90009264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009266:	f7fa f8b7 	bl	900033d8 <HAL_GetTick>
9000926a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000926c:	e008      	b.n	90009280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000926e:	f7fa f8b3 	bl	900033d8 <HAL_GetTick>
90009272:	4602      	mov	r2, r0
90009274:	68bb      	ldr	r3, [r7, #8]
90009276:	1ad3      	subs	r3, r2, r3
90009278:	2b02      	cmp	r3, #2
9000927a:	d901      	bls.n	90009280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000927c:	2303      	movs	r3, #3
9000927e:	e006      	b.n	9000928e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009280:	4b05      	ldr	r3, [pc, #20]	; (90009298 <RCCEx_PLL3_Config+0x15c>)
90009282:	681b      	ldr	r3, [r3, #0]
90009284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90009288:	2b00      	cmp	r3, #0
9000928a:	d0f0      	beq.n	9000926e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000928c:	7bfb      	ldrb	r3, [r7, #15]
}
9000928e:	4618      	mov	r0, r3
90009290:	3710      	adds	r7, #16
90009292:	46bd      	mov	sp, r7
90009294:	bd80      	pop	{r7, pc}
90009296:	bf00      	nop
90009298:	58024400 	.word	0x58024400
9000929c:	ffff0007 	.word	0xffff0007

900092a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
900092a0:	b580      	push	{r7, lr}
900092a2:	b082      	sub	sp, #8
900092a4:	af00      	add	r7, sp, #0
900092a6:	6078      	str	r0, [r7, #4]
900092a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
900092aa:	687b      	ldr	r3, [r7, #4]
900092ac:	2b00      	cmp	r3, #0
900092ae:	d101      	bne.n	900092b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900092b0:	2301      	movs	r3, #1
900092b2:	e02b      	b.n	9000930c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900092b4:	687b      	ldr	r3, [r7, #4]
900092b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900092ba:	b2db      	uxtb	r3, r3
900092bc:	2b00      	cmp	r3, #0
900092be:	d106      	bne.n	900092ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900092c0:	687b      	ldr	r3, [r7, #4]
900092c2:	2200      	movs	r2, #0
900092c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900092c8:	6878      	ldr	r0, [r7, #4]
900092ca:	f000 f825 	bl	90009318 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900092ce:	687b      	ldr	r3, [r7, #4]
900092d0:	2202      	movs	r2, #2
900092d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900092d6:	687b      	ldr	r3, [r7, #4]
900092d8:	681a      	ldr	r2, [r3, #0]
900092da:	687b      	ldr	r3, [r7, #4]
900092dc:	3304      	adds	r3, #4
900092de:	4619      	mov	r1, r3
900092e0:	4610      	mov	r0, r2
900092e2:	f000 f9e1 	bl	900096a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900092e6:	687b      	ldr	r3, [r7, #4]
900092e8:	6818      	ldr	r0, [r3, #0]
900092ea:	687b      	ldr	r3, [r7, #4]
900092ec:	685b      	ldr	r3, [r3, #4]
900092ee:	461a      	mov	r2, r3
900092f0:	6839      	ldr	r1, [r7, #0]
900092f2:	f000 fa35 	bl	90009760 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900092f6:	4b07      	ldr	r3, [pc, #28]	; (90009314 <HAL_SDRAM_Init+0x74>)
900092f8:	681b      	ldr	r3, [r3, #0]
900092fa:	4a06      	ldr	r2, [pc, #24]	; (90009314 <HAL_SDRAM_Init+0x74>)
900092fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009300:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90009302:	687b      	ldr	r3, [r7, #4]
90009304:	2201      	movs	r2, #1
90009306:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
9000930a:	2300      	movs	r3, #0
}
9000930c:	4618      	mov	r0, r3
9000930e:	3708      	adds	r7, #8
90009310:	46bd      	mov	sp, r7
90009312:	bd80      	pop	{r7, pc}
90009314:	52004000 	.word	0x52004000

90009318 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90009318:	b480      	push	{r7}
9000931a:	b083      	sub	sp, #12
9000931c:	af00      	add	r7, sp, #0
9000931e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009320:	bf00      	nop
90009322:	370c      	adds	r7, #12
90009324:	46bd      	mov	sp, r7
90009326:	f85d 7b04 	ldr.w	r7, [sp], #4
9000932a:	4770      	bx	lr

9000932c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000932c:	b580      	push	{r7, lr}
9000932e:	b086      	sub	sp, #24
90009330:	af00      	add	r7, sp, #0
90009332:	60f8      	str	r0, [r7, #12]
90009334:	60b9      	str	r1, [r7, #8]
90009336:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
90009338:	68fb      	ldr	r3, [r7, #12]
9000933a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000933e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009340:	7dfb      	ldrb	r3, [r7, #23]
90009342:	2b02      	cmp	r3, #2
90009344:	d101      	bne.n	9000934a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
90009346:	2302      	movs	r3, #2
90009348:	e021      	b.n	9000938e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000934a:	7dfb      	ldrb	r3, [r7, #23]
9000934c:	2b01      	cmp	r3, #1
9000934e:	d002      	beq.n	90009356 <HAL_SDRAM_SendCommand+0x2a>
90009350:	7dfb      	ldrb	r3, [r7, #23]
90009352:	2b05      	cmp	r3, #5
90009354:	d118      	bne.n	90009388 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009356:	68fb      	ldr	r3, [r7, #12]
90009358:	2202      	movs	r2, #2
9000935a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000935e:	68fb      	ldr	r3, [r7, #12]
90009360:	681b      	ldr	r3, [r3, #0]
90009362:	687a      	ldr	r2, [r7, #4]
90009364:	68b9      	ldr	r1, [r7, #8]
90009366:	4618      	mov	r0, r3
90009368:	f000 fa64 	bl	90009834 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000936c:	68bb      	ldr	r3, [r7, #8]
9000936e:	681b      	ldr	r3, [r3, #0]
90009370:	2b02      	cmp	r3, #2
90009372:	d104      	bne.n	9000937e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009374:	68fb      	ldr	r3, [r7, #12]
90009376:	2205      	movs	r2, #5
90009378:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000937c:	e006      	b.n	9000938c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000937e:	68fb      	ldr	r3, [r7, #12]
90009380:	2201      	movs	r2, #1
90009382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009386:	e001      	b.n	9000938c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009388:	2301      	movs	r3, #1
9000938a:	e000      	b.n	9000938e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000938c:	2300      	movs	r3, #0
}
9000938e:	4618      	mov	r0, r3
90009390:	3718      	adds	r7, #24
90009392:	46bd      	mov	sp, r7
90009394:	bd80      	pop	{r7, pc}

90009396 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009396:	b580      	push	{r7, lr}
90009398:	b082      	sub	sp, #8
9000939a:	af00      	add	r7, sp, #0
9000939c:	6078      	str	r0, [r7, #4]
9000939e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
900093a0:	687b      	ldr	r3, [r7, #4]
900093a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900093a6:	b2db      	uxtb	r3, r3
900093a8:	2b02      	cmp	r3, #2
900093aa:	d101      	bne.n	900093b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
900093ac:	2302      	movs	r3, #2
900093ae:	e016      	b.n	900093de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900093b0:	687b      	ldr	r3, [r7, #4]
900093b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900093b6:	b2db      	uxtb	r3, r3
900093b8:	2b01      	cmp	r3, #1
900093ba:	d10f      	bne.n	900093dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900093bc:	687b      	ldr	r3, [r7, #4]
900093be:	2202      	movs	r2, #2
900093c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900093c4:	687b      	ldr	r3, [r7, #4]
900093c6:	681b      	ldr	r3, [r3, #0]
900093c8:	6839      	ldr	r1, [r7, #0]
900093ca:	4618      	mov	r0, r3
900093cc:	f000 fa56 	bl	9000987c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900093d0:	687b      	ldr	r3, [r7, #4]
900093d2:	2201      	movs	r2, #1
900093d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900093d8:	2300      	movs	r3, #0
900093da:	e000      	b.n	900093de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
900093dc:	2301      	movs	r3, #1
}
900093de:	4618      	mov	r0, r3
900093e0:	3708      	adds	r7, #8
900093e2:	46bd      	mov	sp, r7
900093e4:	bd80      	pop	{r7, pc}

900093e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900093e6:	b580      	push	{r7, lr}
900093e8:	b082      	sub	sp, #8
900093ea:	af00      	add	r7, sp, #0
900093ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900093ee:	687b      	ldr	r3, [r7, #4]
900093f0:	2b00      	cmp	r3, #0
900093f2:	d101      	bne.n	900093f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900093f4:	2301      	movs	r3, #1
900093f6:	e049      	b.n	9000948c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900093f8:	687b      	ldr	r3, [r7, #4]
900093fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
900093fe:	b2db      	uxtb	r3, r3
90009400:	2b00      	cmp	r3, #0
90009402:	d106      	bne.n	90009412 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90009404:	687b      	ldr	r3, [r7, #4]
90009406:	2200      	movs	r2, #0
90009408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
9000940c:	6878      	ldr	r0, [r7, #4]
9000940e:	f000 f89d 	bl	9000954c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009412:	687b      	ldr	r3, [r7, #4]
90009414:	2202      	movs	r2, #2
90009416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000941a:	687b      	ldr	r3, [r7, #4]
9000941c:	681a      	ldr	r2, [r3, #0]
9000941e:	687b      	ldr	r3, [r7, #4]
90009420:	3304      	adds	r3, #4
90009422:	4619      	mov	r1, r3
90009424:	4610      	mov	r0, r2
90009426:	f000 f8a5 	bl	90009574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000942a:	687b      	ldr	r3, [r7, #4]
9000942c:	2201      	movs	r2, #1
9000942e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009432:	687b      	ldr	r3, [r7, #4]
90009434:	2201      	movs	r2, #1
90009436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
9000943a:	687b      	ldr	r3, [r7, #4]
9000943c:	2201      	movs	r2, #1
9000943e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
90009442:	687b      	ldr	r3, [r7, #4]
90009444:	2201      	movs	r2, #1
90009446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
9000944a:	687b      	ldr	r3, [r7, #4]
9000944c:	2201      	movs	r2, #1
9000944e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90009452:	687b      	ldr	r3, [r7, #4]
90009454:	2201      	movs	r2, #1
90009456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000945a:	687b      	ldr	r3, [r7, #4]
9000945c:	2201      	movs	r2, #1
9000945e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009462:	687b      	ldr	r3, [r7, #4]
90009464:	2201      	movs	r2, #1
90009466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000946a:	687b      	ldr	r3, [r7, #4]
9000946c:	2201      	movs	r2, #1
9000946e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009472:	687b      	ldr	r3, [r7, #4]
90009474:	2201      	movs	r2, #1
90009476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000947a:	687b      	ldr	r3, [r7, #4]
9000947c:	2201      	movs	r2, #1
9000947e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009482:	687b      	ldr	r3, [r7, #4]
90009484:	2201      	movs	r2, #1
90009486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
9000948a:	2300      	movs	r3, #0
}
9000948c:	4618      	mov	r0, r3
9000948e:	3708      	adds	r7, #8
90009490:	46bd      	mov	sp, r7
90009492:	bd80      	pop	{r7, pc}

90009494 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009494:	b580      	push	{r7, lr}
90009496:	b082      	sub	sp, #8
90009498:	af00      	add	r7, sp, #0
9000949a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000949c:	687b      	ldr	r3, [r7, #4]
9000949e:	2202      	movs	r2, #2
900094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
900094a4:	687b      	ldr	r3, [r7, #4]
900094a6:	681b      	ldr	r3, [r3, #0]
900094a8:	6a1a      	ldr	r2, [r3, #32]
900094aa:	f241 1311 	movw	r3, #4369	; 0x1111
900094ae:	4013      	ands	r3, r2
900094b0:	2b00      	cmp	r3, #0
900094b2:	d10f      	bne.n	900094d4 <HAL_TIM_PWM_DeInit+0x40>
900094b4:	687b      	ldr	r3, [r7, #4]
900094b6:	681b      	ldr	r3, [r3, #0]
900094b8:	6a1a      	ldr	r2, [r3, #32]
900094ba:	f240 4344 	movw	r3, #1092	; 0x444
900094be:	4013      	ands	r3, r2
900094c0:	2b00      	cmp	r3, #0
900094c2:	d107      	bne.n	900094d4 <HAL_TIM_PWM_DeInit+0x40>
900094c4:	687b      	ldr	r3, [r7, #4]
900094c6:	681b      	ldr	r3, [r3, #0]
900094c8:	681a      	ldr	r2, [r3, #0]
900094ca:	687b      	ldr	r3, [r7, #4]
900094cc:	681b      	ldr	r3, [r3, #0]
900094ce:	f022 0201 	bic.w	r2, r2, #1
900094d2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900094d4:	6878      	ldr	r0, [r7, #4]
900094d6:	f000 f843 	bl	90009560 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900094da:	687b      	ldr	r3, [r7, #4]
900094dc:	2200      	movs	r2, #0
900094de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900094e2:	687b      	ldr	r3, [r7, #4]
900094e4:	2200      	movs	r2, #0
900094e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
900094ea:	687b      	ldr	r3, [r7, #4]
900094ec:	2200      	movs	r2, #0
900094ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	2200      	movs	r2, #0
900094f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
900094fa:	687b      	ldr	r3, [r7, #4]
900094fc:	2200      	movs	r2, #0
900094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90009502:	687b      	ldr	r3, [r7, #4]
90009504:	2200      	movs	r2, #0
90009506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000950a:	687b      	ldr	r3, [r7, #4]
9000950c:	2200      	movs	r2, #0
9000950e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009512:	687b      	ldr	r3, [r7, #4]
90009514:	2200      	movs	r2, #0
90009516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000951a:	687b      	ldr	r3, [r7, #4]
9000951c:	2200      	movs	r2, #0
9000951e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009522:	687b      	ldr	r3, [r7, #4]
90009524:	2200      	movs	r2, #0
90009526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000952a:	687b      	ldr	r3, [r7, #4]
9000952c:	2200      	movs	r2, #0
9000952e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009532:	687b      	ldr	r3, [r7, #4]
90009534:	2200      	movs	r2, #0
90009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000953a:	687b      	ldr	r3, [r7, #4]
9000953c:	2200      	movs	r2, #0
9000953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
90009542:	2300      	movs	r3, #0
}
90009544:	4618      	mov	r0, r3
90009546:	3708      	adds	r7, #8
90009548:	46bd      	mov	sp, r7
9000954a:	bd80      	pop	{r7, pc}

9000954c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000954c:	b480      	push	{r7}
9000954e:	b083      	sub	sp, #12
90009550:	af00      	add	r7, sp, #0
90009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009554:	bf00      	nop
90009556:	370c      	adds	r7, #12
90009558:	46bd      	mov	sp, r7
9000955a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000955e:	4770      	bx	lr

90009560 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009560:	b480      	push	{r7}
90009562:	b083      	sub	sp, #12
90009564:	af00      	add	r7, sp, #0
90009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009568:	bf00      	nop
9000956a:	370c      	adds	r7, #12
9000956c:	46bd      	mov	sp, r7
9000956e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009572:	4770      	bx	lr

90009574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009574:	b480      	push	{r7}
90009576:	b085      	sub	sp, #20
90009578:	af00      	add	r7, sp, #0
9000957a:	6078      	str	r0, [r7, #4]
9000957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000957e:	687b      	ldr	r3, [r7, #4]
90009580:	681b      	ldr	r3, [r3, #0]
90009582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009584:	687b      	ldr	r3, [r7, #4]
90009586:	4a40      	ldr	r2, [pc, #256]	; (90009688 <TIM_Base_SetConfig+0x114>)
90009588:	4293      	cmp	r3, r2
9000958a:	d013      	beq.n	900095b4 <TIM_Base_SetConfig+0x40>
9000958c:	687b      	ldr	r3, [r7, #4]
9000958e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90009592:	d00f      	beq.n	900095b4 <TIM_Base_SetConfig+0x40>
90009594:	687b      	ldr	r3, [r7, #4]
90009596:	4a3d      	ldr	r2, [pc, #244]	; (9000968c <TIM_Base_SetConfig+0x118>)
90009598:	4293      	cmp	r3, r2
9000959a:	d00b      	beq.n	900095b4 <TIM_Base_SetConfig+0x40>
9000959c:	687b      	ldr	r3, [r7, #4]
9000959e:	4a3c      	ldr	r2, [pc, #240]	; (90009690 <TIM_Base_SetConfig+0x11c>)
900095a0:	4293      	cmp	r3, r2
900095a2:	d007      	beq.n	900095b4 <TIM_Base_SetConfig+0x40>
900095a4:	687b      	ldr	r3, [r7, #4]
900095a6:	4a3b      	ldr	r2, [pc, #236]	; (90009694 <TIM_Base_SetConfig+0x120>)
900095a8:	4293      	cmp	r3, r2
900095aa:	d003      	beq.n	900095b4 <TIM_Base_SetConfig+0x40>
900095ac:	687b      	ldr	r3, [r7, #4]
900095ae:	4a3a      	ldr	r2, [pc, #232]	; (90009698 <TIM_Base_SetConfig+0x124>)
900095b0:	4293      	cmp	r3, r2
900095b2:	d108      	bne.n	900095c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900095b4:	68fb      	ldr	r3, [r7, #12]
900095b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
900095ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900095bc:	683b      	ldr	r3, [r7, #0]
900095be:	685b      	ldr	r3, [r3, #4]
900095c0:	68fa      	ldr	r2, [r7, #12]
900095c2:	4313      	orrs	r3, r2
900095c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
900095c6:	687b      	ldr	r3, [r7, #4]
900095c8:	4a2f      	ldr	r2, [pc, #188]	; (90009688 <TIM_Base_SetConfig+0x114>)
900095ca:	4293      	cmp	r3, r2
900095cc:	d01f      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095ce:	687b      	ldr	r3, [r7, #4]
900095d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900095d4:	d01b      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095d6:	687b      	ldr	r3, [r7, #4]
900095d8:	4a2c      	ldr	r2, [pc, #176]	; (9000968c <TIM_Base_SetConfig+0x118>)
900095da:	4293      	cmp	r3, r2
900095dc:	d017      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095de:	687b      	ldr	r3, [r7, #4]
900095e0:	4a2b      	ldr	r2, [pc, #172]	; (90009690 <TIM_Base_SetConfig+0x11c>)
900095e2:	4293      	cmp	r3, r2
900095e4:	d013      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095e6:	687b      	ldr	r3, [r7, #4]
900095e8:	4a2a      	ldr	r2, [pc, #168]	; (90009694 <TIM_Base_SetConfig+0x120>)
900095ea:	4293      	cmp	r3, r2
900095ec:	d00f      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095ee:	687b      	ldr	r3, [r7, #4]
900095f0:	4a29      	ldr	r2, [pc, #164]	; (90009698 <TIM_Base_SetConfig+0x124>)
900095f2:	4293      	cmp	r3, r2
900095f4:	d00b      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095f6:	687b      	ldr	r3, [r7, #4]
900095f8:	4a28      	ldr	r2, [pc, #160]	; (9000969c <TIM_Base_SetConfig+0x128>)
900095fa:	4293      	cmp	r3, r2
900095fc:	d007      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
900095fe:	687b      	ldr	r3, [r7, #4]
90009600:	4a27      	ldr	r2, [pc, #156]	; (900096a0 <TIM_Base_SetConfig+0x12c>)
90009602:	4293      	cmp	r3, r2
90009604:	d003      	beq.n	9000960e <TIM_Base_SetConfig+0x9a>
90009606:	687b      	ldr	r3, [r7, #4]
90009608:	4a26      	ldr	r2, [pc, #152]	; (900096a4 <TIM_Base_SetConfig+0x130>)
9000960a:	4293      	cmp	r3, r2
9000960c:	d108      	bne.n	90009620 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
9000960e:	68fb      	ldr	r3, [r7, #12]
90009610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90009614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009616:	683b      	ldr	r3, [r7, #0]
90009618:	68db      	ldr	r3, [r3, #12]
9000961a:	68fa      	ldr	r2, [r7, #12]
9000961c:	4313      	orrs	r3, r2
9000961e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009620:	68fb      	ldr	r3, [r7, #12]
90009622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
90009626:	683b      	ldr	r3, [r7, #0]
90009628:	695b      	ldr	r3, [r3, #20]
9000962a:	4313      	orrs	r3, r2
9000962c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
9000962e:	687b      	ldr	r3, [r7, #4]
90009630:	68fa      	ldr	r2, [r7, #12]
90009632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009634:	683b      	ldr	r3, [r7, #0]
90009636:	689a      	ldr	r2, [r3, #8]
90009638:	687b      	ldr	r3, [r7, #4]
9000963a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000963c:	683b      	ldr	r3, [r7, #0]
9000963e:	681a      	ldr	r2, [r3, #0]
90009640:	687b      	ldr	r3, [r7, #4]
90009642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009644:	687b      	ldr	r3, [r7, #4]
90009646:	4a10      	ldr	r2, [pc, #64]	; (90009688 <TIM_Base_SetConfig+0x114>)
90009648:	4293      	cmp	r3, r2
9000964a:	d00f      	beq.n	9000966c <TIM_Base_SetConfig+0xf8>
9000964c:	687b      	ldr	r3, [r7, #4]
9000964e:	4a12      	ldr	r2, [pc, #72]	; (90009698 <TIM_Base_SetConfig+0x124>)
90009650:	4293      	cmp	r3, r2
90009652:	d00b      	beq.n	9000966c <TIM_Base_SetConfig+0xf8>
90009654:	687b      	ldr	r3, [r7, #4]
90009656:	4a11      	ldr	r2, [pc, #68]	; (9000969c <TIM_Base_SetConfig+0x128>)
90009658:	4293      	cmp	r3, r2
9000965a:	d007      	beq.n	9000966c <TIM_Base_SetConfig+0xf8>
9000965c:	687b      	ldr	r3, [r7, #4]
9000965e:	4a10      	ldr	r2, [pc, #64]	; (900096a0 <TIM_Base_SetConfig+0x12c>)
90009660:	4293      	cmp	r3, r2
90009662:	d003      	beq.n	9000966c <TIM_Base_SetConfig+0xf8>
90009664:	687b      	ldr	r3, [r7, #4]
90009666:	4a0f      	ldr	r2, [pc, #60]	; (900096a4 <TIM_Base_SetConfig+0x130>)
90009668:	4293      	cmp	r3, r2
9000966a:	d103      	bne.n	90009674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000966c:	683b      	ldr	r3, [r7, #0]
9000966e:	691a      	ldr	r2, [r3, #16]
90009670:	687b      	ldr	r3, [r7, #4]
90009672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009674:	687b      	ldr	r3, [r7, #4]
90009676:	2201      	movs	r2, #1
90009678:	615a      	str	r2, [r3, #20]
}
9000967a:	bf00      	nop
9000967c:	3714      	adds	r7, #20
9000967e:	46bd      	mov	sp, r7
90009680:	f85d 7b04 	ldr.w	r7, [sp], #4
90009684:	4770      	bx	lr
90009686:	bf00      	nop
90009688:	40010000 	.word	0x40010000
9000968c:	40000400 	.word	0x40000400
90009690:	40000800 	.word	0x40000800
90009694:	40000c00 	.word	0x40000c00
90009698:	40010400 	.word	0x40010400
9000969c:	40014000 	.word	0x40014000
900096a0:	40014400 	.word	0x40014400
900096a4:	40014800 	.word	0x40014800

900096a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
900096a8:	b480      	push	{r7}
900096aa:	b083      	sub	sp, #12
900096ac:	af00      	add	r7, sp, #0
900096ae:	6078      	str	r0, [r7, #4]
900096b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
900096b2:	683b      	ldr	r3, [r7, #0]
900096b4:	681b      	ldr	r3, [r3, #0]
900096b6:	2b00      	cmp	r3, #0
900096b8:	d121      	bne.n	900096fe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900096ba:	687b      	ldr	r3, [r7, #4]
900096bc:	681a      	ldr	r2, [r3, #0]
900096be:	4b27      	ldr	r3, [pc, #156]	; (9000975c <FMC_SDRAM_Init+0xb4>)
900096c0:	4013      	ands	r3, r2
900096c2:	683a      	ldr	r2, [r7, #0]
900096c4:	6851      	ldr	r1, [r2, #4]
900096c6:	683a      	ldr	r2, [r7, #0]
900096c8:	6892      	ldr	r2, [r2, #8]
900096ca:	4311      	orrs	r1, r2
900096cc:	683a      	ldr	r2, [r7, #0]
900096ce:	68d2      	ldr	r2, [r2, #12]
900096d0:	4311      	orrs	r1, r2
900096d2:	683a      	ldr	r2, [r7, #0]
900096d4:	6912      	ldr	r2, [r2, #16]
900096d6:	4311      	orrs	r1, r2
900096d8:	683a      	ldr	r2, [r7, #0]
900096da:	6952      	ldr	r2, [r2, #20]
900096dc:	4311      	orrs	r1, r2
900096de:	683a      	ldr	r2, [r7, #0]
900096e0:	6992      	ldr	r2, [r2, #24]
900096e2:	4311      	orrs	r1, r2
900096e4:	683a      	ldr	r2, [r7, #0]
900096e6:	69d2      	ldr	r2, [r2, #28]
900096e8:	4311      	orrs	r1, r2
900096ea:	683a      	ldr	r2, [r7, #0]
900096ec:	6a12      	ldr	r2, [r2, #32]
900096ee:	4311      	orrs	r1, r2
900096f0:	683a      	ldr	r2, [r7, #0]
900096f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
900096f4:	430a      	orrs	r2, r1
900096f6:	431a      	orrs	r2, r3
900096f8:	687b      	ldr	r3, [r7, #4]
900096fa:	601a      	str	r2, [r3, #0]
900096fc:	e026      	b.n	9000974c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900096fe:	687b      	ldr	r3, [r7, #4]
90009700:	681b      	ldr	r3, [r3, #0]
90009702:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
90009706:	683b      	ldr	r3, [r7, #0]
90009708:	69d9      	ldr	r1, [r3, #28]
9000970a:	683b      	ldr	r3, [r7, #0]
9000970c:	6a1b      	ldr	r3, [r3, #32]
9000970e:	4319      	orrs	r1, r3
90009710:	683b      	ldr	r3, [r7, #0]
90009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009714:	430b      	orrs	r3, r1
90009716:	431a      	orrs	r2, r3
90009718:	687b      	ldr	r3, [r7, #4]
9000971a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000971c:	687b      	ldr	r3, [r7, #4]
9000971e:	685a      	ldr	r2, [r3, #4]
90009720:	4b0e      	ldr	r3, [pc, #56]	; (9000975c <FMC_SDRAM_Init+0xb4>)
90009722:	4013      	ands	r3, r2
90009724:	683a      	ldr	r2, [r7, #0]
90009726:	6851      	ldr	r1, [r2, #4]
90009728:	683a      	ldr	r2, [r7, #0]
9000972a:	6892      	ldr	r2, [r2, #8]
9000972c:	4311      	orrs	r1, r2
9000972e:	683a      	ldr	r2, [r7, #0]
90009730:	68d2      	ldr	r2, [r2, #12]
90009732:	4311      	orrs	r1, r2
90009734:	683a      	ldr	r2, [r7, #0]
90009736:	6912      	ldr	r2, [r2, #16]
90009738:	4311      	orrs	r1, r2
9000973a:	683a      	ldr	r2, [r7, #0]
9000973c:	6952      	ldr	r2, [r2, #20]
9000973e:	4311      	orrs	r1, r2
90009740:	683a      	ldr	r2, [r7, #0]
90009742:	6992      	ldr	r2, [r2, #24]
90009744:	430a      	orrs	r2, r1
90009746:	431a      	orrs	r2, r3
90009748:	687b      	ldr	r3, [r7, #4]
9000974a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000974c:	2300      	movs	r3, #0
}
9000974e:	4618      	mov	r0, r3
90009750:	370c      	adds	r7, #12
90009752:	46bd      	mov	sp, r7
90009754:	f85d 7b04 	ldr.w	r7, [sp], #4
90009758:	4770      	bx	lr
9000975a:	bf00      	nop
9000975c:	ffff8000 	.word	0xffff8000

90009760 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90009760:	b480      	push	{r7}
90009762:	b085      	sub	sp, #20
90009764:	af00      	add	r7, sp, #0
90009766:	60f8      	str	r0, [r7, #12]
90009768:	60b9      	str	r1, [r7, #8]
9000976a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000976c:	687b      	ldr	r3, [r7, #4]
9000976e:	2b00      	cmp	r3, #0
90009770:	d128      	bne.n	900097c4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90009772:	68fb      	ldr	r3, [r7, #12]
90009774:	689b      	ldr	r3, [r3, #8]
90009776:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
9000977a:	68bb      	ldr	r3, [r7, #8]
9000977c:	681b      	ldr	r3, [r3, #0]
9000977e:	1e59      	subs	r1, r3, #1
90009780:	68bb      	ldr	r3, [r7, #8]
90009782:	685b      	ldr	r3, [r3, #4]
90009784:	3b01      	subs	r3, #1
90009786:	011b      	lsls	r3, r3, #4
90009788:	4319      	orrs	r1, r3
9000978a:	68bb      	ldr	r3, [r7, #8]
9000978c:	689b      	ldr	r3, [r3, #8]
9000978e:	3b01      	subs	r3, #1
90009790:	021b      	lsls	r3, r3, #8
90009792:	4319      	orrs	r1, r3
90009794:	68bb      	ldr	r3, [r7, #8]
90009796:	68db      	ldr	r3, [r3, #12]
90009798:	3b01      	subs	r3, #1
9000979a:	031b      	lsls	r3, r3, #12
9000979c:	4319      	orrs	r1, r3
9000979e:	68bb      	ldr	r3, [r7, #8]
900097a0:	691b      	ldr	r3, [r3, #16]
900097a2:	3b01      	subs	r3, #1
900097a4:	041b      	lsls	r3, r3, #16
900097a6:	4319      	orrs	r1, r3
900097a8:	68bb      	ldr	r3, [r7, #8]
900097aa:	695b      	ldr	r3, [r3, #20]
900097ac:	3b01      	subs	r3, #1
900097ae:	051b      	lsls	r3, r3, #20
900097b0:	4319      	orrs	r1, r3
900097b2:	68bb      	ldr	r3, [r7, #8]
900097b4:	699b      	ldr	r3, [r3, #24]
900097b6:	3b01      	subs	r3, #1
900097b8:	061b      	lsls	r3, r3, #24
900097ba:	430b      	orrs	r3, r1
900097bc:	431a      	orrs	r2, r3
900097be:	68fb      	ldr	r3, [r7, #12]
900097c0:	609a      	str	r2, [r3, #8]
900097c2:	e02d      	b.n	90009820 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
900097c4:	68fb      	ldr	r3, [r7, #12]
900097c6:	689a      	ldr	r2, [r3, #8]
900097c8:	4b19      	ldr	r3, [pc, #100]	; (90009830 <FMC_SDRAM_Timing_Init+0xd0>)
900097ca:	4013      	ands	r3, r2
900097cc:	68ba      	ldr	r2, [r7, #8]
900097ce:	68d2      	ldr	r2, [r2, #12]
900097d0:	3a01      	subs	r2, #1
900097d2:	0311      	lsls	r1, r2, #12
900097d4:	68ba      	ldr	r2, [r7, #8]
900097d6:	6952      	ldr	r2, [r2, #20]
900097d8:	3a01      	subs	r2, #1
900097da:	0512      	lsls	r2, r2, #20
900097dc:	430a      	orrs	r2, r1
900097de:	431a      	orrs	r2, r3
900097e0:	68fb      	ldr	r3, [r7, #12]
900097e2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
900097e4:	68fb      	ldr	r3, [r7, #12]
900097e6:	68db      	ldr	r3, [r3, #12]
900097e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
900097ec:	68bb      	ldr	r3, [r7, #8]
900097ee:	681b      	ldr	r3, [r3, #0]
900097f0:	1e59      	subs	r1, r3, #1
900097f2:	68bb      	ldr	r3, [r7, #8]
900097f4:	685b      	ldr	r3, [r3, #4]
900097f6:	3b01      	subs	r3, #1
900097f8:	011b      	lsls	r3, r3, #4
900097fa:	4319      	orrs	r1, r3
900097fc:	68bb      	ldr	r3, [r7, #8]
900097fe:	689b      	ldr	r3, [r3, #8]
90009800:	3b01      	subs	r3, #1
90009802:	021b      	lsls	r3, r3, #8
90009804:	4319      	orrs	r1, r3
90009806:	68bb      	ldr	r3, [r7, #8]
90009808:	691b      	ldr	r3, [r3, #16]
9000980a:	3b01      	subs	r3, #1
9000980c:	041b      	lsls	r3, r3, #16
9000980e:	4319      	orrs	r1, r3
90009810:	68bb      	ldr	r3, [r7, #8]
90009812:	699b      	ldr	r3, [r3, #24]
90009814:	3b01      	subs	r3, #1
90009816:	061b      	lsls	r3, r3, #24
90009818:	430b      	orrs	r3, r1
9000981a:	431a      	orrs	r2, r3
9000981c:	68fb      	ldr	r3, [r7, #12]
9000981e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
90009820:	2300      	movs	r3, #0
}
90009822:	4618      	mov	r0, r3
90009824:	3714      	adds	r7, #20
90009826:	46bd      	mov	sp, r7
90009828:	f85d 7b04 	ldr.w	r7, [sp], #4
9000982c:	4770      	bx	lr
9000982e:	bf00      	nop
90009830:	ff0f0fff 	.word	0xff0f0fff

90009834 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90009834:	b480      	push	{r7}
90009836:	b085      	sub	sp, #20
90009838:	af00      	add	r7, sp, #0
9000983a:	60f8      	str	r0, [r7, #12]
9000983c:	60b9      	str	r1, [r7, #8]
9000983e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
90009840:	68fb      	ldr	r3, [r7, #12]
90009842:	691a      	ldr	r2, [r3, #16]
90009844:	4b0c      	ldr	r3, [pc, #48]	; (90009878 <FMC_SDRAM_SendCommand+0x44>)
90009846:	4013      	ands	r3, r2
90009848:	68ba      	ldr	r2, [r7, #8]
9000984a:	6811      	ldr	r1, [r2, #0]
9000984c:	68ba      	ldr	r2, [r7, #8]
9000984e:	6852      	ldr	r2, [r2, #4]
90009850:	4311      	orrs	r1, r2
90009852:	68ba      	ldr	r2, [r7, #8]
90009854:	6892      	ldr	r2, [r2, #8]
90009856:	3a01      	subs	r2, #1
90009858:	0152      	lsls	r2, r2, #5
9000985a:	4311      	orrs	r1, r2
9000985c:	68ba      	ldr	r2, [r7, #8]
9000985e:	68d2      	ldr	r2, [r2, #12]
90009860:	0252      	lsls	r2, r2, #9
90009862:	430a      	orrs	r2, r1
90009864:	431a      	orrs	r2, r3
90009866:	68fb      	ldr	r3, [r7, #12]
90009868:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000986a:	2300      	movs	r3, #0
}
9000986c:	4618      	mov	r0, r3
9000986e:	3714      	adds	r7, #20
90009870:	46bd      	mov	sp, r7
90009872:	f85d 7b04 	ldr.w	r7, [sp], #4
90009876:	4770      	bx	lr
90009878:	ffc00000 	.word	0xffc00000

9000987c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000987c:	b480      	push	{r7}
9000987e:	b083      	sub	sp, #12
90009880:	af00      	add	r7, sp, #0
90009882:	6078      	str	r0, [r7, #4]
90009884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
90009886:	687b      	ldr	r3, [r7, #4]
90009888:	695a      	ldr	r2, [r3, #20]
9000988a:	4b07      	ldr	r3, [pc, #28]	; (900098a8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000988c:	4013      	ands	r3, r2
9000988e:	683a      	ldr	r2, [r7, #0]
90009890:	0052      	lsls	r2, r2, #1
90009892:	431a      	orrs	r2, r3
90009894:	687b      	ldr	r3, [r7, #4]
90009896:	615a      	str	r2, [r3, #20]

  return HAL_OK;
90009898:	2300      	movs	r3, #0
}
9000989a:	4618      	mov	r0, r3
9000989c:	370c      	adds	r7, #12
9000989e:	46bd      	mov	sp, r7
900098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
900098a4:	4770      	bx	lr
900098a6:	bf00      	nop
900098a8:	ffffc001 	.word	0xffffc001

900098ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
900098ac:	b480      	push	{r7}
900098ae:	b083      	sub	sp, #12
900098b0:	af00      	add	r7, sp, #0
900098b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
900098b4:	687b      	ldr	r3, [r7, #4]
900098b6:	689b      	ldr	r3, [r3, #8]
900098b8:	f043 0201 	orr.w	r2, r3, #1
900098bc:	687b      	ldr	r3, [r7, #4]
900098be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
900098c0:	2300      	movs	r3, #0
}
900098c2:	4618      	mov	r0, r3
900098c4:	370c      	adds	r7, #12
900098c6:	46bd      	mov	sp, r7
900098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900098cc:	4770      	bx	lr

900098ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
900098ce:	b480      	push	{r7}
900098d0:	b083      	sub	sp, #12
900098d2:	af00      	add	r7, sp, #0
900098d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
900098d6:	687b      	ldr	r3, [r7, #4]
900098d8:	689b      	ldr	r3, [r3, #8]
900098da:	f023 0201 	bic.w	r2, r3, #1
900098de:	687b      	ldr	r3, [r7, #4]
900098e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
900098e2:	2300      	movs	r3, #0
}
900098e4:	4618      	mov	r0, r3
900098e6:	370c      	adds	r7, #12
900098e8:	46bd      	mov	sp, r7
900098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900098ee:	4770      	bx	lr

900098f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
900098f0:	b480      	push	{r7}
900098f2:	b085      	sub	sp, #20
900098f4:	af00      	add	r7, sp, #0
900098f6:	6078      	str	r0, [r7, #4]
900098f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
900098fa:	2300      	movs	r3, #0
900098fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
900098fe:	68fb      	ldr	r3, [r7, #12]
90009900:	3301      	adds	r3, #1
90009902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
90009904:	68fb      	ldr	r3, [r7, #12]
90009906:	4a13      	ldr	r2, [pc, #76]	; (90009954 <USB_FlushTxFifo+0x64>)
90009908:	4293      	cmp	r3, r2
9000990a:	d901      	bls.n	90009910 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
9000990c:	2303      	movs	r3, #3
9000990e:	e01b      	b.n	90009948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009910:	687b      	ldr	r3, [r7, #4]
90009912:	691b      	ldr	r3, [r3, #16]
90009914:	2b00      	cmp	r3, #0
90009916:	daf2      	bge.n	900098fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
90009918:	2300      	movs	r3, #0
9000991a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000991c:	683b      	ldr	r3, [r7, #0]
9000991e:	019b      	lsls	r3, r3, #6
90009920:	f043 0220 	orr.w	r2, r3, #32
90009924:	687b      	ldr	r3, [r7, #4]
90009926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009928:	68fb      	ldr	r3, [r7, #12]
9000992a:	3301      	adds	r3, #1
9000992c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000992e:	68fb      	ldr	r3, [r7, #12]
90009930:	4a08      	ldr	r2, [pc, #32]	; (90009954 <USB_FlushTxFifo+0x64>)
90009932:	4293      	cmp	r3, r2
90009934:	d901      	bls.n	9000993a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
90009936:	2303      	movs	r3, #3
90009938:	e006      	b.n	90009948 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000993a:	687b      	ldr	r3, [r7, #4]
9000993c:	691b      	ldr	r3, [r3, #16]
9000993e:	f003 0320 	and.w	r3, r3, #32
90009942:	2b20      	cmp	r3, #32
90009944:	d0f0      	beq.n	90009928 <USB_FlushTxFifo+0x38>

  return HAL_OK;
90009946:	2300      	movs	r3, #0
}
90009948:	4618      	mov	r0, r3
9000994a:	3714      	adds	r7, #20
9000994c:	46bd      	mov	sp, r7
9000994e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009952:	4770      	bx	lr
90009954:	00030d40 	.word	0x00030d40

90009958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
90009958:	b480      	push	{r7}
9000995a:	b085      	sub	sp, #20
9000995c:	af00      	add	r7, sp, #0
9000995e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
90009960:	2300      	movs	r3, #0
90009962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009964:	68fb      	ldr	r3, [r7, #12]
90009966:	3301      	adds	r3, #1
90009968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000996a:	68fb      	ldr	r3, [r7, #12]
9000996c:	4a11      	ldr	r2, [pc, #68]	; (900099b4 <USB_FlushRxFifo+0x5c>)
9000996e:	4293      	cmp	r3, r2
90009970:	d901      	bls.n	90009976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
90009972:	2303      	movs	r3, #3
90009974:	e018      	b.n	900099a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009976:	687b      	ldr	r3, [r7, #4]
90009978:	691b      	ldr	r3, [r3, #16]
9000997a:	2b00      	cmp	r3, #0
9000997c:	daf2      	bge.n	90009964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000997e:	2300      	movs	r3, #0
90009980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90009982:	687b      	ldr	r3, [r7, #4]
90009984:	2210      	movs	r2, #16
90009986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009988:	68fb      	ldr	r3, [r7, #12]
9000998a:	3301      	adds	r3, #1
9000998c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000998e:	68fb      	ldr	r3, [r7, #12]
90009990:	4a08      	ldr	r2, [pc, #32]	; (900099b4 <USB_FlushRxFifo+0x5c>)
90009992:	4293      	cmp	r3, r2
90009994:	d901      	bls.n	9000999a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
90009996:	2303      	movs	r3, #3
90009998:	e006      	b.n	900099a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000999a:	687b      	ldr	r3, [r7, #4]
9000999c:	691b      	ldr	r3, [r3, #16]
9000999e:	f003 0310 	and.w	r3, r3, #16
900099a2:	2b10      	cmp	r3, #16
900099a4:	d0f0      	beq.n	90009988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
900099a6:	2300      	movs	r3, #0
}
900099a8:	4618      	mov	r0, r3
900099aa:	3714      	adds	r7, #20
900099ac:	46bd      	mov	sp, r7
900099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
900099b2:	4770      	bx	lr
900099b4:	00030d40 	.word	0x00030d40

900099b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
900099b8:	b480      	push	{r7}
900099ba:	b08b      	sub	sp, #44	; 0x2c
900099bc:	af00      	add	r7, sp, #0
900099be:	60f8      	str	r0, [r7, #12]
900099c0:	60b9      	str	r1, [r7, #8]
900099c2:	4613      	mov	r3, r2
900099c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
900099c6:	68fb      	ldr	r3, [r7, #12]
900099c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
900099ca:	68bb      	ldr	r3, [r7, #8]
900099cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
900099ce:	88fb      	ldrh	r3, [r7, #6]
900099d0:	089b      	lsrs	r3, r3, #2
900099d2:	b29b      	uxth	r3, r3
900099d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
900099d6:	88fb      	ldrh	r3, [r7, #6]
900099d8:	f003 0303 	and.w	r3, r3, #3
900099dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
900099de:	2300      	movs	r3, #0
900099e0:	623b      	str	r3, [r7, #32]
900099e2:	e014      	b.n	90009a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
900099e4:	69bb      	ldr	r3, [r7, #24]
900099e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900099ea:	681a      	ldr	r2, [r3, #0]
900099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099ee:	601a      	str	r2, [r3, #0]
    pDest++;
900099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099f2:	3301      	adds	r3, #1
900099f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
900099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099f8:	3301      	adds	r3, #1
900099fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
900099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099fe:	3301      	adds	r3, #1
90009a00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
90009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a04:	3301      	adds	r3, #1
90009a06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
90009a08:	6a3b      	ldr	r3, [r7, #32]
90009a0a:	3301      	adds	r3, #1
90009a0c:	623b      	str	r3, [r7, #32]
90009a0e:	6a3a      	ldr	r2, [r7, #32]
90009a10:	697b      	ldr	r3, [r7, #20]
90009a12:	429a      	cmp	r2, r3
90009a14:	d3e6      	bcc.n	900099e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
90009a16:	8bfb      	ldrh	r3, [r7, #30]
90009a18:	2b00      	cmp	r3, #0
90009a1a:	d01e      	beq.n	90009a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
90009a1c:	2300      	movs	r3, #0
90009a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
90009a20:	69bb      	ldr	r3, [r7, #24]
90009a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90009a26:	461a      	mov	r2, r3
90009a28:	f107 0310 	add.w	r3, r7, #16
90009a2c:	6812      	ldr	r2, [r2, #0]
90009a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
90009a30:	693a      	ldr	r2, [r7, #16]
90009a32:	6a3b      	ldr	r3, [r7, #32]
90009a34:	b2db      	uxtb	r3, r3
90009a36:	00db      	lsls	r3, r3, #3
90009a38:	fa22 f303 	lsr.w	r3, r2, r3
90009a3c:	b2da      	uxtb	r2, r3
90009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a40:	701a      	strb	r2, [r3, #0]
      i++;
90009a42:	6a3b      	ldr	r3, [r7, #32]
90009a44:	3301      	adds	r3, #1
90009a46:	623b      	str	r3, [r7, #32]
      pDest++;
90009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a4a:	3301      	adds	r3, #1
90009a4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
90009a4e:	8bfb      	ldrh	r3, [r7, #30]
90009a50:	3b01      	subs	r3, #1
90009a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
90009a54:	8bfb      	ldrh	r3, [r7, #30]
90009a56:	2b00      	cmp	r3, #0
90009a58:	d1ea      	bne.n	90009a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
90009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90009a5c:	4618      	mov	r0, r3
90009a5e:	372c      	adds	r7, #44	; 0x2c
90009a60:	46bd      	mov	sp, r7
90009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a66:	4770      	bx	lr

90009a68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
90009a68:	b480      	push	{r7}
90009a6a:	b085      	sub	sp, #20
90009a6c:	af00      	add	r7, sp, #0
90009a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
90009a70:	687b      	ldr	r3, [r7, #4]
90009a72:	695b      	ldr	r3, [r3, #20]
90009a74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
90009a76:	687b      	ldr	r3, [r7, #4]
90009a78:	699b      	ldr	r3, [r3, #24]
90009a7a:	68fa      	ldr	r2, [r7, #12]
90009a7c:	4013      	ands	r3, r2
90009a7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
90009a80:	68fb      	ldr	r3, [r7, #12]
}
90009a82:	4618      	mov	r0, r3
90009a84:	3714      	adds	r7, #20
90009a86:	46bd      	mov	sp, r7
90009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a8c:	4770      	bx	lr

90009a8e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
90009a8e:	b480      	push	{r7}
90009a90:	b085      	sub	sp, #20
90009a92:	af00      	add	r7, sp, #0
90009a94:	6078      	str	r0, [r7, #4]
90009a96:	460b      	mov	r3, r1
90009a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009a9a:	687b      	ldr	r3, [r7, #4]
90009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
90009a9e:	78fb      	ldrb	r3, [r7, #3]
90009aa0:	015a      	lsls	r2, r3, #5
90009aa2:	68fb      	ldr	r3, [r7, #12]
90009aa4:	4413      	add	r3, r2
90009aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009aaa:	689b      	ldr	r3, [r3, #8]
90009aac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
90009aae:	78fb      	ldrb	r3, [r7, #3]
90009ab0:	015a      	lsls	r2, r3, #5
90009ab2:	68fb      	ldr	r3, [r7, #12]
90009ab4:	4413      	add	r3, r2
90009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009aba:	68db      	ldr	r3, [r3, #12]
90009abc:	68ba      	ldr	r2, [r7, #8]
90009abe:	4013      	ands	r3, r2
90009ac0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
90009ac2:	68bb      	ldr	r3, [r7, #8]
}
90009ac4:	4618      	mov	r0, r3
90009ac6:	3714      	adds	r7, #20
90009ac8:	46bd      	mov	sp, r7
90009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ace:	4770      	bx	lr

90009ad0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
90009ad0:	b480      	push	{r7}
90009ad2:	b083      	sub	sp, #12
90009ad4:	af00      	add	r7, sp, #0
90009ad6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
90009ad8:	687b      	ldr	r3, [r7, #4]
90009ada:	695b      	ldr	r3, [r3, #20]
90009adc:	f003 0301 	and.w	r3, r3, #1
}
90009ae0:	4618      	mov	r0, r3
90009ae2:	370c      	adds	r7, #12
90009ae4:	46bd      	mov	sp, r7
90009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
90009aea:	4770      	bx	lr

90009aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
90009aec:	b480      	push	{r7}
90009aee:	b085      	sub	sp, #20
90009af0:	af00      	add	r7, sp, #0
90009af2:	6078      	str	r0, [r7, #4]
90009af4:	460b      	mov	r3, r1
90009af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009af8:	687b      	ldr	r3, [r7, #4]
90009afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90009afc:	68fb      	ldr	r3, [r7, #12]
90009afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b02:	681b      	ldr	r3, [r3, #0]
90009b04:	68fa      	ldr	r2, [r7, #12]
90009b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90009b0a:	f023 0303 	bic.w	r3, r3, #3
90009b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90009b10:	68fb      	ldr	r3, [r7, #12]
90009b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b16:	681a      	ldr	r2, [r3, #0]
90009b18:	78fb      	ldrb	r3, [r7, #3]
90009b1a:	f003 0303 	and.w	r3, r3, #3
90009b1e:	68f9      	ldr	r1, [r7, #12]
90009b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
90009b24:	4313      	orrs	r3, r2
90009b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
90009b28:	78fb      	ldrb	r3, [r7, #3]
90009b2a:	2b01      	cmp	r3, #1
90009b2c:	d107      	bne.n	90009b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
90009b2e:	68fb      	ldr	r3, [r7, #12]
90009b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b34:	461a      	mov	r2, r3
90009b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
90009b3a:	6053      	str	r3, [r2, #4]
90009b3c:	e00c      	b.n	90009b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
90009b3e:	78fb      	ldrb	r3, [r7, #3]
90009b40:	2b02      	cmp	r3, #2
90009b42:	d107      	bne.n	90009b54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
90009b44:	68fb      	ldr	r3, [r7, #12]
90009b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b4a:	461a      	mov	r2, r3
90009b4c:	f241 7370 	movw	r3, #6000	; 0x1770
90009b50:	6053      	str	r3, [r2, #4]
90009b52:	e001      	b.n	90009b58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
90009b54:	2301      	movs	r3, #1
90009b56:	e000      	b.n	90009b5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
90009b58:	2300      	movs	r3, #0
}
90009b5a:	4618      	mov	r0, r3
90009b5c:	3714      	adds	r7, #20
90009b5e:	46bd      	mov	sp, r7
90009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b64:	4770      	bx	lr

90009b66 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
90009b66:	b480      	push	{r7}
90009b68:	b085      	sub	sp, #20
90009b6a:	af00      	add	r7, sp, #0
90009b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009b6e:	687b      	ldr	r3, [r7, #4]
90009b70:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90009b72:	68fb      	ldr	r3, [r7, #12]
90009b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b78:	695b      	ldr	r3, [r3, #20]
90009b7a:	b29b      	uxth	r3, r3
}
90009b7c:	4618      	mov	r0, r3
90009b7e:	3714      	adds	r7, #20
90009b80:	46bd      	mov	sp, r7
90009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b86:	4770      	bx	lr

90009b88 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
90009b88:	b480      	push	{r7}
90009b8a:	b089      	sub	sp, #36	; 0x24
90009b8c:	af00      	add	r7, sp, #0
90009b8e:	6078      	str	r0, [r7, #4]
90009b90:	460b      	mov	r3, r1
90009b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009b94:	687b      	ldr	r3, [r7, #4]
90009b96:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
90009b98:	78fb      	ldrb	r3, [r7, #3]
90009b9a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
90009b9c:	2300      	movs	r3, #0
90009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90009ba0:	69bb      	ldr	r3, [r7, #24]
90009ba2:	015a      	lsls	r2, r3, #5
90009ba4:	69fb      	ldr	r3, [r7, #28]
90009ba6:	4413      	add	r3, r2
90009ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009bac:	681b      	ldr	r3, [r3, #0]
90009bae:	0c9b      	lsrs	r3, r3, #18
90009bb0:	f003 0303 	and.w	r3, r3, #3
90009bb4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
90009bb6:	69bb      	ldr	r3, [r7, #24]
90009bb8:	015a      	lsls	r2, r3, #5
90009bba:	69fb      	ldr	r3, [r7, #28]
90009bbc:	4413      	add	r3, r2
90009bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009bc2:	681b      	ldr	r3, [r3, #0]
90009bc4:	0fdb      	lsrs	r3, r3, #31
90009bc6:	f003 0301 	and.w	r3, r3, #1
90009bca:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
90009bcc:	687b      	ldr	r3, [r7, #4]
90009bce:	689b      	ldr	r3, [r3, #8]
90009bd0:	f003 0320 	and.w	r3, r3, #32
90009bd4:	2b20      	cmp	r3, #32
90009bd6:	d104      	bne.n	90009be2 <USB_HC_Halt+0x5a>
90009bd8:	693b      	ldr	r3, [r7, #16]
90009bda:	2b00      	cmp	r3, #0
90009bdc:	d101      	bne.n	90009be2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
90009bde:	2300      	movs	r3, #0
90009be0:	e0c8      	b.n	90009d74 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90009be2:	697b      	ldr	r3, [r7, #20]
90009be4:	2b00      	cmp	r3, #0
90009be6:	d002      	beq.n	90009bee <USB_HC_Halt+0x66>
90009be8:	697b      	ldr	r3, [r7, #20]
90009bea:	2b02      	cmp	r3, #2
90009bec:	d163      	bne.n	90009cb6 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009bee:	69bb      	ldr	r3, [r7, #24]
90009bf0:	015a      	lsls	r2, r3, #5
90009bf2:	69fb      	ldr	r3, [r7, #28]
90009bf4:	4413      	add	r3, r2
90009bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009bfa:	681b      	ldr	r3, [r3, #0]
90009bfc:	69ba      	ldr	r2, [r7, #24]
90009bfe:	0151      	lsls	r1, r2, #5
90009c00:	69fa      	ldr	r2, [r7, #28]
90009c02:	440a      	add	r2, r1
90009c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009c0c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009c0e:	687b      	ldr	r3, [r7, #4]
90009c10:	689b      	ldr	r3, [r3, #8]
90009c12:	f003 0320 	and.w	r3, r3, #32
90009c16:	2b00      	cmp	r3, #0
90009c18:	f040 80ab 	bne.w	90009d72 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90009c1c:	687b      	ldr	r3, [r7, #4]
90009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90009c24:	2b00      	cmp	r3, #0
90009c26:	d133      	bne.n	90009c90 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009c28:	69bb      	ldr	r3, [r7, #24]
90009c2a:	015a      	lsls	r2, r3, #5
90009c2c:	69fb      	ldr	r3, [r7, #28]
90009c2e:	4413      	add	r3, r2
90009c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c34:	681b      	ldr	r3, [r3, #0]
90009c36:	69ba      	ldr	r2, [r7, #24]
90009c38:	0151      	lsls	r1, r2, #5
90009c3a:	69fa      	ldr	r2, [r7, #28]
90009c3c:	440a      	add	r2, r1
90009c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009c46:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009c48:	69bb      	ldr	r3, [r7, #24]
90009c4a:	015a      	lsls	r2, r3, #5
90009c4c:	69fb      	ldr	r3, [r7, #28]
90009c4e:	4413      	add	r3, r2
90009c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c54:	681b      	ldr	r3, [r3, #0]
90009c56:	69ba      	ldr	r2, [r7, #24]
90009c58:	0151      	lsls	r1, r2, #5
90009c5a:	69fa      	ldr	r2, [r7, #28]
90009c5c:	440a      	add	r2, r1
90009c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009c66:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
90009c68:	68fb      	ldr	r3, [r7, #12]
90009c6a:	3301      	adds	r3, #1
90009c6c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
90009c6e:	68fb      	ldr	r3, [r7, #12]
90009c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009c74:	d81d      	bhi.n	90009cb2 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009c76:	69bb      	ldr	r3, [r7, #24]
90009c78:	015a      	lsls	r2, r3, #5
90009c7a:	69fb      	ldr	r3, [r7, #28]
90009c7c:	4413      	add	r3, r2
90009c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c82:	681b      	ldr	r3, [r3, #0]
90009c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009c8c:	d0ec      	beq.n	90009c68 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009c8e:	e070      	b.n	90009d72 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009c90:	69bb      	ldr	r3, [r7, #24]
90009c92:	015a      	lsls	r2, r3, #5
90009c94:	69fb      	ldr	r3, [r7, #28]
90009c96:	4413      	add	r3, r2
90009c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c9c:	681b      	ldr	r3, [r3, #0]
90009c9e:	69ba      	ldr	r2, [r7, #24]
90009ca0:	0151      	lsls	r1, r2, #5
90009ca2:	69fa      	ldr	r2, [r7, #28]
90009ca4:	440a      	add	r2, r1
90009ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009cae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009cb0:	e05f      	b.n	90009d72 <USB_HC_Halt+0x1ea>
            break;
90009cb2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009cb4:	e05d      	b.n	90009d72 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009cb6:	69bb      	ldr	r3, [r7, #24]
90009cb8:	015a      	lsls	r2, r3, #5
90009cba:	69fb      	ldr	r3, [r7, #28]
90009cbc:	4413      	add	r3, r2
90009cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009cc2:	681b      	ldr	r3, [r3, #0]
90009cc4:	69ba      	ldr	r2, [r7, #24]
90009cc6:	0151      	lsls	r1, r2, #5
90009cc8:	69fa      	ldr	r2, [r7, #28]
90009cca:	440a      	add	r2, r1
90009ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009cd4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90009cd6:	69fb      	ldr	r3, [r7, #28]
90009cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009cdc:	691b      	ldr	r3, [r3, #16]
90009cde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90009ce2:	2b00      	cmp	r3, #0
90009ce4:	d133      	bne.n	90009d4e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009ce6:	69bb      	ldr	r3, [r7, #24]
90009ce8:	015a      	lsls	r2, r3, #5
90009cea:	69fb      	ldr	r3, [r7, #28]
90009cec:	4413      	add	r3, r2
90009cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009cf2:	681b      	ldr	r3, [r3, #0]
90009cf4:	69ba      	ldr	r2, [r7, #24]
90009cf6:	0151      	lsls	r1, r2, #5
90009cf8:	69fa      	ldr	r2, [r7, #28]
90009cfa:	440a      	add	r2, r1
90009cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009d04:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009d06:	69bb      	ldr	r3, [r7, #24]
90009d08:	015a      	lsls	r2, r3, #5
90009d0a:	69fb      	ldr	r3, [r7, #28]
90009d0c:	4413      	add	r3, r2
90009d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d12:	681b      	ldr	r3, [r3, #0]
90009d14:	69ba      	ldr	r2, [r7, #24]
90009d16:	0151      	lsls	r1, r2, #5
90009d18:	69fa      	ldr	r2, [r7, #28]
90009d1a:	440a      	add	r2, r1
90009d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009d24:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
90009d26:	68fb      	ldr	r3, [r7, #12]
90009d28:	3301      	adds	r3, #1
90009d2a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
90009d2c:	68fb      	ldr	r3, [r7, #12]
90009d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009d32:	d81d      	bhi.n	90009d70 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009d34:	69bb      	ldr	r3, [r7, #24]
90009d36:	015a      	lsls	r2, r3, #5
90009d38:	69fb      	ldr	r3, [r7, #28]
90009d3a:	4413      	add	r3, r2
90009d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d40:	681b      	ldr	r3, [r3, #0]
90009d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009d4a:	d0ec      	beq.n	90009d26 <USB_HC_Halt+0x19e>
90009d4c:	e011      	b.n	90009d72 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009d4e:	69bb      	ldr	r3, [r7, #24]
90009d50:	015a      	lsls	r2, r3, #5
90009d52:	69fb      	ldr	r3, [r7, #28]
90009d54:	4413      	add	r3, r2
90009d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d5a:	681b      	ldr	r3, [r3, #0]
90009d5c:	69ba      	ldr	r2, [r7, #24]
90009d5e:	0151      	lsls	r1, r2, #5
90009d60:	69fa      	ldr	r2, [r7, #28]
90009d62:	440a      	add	r2, r1
90009d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009d6c:	6013      	str	r3, [r2, #0]
90009d6e:	e000      	b.n	90009d72 <USB_HC_Halt+0x1ea>
          break;
90009d70:	bf00      	nop
    }
  }

  return HAL_OK;
90009d72:	2300      	movs	r3, #0
}
90009d74:	4618      	mov	r0, r3
90009d76:	3724      	adds	r7, #36	; 0x24
90009d78:	46bd      	mov	sp, r7
90009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d7e:	4770      	bx	lr

90009d80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
90009d80:	b580      	push	{r7, lr}
90009d82:	b088      	sub	sp, #32
90009d84:	af00      	add	r7, sp, #0
90009d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
90009d88:	2300      	movs	r3, #0
90009d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009d8c:	687b      	ldr	r3, [r7, #4]
90009d8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
90009d90:	2300      	movs	r3, #0
90009d92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
90009d94:	6878      	ldr	r0, [r7, #4]
90009d96:	f7ff fd9a 	bl	900098ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
90009d9a:	2110      	movs	r1, #16
90009d9c:	6878      	ldr	r0, [r7, #4]
90009d9e:	f7ff fda7 	bl	900098f0 <USB_FlushTxFifo>
90009da2:	4603      	mov	r3, r0
90009da4:	2b00      	cmp	r3, #0
90009da6:	d001      	beq.n	90009dac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
90009da8:	2301      	movs	r3, #1
90009daa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
90009dac:	6878      	ldr	r0, [r7, #4]
90009dae:	f7ff fdd3 	bl	90009958 <USB_FlushRxFifo>
90009db2:	4603      	mov	r3, r0
90009db4:	2b00      	cmp	r3, #0
90009db6:	d001      	beq.n	90009dbc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
90009db8:	2301      	movs	r3, #1
90009dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90009dbc:	2300      	movs	r3, #0
90009dbe:	61bb      	str	r3, [r7, #24]
90009dc0:	e01f      	b.n	90009e02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
90009dc2:	69bb      	ldr	r3, [r7, #24]
90009dc4:	015a      	lsls	r2, r3, #5
90009dc6:	697b      	ldr	r3, [r7, #20]
90009dc8:	4413      	add	r3, r2
90009dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009dce:	681b      	ldr	r3, [r3, #0]
90009dd0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
90009dd2:	693b      	ldr	r3, [r7, #16]
90009dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009dd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
90009dda:	693b      	ldr	r3, [r7, #16]
90009ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009de0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
90009de2:	693b      	ldr	r3, [r7, #16]
90009de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90009de8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
90009dea:	69bb      	ldr	r3, [r7, #24]
90009dec:	015a      	lsls	r2, r3, #5
90009dee:	697b      	ldr	r3, [r7, #20]
90009df0:	4413      	add	r3, r2
90009df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009df6:	461a      	mov	r2, r3
90009df8:	693b      	ldr	r3, [r7, #16]
90009dfa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
90009dfc:	69bb      	ldr	r3, [r7, #24]
90009dfe:	3301      	adds	r3, #1
90009e00:	61bb      	str	r3, [r7, #24]
90009e02:	69bb      	ldr	r3, [r7, #24]
90009e04:	2b0f      	cmp	r3, #15
90009e06:	d9dc      	bls.n	90009dc2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
90009e08:	2300      	movs	r3, #0
90009e0a:	61bb      	str	r3, [r7, #24]
90009e0c:	e034      	b.n	90009e78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
90009e0e:	69bb      	ldr	r3, [r7, #24]
90009e10:	015a      	lsls	r2, r3, #5
90009e12:	697b      	ldr	r3, [r7, #20]
90009e14:	4413      	add	r3, r2
90009e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e1a:	681b      	ldr	r3, [r3, #0]
90009e1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
90009e1e:	693b      	ldr	r3, [r7, #16]
90009e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009e24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
90009e26:	693b      	ldr	r3, [r7, #16]
90009e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009e2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
90009e2e:	693b      	ldr	r3, [r7, #16]
90009e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90009e34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
90009e36:	69bb      	ldr	r3, [r7, #24]
90009e38:	015a      	lsls	r2, r3, #5
90009e3a:	697b      	ldr	r3, [r7, #20]
90009e3c:	4413      	add	r3, r2
90009e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e42:	461a      	mov	r2, r3
90009e44:	693b      	ldr	r3, [r7, #16]
90009e46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
90009e48:	68fb      	ldr	r3, [r7, #12]
90009e4a:	3301      	adds	r3, #1
90009e4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
90009e4e:	68fb      	ldr	r3, [r7, #12]
90009e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009e54:	d80c      	bhi.n	90009e70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009e56:	69bb      	ldr	r3, [r7, #24]
90009e58:	015a      	lsls	r2, r3, #5
90009e5a:	697b      	ldr	r3, [r7, #20]
90009e5c:	4413      	add	r3, r2
90009e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e62:	681b      	ldr	r3, [r3, #0]
90009e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009e6c:	d0ec      	beq.n	90009e48 <USB_StopHost+0xc8>
90009e6e:	e000      	b.n	90009e72 <USB_StopHost+0xf2>
        break;
90009e70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
90009e72:	69bb      	ldr	r3, [r7, #24]
90009e74:	3301      	adds	r3, #1
90009e76:	61bb      	str	r3, [r7, #24]
90009e78:	69bb      	ldr	r3, [r7, #24]
90009e7a:	2b0f      	cmp	r3, #15
90009e7c:	d9c7      	bls.n	90009e0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
90009e7e:	697b      	ldr	r3, [r7, #20]
90009e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009e84:	461a      	mov	r2, r3
90009e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90009e8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
90009e8c:	687b      	ldr	r3, [r7, #4]
90009e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90009e92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
90009e94:	6878      	ldr	r0, [r7, #4]
90009e96:	f7ff fd09 	bl	900098ac <USB_EnableGlobalInt>

  return ret;
90009e9a:	7ffb      	ldrb	r3, [r7, #31]
}
90009e9c:	4618      	mov	r0, r3
90009e9e:	3720      	adds	r7, #32
90009ea0:	46bd      	mov	sp, r7
90009ea2:	bd80      	pop	{r7, pc}

90009ea4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
90009ea4:	b580      	push	{r7, lr}
90009ea6:	b082      	sub	sp, #8
90009ea8:	af00      	add	r7, sp, #0
90009eaa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
90009eac:	687b      	ldr	r3, [r7, #4]
90009eae:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
90009eb2:	1c5a      	adds	r2, r3, #1
90009eb4:	687b      	ldr	r3, [r7, #4]
90009eb6:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  USBH_HandleSof(phost);
90009eba:	6878      	ldr	r0, [r7, #4]
90009ebc:	f000 f804 	bl	90009ec8 <USBH_HandleSof>
}
90009ec0:	bf00      	nop
90009ec2:	3708      	adds	r7, #8
90009ec4:	46bd      	mov	sp, r7
90009ec6:	bd80      	pop	{r7, pc}

90009ec8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
90009ec8:	b580      	push	{r7, lr}
90009eca:	b082      	sub	sp, #8
90009ecc:	af00      	add	r7, sp, #0
90009ece:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
90009ed0:	687b      	ldr	r3, [r7, #4]
90009ed2:	781b      	ldrb	r3, [r3, #0]
90009ed4:	b2db      	uxtb	r3, r3
90009ed6:	2b0b      	cmp	r3, #11
90009ed8:	d10a      	bne.n	90009ef0 <USBH_HandleSof+0x28>
90009eda:	687b      	ldr	r3, [r7, #4]
90009edc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
90009ee0:	2b00      	cmp	r3, #0
90009ee2:	d005      	beq.n	90009ef0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
90009ee4:	687b      	ldr	r3, [r7, #4]
90009ee6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
90009eea:	699b      	ldr	r3, [r3, #24]
90009eec:	6878      	ldr	r0, [r7, #4]
90009eee:	4798      	blx	r3
  }
}
90009ef0:	bf00      	nop
90009ef2:	3708      	adds	r7, #8
90009ef4:	46bd      	mov	sp, r7
90009ef6:	bd80      	pop	{r7, pc}

90009ef8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
90009ef8:	b480      	push	{r7}
90009efa:	b083      	sub	sp, #12
90009efc:	af00      	add	r7, sp, #0
90009efe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
90009f00:	687b      	ldr	r3, [r7, #4]
90009f02:	2201      	movs	r2, #1
90009f04:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
90009f08:	bf00      	nop
}
90009f0a:	370c      	adds	r7, #12
90009f0c:	46bd      	mov	sp, r7
90009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f12:	4770      	bx	lr

90009f14 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
90009f14:	b480      	push	{r7}
90009f16:	b083      	sub	sp, #12
90009f18:	af00      	add	r7, sp, #0
90009f1a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
90009f1c:	687b      	ldr	r3, [r7, #4]
90009f1e:	2200      	movs	r2, #0
90009f20:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
90009f24:	bf00      	nop
}
90009f26:	370c      	adds	r7, #12
90009f28:	46bd      	mov	sp, r7
90009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f2e:	4770      	bx	lr

90009f30 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
90009f30:	b480      	push	{r7}
90009f32:	b083      	sub	sp, #12
90009f34:	af00      	add	r7, sp, #0
90009f36:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
90009f38:	687b      	ldr	r3, [r7, #4]
90009f3a:	2201      	movs	r2, #1
90009f3c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
90009f40:	687b      	ldr	r3, [r7, #4]
90009f42:	2200      	movs	r2, #0
90009f44:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90009f48:	687b      	ldr	r3, [r7, #4]
90009f4a:	2200      	movs	r2, #0
90009f4c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
90009f50:	2300      	movs	r3, #0
}
90009f52:	4618      	mov	r0, r3
90009f54:	370c      	adds	r7, #12
90009f56:	46bd      	mov	sp, r7
90009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f5c:	4770      	bx	lr

90009f5e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
90009f5e:	b580      	push	{r7, lr}
90009f60:	b082      	sub	sp, #8
90009f62:	af00      	add	r7, sp, #0
90009f64:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
90009f66:	687b      	ldr	r3, [r7, #4]
90009f68:	2201      	movs	r2, #1
90009f6a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
90009f6e:	687b      	ldr	r3, [r7, #4]
90009f70:	2200      	movs	r2, #0
90009f72:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
90009f76:	687b      	ldr	r3, [r7, #4]
90009f78:	2200      	movs	r2, #0
90009f7a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
90009f7e:	6878      	ldr	r0, [r7, #4]
90009f80:	f7f6 fd8c 	bl	90000a9c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90009f84:	687b      	ldr	r3, [r7, #4]
90009f86:	791b      	ldrb	r3, [r3, #4]
90009f88:	4619      	mov	r1, r3
90009f8a:	6878      	ldr	r0, [r7, #4]
90009f8c:	f000 f80b 	bl	90009fa6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90009f90:	687b      	ldr	r3, [r7, #4]
90009f92:	795b      	ldrb	r3, [r3, #5]
90009f94:	4619      	mov	r1, r3
90009f96:	6878      	ldr	r0, [r7, #4]
90009f98:	f000 f805 	bl	90009fa6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
90009f9c:	2300      	movs	r3, #0
}
90009f9e:	4618      	mov	r0, r3
90009fa0:	3708      	adds	r7, #8
90009fa2:	46bd      	mov	sp, r7
90009fa4:	bd80      	pop	{r7, pc}

90009fa6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
90009fa6:	b480      	push	{r7}
90009fa8:	b083      	sub	sp, #12
90009faa:	af00      	add	r7, sp, #0
90009fac:	6078      	str	r0, [r7, #4]
90009fae:	460b      	mov	r3, r1
90009fb0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
90009fb2:	78fb      	ldrb	r3, [r7, #3]
90009fb4:	2b0f      	cmp	r3, #15
90009fb6:	d80f      	bhi.n	90009fd8 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
90009fb8:	78fb      	ldrb	r3, [r7, #3]
90009fba:	687a      	ldr	r2, [r7, #4]
90009fbc:	f503 7390 	add.w	r3, r3, #288	; 0x120
90009fc0:	009b      	lsls	r3, r3, #2
90009fc2:	4413      	add	r3, r2
90009fc4:	685a      	ldr	r2, [r3, #4]
90009fc6:	78fb      	ldrb	r3, [r7, #3]
90009fc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
90009fcc:	6879      	ldr	r1, [r7, #4]
90009fce:	f503 7390 	add.w	r3, r3, #288	; 0x120
90009fd2:	009b      	lsls	r3, r3, #2
90009fd4:	440b      	add	r3, r1
90009fd6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
90009fd8:	2300      	movs	r3, #0
}
90009fda:	4618      	mov	r0, r3
90009fdc:	370c      	adds	r7, #12
90009fde:	46bd      	mov	sp, r7
90009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
90009fe4:	4770      	bx	lr
	...

90009fe8 <sweeperMain>:
 * @brief  Main function sets up and runs gaim
 * @param  None
 * @retval None
 */
void sweeperMain()
{
90009fe8:	b580      	push	{r7, lr}
90009fea:	b088      	sub	sp, #32
90009fec:	af00      	add	r7, sp, #0
  Game_State = 1;
90009fee:	4b84      	ldr	r3, [pc, #528]	; (9000a200 <sweeperMain+0x218>)
90009ff0:	2201      	movs	r2, #1
90009ff2:	701a      	strb	r2, [r3, #0]
  flag = 0;
90009ff4:	4b83      	ldr	r3, [pc, #524]	; (9000a204 <sweeperMain+0x21c>)
90009ff6:	2200      	movs	r2, #0
90009ff8:	701a      	strb	r2, [r3, #0]
  Tiles_open = 253;
90009ffa:	4b83      	ldr	r3, [pc, #524]	; (9000a208 <sweeperMain+0x220>)
90009ffc:	22fd      	movs	r2, #253	; 0xfd
90009ffe:	801a      	strh	r2, [r3, #0]
  Tiles_open = Tiles_open - Mine_Num + 1;
9000a000:	4b81      	ldr	r3, [pc, #516]	; (9000a208 <sweeperMain+0x220>)
9000a002:	881a      	ldrh	r2, [r3, #0]
9000a004:	4b81      	ldr	r3, [pc, #516]	; (9000a20c <sweeperMain+0x224>)
9000a006:	881b      	ldrh	r3, [r3, #0]
9000a008:	1ad3      	subs	r3, r2, r3
9000a00a:	b29b      	uxth	r3, r3
9000a00c:	3301      	adds	r3, #1
9000a00e:	b29a      	uxth	r2, r3
9000a010:	4b7d      	ldr	r3, [pc, #500]	; (9000a208 <sweeperMain+0x220>)
9000a012:	801a      	strh	r2, [r3, #0]
  Counter_Mine = Mine_Num;
9000a014:	4b7d      	ldr	r3, [pc, #500]	; (9000a20c <sweeperMain+0x224>)
9000a016:	881b      	ldrh	r3, [r3, #0]
9000a018:	461a      	mov	r2, r3
9000a01a:	4b7d      	ldr	r3, [pc, #500]	; (9000a210 <sweeperMain+0x228>)
9000a01c:	601a      	str	r2, [r3, #0]

  BSP_LCD_GetXSize(0, &x_size);
9000a01e:	497d      	ldr	r1, [pc, #500]	; (9000a214 <sweeperMain+0x22c>)
9000a020:	2000      	movs	r0, #0
9000a022:	f7f8 f825 	bl	90002070 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
9000a026:	497c      	ldr	r1, [pc, #496]	; (9000a218 <sweeperMain+0x230>)
9000a028:	2000      	movs	r0, #0
9000a02a:	f7f8 f83f 	bl	900020ac <BSP_LCD_GetYSize>
  /*##-6- Draw the menu ######################################################*/
  Draw_Menu();
9000a02e:	f000 f90b 	bl	9000a248 <Draw_Menu>

  // define time for random

  Time_playinf = HAL_GetTick();
9000a032:	f7f9 f9d1 	bl	900033d8 <HAL_GetTick>
9000a036:	4603      	mov	r3, r0
9000a038:	461a      	mov	r2, r3
9000a03a:	4b78      	ldr	r3, [pc, #480]	; (9000a21c <sweeperMain+0x234>)
9000a03c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 23; i++)
9000a03e:	2300      	movs	r3, #0
9000a040:	61fb      	str	r3, [r7, #28]
9000a042:	e017      	b.n	9000a074 <sweeperMain+0x8c>
  {
    for (int j = 0; j < 11; j++)
9000a044:	2300      	movs	r3, #0
9000a046:	61bb      	str	r3, [r7, #24]
9000a048:	e00e      	b.n	9000a068 <sweeperMain+0x80>
    {
      tab[i][j] = 0;
9000a04a:	4975      	ldr	r1, [pc, #468]	; (9000a220 <sweeperMain+0x238>)
9000a04c:	69fa      	ldr	r2, [r7, #28]
9000a04e:	4613      	mov	r3, r2
9000a050:	009b      	lsls	r3, r3, #2
9000a052:	4413      	add	r3, r2
9000a054:	005b      	lsls	r3, r3, #1
9000a056:	4413      	add	r3, r2
9000a058:	18ca      	adds	r2, r1, r3
9000a05a:	69bb      	ldr	r3, [r7, #24]
9000a05c:	4413      	add	r3, r2
9000a05e:	2200      	movs	r2, #0
9000a060:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 11; j++)
9000a062:	69bb      	ldr	r3, [r7, #24]
9000a064:	3301      	adds	r3, #1
9000a066:	61bb      	str	r3, [r7, #24]
9000a068:	69bb      	ldr	r3, [r7, #24]
9000a06a:	2b0a      	cmp	r3, #10
9000a06c:	dded      	ble.n	9000a04a <sweeperMain+0x62>
  for (int i = 0; i < 23; i++)
9000a06e:	69fb      	ldr	r3, [r7, #28]
9000a070:	3301      	adds	r3, #1
9000a072:	61fb      	str	r3, [r7, #28]
9000a074:	69fb      	ldr	r3, [r7, #28]
9000a076:	2b16      	cmp	r3, #22
9000a078:	dde4      	ble.n	9000a044 <sweeperMain+0x5c>
    }
  }

  int num_mine = Mine_Num;
9000a07a:	4b64      	ldr	r3, [pc, #400]	; (9000a20c <sweeperMain+0x224>)
9000a07c:	881b      	ldrh	r3, [r3, #0]
9000a07e:	617b      	str	r3, [r7, #20]
  while (num_mine != 0)
9000a080:	e03d      	b.n	9000a0fe <sweeperMain+0x116>
  {
    int j = rand() % 11;
9000a082:	f002 ffef 	bl	9000d064 <rand>
9000a086:	4602      	mov	r2, r0
9000a088:	4b66      	ldr	r3, [pc, #408]	; (9000a224 <sweeperMain+0x23c>)
9000a08a:	fb83 1302 	smull	r1, r3, r3, r2
9000a08e:	1059      	asrs	r1, r3, #1
9000a090:	17d3      	asrs	r3, r2, #31
9000a092:	1ac9      	subs	r1, r1, r3
9000a094:	460b      	mov	r3, r1
9000a096:	009b      	lsls	r3, r3, #2
9000a098:	440b      	add	r3, r1
9000a09a:	005b      	lsls	r3, r3, #1
9000a09c:	440b      	add	r3, r1
9000a09e:	1ad3      	subs	r3, r2, r3
9000a0a0:	60fb      	str	r3, [r7, #12]
    int i = rand() % 23;
9000a0a2:	f002 ffdf 	bl	9000d064 <rand>
9000a0a6:	4602      	mov	r2, r0
9000a0a8:	4b5f      	ldr	r3, [pc, #380]	; (9000a228 <sweeperMain+0x240>)
9000a0aa:	fb83 1302 	smull	r1, r3, r3, r2
9000a0ae:	4413      	add	r3, r2
9000a0b0:	1119      	asrs	r1, r3, #4
9000a0b2:	17d3      	asrs	r3, r2, #31
9000a0b4:	1ac9      	subs	r1, r1, r3
9000a0b6:	460b      	mov	r3, r1
9000a0b8:	005b      	lsls	r3, r3, #1
9000a0ba:	440b      	add	r3, r1
9000a0bc:	00db      	lsls	r3, r3, #3
9000a0be:	1a5b      	subs	r3, r3, r1
9000a0c0:	1ad3      	subs	r3, r2, r3
9000a0c2:	60bb      	str	r3, [r7, #8]
    if (tab[i][j] == 0)
9000a0c4:	4956      	ldr	r1, [pc, #344]	; (9000a220 <sweeperMain+0x238>)
9000a0c6:	68ba      	ldr	r2, [r7, #8]
9000a0c8:	4613      	mov	r3, r2
9000a0ca:	009b      	lsls	r3, r3, #2
9000a0cc:	4413      	add	r3, r2
9000a0ce:	005b      	lsls	r3, r3, #1
9000a0d0:	4413      	add	r3, r2
9000a0d2:	18ca      	adds	r2, r1, r3
9000a0d4:	68fb      	ldr	r3, [r7, #12]
9000a0d6:	4413      	add	r3, r2
9000a0d8:	f993 3000 	ldrsb.w	r3, [r3]
9000a0dc:	2b00      	cmp	r3, #0
9000a0de:	d10e      	bne.n	9000a0fe <sweeperMain+0x116>
    {
      num_mine--;
9000a0e0:	697b      	ldr	r3, [r7, #20]
9000a0e2:	3b01      	subs	r3, #1
9000a0e4:	617b      	str	r3, [r7, #20]
      tab[i][j] = -1;
9000a0e6:	494e      	ldr	r1, [pc, #312]	; (9000a220 <sweeperMain+0x238>)
9000a0e8:	68ba      	ldr	r2, [r7, #8]
9000a0ea:	4613      	mov	r3, r2
9000a0ec:	009b      	lsls	r3, r3, #2
9000a0ee:	4413      	add	r3, r2
9000a0f0:	005b      	lsls	r3, r3, #1
9000a0f2:	4413      	add	r3, r2
9000a0f4:	18ca      	adds	r2, r1, r3
9000a0f6:	68fb      	ldr	r3, [r7, #12]
9000a0f8:	4413      	add	r3, r2
9000a0fa:	22ff      	movs	r2, #255	; 0xff
9000a0fc:	701a      	strb	r2, [r3, #0]
  while (num_mine != 0)
9000a0fe:	697b      	ldr	r3, [r7, #20]
9000a100:	2b00      	cmp	r3, #0
9000a102:	d1be      	bne.n	9000a082 <sweeperMain+0x9a>
    }
  }

  Set_Numbers();
9000a104:	f000 fa8c 	bl	9000a620 <Set_Numbers>

  while (1)
  {

    if (Game_State == 4)
9000a108:	4b3d      	ldr	r3, [pc, #244]	; (9000a200 <sweeperMain+0x218>)
9000a10a:	f993 3000 	ldrsb.w	r3, [r3]
9000a10e:	2b04      	cmp	r3, #4
9000a110:	d102      	bne.n	9000a118 <sweeperMain+0x130>
    {
      Victory_Screen();
9000a112:	f001 feb3 	bl	9000be7c <Victory_Screen>
9000a116:	e7f7      	b.n	9000a108 <sweeperMain+0x120>
    }
    else if (Game_State == 2)
9000a118:	4b39      	ldr	r3, [pc, #228]	; (9000a200 <sweeperMain+0x218>)
9000a11a:	f993 3000 	ldrsb.w	r3, [r3]
9000a11e:	2b02      	cmp	r3, #2
9000a120:	d102      	bne.n	9000a128 <sweeperMain+0x140>
      Mine_Selection_Position();
9000a122:	f001 fcef 	bl	9000bb04 <Mine_Selection_Position>
9000a126:	e7ef      	b.n	9000a108 <sweeperMain+0x120>
    else if (Game_State == 1)
9000a128:	4b35      	ldr	r3, [pc, #212]	; (9000a200 <sweeperMain+0x218>)
9000a12a:	f993 3000 	ldrsb.w	r3, [r3]
9000a12e:	2b01      	cmp	r3, #1
9000a130:	d134      	bne.n	9000a19c <sweeperMain+0x1b4>
    {
      if (Tiles_open < 1)
9000a132:	4b35      	ldr	r3, [pc, #212]	; (9000a208 <sweeperMain+0x220>)
9000a134:	881b      	ldrh	r3, [r3, #0]
9000a136:	2b00      	cmp	r3, #0
9000a138:	d102      	bne.n	9000a140 <sweeperMain+0x158>
        Game_State = 4;
9000a13a:	4b31      	ldr	r3, [pc, #196]	; (9000a200 <sweeperMain+0x218>)
9000a13c:	2204      	movs	r2, #4
9000a13e:	701a      	strb	r2, [r3, #0]
      if ((HAL_GetTick() - Time_playinf) > 1000)
9000a140:	f7f9 f94a 	bl	900033d8 <HAL_GetTick>
9000a144:	4603      	mov	r3, r0
9000a146:	4a35      	ldr	r2, [pc, #212]	; (9000a21c <sweeperMain+0x234>)
9000a148:	6812      	ldr	r2, [r2, #0]
9000a14a:	1a9b      	subs	r3, r3, r2
9000a14c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
9000a150:	d921      	bls.n	9000a196 <sweeperMain+0x1ae>
      {
        int sekind = (HAL_GetTick() - Time_playinf) / 1000;
9000a152:	f7f9 f941 	bl	900033d8 <HAL_GetTick>
9000a156:	4603      	mov	r3, r0
9000a158:	4a30      	ldr	r2, [pc, #192]	; (9000a21c <sweeperMain+0x234>)
9000a15a:	6812      	ldr	r2, [r2, #0]
9000a15c:	1a9b      	subs	r3, r3, r2
9000a15e:	4a33      	ldr	r2, [pc, #204]	; (9000a22c <sweeperMain+0x244>)
9000a160:	fba2 2303 	umull	r2, r3, r2, r3
9000a164:	099b      	lsrs	r3, r3, #6
9000a166:	613b      	str	r3, [r7, #16]
        UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000a168:	4831      	ldr	r0, [pc, #196]	; (9000a230 <sweeperMain+0x248>)
9000a16a:	f002 f899 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
        UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
9000a16e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000a172:	f002 f8a9 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
        UTIL_LCD_SetFont(&Font16);
9000a176:	482f      	ldr	r0, [pc, #188]	; (9000a234 <sweeperMain+0x24c>)
9000a178:	f002 f8ba 	bl	9000c2f0 <UTIL_LCD_SetFont>
        char st[3];
        sprintf(st, "%3d", sekind);
9000a17c:	1d3b      	adds	r3, r7, #4
9000a17e:	693a      	ldr	r2, [r7, #16]
9000a180:	492d      	ldr	r1, [pc, #180]	; (9000a238 <sweeperMain+0x250>)
9000a182:	4618      	mov	r0, r3
9000a184:	f002 ffbc 	bl	9000d100 <siprintf>
        UTIL_LCD_DisplayStringAt(420, 15, (uint8_t *)st, LEFT_MODE);
9000a188:	1d3a      	adds	r2, r7, #4
9000a18a:	2303      	movs	r3, #3
9000a18c:	210f      	movs	r1, #15
9000a18e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
9000a192:	f002 f9d9 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
      }
      GetPosition();
9000a196:	f000 fe95 	bl	9000aec4 <GetPosition>
9000a19a:	e7b5      	b.n	9000a108 <sweeperMain+0x120>
    }
    else if (Game_State == 0)
9000a19c:	4b18      	ldr	r3, [pc, #96]	; (9000a200 <sweeperMain+0x218>)
9000a19e:	f993 3000 	ldrsb.w	r3, [r3]
9000a1a2:	2b00      	cmp	r3, #0
9000a1a4:	d120      	bne.n	9000a1e8 <sweeperMain+0x200>
    {
      BSP_TS_GetState(0, &TS_State);
9000a1a6:	4925      	ldr	r1, [pc, #148]	; (9000a23c <sweeperMain+0x254>)
9000a1a8:	2000      	movs	r0, #0
9000a1aa:	f7f8 fead 	bl	90002f08 <BSP_TS_GetState>
      x = TS_State.TouchX;
9000a1ae:	4b23      	ldr	r3, [pc, #140]	; (9000a23c <sweeperMain+0x254>)
9000a1b0:	685b      	ldr	r3, [r3, #4]
9000a1b2:	b29a      	uxth	r2, r3
9000a1b4:	4b22      	ldr	r3, [pc, #136]	; (9000a240 <sweeperMain+0x258>)
9000a1b6:	801a      	strh	r2, [r3, #0]
      y = TS_State.TouchY;
9000a1b8:	4b20      	ldr	r3, [pc, #128]	; (9000a23c <sweeperMain+0x254>)
9000a1ba:	689b      	ldr	r3, [r3, #8]
9000a1bc:	b29a      	uxth	r2, r3
9000a1be:	4b21      	ldr	r3, [pc, #132]	; (9000a244 <sweeperMain+0x25c>)
9000a1c0:	801a      	strh	r2, [r3, #0]
      if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
9000a1c2:	4b1f      	ldr	r3, [pc, #124]	; (9000a240 <sweeperMain+0x258>)
9000a1c4:	881b      	ldrh	r3, [r3, #0]
9000a1c6:	2bdc      	cmp	r3, #220	; 0xdc
9000a1c8:	d99e      	bls.n	9000a108 <sweeperMain+0x120>
9000a1ca:	4b1d      	ldr	r3, [pc, #116]	; (9000a240 <sweeperMain+0x258>)
9000a1cc:	881b      	ldrh	r3, [r3, #0]
9000a1ce:	2bfe      	cmp	r3, #254	; 0xfe
9000a1d0:	d89a      	bhi.n	9000a108 <sweeperMain+0x120>
9000a1d2:	4b1c      	ldr	r3, [pc, #112]	; (9000a244 <sweeperMain+0x25c>)
9000a1d4:	881b      	ldrh	r3, [r3, #0]
9000a1d6:	2b07      	cmp	r3, #7
9000a1d8:	d996      	bls.n	9000a108 <sweeperMain+0x120>
9000a1da:	4b1a      	ldr	r3, [pc, #104]	; (9000a244 <sweeperMain+0x25c>)
9000a1dc:	881b      	ldrh	r3, [r3, #0]
9000a1de:	2b20      	cmp	r3, #32
9000a1e0:	d892      	bhi.n	9000a108 <sweeperMain+0x120>
      {
        Reset_Game();
9000a1e2:	f001 fe3f 	bl	9000be64 <Reset_Game>
9000a1e6:	e78f      	b.n	9000a108 <sweeperMain+0x120>
      }
    }
    else if (Game_State == -1)
9000a1e8:	4b05      	ldr	r3, [pc, #20]	; (9000a200 <sweeperMain+0x218>)
9000a1ea:	f993 3000 	ldrsb.w	r3, [r3]
9000a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a1f2:	d000      	beq.n	9000a1f6 <sweeperMain+0x20e>
    if (Game_State == 4)
9000a1f4:	e788      	b.n	9000a108 <sweeperMain+0x120>
    {
      break;
9000a1f6:	bf00      	nop
    }
  }
}
9000a1f8:	bf00      	nop
9000a1fa:	3720      	adds	r7, #32
9000a1fc:	46bd      	mov	sp, r7
9000a1fe:	bd80      	pop	{r7, pc}
9000a200:	2000004c 	.word	0x2000004c
9000a204:	200012c9 	.word	0x200012c9
9000a208:	2000004e 	.word	0x2000004e
9000a20c:	20000046 	.word	0x20000046
9000a210:	20000048 	.word	0x20000048
9000a214:	200012d4 	.word	0x200012d4
9000a218:	200012d8 	.word	0x200012d8
9000a21c:	200012e0 	.word	0x200012e0
9000a220:	200011cc 	.word	0x200011cc
9000a224:	2e8ba2e9 	.word	0x2e8ba2e9
9000a228:	b21642c9 	.word	0xb21642c9
9000a22c:	10624dd3 	.word	0x10624dd3
9000a230:	ffff0000 	.word	0xffff0000
9000a234:	20000058 	.word	0x20000058
9000a238:	9000e320 	.word	0x9000e320
9000a23c:	200012e4 	.word	0x200012e4
9000a240:	200012ca 	.word	0x200012ca
9000a244:	200012cc 	.word	0x200012cc

9000a248 <Draw_Menu>:
 * @brief  Draws the menu.
 * @param  None
 * @retval None
 */
static void Draw_Menu(void)
{
9000a248:	b580      	push	{r7, lr}
9000a24a:	b084      	sub	sp, #16
9000a24c:	af02      	add	r7, sp, #8
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
9000a24e:	2000      	movs	r0, #0
9000a250:	f002 f808 	bl	9000c264 <UTIL_LCD_SetLayer>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a254:	4898      	ldr	r0, [pc, #608]	; (9000a4b8 <Draw_Menu+0x270>)
9000a256:	f002 f92b 	bl	9000c4b0 <UTIL_LCD_Clear>

  // border around screen
  UTIL_LCD_DrawRect(0, 0, x_size - 2, 2, UTIL_LCD_COLOR_WHITE);
9000a25a:	4b98      	ldr	r3, [pc, #608]	; (9000a4bc <Draw_Menu+0x274>)
9000a25c:	681b      	ldr	r3, [r3, #0]
9000a25e:	1e9a      	subs	r2, r3, #2
9000a260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a264:	9300      	str	r3, [sp, #0]
9000a266:	2302      	movs	r3, #2
9000a268:	2100      	movs	r1, #0
9000a26a:	2000      	movs	r0, #0
9000a26c:	f002 fa30 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(0, 0, 2, y_size, UTIL_LCD_COLOR_WHITE);
9000a270:	4b93      	ldr	r3, [pc, #588]	; (9000a4c0 <Draw_Menu+0x278>)
9000a272:	681b      	ldr	r3, [r3, #0]
9000a274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000a278:	9200      	str	r2, [sp, #0]
9000a27a:	2202      	movs	r2, #2
9000a27c:	2100      	movs	r1, #0
9000a27e:	2000      	movs	r0, #0
9000a280:	f002 fa26 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 2, 1, 2, y_size, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a284:	4b8d      	ldr	r3, [pc, #564]	; (9000a4bc <Draw_Menu+0x274>)
9000a286:	681b      	ldr	r3, [r3, #0]
9000a288:	1e98      	subs	r0, r3, #2
9000a28a:	4b8d      	ldr	r3, [pc, #564]	; (9000a4c0 <Draw_Menu+0x278>)
9000a28c:	681b      	ldr	r3, [r3, #0]
9000a28e:	4a8d      	ldr	r2, [pc, #564]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a290:	9200      	str	r2, [sp, #0]
9000a292:	2202      	movs	r2, #2
9000a294:	2101      	movs	r1, #1
9000a296:	f002 fa1b 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(1, y_size - 2, x_size, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a29a:	4b89      	ldr	r3, [pc, #548]	; (9000a4c0 <Draw_Menu+0x278>)
9000a29c:	681b      	ldr	r3, [r3, #0]
9000a29e:	1e99      	subs	r1, r3, #2
9000a2a0:	4b86      	ldr	r3, [pc, #536]	; (9000a4bc <Draw_Menu+0x274>)
9000a2a2:	681a      	ldr	r2, [r3, #0]
9000a2a4:	4b87      	ldr	r3, [pc, #540]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a2a6:	9300      	str	r3, [sp, #0]
9000a2a8:	2302      	movs	r3, #2
9000a2aa:	2001      	movs	r0, #1
9000a2ac:	f002 fa10 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  // top section
  UTIL_LCD_DrawRect(8, 6, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a2b0:	4b82      	ldr	r3, [pc, #520]	; (9000a4bc <Draw_Menu+0x274>)
9000a2b2:	681b      	ldr	r3, [r3, #0]
9000a2b4:	f1a3 0210 	sub.w	r2, r3, #16
9000a2b8:	4b82      	ldr	r3, [pc, #520]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a2ba:	9300      	str	r3, [sp, #0]
9000a2bc:	2302      	movs	r3, #2
9000a2be:	2106      	movs	r1, #6
9000a2c0:	2008      	movs	r0, #8
9000a2c2:	f002 fa05 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 6, 2, 30, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a2c6:	4b7f      	ldr	r3, [pc, #508]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a2c8:	9300      	str	r3, [sp, #0]
9000a2ca:	231e      	movs	r3, #30
9000a2cc:	2202      	movs	r2, #2
9000a2ce:	2106      	movs	r1, #6
9000a2d0:	2008      	movs	r0, #8
9000a2d2:	f002 f9fd 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 6, 2, 30, UTIL_LCD_COLOR_WHITE);
9000a2d6:	4b79      	ldr	r3, [pc, #484]	; (9000a4bc <Draw_Menu+0x274>)
9000a2d8:	681b      	ldr	r3, [r3, #0]
9000a2da:	f1a3 000a 	sub.w	r0, r3, #10
9000a2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a2e2:	9300      	str	r3, [sp, #0]
9000a2e4:	231e      	movs	r3, #30
9000a2e6:	2202      	movs	r2, #2
9000a2e8:	2106      	movs	r1, #6
9000a2ea:	f002 f9f1 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 35, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
9000a2ee:	4b73      	ldr	r3, [pc, #460]	; (9000a4bc <Draw_Menu+0x274>)
9000a2f0:	681b      	ldr	r3, [r3, #0]
9000a2f2:	f1a3 0210 	sub.w	r2, r3, #16
9000a2f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a2fa:	9300      	str	r3, [sp, #0]
9000a2fc:	2302      	movs	r3, #2
9000a2fe:	2123      	movs	r1, #35	; 0x23
9000a300:	2008      	movs	r0, #8
9000a302:	f002 f9e5 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  // bottom section
  UTIL_LCD_DrawRect(8, 41, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a306:	4b6d      	ldr	r3, [pc, #436]	; (9000a4bc <Draw_Menu+0x274>)
9000a308:	681b      	ldr	r3, [r3, #0]
9000a30a:	f1a3 0210 	sub.w	r2, r3, #16
9000a30e:	4b6d      	ldr	r3, [pc, #436]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a310:	9300      	str	r3, [sp, #0]
9000a312:	2302      	movs	r3, #2
9000a314:	2129      	movs	r1, #41	; 0x29
9000a316:	2008      	movs	r0, #8
9000a318:	f002 f9da 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 41, 2, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a31c:	4b68      	ldr	r3, [pc, #416]	; (9000a4c0 <Draw_Menu+0x278>)
9000a31e:	681b      	ldr	r3, [r3, #0]
9000a320:	3b32      	subs	r3, #50	; 0x32
9000a322:	4a68      	ldr	r2, [pc, #416]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a324:	9200      	str	r2, [sp, #0]
9000a326:	2202      	movs	r2, #2
9000a328:	2129      	movs	r1, #41	; 0x29
9000a32a:	2008      	movs	r0, #8
9000a32c:	f002 f9d0 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 41, 2, y_size - 50, UTIL_LCD_COLOR_WHITE);
9000a330:	4b62      	ldr	r3, [pc, #392]	; (9000a4bc <Draw_Menu+0x274>)
9000a332:	681b      	ldr	r3, [r3, #0]
9000a334:	f1a3 000a 	sub.w	r0, r3, #10
9000a338:	4b61      	ldr	r3, [pc, #388]	; (9000a4c0 <Draw_Menu+0x278>)
9000a33a:	681b      	ldr	r3, [r3, #0]
9000a33c:	3b32      	subs	r3, #50	; 0x32
9000a33e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000a342:	9200      	str	r2, [sp, #0]
9000a344:	2202      	movs	r2, #2
9000a346:	2129      	movs	r1, #41	; 0x29
9000a348:	f002 f9c2 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, y_size - 9, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
9000a34c:	4b5c      	ldr	r3, [pc, #368]	; (9000a4c0 <Draw_Menu+0x278>)
9000a34e:	681b      	ldr	r3, [r3, #0]
9000a350:	f1a3 0109 	sub.w	r1, r3, #9
9000a354:	4b59      	ldr	r3, [pc, #356]	; (9000a4bc <Draw_Menu+0x274>)
9000a356:	681b      	ldr	r3, [r3, #0]
9000a358:	f1a3 0210 	sub.w	r2, r3, #16
9000a35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a360:	9300      	str	r3, [sp, #0]
9000a362:	2302      	movs	r3, #2
9000a364:	2008      	movs	r0, #8
9000a366:	f002 f9b3 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  // flag marker squear
  UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a36a:	4b56      	ldr	r3, [pc, #344]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a36c:	9300      	str	r3, [sp, #0]
9000a36e:	2317      	movs	r3, #23
9000a370:	2202      	movs	r2, #2
9000a372:	210a      	movs	r1, #10
9000a374:	207b      	movs	r0, #123	; 0x7b
9000a376:	f002 f9ab 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a37a:	4b52      	ldr	r3, [pc, #328]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a37c:	9300      	str	r3, [sp, #0]
9000a37e:	2302      	movs	r3, #2
9000a380:	2218      	movs	r2, #24
9000a382:	211f      	movs	r1, #31
9000a384:	2064      	movs	r0, #100	; 0x64
9000a386:	f002 f9a3 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
9000a38a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a38e:	9300      	str	r3, [sp, #0]
9000a390:	2302      	movs	r3, #2
9000a392:	2219      	movs	r2, #25
9000a394:	210a      	movs	r1, #10
9000a396:	2064      	movs	r0, #100	; 0x64
9000a398:	f002 f99a 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
9000a39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a3a0:	9300      	str	r3, [sp, #0]
9000a3a2:	2317      	movs	r3, #23
9000a3a4:	2202      	movs	r2, #2
9000a3a6:	210a      	movs	r1, #10
9000a3a8:	2064      	movs	r0, #100	; 0x64
9000a3aa:	f002 f991 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  // draw flag icon
  UTIL_LCD_DrawRect(112, 15, 2, 10, UTIL_LCD_COLOR_BLACK);
9000a3ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a3b2:	9300      	str	r3, [sp, #0]
9000a3b4:	230a      	movs	r3, #10
9000a3b6:	2202      	movs	r2, #2
9000a3b8:	210f      	movs	r1, #15
9000a3ba:	2070      	movs	r0, #112	; 0x70
9000a3bc:	f002 f988 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(107, 25, 11, 2, UTIL_LCD_COLOR_BLACK);
9000a3c0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a3c4:	9300      	str	r3, [sp, #0]
9000a3c6:	2302      	movs	r3, #2
9000a3c8:	220b      	movs	r2, #11
9000a3ca:	2119      	movs	r1, #25
9000a3cc:	206b      	movs	r0, #107	; 0x6b
9000a3ce:	f002 f97f 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(105, 27, 15, 2, UTIL_LCD_COLOR_BLACK);
9000a3d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a3d6:	9300      	str	r3, [sp, #0]
9000a3d8:	2302      	movs	r3, #2
9000a3da:	220f      	movs	r2, #15
9000a3dc:	211b      	movs	r1, #27
9000a3de:	2069      	movs	r0, #105	; 0x69
9000a3e0:	f002 f976 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_FillRect(107, 15, 5, 5, UTIL_LCD_COLOR_RED);
9000a3e4:	4b38      	ldr	r3, [pc, #224]	; (9000a4c8 <Draw_Menu+0x280>)
9000a3e6:	9300      	str	r3, [sp, #0]
9000a3e8:	2305      	movs	r3, #5
9000a3ea:	2205      	movs	r2, #5
9000a3ec:	210f      	movs	r1, #15
9000a3ee:	206b      	movs	r0, #107	; 0x6b
9000a3f0:	f002 faa2 	bl	9000c938 <UTIL_LCD_FillRect>

  // squear around emojy
  UTIL_LCD_DrawRect(251, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a3f4:	4b33      	ldr	r3, [pc, #204]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a3f6:	9300      	str	r3, [sp, #0]
9000a3f8:	2317      	movs	r3, #23
9000a3fa:	2202      	movs	r2, #2
9000a3fc:	210a      	movs	r1, #10
9000a3fe:	20fb      	movs	r0, #251	; 0xfb
9000a400:	f002 f966 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a404:	4b2f      	ldr	r3, [pc, #188]	; (9000a4c4 <Draw_Menu+0x27c>)
9000a406:	9300      	str	r3, [sp, #0]
9000a408:	2302      	movs	r3, #2
9000a40a:	2218      	movs	r2, #24
9000a40c:	211f      	movs	r1, #31
9000a40e:	20e4      	movs	r0, #228	; 0xe4
9000a410:	f002 f95e 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
9000a414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a418:	9300      	str	r3, [sp, #0]
9000a41a:	2302      	movs	r3, #2
9000a41c:	2219      	movs	r2, #25
9000a41e:	210a      	movs	r1, #10
9000a420:	20e4      	movs	r0, #228	; 0xe4
9000a422:	f002 f955 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
9000a426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a42a:	9300      	str	r3, [sp, #0]
9000a42c:	2317      	movs	r3, #23
9000a42e:	2202      	movs	r2, #2
9000a430:	210a      	movs	r1, #10
9000a432:	20e4      	movs	r0, #228	; 0xe4
9000a434:	f002 f94c 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  // draws hapy emojy
  UTIL_LCD_FillCircle(240, 21, 8, UTIL_LCD_COLOR_YELLOW);
9000a438:	f06f 03ff 	mvn.w	r3, #255	; 0xff
9000a43c:	2208      	movs	r2, #8
9000a43e:	2115      	movs	r1, #21
9000a440:	20f0      	movs	r0, #240	; 0xf0
9000a442:	f002 fab3 	bl	9000c9ac <UTIL_LCD_FillCircle>
  UTIL_LCD_DrawCircle(240, 21, 8, UTIL_LCD_COLOR_BLACK);
9000a446:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a44a:	2208      	movs	r2, #8
9000a44c:	2115      	movs	r1, #21
9000a44e:	20f0      	movs	r0, #240	; 0xf0
9000a450:	f002 f968 	bl	9000c724 <UTIL_LCD_DrawCircle>
  UTIL_LCD_DrawRect(242, 18, 2, 2, UTIL_LCD_COLOR_BLACK);
9000a454:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a458:	9300      	str	r3, [sp, #0]
9000a45a:	2302      	movs	r3, #2
9000a45c:	2202      	movs	r2, #2
9000a45e:	2112      	movs	r1, #18
9000a460:	20f2      	movs	r0, #242	; 0xf2
9000a462:	f002 f935 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(237, 18, 2, 2, UTIL_LCD_COLOR_BLACK);
9000a466:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a46a:	9300      	str	r3, [sp, #0]
9000a46c:	2302      	movs	r3, #2
9000a46e:	2202      	movs	r2, #2
9000a470:	2112      	movs	r1, #18
9000a472:	20ed      	movs	r0, #237	; 0xed
9000a474:	f002 f92c 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(237, 25, 7, 1, UTIL_LCD_COLOR_BLACK);
9000a478:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a47c:	9300      	str	r3, [sp, #0]
9000a47e:	2301      	movs	r3, #1
9000a480:	2207      	movs	r2, #7
9000a482:	2119      	movs	r1, #25
9000a484:	20ed      	movs	r0, #237	; 0xed
9000a486:	f002 f923 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(236, 24, 1, 1, UTIL_LCD_COLOR_BLACK);
9000a48a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a48e:	9300      	str	r3, [sp, #0]
9000a490:	2301      	movs	r3, #1
9000a492:	2201      	movs	r2, #1
9000a494:	2118      	movs	r1, #24
9000a496:	20ec      	movs	r0, #236	; 0xec
9000a498:	f002 f91a 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(244, 24, 1, 1, UTIL_LCD_COLOR_BLACK);
9000a49c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a4a0:	9300      	str	r3, [sp, #0]
9000a4a2:	2301      	movs	r3, #1
9000a4a4:	2201      	movs	r2, #1
9000a4a6:	2118      	movs	r1, #24
9000a4a8:	20f4      	movs	r0, #244	; 0xf4
9000a4aa:	f002 f911 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  // konec smejkota

  // number of squears 23*11
  int16_t x_move = 0, y_move = 0;
9000a4ae:	2300      	movs	r3, #0
9000a4b0:	80fb      	strh	r3, [r7, #6]
9000a4b2:	2300      	movs	r3, #0
9000a4b4:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
9000a4b6:	e075      	b.n	9000a5a4 <Draw_Menu+0x35c>
9000a4b8:	ffb9c4ca 	.word	0xffb9c4ca
9000a4bc:	200012d4 	.word	0x200012d4
9000a4c0:	200012d8 	.word	0x200012d8
9000a4c4:	ff4f5251 	.word	0xff4f5251
9000a4c8:	ffff0000 	.word	0xffff0000
  {
    while (x_move < 23)
    {
      // draws a squear
      UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a4cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a4d0:	4613      	mov	r3, r2
9000a4d2:	009b      	lsls	r3, r3, #2
9000a4d4:	4413      	add	r3, r2
9000a4d6:	009b      	lsls	r3, r3, #2
9000a4d8:	331c      	adds	r3, #28
9000a4da:	4618      	mov	r0, r3
9000a4dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a4e0:	4613      	mov	r3, r2
9000a4e2:	009b      	lsls	r3, r3, #2
9000a4e4:	4413      	add	r3, r2
9000a4e6:	009b      	lsls	r3, r3, #2
9000a4e8:	332b      	adds	r3, #43	; 0x2b
9000a4ea:	4619      	mov	r1, r3
9000a4ec:	4b47      	ldr	r3, [pc, #284]	; (9000a60c <Draw_Menu+0x3c4>)
9000a4ee:	9300      	str	r3, [sp, #0]
9000a4f0:	2312      	movs	r3, #18
9000a4f2:	2202      	movs	r2, #2
9000a4f4:	f002 f8ec 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a4f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a4fc:	4613      	mov	r3, r2
9000a4fe:	009b      	lsls	r3, r3, #2
9000a500:	4413      	add	r3, r2
9000a502:	009b      	lsls	r3, r3, #2
9000a504:	330a      	adds	r3, #10
9000a506:	4618      	mov	r0, r3
9000a508:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a50c:	4613      	mov	r3, r2
9000a50e:	009b      	lsls	r3, r3, #2
9000a510:	4413      	add	r3, r2
9000a512:	009b      	lsls	r3, r3, #2
9000a514:	333d      	adds	r3, #61	; 0x3d
9000a516:	4619      	mov	r1, r3
9000a518:	4b3c      	ldr	r3, [pc, #240]	; (9000a60c <Draw_Menu+0x3c4>)
9000a51a:	9300      	str	r3, [sp, #0]
9000a51c:	2302      	movs	r3, #2
9000a51e:	2214      	movs	r2, #20
9000a520:	f002 f8d6 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_WHITE);
9000a524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a528:	4613      	mov	r3, r2
9000a52a:	009b      	lsls	r3, r3, #2
9000a52c:	4413      	add	r3, r2
9000a52e:	009b      	lsls	r3, r3, #2
9000a530:	330a      	adds	r3, #10
9000a532:	4618      	mov	r0, r3
9000a534:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a538:	4613      	mov	r3, r2
9000a53a:	009b      	lsls	r3, r3, #2
9000a53c:	4413      	add	r3, r2
9000a53e:	009b      	lsls	r3, r3, #2
9000a540:	332b      	adds	r3, #43	; 0x2b
9000a542:	4619      	mov	r1, r3
9000a544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a548:	9300      	str	r3, [sp, #0]
9000a54a:	2302      	movs	r3, #2
9000a54c:	2214      	movs	r2, #20
9000a54e:	f002 f8bf 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_WHITE);
9000a552:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a556:	4613      	mov	r3, r2
9000a558:	009b      	lsls	r3, r3, #2
9000a55a:	4413      	add	r3, r2
9000a55c:	009b      	lsls	r3, r3, #2
9000a55e:	330a      	adds	r3, #10
9000a560:	4618      	mov	r0, r3
9000a562:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a566:	4613      	mov	r3, r2
9000a568:	009b      	lsls	r3, r3, #2
9000a56a:	4413      	add	r3, r2
9000a56c:	009b      	lsls	r3, r3, #2
9000a56e:	332b      	adds	r3, #43	; 0x2b
9000a570:	4619      	mov	r1, r3
9000a572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a576:	9300      	str	r3, [sp, #0]
9000a578:	2314      	movs	r3, #20
9000a57a:	2202      	movs	r2, #2
9000a57c:	f002 f8a8 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      x_move++;
9000a580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000a584:	b29b      	uxth	r3, r3
9000a586:	3301      	adds	r3, #1
9000a588:	b29b      	uxth	r3, r3
9000a58a:	80fb      	strh	r3, [r7, #6]
    while (x_move < 23)
9000a58c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000a590:	2b16      	cmp	r3, #22
9000a592:	dd9b      	ble.n	9000a4cc <Draw_Menu+0x284>
    }
    x_move = 0;
9000a594:	2300      	movs	r3, #0
9000a596:	80fb      	strh	r3, [r7, #6]
    y_move++;
9000a598:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
9000a59c:	b29b      	uxth	r3, r3
9000a59e:	3301      	adds	r3, #1
9000a5a0:	b29b      	uxth	r3, r3
9000a5a2:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
9000a5a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
9000a5a8:	2b0a      	cmp	r3, #10
9000a5aa:	ddef      	ble.n	9000a58c <Draw_Menu+0x344>
  }

  // despay the number of bombs
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000a5ac:	4818      	ldr	r0, [pc, #96]	; (9000a610 <Draw_Menu+0x3c8>)
9000a5ae:	f001 fe77 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
9000a5b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000a5b6:	f001 fe87 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font16);
9000a5ba:	4816      	ldr	r0, [pc, #88]	; (9000a614 <Draw_Menu+0x3cc>)
9000a5bc:	f001 fe98 	bl	9000c2f0 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(12, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
9000a5c0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a5c4:	9300      	str	r3, [sp, #0]
9000a5c6:	2319      	movs	r3, #25
9000a5c8:	2232      	movs	r2, #50	; 0x32
9000a5ca:	2109      	movs	r1, #9
9000a5cc:	200c      	movs	r0, #12
9000a5ce:	f002 f9b3 	bl	9000c938 <UTIL_LCD_FillRect>
  char st[3];
  sprintf(st, "%3d", Mine_Num);
9000a5d2:	4b11      	ldr	r3, [pc, #68]	; (9000a618 <Draw_Menu+0x3d0>)
9000a5d4:	881b      	ldrh	r3, [r3, #0]
9000a5d6:	461a      	mov	r2, r3
9000a5d8:	463b      	mov	r3, r7
9000a5da:	4910      	ldr	r1, [pc, #64]	; (9000a61c <Draw_Menu+0x3d4>)
9000a5dc:	4618      	mov	r0, r3
9000a5de:	f002 fd8f 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(20, 15, (uint8_t *)st, LEFT_MODE);
9000a5e2:	463a      	mov	r2, r7
9000a5e4:	2303      	movs	r3, #3
9000a5e6:	210f      	movs	r1, #15
9000a5e8:	2014      	movs	r0, #20
9000a5ea:	f001 ffad 	bl	9000c548 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_FillRect(410, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
9000a5ee:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a5f2:	9300      	str	r3, [sp, #0]
9000a5f4:	2319      	movs	r3, #25
9000a5f6:	2232      	movs	r2, #50	; 0x32
9000a5f8:	2109      	movs	r1, #9
9000a5fa:	f44f 70cd 	mov.w	r0, #410	; 0x19a
9000a5fe:	f002 f99b 	bl	9000c938 <UTIL_LCD_FillRect>
}
9000a602:	bf00      	nop
9000a604:	3708      	adds	r7, #8
9000a606:	46bd      	mov	sp, r7
9000a608:	bd80      	pop	{r7, pc}
9000a60a:	bf00      	nop
9000a60c:	ff4f5251 	.word	0xff4f5251
9000a610:	ffff0000 	.word	0xffff0000
9000a614:	20000058 	.word	0x20000058
9000a618:	20000046 	.word	0x20000046
9000a61c:	9000e320 	.word	0x9000e320

9000a620 <Set_Numbers>:
 * @brief  Sets numbers acording to the mines
 * @param  None
 * @retval None
 */
static void Set_Numbers()
{
9000a620:	b480      	push	{r7}
9000a622:	b083      	sub	sp, #12
9000a624:	af00      	add	r7, sp, #0
  for (int i = 0; i < 11; i++)
9000a626:	2300      	movs	r3, #0
9000a628:	607b      	str	r3, [r7, #4]
9000a62a:	e19e      	b.n	9000a96a <Set_Numbers+0x34a>
  {
    for (int j = 0; j < 23; j++)
9000a62c:	2300      	movs	r3, #0
9000a62e:	603b      	str	r3, [r7, #0]
9000a630:	e194      	b.n	9000a95c <Set_Numbers+0x33c>
    {
      if (tab[j][i] != -1)
9000a632:	49bd      	ldr	r1, [pc, #756]	; (9000a928 <Set_Numbers+0x308>)
9000a634:	683a      	ldr	r2, [r7, #0]
9000a636:	4613      	mov	r3, r2
9000a638:	009b      	lsls	r3, r3, #2
9000a63a:	4413      	add	r3, r2
9000a63c:	005b      	lsls	r3, r3, #1
9000a63e:	4413      	add	r3, r2
9000a640:	18ca      	adds	r2, r1, r3
9000a642:	687b      	ldr	r3, [r7, #4]
9000a644:	4413      	add	r3, r2
9000a646:	f993 3000 	ldrsb.w	r3, [r3]
9000a64a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a64e:	f000 8182 	beq.w	9000a956 <Set_Numbers+0x336>
      {
        if (i > 0)
9000a652:	687b      	ldr	r3, [r7, #4]
9000a654:	2b00      	cmp	r3, #0
9000a656:	f340 808c 	ble.w	9000a772 <Set_Numbers+0x152>
        {
          if (tab[j][i - 1] == -1)
9000a65a:	687b      	ldr	r3, [r7, #4]
9000a65c:	1e59      	subs	r1, r3, #1
9000a65e:	48b2      	ldr	r0, [pc, #712]	; (9000a928 <Set_Numbers+0x308>)
9000a660:	683a      	ldr	r2, [r7, #0]
9000a662:	4613      	mov	r3, r2
9000a664:	009b      	lsls	r3, r3, #2
9000a666:	4413      	add	r3, r2
9000a668:	005b      	lsls	r3, r3, #1
9000a66a:	4413      	add	r3, r2
9000a66c:	4403      	add	r3, r0
9000a66e:	440b      	add	r3, r1
9000a670:	f993 3000 	ldrsb.w	r3, [r3]
9000a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a678:	d11b      	bne.n	9000a6b2 <Set_Numbers+0x92>
            tab[j][i]++;
9000a67a:	49ab      	ldr	r1, [pc, #684]	; (9000a928 <Set_Numbers+0x308>)
9000a67c:	683a      	ldr	r2, [r7, #0]
9000a67e:	4613      	mov	r3, r2
9000a680:	009b      	lsls	r3, r3, #2
9000a682:	4413      	add	r3, r2
9000a684:	005b      	lsls	r3, r3, #1
9000a686:	4413      	add	r3, r2
9000a688:	18ca      	adds	r2, r1, r3
9000a68a:	687b      	ldr	r3, [r7, #4]
9000a68c:	4413      	add	r3, r2
9000a68e:	f993 3000 	ldrsb.w	r3, [r3]
9000a692:	b2db      	uxtb	r3, r3
9000a694:	3301      	adds	r3, #1
9000a696:	b2db      	uxtb	r3, r3
9000a698:	b258      	sxtb	r0, r3
9000a69a:	49a3      	ldr	r1, [pc, #652]	; (9000a928 <Set_Numbers+0x308>)
9000a69c:	683a      	ldr	r2, [r7, #0]
9000a69e:	4613      	mov	r3, r2
9000a6a0:	009b      	lsls	r3, r3, #2
9000a6a2:	4413      	add	r3, r2
9000a6a4:	005b      	lsls	r3, r3, #1
9000a6a6:	4413      	add	r3, r2
9000a6a8:	18ca      	adds	r2, r1, r3
9000a6aa:	687b      	ldr	r3, [r7, #4]
9000a6ac:	4413      	add	r3, r2
9000a6ae:	4602      	mov	r2, r0
9000a6b0:	701a      	strb	r2, [r3, #0]
          if (j > 0)
9000a6b2:	683b      	ldr	r3, [r7, #0]
9000a6b4:	2b00      	cmp	r3, #0
9000a6b6:	dd2c      	ble.n	9000a712 <Set_Numbers+0xf2>
          {
            if (tab[j - 1][i - 1] == -1)
9000a6b8:	683b      	ldr	r3, [r7, #0]
9000a6ba:	1e5a      	subs	r2, r3, #1
9000a6bc:	687b      	ldr	r3, [r7, #4]
9000a6be:	1e59      	subs	r1, r3, #1
9000a6c0:	4899      	ldr	r0, [pc, #612]	; (9000a928 <Set_Numbers+0x308>)
9000a6c2:	4613      	mov	r3, r2
9000a6c4:	009b      	lsls	r3, r3, #2
9000a6c6:	4413      	add	r3, r2
9000a6c8:	005b      	lsls	r3, r3, #1
9000a6ca:	4413      	add	r3, r2
9000a6cc:	4403      	add	r3, r0
9000a6ce:	440b      	add	r3, r1
9000a6d0:	f993 3000 	ldrsb.w	r3, [r3]
9000a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a6d8:	d11b      	bne.n	9000a712 <Set_Numbers+0xf2>
              tab[j][i]++;
9000a6da:	4993      	ldr	r1, [pc, #588]	; (9000a928 <Set_Numbers+0x308>)
9000a6dc:	683a      	ldr	r2, [r7, #0]
9000a6de:	4613      	mov	r3, r2
9000a6e0:	009b      	lsls	r3, r3, #2
9000a6e2:	4413      	add	r3, r2
9000a6e4:	005b      	lsls	r3, r3, #1
9000a6e6:	4413      	add	r3, r2
9000a6e8:	18ca      	adds	r2, r1, r3
9000a6ea:	687b      	ldr	r3, [r7, #4]
9000a6ec:	4413      	add	r3, r2
9000a6ee:	f993 3000 	ldrsb.w	r3, [r3]
9000a6f2:	b2db      	uxtb	r3, r3
9000a6f4:	3301      	adds	r3, #1
9000a6f6:	b2db      	uxtb	r3, r3
9000a6f8:	b258      	sxtb	r0, r3
9000a6fa:	498b      	ldr	r1, [pc, #556]	; (9000a928 <Set_Numbers+0x308>)
9000a6fc:	683a      	ldr	r2, [r7, #0]
9000a6fe:	4613      	mov	r3, r2
9000a700:	009b      	lsls	r3, r3, #2
9000a702:	4413      	add	r3, r2
9000a704:	005b      	lsls	r3, r3, #1
9000a706:	4413      	add	r3, r2
9000a708:	18ca      	adds	r2, r1, r3
9000a70a:	687b      	ldr	r3, [r7, #4]
9000a70c:	4413      	add	r3, r2
9000a70e:	4602      	mov	r2, r0
9000a710:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
9000a712:	683b      	ldr	r3, [r7, #0]
9000a714:	2b15      	cmp	r3, #21
9000a716:	dc2c      	bgt.n	9000a772 <Set_Numbers+0x152>
          {
            if (tab[j + 1][i - 1] == -1)
9000a718:	683b      	ldr	r3, [r7, #0]
9000a71a:	1c5a      	adds	r2, r3, #1
9000a71c:	687b      	ldr	r3, [r7, #4]
9000a71e:	1e59      	subs	r1, r3, #1
9000a720:	4881      	ldr	r0, [pc, #516]	; (9000a928 <Set_Numbers+0x308>)
9000a722:	4613      	mov	r3, r2
9000a724:	009b      	lsls	r3, r3, #2
9000a726:	4413      	add	r3, r2
9000a728:	005b      	lsls	r3, r3, #1
9000a72a:	4413      	add	r3, r2
9000a72c:	4403      	add	r3, r0
9000a72e:	440b      	add	r3, r1
9000a730:	f993 3000 	ldrsb.w	r3, [r3]
9000a734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a738:	d11b      	bne.n	9000a772 <Set_Numbers+0x152>
              tab[j][i]++;
9000a73a:	497b      	ldr	r1, [pc, #492]	; (9000a928 <Set_Numbers+0x308>)
9000a73c:	683a      	ldr	r2, [r7, #0]
9000a73e:	4613      	mov	r3, r2
9000a740:	009b      	lsls	r3, r3, #2
9000a742:	4413      	add	r3, r2
9000a744:	005b      	lsls	r3, r3, #1
9000a746:	4413      	add	r3, r2
9000a748:	18ca      	adds	r2, r1, r3
9000a74a:	687b      	ldr	r3, [r7, #4]
9000a74c:	4413      	add	r3, r2
9000a74e:	f993 3000 	ldrsb.w	r3, [r3]
9000a752:	b2db      	uxtb	r3, r3
9000a754:	3301      	adds	r3, #1
9000a756:	b2db      	uxtb	r3, r3
9000a758:	b258      	sxtb	r0, r3
9000a75a:	4973      	ldr	r1, [pc, #460]	; (9000a928 <Set_Numbers+0x308>)
9000a75c:	683a      	ldr	r2, [r7, #0]
9000a75e:	4613      	mov	r3, r2
9000a760:	009b      	lsls	r3, r3, #2
9000a762:	4413      	add	r3, r2
9000a764:	005b      	lsls	r3, r3, #1
9000a766:	4413      	add	r3, r2
9000a768:	18ca      	adds	r2, r1, r3
9000a76a:	687b      	ldr	r3, [r7, #4]
9000a76c:	4413      	add	r3, r2
9000a76e:	4602      	mov	r2, r0
9000a770:	701a      	strb	r2, [r3, #0]
          }
        }
        if (tab[j - 1][i] == -1 && j > 0)
9000a772:	683b      	ldr	r3, [r7, #0]
9000a774:	1e5a      	subs	r2, r3, #1
9000a776:	496c      	ldr	r1, [pc, #432]	; (9000a928 <Set_Numbers+0x308>)
9000a778:	4613      	mov	r3, r2
9000a77a:	009b      	lsls	r3, r3, #2
9000a77c:	4413      	add	r3, r2
9000a77e:	005b      	lsls	r3, r3, #1
9000a780:	4413      	add	r3, r2
9000a782:	18ca      	adds	r2, r1, r3
9000a784:	687b      	ldr	r3, [r7, #4]
9000a786:	4413      	add	r3, r2
9000a788:	f993 3000 	ldrsb.w	r3, [r3]
9000a78c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a790:	d11e      	bne.n	9000a7d0 <Set_Numbers+0x1b0>
9000a792:	683b      	ldr	r3, [r7, #0]
9000a794:	2b00      	cmp	r3, #0
9000a796:	dd1b      	ble.n	9000a7d0 <Set_Numbers+0x1b0>
          tab[j][i]++;
9000a798:	4963      	ldr	r1, [pc, #396]	; (9000a928 <Set_Numbers+0x308>)
9000a79a:	683a      	ldr	r2, [r7, #0]
9000a79c:	4613      	mov	r3, r2
9000a79e:	009b      	lsls	r3, r3, #2
9000a7a0:	4413      	add	r3, r2
9000a7a2:	005b      	lsls	r3, r3, #1
9000a7a4:	4413      	add	r3, r2
9000a7a6:	18ca      	adds	r2, r1, r3
9000a7a8:	687b      	ldr	r3, [r7, #4]
9000a7aa:	4413      	add	r3, r2
9000a7ac:	f993 3000 	ldrsb.w	r3, [r3]
9000a7b0:	b2db      	uxtb	r3, r3
9000a7b2:	3301      	adds	r3, #1
9000a7b4:	b2db      	uxtb	r3, r3
9000a7b6:	b258      	sxtb	r0, r3
9000a7b8:	495b      	ldr	r1, [pc, #364]	; (9000a928 <Set_Numbers+0x308>)
9000a7ba:	683a      	ldr	r2, [r7, #0]
9000a7bc:	4613      	mov	r3, r2
9000a7be:	009b      	lsls	r3, r3, #2
9000a7c0:	4413      	add	r3, r2
9000a7c2:	005b      	lsls	r3, r3, #1
9000a7c4:	4413      	add	r3, r2
9000a7c6:	18ca      	adds	r2, r1, r3
9000a7c8:	687b      	ldr	r3, [r7, #4]
9000a7ca:	4413      	add	r3, r2
9000a7cc:	4602      	mov	r2, r0
9000a7ce:	701a      	strb	r2, [r3, #0]
        if (tab[j + 1][i] == -1 && j < 22)
9000a7d0:	683b      	ldr	r3, [r7, #0]
9000a7d2:	1c5a      	adds	r2, r3, #1
9000a7d4:	4954      	ldr	r1, [pc, #336]	; (9000a928 <Set_Numbers+0x308>)
9000a7d6:	4613      	mov	r3, r2
9000a7d8:	009b      	lsls	r3, r3, #2
9000a7da:	4413      	add	r3, r2
9000a7dc:	005b      	lsls	r3, r3, #1
9000a7de:	4413      	add	r3, r2
9000a7e0:	18ca      	adds	r2, r1, r3
9000a7e2:	687b      	ldr	r3, [r7, #4]
9000a7e4:	4413      	add	r3, r2
9000a7e6:	f993 3000 	ldrsb.w	r3, [r3]
9000a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a7ee:	d11e      	bne.n	9000a82e <Set_Numbers+0x20e>
9000a7f0:	683b      	ldr	r3, [r7, #0]
9000a7f2:	2b15      	cmp	r3, #21
9000a7f4:	dc1b      	bgt.n	9000a82e <Set_Numbers+0x20e>
          tab[j][i]++;
9000a7f6:	494c      	ldr	r1, [pc, #304]	; (9000a928 <Set_Numbers+0x308>)
9000a7f8:	683a      	ldr	r2, [r7, #0]
9000a7fa:	4613      	mov	r3, r2
9000a7fc:	009b      	lsls	r3, r3, #2
9000a7fe:	4413      	add	r3, r2
9000a800:	005b      	lsls	r3, r3, #1
9000a802:	4413      	add	r3, r2
9000a804:	18ca      	adds	r2, r1, r3
9000a806:	687b      	ldr	r3, [r7, #4]
9000a808:	4413      	add	r3, r2
9000a80a:	f993 3000 	ldrsb.w	r3, [r3]
9000a80e:	b2db      	uxtb	r3, r3
9000a810:	3301      	adds	r3, #1
9000a812:	b2db      	uxtb	r3, r3
9000a814:	b258      	sxtb	r0, r3
9000a816:	4944      	ldr	r1, [pc, #272]	; (9000a928 <Set_Numbers+0x308>)
9000a818:	683a      	ldr	r2, [r7, #0]
9000a81a:	4613      	mov	r3, r2
9000a81c:	009b      	lsls	r3, r3, #2
9000a81e:	4413      	add	r3, r2
9000a820:	005b      	lsls	r3, r3, #1
9000a822:	4413      	add	r3, r2
9000a824:	18ca      	adds	r2, r1, r3
9000a826:	687b      	ldr	r3, [r7, #4]
9000a828:	4413      	add	r3, r2
9000a82a:	4602      	mov	r2, r0
9000a82c:	701a      	strb	r2, [r3, #0]
        if (i < 10)
9000a82e:	687b      	ldr	r3, [r7, #4]
9000a830:	2b09      	cmp	r3, #9
9000a832:	f300 8090 	bgt.w	9000a956 <Set_Numbers+0x336>
        {
          if (tab[j][i + 1] == -1)
9000a836:	687b      	ldr	r3, [r7, #4]
9000a838:	1c59      	adds	r1, r3, #1
9000a83a:	483b      	ldr	r0, [pc, #236]	; (9000a928 <Set_Numbers+0x308>)
9000a83c:	683a      	ldr	r2, [r7, #0]
9000a83e:	4613      	mov	r3, r2
9000a840:	009b      	lsls	r3, r3, #2
9000a842:	4413      	add	r3, r2
9000a844:	005b      	lsls	r3, r3, #1
9000a846:	4413      	add	r3, r2
9000a848:	4403      	add	r3, r0
9000a84a:	440b      	add	r3, r1
9000a84c:	f993 3000 	ldrsb.w	r3, [r3]
9000a850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a854:	d11b      	bne.n	9000a88e <Set_Numbers+0x26e>
            tab[j][i]++;
9000a856:	4934      	ldr	r1, [pc, #208]	; (9000a928 <Set_Numbers+0x308>)
9000a858:	683a      	ldr	r2, [r7, #0]
9000a85a:	4613      	mov	r3, r2
9000a85c:	009b      	lsls	r3, r3, #2
9000a85e:	4413      	add	r3, r2
9000a860:	005b      	lsls	r3, r3, #1
9000a862:	4413      	add	r3, r2
9000a864:	18ca      	adds	r2, r1, r3
9000a866:	687b      	ldr	r3, [r7, #4]
9000a868:	4413      	add	r3, r2
9000a86a:	f993 3000 	ldrsb.w	r3, [r3]
9000a86e:	b2db      	uxtb	r3, r3
9000a870:	3301      	adds	r3, #1
9000a872:	b2db      	uxtb	r3, r3
9000a874:	b258      	sxtb	r0, r3
9000a876:	492c      	ldr	r1, [pc, #176]	; (9000a928 <Set_Numbers+0x308>)
9000a878:	683a      	ldr	r2, [r7, #0]
9000a87a:	4613      	mov	r3, r2
9000a87c:	009b      	lsls	r3, r3, #2
9000a87e:	4413      	add	r3, r2
9000a880:	005b      	lsls	r3, r3, #1
9000a882:	4413      	add	r3, r2
9000a884:	18ca      	adds	r2, r1, r3
9000a886:	687b      	ldr	r3, [r7, #4]
9000a888:	4413      	add	r3, r2
9000a88a:	4602      	mov	r2, r0
9000a88c:	701a      	strb	r2, [r3, #0]
          if (j > 0)
9000a88e:	683b      	ldr	r3, [r7, #0]
9000a890:	2b00      	cmp	r3, #0
9000a892:	dd2c      	ble.n	9000a8ee <Set_Numbers+0x2ce>
          {
            if (tab[j - 1][i + 1] == -1)
9000a894:	683b      	ldr	r3, [r7, #0]
9000a896:	1e5a      	subs	r2, r3, #1
9000a898:	687b      	ldr	r3, [r7, #4]
9000a89a:	1c59      	adds	r1, r3, #1
9000a89c:	4822      	ldr	r0, [pc, #136]	; (9000a928 <Set_Numbers+0x308>)
9000a89e:	4613      	mov	r3, r2
9000a8a0:	009b      	lsls	r3, r3, #2
9000a8a2:	4413      	add	r3, r2
9000a8a4:	005b      	lsls	r3, r3, #1
9000a8a6:	4413      	add	r3, r2
9000a8a8:	4403      	add	r3, r0
9000a8aa:	440b      	add	r3, r1
9000a8ac:	f993 3000 	ldrsb.w	r3, [r3]
9000a8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a8b4:	d11b      	bne.n	9000a8ee <Set_Numbers+0x2ce>
              tab[j][i]++;
9000a8b6:	491c      	ldr	r1, [pc, #112]	; (9000a928 <Set_Numbers+0x308>)
9000a8b8:	683a      	ldr	r2, [r7, #0]
9000a8ba:	4613      	mov	r3, r2
9000a8bc:	009b      	lsls	r3, r3, #2
9000a8be:	4413      	add	r3, r2
9000a8c0:	005b      	lsls	r3, r3, #1
9000a8c2:	4413      	add	r3, r2
9000a8c4:	18ca      	adds	r2, r1, r3
9000a8c6:	687b      	ldr	r3, [r7, #4]
9000a8c8:	4413      	add	r3, r2
9000a8ca:	f993 3000 	ldrsb.w	r3, [r3]
9000a8ce:	b2db      	uxtb	r3, r3
9000a8d0:	3301      	adds	r3, #1
9000a8d2:	b2db      	uxtb	r3, r3
9000a8d4:	b258      	sxtb	r0, r3
9000a8d6:	4914      	ldr	r1, [pc, #80]	; (9000a928 <Set_Numbers+0x308>)
9000a8d8:	683a      	ldr	r2, [r7, #0]
9000a8da:	4613      	mov	r3, r2
9000a8dc:	009b      	lsls	r3, r3, #2
9000a8de:	4413      	add	r3, r2
9000a8e0:	005b      	lsls	r3, r3, #1
9000a8e2:	4413      	add	r3, r2
9000a8e4:	18ca      	adds	r2, r1, r3
9000a8e6:	687b      	ldr	r3, [r7, #4]
9000a8e8:	4413      	add	r3, r2
9000a8ea:	4602      	mov	r2, r0
9000a8ec:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
9000a8ee:	683b      	ldr	r3, [r7, #0]
9000a8f0:	2b15      	cmp	r3, #21
9000a8f2:	dc30      	bgt.n	9000a956 <Set_Numbers+0x336>
          {
            if (tab[j + 1][i + 1] == -1)
9000a8f4:	683b      	ldr	r3, [r7, #0]
9000a8f6:	1c5a      	adds	r2, r3, #1
9000a8f8:	687b      	ldr	r3, [r7, #4]
9000a8fa:	1c59      	adds	r1, r3, #1
9000a8fc:	480a      	ldr	r0, [pc, #40]	; (9000a928 <Set_Numbers+0x308>)
9000a8fe:	4613      	mov	r3, r2
9000a900:	009b      	lsls	r3, r3, #2
9000a902:	4413      	add	r3, r2
9000a904:	005b      	lsls	r3, r3, #1
9000a906:	4413      	add	r3, r2
9000a908:	4403      	add	r3, r0
9000a90a:	440b      	add	r3, r1
9000a90c:	f993 3000 	ldrsb.w	r3, [r3]
9000a910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a914:	d11f      	bne.n	9000a956 <Set_Numbers+0x336>
              tab[j][i]++;
9000a916:	4904      	ldr	r1, [pc, #16]	; (9000a928 <Set_Numbers+0x308>)
9000a918:	683a      	ldr	r2, [r7, #0]
9000a91a:	4613      	mov	r3, r2
9000a91c:	009b      	lsls	r3, r3, #2
9000a91e:	4413      	add	r3, r2
9000a920:	005b      	lsls	r3, r3, #1
9000a922:	4413      	add	r3, r2
9000a924:	e002      	b.n	9000a92c <Set_Numbers+0x30c>
9000a926:	bf00      	nop
9000a928:	200011cc 	.word	0x200011cc
9000a92c:	18ca      	adds	r2, r1, r3
9000a92e:	687b      	ldr	r3, [r7, #4]
9000a930:	4413      	add	r3, r2
9000a932:	f993 3000 	ldrsb.w	r3, [r3]
9000a936:	b2db      	uxtb	r3, r3
9000a938:	3301      	adds	r3, #1
9000a93a:	b2db      	uxtb	r3, r3
9000a93c:	b258      	sxtb	r0, r3
9000a93e:	4910      	ldr	r1, [pc, #64]	; (9000a980 <Set_Numbers+0x360>)
9000a940:	683a      	ldr	r2, [r7, #0]
9000a942:	4613      	mov	r3, r2
9000a944:	009b      	lsls	r3, r3, #2
9000a946:	4413      	add	r3, r2
9000a948:	005b      	lsls	r3, r3, #1
9000a94a:	4413      	add	r3, r2
9000a94c:	18ca      	adds	r2, r1, r3
9000a94e:	687b      	ldr	r3, [r7, #4]
9000a950:	4413      	add	r3, r2
9000a952:	4602      	mov	r2, r0
9000a954:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 23; j++)
9000a956:	683b      	ldr	r3, [r7, #0]
9000a958:	3301      	adds	r3, #1
9000a95a:	603b      	str	r3, [r7, #0]
9000a95c:	683b      	ldr	r3, [r7, #0]
9000a95e:	2b16      	cmp	r3, #22
9000a960:	f77f ae67 	ble.w	9000a632 <Set_Numbers+0x12>
  for (int i = 0; i < 11; i++)
9000a964:	687b      	ldr	r3, [r7, #4]
9000a966:	3301      	adds	r3, #1
9000a968:	607b      	str	r3, [r7, #4]
9000a96a:	687b      	ldr	r3, [r7, #4]
9000a96c:	2b0a      	cmp	r3, #10
9000a96e:	f77f ae5d 	ble.w	9000a62c <Set_Numbers+0xc>
          }
        }
      }
    }
  }
}
9000a972:	bf00      	nop
9000a974:	bf00      	nop
9000a976:	370c      	adds	r7, #12
9000a978:	46bd      	mov	sp, r7
9000a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a97e:	4770      	bx	lr
9000a980:	200011cc 	.word	0x200011cc

9000a984 <Bomb_Hit>:
 * @brief  When you hit a bomb/game end
 * @param  None
 * @retval None
 */
static void Bomb_Hit()
{
9000a984:	b580      	push	{r7, lr}
9000a986:	b084      	sub	sp, #16
9000a988:	af02      	add	r7, sp, #8

  Game_State = 0;
9000a98a:	4b69      	ldr	r3, [pc, #420]	; (9000ab30 <Bomb_Hit+0x1ac>)
9000a98c:	2200      	movs	r2, #0
9000a98e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 23; i++)
9000a990:	2300      	movs	r3, #0
9000a992:	607b      	str	r3, [r7, #4]
9000a994:	e0c2      	b.n	9000ab1c <Bomb_Hit+0x198>
  {
    for (int j = 0; j < 11; j++)
9000a996:	2300      	movs	r3, #0
9000a998:	603b      	str	r3, [r7, #0]
9000a99a:	e0b8      	b.n	9000ab0e <Bomb_Hit+0x18a>
    {
      if (tab[i][j] == -1)
9000a99c:	4965      	ldr	r1, [pc, #404]	; (9000ab34 <Bomb_Hit+0x1b0>)
9000a99e:	687a      	ldr	r2, [r7, #4]
9000a9a0:	4613      	mov	r3, r2
9000a9a2:	009b      	lsls	r3, r3, #2
9000a9a4:	4413      	add	r3, r2
9000a9a6:	005b      	lsls	r3, r3, #1
9000a9a8:	4413      	add	r3, r2
9000a9aa:	18ca      	adds	r2, r1, r3
9000a9ac:	683b      	ldr	r3, [r7, #0]
9000a9ae:	4413      	add	r3, r2
9000a9b0:	f993 3000 	ldrsb.w	r3, [r3]
9000a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a9b8:	f040 80a6 	bne.w	9000ab08 <Bomb_Hit+0x184>
      {
        // draws a squear
        UTIL_LCD_FillCircle(20 + (i * 20), 53 + (j * 20), 5, UTIL_LCD_COLOR_BLACK);
9000a9bc:	687b      	ldr	r3, [r7, #4]
9000a9be:	1c5a      	adds	r2, r3, #1
9000a9c0:	4613      	mov	r3, r2
9000a9c2:	009b      	lsls	r3, r3, #2
9000a9c4:	4413      	add	r3, r2
9000a9c6:	009b      	lsls	r3, r3, #2
9000a9c8:	4618      	mov	r0, r3
9000a9ca:	683a      	ldr	r2, [r7, #0]
9000a9cc:	4613      	mov	r3, r2
9000a9ce:	009b      	lsls	r3, r3, #2
9000a9d0:	4413      	add	r3, r2
9000a9d2:	009b      	lsls	r3, r3, #2
9000a9d4:	3335      	adds	r3, #53	; 0x35
9000a9d6:	4619      	mov	r1, r3
9000a9d8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000a9dc:	2205      	movs	r2, #5
9000a9de:	f001 ffe5 	bl	9000c9ac <UTIL_LCD_FillCircle>
        UTIL_LCD_DrawRect(19 + (i * 20), 46 + (j * 20), 2, 15, UTIL_LCD_COLOR_BLACK);
9000a9e2:	687a      	ldr	r2, [r7, #4]
9000a9e4:	4613      	mov	r3, r2
9000a9e6:	009b      	lsls	r3, r3, #2
9000a9e8:	4413      	add	r3, r2
9000a9ea:	009b      	lsls	r3, r3, #2
9000a9ec:	3313      	adds	r3, #19
9000a9ee:	4618      	mov	r0, r3
9000a9f0:	683a      	ldr	r2, [r7, #0]
9000a9f2:	4613      	mov	r3, r2
9000a9f4:	009b      	lsls	r3, r3, #2
9000a9f6:	4413      	add	r3, r2
9000a9f8:	009b      	lsls	r3, r3, #2
9000a9fa:	332e      	adds	r3, #46	; 0x2e
9000a9fc:	4619      	mov	r1, r3
9000a9fe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aa02:	9300      	str	r3, [sp, #0]
9000aa04:	230f      	movs	r3, #15
9000aa06:	2202      	movs	r2, #2
9000aa08:	f001 fe62 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(13 + (i * 20), 53 + (j * 20), 14, 2, UTIL_LCD_COLOR_BLACK);
9000aa0c:	687a      	ldr	r2, [r7, #4]
9000aa0e:	4613      	mov	r3, r2
9000aa10:	009b      	lsls	r3, r3, #2
9000aa12:	4413      	add	r3, r2
9000aa14:	009b      	lsls	r3, r3, #2
9000aa16:	330d      	adds	r3, #13
9000aa18:	4618      	mov	r0, r3
9000aa1a:	683a      	ldr	r2, [r7, #0]
9000aa1c:	4613      	mov	r3, r2
9000aa1e:	009b      	lsls	r3, r3, #2
9000aa20:	4413      	add	r3, r2
9000aa22:	009b      	lsls	r3, r3, #2
9000aa24:	3335      	adds	r3, #53	; 0x35
9000aa26:	4619      	mov	r1, r3
9000aa28:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aa2c:	9300      	str	r3, [sp, #0]
9000aa2e:	2302      	movs	r3, #2
9000aa30:	220e      	movs	r2, #14
9000aa32:	f001 fe4d 	bl	9000c6d0 <UTIL_LCD_DrawRect>

        UTIL_LCD_DrawRect(15 + (i * 20), 48 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
9000aa36:	687a      	ldr	r2, [r7, #4]
9000aa38:	4613      	mov	r3, r2
9000aa3a:	009b      	lsls	r3, r3, #2
9000aa3c:	4413      	add	r3, r2
9000aa3e:	009b      	lsls	r3, r3, #2
9000aa40:	330f      	adds	r3, #15
9000aa42:	4618      	mov	r0, r3
9000aa44:	683a      	ldr	r2, [r7, #0]
9000aa46:	4613      	mov	r3, r2
9000aa48:	009b      	lsls	r3, r3, #2
9000aa4a:	4413      	add	r3, r2
9000aa4c:	009b      	lsls	r3, r3, #2
9000aa4e:	3330      	adds	r3, #48	; 0x30
9000aa50:	4619      	mov	r1, r3
9000aa52:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aa56:	9300      	str	r3, [sp, #0]
9000aa58:	2302      	movs	r3, #2
9000aa5a:	2202      	movs	r2, #2
9000aa5c:	f001 fe38 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(15 + (i * 20), 57 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
9000aa60:	687a      	ldr	r2, [r7, #4]
9000aa62:	4613      	mov	r3, r2
9000aa64:	009b      	lsls	r3, r3, #2
9000aa66:	4413      	add	r3, r2
9000aa68:	009b      	lsls	r3, r3, #2
9000aa6a:	330f      	adds	r3, #15
9000aa6c:	4618      	mov	r0, r3
9000aa6e:	683a      	ldr	r2, [r7, #0]
9000aa70:	4613      	mov	r3, r2
9000aa72:	009b      	lsls	r3, r3, #2
9000aa74:	4413      	add	r3, r2
9000aa76:	009b      	lsls	r3, r3, #2
9000aa78:	3339      	adds	r3, #57	; 0x39
9000aa7a:	4619      	mov	r1, r3
9000aa7c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aa80:	9300      	str	r3, [sp, #0]
9000aa82:	2302      	movs	r3, #2
9000aa84:	2202      	movs	r2, #2
9000aa86:	f001 fe23 	bl	9000c6d0 <UTIL_LCD_DrawRect>

        UTIL_LCD_DrawRect(24 + (i * 20), 48 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
9000aa8a:	687a      	ldr	r2, [r7, #4]
9000aa8c:	4613      	mov	r3, r2
9000aa8e:	009b      	lsls	r3, r3, #2
9000aa90:	4413      	add	r3, r2
9000aa92:	009b      	lsls	r3, r3, #2
9000aa94:	3318      	adds	r3, #24
9000aa96:	4618      	mov	r0, r3
9000aa98:	683a      	ldr	r2, [r7, #0]
9000aa9a:	4613      	mov	r3, r2
9000aa9c:	009b      	lsls	r3, r3, #2
9000aa9e:	4413      	add	r3, r2
9000aaa0:	009b      	lsls	r3, r3, #2
9000aaa2:	3330      	adds	r3, #48	; 0x30
9000aaa4:	4619      	mov	r1, r3
9000aaa6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aaaa:	9300      	str	r3, [sp, #0]
9000aaac:	2302      	movs	r3, #2
9000aaae:	2202      	movs	r2, #2
9000aab0:	f001 fe0e 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(24 + (i * 20), 57 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
9000aab4:	687a      	ldr	r2, [r7, #4]
9000aab6:	4613      	mov	r3, r2
9000aab8:	009b      	lsls	r3, r3, #2
9000aaba:	4413      	add	r3, r2
9000aabc:	009b      	lsls	r3, r3, #2
9000aabe:	3318      	adds	r3, #24
9000aac0:	4618      	mov	r0, r3
9000aac2:	683a      	ldr	r2, [r7, #0]
9000aac4:	4613      	mov	r3, r2
9000aac6:	009b      	lsls	r3, r3, #2
9000aac8:	4413      	add	r3, r2
9000aaca:	009b      	lsls	r3, r3, #2
9000aacc:	3339      	adds	r3, #57	; 0x39
9000aace:	4619      	mov	r1, r3
9000aad0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000aad4:	9300      	str	r3, [sp, #0]
9000aad6:	2302      	movs	r3, #2
9000aad8:	2202      	movs	r2, #2
9000aada:	f001 fdf9 	bl	9000c6d0 <UTIL_LCD_DrawRect>

        UTIL_LCD_FillRect(18 + (i * 20), 51 + (j * 20), 2, 2, UTIL_LCD_COLOR_WHITE);
9000aade:	687a      	ldr	r2, [r7, #4]
9000aae0:	4613      	mov	r3, r2
9000aae2:	009b      	lsls	r3, r3, #2
9000aae4:	4413      	add	r3, r2
9000aae6:	009b      	lsls	r3, r3, #2
9000aae8:	3312      	adds	r3, #18
9000aaea:	4618      	mov	r0, r3
9000aaec:	683a      	ldr	r2, [r7, #0]
9000aaee:	4613      	mov	r3, r2
9000aaf0:	009b      	lsls	r3, r3, #2
9000aaf2:	4413      	add	r3, r2
9000aaf4:	009b      	lsls	r3, r3, #2
9000aaf6:	3333      	adds	r3, #51	; 0x33
9000aaf8:	4619      	mov	r1, r3
9000aafa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000aafe:	9300      	str	r3, [sp, #0]
9000ab00:	2302      	movs	r3, #2
9000ab02:	2202      	movs	r2, #2
9000ab04:	f001 ff18 	bl	9000c938 <UTIL_LCD_FillRect>
    for (int j = 0; j < 11; j++)
9000ab08:	683b      	ldr	r3, [r7, #0]
9000ab0a:	3301      	adds	r3, #1
9000ab0c:	603b      	str	r3, [r7, #0]
9000ab0e:	683b      	ldr	r3, [r7, #0]
9000ab10:	2b0a      	cmp	r3, #10
9000ab12:	f77f af43 	ble.w	9000a99c <Bomb_Hit+0x18>
  for (int i = 0; i < 23; i++)
9000ab16:	687b      	ldr	r3, [r7, #4]
9000ab18:	3301      	adds	r3, #1
9000ab1a:	607b      	str	r3, [r7, #4]
9000ab1c:	687b      	ldr	r3, [r7, #4]
9000ab1e:	2b16      	cmp	r3, #22
9000ab20:	f77f af39 	ble.w	9000a996 <Bomb_Hit+0x12>
      }
    }
  }
}
9000ab24:	bf00      	nop
9000ab26:	bf00      	nop
9000ab28:	3708      	adds	r7, #8
9000ab2a:	46bd      	mov	sp, r7
9000ab2c:	bd80      	pop	{r7, pc}
9000ab2e:	bf00      	nop
9000ab30:	2000004c 	.word	0x2000004c
9000ab34:	200011cc 	.word	0x200011cc

9000ab38 <Draw_Cvad>:
 * @param  x_move  x position in game table
 * @param y_move  y position in game table
 * @retval None
 */
static void Draw_Cvad(int8_t x_move, int8_t y_move)
{
9000ab38:	b590      	push	{r4, r7, lr}
9000ab3a:	b087      	sub	sp, #28
9000ab3c:	af02      	add	r7, sp, #8
9000ab3e:	4603      	mov	r3, r0
9000ab40:	460a      	mov	r2, r1
9000ab42:	71fb      	strb	r3, [r7, #7]
9000ab44:	4613      	mov	r3, r2
9000ab46:	71bb      	strb	r3, [r7, #6]
  if (tab[x_move][y_move] < 9 && tab[x_move][y_move] > -1)
9000ab48:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ab4c:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ab50:	48d1      	ldr	r0, [pc, #836]	; (9000ae98 <Draw_Cvad+0x360>)
9000ab52:	4613      	mov	r3, r2
9000ab54:	009b      	lsls	r3, r3, #2
9000ab56:	4413      	add	r3, r2
9000ab58:	005b      	lsls	r3, r3, #1
9000ab5a:	4413      	add	r3, r2
9000ab5c:	4403      	add	r3, r0
9000ab5e:	440b      	add	r3, r1
9000ab60:	f993 3000 	ldrsb.w	r3, [r3]
9000ab64:	2b08      	cmp	r3, #8
9000ab66:	dc15      	bgt.n	9000ab94 <Draw_Cvad+0x5c>
9000ab68:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ab6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ab70:	48c9      	ldr	r0, [pc, #804]	; (9000ae98 <Draw_Cvad+0x360>)
9000ab72:	4613      	mov	r3, r2
9000ab74:	009b      	lsls	r3, r3, #2
9000ab76:	4413      	add	r3, r2
9000ab78:	005b      	lsls	r3, r3, #1
9000ab7a:	4413      	add	r3, r2
9000ab7c:	4403      	add	r3, r0
9000ab7e:	440b      	add	r3, r1
9000ab80:	f993 3000 	ldrsb.w	r3, [r3]
9000ab84:	2b00      	cmp	r3, #0
9000ab86:	db05      	blt.n	9000ab94 <Draw_Cvad+0x5c>
  {

    Tiles_open--;
9000ab88:	4bc4      	ldr	r3, [pc, #784]	; (9000ae9c <Draw_Cvad+0x364>)
9000ab8a:	881b      	ldrh	r3, [r3, #0]
9000ab8c:	3b01      	subs	r3, #1
9000ab8e:	b29a      	uxth	r2, r3
9000ab90:	4bc2      	ldr	r3, [pc, #776]	; (9000ae9c <Draw_Cvad+0x364>)
9000ab92:	801a      	strh	r2, [r3, #0]
  }
  UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000ab94:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ab98:	4613      	mov	r3, r2
9000ab9a:	009b      	lsls	r3, r3, #2
9000ab9c:	4413      	add	r3, r2
9000ab9e:	009b      	lsls	r3, r3, #2
9000aba0:	331c      	adds	r3, #28
9000aba2:	4618      	mov	r0, r3
9000aba4:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000aba8:	4613      	mov	r3, r2
9000abaa:	009b      	lsls	r3, r3, #2
9000abac:	4413      	add	r3, r2
9000abae:	009b      	lsls	r3, r3, #2
9000abb0:	332b      	adds	r3, #43	; 0x2b
9000abb2:	4619      	mov	r1, r3
9000abb4:	4bba      	ldr	r3, [pc, #744]	; (9000aea0 <Draw_Cvad+0x368>)
9000abb6:	9300      	str	r3, [sp, #0]
9000abb8:	2312      	movs	r3, #18
9000abba:	2202      	movs	r2, #2
9000abbc:	f001 fd88 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000abc0:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000abc4:	4613      	mov	r3, r2
9000abc6:	009b      	lsls	r3, r3, #2
9000abc8:	4413      	add	r3, r2
9000abca:	009b      	lsls	r3, r3, #2
9000abcc:	330a      	adds	r3, #10
9000abce:	4618      	mov	r0, r3
9000abd0:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000abd4:	4613      	mov	r3, r2
9000abd6:	009b      	lsls	r3, r3, #2
9000abd8:	4413      	add	r3, r2
9000abda:	009b      	lsls	r3, r3, #2
9000abdc:	333d      	adds	r3, #61	; 0x3d
9000abde:	4619      	mov	r1, r3
9000abe0:	4baf      	ldr	r3, [pc, #700]	; (9000aea0 <Draw_Cvad+0x368>)
9000abe2:	9300      	str	r3, [sp, #0]
9000abe4:	2302      	movs	r3, #2
9000abe6:	2214      	movs	r2, #20
9000abe8:	f001 fd72 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000abec:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000abf0:	4613      	mov	r3, r2
9000abf2:	009b      	lsls	r3, r3, #2
9000abf4:	4413      	add	r3, r2
9000abf6:	009b      	lsls	r3, r3, #2
9000abf8:	330a      	adds	r3, #10
9000abfa:	4618      	mov	r0, r3
9000abfc:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ac00:	4613      	mov	r3, r2
9000ac02:	009b      	lsls	r3, r3, #2
9000ac04:	4413      	add	r3, r2
9000ac06:	009b      	lsls	r3, r3, #2
9000ac08:	332b      	adds	r3, #43	; 0x2b
9000ac0a:	4619      	mov	r1, r3
9000ac0c:	4ba4      	ldr	r3, [pc, #656]	; (9000aea0 <Draw_Cvad+0x368>)
9000ac0e:	9300      	str	r3, [sp, #0]
9000ac10:	2302      	movs	r3, #2
9000ac12:	2214      	movs	r2, #20
9000ac14:	f001 fd5c 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000ac18:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac1c:	4613      	mov	r3, r2
9000ac1e:	009b      	lsls	r3, r3, #2
9000ac20:	4413      	add	r3, r2
9000ac22:	009b      	lsls	r3, r3, #2
9000ac24:	330a      	adds	r3, #10
9000ac26:	4618      	mov	r0, r3
9000ac28:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ac2c:	4613      	mov	r3, r2
9000ac2e:	009b      	lsls	r3, r3, #2
9000ac30:	4413      	add	r3, r2
9000ac32:	009b      	lsls	r3, r3, #2
9000ac34:	332b      	adds	r3, #43	; 0x2b
9000ac36:	4619      	mov	r1, r3
9000ac38:	4b99      	ldr	r3, [pc, #612]	; (9000aea0 <Draw_Cvad+0x368>)
9000ac3a:	9300      	str	r3, [sp, #0]
9000ac3c:	2314      	movs	r3, #20
9000ac3e:	2202      	movs	r2, #2
9000ac40:	f001 fd46 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  if (tab[x_move][y_move] > 0 && tab[x_move][y_move] < 9)
9000ac44:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac48:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ac4c:	4892      	ldr	r0, [pc, #584]	; (9000ae98 <Draw_Cvad+0x360>)
9000ac4e:	4613      	mov	r3, r2
9000ac50:	009b      	lsls	r3, r3, #2
9000ac52:	4413      	add	r3, r2
9000ac54:	005b      	lsls	r3, r3, #1
9000ac56:	4413      	add	r3, r2
9000ac58:	4403      	add	r3, r0
9000ac5a:	440b      	add	r3, r1
9000ac5c:	f993 3000 	ldrsb.w	r3, [r3]
9000ac60:	2b00      	cmp	r3, #0
9000ac62:	f340 80ff 	ble.w	9000ae64 <Draw_Cvad+0x32c>
9000ac66:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac6a:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ac6e:	488a      	ldr	r0, [pc, #552]	; (9000ae98 <Draw_Cvad+0x360>)
9000ac70:	4613      	mov	r3, r2
9000ac72:	009b      	lsls	r3, r3, #2
9000ac74:	4413      	add	r3, r2
9000ac76:	005b      	lsls	r3, r3, #1
9000ac78:	4413      	add	r3, r2
9000ac7a:	4403      	add	r3, r0
9000ac7c:	440b      	add	r3, r1
9000ac7e:	f993 3000 	ldrsb.w	r3, [r3]
9000ac82:	2b08      	cmp	r3, #8
9000ac84:	f300 80ee 	bgt.w	9000ae64 <Draw_Cvad+0x32c>
  {
    if (tab[x_move][y_move] == 1)
9000ac88:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac8c:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ac90:	4881      	ldr	r0, [pc, #516]	; (9000ae98 <Draw_Cvad+0x360>)
9000ac92:	4613      	mov	r3, r2
9000ac94:	009b      	lsls	r3, r3, #2
9000ac96:	4413      	add	r3, r2
9000ac98:	005b      	lsls	r3, r3, #1
9000ac9a:	4413      	add	r3, r2
9000ac9c:	4403      	add	r3, r0
9000ac9e:	440b      	add	r3, r1
9000aca0:	f993 3000 	ldrsb.w	r3, [r3]
9000aca4:	2b01      	cmp	r3, #1
9000aca6:	d103      	bne.n	9000acb0 <Draw_Cvad+0x178>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
9000aca8:	487e      	ldr	r0, [pc, #504]	; (9000aea4 <Draw_Cvad+0x36c>)
9000acaa:	f001 faf9 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000acae:	e08c      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 2)
9000acb0:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000acb4:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000acb8:	4877      	ldr	r0, [pc, #476]	; (9000ae98 <Draw_Cvad+0x360>)
9000acba:	4613      	mov	r3, r2
9000acbc:	009b      	lsls	r3, r3, #2
9000acbe:	4413      	add	r3, r2
9000acc0:	005b      	lsls	r3, r3, #1
9000acc2:	4413      	add	r3, r2
9000acc4:	4403      	add	r3, r0
9000acc6:	440b      	add	r3, r1
9000acc8:	f993 3000 	ldrsb.w	r3, [r3]
9000accc:	2b02      	cmp	r3, #2
9000acce:	d104      	bne.n	9000acda <Draw_Cvad+0x1a2>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
9000acd0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
9000acd4:	f001 fae4 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000acd8:	e077      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 3)
9000acda:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000acde:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ace2:	486d      	ldr	r0, [pc, #436]	; (9000ae98 <Draw_Cvad+0x360>)
9000ace4:	4613      	mov	r3, r2
9000ace6:	009b      	lsls	r3, r3, #2
9000ace8:	4413      	add	r3, r2
9000acea:	005b      	lsls	r3, r3, #1
9000acec:	4413      	add	r3, r2
9000acee:	4403      	add	r3, r0
9000acf0:	440b      	add	r3, r1
9000acf2:	f993 3000 	ldrsb.w	r3, [r3]
9000acf6:	2b03      	cmp	r3, #3
9000acf8:	d103      	bne.n	9000ad02 <Draw_Cvad+0x1ca>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000acfa:	486b      	ldr	r0, [pc, #428]	; (9000aea8 <Draw_Cvad+0x370>)
9000acfc:	f001 fad0 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000ad00:	e063      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 4)
9000ad02:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ad06:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ad0a:	4863      	ldr	r0, [pc, #396]	; (9000ae98 <Draw_Cvad+0x360>)
9000ad0c:	4613      	mov	r3, r2
9000ad0e:	009b      	lsls	r3, r3, #2
9000ad10:	4413      	add	r3, r2
9000ad12:	005b      	lsls	r3, r3, #1
9000ad14:	4413      	add	r3, r2
9000ad16:	4403      	add	r3, r0
9000ad18:	440b      	add	r3, r1
9000ad1a:	f993 3000 	ldrsb.w	r3, [r3]
9000ad1e:	2b04      	cmp	r3, #4
9000ad20:	d103      	bne.n	9000ad2a <Draw_Cvad+0x1f2>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_BLUE_DARK);
9000ad22:	4862      	ldr	r0, [pc, #392]	; (9000aeac <Draw_Cvad+0x374>)
9000ad24:	f001 fabc 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000ad28:	e04f      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 5)
9000ad2a:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ad2e:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ad32:	4859      	ldr	r0, [pc, #356]	; (9000ae98 <Draw_Cvad+0x360>)
9000ad34:	4613      	mov	r3, r2
9000ad36:	009b      	lsls	r3, r3, #2
9000ad38:	4413      	add	r3, r2
9000ad3a:	005b      	lsls	r3, r3, #1
9000ad3c:	4413      	add	r3, r2
9000ad3e:	4403      	add	r3, r0
9000ad40:	440b      	add	r3, r1
9000ad42:	f993 3000 	ldrsb.w	r3, [r3]
9000ad46:	2b05      	cmp	r3, #5
9000ad48:	d103      	bne.n	9000ad52 <Draw_Cvad+0x21a>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_PURPLE);
9000ad4a:	4859      	ldr	r0, [pc, #356]	; (9000aeb0 <Draw_Cvad+0x378>)
9000ad4c:	f001 faa8 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000ad50:	e03b      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 6)
9000ad52:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ad56:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ad5a:	484f      	ldr	r0, [pc, #316]	; (9000ae98 <Draw_Cvad+0x360>)
9000ad5c:	4613      	mov	r3, r2
9000ad5e:	009b      	lsls	r3, r3, #2
9000ad60:	4413      	add	r3, r2
9000ad62:	005b      	lsls	r3, r3, #1
9000ad64:	4413      	add	r3, r2
9000ad66:	4403      	add	r3, r0
9000ad68:	440b      	add	r3, r1
9000ad6a:	f993 3000 	ldrsb.w	r3, [r3]
9000ad6e:	2b06      	cmp	r3, #6
9000ad70:	d103      	bne.n	9000ad7a <Draw_Cvad+0x242>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_BLUE_LIGHT);
9000ad72:	4850      	ldr	r0, [pc, #320]	; (9000aeb4 <Draw_Cvad+0x37c>)
9000ad74:	f001 fa94 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000ad78:	e027      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 7)
9000ad7a:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ad7e:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ad82:	4845      	ldr	r0, [pc, #276]	; (9000ae98 <Draw_Cvad+0x360>)
9000ad84:	4613      	mov	r3, r2
9000ad86:	009b      	lsls	r3, r3, #2
9000ad88:	4413      	add	r3, r2
9000ad8a:	005b      	lsls	r3, r3, #1
9000ad8c:	4413      	add	r3, r2
9000ad8e:	4403      	add	r3, r0
9000ad90:	440b      	add	r3, r1
9000ad92:	f993 3000 	ldrsb.w	r3, [r3]
9000ad96:	2b07      	cmp	r3, #7
9000ad98:	d104      	bne.n	9000ada4 <Draw_Cvad+0x26c>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
9000ad9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000ad9e:	f001 fa7f 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
9000ada2:	e012      	b.n	9000adca <Draw_Cvad+0x292>
    else if (tab[x_move][y_move] == 8)
9000ada4:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ada8:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000adac:	483a      	ldr	r0, [pc, #232]	; (9000ae98 <Draw_Cvad+0x360>)
9000adae:	4613      	mov	r3, r2
9000adb0:	009b      	lsls	r3, r3, #2
9000adb2:	4413      	add	r3, r2
9000adb4:	005b      	lsls	r3, r3, #1
9000adb6:	4413      	add	r3, r2
9000adb8:	4403      	add	r3, r0
9000adba:	440b      	add	r3, r1
9000adbc:	f993 3000 	ldrsb.w	r3, [r3]
9000adc0:	2b08      	cmp	r3, #8
9000adc2:	d102      	bne.n	9000adca <Draw_Cvad+0x292>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_GRAY);
9000adc4:	483c      	ldr	r0, [pc, #240]	; (9000aeb8 <Draw_Cvad+0x380>)
9000adc6:	f001 fa6b 	bl	9000c2a0 <UTIL_LCD_SetTextColor>

    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000adca:	4835      	ldr	r0, [pc, #212]	; (9000aea0 <Draw_Cvad+0x368>)
9000adcc:	f001 fa7c 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
    char st;
    sprintf(st, "%1d", tab[x_move][y_move]);
9000add0:	7bfb      	ldrb	r3, [r7, #15]
9000add2:	461c      	mov	r4, r3
9000add4:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000add8:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000addc:	482e      	ldr	r0, [pc, #184]	; (9000ae98 <Draw_Cvad+0x360>)
9000adde:	4613      	mov	r3, r2
9000ade0:	009b      	lsls	r3, r3, #2
9000ade2:	4413      	add	r3, r2
9000ade4:	005b      	lsls	r3, r3, #1
9000ade6:	4413      	add	r3, r2
9000ade8:	4403      	add	r3, r0
9000adea:	440b      	add	r3, r1
9000adec:	f993 3000 	ldrsb.w	r3, [r3]
9000adf0:	461a      	mov	r2, r3
9000adf2:	4932      	ldr	r1, [pc, #200]	; (9000aebc <Draw_Cvad+0x384>)
9000adf4:	4620      	mov	r0, r4
9000adf6:	f002 f983 	bl	9000d100 <siprintf>
    UTIL_LCD_DisplayStringAt(15 + (x_move * 20), 47 + (y_move * 20), (uint8_t *)st, LEFT_MODE);
9000adfa:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000adfe:	4613      	mov	r3, r2
9000ae00:	009b      	lsls	r3, r3, #2
9000ae02:	4413      	add	r3, r2
9000ae04:	009b      	lsls	r3, r3, #2
9000ae06:	330f      	adds	r3, #15
9000ae08:	4618      	mov	r0, r3
9000ae0a:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ae0e:	4613      	mov	r3, r2
9000ae10:	009b      	lsls	r3, r3, #2
9000ae12:	4413      	add	r3, r2
9000ae14:	009b      	lsls	r3, r3, #2
9000ae16:	332f      	adds	r3, #47	; 0x2f
9000ae18:	4619      	mov	r1, r3
9000ae1a:	7bfb      	ldrb	r3, [r7, #15]
9000ae1c:	461a      	mov	r2, r3
9000ae1e:	2303      	movs	r3, #3
9000ae20:	f001 fb92 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
    tab[x_move][y_move] += 10;
9000ae24:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ae28:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ae2c:	481a      	ldr	r0, [pc, #104]	; (9000ae98 <Draw_Cvad+0x360>)
9000ae2e:	4613      	mov	r3, r2
9000ae30:	009b      	lsls	r3, r3, #2
9000ae32:	4413      	add	r3, r2
9000ae34:	005b      	lsls	r3, r3, #1
9000ae36:	4413      	add	r3, r2
9000ae38:	4403      	add	r3, r0
9000ae3a:	440b      	add	r3, r1
9000ae3c:	f993 3000 	ldrsb.w	r3, [r3]
9000ae40:	b2db      	uxtb	r3, r3
9000ae42:	330a      	adds	r3, #10
9000ae44:	b2db      	uxtb	r3, r3
9000ae46:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ae4a:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ae4e:	b25c      	sxtb	r4, r3
9000ae50:	4811      	ldr	r0, [pc, #68]	; (9000ae98 <Draw_Cvad+0x360>)
9000ae52:	4613      	mov	r3, r2
9000ae54:	009b      	lsls	r3, r3, #2
9000ae56:	4413      	add	r3, r2
9000ae58:	005b      	lsls	r3, r3, #1
9000ae5a:	4413      	add	r3, r2
9000ae5c:	4403      	add	r3, r0
9000ae5e:	440b      	add	r3, r1
9000ae60:	4622      	mov	r2, r4
9000ae62:	701a      	strb	r2, [r3, #0]
  }
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 20, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000ae64:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ae68:	4613      	mov	r3, r2
9000ae6a:	009b      	lsls	r3, r3, #2
9000ae6c:	4413      	add	r3, r2
9000ae6e:	009b      	lsls	r3, r3, #2
9000ae70:	330a      	adds	r3, #10
9000ae72:	4618      	mov	r0, r3
9000ae74:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ae78:	4613      	mov	r3, r2
9000ae7a:	009b      	lsls	r3, r3, #2
9000ae7c:	4413      	add	r3, r2
9000ae7e:	009b      	lsls	r3, r3, #2
9000ae80:	332b      	adds	r3, #43	; 0x2b
9000ae82:	4619      	mov	r1, r3
9000ae84:	4b0e      	ldr	r3, [pc, #56]	; (9000aec0 <Draw_Cvad+0x388>)
9000ae86:	9300      	str	r3, [sp, #0]
9000ae88:	2314      	movs	r3, #20
9000ae8a:	2214      	movs	r2, #20
9000ae8c:	f001 fc20 	bl	9000c6d0 <UTIL_LCD_DrawRect>
}
9000ae90:	bf00      	nop
9000ae92:	3714      	adds	r7, #20
9000ae94:	46bd      	mov	sp, r7
9000ae96:	bd90      	pop	{r4, r7, pc}
9000ae98:	200011cc 	.word	0x200011cc
9000ae9c:	2000004e 	.word	0x2000004e
9000aea0:	ffb9c4ca 	.word	0xffb9c4ca
9000aea4:	ff0000ff 	.word	0xff0000ff
9000aea8:	ffff0000 	.word	0xffff0000
9000aeac:	ff002052 	.word	0xff002052
9000aeb0:	ff590d58 	.word	0xff590d58
9000aeb4:	ffd1e4f3 	.word	0xffd1e4f3
9000aeb8:	ff90989e 	.word	0xff90989e
9000aebc:	9000e324 	.word	0x9000e324
9000aec0:	ff4f5251 	.word	0xff4f5251

9000aec4 <GetPosition>:
 * @brief  Configures and gets Touch screen position.
 * @param  None
 * @retval None
 */
static void GetPosition()
{
9000aec4:	b590      	push	{r4, r7, lr}
9000aec6:	b083      	sub	sp, #12
9000aec8:	af02      	add	r7, sp, #8

  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
9000aeca:	4995      	ldr	r1, [pc, #596]	; (9000b120 <GetPosition+0x25c>)
9000aecc:	2000      	movs	r0, #0
9000aece:	f7f8 f81b 	bl	90002f08 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
9000aed2:	4b93      	ldr	r3, [pc, #588]	; (9000b120 <GetPosition+0x25c>)
9000aed4:	685b      	ldr	r3, [r3, #4]
9000aed6:	b29a      	uxth	r2, r3
9000aed8:	4b92      	ldr	r3, [pc, #584]	; (9000b124 <GetPosition+0x260>)
9000aeda:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
9000aedc:	4b90      	ldr	r3, [pc, #576]	; (9000b120 <GetPosition+0x25c>)
9000aede:	689b      	ldr	r3, [r3, #8]
9000aee0:	b29a      	uxth	r2, r3
9000aee2:	4b91      	ldr	r3, [pc, #580]	; (9000b128 <GetPosition+0x264>)
9000aee4:	801a      	strh	r2, [r3, #0]

  if (Px == x && Py == y)
9000aee6:	4b91      	ldr	r3, [pc, #580]	; (9000b12c <GetPosition+0x268>)
9000aee8:	881a      	ldrh	r2, [r3, #0]
9000aeea:	4b8e      	ldr	r3, [pc, #568]	; (9000b124 <GetPosition+0x260>)
9000aeec:	881b      	ldrh	r3, [r3, #0]
9000aeee:	429a      	cmp	r2, r3
9000aef0:	d106      	bne.n	9000af00 <GetPosition+0x3c>
9000aef2:	4b8f      	ldr	r3, [pc, #572]	; (9000b130 <GetPosition+0x26c>)
9000aef4:	881a      	ldrh	r2, [r3, #0]
9000aef6:	4b8c      	ldr	r3, [pc, #560]	; (9000b128 <GetPosition+0x264>)
9000aef8:	881b      	ldrh	r3, [r3, #0]
9000aefa:	429a      	cmp	r2, r3
9000aefc:	f000 81cd 	beq.w	9000b29a <GetPosition+0x3d6>
  {
    return;
  }
  Px = x;
9000af00:	4b88      	ldr	r3, [pc, #544]	; (9000b124 <GetPosition+0x260>)
9000af02:	881a      	ldrh	r2, [r3, #0]
9000af04:	4b89      	ldr	r3, [pc, #548]	; (9000b12c <GetPosition+0x268>)
9000af06:	801a      	strh	r2, [r3, #0]
  Py = y;
9000af08:	4b87      	ldr	r3, [pc, #540]	; (9000b128 <GetPosition+0x264>)
9000af0a:	881a      	ldrh	r2, [r3, #0]
9000af0c:	4b88      	ldr	r3, [pc, #544]	; (9000b130 <GetPosition+0x26c>)
9000af0e:	801a      	strh	r2, [r3, #0]

  // switch flag staus
  if ((x > 90) && (x < 130) && (y > 10) && (y < 35))
9000af10:	4b84      	ldr	r3, [pc, #528]	; (9000b124 <GetPosition+0x260>)
9000af12:	881b      	ldrh	r3, [r3, #0]
9000af14:	2b5a      	cmp	r3, #90	; 0x5a
9000af16:	d959      	bls.n	9000afcc <GetPosition+0x108>
9000af18:	4b82      	ldr	r3, [pc, #520]	; (9000b124 <GetPosition+0x260>)
9000af1a:	881b      	ldrh	r3, [r3, #0]
9000af1c:	2b81      	cmp	r3, #129	; 0x81
9000af1e:	d855      	bhi.n	9000afcc <GetPosition+0x108>
9000af20:	4b81      	ldr	r3, [pc, #516]	; (9000b128 <GetPosition+0x264>)
9000af22:	881b      	ldrh	r3, [r3, #0]
9000af24:	2b0a      	cmp	r3, #10
9000af26:	d951      	bls.n	9000afcc <GetPosition+0x108>
9000af28:	4b7f      	ldr	r3, [pc, #508]	; (9000b128 <GetPosition+0x264>)
9000af2a:	881b      	ldrh	r3, [r3, #0]
9000af2c:	2b22      	cmp	r3, #34	; 0x22
9000af2e:	d84d      	bhi.n	9000afcc <GetPosition+0x108>
  {
    if (flag == 0)
9000af30:	4b80      	ldr	r3, [pc, #512]	; (9000b134 <GetPosition+0x270>)
9000af32:	f993 3000 	ldrsb.w	r3, [r3]
9000af36:	2b00      	cmp	r3, #0
9000af38:	d123      	bne.n	9000af82 <GetPosition+0xbe>
    {

      UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_RED);
9000af3a:	4b7f      	ldr	r3, [pc, #508]	; (9000b138 <GetPosition+0x274>)
9000af3c:	9300      	str	r3, [sp, #0]
9000af3e:	2317      	movs	r3, #23
9000af40:	2202      	movs	r2, #2
9000af42:	210a      	movs	r1, #10
9000af44:	207b      	movs	r0, #123	; 0x7b
9000af46:	f001 fbc3 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_RED);
9000af4a:	4b7b      	ldr	r3, [pc, #492]	; (9000b138 <GetPosition+0x274>)
9000af4c:	9300      	str	r3, [sp, #0]
9000af4e:	2302      	movs	r3, #2
9000af50:	2218      	movs	r2, #24
9000af52:	211f      	movs	r1, #31
9000af54:	2064      	movs	r0, #100	; 0x64
9000af56:	f001 fbbb 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_RED);
9000af5a:	4b77      	ldr	r3, [pc, #476]	; (9000b138 <GetPosition+0x274>)
9000af5c:	9300      	str	r3, [sp, #0]
9000af5e:	2302      	movs	r3, #2
9000af60:	2219      	movs	r2, #25
9000af62:	210a      	movs	r1, #10
9000af64:	2064      	movs	r0, #100	; 0x64
9000af66:	f001 fbb3 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_RED);
9000af6a:	4b73      	ldr	r3, [pc, #460]	; (9000b138 <GetPosition+0x274>)
9000af6c:	9300      	str	r3, [sp, #0]
9000af6e:	2317      	movs	r3, #23
9000af70:	2202      	movs	r2, #2
9000af72:	210a      	movs	r1, #10
9000af74:	2064      	movs	r0, #100	; 0x64
9000af76:	f001 fbab 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      flag = 1;
9000af7a:	4b6e      	ldr	r3, [pc, #440]	; (9000b134 <GetPosition+0x270>)
9000af7c:	2201      	movs	r2, #1
9000af7e:	701a      	strb	r2, [r3, #0]
9000af80:	e024      	b.n	9000afcc <GetPosition+0x108>
    }
    else
    {
      flag = 0;
9000af82:	4b6c      	ldr	r3, [pc, #432]	; (9000b134 <GetPosition+0x270>)
9000af84:	2200      	movs	r2, #0
9000af86:	701a      	strb	r2, [r3, #0]
      // flag marker squear
      UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000af88:	4b6c      	ldr	r3, [pc, #432]	; (9000b13c <GetPosition+0x278>)
9000af8a:	9300      	str	r3, [sp, #0]
9000af8c:	2317      	movs	r3, #23
9000af8e:	2202      	movs	r2, #2
9000af90:	210a      	movs	r1, #10
9000af92:	207b      	movs	r0, #123	; 0x7b
9000af94:	f001 fb9c 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000af98:	4b68      	ldr	r3, [pc, #416]	; (9000b13c <GetPosition+0x278>)
9000af9a:	9300      	str	r3, [sp, #0]
9000af9c:	2302      	movs	r3, #2
9000af9e:	2218      	movs	r2, #24
9000afa0:	211f      	movs	r1, #31
9000afa2:	2064      	movs	r0, #100	; 0x64
9000afa4:	f001 fb94 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
9000afa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000afac:	9300      	str	r3, [sp, #0]
9000afae:	2302      	movs	r3, #2
9000afb0:	2219      	movs	r2, #25
9000afb2:	210a      	movs	r1, #10
9000afb4:	2064      	movs	r0, #100	; 0x64
9000afb6:	f001 fb8b 	bl	9000c6d0 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
9000afba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000afbe:	9300      	str	r3, [sp, #0]
9000afc0:	2317      	movs	r3, #23
9000afc2:	2202      	movs	r2, #2
9000afc4:	210a      	movs	r1, #10
9000afc6:	2064      	movs	r0, #100	; 0x64
9000afc8:	f001 fb82 	bl	9000c6d0 <UTIL_LCD_DrawRect>
    }
  }

  // number set
  if ((x > 12) && (x < 62) && (y > 9) && (y < 34))
9000afcc:	4b55      	ldr	r3, [pc, #340]	; (9000b124 <GetPosition+0x260>)
9000afce:	881b      	ldrh	r3, [r3, #0]
9000afd0:	2b0c      	cmp	r3, #12
9000afd2:	d90d      	bls.n	9000aff0 <GetPosition+0x12c>
9000afd4:	4b53      	ldr	r3, [pc, #332]	; (9000b124 <GetPosition+0x260>)
9000afd6:	881b      	ldrh	r3, [r3, #0]
9000afd8:	2b3d      	cmp	r3, #61	; 0x3d
9000afda:	d809      	bhi.n	9000aff0 <GetPosition+0x12c>
9000afdc:	4b52      	ldr	r3, [pc, #328]	; (9000b128 <GetPosition+0x264>)
9000afde:	881b      	ldrh	r3, [r3, #0]
9000afe0:	2b09      	cmp	r3, #9
9000afe2:	d905      	bls.n	9000aff0 <GetPosition+0x12c>
9000afe4:	4b50      	ldr	r3, [pc, #320]	; (9000b128 <GetPosition+0x264>)
9000afe6:	881b      	ldrh	r3, [r3, #0]
9000afe8:	2b21      	cmp	r3, #33	; 0x21
9000afea:	d801      	bhi.n	9000aff0 <GetPosition+0x12c>
  {
    Set_Bomb_Number();
9000afec:	f000 fafe 	bl	9000b5ec <Set_Bomb_Number>
  }

  // clicks happy face
  if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
9000aff0:	4b4c      	ldr	r3, [pc, #304]	; (9000b124 <GetPosition+0x260>)
9000aff2:	881b      	ldrh	r3, [r3, #0]
9000aff4:	2bdc      	cmp	r3, #220	; 0xdc
9000aff6:	d90d      	bls.n	9000b014 <GetPosition+0x150>
9000aff8:	4b4a      	ldr	r3, [pc, #296]	; (9000b124 <GetPosition+0x260>)
9000affa:	881b      	ldrh	r3, [r3, #0]
9000affc:	2bfe      	cmp	r3, #254	; 0xfe
9000affe:	d809      	bhi.n	9000b014 <GetPosition+0x150>
9000b000:	4b49      	ldr	r3, [pc, #292]	; (9000b128 <GetPosition+0x264>)
9000b002:	881b      	ldrh	r3, [r3, #0]
9000b004:	2b07      	cmp	r3, #7
9000b006:	d905      	bls.n	9000b014 <GetPosition+0x150>
9000b008:	4b47      	ldr	r3, [pc, #284]	; (9000b128 <GetPosition+0x264>)
9000b00a:	881b      	ldrh	r3, [r3, #0]
9000b00c:	2b20      	cmp	r3, #32
9000b00e:	d801      	bhi.n	9000b014 <GetPosition+0x150>
  {
    //
    Reset_Game();
9000b010:	f000 ff28 	bl	9000be64 <Reset_Game>
  }

  // press squears
  if ((x > 10) && (x < 470) && (y > 43) && (y < 263))
9000b014:	4b43      	ldr	r3, [pc, #268]	; (9000b124 <GetPosition+0x260>)
9000b016:	881b      	ldrh	r3, [r3, #0]
9000b018:	2b0a      	cmp	r3, #10
9000b01a:	f240 813f 	bls.w	9000b29c <GetPosition+0x3d8>
9000b01e:	4b41      	ldr	r3, [pc, #260]	; (9000b124 <GetPosition+0x260>)
9000b020:	881b      	ldrh	r3, [r3, #0]
9000b022:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
9000b026:	f080 8139 	bcs.w	9000b29c <GetPosition+0x3d8>
9000b02a:	4b3f      	ldr	r3, [pc, #252]	; (9000b128 <GetPosition+0x264>)
9000b02c:	881b      	ldrh	r3, [r3, #0]
9000b02e:	2b2b      	cmp	r3, #43	; 0x2b
9000b030:	f240 8134 	bls.w	9000b29c <GetPosition+0x3d8>
9000b034:	4b3c      	ldr	r3, [pc, #240]	; (9000b128 <GetPosition+0x264>)
9000b036:	881b      	ldrh	r3, [r3, #0]
9000b038:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
9000b03c:	f200 812e 	bhi.w	9000b29c <GetPosition+0x3d8>
  {
    x = x - 10;
9000b040:	4b38      	ldr	r3, [pc, #224]	; (9000b124 <GetPosition+0x260>)
9000b042:	881b      	ldrh	r3, [r3, #0]
9000b044:	3b0a      	subs	r3, #10
9000b046:	b29a      	uxth	r2, r3
9000b048:	4b36      	ldr	r3, [pc, #216]	; (9000b124 <GetPosition+0x260>)
9000b04a:	801a      	strh	r2, [r3, #0]
    y = y - 43;
9000b04c:	4b36      	ldr	r3, [pc, #216]	; (9000b128 <GetPosition+0x264>)
9000b04e:	881b      	ldrh	r3, [r3, #0]
9000b050:	3b2b      	subs	r3, #43	; 0x2b
9000b052:	b29a      	uxth	r2, r3
9000b054:	4b34      	ldr	r3, [pc, #208]	; (9000b128 <GetPosition+0x264>)
9000b056:	801a      	strh	r2, [r3, #0]
    x = x / 20;
9000b058:	4b32      	ldr	r3, [pc, #200]	; (9000b124 <GetPosition+0x260>)
9000b05a:	881b      	ldrh	r3, [r3, #0]
9000b05c:	4a38      	ldr	r2, [pc, #224]	; (9000b140 <GetPosition+0x27c>)
9000b05e:	fba2 2303 	umull	r2, r3, r2, r3
9000b062:	091b      	lsrs	r3, r3, #4
9000b064:	b29a      	uxth	r2, r3
9000b066:	4b2f      	ldr	r3, [pc, #188]	; (9000b124 <GetPosition+0x260>)
9000b068:	801a      	strh	r2, [r3, #0]
    y = y / 20;
9000b06a:	4b2f      	ldr	r3, [pc, #188]	; (9000b128 <GetPosition+0x264>)
9000b06c:	881b      	ldrh	r3, [r3, #0]
9000b06e:	4a34      	ldr	r2, [pc, #208]	; (9000b140 <GetPosition+0x27c>)
9000b070:	fba2 2303 	umull	r2, r3, r2, r3
9000b074:	091b      	lsrs	r3, r3, #4
9000b076:	b29a      	uxth	r2, r3
9000b078:	4b2b      	ldr	r3, [pc, #172]	; (9000b128 <GetPosition+0x264>)
9000b07a:	801a      	strh	r2, [r3, #0]

    if (y >= 0 && y <= 11 && x <= 23 && x >= 0)
9000b07c:	4b2a      	ldr	r3, [pc, #168]	; (9000b128 <GetPosition+0x264>)
9000b07e:	881b      	ldrh	r3, [r3, #0]
9000b080:	2b0b      	cmp	r3, #11
9000b082:	f200 810b 	bhi.w	9000b29c <GetPosition+0x3d8>
9000b086:	4b27      	ldr	r3, [pc, #156]	; (9000b124 <GetPosition+0x260>)
9000b088:	881b      	ldrh	r3, [r3, #0]
9000b08a:	2b17      	cmp	r3, #23
9000b08c:	f200 8106 	bhi.w	9000b29c <GetPosition+0x3d8>
    {
      if (flag == 1)
9000b090:	4b28      	ldr	r3, [pc, #160]	; (9000b134 <GetPosition+0x270>)
9000b092:	f993 3000 	ldrsb.w	r3, [r3]
9000b096:	2b01      	cmp	r3, #1
9000b098:	f040 8098 	bne.w	9000b1cc <GetPosition+0x308>
      {

        if (tab[x][y] < 9)
9000b09c:	4b21      	ldr	r3, [pc, #132]	; (9000b124 <GetPosition+0x260>)
9000b09e:	881b      	ldrh	r3, [r3, #0]
9000b0a0:	461a      	mov	r2, r3
9000b0a2:	4b21      	ldr	r3, [pc, #132]	; (9000b128 <GetPosition+0x264>)
9000b0a4:	881b      	ldrh	r3, [r3, #0]
9000b0a6:	4618      	mov	r0, r3
9000b0a8:	4926      	ldr	r1, [pc, #152]	; (9000b144 <GetPosition+0x280>)
9000b0aa:	4613      	mov	r3, r2
9000b0ac:	009b      	lsls	r3, r3, #2
9000b0ae:	4413      	add	r3, r2
9000b0b0:	005b      	lsls	r3, r3, #1
9000b0b2:	4413      	add	r3, r2
9000b0b4:	440b      	add	r3, r1
9000b0b6:	4403      	add	r3, r0
9000b0b8:	f993 3000 	ldrsb.w	r3, [r3]
9000b0bc:	2b08      	cmp	r3, #8
9000b0be:	dc43      	bgt.n	9000b148 <GetPosition+0x284>
        {
          Draw_flag(x, y);
9000b0c0:	4b18      	ldr	r3, [pc, #96]	; (9000b124 <GetPosition+0x260>)
9000b0c2:	881b      	ldrh	r3, [r3, #0]
9000b0c4:	b25b      	sxtb	r3, r3
9000b0c6:	4a18      	ldr	r2, [pc, #96]	; (9000b128 <GetPosition+0x264>)
9000b0c8:	8812      	ldrh	r2, [r2, #0]
9000b0ca:	b252      	sxtb	r2, r2
9000b0cc:	4611      	mov	r1, r2
9000b0ce:	4618      	mov	r0, r3
9000b0d0:	f000 fbd2 	bl	9000b878 <Draw_flag>
          tab[x][y] += 20;
9000b0d4:	4b13      	ldr	r3, [pc, #76]	; (9000b124 <GetPosition+0x260>)
9000b0d6:	881b      	ldrh	r3, [r3, #0]
9000b0d8:	461a      	mov	r2, r3
9000b0da:	4b13      	ldr	r3, [pc, #76]	; (9000b128 <GetPosition+0x264>)
9000b0dc:	881b      	ldrh	r3, [r3, #0]
9000b0de:	4618      	mov	r0, r3
9000b0e0:	4918      	ldr	r1, [pc, #96]	; (9000b144 <GetPosition+0x280>)
9000b0e2:	4613      	mov	r3, r2
9000b0e4:	009b      	lsls	r3, r3, #2
9000b0e6:	4413      	add	r3, r2
9000b0e8:	005b      	lsls	r3, r3, #1
9000b0ea:	4413      	add	r3, r2
9000b0ec:	440b      	add	r3, r1
9000b0ee:	4403      	add	r3, r0
9000b0f0:	f993 3000 	ldrsb.w	r3, [r3]
9000b0f4:	b2db      	uxtb	r3, r3
9000b0f6:	3314      	adds	r3, #20
9000b0f8:	b2d9      	uxtb	r1, r3
9000b0fa:	4b0a      	ldr	r3, [pc, #40]	; (9000b124 <GetPosition+0x260>)
9000b0fc:	881b      	ldrh	r3, [r3, #0]
9000b0fe:	461a      	mov	r2, r3
9000b100:	4b09      	ldr	r3, [pc, #36]	; (9000b128 <GetPosition+0x264>)
9000b102:	881b      	ldrh	r3, [r3, #0]
9000b104:	461c      	mov	r4, r3
9000b106:	b248      	sxtb	r0, r1
9000b108:	490e      	ldr	r1, [pc, #56]	; (9000b144 <GetPosition+0x280>)
9000b10a:	4613      	mov	r3, r2
9000b10c:	009b      	lsls	r3, r3, #2
9000b10e:	4413      	add	r3, r2
9000b110:	005b      	lsls	r3, r3, #1
9000b112:	4413      	add	r3, r2
9000b114:	440b      	add	r3, r1
9000b116:	4423      	add	r3, r4
9000b118:	4602      	mov	r2, r0
9000b11a:	701a      	strb	r2, [r3, #0]
9000b11c:	e0be      	b.n	9000b29c <GetPosition+0x3d8>
9000b11e:	bf00      	nop
9000b120:	200012e4 	.word	0x200012e4
9000b124:	200012ca 	.word	0x200012ca
9000b128:	200012cc 	.word	0x200012cc
9000b12c:	200012ce 	.word	0x200012ce
9000b130:	200012d0 	.word	0x200012d0
9000b134:	200012c9 	.word	0x200012c9
9000b138:	ffff0000 	.word	0xffff0000
9000b13c:	ff4f5251 	.word	0xff4f5251
9000b140:	cccccccd 	.word	0xcccccccd
9000b144:	200011cc 	.word	0x200011cc
        }
        else if (tab[x][y] >= 19)
9000b148:	4b56      	ldr	r3, [pc, #344]	; (9000b2a4 <GetPosition+0x3e0>)
9000b14a:	881b      	ldrh	r3, [r3, #0]
9000b14c:	461a      	mov	r2, r3
9000b14e:	4b56      	ldr	r3, [pc, #344]	; (9000b2a8 <GetPosition+0x3e4>)
9000b150:	881b      	ldrh	r3, [r3, #0]
9000b152:	4618      	mov	r0, r3
9000b154:	4955      	ldr	r1, [pc, #340]	; (9000b2ac <GetPosition+0x3e8>)
9000b156:	4613      	mov	r3, r2
9000b158:	009b      	lsls	r3, r3, #2
9000b15a:	4413      	add	r3, r2
9000b15c:	005b      	lsls	r3, r3, #1
9000b15e:	4413      	add	r3, r2
9000b160:	440b      	add	r3, r1
9000b162:	4403      	add	r3, r0
9000b164:	f993 3000 	ldrsb.w	r3, [r3]
9000b168:	2b12      	cmp	r3, #18
9000b16a:	f340 8097 	ble.w	9000b29c <GetPosition+0x3d8>
        {
          Remove_flag(x, y);
9000b16e:	4b4d      	ldr	r3, [pc, #308]	; (9000b2a4 <GetPosition+0x3e0>)
9000b170:	881b      	ldrh	r3, [r3, #0]
9000b172:	b25b      	sxtb	r3, r3
9000b174:	4a4c      	ldr	r2, [pc, #304]	; (9000b2a8 <GetPosition+0x3e4>)
9000b176:	8812      	ldrh	r2, [r2, #0]
9000b178:	b252      	sxtb	r2, r2
9000b17a:	4611      	mov	r1, r2
9000b17c:	4618      	mov	r0, r3
9000b17e:	f000 fc11 	bl	9000b9a4 <Remove_flag>
          tab[x][y] -= 20;
9000b182:	4b48      	ldr	r3, [pc, #288]	; (9000b2a4 <GetPosition+0x3e0>)
9000b184:	881b      	ldrh	r3, [r3, #0]
9000b186:	461a      	mov	r2, r3
9000b188:	4b47      	ldr	r3, [pc, #284]	; (9000b2a8 <GetPosition+0x3e4>)
9000b18a:	881b      	ldrh	r3, [r3, #0]
9000b18c:	4618      	mov	r0, r3
9000b18e:	4947      	ldr	r1, [pc, #284]	; (9000b2ac <GetPosition+0x3e8>)
9000b190:	4613      	mov	r3, r2
9000b192:	009b      	lsls	r3, r3, #2
9000b194:	4413      	add	r3, r2
9000b196:	005b      	lsls	r3, r3, #1
9000b198:	4413      	add	r3, r2
9000b19a:	440b      	add	r3, r1
9000b19c:	4403      	add	r3, r0
9000b19e:	f993 3000 	ldrsb.w	r3, [r3]
9000b1a2:	b2db      	uxtb	r3, r3
9000b1a4:	3b14      	subs	r3, #20
9000b1a6:	b2d9      	uxtb	r1, r3
9000b1a8:	4b3e      	ldr	r3, [pc, #248]	; (9000b2a4 <GetPosition+0x3e0>)
9000b1aa:	881b      	ldrh	r3, [r3, #0]
9000b1ac:	461a      	mov	r2, r3
9000b1ae:	4b3e      	ldr	r3, [pc, #248]	; (9000b2a8 <GetPosition+0x3e4>)
9000b1b0:	881b      	ldrh	r3, [r3, #0]
9000b1b2:	461c      	mov	r4, r3
9000b1b4:	b248      	sxtb	r0, r1
9000b1b6:	493d      	ldr	r1, [pc, #244]	; (9000b2ac <GetPosition+0x3e8>)
9000b1b8:	4613      	mov	r3, r2
9000b1ba:	009b      	lsls	r3, r3, #2
9000b1bc:	4413      	add	r3, r2
9000b1be:	005b      	lsls	r3, r3, #1
9000b1c0:	4413      	add	r3, r2
9000b1c2:	440b      	add	r3, r1
9000b1c4:	4423      	add	r3, r4
9000b1c6:	4602      	mov	r2, r0
9000b1c8:	701a      	strb	r2, [r3, #0]
9000b1ca:	e067      	b.n	9000b29c <GetPosition+0x3d8>
        }
      }
      else
      {
        if (tab[x][y] < 10)
9000b1cc:	4b35      	ldr	r3, [pc, #212]	; (9000b2a4 <GetPosition+0x3e0>)
9000b1ce:	881b      	ldrh	r3, [r3, #0]
9000b1d0:	461a      	mov	r2, r3
9000b1d2:	4b35      	ldr	r3, [pc, #212]	; (9000b2a8 <GetPosition+0x3e4>)
9000b1d4:	881b      	ldrh	r3, [r3, #0]
9000b1d6:	4618      	mov	r0, r3
9000b1d8:	4934      	ldr	r1, [pc, #208]	; (9000b2ac <GetPosition+0x3e8>)
9000b1da:	4613      	mov	r3, r2
9000b1dc:	009b      	lsls	r3, r3, #2
9000b1de:	4413      	add	r3, r2
9000b1e0:	005b      	lsls	r3, r3, #1
9000b1e2:	4413      	add	r3, r2
9000b1e4:	440b      	add	r3, r1
9000b1e6:	4403      	add	r3, r0
9000b1e8:	f993 3000 	ldrsb.w	r3, [r3]
9000b1ec:	2b09      	cmp	r3, #9
9000b1ee:	dc09      	bgt.n	9000b204 <GetPosition+0x340>
          Draw_Cvad(x, y);
9000b1f0:	4b2c      	ldr	r3, [pc, #176]	; (9000b2a4 <GetPosition+0x3e0>)
9000b1f2:	881b      	ldrh	r3, [r3, #0]
9000b1f4:	b25b      	sxtb	r3, r3
9000b1f6:	4a2c      	ldr	r2, [pc, #176]	; (9000b2a8 <GetPosition+0x3e4>)
9000b1f8:	8812      	ldrh	r2, [r2, #0]
9000b1fa:	b252      	sxtb	r2, r2
9000b1fc:	4611      	mov	r1, r2
9000b1fe:	4618      	mov	r0, r3
9000b200:	f7ff fc9a 	bl	9000ab38 <Draw_Cvad>
        if (tab[x][y] == 0)
9000b204:	4b27      	ldr	r3, [pc, #156]	; (9000b2a4 <GetPosition+0x3e0>)
9000b206:	881b      	ldrh	r3, [r3, #0]
9000b208:	461a      	mov	r2, r3
9000b20a:	4b27      	ldr	r3, [pc, #156]	; (9000b2a8 <GetPosition+0x3e4>)
9000b20c:	881b      	ldrh	r3, [r3, #0]
9000b20e:	4618      	mov	r0, r3
9000b210:	4926      	ldr	r1, [pc, #152]	; (9000b2ac <GetPosition+0x3e8>)
9000b212:	4613      	mov	r3, r2
9000b214:	009b      	lsls	r3, r3, #2
9000b216:	4413      	add	r3, r2
9000b218:	005b      	lsls	r3, r3, #1
9000b21a:	4413      	add	r3, r2
9000b21c:	440b      	add	r3, r1
9000b21e:	4403      	add	r3, r0
9000b220:	f993 3000 	ldrsb.w	r3, [r3]
9000b224:	2b00      	cmp	r3, #0
9000b226:	d10a      	bne.n	9000b23e <GetPosition+0x37a>
        {
          Open_empty(x, y);
9000b228:	4b1e      	ldr	r3, [pc, #120]	; (9000b2a4 <GetPosition+0x3e0>)
9000b22a:	881b      	ldrh	r3, [r3, #0]
9000b22c:	b25b      	sxtb	r3, r3
9000b22e:	4a1e      	ldr	r2, [pc, #120]	; (9000b2a8 <GetPosition+0x3e4>)
9000b230:	8812      	ldrh	r2, [r2, #0]
9000b232:	b252      	sxtb	r2, r2
9000b234:	4611      	mov	r1, r2
9000b236:	4618      	mov	r0, r3
9000b238:	f000 f83c 	bl	9000b2b4 <Open_empty>
9000b23c:	e02e      	b.n	9000b29c <GetPosition+0x3d8>
        }
        else if (tab[x][y] == -1)
9000b23e:	4b19      	ldr	r3, [pc, #100]	; (9000b2a4 <GetPosition+0x3e0>)
9000b240:	881b      	ldrh	r3, [r3, #0]
9000b242:	461a      	mov	r2, r3
9000b244:	4b18      	ldr	r3, [pc, #96]	; (9000b2a8 <GetPosition+0x3e4>)
9000b246:	881b      	ldrh	r3, [r3, #0]
9000b248:	4618      	mov	r0, r3
9000b24a:	4918      	ldr	r1, [pc, #96]	; (9000b2ac <GetPosition+0x3e8>)
9000b24c:	4613      	mov	r3, r2
9000b24e:	009b      	lsls	r3, r3, #2
9000b250:	4413      	add	r3, r2
9000b252:	005b      	lsls	r3, r3, #1
9000b254:	4413      	add	r3, r2
9000b256:	440b      	add	r3, r1
9000b258:	4403      	add	r3, r0
9000b25a:	f993 3000 	ldrsb.w	r3, [r3]
9000b25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000b262:	d11b      	bne.n	9000b29c <GetPosition+0x3d8>
        {
          UTIL_LCD_FillRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_RED);
9000b264:	4b0f      	ldr	r3, [pc, #60]	; (9000b2a4 <GetPosition+0x3e0>)
9000b266:	881b      	ldrh	r3, [r3, #0]
9000b268:	461a      	mov	r2, r3
9000b26a:	4613      	mov	r3, r2
9000b26c:	009b      	lsls	r3, r3, #2
9000b26e:	4413      	add	r3, r2
9000b270:	009b      	lsls	r3, r3, #2
9000b272:	330a      	adds	r3, #10
9000b274:	4618      	mov	r0, r3
9000b276:	4b0c      	ldr	r3, [pc, #48]	; (9000b2a8 <GetPosition+0x3e4>)
9000b278:	881b      	ldrh	r3, [r3, #0]
9000b27a:	461a      	mov	r2, r3
9000b27c:	4613      	mov	r3, r2
9000b27e:	009b      	lsls	r3, r3, #2
9000b280:	4413      	add	r3, r2
9000b282:	009b      	lsls	r3, r3, #2
9000b284:	332b      	adds	r3, #43	; 0x2b
9000b286:	4619      	mov	r1, r3
9000b288:	4b09      	ldr	r3, [pc, #36]	; (9000b2b0 <GetPosition+0x3ec>)
9000b28a:	9300      	str	r3, [sp, #0]
9000b28c:	2314      	movs	r3, #20
9000b28e:	2214      	movs	r2, #20
9000b290:	f001 fb52 	bl	9000c938 <UTIL_LCD_FillRect>
          Bomb_Hit();
9000b294:	f7ff fb76 	bl	9000a984 <Bomb_Hit>
9000b298:	e000      	b.n	9000b29c <GetPosition+0x3d8>
    return;
9000b29a:	bf00      	nop
        }
      }
    }
  }
}
9000b29c:	3704      	adds	r7, #4
9000b29e:	46bd      	mov	sp, r7
9000b2a0:	bd90      	pop	{r4, r7, pc}
9000b2a2:	bf00      	nop
9000b2a4:	200012ca 	.word	0x200012ca
9000b2a8:	200012cc 	.word	0x200012cc
9000b2ac:	200011cc 	.word	0x200011cc
9000b2b0:	ffff0000 	.word	0xffff0000

9000b2b4 <Open_empty>:
 * @param  x  x position in game table
 * @param y  y position in game table
 * @retval None
 */
static void Open_empty(int8_t x, int8_t y)
{
9000b2b4:	b590      	push	{r4, r7, lr}
9000b2b6:	b083      	sub	sp, #12
9000b2b8:	af00      	add	r7, sp, #0
9000b2ba:	4603      	mov	r3, r0
9000b2bc:	460a      	mov	r2, r1
9000b2be:	71fb      	strb	r3, [r7, #7]
9000b2c0:	4613      	mov	r3, r2
9000b2c2:	71bb      	strb	r3, [r7, #6]

  Draw_Cvad(x, y);
9000b2c4:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b2c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b2cc:	4611      	mov	r1, r2
9000b2ce:	4618      	mov	r0, r3
9000b2d0:	f7ff fc32 	bl	9000ab38 <Draw_Cvad>
  tab[x][y] += 10;
9000b2d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b2d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000b2dc:	48ba      	ldr	r0, [pc, #744]	; (9000b5c8 <Open_empty+0x314>)
9000b2de:	4613      	mov	r3, r2
9000b2e0:	009b      	lsls	r3, r3, #2
9000b2e2:	4413      	add	r3, r2
9000b2e4:	005b      	lsls	r3, r3, #1
9000b2e6:	4413      	add	r3, r2
9000b2e8:	4403      	add	r3, r0
9000b2ea:	440b      	add	r3, r1
9000b2ec:	f993 3000 	ldrsb.w	r3, [r3]
9000b2f0:	b2db      	uxtb	r3, r3
9000b2f2:	330a      	adds	r3, #10
9000b2f4:	b2db      	uxtb	r3, r3
9000b2f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b2fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000b2fe:	b25c      	sxtb	r4, r3
9000b300:	48b1      	ldr	r0, [pc, #708]	; (9000b5c8 <Open_empty+0x314>)
9000b302:	4613      	mov	r3, r2
9000b304:	009b      	lsls	r3, r3, #2
9000b306:	4413      	add	r3, r2
9000b308:	005b      	lsls	r3, r3, #1
9000b30a:	4413      	add	r3, r2
9000b30c:	4403      	add	r3, r0
9000b30e:	440b      	add	r3, r1
9000b310:	4622      	mov	r2, r4
9000b312:	701a      	strb	r2, [r3, #0]
  if (y > 0)
9000b314:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b318:	2b00      	cmp	r3, #0
9000b31a:	f340 8084 	ble.w	9000b426 <Open_empty+0x172>
  {
    if (tab[x][y - 1] == 0)
9000b31e:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b322:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b326:	1e59      	subs	r1, r3, #1
9000b328:	48a7      	ldr	r0, [pc, #668]	; (9000b5c8 <Open_empty+0x314>)
9000b32a:	4613      	mov	r3, r2
9000b32c:	009b      	lsls	r3, r3, #2
9000b32e:	4413      	add	r3, r2
9000b330:	005b      	lsls	r3, r3, #1
9000b332:	4413      	add	r3, r2
9000b334:	4403      	add	r3, r0
9000b336:	440b      	add	r3, r1
9000b338:	f993 3000 	ldrsb.w	r3, [r3]
9000b33c:	2b00      	cmp	r3, #0
9000b33e:	d10a      	bne.n	9000b356 <Open_empty+0xa2>
      Open_empty(x, y - 1);
9000b340:	79bb      	ldrb	r3, [r7, #6]
9000b342:	3b01      	subs	r3, #1
9000b344:	b2db      	uxtb	r3, r3
9000b346:	b25a      	sxtb	r2, r3
9000b348:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b34c:	4611      	mov	r1, r2
9000b34e:	4618      	mov	r0, r3
9000b350:	f7ff ffb0 	bl	9000b2b4 <Open_empty>
9000b354:	e009      	b.n	9000b36a <Open_empty+0xb6>
    else
      Draw_Cvad(x, y - 1);
9000b356:	79bb      	ldrb	r3, [r7, #6]
9000b358:	3b01      	subs	r3, #1
9000b35a:	b2db      	uxtb	r3, r3
9000b35c:	b25a      	sxtb	r2, r3
9000b35e:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b362:	4611      	mov	r1, r2
9000b364:	4618      	mov	r0, r3
9000b366:	f7ff fbe7 	bl	9000ab38 <Draw_Cvad>
    if (x > 0)
9000b36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b36e:	2b00      	cmp	r3, #0
9000b370:	dd2a      	ble.n	9000b3c8 <Open_empty+0x114>
    {
      if (tab[x - 1][y - 1] == 0)
9000b372:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b376:	1e5a      	subs	r2, r3, #1
9000b378:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b37c:	1e59      	subs	r1, r3, #1
9000b37e:	4892      	ldr	r0, [pc, #584]	; (9000b5c8 <Open_empty+0x314>)
9000b380:	4613      	mov	r3, r2
9000b382:	009b      	lsls	r3, r3, #2
9000b384:	4413      	add	r3, r2
9000b386:	005b      	lsls	r3, r3, #1
9000b388:	4413      	add	r3, r2
9000b38a:	4403      	add	r3, r0
9000b38c:	440b      	add	r3, r1
9000b38e:	f993 3000 	ldrsb.w	r3, [r3]
9000b392:	2b00      	cmp	r3, #0
9000b394:	d10c      	bne.n	9000b3b0 <Open_empty+0xfc>
        Open_empty(x - 1, y - 1);
9000b396:	79fb      	ldrb	r3, [r7, #7]
9000b398:	3b01      	subs	r3, #1
9000b39a:	b2db      	uxtb	r3, r3
9000b39c:	b25a      	sxtb	r2, r3
9000b39e:	79bb      	ldrb	r3, [r7, #6]
9000b3a0:	3b01      	subs	r3, #1
9000b3a2:	b2db      	uxtb	r3, r3
9000b3a4:	b25b      	sxtb	r3, r3
9000b3a6:	4619      	mov	r1, r3
9000b3a8:	4610      	mov	r0, r2
9000b3aa:	f7ff ff83 	bl	9000b2b4 <Open_empty>
9000b3ae:	e00b      	b.n	9000b3c8 <Open_empty+0x114>
      else
        Draw_Cvad(x - 1, y - 1);
9000b3b0:	79fb      	ldrb	r3, [r7, #7]
9000b3b2:	3b01      	subs	r3, #1
9000b3b4:	b2db      	uxtb	r3, r3
9000b3b6:	b25a      	sxtb	r2, r3
9000b3b8:	79bb      	ldrb	r3, [r7, #6]
9000b3ba:	3b01      	subs	r3, #1
9000b3bc:	b2db      	uxtb	r3, r3
9000b3be:	b25b      	sxtb	r3, r3
9000b3c0:	4619      	mov	r1, r3
9000b3c2:	4610      	mov	r0, r2
9000b3c4:	f7ff fbb8 	bl	9000ab38 <Draw_Cvad>
    }
    if (x < 22)
9000b3c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b3cc:	2b15      	cmp	r3, #21
9000b3ce:	dc2a      	bgt.n	9000b426 <Open_empty+0x172>
    {
      if (tab[x + 1][y - 1] == 0)
9000b3d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b3d4:	1c5a      	adds	r2, r3, #1
9000b3d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b3da:	1e59      	subs	r1, r3, #1
9000b3dc:	487a      	ldr	r0, [pc, #488]	; (9000b5c8 <Open_empty+0x314>)
9000b3de:	4613      	mov	r3, r2
9000b3e0:	009b      	lsls	r3, r3, #2
9000b3e2:	4413      	add	r3, r2
9000b3e4:	005b      	lsls	r3, r3, #1
9000b3e6:	4413      	add	r3, r2
9000b3e8:	4403      	add	r3, r0
9000b3ea:	440b      	add	r3, r1
9000b3ec:	f993 3000 	ldrsb.w	r3, [r3]
9000b3f0:	2b00      	cmp	r3, #0
9000b3f2:	d10c      	bne.n	9000b40e <Open_empty+0x15a>
        Open_empty(x + 1, y - 1);
9000b3f4:	79fb      	ldrb	r3, [r7, #7]
9000b3f6:	3301      	adds	r3, #1
9000b3f8:	b2db      	uxtb	r3, r3
9000b3fa:	b25a      	sxtb	r2, r3
9000b3fc:	79bb      	ldrb	r3, [r7, #6]
9000b3fe:	3b01      	subs	r3, #1
9000b400:	b2db      	uxtb	r3, r3
9000b402:	b25b      	sxtb	r3, r3
9000b404:	4619      	mov	r1, r3
9000b406:	4610      	mov	r0, r2
9000b408:	f7ff ff54 	bl	9000b2b4 <Open_empty>
9000b40c:	e00b      	b.n	9000b426 <Open_empty+0x172>
      else
        Draw_Cvad(x + 1, y - 1);
9000b40e:	79fb      	ldrb	r3, [r7, #7]
9000b410:	3301      	adds	r3, #1
9000b412:	b2db      	uxtb	r3, r3
9000b414:	b25a      	sxtb	r2, r3
9000b416:	79bb      	ldrb	r3, [r7, #6]
9000b418:	3b01      	subs	r3, #1
9000b41a:	b2db      	uxtb	r3, r3
9000b41c:	b25b      	sxtb	r3, r3
9000b41e:	4619      	mov	r1, r3
9000b420:	4610      	mov	r0, r2
9000b422:	f7ff fb89 	bl	9000ab38 <Draw_Cvad>
    }
  }
  if (x > 0)
9000b426:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b42a:	2b00      	cmp	r3, #0
9000b42c:	dd25      	ble.n	9000b47a <Open_empty+0x1c6>
  {
    if (tab[x - 1][y] == 0)
9000b42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b432:	1e5a      	subs	r2, r3, #1
9000b434:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000b438:	4863      	ldr	r0, [pc, #396]	; (9000b5c8 <Open_empty+0x314>)
9000b43a:	4613      	mov	r3, r2
9000b43c:	009b      	lsls	r3, r3, #2
9000b43e:	4413      	add	r3, r2
9000b440:	005b      	lsls	r3, r3, #1
9000b442:	4413      	add	r3, r2
9000b444:	4403      	add	r3, r0
9000b446:	440b      	add	r3, r1
9000b448:	f993 3000 	ldrsb.w	r3, [r3]
9000b44c:	2b00      	cmp	r3, #0
9000b44e:	d10a      	bne.n	9000b466 <Open_empty+0x1b2>
      Open_empty(x - 1, y);
9000b450:	79fb      	ldrb	r3, [r7, #7]
9000b452:	3b01      	subs	r3, #1
9000b454:	b2db      	uxtb	r3, r3
9000b456:	b25b      	sxtb	r3, r3
9000b458:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b45c:	4611      	mov	r1, r2
9000b45e:	4618      	mov	r0, r3
9000b460:	f7ff ff28 	bl	9000b2b4 <Open_empty>
9000b464:	e009      	b.n	9000b47a <Open_empty+0x1c6>
    else
      Draw_Cvad(x - 1, y);
9000b466:	79fb      	ldrb	r3, [r7, #7]
9000b468:	3b01      	subs	r3, #1
9000b46a:	b2db      	uxtb	r3, r3
9000b46c:	b25b      	sxtb	r3, r3
9000b46e:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b472:	4611      	mov	r1, r2
9000b474:	4618      	mov	r0, r3
9000b476:	f7ff fb5f 	bl	9000ab38 <Draw_Cvad>
  }
  if (x < 22)
9000b47a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b47e:	2b15      	cmp	r3, #21
9000b480:	dc25      	bgt.n	9000b4ce <Open_empty+0x21a>
  {
    if (tab[x + 1][y] == 0)
9000b482:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b486:	1c5a      	adds	r2, r3, #1
9000b488:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000b48c:	484e      	ldr	r0, [pc, #312]	; (9000b5c8 <Open_empty+0x314>)
9000b48e:	4613      	mov	r3, r2
9000b490:	009b      	lsls	r3, r3, #2
9000b492:	4413      	add	r3, r2
9000b494:	005b      	lsls	r3, r3, #1
9000b496:	4413      	add	r3, r2
9000b498:	4403      	add	r3, r0
9000b49a:	440b      	add	r3, r1
9000b49c:	f993 3000 	ldrsb.w	r3, [r3]
9000b4a0:	2b00      	cmp	r3, #0
9000b4a2:	d10a      	bne.n	9000b4ba <Open_empty+0x206>
      Open_empty(x + 1, y);
9000b4a4:	79fb      	ldrb	r3, [r7, #7]
9000b4a6:	3301      	adds	r3, #1
9000b4a8:	b2db      	uxtb	r3, r3
9000b4aa:	b25b      	sxtb	r3, r3
9000b4ac:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b4b0:	4611      	mov	r1, r2
9000b4b2:	4618      	mov	r0, r3
9000b4b4:	f7ff fefe 	bl	9000b2b4 <Open_empty>
9000b4b8:	e009      	b.n	9000b4ce <Open_empty+0x21a>
    else
      Draw_Cvad(x + 1, y);
9000b4ba:	79fb      	ldrb	r3, [r7, #7]
9000b4bc:	3301      	adds	r3, #1
9000b4be:	b2db      	uxtb	r3, r3
9000b4c0:	b25b      	sxtb	r3, r3
9000b4c2:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b4c6:	4611      	mov	r1, r2
9000b4c8:	4618      	mov	r0, r3
9000b4ca:	f7ff fb35 	bl	9000ab38 <Draw_Cvad>
  }
  if (y < 10)
9000b4ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b4d2:	2b09      	cmp	r3, #9
9000b4d4:	f300 8086 	bgt.w	9000b5e4 <Open_empty+0x330>
  {
    if (tab[x][y + 1] == 0)
9000b4d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b4dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b4e0:	1c59      	adds	r1, r3, #1
9000b4e2:	4839      	ldr	r0, [pc, #228]	; (9000b5c8 <Open_empty+0x314>)
9000b4e4:	4613      	mov	r3, r2
9000b4e6:	009b      	lsls	r3, r3, #2
9000b4e8:	4413      	add	r3, r2
9000b4ea:	005b      	lsls	r3, r3, #1
9000b4ec:	4413      	add	r3, r2
9000b4ee:	4403      	add	r3, r0
9000b4f0:	440b      	add	r3, r1
9000b4f2:	f993 3000 	ldrsb.w	r3, [r3]
9000b4f6:	2b00      	cmp	r3, #0
9000b4f8:	d10a      	bne.n	9000b510 <Open_empty+0x25c>
      Open_empty(x, y + 1);
9000b4fa:	79bb      	ldrb	r3, [r7, #6]
9000b4fc:	3301      	adds	r3, #1
9000b4fe:	b2db      	uxtb	r3, r3
9000b500:	b25a      	sxtb	r2, r3
9000b502:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b506:	4611      	mov	r1, r2
9000b508:	4618      	mov	r0, r3
9000b50a:	f7ff fed3 	bl	9000b2b4 <Open_empty>
9000b50e:	e009      	b.n	9000b524 <Open_empty+0x270>
    else
      Draw_Cvad(x, y + 1);
9000b510:	79bb      	ldrb	r3, [r7, #6]
9000b512:	3301      	adds	r3, #1
9000b514:	b2db      	uxtb	r3, r3
9000b516:	b25a      	sxtb	r2, r3
9000b518:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b51c:	4611      	mov	r1, r2
9000b51e:	4618      	mov	r0, r3
9000b520:	f7ff fb0a 	bl	9000ab38 <Draw_Cvad>
    if (x > 0)
9000b524:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b528:	2b00      	cmp	r3, #0
9000b52a:	dd2a      	ble.n	9000b582 <Open_empty+0x2ce>
    {
      if (tab[x - 1][y + 1] == 0)
9000b52c:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b530:	1e5a      	subs	r2, r3, #1
9000b532:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b536:	1c59      	adds	r1, r3, #1
9000b538:	4823      	ldr	r0, [pc, #140]	; (9000b5c8 <Open_empty+0x314>)
9000b53a:	4613      	mov	r3, r2
9000b53c:	009b      	lsls	r3, r3, #2
9000b53e:	4413      	add	r3, r2
9000b540:	005b      	lsls	r3, r3, #1
9000b542:	4413      	add	r3, r2
9000b544:	4403      	add	r3, r0
9000b546:	440b      	add	r3, r1
9000b548:	f993 3000 	ldrsb.w	r3, [r3]
9000b54c:	2b00      	cmp	r3, #0
9000b54e:	d10c      	bne.n	9000b56a <Open_empty+0x2b6>
        Open_empty(x - 1, y + 1);
9000b550:	79fb      	ldrb	r3, [r7, #7]
9000b552:	3b01      	subs	r3, #1
9000b554:	b2db      	uxtb	r3, r3
9000b556:	b25a      	sxtb	r2, r3
9000b558:	79bb      	ldrb	r3, [r7, #6]
9000b55a:	3301      	adds	r3, #1
9000b55c:	b2db      	uxtb	r3, r3
9000b55e:	b25b      	sxtb	r3, r3
9000b560:	4619      	mov	r1, r3
9000b562:	4610      	mov	r0, r2
9000b564:	f7ff fea6 	bl	9000b2b4 <Open_empty>
9000b568:	e00b      	b.n	9000b582 <Open_empty+0x2ce>
      else
        Draw_Cvad(x - 1, y + 1);
9000b56a:	79fb      	ldrb	r3, [r7, #7]
9000b56c:	3b01      	subs	r3, #1
9000b56e:	b2db      	uxtb	r3, r3
9000b570:	b25a      	sxtb	r2, r3
9000b572:	79bb      	ldrb	r3, [r7, #6]
9000b574:	3301      	adds	r3, #1
9000b576:	b2db      	uxtb	r3, r3
9000b578:	b25b      	sxtb	r3, r3
9000b57a:	4619      	mov	r1, r3
9000b57c:	4610      	mov	r0, r2
9000b57e:	f7ff fadb 	bl	9000ab38 <Draw_Cvad>
    }
    if (x < 22)
9000b582:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b586:	2b15      	cmp	r3, #21
9000b588:	dc2c      	bgt.n	9000b5e4 <Open_empty+0x330>
    {
      if (tab[x + 1][y + 1] == 0)
9000b58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b58e:	1c5a      	adds	r2, r3, #1
9000b590:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b594:	1c59      	adds	r1, r3, #1
9000b596:	480c      	ldr	r0, [pc, #48]	; (9000b5c8 <Open_empty+0x314>)
9000b598:	4613      	mov	r3, r2
9000b59a:	009b      	lsls	r3, r3, #2
9000b59c:	4413      	add	r3, r2
9000b59e:	005b      	lsls	r3, r3, #1
9000b5a0:	4413      	add	r3, r2
9000b5a2:	4403      	add	r3, r0
9000b5a4:	440b      	add	r3, r1
9000b5a6:	f993 3000 	ldrsb.w	r3, [r3]
9000b5aa:	2b00      	cmp	r3, #0
9000b5ac:	d10e      	bne.n	9000b5cc <Open_empty+0x318>
        Open_empty(x + 1, y + 1);
9000b5ae:	79fb      	ldrb	r3, [r7, #7]
9000b5b0:	3301      	adds	r3, #1
9000b5b2:	b2db      	uxtb	r3, r3
9000b5b4:	b25a      	sxtb	r2, r3
9000b5b6:	79bb      	ldrb	r3, [r7, #6]
9000b5b8:	3301      	adds	r3, #1
9000b5ba:	b2db      	uxtb	r3, r3
9000b5bc:	b25b      	sxtb	r3, r3
9000b5be:	4619      	mov	r1, r3
9000b5c0:	4610      	mov	r0, r2
9000b5c2:	f7ff fe77 	bl	9000b2b4 <Open_empty>
      else
        Draw_Cvad(x + 1, y + 1);
    }
  }
}
9000b5c6:	e00d      	b.n	9000b5e4 <Open_empty+0x330>
9000b5c8:	200011cc 	.word	0x200011cc
        Draw_Cvad(x + 1, y + 1);
9000b5cc:	79fb      	ldrb	r3, [r7, #7]
9000b5ce:	3301      	adds	r3, #1
9000b5d0:	b2db      	uxtb	r3, r3
9000b5d2:	b25a      	sxtb	r2, r3
9000b5d4:	79bb      	ldrb	r3, [r7, #6]
9000b5d6:	3301      	adds	r3, #1
9000b5d8:	b2db      	uxtb	r3, r3
9000b5da:	b25b      	sxtb	r3, r3
9000b5dc:	4619      	mov	r1, r3
9000b5de:	4610      	mov	r0, r2
9000b5e0:	f7ff faaa 	bl	9000ab38 <Draw_Cvad>
}
9000b5e4:	bf00      	nop
9000b5e6:	370c      	adds	r7, #12
9000b5e8:	46bd      	mov	sp, r7
9000b5ea:	bd90      	pop	{r4, r7, pc}

9000b5ec <Set_Bomb_Number>:
 * @brief  load bomb insert window
 * @param  None
 * @retval None
 */
static void Set_Bomb_Number()
{
9000b5ec:	b580      	push	{r7, lr}
9000b5ee:	b084      	sub	sp, #16
9000b5f0:	af02      	add	r7, sp, #8
  Game_State = 2;
9000b5f2:	4b96      	ldr	r3, [pc, #600]	; (9000b84c <Set_Bomb_Number+0x260>)
9000b5f4:	2202      	movs	r2, #2
9000b5f6:	701a      	strb	r2, [r3, #0]
  Tmp_Mine_Num = 0;
9000b5f8:	4b95      	ldr	r3, [pc, #596]	; (9000b850 <Set_Bomb_Number+0x264>)
9000b5fa:	2200      	movs	r2, #0
9000b5fc:	801a      	strh	r2, [r3, #0]

  // mine number selection section
  UTIL_LCD_FillRect(10, 41, x_size - 16, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000b5fe:	4b95      	ldr	r3, [pc, #596]	; (9000b854 <Set_Bomb_Number+0x268>)
9000b600:	681b      	ldr	r3, [r3, #0]
9000b602:	f1a3 0210 	sub.w	r2, r3, #16
9000b606:	4b94      	ldr	r3, [pc, #592]	; (9000b858 <Set_Bomb_Number+0x26c>)
9000b608:	681b      	ldr	r3, [r3, #0]
9000b60a:	3b32      	subs	r3, #50	; 0x32
9000b60c:	4993      	ldr	r1, [pc, #588]	; (9000b85c <Set_Bomb_Number+0x270>)
9000b60e:	9100      	str	r1, [sp, #0]
9000b610:	2129      	movs	r1, #41	; 0x29
9000b612:	200a      	movs	r0, #10
9000b614:	f001 f990 	bl	9000c938 <UTIL_LCD_FillRect>
  UTIL_LCD_DrawRect(8, 41, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000b618:	4b8e      	ldr	r3, [pc, #568]	; (9000b854 <Set_Bomb_Number+0x268>)
9000b61a:	681b      	ldr	r3, [r3, #0]
9000b61c:	f1a3 0210 	sub.w	r2, r3, #16
9000b620:	4b8f      	ldr	r3, [pc, #572]	; (9000b860 <Set_Bomb_Number+0x274>)
9000b622:	9300      	str	r3, [sp, #0]
9000b624:	2302      	movs	r3, #2
9000b626:	2129      	movs	r1, #41	; 0x29
9000b628:	2008      	movs	r0, #8
9000b62a:	f001 f851 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 41, 2, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000b62e:	4b8a      	ldr	r3, [pc, #552]	; (9000b858 <Set_Bomb_Number+0x26c>)
9000b630:	681b      	ldr	r3, [r3, #0]
9000b632:	3b32      	subs	r3, #50	; 0x32
9000b634:	4a8a      	ldr	r2, [pc, #552]	; (9000b860 <Set_Bomb_Number+0x274>)
9000b636:	9200      	str	r2, [sp, #0]
9000b638:	2202      	movs	r2, #2
9000b63a:	2129      	movs	r1, #41	; 0x29
9000b63c:	2008      	movs	r0, #8
9000b63e:	f001 f847 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 41, 2, y_size - 50, UTIL_LCD_COLOR_WHITE);
9000b642:	4b84      	ldr	r3, [pc, #528]	; (9000b854 <Set_Bomb_Number+0x268>)
9000b644:	681b      	ldr	r3, [r3, #0]
9000b646:	f1a3 000a 	sub.w	r0, r3, #10
9000b64a:	4b83      	ldr	r3, [pc, #524]	; (9000b858 <Set_Bomb_Number+0x26c>)
9000b64c:	681b      	ldr	r3, [r3, #0]
9000b64e:	3b32      	subs	r3, #50	; 0x32
9000b650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000b654:	9200      	str	r2, [sp, #0]
9000b656:	2202      	movs	r2, #2
9000b658:	2129      	movs	r1, #41	; 0x29
9000b65a:	f001 f839 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, y_size - 9, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
9000b65e:	4b7e      	ldr	r3, [pc, #504]	; (9000b858 <Set_Bomb_Number+0x26c>)
9000b660:	681b      	ldr	r3, [r3, #0]
9000b662:	f1a3 0109 	sub.w	r1, r3, #9
9000b666:	4b7b      	ldr	r3, [pc, #492]	; (9000b854 <Set_Bomb_Number+0x268>)
9000b668:	681b      	ldr	r3, [r3, #0]
9000b66a:	f1a3 0210 	sub.w	r2, r3, #16
9000b66e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000b672:	9300      	str	r3, [sp, #0]
9000b674:	2302      	movs	r3, #2
9000b676:	2008      	movs	r0, #8
9000b678:	f001 f82a 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  int8_t i = 1;
9000b67c:	2301      	movs	r3, #1
9000b67e:	71fb      	strb	r3, [r7, #7]
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000b680:	4876      	ldr	r0, [pc, #472]	; (9000b85c <Set_Bomb_Number+0x270>)
9000b682:	f000 fe21 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
9000b686:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000b68a:	f000 fe09 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
9000b68e:	4875      	ldr	r0, [pc, #468]	; (9000b864 <Set_Bomb_Number+0x278>)
9000b690:	f000 fe2e 	bl	9000c2f0 <UTIL_LCD_SetFont>

  char st;
  sprintf(st, "%1d", 0);
9000b694:	793b      	ldrb	r3, [r7, #4]
9000b696:	2200      	movs	r2, #0
9000b698:	4973      	ldr	r1, [pc, #460]	; (9000b868 <Set_Bomb_Number+0x27c>)
9000b69a:	4618      	mov	r0, r3
9000b69c:	f001 fd30 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(170 + (1 * 55), 60 + (3 * 55), (uint8_t *)st, LEFT_MODE);
9000b6a0:	793b      	ldrb	r3, [r7, #4]
9000b6a2:	461a      	mov	r2, r3
9000b6a4:	2303      	movs	r3, #3
9000b6a6:	21e1      	movs	r1, #225	; 0xe1
9000b6a8:	20e1      	movs	r0, #225	; 0xe1
9000b6aa:	f000 ff4d 	bl	9000c548 <UTIL_LCD_DisplayStringAt>

  sprintf(st, "%1d", 0);
9000b6ae:	793b      	ldrb	r3, [r7, #4]
9000b6b0:	2200      	movs	r2, #0
9000b6b2:	496d      	ldr	r1, [pc, #436]	; (9000b868 <Set_Bomb_Number+0x27c>)
9000b6b4:	4618      	mov	r0, r3
9000b6b6:	f001 fd23 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(160 + (2 * 55), 60 + (3 * 55), (uint8_t *)"OK", LEFT_MODE);
9000b6ba:	2303      	movs	r3, #3
9000b6bc:	4a6b      	ldr	r2, [pc, #428]	; (9000b86c <Set_Bomb_Number+0x280>)
9000b6be:	21e1      	movs	r1, #225	; 0xe1
9000b6c0:	f44f 7087 	mov.w	r0, #270	; 0x10e
9000b6c4:	f000 ff40 	bl	9000c548 <UTIL_LCD_DisplayStringAt>

  sprintf(st, "%1d", 0);
9000b6c8:	793b      	ldrb	r3, [r7, #4]
9000b6ca:	2200      	movs	r2, #0
9000b6cc:	4966      	ldr	r1, [pc, #408]	; (9000b868 <Set_Bomb_Number+0x27c>)
9000b6ce:	4618      	mov	r0, r3
9000b6d0:	f001 fd16 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(152 + (0 * 55), 60 + (3 * 55), (uint8_t *)"CLR", LEFT_MODE);
9000b6d4:	2303      	movs	r3, #3
9000b6d6:	4a66      	ldr	r2, [pc, #408]	; (9000b870 <Set_Bomb_Number+0x284>)
9000b6d8:	21e1      	movs	r1, #225	; 0xe1
9000b6da:	2098      	movs	r0, #152	; 0x98
9000b6dc:	f000 ff34 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
  for (int8_t y = 0; y < 4; y++)
9000b6e0:	2300      	movs	r3, #0
9000b6e2:	71bb      	strb	r3, [r7, #6]
9000b6e4:	e09d      	b.n	9000b822 <Set_Bomb_Number+0x236>
    for (int8_t x = 0; x < 3; x++)
9000b6e6:	2300      	movs	r3, #0
9000b6e8:	717b      	strb	r3, [r7, #5]
9000b6ea:	e08f      	b.n	9000b80c <Set_Bomb_Number+0x220>
    {
      {
        UTIL_LCD_DrawRect(203 + (x * 55), 43 + (y * 55), 2, 55, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000b6ec:	f997 2005 	ldrsb.w	r2, [r7, #5]
9000b6f0:	4613      	mov	r3, r2
9000b6f2:	00db      	lsls	r3, r3, #3
9000b6f4:	1a9b      	subs	r3, r3, r2
9000b6f6:	00db      	lsls	r3, r3, #3
9000b6f8:	1a9b      	subs	r3, r3, r2
9000b6fa:	33cb      	adds	r3, #203	; 0xcb
9000b6fc:	4618      	mov	r0, r3
9000b6fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b702:	4613      	mov	r3, r2
9000b704:	00db      	lsls	r3, r3, #3
9000b706:	1a9b      	subs	r3, r3, r2
9000b708:	00db      	lsls	r3, r3, #3
9000b70a:	1a9b      	subs	r3, r3, r2
9000b70c:	332b      	adds	r3, #43	; 0x2b
9000b70e:	4619      	mov	r1, r3
9000b710:	4b53      	ldr	r3, [pc, #332]	; (9000b860 <Set_Bomb_Number+0x274>)
9000b712:	9300      	str	r3, [sp, #0]
9000b714:	2337      	movs	r3, #55	; 0x37
9000b716:	2202      	movs	r2, #2
9000b718:	f000 ffda 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 43 + (y * 55), 55, 2, UTIL_LCD_COLOR_WHITE);
9000b71c:	f997 2005 	ldrsb.w	r2, [r7, #5]
9000b720:	4613      	mov	r3, r2
9000b722:	00db      	lsls	r3, r3, #3
9000b724:	1a9b      	subs	r3, r3, r2
9000b726:	00db      	lsls	r3, r3, #3
9000b728:	1a9b      	subs	r3, r3, r2
9000b72a:	3396      	adds	r3, #150	; 0x96
9000b72c:	4618      	mov	r0, r3
9000b72e:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b732:	4613      	mov	r3, r2
9000b734:	00db      	lsls	r3, r3, #3
9000b736:	1a9b      	subs	r3, r3, r2
9000b738:	00db      	lsls	r3, r3, #3
9000b73a:	1a9b      	subs	r3, r3, r2
9000b73c:	332b      	adds	r3, #43	; 0x2b
9000b73e:	4619      	mov	r1, r3
9000b740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000b744:	9300      	str	r3, [sp, #0]
9000b746:	2302      	movs	r3, #2
9000b748:	2237      	movs	r2, #55	; 0x37
9000b74a:	f000 ffc1 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 43 + (y * 55), 2, 55, UTIL_LCD_COLOR_WHITE);
9000b74e:	f997 2005 	ldrsb.w	r2, [r7, #5]
9000b752:	4613      	mov	r3, r2
9000b754:	00db      	lsls	r3, r3, #3
9000b756:	1a9b      	subs	r3, r3, r2
9000b758:	00db      	lsls	r3, r3, #3
9000b75a:	1a9b      	subs	r3, r3, r2
9000b75c:	3396      	adds	r3, #150	; 0x96
9000b75e:	4618      	mov	r0, r3
9000b760:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b764:	4613      	mov	r3, r2
9000b766:	00db      	lsls	r3, r3, #3
9000b768:	1a9b      	subs	r3, r3, r2
9000b76a:	00db      	lsls	r3, r3, #3
9000b76c:	1a9b      	subs	r3, r3, r2
9000b76e:	332b      	adds	r3, #43	; 0x2b
9000b770:	4619      	mov	r1, r3
9000b772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000b776:	9300      	str	r3, [sp, #0]
9000b778:	2337      	movs	r3, #55	; 0x37
9000b77a:	2202      	movs	r2, #2
9000b77c:	f000 ffa8 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 96 + (y * 55), 55, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000b780:	f997 2005 	ldrsb.w	r2, [r7, #5]
9000b784:	4613      	mov	r3, r2
9000b786:	00db      	lsls	r3, r3, #3
9000b788:	1a9b      	subs	r3, r3, r2
9000b78a:	00db      	lsls	r3, r3, #3
9000b78c:	1a9b      	subs	r3, r3, r2
9000b78e:	3396      	adds	r3, #150	; 0x96
9000b790:	4618      	mov	r0, r3
9000b792:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b796:	4613      	mov	r3, r2
9000b798:	00db      	lsls	r3, r3, #3
9000b79a:	1a9b      	subs	r3, r3, r2
9000b79c:	00db      	lsls	r3, r3, #3
9000b79e:	1a9b      	subs	r3, r3, r2
9000b7a0:	3360      	adds	r3, #96	; 0x60
9000b7a2:	4619      	mov	r1, r3
9000b7a4:	4b2e      	ldr	r3, [pc, #184]	; (9000b860 <Set_Bomb_Number+0x274>)
9000b7a6:	9300      	str	r3, [sp, #0]
9000b7a8:	2302      	movs	r3, #2
9000b7aa:	2237      	movs	r2, #55	; 0x37
9000b7ac:	f000 ff90 	bl	9000c6d0 <UTIL_LCD_DrawRect>
        if (y < 3)
9000b7b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b7b4:	2b02      	cmp	r3, #2
9000b7b6:	dc23      	bgt.n	9000b800 <Set_Bomb_Number+0x214>
        {
          sprintf(st, "%1d", i++);
9000b7b8:	793b      	ldrb	r3, [r7, #4]
9000b7ba:	4618      	mov	r0, r3
9000b7bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b7c0:	b2d3      	uxtb	r3, r2
9000b7c2:	3301      	adds	r3, #1
9000b7c4:	b2db      	uxtb	r3, r3
9000b7c6:	71fb      	strb	r3, [r7, #7]
9000b7c8:	4613      	mov	r3, r2
9000b7ca:	461a      	mov	r2, r3
9000b7cc:	4926      	ldr	r1, [pc, #152]	; (9000b868 <Set_Bomb_Number+0x27c>)
9000b7ce:	f001 fc97 	bl	9000d100 <siprintf>
          UTIL_LCD_DisplayStringAt(170 + (x * 55), 60 + (y * 55), (uint8_t *)st, LEFT_MODE);
9000b7d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
9000b7d6:	4613      	mov	r3, r2
9000b7d8:	00db      	lsls	r3, r3, #3
9000b7da:	1a9b      	subs	r3, r3, r2
9000b7dc:	00db      	lsls	r3, r3, #3
9000b7de:	1a9b      	subs	r3, r3, r2
9000b7e0:	33aa      	adds	r3, #170	; 0xaa
9000b7e2:	4618      	mov	r0, r3
9000b7e4:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b7e8:	4613      	mov	r3, r2
9000b7ea:	00db      	lsls	r3, r3, #3
9000b7ec:	1a9b      	subs	r3, r3, r2
9000b7ee:	00db      	lsls	r3, r3, #3
9000b7f0:	1a9b      	subs	r3, r3, r2
9000b7f2:	333c      	adds	r3, #60	; 0x3c
9000b7f4:	4619      	mov	r1, r3
9000b7f6:	793b      	ldrb	r3, [r7, #4]
9000b7f8:	461a      	mov	r2, r3
9000b7fa:	2303      	movs	r3, #3
9000b7fc:	f000 fea4 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
    for (int8_t x = 0; x < 3; x++)
9000b800:	f997 3005 	ldrsb.w	r3, [r7, #5]
9000b804:	b2db      	uxtb	r3, r3
9000b806:	3301      	adds	r3, #1
9000b808:	b2db      	uxtb	r3, r3
9000b80a:	717b      	strb	r3, [r7, #5]
9000b80c:	f997 3005 	ldrsb.w	r3, [r7, #5]
9000b810:	2b02      	cmp	r3, #2
9000b812:	f77f af6b 	ble.w	9000b6ec <Set_Bomb_Number+0x100>
  for (int8_t y = 0; y < 4; y++)
9000b816:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b81a:	b2db      	uxtb	r3, r3
9000b81c:	3301      	adds	r3, #1
9000b81e:	b2db      	uxtb	r3, r3
9000b820:	71bb      	strb	r3, [r7, #6]
9000b822:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000b826:	2b03      	cmp	r3, #3
9000b828:	f77f af5d 	ble.w	9000b6e6 <Set_Bomb_Number+0xfa>
        }
      }
    }

  UTIL_LCD_FillRect(30, 125, 100, 50, UTIL_LCD_COLOR_BLACK);
9000b82c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000b830:	9300      	str	r3, [sp, #0]
9000b832:	2332      	movs	r3, #50	; 0x32
9000b834:	2264      	movs	r2, #100	; 0x64
9000b836:	217d      	movs	r1, #125	; 0x7d
9000b838:	201e      	movs	r0, #30
9000b83a:	f001 f87d 	bl	9000c938 <UTIL_LCD_FillRect>

  UTIL_LCD_SetFont(&Font16);
9000b83e:	480d      	ldr	r0, [pc, #52]	; (9000b874 <Set_Bomb_Number+0x288>)
9000b840:	f000 fd56 	bl	9000c2f0 <UTIL_LCD_SetFont>
}
9000b844:	bf00      	nop
9000b846:	3708      	adds	r7, #8
9000b848:	46bd      	mov	sp, r7
9000b84a:	bd80      	pop	{r7, pc}
9000b84c:	2000004c 	.word	0x2000004c
9000b850:	200012dc 	.word	0x200012dc
9000b854:	200012d4 	.word	0x200012d4
9000b858:	200012d8 	.word	0x200012d8
9000b85c:	ffb9c4ca 	.word	0xffb9c4ca
9000b860:	ff4f5251 	.word	0xff4f5251
9000b864:	20000050 	.word	0x20000050
9000b868:	9000e324 	.word	0x9000e324
9000b86c:	9000e328 	.word	0x9000e328
9000b870:	9000e32c 	.word	0x9000e32c
9000b874:	20000058 	.word	0x20000058

9000b878 <Draw_flag>:
 * @param  x  x position in game table
 * @param y  y position in game table
 * @retval None
 */
static void Draw_flag(int8_t x, int8_t y)
{
9000b878:	b580      	push	{r7, lr}
9000b87a:	b086      	sub	sp, #24
9000b87c:	af02      	add	r7, sp, #8
9000b87e:	4603      	mov	r3, r0
9000b880:	460a      	mov	r2, r1
9000b882:	71fb      	strb	r3, [r7, #7]
9000b884:	4613      	mov	r3, r2
9000b886:	71bb      	strb	r3, [r7, #6]
  UTIL_LCD_DrawRect(20 + (x * 20), 47 + (y * 20), 2, 9, UTIL_LCD_COLOR_BLACK);
9000b888:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000b88c:	1c5a      	adds	r2, r3, #1
9000b88e:	4613      	mov	r3, r2
9000b890:	009b      	lsls	r3, r3, #2
9000b892:	4413      	add	r3, r2
9000b894:	009b      	lsls	r3, r3, #2
9000b896:	4618      	mov	r0, r3
9000b898:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b89c:	4613      	mov	r3, r2
9000b89e:	009b      	lsls	r3, r3, #2
9000b8a0:	4413      	add	r3, r2
9000b8a2:	009b      	lsls	r3, r3, #2
9000b8a4:	332f      	adds	r3, #47	; 0x2f
9000b8a6:	4619      	mov	r1, r3
9000b8a8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000b8ac:	9300      	str	r3, [sp, #0]
9000b8ae:	2309      	movs	r3, #9
9000b8b0:	2202      	movs	r2, #2
9000b8b2:	f000 ff0d 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(16 + (x * 20), 56 + (y * 20), 8, 2, UTIL_LCD_COLOR_BLACK);
9000b8b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b8ba:	4613      	mov	r3, r2
9000b8bc:	009b      	lsls	r3, r3, #2
9000b8be:	4413      	add	r3, r2
9000b8c0:	009b      	lsls	r3, r3, #2
9000b8c2:	3310      	adds	r3, #16
9000b8c4:	4618      	mov	r0, r3
9000b8c6:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b8ca:	4613      	mov	r3, r2
9000b8cc:	009b      	lsls	r3, r3, #2
9000b8ce:	4413      	add	r3, r2
9000b8d0:	009b      	lsls	r3, r3, #2
9000b8d2:	3338      	adds	r3, #56	; 0x38
9000b8d4:	4619      	mov	r1, r3
9000b8d6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000b8da:	9300      	str	r3, [sp, #0]
9000b8dc:	2302      	movs	r3, #2
9000b8de:	2208      	movs	r2, #8
9000b8e0:	f000 fef6 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(14 + (x * 20), 58 + (y * 20), 12, 2, UTIL_LCD_COLOR_BLACK);
9000b8e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b8e8:	4613      	mov	r3, r2
9000b8ea:	009b      	lsls	r3, r3, #2
9000b8ec:	4413      	add	r3, r2
9000b8ee:	009b      	lsls	r3, r3, #2
9000b8f0:	330e      	adds	r3, #14
9000b8f2:	4618      	mov	r0, r3
9000b8f4:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b8f8:	4613      	mov	r3, r2
9000b8fa:	009b      	lsls	r3, r3, #2
9000b8fc:	4413      	add	r3, r2
9000b8fe:	009b      	lsls	r3, r3, #2
9000b900:	333a      	adds	r3, #58	; 0x3a
9000b902:	4619      	mov	r1, r3
9000b904:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000b908:	9300      	str	r3, [sp, #0]
9000b90a:	2302      	movs	r3, #2
9000b90c:	220c      	movs	r2, #12
9000b90e:	f000 fedf 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_FillRect(16 + (x * 20), 47 + (y * 20), 4, 5, UTIL_LCD_COLOR_RED);
9000b912:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b916:	4613      	mov	r3, r2
9000b918:	009b      	lsls	r3, r3, #2
9000b91a:	4413      	add	r3, r2
9000b91c:	009b      	lsls	r3, r3, #2
9000b91e:	3310      	adds	r3, #16
9000b920:	4618      	mov	r0, r3
9000b922:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b926:	4613      	mov	r3, r2
9000b928:	009b      	lsls	r3, r3, #2
9000b92a:	4413      	add	r3, r2
9000b92c:	009b      	lsls	r3, r3, #2
9000b92e:	332f      	adds	r3, #47	; 0x2f
9000b930:	4619      	mov	r1, r3
9000b932:	4b18      	ldr	r3, [pc, #96]	; (9000b994 <Draw_flag+0x11c>)
9000b934:	9300      	str	r3, [sp, #0]
9000b936:	2305      	movs	r3, #5
9000b938:	2204      	movs	r2, #4
9000b93a:	f000 fffd 	bl	9000c938 <UTIL_LCD_FillRect>

  Counter_Mine--;
9000b93e:	4b16      	ldr	r3, [pc, #88]	; (9000b998 <Draw_flag+0x120>)
9000b940:	681b      	ldr	r3, [r3, #0]
9000b942:	3b01      	subs	r3, #1
9000b944:	4a14      	ldr	r2, [pc, #80]	; (9000b998 <Draw_flag+0x120>)
9000b946:	6013      	str	r3, [r2, #0]
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000b948:	4812      	ldr	r0, [pc, #72]	; (9000b994 <Draw_flag+0x11c>)
9000b94a:	f000 fca9 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
9000b94e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000b952:	f000 fcb9 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font16);
9000b956:	4811      	ldr	r0, [pc, #68]	; (9000b99c <Draw_flag+0x124>)
9000b958:	f000 fcca 	bl	9000c2f0 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(12, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
9000b95c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000b960:	9300      	str	r3, [sp, #0]
9000b962:	2319      	movs	r3, #25
9000b964:	2232      	movs	r2, #50	; 0x32
9000b966:	2109      	movs	r1, #9
9000b968:	200c      	movs	r0, #12
9000b96a:	f000 ffe5 	bl	9000c938 <UTIL_LCD_FillRect>
  char st[3];
  sprintf(st, "%3d", Counter_Mine);
9000b96e:	4b0a      	ldr	r3, [pc, #40]	; (9000b998 <Draw_flag+0x120>)
9000b970:	681a      	ldr	r2, [r3, #0]
9000b972:	f107 030c 	add.w	r3, r7, #12
9000b976:	490a      	ldr	r1, [pc, #40]	; (9000b9a0 <Draw_flag+0x128>)
9000b978:	4618      	mov	r0, r3
9000b97a:	f001 fbc1 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(20, 15, (uint8_t *)st, LEFT_MODE);
9000b97e:	f107 020c 	add.w	r2, r7, #12
9000b982:	2303      	movs	r3, #3
9000b984:	210f      	movs	r1, #15
9000b986:	2014      	movs	r0, #20
9000b988:	f000 fdde 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
}
9000b98c:	bf00      	nop
9000b98e:	3710      	adds	r7, #16
9000b990:	46bd      	mov	sp, r7
9000b992:	bd80      	pop	{r7, pc}
9000b994:	ffff0000 	.word	0xffff0000
9000b998:	20000048 	.word	0x20000048
9000b99c:	20000058 	.word	0x20000058
9000b9a0:	9000e320 	.word	0x9000e320

9000b9a4 <Remove_flag>:
 * @param  x  x position in game table
 * @param y  y position in game table
 * @retval None
 */
static void Remove_flag(int8_t x, int8_t y)
{
9000b9a4:	b580      	push	{r7, lr}
9000b9a6:	b086      	sub	sp, #24
9000b9a8:	af02      	add	r7, sp, #8
9000b9aa:	4603      	mov	r3, r0
9000b9ac:	460a      	mov	r2, r1
9000b9ae:	71fb      	strb	r3, [r7, #7]
9000b9b0:	4613      	mov	r3, r2
9000b9b2:	71bb      	strb	r3, [r7, #6]
  UTIL_LCD_FillRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000b9b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b9b8:	4613      	mov	r3, r2
9000b9ba:	009b      	lsls	r3, r3, #2
9000b9bc:	4413      	add	r3, r2
9000b9be:	009b      	lsls	r3, r3, #2
9000b9c0:	330a      	adds	r3, #10
9000b9c2:	4618      	mov	r0, r3
9000b9c4:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b9c8:	4613      	mov	r3, r2
9000b9ca:	009b      	lsls	r3, r3, #2
9000b9cc:	4413      	add	r3, r2
9000b9ce:	009b      	lsls	r3, r3, #2
9000b9d0:	332b      	adds	r3, #43	; 0x2b
9000b9d2:	4619      	mov	r1, r3
9000b9d4:	4b45      	ldr	r3, [pc, #276]	; (9000baec <Remove_flag+0x148>)
9000b9d6:	9300      	str	r3, [sp, #0]
9000b9d8:	2314      	movs	r3, #20
9000b9da:	2214      	movs	r2, #20
9000b9dc:	f000 ffac 	bl	9000c938 <UTIL_LCD_FillRect>

  UTIL_LCD_DrawRect(28 + (x * 20), 43 + (y * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000b9e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000b9e4:	4613      	mov	r3, r2
9000b9e6:	009b      	lsls	r3, r3, #2
9000b9e8:	4413      	add	r3, r2
9000b9ea:	009b      	lsls	r3, r3, #2
9000b9ec:	331c      	adds	r3, #28
9000b9ee:	4618      	mov	r0, r3
9000b9f0:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000b9f4:	4613      	mov	r3, r2
9000b9f6:	009b      	lsls	r3, r3, #2
9000b9f8:	4413      	add	r3, r2
9000b9fa:	009b      	lsls	r3, r3, #2
9000b9fc:	332b      	adds	r3, #43	; 0x2b
9000b9fe:	4619      	mov	r1, r3
9000ba00:	4b3b      	ldr	r3, [pc, #236]	; (9000baf0 <Remove_flag+0x14c>)
9000ba02:	9300      	str	r3, [sp, #0]
9000ba04:	2312      	movs	r3, #18
9000ba06:	2202      	movs	r2, #2
9000ba08:	f000 fe62 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 61 + (y * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000ba0c:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ba10:	4613      	mov	r3, r2
9000ba12:	009b      	lsls	r3, r3, #2
9000ba14:	4413      	add	r3, r2
9000ba16:	009b      	lsls	r3, r3, #2
9000ba18:	330a      	adds	r3, #10
9000ba1a:	4618      	mov	r0, r3
9000ba1c:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ba20:	4613      	mov	r3, r2
9000ba22:	009b      	lsls	r3, r3, #2
9000ba24:	4413      	add	r3, r2
9000ba26:	009b      	lsls	r3, r3, #2
9000ba28:	333d      	adds	r3, #61	; 0x3d
9000ba2a:	4619      	mov	r1, r3
9000ba2c:	4b30      	ldr	r3, [pc, #192]	; (9000baf0 <Remove_flag+0x14c>)
9000ba2e:	9300      	str	r3, [sp, #0]
9000ba30:	2302      	movs	r3, #2
9000ba32:	2214      	movs	r2, #20
9000ba34:	f000 fe4c 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 20, 2, UTIL_LCD_COLOR_WHITE);
9000ba38:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ba3c:	4613      	mov	r3, r2
9000ba3e:	009b      	lsls	r3, r3, #2
9000ba40:	4413      	add	r3, r2
9000ba42:	009b      	lsls	r3, r3, #2
9000ba44:	330a      	adds	r3, #10
9000ba46:	4618      	mov	r0, r3
9000ba48:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ba4c:	4613      	mov	r3, r2
9000ba4e:	009b      	lsls	r3, r3, #2
9000ba50:	4413      	add	r3, r2
9000ba52:	009b      	lsls	r3, r3, #2
9000ba54:	332b      	adds	r3, #43	; 0x2b
9000ba56:	4619      	mov	r1, r3
9000ba58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000ba5c:	9300      	str	r3, [sp, #0]
9000ba5e:	2302      	movs	r3, #2
9000ba60:	2214      	movs	r2, #20
9000ba62:	f000 fe35 	bl	9000c6d0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 2, 20, UTIL_LCD_COLOR_WHITE);
9000ba66:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ba6a:	4613      	mov	r3, r2
9000ba6c:	009b      	lsls	r3, r3, #2
9000ba6e:	4413      	add	r3, r2
9000ba70:	009b      	lsls	r3, r3, #2
9000ba72:	330a      	adds	r3, #10
9000ba74:	4618      	mov	r0, r3
9000ba76:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ba7a:	4613      	mov	r3, r2
9000ba7c:	009b      	lsls	r3, r3, #2
9000ba7e:	4413      	add	r3, r2
9000ba80:	009b      	lsls	r3, r3, #2
9000ba82:	332b      	adds	r3, #43	; 0x2b
9000ba84:	4619      	mov	r1, r3
9000ba86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000ba8a:	9300      	str	r3, [sp, #0]
9000ba8c:	2314      	movs	r3, #20
9000ba8e:	2202      	movs	r2, #2
9000ba90:	f000 fe1e 	bl	9000c6d0 <UTIL_LCD_DrawRect>

  Counter_Mine++;
9000ba94:	4b17      	ldr	r3, [pc, #92]	; (9000baf4 <Remove_flag+0x150>)
9000ba96:	681b      	ldr	r3, [r3, #0]
9000ba98:	3301      	adds	r3, #1
9000ba9a:	4a16      	ldr	r2, [pc, #88]	; (9000baf4 <Remove_flag+0x150>)
9000ba9c:	6013      	str	r3, [r2, #0]
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000ba9e:	4816      	ldr	r0, [pc, #88]	; (9000baf8 <Remove_flag+0x154>)
9000baa0:	f000 fbfe 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
9000baa4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000baa8:	f000 fc0e 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font16);
9000baac:	4813      	ldr	r0, [pc, #76]	; (9000bafc <Remove_flag+0x158>)
9000baae:	f000 fc1f 	bl	9000c2f0 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(12, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
9000bab2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000bab6:	9300      	str	r3, [sp, #0]
9000bab8:	2319      	movs	r3, #25
9000baba:	2232      	movs	r2, #50	; 0x32
9000babc:	2109      	movs	r1, #9
9000babe:	200c      	movs	r0, #12
9000bac0:	f000 ff3a 	bl	9000c938 <UTIL_LCD_FillRect>
  char st[3];
  sprintf(st, "%3d", Counter_Mine);
9000bac4:	4b0b      	ldr	r3, [pc, #44]	; (9000baf4 <Remove_flag+0x150>)
9000bac6:	681a      	ldr	r2, [r3, #0]
9000bac8:	f107 030c 	add.w	r3, r7, #12
9000bacc:	490c      	ldr	r1, [pc, #48]	; (9000bb00 <Remove_flag+0x15c>)
9000bace:	4618      	mov	r0, r3
9000bad0:	f001 fb16 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(20, 15, (uint8_t *)st, LEFT_MODE);
9000bad4:	f107 020c 	add.w	r2, r7, #12
9000bad8:	2303      	movs	r3, #3
9000bada:	210f      	movs	r1, #15
9000badc:	2014      	movs	r0, #20
9000bade:	f000 fd33 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
}
9000bae2:	bf00      	nop
9000bae4:	3710      	adds	r7, #16
9000bae6:	46bd      	mov	sp, r7
9000bae8:	bd80      	pop	{r7, pc}
9000baea:	bf00      	nop
9000baec:	ffb9c4ca 	.word	0xffb9c4ca
9000baf0:	ff4f5251 	.word	0xff4f5251
9000baf4:	20000048 	.word	0x20000048
9000baf8:	ffff0000 	.word	0xffff0000
9000bafc:	20000058 	.word	0x20000058
9000bb00:	9000e320 	.word	0x9000e320

9000bb04 <Mine_Selection_Position>:
 * @brief  Detect the number imput
 * @param  None
 * @retval None
 */
static void Mine_Selection_Position()
{
9000bb04:	b580      	push	{r7, lr}
9000bb06:	b084      	sub	sp, #16
9000bb08:	af02      	add	r7, sp, #8
  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
9000bb0a:	498d      	ldr	r1, [pc, #564]	; (9000bd40 <Mine_Selection_Position+0x23c>)
9000bb0c:	2000      	movs	r0, #0
9000bb0e:	f7f7 f9fb 	bl	90002f08 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
9000bb12:	4b8b      	ldr	r3, [pc, #556]	; (9000bd40 <Mine_Selection_Position+0x23c>)
9000bb14:	685b      	ldr	r3, [r3, #4]
9000bb16:	b29a      	uxth	r2, r3
9000bb18:	4b8a      	ldr	r3, [pc, #552]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb1a:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
9000bb1c:	4b88      	ldr	r3, [pc, #544]	; (9000bd40 <Mine_Selection_Position+0x23c>)
9000bb1e:	689b      	ldr	r3, [r3, #8]
9000bb20:	b29a      	uxth	r2, r3
9000bb22:	4b89      	ldr	r3, [pc, #548]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb24:	801a      	strh	r2, [r3, #0]

  if (Px == x && Py == y)
9000bb26:	4b89      	ldr	r3, [pc, #548]	; (9000bd4c <Mine_Selection_Position+0x248>)
9000bb28:	881a      	ldrh	r2, [r3, #0]
9000bb2a:	4b86      	ldr	r3, [pc, #536]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb2c:	881b      	ldrh	r3, [r3, #0]
9000bb2e:	429a      	cmp	r2, r3
9000bb30:	d106      	bne.n	9000bb40 <Mine_Selection_Position+0x3c>
9000bb32:	4b87      	ldr	r3, [pc, #540]	; (9000bd50 <Mine_Selection_Position+0x24c>)
9000bb34:	881a      	ldrh	r2, [r3, #0]
9000bb36:	4b84      	ldr	r3, [pc, #528]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb38:	881b      	ldrh	r3, [r3, #0]
9000bb3a:	429a      	cmp	r2, r3
9000bb3c:	f000 8182 	beq.w	9000be44 <Mine_Selection_Position+0x340>
  {
    return;
  }
  Px = x;
9000bb40:	4b80      	ldr	r3, [pc, #512]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb42:	881a      	ldrh	r2, [r3, #0]
9000bb44:	4b81      	ldr	r3, [pc, #516]	; (9000bd4c <Mine_Selection_Position+0x248>)
9000bb46:	801a      	strh	r2, [r3, #0]
  Py = y;
9000bb48:	4b7f      	ldr	r3, [pc, #508]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb4a:	881a      	ldrh	r2, [r3, #0]
9000bb4c:	4b80      	ldr	r3, [pc, #512]	; (9000bd50 <Mine_Selection_Position+0x24c>)
9000bb4e:	801a      	strh	r2, [r3, #0]

  // clicks happy face
  if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
9000bb50:	4b7c      	ldr	r3, [pc, #496]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb52:	881b      	ldrh	r3, [r3, #0]
9000bb54:	2bdc      	cmp	r3, #220	; 0xdc
9000bb56:	d90d      	bls.n	9000bb74 <Mine_Selection_Position+0x70>
9000bb58:	4b7a      	ldr	r3, [pc, #488]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb5a:	881b      	ldrh	r3, [r3, #0]
9000bb5c:	2bfe      	cmp	r3, #254	; 0xfe
9000bb5e:	d809      	bhi.n	9000bb74 <Mine_Selection_Position+0x70>
9000bb60:	4b79      	ldr	r3, [pc, #484]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb62:	881b      	ldrh	r3, [r3, #0]
9000bb64:	2b07      	cmp	r3, #7
9000bb66:	d905      	bls.n	9000bb74 <Mine_Selection_Position+0x70>
9000bb68:	4b77      	ldr	r3, [pc, #476]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb6a:	881b      	ldrh	r3, [r3, #0]
9000bb6c:	2b20      	cmp	r3, #32
9000bb6e:	d801      	bhi.n	9000bb74 <Mine_Selection_Position+0x70>
  {
    //
    Bomb_Hit();
9000bb70:	f7fe ff08 	bl	9000a984 <Bomb_Hit>
  }

  // number set
  if ((x > 12) && (x < 62) && (y > 9) && (y < 34))
9000bb74:	4b73      	ldr	r3, [pc, #460]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb76:	881b      	ldrh	r3, [r3, #0]
9000bb78:	2b0c      	cmp	r3, #12
9000bb7a:	d90d      	bls.n	9000bb98 <Mine_Selection_Position+0x94>
9000bb7c:	4b71      	ldr	r3, [pc, #452]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb7e:	881b      	ldrh	r3, [r3, #0]
9000bb80:	2b3d      	cmp	r3, #61	; 0x3d
9000bb82:	d809      	bhi.n	9000bb98 <Mine_Selection_Position+0x94>
9000bb84:	4b70      	ldr	r3, [pc, #448]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb86:	881b      	ldrh	r3, [r3, #0]
9000bb88:	2b09      	cmp	r3, #9
9000bb8a:	d905      	bls.n	9000bb98 <Mine_Selection_Position+0x94>
9000bb8c:	4b6e      	ldr	r3, [pc, #440]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bb8e:	881b      	ldrh	r3, [r3, #0]
9000bb90:	2b21      	cmp	r3, #33	; 0x21
9000bb92:	d801      	bhi.n	9000bb98 <Mine_Selection_Position+0x94>
  {
    Bomb_Hit();
9000bb94:	f7fe fef6 	bl	9000a984 <Bomb_Hit>
  }

  if (x > 150 && x < 205)
9000bb98:	4b6a      	ldr	r3, [pc, #424]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bb9a:	881b      	ldrh	r3, [r3, #0]
9000bb9c:	2b96      	cmp	r3, #150	; 0x96
9000bb9e:	d95d      	bls.n	9000bc5c <Mine_Selection_Position+0x158>
9000bba0:	4b68      	ldr	r3, [pc, #416]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bba2:	881b      	ldrh	r3, [r3, #0]
9000bba4:	2bcc      	cmp	r3, #204	; 0xcc
9000bba6:	d859      	bhi.n	9000bc5c <Mine_Selection_Position+0x158>
  {
    if (y > 43 && y < 98)
9000bba8:	4b67      	ldr	r3, [pc, #412]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bbaa:	881b      	ldrh	r3, [r3, #0]
9000bbac:	2b2b      	cmp	r3, #43	; 0x2b
9000bbae:	d912      	bls.n	9000bbd6 <Mine_Selection_Position+0xd2>
9000bbb0:	4b65      	ldr	r3, [pc, #404]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bbb2:	881b      	ldrh	r3, [r3, #0]
9000bbb4:	2b61      	cmp	r3, #97	; 0x61
9000bbb6:	d80e      	bhi.n	9000bbd6 <Mine_Selection_Position+0xd2>
    {
      Tmp_Mine_Num *= 10;
9000bbb8:	4b66      	ldr	r3, [pc, #408]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbba:	881b      	ldrh	r3, [r3, #0]
9000bbbc:	461a      	mov	r2, r3
9000bbbe:	0092      	lsls	r2, r2, #2
9000bbc0:	4413      	add	r3, r2
9000bbc2:	005b      	lsls	r3, r3, #1
9000bbc4:	b29a      	uxth	r2, r3
9000bbc6:	4b63      	ldr	r3, [pc, #396]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbc8:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 1;
9000bbca:	4b62      	ldr	r3, [pc, #392]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbcc:	881b      	ldrh	r3, [r3, #0]
9000bbce:	3301      	adds	r3, #1
9000bbd0:	b29a      	uxth	r2, r3
9000bbd2:	4b60      	ldr	r3, [pc, #384]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbd4:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
9000bbd6:	4b5c      	ldr	r3, [pc, #368]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bbd8:	881b      	ldrh	r3, [r3, #0]
9000bbda:	2b62      	cmp	r3, #98	; 0x62
9000bbdc:	d912      	bls.n	9000bc04 <Mine_Selection_Position+0x100>
9000bbde:	4b5a      	ldr	r3, [pc, #360]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bbe0:	881b      	ldrh	r3, [r3, #0]
9000bbe2:	2b98      	cmp	r3, #152	; 0x98
9000bbe4:	d80e      	bhi.n	9000bc04 <Mine_Selection_Position+0x100>
    {
      Tmp_Mine_Num *= 10;
9000bbe6:	4b5b      	ldr	r3, [pc, #364]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbe8:	881b      	ldrh	r3, [r3, #0]
9000bbea:	461a      	mov	r2, r3
9000bbec:	0092      	lsls	r2, r2, #2
9000bbee:	4413      	add	r3, r2
9000bbf0:	005b      	lsls	r3, r3, #1
9000bbf2:	b29a      	uxth	r2, r3
9000bbf4:	4b57      	ldr	r3, [pc, #348]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbf6:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 4;
9000bbf8:	4b56      	ldr	r3, [pc, #344]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bbfa:	881b      	ldrh	r3, [r3, #0]
9000bbfc:	3304      	adds	r3, #4
9000bbfe:	b29a      	uxth	r2, r3
9000bc00:	4b54      	ldr	r3, [pc, #336]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc02:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
9000bc04:	4b50      	ldr	r3, [pc, #320]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc06:	881b      	ldrh	r3, [r3, #0]
9000bc08:	2b99      	cmp	r3, #153	; 0x99
9000bc0a:	d912      	bls.n	9000bc32 <Mine_Selection_Position+0x12e>
9000bc0c:	4b4e      	ldr	r3, [pc, #312]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc0e:	881b      	ldrh	r3, [r3, #0]
9000bc10:	2bcf      	cmp	r3, #207	; 0xcf
9000bc12:	d80e      	bhi.n	9000bc32 <Mine_Selection_Position+0x12e>
    {
      Tmp_Mine_Num *= 10;
9000bc14:	4b4f      	ldr	r3, [pc, #316]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc16:	881b      	ldrh	r3, [r3, #0]
9000bc18:	461a      	mov	r2, r3
9000bc1a:	0092      	lsls	r2, r2, #2
9000bc1c:	4413      	add	r3, r2
9000bc1e:	005b      	lsls	r3, r3, #1
9000bc20:	b29a      	uxth	r2, r3
9000bc22:	4b4c      	ldr	r3, [pc, #304]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc24:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 7;
9000bc26:	4b4b      	ldr	r3, [pc, #300]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc28:	881b      	ldrh	r3, [r3, #0]
9000bc2a:	3307      	adds	r3, #7
9000bc2c:	b29a      	uxth	r2, r3
9000bc2e:	4b49      	ldr	r3, [pc, #292]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc30:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
9000bc32:	4b45      	ldr	r3, [pc, #276]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc34:	881b      	ldrh	r3, [r3, #0]
9000bc36:	2bd0      	cmp	r3, #208	; 0xd0
9000bc38:	d910      	bls.n	9000bc5c <Mine_Selection_Position+0x158>
9000bc3a:	4b43      	ldr	r3, [pc, #268]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc3c:	881b      	ldrh	r3, [r3, #0]
9000bc3e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
9000bc42:	d80b      	bhi.n	9000bc5c <Mine_Selection_Position+0x158>
    {
      Tmp_Mine_Num = 0;
9000bc44:	4b43      	ldr	r3, [pc, #268]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc46:	2200      	movs	r2, #0
9000bc48:	801a      	strh	r2, [r3, #0]
      UTIL_LCD_FillRect(30, 125, 100, 50, UTIL_LCD_COLOR_BLACK);
9000bc4a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000bc4e:	9300      	str	r3, [sp, #0]
9000bc50:	2332      	movs	r3, #50	; 0x32
9000bc52:	2264      	movs	r2, #100	; 0x64
9000bc54:	217d      	movs	r1, #125	; 0x7d
9000bc56:	201e      	movs	r0, #30
9000bc58:	f000 fe6e 	bl	9000c938 <UTIL_LCD_FillRect>
    }
  }
  if (x > 205 && x < 260)
9000bc5c:	4b39      	ldr	r3, [pc, #228]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bc5e:	881b      	ldrh	r3, [r3, #0]
9000bc60:	2bcd      	cmp	r3, #205	; 0xcd
9000bc62:	d95b      	bls.n	9000bd1c <Mine_Selection_Position+0x218>
9000bc64:	4b37      	ldr	r3, [pc, #220]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bc66:	881b      	ldrh	r3, [r3, #0]
9000bc68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
9000bc6c:	d256      	bcs.n	9000bd1c <Mine_Selection_Position+0x218>
  {
    if (y > 43 && y < 98)
9000bc6e:	4b36      	ldr	r3, [pc, #216]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc70:	881b      	ldrh	r3, [r3, #0]
9000bc72:	2b2b      	cmp	r3, #43	; 0x2b
9000bc74:	d912      	bls.n	9000bc9c <Mine_Selection_Position+0x198>
9000bc76:	4b34      	ldr	r3, [pc, #208]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc78:	881b      	ldrh	r3, [r3, #0]
9000bc7a:	2b61      	cmp	r3, #97	; 0x61
9000bc7c:	d80e      	bhi.n	9000bc9c <Mine_Selection_Position+0x198>
    {
      Tmp_Mine_Num *= 10;
9000bc7e:	4b35      	ldr	r3, [pc, #212]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc80:	881b      	ldrh	r3, [r3, #0]
9000bc82:	461a      	mov	r2, r3
9000bc84:	0092      	lsls	r2, r2, #2
9000bc86:	4413      	add	r3, r2
9000bc88:	005b      	lsls	r3, r3, #1
9000bc8a:	b29a      	uxth	r2, r3
9000bc8c:	4b31      	ldr	r3, [pc, #196]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc8e:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 2;
9000bc90:	4b30      	ldr	r3, [pc, #192]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc92:	881b      	ldrh	r3, [r3, #0]
9000bc94:	3302      	adds	r3, #2
9000bc96:	b29a      	uxth	r2, r3
9000bc98:	4b2e      	ldr	r3, [pc, #184]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bc9a:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
9000bc9c:	4b2a      	ldr	r3, [pc, #168]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bc9e:	881b      	ldrh	r3, [r3, #0]
9000bca0:	2b62      	cmp	r3, #98	; 0x62
9000bca2:	d912      	bls.n	9000bcca <Mine_Selection_Position+0x1c6>
9000bca4:	4b28      	ldr	r3, [pc, #160]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bca6:	881b      	ldrh	r3, [r3, #0]
9000bca8:	2b98      	cmp	r3, #152	; 0x98
9000bcaa:	d80e      	bhi.n	9000bcca <Mine_Selection_Position+0x1c6>
    {
      Tmp_Mine_Num *= 10;
9000bcac:	4b29      	ldr	r3, [pc, #164]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcae:	881b      	ldrh	r3, [r3, #0]
9000bcb0:	461a      	mov	r2, r3
9000bcb2:	0092      	lsls	r2, r2, #2
9000bcb4:	4413      	add	r3, r2
9000bcb6:	005b      	lsls	r3, r3, #1
9000bcb8:	b29a      	uxth	r2, r3
9000bcba:	4b26      	ldr	r3, [pc, #152]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcbc:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 5;
9000bcbe:	4b25      	ldr	r3, [pc, #148]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcc0:	881b      	ldrh	r3, [r3, #0]
9000bcc2:	3305      	adds	r3, #5
9000bcc4:	b29a      	uxth	r2, r3
9000bcc6:	4b23      	ldr	r3, [pc, #140]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcc8:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
9000bcca:	4b1f      	ldr	r3, [pc, #124]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bccc:	881b      	ldrh	r3, [r3, #0]
9000bcce:	2b99      	cmp	r3, #153	; 0x99
9000bcd0:	d912      	bls.n	9000bcf8 <Mine_Selection_Position+0x1f4>
9000bcd2:	4b1d      	ldr	r3, [pc, #116]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bcd4:	881b      	ldrh	r3, [r3, #0]
9000bcd6:	2bcf      	cmp	r3, #207	; 0xcf
9000bcd8:	d80e      	bhi.n	9000bcf8 <Mine_Selection_Position+0x1f4>
    {
      Tmp_Mine_Num *= 10;
9000bcda:	4b1e      	ldr	r3, [pc, #120]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcdc:	881b      	ldrh	r3, [r3, #0]
9000bcde:	461a      	mov	r2, r3
9000bce0:	0092      	lsls	r2, r2, #2
9000bce2:	4413      	add	r3, r2
9000bce4:	005b      	lsls	r3, r3, #1
9000bce6:	b29a      	uxth	r2, r3
9000bce8:	4b1a      	ldr	r3, [pc, #104]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcea:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 8;
9000bcec:	4b19      	ldr	r3, [pc, #100]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcee:	881b      	ldrh	r3, [r3, #0]
9000bcf0:	3308      	adds	r3, #8
9000bcf2:	b29a      	uxth	r2, r3
9000bcf4:	4b17      	ldr	r3, [pc, #92]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bcf6:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
9000bcf8:	4b13      	ldr	r3, [pc, #76]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bcfa:	881b      	ldrh	r3, [r3, #0]
9000bcfc:	2bd0      	cmp	r3, #208	; 0xd0
9000bcfe:	d90d      	bls.n	9000bd1c <Mine_Selection_Position+0x218>
9000bd00:	4b11      	ldr	r3, [pc, #68]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bd02:	881b      	ldrh	r3, [r3, #0]
9000bd04:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
9000bd08:	d808      	bhi.n	9000bd1c <Mine_Selection_Position+0x218>
    {
      Tmp_Mine_Num *= 10;
9000bd0a:	4b12      	ldr	r3, [pc, #72]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bd0c:	881b      	ldrh	r3, [r3, #0]
9000bd0e:	461a      	mov	r2, r3
9000bd10:	0092      	lsls	r2, r2, #2
9000bd12:	4413      	add	r3, r2
9000bd14:	005b      	lsls	r3, r3, #1
9000bd16:	b29a      	uxth	r2, r3
9000bd18:	4b0e      	ldr	r3, [pc, #56]	; (9000bd54 <Mine_Selection_Position+0x250>)
9000bd1a:	801a      	strh	r2, [r3, #0]
    }
  }
  if (x > 260 && x < 315)
9000bd1c:	4b09      	ldr	r3, [pc, #36]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bd1e:	881b      	ldrh	r3, [r3, #0]
9000bd20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
9000bd24:	d974      	bls.n	9000be10 <Mine_Selection_Position+0x30c>
9000bd26:	4b07      	ldr	r3, [pc, #28]	; (9000bd44 <Mine_Selection_Position+0x240>)
9000bd28:	881b      	ldrh	r3, [r3, #0]
9000bd2a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
9000bd2e:	d86f      	bhi.n	9000be10 <Mine_Selection_Position+0x30c>
  {
    if (y > 43 && y < 98)
9000bd30:	4b05      	ldr	r3, [pc, #20]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bd32:	881b      	ldrh	r3, [r3, #0]
9000bd34:	2b2b      	cmp	r3, #43	; 0x2b
9000bd36:	d91f      	bls.n	9000bd78 <Mine_Selection_Position+0x274>
9000bd38:	4b03      	ldr	r3, [pc, #12]	; (9000bd48 <Mine_Selection_Position+0x244>)
9000bd3a:	881b      	ldrh	r3, [r3, #0]
9000bd3c:	2b61      	cmp	r3, #97	; 0x61
9000bd3e:	e00b      	b.n	9000bd58 <Mine_Selection_Position+0x254>
9000bd40:	200012e4 	.word	0x200012e4
9000bd44:	200012ca 	.word	0x200012ca
9000bd48:	200012cc 	.word	0x200012cc
9000bd4c:	200012ce 	.word	0x200012ce
9000bd50:	200012d0 	.word	0x200012d0
9000bd54:	200012dc 	.word	0x200012dc
9000bd58:	d80e      	bhi.n	9000bd78 <Mine_Selection_Position+0x274>
    {
      Tmp_Mine_Num *= 10;
9000bd5a:	4b3c      	ldr	r3, [pc, #240]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd5c:	881b      	ldrh	r3, [r3, #0]
9000bd5e:	461a      	mov	r2, r3
9000bd60:	0092      	lsls	r2, r2, #2
9000bd62:	4413      	add	r3, r2
9000bd64:	005b      	lsls	r3, r3, #1
9000bd66:	b29a      	uxth	r2, r3
9000bd68:	4b38      	ldr	r3, [pc, #224]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd6a:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 3;
9000bd6c:	4b37      	ldr	r3, [pc, #220]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd6e:	881b      	ldrh	r3, [r3, #0]
9000bd70:	3303      	adds	r3, #3
9000bd72:	b29a      	uxth	r2, r3
9000bd74:	4b35      	ldr	r3, [pc, #212]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd76:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
9000bd78:	4b35      	ldr	r3, [pc, #212]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bd7a:	881b      	ldrh	r3, [r3, #0]
9000bd7c:	2b62      	cmp	r3, #98	; 0x62
9000bd7e:	d912      	bls.n	9000bda6 <Mine_Selection_Position+0x2a2>
9000bd80:	4b33      	ldr	r3, [pc, #204]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bd82:	881b      	ldrh	r3, [r3, #0]
9000bd84:	2b98      	cmp	r3, #152	; 0x98
9000bd86:	d80e      	bhi.n	9000bda6 <Mine_Selection_Position+0x2a2>
    {
      Tmp_Mine_Num *= 10;
9000bd88:	4b30      	ldr	r3, [pc, #192]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd8a:	881b      	ldrh	r3, [r3, #0]
9000bd8c:	461a      	mov	r2, r3
9000bd8e:	0092      	lsls	r2, r2, #2
9000bd90:	4413      	add	r3, r2
9000bd92:	005b      	lsls	r3, r3, #1
9000bd94:	b29a      	uxth	r2, r3
9000bd96:	4b2d      	ldr	r3, [pc, #180]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd98:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 6;
9000bd9a:	4b2c      	ldr	r3, [pc, #176]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bd9c:	881b      	ldrh	r3, [r3, #0]
9000bd9e:	3306      	adds	r3, #6
9000bda0:	b29a      	uxth	r2, r3
9000bda2:	4b2a      	ldr	r3, [pc, #168]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bda4:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
9000bda6:	4b2a      	ldr	r3, [pc, #168]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bda8:	881b      	ldrh	r3, [r3, #0]
9000bdaa:	2b99      	cmp	r3, #153	; 0x99
9000bdac:	d912      	bls.n	9000bdd4 <Mine_Selection_Position+0x2d0>
9000bdae:	4b28      	ldr	r3, [pc, #160]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bdb0:	881b      	ldrh	r3, [r3, #0]
9000bdb2:	2bcf      	cmp	r3, #207	; 0xcf
9000bdb4:	d80e      	bhi.n	9000bdd4 <Mine_Selection_Position+0x2d0>
    {
      Tmp_Mine_Num *= 10;
9000bdb6:	4b25      	ldr	r3, [pc, #148]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdb8:	881b      	ldrh	r3, [r3, #0]
9000bdba:	461a      	mov	r2, r3
9000bdbc:	0092      	lsls	r2, r2, #2
9000bdbe:	4413      	add	r3, r2
9000bdc0:	005b      	lsls	r3, r3, #1
9000bdc2:	b29a      	uxth	r2, r3
9000bdc4:	4b21      	ldr	r3, [pc, #132]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdc6:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 9;
9000bdc8:	4b20      	ldr	r3, [pc, #128]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdca:	881b      	ldrh	r3, [r3, #0]
9000bdcc:	3309      	adds	r3, #9
9000bdce:	b29a      	uxth	r2, r3
9000bdd0:	4b1e      	ldr	r3, [pc, #120]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdd2:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
9000bdd4:	4b1e      	ldr	r3, [pc, #120]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bdd6:	881b      	ldrh	r3, [r3, #0]
9000bdd8:	2bd0      	cmp	r3, #208	; 0xd0
9000bdda:	d919      	bls.n	9000be10 <Mine_Selection_Position+0x30c>
9000bddc:	4b1c      	ldr	r3, [pc, #112]	; (9000be50 <Mine_Selection_Position+0x34c>)
9000bdde:	881b      	ldrh	r3, [r3, #0]
9000bde0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
9000bde4:	d814      	bhi.n	9000be10 <Mine_Selection_Position+0x30c>
    {
      if (Tmp_Mine_Num > 252)
9000bde6:	4b19      	ldr	r3, [pc, #100]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bde8:	881b      	ldrh	r3, [r3, #0]
9000bdea:	2bfc      	cmp	r3, #252	; 0xfc
9000bdec:	d903      	bls.n	9000bdf6 <Mine_Selection_Position+0x2f2>
        Tmp_Mine_Num = 252;
9000bdee:	4b17      	ldr	r3, [pc, #92]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdf0:	22fc      	movs	r2, #252	; 0xfc
9000bdf2:	801a      	strh	r2, [r3, #0]
9000bdf4:	e006      	b.n	9000be04 <Mine_Selection_Position+0x300>
      else if (Tmp_Mine_Num < 1)
9000bdf6:	4b15      	ldr	r3, [pc, #84]	; (9000be4c <Mine_Selection_Position+0x348>)
9000bdf8:	881b      	ldrh	r3, [r3, #0]
9000bdfa:	2b00      	cmp	r3, #0
9000bdfc:	d102      	bne.n	9000be04 <Mine_Selection_Position+0x300>
        Tmp_Mine_Num = 1;
9000bdfe:	4b13      	ldr	r3, [pc, #76]	; (9000be4c <Mine_Selection_Position+0x348>)
9000be00:	2201      	movs	r2, #1
9000be02:	801a      	strh	r2, [r3, #0]
      Mine_Num = Tmp_Mine_Num;
9000be04:	4b11      	ldr	r3, [pc, #68]	; (9000be4c <Mine_Selection_Position+0x348>)
9000be06:	881a      	ldrh	r2, [r3, #0]
9000be08:	4b12      	ldr	r3, [pc, #72]	; (9000be54 <Mine_Selection_Position+0x350>)
9000be0a:	801a      	strh	r2, [r3, #0]
      Reset_Game();
9000be0c:	f000 f82a 	bl	9000be64 <Reset_Game>
    }
  }
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
9000be10:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000be14:	f000 fa58 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000be18:	480f      	ldr	r0, [pc, #60]	; (9000be58 <Mine_Selection_Position+0x354>)
9000be1a:	f000 fa41 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
9000be1e:	480f      	ldr	r0, [pc, #60]	; (9000be5c <Mine_Selection_Position+0x358>)
9000be20:	f000 fa66 	bl	9000c2f0 <UTIL_LCD_SetFont>
  char st;
  sprintf(st, "%1d", Tmp_Mine_Num);
9000be24:	79fb      	ldrb	r3, [r7, #7]
9000be26:	4618      	mov	r0, r3
9000be28:	4b08      	ldr	r3, [pc, #32]	; (9000be4c <Mine_Selection_Position+0x348>)
9000be2a:	881b      	ldrh	r3, [r3, #0]
9000be2c:	461a      	mov	r2, r3
9000be2e:	490c      	ldr	r1, [pc, #48]	; (9000be60 <Mine_Selection_Position+0x35c>)
9000be30:	f001 f966 	bl	9000d100 <siprintf>
  UTIL_LCD_DisplayStringAt(40, 130, (uint8_t *)st, LEFT_MODE);
9000be34:	79fb      	ldrb	r3, [r7, #7]
9000be36:	461a      	mov	r2, r3
9000be38:	2303      	movs	r3, #3
9000be3a:	2182      	movs	r1, #130	; 0x82
9000be3c:	2028      	movs	r0, #40	; 0x28
9000be3e:	f000 fb83 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
9000be42:	e000      	b.n	9000be46 <Mine_Selection_Position+0x342>
    return;
9000be44:	bf00      	nop
}
9000be46:	3708      	adds	r7, #8
9000be48:	46bd      	mov	sp, r7
9000be4a:	bd80      	pop	{r7, pc}
9000be4c:	200012dc 	.word	0x200012dc
9000be50:	200012cc 	.word	0x200012cc
9000be54:	20000046 	.word	0x20000046
9000be58:	ffff0000 	.word	0xffff0000
9000be5c:	20000050 	.word	0x20000050
9000be60:	9000e324 	.word	0x9000e324

9000be64 <Reset_Game>:
 * @brief  Resets game
 * @param  None
 * @retval None
 */
static void Reset_Game()
{
9000be64:	b480      	push	{r7}
9000be66:	af00      	add	r7, sp, #0
  Game_State = -1;
9000be68:	4b03      	ldr	r3, [pc, #12]	; (9000be78 <Reset_Game+0x14>)
9000be6a:	22ff      	movs	r2, #255	; 0xff
9000be6c:	701a      	strb	r2, [r3, #0]
}
9000be6e:	bf00      	nop
9000be70:	46bd      	mov	sp, r7
9000be72:	f85d 7b04 	ldr.w	r7, [sp], #4
9000be76:	4770      	bx	lr
9000be78:	2000004c 	.word	0x2000004c

9000be7c <Victory_Screen>:
 * @brief  After wining screan
 * @param  None
 * @retval None
 */
static void Victory_Screen()
{
9000be7c:	b580      	push	{r7, lr}
9000be7e:	af00      	add	r7, sp, #0
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000be80:	4821      	ldr	r0, [pc, #132]	; (9000bf08 <Victory_Screen+0x8c>)
9000be82:	f000 fa0d 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000be86:	4821      	ldr	r0, [pc, #132]	; (9000bf0c <Victory_Screen+0x90>)
9000be88:	f000 fa1e 	bl	9000c2c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
9000be8c:	4820      	ldr	r0, [pc, #128]	; (9000bf10 <Victory_Screen+0x94>)
9000be8e:	f000 fa2f 	bl	9000c2f0 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(180, 50, (uint8_t *)"Victory", LEFT_MODE);
9000be92:	2303      	movs	r3, #3
9000be94:	4a1f      	ldr	r2, [pc, #124]	; (9000bf14 <Victory_Screen+0x98>)
9000be96:	2132      	movs	r1, #50	; 0x32
9000be98:	20b4      	movs	r0, #180	; 0xb4
9000be9a:	f000 fb55 	bl	9000c548 <UTIL_LCD_DisplayStringAt>

  BSP_TS_GetState(0, &TS_State);
9000be9e:	491e      	ldr	r1, [pc, #120]	; (9000bf18 <Victory_Screen+0x9c>)
9000bea0:	2000      	movs	r0, #0
9000bea2:	f7f7 f831 	bl	90002f08 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
9000bea6:	4b1c      	ldr	r3, [pc, #112]	; (9000bf18 <Victory_Screen+0x9c>)
9000bea8:	685b      	ldr	r3, [r3, #4]
9000beaa:	b29a      	uxth	r2, r3
9000beac:	4b1b      	ldr	r3, [pc, #108]	; (9000bf1c <Victory_Screen+0xa0>)
9000beae:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
9000beb0:	4b19      	ldr	r3, [pc, #100]	; (9000bf18 <Victory_Screen+0x9c>)
9000beb2:	689b      	ldr	r3, [r3, #8]
9000beb4:	b29a      	uxth	r2, r3
9000beb6:	4b1a      	ldr	r3, [pc, #104]	; (9000bf20 <Victory_Screen+0xa4>)
9000beb8:	801a      	strh	r2, [r3, #0]

  if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
9000beba:	4b18      	ldr	r3, [pc, #96]	; (9000bf1c <Victory_Screen+0xa0>)
9000bebc:	881b      	ldrh	r3, [r3, #0]
9000bebe:	2bdc      	cmp	r3, #220	; 0xdc
9000bec0:	d90d      	bls.n	9000bede <Victory_Screen+0x62>
9000bec2:	4b16      	ldr	r3, [pc, #88]	; (9000bf1c <Victory_Screen+0xa0>)
9000bec4:	881b      	ldrh	r3, [r3, #0]
9000bec6:	2bfe      	cmp	r3, #254	; 0xfe
9000bec8:	d809      	bhi.n	9000bede <Victory_Screen+0x62>
9000beca:	4b15      	ldr	r3, [pc, #84]	; (9000bf20 <Victory_Screen+0xa4>)
9000becc:	881b      	ldrh	r3, [r3, #0]
9000bece:	2b07      	cmp	r3, #7
9000bed0:	d905      	bls.n	9000bede <Victory_Screen+0x62>
9000bed2:	4b13      	ldr	r3, [pc, #76]	; (9000bf20 <Victory_Screen+0xa4>)
9000bed4:	881b      	ldrh	r3, [r3, #0]
9000bed6:	2b20      	cmp	r3, #32
9000bed8:	d801      	bhi.n	9000bede <Victory_Screen+0x62>
  {
    //
    Reset_Game();
9000beda:	f7ff ffc3 	bl	9000be64 <Reset_Game>
  }
  // number set
  if ((x > 12) && (x < 62) && (y > 9) && (y < 34))
9000bede:	4b0f      	ldr	r3, [pc, #60]	; (9000bf1c <Victory_Screen+0xa0>)
9000bee0:	881b      	ldrh	r3, [r3, #0]
9000bee2:	2b0c      	cmp	r3, #12
9000bee4:	d90d      	bls.n	9000bf02 <Victory_Screen+0x86>
9000bee6:	4b0d      	ldr	r3, [pc, #52]	; (9000bf1c <Victory_Screen+0xa0>)
9000bee8:	881b      	ldrh	r3, [r3, #0]
9000beea:	2b3d      	cmp	r3, #61	; 0x3d
9000beec:	d809      	bhi.n	9000bf02 <Victory_Screen+0x86>
9000beee:	4b0c      	ldr	r3, [pc, #48]	; (9000bf20 <Victory_Screen+0xa4>)
9000bef0:	881b      	ldrh	r3, [r3, #0]
9000bef2:	2b09      	cmp	r3, #9
9000bef4:	d905      	bls.n	9000bf02 <Victory_Screen+0x86>
9000bef6:	4b0a      	ldr	r3, [pc, #40]	; (9000bf20 <Victory_Screen+0xa4>)
9000bef8:	881b      	ldrh	r3, [r3, #0]
9000befa:	2b21      	cmp	r3, #33	; 0x21
9000befc:	d801      	bhi.n	9000bf02 <Victory_Screen+0x86>
  {
    Set_Bomb_Number();
9000befe:	f7ff fb75 	bl	9000b5ec <Set_Bomb_Number>
  }
9000bf02:	bf00      	nop
9000bf04:	bd80      	pop	{r7, pc}
9000bf06:	bf00      	nop
9000bf08:	ffff0000 	.word	0xffff0000
9000bf0c:	ffb9c4ca 	.word	0xffb9c4ca
9000bf10:	20000050 	.word	0x20000050
9000bf14:	9000e330 	.word	0x9000e330
9000bf18:	200012e4 	.word	0x200012e4
9000bf1c:	200012ca 	.word	0x200012ca
9000bf20:	200012cc 	.word	0x200012cc

9000bf24 <__io_putchar>:
/**
  * @brief  Redirect the printf to the LCD
  * @retval None
 */
UTIL_LCD_TRACE_PUTCHAR
{
9000bf24:	b590      	push	{r4, r7, lr}
9000bf26:	b087      	sub	sp, #28
9000bf28:	af00      	add	r7, sp, #0
9000bf2a:	6078      	str	r0, [r7, #4]
  uint32_t x_size;

  BSP_LCD_GetXSize(0, &x_size);
9000bf2c:	f107 030c 	add.w	r3, r7, #12
9000bf30:	4619      	mov	r1, r3
9000bf32:	2000      	movs	r0, #0
9000bf34:	f7f6 f89c 	bl	90002070 <BSP_LCD_GetXSize>

  sFONT *cFont = UTIL_LCD_GetFont();
9000bf38:	f000 f9ee 	bl	9000c318 <UTIL_LCD_GetFont>
9000bf3c:	6138      	str	r0, [r7, #16]
  uint32_t idx;

  if(LcdTrace_Ctx.Lock == DISABLE)
9000bf3e:	4b5e      	ldr	r3, [pc, #376]	; (9000c0b8 <__io_putchar+0x194>)
9000bf40:	789b      	ldrb	r3, [r3, #2]
9000bf42:	2b00      	cmp	r3, #0
9000bf44:	f040 80b2 	bne.w	9000c0ac <__io_putchar+0x188>
  {
    if(LcdTrace_Ctx.ScrollActive == ENABLE)
9000bf48:	4b5b      	ldr	r3, [pc, #364]	; (9000c0b8 <__io_putchar+0x194>)
9000bf4a:	785b      	ldrb	r3, [r3, #1]
9000bf4c:	2b01      	cmp	r3, #1
9000bf4e:	d110      	bne.n	9000bf72 <__io_putchar+0x4e>
    {
      LcdTrace_Ctx.CacheBufferYptrBottom = LcdTrace_Ctx.CacheBufferYptrBottomBack;
9000bf50:	4b59      	ldr	r3, [pc, #356]	; (9000c0b8 <__io_putchar+0x194>)
9000bf52:	899a      	ldrh	r2, [r3, #12]
9000bf54:	4b58      	ldr	r3, [pc, #352]	; (9000c0b8 <__io_putchar+0x194>)
9000bf56:	811a      	strh	r2, [r3, #8]
      LcdTrace_Ctx.CacheBufferYptrTop    = LcdTrace_Ctx.CacheBufferYptrTopBack;
9000bf58:	4b57      	ldr	r3, [pc, #348]	; (9000c0b8 <__io_putchar+0x194>)
9000bf5a:	895a      	ldrh	r2, [r3, #10]
9000bf5c:	4b56      	ldr	r3, [pc, #344]	; (9000c0b8 <__io_putchar+0x194>)
9000bf5e:	80da      	strh	r2, [r3, #6]
      LcdTrace_Ctx.ScrollActive = DISABLE;
9000bf60:	4b55      	ldr	r3, [pc, #340]	; (9000c0b8 <__io_putchar+0x194>)
9000bf62:	2200      	movs	r2, #0
9000bf64:	705a      	strb	r2, [r3, #1]
      LcdTrace_Ctx.Scrolled = DISABLE;
9000bf66:	4b54      	ldr	r3, [pc, #336]	; (9000c0b8 <__io_putchar+0x194>)
9000bf68:	2200      	movs	r2, #0
9000bf6a:	70da      	strb	r2, [r3, #3]
      LcdTrace_Ctx.ScrollBackStep = 0;
9000bf6c:	4b52      	ldr	r3, [pc, #328]	; (9000c0b8 <__io_putchar+0x194>)
9000bf6e:	2200      	movs	r2, #0
9000bf70:	81da      	strh	r2, [r3, #14]
    }

    if(( LcdTrace_Ctx.CacheBufferXptr < (x_size) /cFont->Width ) &&  ( ch != '\n'))
9000bf72:	4b51      	ldr	r3, [pc, #324]	; (9000c0b8 <__io_putchar+0x194>)
9000bf74:	889b      	ldrh	r3, [r3, #4]
9000bf76:	4619      	mov	r1, r3
9000bf78:	68fb      	ldr	r3, [r7, #12]
9000bf7a:	693a      	ldr	r2, [r7, #16]
9000bf7c:	8892      	ldrh	r2, [r2, #4]
9000bf7e:	fbb3 f3f2 	udiv	r3, r3, r2
9000bf82:	4299      	cmp	r1, r3
9000bf84:	d218      	bcs.n	9000bfb8 <__io_putchar+0x94>
9000bf86:	687b      	ldr	r3, [r7, #4]
9000bf88:	2b0a      	cmp	r3, #10
9000bf8a:	d015      	beq.n	9000bfb8 <__io_putchar+0x94>
    {
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
9000bf8c:	4b4a      	ldr	r3, [pc, #296]	; (9000c0b8 <__io_putchar+0x194>)
9000bf8e:	891b      	ldrh	r3, [r3, #8]
9000bf90:	4619      	mov	r1, r3
9000bf92:	4b49      	ldr	r3, [pc, #292]	; (9000c0b8 <__io_putchar+0x194>)
9000bf94:	889b      	ldrh	r3, [r3, #4]
9000bf96:	1c5a      	adds	r2, r3, #1
9000bf98:	b290      	uxth	r0, r2
9000bf9a:	4a47      	ldr	r2, [pc, #284]	; (9000c0b8 <__io_putchar+0x194>)
9000bf9c:	8090      	strh	r0, [r2, #4]
9000bf9e:	461c      	mov	r4, r3
9000bfa0:	687b      	ldr	r3, [r7, #4]
9000bfa2:	b2d8      	uxtb	r0, r3
9000bfa4:	4a45      	ldr	r2, [pc, #276]	; (9000c0bc <__io_putchar+0x198>)
9000bfa6:	460b      	mov	r3, r1
9000bfa8:	015b      	lsls	r3, r3, #5
9000bfaa:	440b      	add	r3, r1
9000bfac:	009b      	lsls	r3, r3, #2
9000bfae:	4413      	add	r3, r2
9000bfb0:	4423      	add	r3, r4
9000bfb2:	4602      	mov	r2, r0
9000bfb4:	701a      	strb	r2, [r3, #0]
9000bfb6:	e079      	b.n	9000c0ac <__io_putchar+0x188>
    }
    else
    {
      if(LcdTrace_Ctx.CacheBufferYptrTop >= LcdTrace_Ctx.CacheBufferYptrBottom)
9000bfb8:	4b3f      	ldr	r3, [pc, #252]	; (9000c0b8 <__io_putchar+0x194>)
9000bfba:	88da      	ldrh	r2, [r3, #6]
9000bfbc:	4b3e      	ldr	r3, [pc, #248]	; (9000c0b8 <__io_putchar+0x194>)
9000bfbe:	891b      	ldrh	r3, [r3, #8]
9000bfc0:	429a      	cmp	r2, r3
9000bfc2:	d314      	bcc.n	9000bfee <__io_putchar+0xca>
      {

        if(LcdTrace_Ctx.CacheBufferYptrInvert == DISABLE)
9000bfc4:	4b3c      	ldr	r3, [pc, #240]	; (9000c0b8 <__io_putchar+0x194>)
9000bfc6:	781b      	ldrb	r3, [r3, #0]
9000bfc8:	2b00      	cmp	r3, #0
9000bfca:	d10d      	bne.n	9000bfe8 <__io_putchar+0xc4>
        {
          LcdTrace_Ctx.CacheBufferYptrTop++;
9000bfcc:	4b3a      	ldr	r3, [pc, #232]	; (9000c0b8 <__io_putchar+0x194>)
9000bfce:	88db      	ldrh	r3, [r3, #6]
9000bfd0:	3301      	adds	r3, #1
9000bfd2:	b29a      	uxth	r2, r3
9000bfd4:	4b38      	ldr	r3, [pc, #224]	; (9000c0b8 <__io_putchar+0x194>)
9000bfd6:	80da      	strh	r2, [r3, #6]

          if(LcdTrace_Ctx.CacheBufferYptrTop == LCD_CACHE_DEPTH)
9000bfd8:	4b37      	ldr	r3, [pc, #220]	; (9000c0b8 <__io_putchar+0x194>)
9000bfda:	88db      	ldrh	r3, [r3, #6]
9000bfdc:	2b77      	cmp	r3, #119	; 0x77
9000bfde:	d106      	bne.n	9000bfee <__io_putchar+0xca>
          {
            LcdTrace_Ctx.CacheBufferYptrTop = 0;
9000bfe0:	4b35      	ldr	r3, [pc, #212]	; (9000c0b8 <__io_putchar+0x194>)
9000bfe2:	2200      	movs	r2, #0
9000bfe4:	80da      	strh	r2, [r3, #6]
9000bfe6:	e002      	b.n	9000bfee <__io_putchar+0xca>
          }
        }
        else
        {
          LcdTrace_Ctx.CacheBufferYptrInvert = DISABLE;
9000bfe8:	4b33      	ldr	r3, [pc, #204]	; (9000c0b8 <__io_putchar+0x194>)
9000bfea:	2200      	movs	r2, #0
9000bfec:	701a      	strb	r2, [r3, #0]
        }
      }

      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
9000bfee:	4b32      	ldr	r3, [pc, #200]	; (9000c0b8 <__io_putchar+0x194>)
9000bff0:	889b      	ldrh	r3, [r3, #4]
9000bff2:	617b      	str	r3, [r7, #20]
9000bff4:	e015      	b.n	9000c022 <__io_putchar+0xfe>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = ' ';
9000bff6:	4b30      	ldr	r3, [pc, #192]	; (9000c0b8 <__io_putchar+0x194>)
9000bff8:	891b      	ldrh	r3, [r3, #8]
9000bffa:	4619      	mov	r1, r3
9000bffc:	4b2e      	ldr	r3, [pc, #184]	; (9000c0b8 <__io_putchar+0x194>)
9000bffe:	889b      	ldrh	r3, [r3, #4]
9000c000:	1c5a      	adds	r2, r3, #1
9000c002:	b290      	uxth	r0, r2
9000c004:	4a2c      	ldr	r2, [pc, #176]	; (9000c0b8 <__io_putchar+0x194>)
9000c006:	8090      	strh	r0, [r2, #4]
9000c008:	4618      	mov	r0, r3
9000c00a:	4a2c      	ldr	r2, [pc, #176]	; (9000c0bc <__io_putchar+0x198>)
9000c00c:	460b      	mov	r3, r1
9000c00e:	015b      	lsls	r3, r3, #5
9000c010:	440b      	add	r3, r1
9000c012:	009b      	lsls	r3, r3, #2
9000c014:	4413      	add	r3, r2
9000c016:	4403      	add	r3, r0
9000c018:	2220      	movs	r2, #32
9000c01a:	701a      	strb	r2, [r3, #0]
      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
9000c01c:	697b      	ldr	r3, [r7, #20]
9000c01e:	3301      	adds	r3, #1
9000c020:	617b      	str	r3, [r7, #20]
9000c022:	68fb      	ldr	r3, [r7, #12]
9000c024:	693a      	ldr	r2, [r7, #16]
9000c026:	8892      	ldrh	r2, [r2, #4]
9000c028:	fbb3 f3f2 	udiv	r3, r3, r2
9000c02c:	697a      	ldr	r2, [r7, #20]
9000c02e:	429a      	cmp	r2, r3
9000c030:	d3e1      	bcc.n	9000bff6 <__io_putchar+0xd2>
      }
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Color = LcdTrace_Ctx.LineColor;
9000c032:	4b21      	ldr	r3, [pc, #132]	; (9000c0b8 <__io_putchar+0x194>)
9000c034:	891b      	ldrh	r3, [r3, #8]
9000c036:	4618      	mov	r0, r3
9000c038:	4b1f      	ldr	r3, [pc, #124]	; (9000c0b8 <__io_putchar+0x194>)
9000c03a:	691a      	ldr	r2, [r3, #16]
9000c03c:	491f      	ldr	r1, [pc, #124]	; (9000c0bc <__io_putchar+0x198>)
9000c03e:	4603      	mov	r3, r0
9000c040:	015b      	lsls	r3, r3, #5
9000c042:	4403      	add	r3, r0
9000c044:	009b      	lsls	r3, r3, #2
9000c046:	440b      	add	r3, r1
9000c048:	3380      	adds	r3, #128	; 0x80
9000c04a:	601a      	str	r2, [r3, #0]

      LcdTrace_Ctx.CacheBufferXptr = 0;
9000c04c:	4b1a      	ldr	r3, [pc, #104]	; (9000c0b8 <__io_putchar+0x194>)
9000c04e:	2200      	movs	r2, #0
9000c050:	809a      	strh	r2, [r3, #4]

      UTIL_LCD_TRACE_UpdateDisplay ();
9000c052:	f000 f835 	bl	9000c0c0 <UTIL_LCD_TRACE_UpdateDisplay>

      LcdTrace_Ctx.CacheBufferYptrBottom ++;
9000c056:	4b18      	ldr	r3, [pc, #96]	; (9000c0b8 <__io_putchar+0x194>)
9000c058:	891b      	ldrh	r3, [r3, #8]
9000c05a:	3301      	adds	r3, #1
9000c05c:	b29a      	uxth	r2, r3
9000c05e:	4b16      	ldr	r3, [pc, #88]	; (9000c0b8 <__io_putchar+0x194>)
9000c060:	811a      	strh	r2, [r3, #8]

      if (LcdTrace_Ctx.CacheBufferYptrBottom == LCD_CACHE_DEPTH)
9000c062:	4b15      	ldr	r3, [pc, #84]	; (9000c0b8 <__io_putchar+0x194>)
9000c064:	891b      	ldrh	r3, [r3, #8]
9000c066:	2b77      	cmp	r3, #119	; 0x77
9000c068:	d108      	bne.n	9000c07c <__io_putchar+0x158>
      {
        LcdTrace_Ctx.CacheBufferYptrBottom = 0;
9000c06a:	4b13      	ldr	r3, [pc, #76]	; (9000c0b8 <__io_putchar+0x194>)
9000c06c:	2200      	movs	r2, #0
9000c06e:	811a      	strh	r2, [r3, #8]
        LcdTrace_Ctx.CacheBufferYptrTop = 1;
9000c070:	4b11      	ldr	r3, [pc, #68]	; (9000c0b8 <__io_putchar+0x194>)
9000c072:	2201      	movs	r2, #1
9000c074:	80da      	strh	r2, [r3, #6]
        LcdTrace_Ctx.CacheBufferYptrInvert = ENABLE;
9000c076:	4b10      	ldr	r3, [pc, #64]	; (9000c0b8 <__io_putchar+0x194>)
9000c078:	2201      	movs	r2, #1
9000c07a:	701a      	strb	r2, [r3, #0]
      }

      if( ch != '\n')
9000c07c:	687b      	ldr	r3, [r7, #4]
9000c07e:	2b0a      	cmp	r3, #10
9000c080:	d014      	beq.n	9000c0ac <__io_putchar+0x188>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
9000c082:	4b0d      	ldr	r3, [pc, #52]	; (9000c0b8 <__io_putchar+0x194>)
9000c084:	891b      	ldrh	r3, [r3, #8]
9000c086:	4619      	mov	r1, r3
9000c088:	4b0b      	ldr	r3, [pc, #44]	; (9000c0b8 <__io_putchar+0x194>)
9000c08a:	889b      	ldrh	r3, [r3, #4]
9000c08c:	1c5a      	adds	r2, r3, #1
9000c08e:	b290      	uxth	r0, r2
9000c090:	4a09      	ldr	r2, [pc, #36]	; (9000c0b8 <__io_putchar+0x194>)
9000c092:	8090      	strh	r0, [r2, #4]
9000c094:	461c      	mov	r4, r3
9000c096:	687b      	ldr	r3, [r7, #4]
9000c098:	b2d8      	uxtb	r0, r3
9000c09a:	4a08      	ldr	r2, [pc, #32]	; (9000c0bc <__io_putchar+0x198>)
9000c09c:	460b      	mov	r3, r1
9000c09e:	015b      	lsls	r3, r3, #5
9000c0a0:	440b      	add	r3, r1
9000c0a2:	009b      	lsls	r3, r3, #2
9000c0a4:	4413      	add	r3, r2
9000c0a6:	4423      	add	r3, r4
9000c0a8:	4602      	mov	r2, r0
9000c0aa:	701a      	strb	r2, [r3, #0]
      }

    }
  }
  return ch;
9000c0ac:	687b      	ldr	r3, [r7, #4]
}
9000c0ae:	4618      	mov	r0, r3
9000c0b0:	371c      	adds	r7, #28
9000c0b2:	46bd      	mov	sp, r7
9000c0b4:	bd90      	pop	{r4, r7, pc}
9000c0b6:	bf00      	nop
9000c0b8:	2000504c 	.word	0x2000504c
9000c0bc:	200012f0 	.word	0x200012f0

9000c0c0 <UTIL_LCD_TRACE_UpdateDisplay>:
/**
  * @brief  Update the text area display
  * @retval None
  */
void UTIL_LCD_TRACE_UpdateDisplay (void)
{
9000c0c0:	b580      	push	{r7, lr}
9000c0c2:	b084      	sub	sp, #16
9000c0c4:	af00      	add	r7, sp, #0
  uint32_t cnt = 0U, length, ptr, index;
9000c0c6:	2300      	movs	r3, #0
9000c0c8:	60fb      	str	r3, [r7, #12]

  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
9000c0ca:	4b38      	ldr	r3, [pc, #224]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c0cc:	891b      	ldrh	r3, [r3, #8]
9000c0ce:	2b11      	cmp	r3, #17
9000c0d0:	d827      	bhi.n	9000c122 <UTIL_LCD_TRACE_UpdateDisplay+0x62>
     (LcdTrace_Ctx.CacheBufferYptrBottom  >= LcdTrace_Ctx.CacheBufferYptrTop))
9000c0d2:	4b36      	ldr	r3, [pc, #216]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c0d4:	891a      	ldrh	r2, [r3, #8]
9000c0d6:	4b35      	ldr	r3, [pc, #212]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c0d8:	88db      	ldrh	r3, [r3, #6]
  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
9000c0da:	429a      	cmp	r2, r3
9000c0dc:	d321      	bcc.n	9000c122 <UTIL_LCD_TRACE_UpdateDisplay+0x62>
  {
    UTIL_LCD_SetTextColor(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Color);
9000c0de:	4b33      	ldr	r3, [pc, #204]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c0e0:	891b      	ldrh	r3, [r3, #8]
9000c0e2:	461a      	mov	r2, r3
9000c0e4:	68fb      	ldr	r3, [r7, #12]
9000c0e6:	441a      	add	r2, r3
9000c0e8:	4931      	ldr	r1, [pc, #196]	; (9000c1b0 <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000c0ea:	4613      	mov	r3, r2
9000c0ec:	015b      	lsls	r3, r3, #5
9000c0ee:	4413      	add	r3, r2
9000c0f0:	009b      	lsls	r3, r3, #2
9000c0f2:	440b      	add	r3, r1
9000c0f4:	3380      	adds	r3, #128	; 0x80
9000c0f6:	681b      	ldr	r3, [r3, #0]
9000c0f8:	4618      	mov	r0, r3
9000c0fa:	f000 f8d1 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
9000c0fe:	4b2b      	ldr	r3, [pc, #172]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c100:	891b      	ldrh	r3, [r3, #8]
9000c102:	1d18      	adds	r0, r3, #4
                           (uint8_t *)(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Line));
9000c104:	4b29      	ldr	r3, [pc, #164]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c106:	891b      	ldrh	r3, [r3, #8]
9000c108:	461a      	mov	r2, r3
9000c10a:	68fb      	ldr	r3, [r7, #12]
9000c10c:	441a      	add	r2, r3
9000c10e:	4613      	mov	r3, r2
9000c110:	015b      	lsls	r3, r3, #5
9000c112:	4413      	add	r3, r2
9000c114:	009b      	lsls	r3, r3, #2
9000c116:	4a26      	ldr	r2, [pc, #152]	; (9000c1b0 <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000c118:	4413      	add	r3, r2
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
9000c11a:	4619      	mov	r1, r3
9000c11c:	f000 fac2 	bl	9000c6a4 <UTIL_LCD_DisplayStringAtLine>
9000c120:	e040      	b.n	9000c1a4 <UTIL_LCD_TRACE_UpdateDisplay+0xe4>
  }
  else
  {
    if(LcdTrace_Ctx.CacheBufferYptrBottom < LcdTrace_Ctx.CacheBufferYptrTop)
9000c122:	4b22      	ldr	r3, [pc, #136]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c124:	891a      	ldrh	r2, [r3, #8]
9000c126:	4b21      	ldr	r3, [pc, #132]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c128:	88db      	ldrh	r3, [r3, #6]
9000c12a:	429a      	cmp	r2, r3
9000c12c:	d204      	bcs.n	9000c138 <UTIL_LCD_TRACE_UpdateDisplay+0x78>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LcdTrace_Ctx.CacheBufferYptrBottom ;
9000c12e:	4b1f      	ldr	r3, [pc, #124]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c130:	891b      	ldrh	r3, [r3, #8]
9000c132:	3377      	adds	r3, #119	; 0x77
9000c134:	60bb      	str	r3, [r7, #8]
9000c136:	e002      	b.n	9000c13e <UTIL_LCD_TRACE_UpdateDisplay+0x7e>
    }
    else
    {
      length = LcdTrace_Ctx.CacheBufferYptrBottom;
9000c138:	4b1c      	ldr	r3, [pc, #112]	; (9000c1ac <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000c13a:	891b      	ldrh	r3, [r3, #8]
9000c13c:	60bb      	str	r3, [r7, #8]
    }

    ptr = length - YWINDOW_SIZE + 1;
9000c13e:	68bb      	ldr	r3, [r7, #8]
9000c140:	3b12      	subs	r3, #18
9000c142:	607b      	str	r3, [r7, #4]

    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000c144:	2300      	movs	r3, #0
9000c146:	60fb      	str	r3, [r7, #12]
9000c148:	e028      	b.n	9000c19c <UTIL_LCD_TRACE_UpdateDisplay+0xdc>
    {
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000c14a:	68fa      	ldr	r2, [r7, #12]
9000c14c:	687b      	ldr	r3, [r7, #4]
9000c14e:	441a      	add	r2, r3
9000c150:	4b18      	ldr	r3, [pc, #96]	; (9000c1b4 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
9000c152:	fba3 1302 	umull	r1, r3, r3, r2
9000c156:	0959      	lsrs	r1, r3, #5
9000c158:	460b      	mov	r3, r1
9000c15a:	00db      	lsls	r3, r3, #3
9000c15c:	1a5b      	subs	r3, r3, r1
9000c15e:	0119      	lsls	r1, r3, #4
9000c160:	440b      	add	r3, r1
9000c162:	1ad3      	subs	r3, r2, r3
9000c164:	603b      	str	r3, [r7, #0]

      UTIL_LCD_SetTextColor(LCD_CacheBuffer[index].Color);
9000c166:	4912      	ldr	r1, [pc, #72]	; (9000c1b0 <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000c168:	683a      	ldr	r2, [r7, #0]
9000c16a:	4613      	mov	r3, r2
9000c16c:	015b      	lsls	r3, r3, #5
9000c16e:	4413      	add	r3, r2
9000c170:	009b      	lsls	r3, r3, #2
9000c172:	440b      	add	r3, r1
9000c174:	3380      	adds	r3, #128	; 0x80
9000c176:	681b      	ldr	r3, [r3, #0]
9000c178:	4618      	mov	r0, r3
9000c17a:	f000 f891 	bl	9000c2a0 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
9000c17e:	68fb      	ldr	r3, [r7, #12]
9000c180:	1d18      	adds	r0, r3, #4
                             (uint8_t *)(LCD_CacheBuffer[index].Line));
9000c182:	683a      	ldr	r2, [r7, #0]
9000c184:	4613      	mov	r3, r2
9000c186:	015b      	lsls	r3, r3, #5
9000c188:	4413      	add	r3, r2
9000c18a:	009b      	lsls	r3, r3, #2
9000c18c:	4a08      	ldr	r2, [pc, #32]	; (9000c1b0 <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000c18e:	4413      	add	r3, r2
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
9000c190:	4619      	mov	r1, r3
9000c192:	f000 fa87 	bl	9000c6a4 <UTIL_LCD_DisplayStringAtLine>
    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000c196:	68fb      	ldr	r3, [r7, #12]
9000c198:	3301      	adds	r3, #1
9000c19a:	60fb      	str	r3, [r7, #12]
9000c19c:	68fb      	ldr	r3, [r7, #12]
9000c19e:	2b12      	cmp	r3, #18
9000c1a0:	d9d3      	bls.n	9000c14a <UTIL_LCD_TRACE_UpdateDisplay+0x8a>
    }
  }
}
9000c1a2:	bf00      	nop
9000c1a4:	bf00      	nop
9000c1a6:	3710      	adds	r7, #16
9000c1a8:	46bd      	mov	sp, r7
9000c1aa:	bd80      	pop	{r7, pc}
9000c1ac:	2000504c 	.word	0x2000504c
9000c1b0:	200012f0 	.word	0x200012f0
9000c1b4:	44d72045 	.word	0x44d72045

9000c1b8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000c1b8:	b580      	push	{r7, lr}
9000c1ba:	b082      	sub	sp, #8
9000c1bc:	af00      	add	r7, sp, #0
9000c1be:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000c1c0:	687b      	ldr	r3, [r7, #4]
9000c1c2:	681b      	ldr	r3, [r3, #0]
9000c1c4:	4a22      	ldr	r2, [pc, #136]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1c6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000c1c8:	687b      	ldr	r3, [r7, #4]
9000c1ca:	685b      	ldr	r3, [r3, #4]
9000c1cc:	4a20      	ldr	r2, [pc, #128]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1ce:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000c1d0:	687b      	ldr	r3, [r7, #4]
9000c1d2:	689b      	ldr	r3, [r3, #8]
9000c1d4:	4a1e      	ldr	r2, [pc, #120]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1d6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000c1d8:	687b      	ldr	r3, [r7, #4]
9000c1da:	68db      	ldr	r3, [r3, #12]
9000c1dc:	4a1c      	ldr	r2, [pc, #112]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1de:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000c1e0:	687b      	ldr	r3, [r7, #4]
9000c1e2:	691b      	ldr	r3, [r3, #16]
9000c1e4:	4a1a      	ldr	r2, [pc, #104]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1e6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000c1e8:	687b      	ldr	r3, [r7, #4]
9000c1ea:	695b      	ldr	r3, [r3, #20]
9000c1ec:	4a18      	ldr	r2, [pc, #96]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1ee:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000c1f0:	687b      	ldr	r3, [r7, #4]
9000c1f2:	699b      	ldr	r3, [r3, #24]
9000c1f4:	4a16      	ldr	r2, [pc, #88]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1f6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000c1f8:	687b      	ldr	r3, [r7, #4]
9000c1fa:	69db      	ldr	r3, [r3, #28]
9000c1fc:	4a14      	ldr	r2, [pc, #80]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c1fe:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000c200:	687b      	ldr	r3, [r7, #4]
9000c202:	6a1b      	ldr	r3, [r3, #32]
9000c204:	4a12      	ldr	r2, [pc, #72]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c206:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000c208:	687b      	ldr	r3, [r7, #4]
9000c20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000c20c:	4a10      	ldr	r2, [pc, #64]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c20e:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000c210:	687b      	ldr	r3, [r7, #4]
9000c212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000c214:	4a0e      	ldr	r2, [pc, #56]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c216:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
9000c218:	4b0e      	ldr	r3, [pc, #56]	; (9000c254 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c21a:	2200      	movs	r2, #0
9000c21c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000c21e:	4b0d      	ldr	r3, [pc, #52]	; (9000c254 <UTIL_LCD_SetFuncDriver+0x9c>)
9000c220:	2200      	movs	r2, #0
9000c222:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000c224:	4b0a      	ldr	r3, [pc, #40]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c226:	69db      	ldr	r3, [r3, #28]
9000c228:	4a0b      	ldr	r2, [pc, #44]	; (9000c258 <UTIL_LCD_SetFuncDriver+0xa0>)
9000c22a:	4611      	mov	r1, r2
9000c22c:	2000      	movs	r0, #0
9000c22e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000c230:	4b07      	ldr	r3, [pc, #28]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c232:	6a1b      	ldr	r3, [r3, #32]
9000c234:	4a09      	ldr	r2, [pc, #36]	; (9000c25c <UTIL_LCD_SetFuncDriver+0xa4>)
9000c236:	4611      	mov	r1, r2
9000c238:	2000      	movs	r0, #0
9000c23a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000c23c:	4b04      	ldr	r3, [pc, #16]	; (9000c250 <UTIL_LCD_SetFuncDriver+0x98>)
9000c23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000c240:	4a07      	ldr	r2, [pc, #28]	; (9000c260 <UTIL_LCD_SetFuncDriver+0xa8>)
9000c242:	4611      	mov	r1, r2
9000c244:	2000      	movs	r0, #0
9000c246:	4798      	blx	r3
}
9000c248:	bf00      	nop
9000c24a:	3708      	adds	r7, #8
9000c24c:	46bd      	mov	sp, r7
9000c24e:	bd80      	pop	{r7, pc}
9000c250:	200050a4 	.word	0x200050a4
9000c254:	20005064 	.word	0x20005064
9000c258:	20005078 	.word	0x20005078
9000c25c:	2000507c 	.word	0x2000507c
9000c260:	20005080 	.word	0x20005080

9000c264 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000c264:	b580      	push	{r7, lr}
9000c266:	b082      	sub	sp, #8
9000c268:	af00      	add	r7, sp, #0
9000c26a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000c26c:	4b0a      	ldr	r3, [pc, #40]	; (9000c298 <UTIL_LCD_SetLayer+0x34>)
9000c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000c270:	2b00      	cmp	r3, #0
9000c272:	d00c      	beq.n	9000c28e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000c274:	4b08      	ldr	r3, [pc, #32]	; (9000c298 <UTIL_LCD_SetLayer+0x34>)
9000c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000c278:	4a08      	ldr	r2, [pc, #32]	; (9000c29c <UTIL_LCD_SetLayer+0x38>)
9000c27a:	6912      	ldr	r2, [r2, #16]
9000c27c:	6879      	ldr	r1, [r7, #4]
9000c27e:	4610      	mov	r0, r2
9000c280:	4798      	blx	r3
9000c282:	4603      	mov	r3, r0
9000c284:	2b00      	cmp	r3, #0
9000c286:	d102      	bne.n	9000c28e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000c288:	4a04      	ldr	r2, [pc, #16]	; (9000c29c <UTIL_LCD_SetLayer+0x38>)
9000c28a:	687b      	ldr	r3, [r7, #4]
9000c28c:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000c28e:	bf00      	nop
9000c290:	3708      	adds	r7, #8
9000c292:	46bd      	mov	sp, r7
9000c294:	bd80      	pop	{r7, pc}
9000c296:	bf00      	nop
9000c298:	200050a4 	.word	0x200050a4
9000c29c:	20005064 	.word	0x20005064

9000c2a0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000c2a0:	b480      	push	{r7}
9000c2a2:	b083      	sub	sp, #12
9000c2a4:	af00      	add	r7, sp, #0
9000c2a6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000c2a8:	4b06      	ldr	r3, [pc, #24]	; (9000c2c4 <UTIL_LCD_SetTextColor+0x24>)
9000c2aa:	68db      	ldr	r3, [r3, #12]
9000c2ac:	4a05      	ldr	r2, [pc, #20]	; (9000c2c4 <UTIL_LCD_SetTextColor+0x24>)
9000c2ae:	015b      	lsls	r3, r3, #5
9000c2b0:	4413      	add	r3, r2
9000c2b2:	687a      	ldr	r2, [r7, #4]
9000c2b4:	601a      	str	r2, [r3, #0]
}
9000c2b6:	bf00      	nop
9000c2b8:	370c      	adds	r7, #12
9000c2ba:	46bd      	mov	sp, r7
9000c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c2c0:	4770      	bx	lr
9000c2c2:	bf00      	nop
9000c2c4:	20005064 	.word	0x20005064

9000c2c8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000c2c8:	b480      	push	{r7}
9000c2ca:	b083      	sub	sp, #12
9000c2cc:	af00      	add	r7, sp, #0
9000c2ce:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000c2d0:	4b06      	ldr	r3, [pc, #24]	; (9000c2ec <UTIL_LCD_SetBackColor+0x24>)
9000c2d2:	68db      	ldr	r3, [r3, #12]
9000c2d4:	4a05      	ldr	r2, [pc, #20]	; (9000c2ec <UTIL_LCD_SetBackColor+0x24>)
9000c2d6:	015b      	lsls	r3, r3, #5
9000c2d8:	4413      	add	r3, r2
9000c2da:	3304      	adds	r3, #4
9000c2dc:	687a      	ldr	r2, [r7, #4]
9000c2de:	601a      	str	r2, [r3, #0]
}
9000c2e0:	bf00      	nop
9000c2e2:	370c      	adds	r7, #12
9000c2e4:	46bd      	mov	sp, r7
9000c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c2ea:	4770      	bx	lr
9000c2ec:	20005064 	.word	0x20005064

9000c2f0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000c2f0:	b480      	push	{r7}
9000c2f2:	b083      	sub	sp, #12
9000c2f4:	af00      	add	r7, sp, #0
9000c2f6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000c2f8:	4b06      	ldr	r3, [pc, #24]	; (9000c314 <UTIL_LCD_SetFont+0x24>)
9000c2fa:	68db      	ldr	r3, [r3, #12]
9000c2fc:	4a05      	ldr	r2, [pc, #20]	; (9000c314 <UTIL_LCD_SetFont+0x24>)
9000c2fe:	015b      	lsls	r3, r3, #5
9000c300:	4413      	add	r3, r2
9000c302:	3308      	adds	r3, #8
9000c304:	687a      	ldr	r2, [r7, #4]
9000c306:	601a      	str	r2, [r3, #0]
}
9000c308:	bf00      	nop
9000c30a:	370c      	adds	r7, #12
9000c30c:	46bd      	mov	sp, r7
9000c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c312:	4770      	bx	lr
9000c314:	20005064 	.word	0x20005064

9000c318 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
9000c318:	b480      	push	{r7}
9000c31a:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
9000c31c:	4b05      	ldr	r3, [pc, #20]	; (9000c334 <UTIL_LCD_GetFont+0x1c>)
9000c31e:	68db      	ldr	r3, [r3, #12]
9000c320:	4a04      	ldr	r2, [pc, #16]	; (9000c334 <UTIL_LCD_GetFont+0x1c>)
9000c322:	015b      	lsls	r3, r3, #5
9000c324:	4413      	add	r3, r2
9000c326:	3308      	adds	r3, #8
9000c328:	681b      	ldr	r3, [r3, #0]
}
9000c32a:	4618      	mov	r0, r3
9000c32c:	46bd      	mov	sp, r7
9000c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c332:	4770      	bx	lr
9000c334:	20005064 	.word	0x20005064

9000c338 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000c338:	b590      	push	{r4, r7, lr}
9000c33a:	b087      	sub	sp, #28
9000c33c:	af02      	add	r7, sp, #8
9000c33e:	60f8      	str	r0, [r7, #12]
9000c340:	60b9      	str	r1, [r7, #8]
9000c342:	607a      	str	r2, [r7, #4]
9000c344:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000c346:	4b08      	ldr	r3, [pc, #32]	; (9000c368 <UTIL_LCD_FillRGBRect+0x30>)
9000c348:	685c      	ldr	r4, [r3, #4]
9000c34a:	4b08      	ldr	r3, [pc, #32]	; (9000c36c <UTIL_LCD_FillRGBRect+0x34>)
9000c34c:	6918      	ldr	r0, [r3, #16]
9000c34e:	6a3b      	ldr	r3, [r7, #32]
9000c350:	9301      	str	r3, [sp, #4]
9000c352:	683b      	ldr	r3, [r7, #0]
9000c354:	9300      	str	r3, [sp, #0]
9000c356:	687b      	ldr	r3, [r7, #4]
9000c358:	68ba      	ldr	r2, [r7, #8]
9000c35a:	68f9      	ldr	r1, [r7, #12]
9000c35c:	47a0      	blx	r4
}
9000c35e:	bf00      	nop
9000c360:	3714      	adds	r7, #20
9000c362:	46bd      	mov	sp, r7
9000c364:	bd90      	pop	{r4, r7, pc}
9000c366:	bf00      	nop
9000c368:	200050a4 	.word	0x200050a4
9000c36c:	20005064 	.word	0x20005064

9000c370 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000c370:	b590      	push	{r4, r7, lr}
9000c372:	b087      	sub	sp, #28
9000c374:	af02      	add	r7, sp, #8
9000c376:	60f8      	str	r0, [r7, #12]
9000c378:	60b9      	str	r1, [r7, #8]
9000c37a:	607a      	str	r2, [r7, #4]
9000c37c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c37e:	4b15      	ldr	r3, [pc, #84]	; (9000c3d4 <UTIL_LCD_DrawHLine+0x64>)
9000c380:	69db      	ldr	r3, [r3, #28]
9000c382:	2b02      	cmp	r3, #2
9000c384:	d118      	bne.n	9000c3b8 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
9000c386:	4b14      	ldr	r3, [pc, #80]	; (9000c3d8 <UTIL_LCD_DrawHLine+0x68>)
9000c388:	689c      	ldr	r4, [r3, #8]
9000c38a:	4b12      	ldr	r3, [pc, #72]	; (9000c3d4 <UTIL_LCD_DrawHLine+0x64>)
9000c38c:	6918      	ldr	r0, [r3, #16]
9000c38e:	683b      	ldr	r3, [r7, #0]
9000c390:	08db      	lsrs	r3, r3, #3
9000c392:	f003 021f 	and.w	r2, r3, #31
9000c396:	683b      	ldr	r3, [r7, #0]
9000c398:	0a9b      	lsrs	r3, r3, #10
9000c39a:	015b      	lsls	r3, r3, #5
9000c39c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000c3a0:	431a      	orrs	r2, r3
9000c3a2:	683b      	ldr	r3, [r7, #0]
9000c3a4:	0cdb      	lsrs	r3, r3, #19
9000c3a6:	02db      	lsls	r3, r3, #11
9000c3a8:	b29b      	uxth	r3, r3
9000c3aa:	4313      	orrs	r3, r2
9000c3ac:	9300      	str	r3, [sp, #0]
9000c3ae:	687b      	ldr	r3, [r7, #4]
9000c3b0:	68ba      	ldr	r2, [r7, #8]
9000c3b2:	68f9      	ldr	r1, [r7, #12]
9000c3b4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
9000c3b6:	e009      	b.n	9000c3cc <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
9000c3b8:	4b07      	ldr	r3, [pc, #28]	; (9000c3d8 <UTIL_LCD_DrawHLine+0x68>)
9000c3ba:	689c      	ldr	r4, [r3, #8]
9000c3bc:	4b05      	ldr	r3, [pc, #20]	; (9000c3d4 <UTIL_LCD_DrawHLine+0x64>)
9000c3be:	6918      	ldr	r0, [r3, #16]
9000c3c0:	683b      	ldr	r3, [r7, #0]
9000c3c2:	9300      	str	r3, [sp, #0]
9000c3c4:	687b      	ldr	r3, [r7, #4]
9000c3c6:	68ba      	ldr	r2, [r7, #8]
9000c3c8:	68f9      	ldr	r1, [r7, #12]
9000c3ca:	47a0      	blx	r4
}
9000c3cc:	bf00      	nop
9000c3ce:	3714      	adds	r7, #20
9000c3d0:	46bd      	mov	sp, r7
9000c3d2:	bd90      	pop	{r4, r7, pc}
9000c3d4:	20005064 	.word	0x20005064
9000c3d8:	200050a4 	.word	0x200050a4

9000c3dc <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000c3dc:	b590      	push	{r4, r7, lr}
9000c3de:	b087      	sub	sp, #28
9000c3e0:	af02      	add	r7, sp, #8
9000c3e2:	60f8      	str	r0, [r7, #12]
9000c3e4:	60b9      	str	r1, [r7, #8]
9000c3e6:	607a      	str	r2, [r7, #4]
9000c3e8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c3ea:	4b15      	ldr	r3, [pc, #84]	; (9000c440 <UTIL_LCD_DrawVLine+0x64>)
9000c3ec:	69db      	ldr	r3, [r3, #28]
9000c3ee:	2b02      	cmp	r3, #2
9000c3f0:	d118      	bne.n	9000c424 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
9000c3f2:	4b14      	ldr	r3, [pc, #80]	; (9000c444 <UTIL_LCD_DrawVLine+0x68>)
9000c3f4:	68dc      	ldr	r4, [r3, #12]
9000c3f6:	4b12      	ldr	r3, [pc, #72]	; (9000c440 <UTIL_LCD_DrawVLine+0x64>)
9000c3f8:	6918      	ldr	r0, [r3, #16]
9000c3fa:	683b      	ldr	r3, [r7, #0]
9000c3fc:	08db      	lsrs	r3, r3, #3
9000c3fe:	f003 021f 	and.w	r2, r3, #31
9000c402:	683b      	ldr	r3, [r7, #0]
9000c404:	0a9b      	lsrs	r3, r3, #10
9000c406:	015b      	lsls	r3, r3, #5
9000c408:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000c40c:	431a      	orrs	r2, r3
9000c40e:	683b      	ldr	r3, [r7, #0]
9000c410:	0cdb      	lsrs	r3, r3, #19
9000c412:	02db      	lsls	r3, r3, #11
9000c414:	b29b      	uxth	r3, r3
9000c416:	4313      	orrs	r3, r2
9000c418:	9300      	str	r3, [sp, #0]
9000c41a:	687b      	ldr	r3, [r7, #4]
9000c41c:	68ba      	ldr	r2, [r7, #8]
9000c41e:	68f9      	ldr	r1, [r7, #12]
9000c420:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
9000c422:	e009      	b.n	9000c438 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
9000c424:	4b07      	ldr	r3, [pc, #28]	; (9000c444 <UTIL_LCD_DrawVLine+0x68>)
9000c426:	68dc      	ldr	r4, [r3, #12]
9000c428:	4b05      	ldr	r3, [pc, #20]	; (9000c440 <UTIL_LCD_DrawVLine+0x64>)
9000c42a:	6918      	ldr	r0, [r3, #16]
9000c42c:	683b      	ldr	r3, [r7, #0]
9000c42e:	9300      	str	r3, [sp, #0]
9000c430:	687b      	ldr	r3, [r7, #4]
9000c432:	68ba      	ldr	r2, [r7, #8]
9000c434:	68f9      	ldr	r1, [r7, #12]
9000c436:	47a0      	blx	r4
}
9000c438:	bf00      	nop
9000c43a:	3714      	adds	r7, #20
9000c43c:	46bd      	mov	sp, r7
9000c43e:	bd90      	pop	{r4, r7, pc}
9000c440:	20005064 	.word	0x20005064
9000c444:	200050a4 	.word	0x200050a4

9000c448 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
9000c448:	b5b0      	push	{r4, r5, r7, lr}
9000c44a:	b082      	sub	sp, #8
9000c44c:	af00      	add	r7, sp, #0
9000c44e:	4603      	mov	r3, r0
9000c450:	603a      	str	r2, [r7, #0]
9000c452:	80fb      	strh	r3, [r7, #6]
9000c454:	460b      	mov	r3, r1
9000c456:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c458:	4b13      	ldr	r3, [pc, #76]	; (9000c4a8 <UTIL_LCD_SetPixel+0x60>)
9000c45a:	69db      	ldr	r3, [r3, #28]
9000c45c:	2b02      	cmp	r3, #2
9000c45e:	d117      	bne.n	9000c490 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
9000c460:	4b12      	ldr	r3, [pc, #72]	; (9000c4ac <UTIL_LCD_SetPixel+0x64>)
9000c462:	699c      	ldr	r4, [r3, #24]
9000c464:	4b10      	ldr	r3, [pc, #64]	; (9000c4a8 <UTIL_LCD_SetPixel+0x60>)
9000c466:	6918      	ldr	r0, [r3, #16]
9000c468:	88f9      	ldrh	r1, [r7, #6]
9000c46a:	88bd      	ldrh	r5, [r7, #4]
9000c46c:	683b      	ldr	r3, [r7, #0]
9000c46e:	08db      	lsrs	r3, r3, #3
9000c470:	f003 021f 	and.w	r2, r3, #31
9000c474:	683b      	ldr	r3, [r7, #0]
9000c476:	0a9b      	lsrs	r3, r3, #10
9000c478:	015b      	lsls	r3, r3, #5
9000c47a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000c47e:	431a      	orrs	r2, r3
9000c480:	683b      	ldr	r3, [r7, #0]
9000c482:	0cdb      	lsrs	r3, r3, #19
9000c484:	02db      	lsls	r3, r3, #11
9000c486:	b29b      	uxth	r3, r3
9000c488:	4313      	orrs	r3, r2
9000c48a:	462a      	mov	r2, r5
9000c48c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
9000c48e:	e007      	b.n	9000c4a0 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
9000c490:	4b06      	ldr	r3, [pc, #24]	; (9000c4ac <UTIL_LCD_SetPixel+0x64>)
9000c492:	699c      	ldr	r4, [r3, #24]
9000c494:	4b04      	ldr	r3, [pc, #16]	; (9000c4a8 <UTIL_LCD_SetPixel+0x60>)
9000c496:	6918      	ldr	r0, [r3, #16]
9000c498:	88f9      	ldrh	r1, [r7, #6]
9000c49a:	88ba      	ldrh	r2, [r7, #4]
9000c49c:	683b      	ldr	r3, [r7, #0]
9000c49e:	47a0      	blx	r4
}
9000c4a0:	bf00      	nop
9000c4a2:	3708      	adds	r7, #8
9000c4a4:	46bd      	mov	sp, r7
9000c4a6:	bdb0      	pop	{r4, r5, r7, pc}
9000c4a8:	20005064 	.word	0x20005064
9000c4ac:	200050a4 	.word	0x200050a4

9000c4b0 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000c4b0:	b580      	push	{r7, lr}
9000c4b2:	b084      	sub	sp, #16
9000c4b4:	af02      	add	r7, sp, #8
9000c4b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000c4b8:	4b07      	ldr	r3, [pc, #28]	; (9000c4d8 <UTIL_LCD_Clear+0x28>)
9000c4ba:	695a      	ldr	r2, [r3, #20]
9000c4bc:	4b06      	ldr	r3, [pc, #24]	; (9000c4d8 <UTIL_LCD_Clear+0x28>)
9000c4be:	6999      	ldr	r1, [r3, #24]
9000c4c0:	687b      	ldr	r3, [r7, #4]
9000c4c2:	9300      	str	r3, [sp, #0]
9000c4c4:	460b      	mov	r3, r1
9000c4c6:	2100      	movs	r1, #0
9000c4c8:	2000      	movs	r0, #0
9000c4ca:	f000 fa35 	bl	9000c938 <UTIL_LCD_FillRect>
}
9000c4ce:	bf00      	nop
9000c4d0:	3708      	adds	r7, #8
9000c4d2:	46bd      	mov	sp, r7
9000c4d4:	bd80      	pop	{r7, pc}
9000c4d6:	bf00      	nop
9000c4d8:	20005064 	.word	0x20005064

9000c4dc <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000c4dc:	b580      	push	{r7, lr}
9000c4de:	b084      	sub	sp, #16
9000c4e0:	af00      	add	r7, sp, #0
9000c4e2:	60f8      	str	r0, [r7, #12]
9000c4e4:	60b9      	str	r1, [r7, #8]
9000c4e6:	4613      	mov	r3, r2
9000c4e8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c4ea:	4b16      	ldr	r3, [pc, #88]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c4ec:	68db      	ldr	r3, [r3, #12]
9000c4ee:	4a15      	ldr	r2, [pc, #84]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c4f0:	015b      	lsls	r3, r3, #5
9000c4f2:	4413      	add	r3, r2
9000c4f4:	3308      	adds	r3, #8
9000c4f6:	681b      	ldr	r3, [r3, #0]
9000c4f8:	681a      	ldr	r2, [r3, #0]
9000c4fa:	79fb      	ldrb	r3, [r7, #7]
9000c4fc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c4fe:	4911      	ldr	r1, [pc, #68]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c500:	68c9      	ldr	r1, [r1, #12]
9000c502:	4810      	ldr	r0, [pc, #64]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c504:	0149      	lsls	r1, r1, #5
9000c506:	4401      	add	r1, r0
9000c508:	3108      	adds	r1, #8
9000c50a:	6809      	ldr	r1, [r1, #0]
9000c50c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c50e:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000c512:	4b0c      	ldr	r3, [pc, #48]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c514:	68db      	ldr	r3, [r3, #12]
9000c516:	480b      	ldr	r0, [pc, #44]	; (9000c544 <UTIL_LCD_DisplayChar+0x68>)
9000c518:	015b      	lsls	r3, r3, #5
9000c51a:	4403      	add	r3, r0
9000c51c:	3308      	adds	r3, #8
9000c51e:	681b      	ldr	r3, [r3, #0]
9000c520:	889b      	ldrh	r3, [r3, #4]
9000c522:	3307      	adds	r3, #7
9000c524:	2b00      	cmp	r3, #0
9000c526:	da00      	bge.n	9000c52a <UTIL_LCD_DisplayChar+0x4e>
9000c528:	3307      	adds	r3, #7
9000c52a:	10db      	asrs	r3, r3, #3
9000c52c:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000c530:	4413      	add	r3, r2
9000c532:	461a      	mov	r2, r3
9000c534:	68b9      	ldr	r1, [r7, #8]
9000c536:	68f8      	ldr	r0, [r7, #12]
9000c538:	f000 fae4 	bl	9000cb04 <DrawChar>
}
9000c53c:	bf00      	nop
9000c53e:	3710      	adds	r7, #16
9000c540:	46bd      	mov	sp, r7
9000c542:	bd80      	pop	{r7, pc}
9000c544:	20005064 	.word	0x20005064

9000c548 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000c548:	b580      	push	{r7, lr}
9000c54a:	b08a      	sub	sp, #40	; 0x28
9000c54c:	af00      	add	r7, sp, #0
9000c54e:	60f8      	str	r0, [r7, #12]
9000c550:	60b9      	str	r1, [r7, #8]
9000c552:	607a      	str	r2, [r7, #4]
9000c554:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000c556:	2301      	movs	r3, #1
9000c558:	627b      	str	r3, [r7, #36]	; 0x24
9000c55a:	2300      	movs	r3, #0
9000c55c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000c55e:	2300      	movs	r3, #0
9000c560:	61fb      	str	r3, [r7, #28]
9000c562:	2300      	movs	r3, #0
9000c564:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000c566:	687b      	ldr	r3, [r7, #4]
9000c568:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000c56a:	e002      	b.n	9000c572 <UTIL_LCD_DisplayStringAt+0x2a>
9000c56c:	69fb      	ldr	r3, [r7, #28]
9000c56e:	3301      	adds	r3, #1
9000c570:	61fb      	str	r3, [r7, #28]
9000c572:	69bb      	ldr	r3, [r7, #24]
9000c574:	1c5a      	adds	r2, r3, #1
9000c576:	61ba      	str	r2, [r7, #24]
9000c578:	781b      	ldrb	r3, [r3, #0]
9000c57a:	2b00      	cmp	r3, #0
9000c57c:	d1f6      	bne.n	9000c56c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c57e:	4b48      	ldr	r3, [pc, #288]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c580:	695b      	ldr	r3, [r3, #20]
9000c582:	4a47      	ldr	r2, [pc, #284]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c584:	68d2      	ldr	r2, [r2, #12]
9000c586:	4946      	ldr	r1, [pc, #280]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c588:	0152      	lsls	r2, r2, #5
9000c58a:	440a      	add	r2, r1
9000c58c:	3208      	adds	r2, #8
9000c58e:	6812      	ldr	r2, [r2, #0]
9000c590:	8892      	ldrh	r2, [r2, #4]
9000c592:	fbb3 f3f2 	udiv	r3, r3, r2
9000c596:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000c598:	78fb      	ldrb	r3, [r7, #3]
9000c59a:	2b03      	cmp	r3, #3
9000c59c:	d018      	beq.n	9000c5d0 <UTIL_LCD_DisplayStringAt+0x88>
9000c59e:	2b03      	cmp	r3, #3
9000c5a0:	dc2a      	bgt.n	9000c5f8 <UTIL_LCD_DisplayStringAt+0xb0>
9000c5a2:	2b01      	cmp	r3, #1
9000c5a4:	d002      	beq.n	9000c5ac <UTIL_LCD_DisplayStringAt+0x64>
9000c5a6:	2b02      	cmp	r3, #2
9000c5a8:	d015      	beq.n	9000c5d6 <UTIL_LCD_DisplayStringAt+0x8e>
9000c5aa:	e025      	b.n	9000c5f8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000c5ac:	697a      	ldr	r2, [r7, #20]
9000c5ae:	69fb      	ldr	r3, [r7, #28]
9000c5b0:	1ad3      	subs	r3, r2, r3
9000c5b2:	4a3b      	ldr	r2, [pc, #236]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c5b4:	68d2      	ldr	r2, [r2, #12]
9000c5b6:	493a      	ldr	r1, [pc, #232]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c5b8:	0152      	lsls	r2, r2, #5
9000c5ba:	440a      	add	r2, r1
9000c5bc:	3208      	adds	r2, #8
9000c5be:	6812      	ldr	r2, [r2, #0]
9000c5c0:	8892      	ldrh	r2, [r2, #4]
9000c5c2:	fb02 f303 	mul.w	r3, r2, r3
9000c5c6:	085b      	lsrs	r3, r3, #1
9000c5c8:	68fa      	ldr	r2, [r7, #12]
9000c5ca:	4413      	add	r3, r2
9000c5cc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000c5ce:	e016      	b.n	9000c5fe <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000c5d0:	68fb      	ldr	r3, [r7, #12]
9000c5d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000c5d4:	e013      	b.n	9000c5fe <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000c5d6:	697a      	ldr	r2, [r7, #20]
9000c5d8:	69fb      	ldr	r3, [r7, #28]
9000c5da:	1ad3      	subs	r3, r2, r3
9000c5dc:	4a30      	ldr	r2, [pc, #192]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c5de:	68d2      	ldr	r2, [r2, #12]
9000c5e0:	492f      	ldr	r1, [pc, #188]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c5e2:	0152      	lsls	r2, r2, #5
9000c5e4:	440a      	add	r2, r1
9000c5e6:	3208      	adds	r2, #8
9000c5e8:	6812      	ldr	r2, [r2, #0]
9000c5ea:	8892      	ldrh	r2, [r2, #4]
9000c5ec:	fb03 f202 	mul.w	r2, r3, r2
9000c5f0:	68fb      	ldr	r3, [r7, #12]
9000c5f2:	1ad3      	subs	r3, r2, r3
9000c5f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000c5f6:	e002      	b.n	9000c5fe <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000c5f8:	68fb      	ldr	r3, [r7, #12]
9000c5fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000c5fc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c600:	2b00      	cmp	r3, #0
9000c602:	d003      	beq.n	9000c60c <UTIL_LCD_DisplayStringAt+0xc4>
9000c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000c60a:	d31b      	bcc.n	9000c644 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000c60c:	2301      	movs	r3, #1
9000c60e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c610:	e018      	b.n	9000c644 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000c612:	687b      	ldr	r3, [r7, #4]
9000c614:	781b      	ldrb	r3, [r3, #0]
9000c616:	461a      	mov	r2, r3
9000c618:	68b9      	ldr	r1, [r7, #8]
9000c61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000c61c:	f7ff ff5e 	bl	9000c4dc <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000c620:	4b1f      	ldr	r3, [pc, #124]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c622:	68db      	ldr	r3, [r3, #12]
9000c624:	4a1e      	ldr	r2, [pc, #120]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c626:	015b      	lsls	r3, r3, #5
9000c628:	4413      	add	r3, r2
9000c62a:	3308      	adds	r3, #8
9000c62c:	681b      	ldr	r3, [r3, #0]
9000c62e:	889b      	ldrh	r3, [r3, #4]
9000c630:	461a      	mov	r2, r3
9000c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000c634:	4413      	add	r3, r2
9000c636:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
9000c638:	687b      	ldr	r3, [r7, #4]
9000c63a:	3301      	adds	r3, #1
9000c63c:	607b      	str	r3, [r7, #4]
    i++;
9000c63e:	6a3b      	ldr	r3, [r7, #32]
9000c640:	3301      	adds	r3, #1
9000c642:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000c644:	687b      	ldr	r3, [r7, #4]
9000c646:	781b      	ldrb	r3, [r3, #0]
9000c648:	2b00      	cmp	r3, #0
9000c64a:	bf14      	ite	ne
9000c64c:	2301      	movne	r3, #1
9000c64e:	2300      	moveq	r3, #0
9000c650:	b2da      	uxtb	r2, r3
9000c652:	4b13      	ldr	r3, [pc, #76]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c654:	6959      	ldr	r1, [r3, #20]
9000c656:	4b12      	ldr	r3, [pc, #72]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c658:	68db      	ldr	r3, [r3, #12]
9000c65a:	4811      	ldr	r0, [pc, #68]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c65c:	015b      	lsls	r3, r3, #5
9000c65e:	4403      	add	r3, r0
9000c660:	3308      	adds	r3, #8
9000c662:	681b      	ldr	r3, [r3, #0]
9000c664:	889b      	ldrh	r3, [r3, #4]
9000c666:	4618      	mov	r0, r3
9000c668:	6a3b      	ldr	r3, [r7, #32]
9000c66a:	fb00 f303 	mul.w	r3, r0, r3
9000c66e:	1acb      	subs	r3, r1, r3
9000c670:	b29b      	uxth	r3, r3
9000c672:	490b      	ldr	r1, [pc, #44]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c674:	68c9      	ldr	r1, [r1, #12]
9000c676:	480a      	ldr	r0, [pc, #40]	; (9000c6a0 <UTIL_LCD_DisplayStringAt+0x158>)
9000c678:	0149      	lsls	r1, r1, #5
9000c67a:	4401      	add	r1, r0
9000c67c:	3108      	adds	r1, #8
9000c67e:	6809      	ldr	r1, [r1, #0]
9000c680:	8889      	ldrh	r1, [r1, #4]
9000c682:	428b      	cmp	r3, r1
9000c684:	bf2c      	ite	cs
9000c686:	2301      	movcs	r3, #1
9000c688:	2300      	movcc	r3, #0
9000c68a:	b2db      	uxtb	r3, r3
9000c68c:	4013      	ands	r3, r2
9000c68e:	b2db      	uxtb	r3, r3
9000c690:	2b00      	cmp	r3, #0
9000c692:	d1be      	bne.n	9000c612 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000c694:	bf00      	nop
9000c696:	bf00      	nop
9000c698:	3728      	adds	r7, #40	; 0x28
9000c69a:	46bd      	mov	sp, r7
9000c69c:	bd80      	pop	{r7, pc}
9000c69e:	bf00      	nop
9000c6a0:	20005064 	.word	0x20005064

9000c6a4 <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
9000c6a4:	b580      	push	{r7, lr}
9000c6a6:	b082      	sub	sp, #8
9000c6a8:	af00      	add	r7, sp, #0
9000c6aa:	6078      	str	r0, [r7, #4]
9000c6ac:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
9000c6ae:	f7ff fe33 	bl	9000c318 <UTIL_LCD_GetFont>
9000c6b2:	4603      	mov	r3, r0
9000c6b4:	88db      	ldrh	r3, [r3, #6]
9000c6b6:	461a      	mov	r2, r3
9000c6b8:	687b      	ldr	r3, [r7, #4]
9000c6ba:	fb03 f102 	mul.w	r1, r3, r2
9000c6be:	2303      	movs	r3, #3
9000c6c0:	683a      	ldr	r2, [r7, #0]
9000c6c2:	2000      	movs	r0, #0
9000c6c4:	f7ff ff40 	bl	9000c548 <UTIL_LCD_DisplayStringAt>
}
9000c6c8:	bf00      	nop
9000c6ca:	3708      	adds	r7, #8
9000c6cc:	46bd      	mov	sp, r7
9000c6ce:	bd80      	pop	{r7, pc}

9000c6d0 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000c6d0:	b580      	push	{r7, lr}
9000c6d2:	b084      	sub	sp, #16
9000c6d4:	af00      	add	r7, sp, #0
9000c6d6:	60f8      	str	r0, [r7, #12]
9000c6d8:	60b9      	str	r1, [r7, #8]
9000c6da:	607a      	str	r2, [r7, #4]
9000c6dc:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
9000c6de:	69bb      	ldr	r3, [r7, #24]
9000c6e0:	687a      	ldr	r2, [r7, #4]
9000c6e2:	68b9      	ldr	r1, [r7, #8]
9000c6e4:	68f8      	ldr	r0, [r7, #12]
9000c6e6:	f7ff fe43 	bl	9000c370 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
9000c6ea:	68ba      	ldr	r2, [r7, #8]
9000c6ec:	683b      	ldr	r3, [r7, #0]
9000c6ee:	4413      	add	r3, r2
9000c6f0:	1e59      	subs	r1, r3, #1
9000c6f2:	69bb      	ldr	r3, [r7, #24]
9000c6f4:	687a      	ldr	r2, [r7, #4]
9000c6f6:	68f8      	ldr	r0, [r7, #12]
9000c6f8:	f7ff fe3a 	bl	9000c370 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
9000c6fc:	69bb      	ldr	r3, [r7, #24]
9000c6fe:	683a      	ldr	r2, [r7, #0]
9000c700:	68b9      	ldr	r1, [r7, #8]
9000c702:	68f8      	ldr	r0, [r7, #12]
9000c704:	f7ff fe6a 	bl	9000c3dc <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
9000c708:	68fa      	ldr	r2, [r7, #12]
9000c70a:	687b      	ldr	r3, [r7, #4]
9000c70c:	4413      	add	r3, r2
9000c70e:	1e58      	subs	r0, r3, #1
9000c710:	69bb      	ldr	r3, [r7, #24]
9000c712:	683a      	ldr	r2, [r7, #0]
9000c714:	68b9      	ldr	r1, [r7, #8]
9000c716:	f7ff fe61 	bl	9000c3dc <UTIL_LCD_DrawVLine>
}
9000c71a:	bf00      	nop
9000c71c:	3710      	adds	r7, #16
9000c71e:	46bd      	mov	sp, r7
9000c720:	bd80      	pop	{r7, pc}
	...

9000c724 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
9000c724:	b580      	push	{r7, lr}
9000c726:	b088      	sub	sp, #32
9000c728:	af00      	add	r7, sp, #0
9000c72a:	60f8      	str	r0, [r7, #12]
9000c72c:	60b9      	str	r1, [r7, #8]
9000c72e:	607a      	str	r2, [r7, #4]
9000c730:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
9000c732:	687b      	ldr	r3, [r7, #4]
9000c734:	005b      	lsls	r3, r3, #1
9000c736:	f1c3 0303 	rsb	r3, r3, #3
9000c73a:	61fb      	str	r3, [r7, #28]
  current_x = 0;
9000c73c:	2300      	movs	r3, #0
9000c73e:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
9000c740:	687b      	ldr	r3, [r7, #4]
9000c742:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
9000c744:	e0eb      	b.n	9000c91e <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
9000c746:	68ba      	ldr	r2, [r7, #8]
9000c748:	697b      	ldr	r3, [r7, #20]
9000c74a:	1ad2      	subs	r2, r2, r3
9000c74c:	4b79      	ldr	r3, [pc, #484]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c74e:	699b      	ldr	r3, [r3, #24]
9000c750:	429a      	cmp	r2, r3
9000c752:	d22d      	bcs.n	9000c7b0 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
9000c754:	68fa      	ldr	r2, [r7, #12]
9000c756:	69bb      	ldr	r3, [r7, #24]
9000c758:	441a      	add	r2, r3
9000c75a:	4b76      	ldr	r3, [pc, #472]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c75c:	695b      	ldr	r3, [r3, #20]
9000c75e:	429a      	cmp	r2, r3
9000c760:	d20f      	bcs.n	9000c782 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
9000c762:	68fb      	ldr	r3, [r7, #12]
9000c764:	b29a      	uxth	r2, r3
9000c766:	69bb      	ldr	r3, [r7, #24]
9000c768:	b29b      	uxth	r3, r3
9000c76a:	4413      	add	r3, r2
9000c76c:	b298      	uxth	r0, r3
9000c76e:	68bb      	ldr	r3, [r7, #8]
9000c770:	b29a      	uxth	r2, r3
9000c772:	697b      	ldr	r3, [r7, #20]
9000c774:	b29b      	uxth	r3, r3
9000c776:	1ad3      	subs	r3, r2, r3
9000c778:	b29b      	uxth	r3, r3
9000c77a:	683a      	ldr	r2, [r7, #0]
9000c77c:	4619      	mov	r1, r3
9000c77e:	f7ff fe63 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
9000c782:	68fa      	ldr	r2, [r7, #12]
9000c784:	69bb      	ldr	r3, [r7, #24]
9000c786:	1ad2      	subs	r2, r2, r3
9000c788:	4b6a      	ldr	r3, [pc, #424]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c78a:	695b      	ldr	r3, [r3, #20]
9000c78c:	429a      	cmp	r2, r3
9000c78e:	d20f      	bcs.n	9000c7b0 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
9000c790:	68fb      	ldr	r3, [r7, #12]
9000c792:	b29a      	uxth	r2, r3
9000c794:	69bb      	ldr	r3, [r7, #24]
9000c796:	b29b      	uxth	r3, r3
9000c798:	1ad3      	subs	r3, r2, r3
9000c79a:	b298      	uxth	r0, r3
9000c79c:	68bb      	ldr	r3, [r7, #8]
9000c79e:	b29a      	uxth	r2, r3
9000c7a0:	697b      	ldr	r3, [r7, #20]
9000c7a2:	b29b      	uxth	r3, r3
9000c7a4:	1ad3      	subs	r3, r2, r3
9000c7a6:	b29b      	uxth	r3, r3
9000c7a8:	683a      	ldr	r2, [r7, #0]
9000c7aa:	4619      	mov	r1, r3
9000c7ac:	f7ff fe4c 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
9000c7b0:	68ba      	ldr	r2, [r7, #8]
9000c7b2:	69bb      	ldr	r3, [r7, #24]
9000c7b4:	1ad2      	subs	r2, r2, r3
9000c7b6:	4b5f      	ldr	r3, [pc, #380]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c7b8:	699b      	ldr	r3, [r3, #24]
9000c7ba:	429a      	cmp	r2, r3
9000c7bc:	d22d      	bcs.n	9000c81a <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
9000c7be:	68fa      	ldr	r2, [r7, #12]
9000c7c0:	697b      	ldr	r3, [r7, #20]
9000c7c2:	441a      	add	r2, r3
9000c7c4:	4b5b      	ldr	r3, [pc, #364]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c7c6:	695b      	ldr	r3, [r3, #20]
9000c7c8:	429a      	cmp	r2, r3
9000c7ca:	d20f      	bcs.n	9000c7ec <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
9000c7cc:	68fb      	ldr	r3, [r7, #12]
9000c7ce:	b29a      	uxth	r2, r3
9000c7d0:	697b      	ldr	r3, [r7, #20]
9000c7d2:	b29b      	uxth	r3, r3
9000c7d4:	4413      	add	r3, r2
9000c7d6:	b298      	uxth	r0, r3
9000c7d8:	68bb      	ldr	r3, [r7, #8]
9000c7da:	b29a      	uxth	r2, r3
9000c7dc:	69bb      	ldr	r3, [r7, #24]
9000c7de:	b29b      	uxth	r3, r3
9000c7e0:	1ad3      	subs	r3, r2, r3
9000c7e2:	b29b      	uxth	r3, r3
9000c7e4:	683a      	ldr	r2, [r7, #0]
9000c7e6:	4619      	mov	r1, r3
9000c7e8:	f7ff fe2e 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
9000c7ec:	68fa      	ldr	r2, [r7, #12]
9000c7ee:	697b      	ldr	r3, [r7, #20]
9000c7f0:	1ad2      	subs	r2, r2, r3
9000c7f2:	4b50      	ldr	r3, [pc, #320]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c7f4:	695b      	ldr	r3, [r3, #20]
9000c7f6:	429a      	cmp	r2, r3
9000c7f8:	d20f      	bcs.n	9000c81a <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
9000c7fa:	68fb      	ldr	r3, [r7, #12]
9000c7fc:	b29a      	uxth	r2, r3
9000c7fe:	697b      	ldr	r3, [r7, #20]
9000c800:	b29b      	uxth	r3, r3
9000c802:	1ad3      	subs	r3, r2, r3
9000c804:	b298      	uxth	r0, r3
9000c806:	68bb      	ldr	r3, [r7, #8]
9000c808:	b29a      	uxth	r2, r3
9000c80a:	69bb      	ldr	r3, [r7, #24]
9000c80c:	b29b      	uxth	r3, r3
9000c80e:	1ad3      	subs	r3, r2, r3
9000c810:	b29b      	uxth	r3, r3
9000c812:	683a      	ldr	r2, [r7, #0]
9000c814:	4619      	mov	r1, r3
9000c816:	f7ff fe17 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
9000c81a:	68ba      	ldr	r2, [r7, #8]
9000c81c:	697b      	ldr	r3, [r7, #20]
9000c81e:	441a      	add	r2, r3
9000c820:	4b44      	ldr	r3, [pc, #272]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c822:	699b      	ldr	r3, [r3, #24]
9000c824:	429a      	cmp	r2, r3
9000c826:	d22d      	bcs.n	9000c884 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
9000c828:	68fa      	ldr	r2, [r7, #12]
9000c82a:	69bb      	ldr	r3, [r7, #24]
9000c82c:	441a      	add	r2, r3
9000c82e:	4b41      	ldr	r3, [pc, #260]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c830:	695b      	ldr	r3, [r3, #20]
9000c832:	429a      	cmp	r2, r3
9000c834:	d20f      	bcs.n	9000c856 <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
9000c836:	68fb      	ldr	r3, [r7, #12]
9000c838:	b29a      	uxth	r2, r3
9000c83a:	69bb      	ldr	r3, [r7, #24]
9000c83c:	b29b      	uxth	r3, r3
9000c83e:	4413      	add	r3, r2
9000c840:	b298      	uxth	r0, r3
9000c842:	68bb      	ldr	r3, [r7, #8]
9000c844:	b29a      	uxth	r2, r3
9000c846:	697b      	ldr	r3, [r7, #20]
9000c848:	b29b      	uxth	r3, r3
9000c84a:	4413      	add	r3, r2
9000c84c:	b29b      	uxth	r3, r3
9000c84e:	683a      	ldr	r2, [r7, #0]
9000c850:	4619      	mov	r1, r3
9000c852:	f7ff fdf9 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
9000c856:	68fa      	ldr	r2, [r7, #12]
9000c858:	69bb      	ldr	r3, [r7, #24]
9000c85a:	1ad2      	subs	r2, r2, r3
9000c85c:	4b35      	ldr	r3, [pc, #212]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c85e:	695b      	ldr	r3, [r3, #20]
9000c860:	429a      	cmp	r2, r3
9000c862:	d20f      	bcs.n	9000c884 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
9000c864:	68fb      	ldr	r3, [r7, #12]
9000c866:	b29a      	uxth	r2, r3
9000c868:	69bb      	ldr	r3, [r7, #24]
9000c86a:	b29b      	uxth	r3, r3
9000c86c:	1ad3      	subs	r3, r2, r3
9000c86e:	b298      	uxth	r0, r3
9000c870:	68bb      	ldr	r3, [r7, #8]
9000c872:	b29a      	uxth	r2, r3
9000c874:	697b      	ldr	r3, [r7, #20]
9000c876:	b29b      	uxth	r3, r3
9000c878:	4413      	add	r3, r2
9000c87a:	b29b      	uxth	r3, r3
9000c87c:	683a      	ldr	r2, [r7, #0]
9000c87e:	4619      	mov	r1, r3
9000c880:	f7ff fde2 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
9000c884:	68ba      	ldr	r2, [r7, #8]
9000c886:	69bb      	ldr	r3, [r7, #24]
9000c888:	441a      	add	r2, r3
9000c88a:	4b2a      	ldr	r3, [pc, #168]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c88c:	699b      	ldr	r3, [r3, #24]
9000c88e:	429a      	cmp	r2, r3
9000c890:	d22d      	bcs.n	9000c8ee <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
9000c892:	68fa      	ldr	r2, [r7, #12]
9000c894:	697b      	ldr	r3, [r7, #20]
9000c896:	441a      	add	r2, r3
9000c898:	4b26      	ldr	r3, [pc, #152]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c89a:	695b      	ldr	r3, [r3, #20]
9000c89c:	429a      	cmp	r2, r3
9000c89e:	d20f      	bcs.n	9000c8c0 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
9000c8a0:	68fb      	ldr	r3, [r7, #12]
9000c8a2:	b29a      	uxth	r2, r3
9000c8a4:	697b      	ldr	r3, [r7, #20]
9000c8a6:	b29b      	uxth	r3, r3
9000c8a8:	4413      	add	r3, r2
9000c8aa:	b298      	uxth	r0, r3
9000c8ac:	68bb      	ldr	r3, [r7, #8]
9000c8ae:	b29a      	uxth	r2, r3
9000c8b0:	69bb      	ldr	r3, [r7, #24]
9000c8b2:	b29b      	uxth	r3, r3
9000c8b4:	4413      	add	r3, r2
9000c8b6:	b29b      	uxth	r3, r3
9000c8b8:	683a      	ldr	r2, [r7, #0]
9000c8ba:	4619      	mov	r1, r3
9000c8bc:	f7ff fdc4 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
9000c8c0:	68fa      	ldr	r2, [r7, #12]
9000c8c2:	697b      	ldr	r3, [r7, #20]
9000c8c4:	1ad2      	subs	r2, r2, r3
9000c8c6:	4b1b      	ldr	r3, [pc, #108]	; (9000c934 <UTIL_LCD_DrawCircle+0x210>)
9000c8c8:	695b      	ldr	r3, [r3, #20]
9000c8ca:	429a      	cmp	r2, r3
9000c8cc:	d20f      	bcs.n	9000c8ee <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
9000c8ce:	68fb      	ldr	r3, [r7, #12]
9000c8d0:	b29a      	uxth	r2, r3
9000c8d2:	697b      	ldr	r3, [r7, #20]
9000c8d4:	b29b      	uxth	r3, r3
9000c8d6:	1ad3      	subs	r3, r2, r3
9000c8d8:	b298      	uxth	r0, r3
9000c8da:	68bb      	ldr	r3, [r7, #8]
9000c8dc:	b29a      	uxth	r2, r3
9000c8de:	69bb      	ldr	r3, [r7, #24]
9000c8e0:	b29b      	uxth	r3, r3
9000c8e2:	4413      	add	r3, r2
9000c8e4:	b29b      	uxth	r3, r3
9000c8e6:	683a      	ldr	r2, [r7, #0]
9000c8e8:	4619      	mov	r1, r3
9000c8ea:	f7ff fdad 	bl	9000c448 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
9000c8ee:	69fb      	ldr	r3, [r7, #28]
9000c8f0:	2b00      	cmp	r3, #0
9000c8f2:	da06      	bge.n	9000c902 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
9000c8f4:	69bb      	ldr	r3, [r7, #24]
9000c8f6:	009a      	lsls	r2, r3, #2
9000c8f8:	69fb      	ldr	r3, [r7, #28]
9000c8fa:	4413      	add	r3, r2
9000c8fc:	3306      	adds	r3, #6
9000c8fe:	61fb      	str	r3, [r7, #28]
9000c900:	e00a      	b.n	9000c918 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
9000c902:	69ba      	ldr	r2, [r7, #24]
9000c904:	697b      	ldr	r3, [r7, #20]
9000c906:	1ad3      	subs	r3, r2, r3
9000c908:	009a      	lsls	r2, r3, #2
9000c90a:	69fb      	ldr	r3, [r7, #28]
9000c90c:	4413      	add	r3, r2
9000c90e:	330a      	adds	r3, #10
9000c910:	61fb      	str	r3, [r7, #28]
      current_y--;
9000c912:	697b      	ldr	r3, [r7, #20]
9000c914:	3b01      	subs	r3, #1
9000c916:	617b      	str	r3, [r7, #20]
    }
    current_x++;
9000c918:	69bb      	ldr	r3, [r7, #24]
9000c91a:	3301      	adds	r3, #1
9000c91c:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
9000c91e:	69ba      	ldr	r2, [r7, #24]
9000c920:	697b      	ldr	r3, [r7, #20]
9000c922:	429a      	cmp	r2, r3
9000c924:	f67f af0f 	bls.w	9000c746 <UTIL_LCD_DrawCircle+0x22>
  }
}
9000c928:	bf00      	nop
9000c92a:	bf00      	nop
9000c92c:	3720      	adds	r7, #32
9000c92e:	46bd      	mov	sp, r7
9000c930:	bd80      	pop	{r7, pc}
9000c932:	bf00      	nop
9000c934:	20005064 	.word	0x20005064

9000c938 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000c938:	b590      	push	{r4, r7, lr}
9000c93a:	b087      	sub	sp, #28
9000c93c:	af02      	add	r7, sp, #8
9000c93e:	60f8      	str	r0, [r7, #12]
9000c940:	60b9      	str	r1, [r7, #8]
9000c942:	607a      	str	r2, [r7, #4]
9000c944:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000c946:	4b17      	ldr	r3, [pc, #92]	; (9000c9a4 <UTIL_LCD_FillRect+0x6c>)
9000c948:	69db      	ldr	r3, [r3, #28]
9000c94a:	2b02      	cmp	r3, #2
9000c94c:	d11a      	bne.n	9000c984 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000c94e:	4b16      	ldr	r3, [pc, #88]	; (9000c9a8 <UTIL_LCD_FillRect+0x70>)
9000c950:	691c      	ldr	r4, [r3, #16]
9000c952:	4b14      	ldr	r3, [pc, #80]	; (9000c9a4 <UTIL_LCD_FillRect+0x6c>)
9000c954:	6918      	ldr	r0, [r3, #16]
9000c956:	6a3b      	ldr	r3, [r7, #32]
9000c958:	08db      	lsrs	r3, r3, #3
9000c95a:	f003 021f 	and.w	r2, r3, #31
9000c95e:	6a3b      	ldr	r3, [r7, #32]
9000c960:	0a9b      	lsrs	r3, r3, #10
9000c962:	015b      	lsls	r3, r3, #5
9000c964:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000c968:	431a      	orrs	r2, r3
9000c96a:	6a3b      	ldr	r3, [r7, #32]
9000c96c:	0cdb      	lsrs	r3, r3, #19
9000c96e:	02db      	lsls	r3, r3, #11
9000c970:	b29b      	uxth	r3, r3
9000c972:	4313      	orrs	r3, r2
9000c974:	9301      	str	r3, [sp, #4]
9000c976:	683b      	ldr	r3, [r7, #0]
9000c978:	9300      	str	r3, [sp, #0]
9000c97a:	687b      	ldr	r3, [r7, #4]
9000c97c:	68ba      	ldr	r2, [r7, #8]
9000c97e:	68f9      	ldr	r1, [r7, #12]
9000c980:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000c982:	e00b      	b.n	9000c99c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000c984:	4b08      	ldr	r3, [pc, #32]	; (9000c9a8 <UTIL_LCD_FillRect+0x70>)
9000c986:	691c      	ldr	r4, [r3, #16]
9000c988:	4b06      	ldr	r3, [pc, #24]	; (9000c9a4 <UTIL_LCD_FillRect+0x6c>)
9000c98a:	6918      	ldr	r0, [r3, #16]
9000c98c:	6a3b      	ldr	r3, [r7, #32]
9000c98e:	9301      	str	r3, [sp, #4]
9000c990:	683b      	ldr	r3, [r7, #0]
9000c992:	9300      	str	r3, [sp, #0]
9000c994:	687b      	ldr	r3, [r7, #4]
9000c996:	68ba      	ldr	r2, [r7, #8]
9000c998:	68f9      	ldr	r1, [r7, #12]
9000c99a:	47a0      	blx	r4
}
9000c99c:	bf00      	nop
9000c99e:	3714      	adds	r7, #20
9000c9a0:	46bd      	mov	sp, r7
9000c9a2:	bd90      	pop	{r4, r7, pc}
9000c9a4:	20005064 	.word	0x20005064
9000c9a8:	200050a4 	.word	0x200050a4

9000c9ac <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
9000c9ac:	b580      	push	{r7, lr}
9000c9ae:	b088      	sub	sp, #32
9000c9b0:	af00      	add	r7, sp, #0
9000c9b2:	60f8      	str	r0, [r7, #12]
9000c9b4:	60b9      	str	r1, [r7, #8]
9000c9b6:	607a      	str	r2, [r7, #4]
9000c9b8:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
9000c9ba:	687b      	ldr	r3, [r7, #4]
9000c9bc:	005b      	lsls	r3, r3, #1
9000c9be:	f1c3 0303 	rsb	r3, r3, #3
9000c9c2:	61fb      	str	r3, [r7, #28]

  current_x = 0;
9000c9c4:	2300      	movs	r3, #0
9000c9c6:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
9000c9c8:	687b      	ldr	r3, [r7, #4]
9000c9ca:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
9000c9cc:	e08b      	b.n	9000cae6 <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
9000c9ce:	697b      	ldr	r3, [r7, #20]
9000c9d0:	2b00      	cmp	r3, #0
9000c9d2:	d036      	beq.n	9000ca42 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
9000c9d4:	697a      	ldr	r2, [r7, #20]
9000c9d6:	68fb      	ldr	r3, [r7, #12]
9000c9d8:	429a      	cmp	r2, r3
9000c9da:	d31c      	bcc.n	9000ca16 <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
9000c9dc:	68ba      	ldr	r2, [r7, #8]
9000c9de:	69bb      	ldr	r3, [r7, #24]
9000c9e0:	18d0      	adds	r0, r2, r3
9000c9e2:	697b      	ldr	r3, [r7, #20]
9000c9e4:	005a      	lsls	r2, r3, #1
9000c9e6:	68f9      	ldr	r1, [r7, #12]
9000c9e8:	697b      	ldr	r3, [r7, #20]
9000c9ea:	1acb      	subs	r3, r1, r3
9000c9ec:	441a      	add	r2, r3
9000c9ee:	683b      	ldr	r3, [r7, #0]
9000c9f0:	4601      	mov	r1, r0
9000c9f2:	2000      	movs	r0, #0
9000c9f4:	f7ff fcbc 	bl	9000c370 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
9000c9f8:	68ba      	ldr	r2, [r7, #8]
9000c9fa:	69bb      	ldr	r3, [r7, #24]
9000c9fc:	1ad0      	subs	r0, r2, r3
9000c9fe:	697b      	ldr	r3, [r7, #20]
9000ca00:	005a      	lsls	r2, r3, #1
9000ca02:	68f9      	ldr	r1, [r7, #12]
9000ca04:	697b      	ldr	r3, [r7, #20]
9000ca06:	1acb      	subs	r3, r1, r3
9000ca08:	441a      	add	r2, r3
9000ca0a:	683b      	ldr	r3, [r7, #0]
9000ca0c:	4601      	mov	r1, r0
9000ca0e:	2000      	movs	r0, #0
9000ca10:	f7ff fcae 	bl	9000c370 <UTIL_LCD_DrawHLine>
9000ca14:	e015      	b.n	9000ca42 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
9000ca16:	68fa      	ldr	r2, [r7, #12]
9000ca18:	697b      	ldr	r3, [r7, #20]
9000ca1a:	1ad0      	subs	r0, r2, r3
9000ca1c:	68ba      	ldr	r2, [r7, #8]
9000ca1e:	69bb      	ldr	r3, [r7, #24]
9000ca20:	18d1      	adds	r1, r2, r3
9000ca22:	697b      	ldr	r3, [r7, #20]
9000ca24:	005a      	lsls	r2, r3, #1
9000ca26:	683b      	ldr	r3, [r7, #0]
9000ca28:	f7ff fca2 	bl	9000c370 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
9000ca2c:	68fa      	ldr	r2, [r7, #12]
9000ca2e:	697b      	ldr	r3, [r7, #20]
9000ca30:	1ad0      	subs	r0, r2, r3
9000ca32:	68ba      	ldr	r2, [r7, #8]
9000ca34:	69bb      	ldr	r3, [r7, #24]
9000ca36:	1ad1      	subs	r1, r2, r3
9000ca38:	697b      	ldr	r3, [r7, #20]
9000ca3a:	005a      	lsls	r2, r3, #1
9000ca3c:	683b      	ldr	r3, [r7, #0]
9000ca3e:	f7ff fc97 	bl	9000c370 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
9000ca42:	69bb      	ldr	r3, [r7, #24]
9000ca44:	2b00      	cmp	r3, #0
9000ca46:	d036      	beq.n	9000cab6 <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
9000ca48:	69ba      	ldr	r2, [r7, #24]
9000ca4a:	68fb      	ldr	r3, [r7, #12]
9000ca4c:	429a      	cmp	r2, r3
9000ca4e:	d31c      	bcc.n	9000ca8a <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
9000ca50:	68ba      	ldr	r2, [r7, #8]
9000ca52:	697b      	ldr	r3, [r7, #20]
9000ca54:	1ad0      	subs	r0, r2, r3
9000ca56:	69bb      	ldr	r3, [r7, #24]
9000ca58:	005a      	lsls	r2, r3, #1
9000ca5a:	68f9      	ldr	r1, [r7, #12]
9000ca5c:	69bb      	ldr	r3, [r7, #24]
9000ca5e:	1acb      	subs	r3, r1, r3
9000ca60:	441a      	add	r2, r3
9000ca62:	683b      	ldr	r3, [r7, #0]
9000ca64:	4601      	mov	r1, r0
9000ca66:	2000      	movs	r0, #0
9000ca68:	f7ff fc82 	bl	9000c370 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
9000ca6c:	68ba      	ldr	r2, [r7, #8]
9000ca6e:	697b      	ldr	r3, [r7, #20]
9000ca70:	18d0      	adds	r0, r2, r3
9000ca72:	69bb      	ldr	r3, [r7, #24]
9000ca74:	005a      	lsls	r2, r3, #1
9000ca76:	68f9      	ldr	r1, [r7, #12]
9000ca78:	69bb      	ldr	r3, [r7, #24]
9000ca7a:	1acb      	subs	r3, r1, r3
9000ca7c:	441a      	add	r2, r3
9000ca7e:	683b      	ldr	r3, [r7, #0]
9000ca80:	4601      	mov	r1, r0
9000ca82:	2000      	movs	r0, #0
9000ca84:	f7ff fc74 	bl	9000c370 <UTIL_LCD_DrawHLine>
9000ca88:	e015      	b.n	9000cab6 <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
9000ca8a:	68fa      	ldr	r2, [r7, #12]
9000ca8c:	69bb      	ldr	r3, [r7, #24]
9000ca8e:	1ad0      	subs	r0, r2, r3
9000ca90:	68ba      	ldr	r2, [r7, #8]
9000ca92:	697b      	ldr	r3, [r7, #20]
9000ca94:	1ad1      	subs	r1, r2, r3
9000ca96:	69bb      	ldr	r3, [r7, #24]
9000ca98:	005a      	lsls	r2, r3, #1
9000ca9a:	683b      	ldr	r3, [r7, #0]
9000ca9c:	f7ff fc68 	bl	9000c370 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
9000caa0:	68fa      	ldr	r2, [r7, #12]
9000caa2:	69bb      	ldr	r3, [r7, #24]
9000caa4:	1ad0      	subs	r0, r2, r3
9000caa6:	68ba      	ldr	r2, [r7, #8]
9000caa8:	697b      	ldr	r3, [r7, #20]
9000caaa:	18d1      	adds	r1, r2, r3
9000caac:	69bb      	ldr	r3, [r7, #24]
9000caae:	005a      	lsls	r2, r3, #1
9000cab0:	683b      	ldr	r3, [r7, #0]
9000cab2:	f7ff fc5d 	bl	9000c370 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
9000cab6:	69fb      	ldr	r3, [r7, #28]
9000cab8:	2b00      	cmp	r3, #0
9000caba:	da06      	bge.n	9000caca <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
9000cabc:	69bb      	ldr	r3, [r7, #24]
9000cabe:	009a      	lsls	r2, r3, #2
9000cac0:	69fb      	ldr	r3, [r7, #28]
9000cac2:	4413      	add	r3, r2
9000cac4:	3306      	adds	r3, #6
9000cac6:	61fb      	str	r3, [r7, #28]
9000cac8:	e00a      	b.n	9000cae0 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
9000caca:	69ba      	ldr	r2, [r7, #24]
9000cacc:	697b      	ldr	r3, [r7, #20]
9000cace:	1ad3      	subs	r3, r2, r3
9000cad0:	009a      	lsls	r2, r3, #2
9000cad2:	69fb      	ldr	r3, [r7, #28]
9000cad4:	4413      	add	r3, r2
9000cad6:	330a      	adds	r3, #10
9000cad8:	61fb      	str	r3, [r7, #28]
      current_y--;
9000cada:	697b      	ldr	r3, [r7, #20]
9000cadc:	3b01      	subs	r3, #1
9000cade:	617b      	str	r3, [r7, #20]
    }
    current_x++;
9000cae0:	69bb      	ldr	r3, [r7, #24]
9000cae2:	3301      	adds	r3, #1
9000cae4:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
9000cae6:	69ba      	ldr	r2, [r7, #24]
9000cae8:	697b      	ldr	r3, [r7, #20]
9000caea:	429a      	cmp	r2, r3
9000caec:	f67f af6f 	bls.w	9000c9ce <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
9000caf0:	683b      	ldr	r3, [r7, #0]
9000caf2:	687a      	ldr	r2, [r7, #4]
9000caf4:	68b9      	ldr	r1, [r7, #8]
9000caf6:	68f8      	ldr	r0, [r7, #12]
9000caf8:	f7ff fe14 	bl	9000c724 <UTIL_LCD_DrawCircle>
}
9000cafc:	bf00      	nop
9000cafe:	3720      	adds	r7, #32
9000cb00:	46bd      	mov	sp, r7
9000cb02:	bd80      	pop	{r7, pc}

9000cb04 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000cb04:	b580      	push	{r7, lr}
9000cb06:	b0b2      	sub	sp, #200	; 0xc8
9000cb08:	af02      	add	r7, sp, #8
9000cb0a:	60f8      	str	r0, [r7, #12]
9000cb0c:	60b9      	str	r1, [r7, #8]
9000cb0e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000cb10:	2300      	movs	r3, #0
9000cb12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000cb16:	2300      	movs	r3, #0
9000cb18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000cb1c:	4ba5      	ldr	r3, [pc, #660]	; (9000cdb4 <DrawChar+0x2b0>)
9000cb1e:	68db      	ldr	r3, [r3, #12]
9000cb20:	4aa4      	ldr	r2, [pc, #656]	; (9000cdb4 <DrawChar+0x2b0>)
9000cb22:	015b      	lsls	r3, r3, #5
9000cb24:	4413      	add	r3, r2
9000cb26:	3308      	adds	r3, #8
9000cb28:	681b      	ldr	r3, [r3, #0]
9000cb2a:	88db      	ldrh	r3, [r3, #6]
9000cb2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000cb30:	4ba0      	ldr	r3, [pc, #640]	; (9000cdb4 <DrawChar+0x2b0>)
9000cb32:	68db      	ldr	r3, [r3, #12]
9000cb34:	4a9f      	ldr	r2, [pc, #636]	; (9000cdb4 <DrawChar+0x2b0>)
9000cb36:	015b      	lsls	r3, r3, #5
9000cb38:	4413      	add	r3, r2
9000cb3a:	3308      	adds	r3, #8
9000cb3c:	681b      	ldr	r3, [r3, #0]
9000cb3e:	889b      	ldrh	r3, [r3, #4]
9000cb40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000cb44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cb48:	3307      	adds	r3, #7
9000cb4a:	f023 0207 	bic.w	r2, r3, #7
9000cb4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cb52:	1ad3      	subs	r3, r2, r3
9000cb54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
9000cb58:	2300      	movs	r3, #0
9000cb5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000cb5e:	e11c      	b.n	9000cd9a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000cb60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cb64:	3307      	adds	r3, #7
9000cb66:	08db      	lsrs	r3, r3, #3
9000cb68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000cb6c:	fb02 f303 	mul.w	r3, r2, r3
9000cb70:	687a      	ldr	r2, [r7, #4]
9000cb72:	4413      	add	r3, r2
9000cb74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
9000cb78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cb7c:	3307      	adds	r3, #7
9000cb7e:	08db      	lsrs	r3, r3, #3
9000cb80:	2b01      	cmp	r3, #1
9000cb82:	d002      	beq.n	9000cb8a <DrawChar+0x86>
9000cb84:	2b02      	cmp	r3, #2
9000cb86:	d006      	beq.n	9000cb96 <DrawChar+0x92>
9000cb88:	e011      	b.n	9000cbae <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000cb8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000cb8e:	781b      	ldrb	r3, [r3, #0]
9000cb90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000cb94:	e01d      	b.n	9000cbd2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000cb96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000cb9a:	781b      	ldrb	r3, [r3, #0]
9000cb9c:	021b      	lsls	r3, r3, #8
9000cb9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
9000cba2:	3201      	adds	r2, #1
9000cba4:	7812      	ldrb	r2, [r2, #0]
9000cba6:	4313      	orrs	r3, r2
9000cba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000cbac:	e011      	b.n	9000cbd2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000cbae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000cbb2:	781b      	ldrb	r3, [r3, #0]
9000cbb4:	041a      	lsls	r2, r3, #16
9000cbb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000cbba:	3301      	adds	r3, #1
9000cbbc:	781b      	ldrb	r3, [r3, #0]
9000cbbe:	021b      	lsls	r3, r3, #8
9000cbc0:	4313      	orrs	r3, r2
9000cbc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
9000cbc6:	3202      	adds	r2, #2
9000cbc8:	7812      	ldrb	r2, [r2, #0]
9000cbca:	4313      	orrs	r3, r2
9000cbcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000cbd0:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000cbd2:	4b78      	ldr	r3, [pc, #480]	; (9000cdb4 <DrawChar+0x2b0>)
9000cbd4:	68db      	ldr	r3, [r3, #12]
9000cbd6:	4a77      	ldr	r2, [pc, #476]	; (9000cdb4 <DrawChar+0x2b0>)
9000cbd8:	015b      	lsls	r3, r3, #5
9000cbda:	4413      	add	r3, r2
9000cbdc:	331c      	adds	r3, #28
9000cbde:	681b      	ldr	r3, [r3, #0]
9000cbe0:	2b02      	cmp	r3, #2
9000cbe2:	f040 808c 	bne.w	9000ccfe <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000cbe6:	2300      	movs	r3, #0
9000cbe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000cbec:	e074      	b.n	9000ccd8 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000cbee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
9000cbf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cbf6:	1ad2      	subs	r2, r2, r3
9000cbf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
9000cbfc:	4413      	add	r3, r2
9000cbfe:	3b01      	subs	r3, #1
9000cc00:	2201      	movs	r2, #1
9000cc02:	fa02 f303 	lsl.w	r3, r2, r3
9000cc06:	461a      	mov	r2, r3
9000cc08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
9000cc0c:	4013      	ands	r3, r2
9000cc0e:	2b00      	cmp	r3, #0
9000cc10:	d02d      	beq.n	9000cc6e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000cc12:	4b68      	ldr	r3, [pc, #416]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc14:	68db      	ldr	r3, [r3, #12]
9000cc16:	4a67      	ldr	r2, [pc, #412]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc18:	015b      	lsls	r3, r3, #5
9000cc1a:	4413      	add	r3, r2
9000cc1c:	681b      	ldr	r3, [r3, #0]
9000cc1e:	08db      	lsrs	r3, r3, #3
9000cc20:	b29b      	uxth	r3, r3
9000cc22:	f003 031f 	and.w	r3, r3, #31
9000cc26:	b29a      	uxth	r2, r3
9000cc28:	4b62      	ldr	r3, [pc, #392]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc2a:	68db      	ldr	r3, [r3, #12]
9000cc2c:	4961      	ldr	r1, [pc, #388]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc2e:	015b      	lsls	r3, r3, #5
9000cc30:	440b      	add	r3, r1
9000cc32:	681b      	ldr	r3, [r3, #0]
9000cc34:	0a9b      	lsrs	r3, r3, #10
9000cc36:	b29b      	uxth	r3, r3
9000cc38:	015b      	lsls	r3, r3, #5
9000cc3a:	b29b      	uxth	r3, r3
9000cc3c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000cc40:	b29b      	uxth	r3, r3
9000cc42:	4313      	orrs	r3, r2
9000cc44:	b29a      	uxth	r2, r3
9000cc46:	4b5b      	ldr	r3, [pc, #364]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc48:	68db      	ldr	r3, [r3, #12]
9000cc4a:	495a      	ldr	r1, [pc, #360]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc4c:	015b      	lsls	r3, r3, #5
9000cc4e:	440b      	add	r3, r1
9000cc50:	681b      	ldr	r3, [r3, #0]
9000cc52:	0cdb      	lsrs	r3, r3, #19
9000cc54:	b29b      	uxth	r3, r3
9000cc56:	02db      	lsls	r3, r3, #11
9000cc58:	b29b      	uxth	r3, r3
9000cc5a:	4313      	orrs	r3, r2
9000cc5c:	b29a      	uxth	r2, r3
9000cc5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cc62:	005b      	lsls	r3, r3, #1
9000cc64:	33c0      	adds	r3, #192	; 0xc0
9000cc66:	443b      	add	r3, r7
9000cc68:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000cc6c:	e02f      	b.n	9000ccce <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000cc6e:	4b51      	ldr	r3, [pc, #324]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc70:	68db      	ldr	r3, [r3, #12]
9000cc72:	4a50      	ldr	r2, [pc, #320]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc74:	015b      	lsls	r3, r3, #5
9000cc76:	4413      	add	r3, r2
9000cc78:	3304      	adds	r3, #4
9000cc7a:	681b      	ldr	r3, [r3, #0]
9000cc7c:	08db      	lsrs	r3, r3, #3
9000cc7e:	b29b      	uxth	r3, r3
9000cc80:	f003 031f 	and.w	r3, r3, #31
9000cc84:	b29a      	uxth	r2, r3
9000cc86:	4b4b      	ldr	r3, [pc, #300]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc88:	68db      	ldr	r3, [r3, #12]
9000cc8a:	494a      	ldr	r1, [pc, #296]	; (9000cdb4 <DrawChar+0x2b0>)
9000cc8c:	015b      	lsls	r3, r3, #5
9000cc8e:	440b      	add	r3, r1
9000cc90:	3304      	adds	r3, #4
9000cc92:	681b      	ldr	r3, [r3, #0]
9000cc94:	0a9b      	lsrs	r3, r3, #10
9000cc96:	b29b      	uxth	r3, r3
9000cc98:	015b      	lsls	r3, r3, #5
9000cc9a:	b29b      	uxth	r3, r3
9000cc9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000cca0:	b29b      	uxth	r3, r3
9000cca2:	4313      	orrs	r3, r2
9000cca4:	b29a      	uxth	r2, r3
9000cca6:	4b43      	ldr	r3, [pc, #268]	; (9000cdb4 <DrawChar+0x2b0>)
9000cca8:	68db      	ldr	r3, [r3, #12]
9000ccaa:	4942      	ldr	r1, [pc, #264]	; (9000cdb4 <DrawChar+0x2b0>)
9000ccac:	015b      	lsls	r3, r3, #5
9000ccae:	440b      	add	r3, r1
9000ccb0:	3304      	adds	r3, #4
9000ccb2:	681b      	ldr	r3, [r3, #0]
9000ccb4:	0cdb      	lsrs	r3, r3, #19
9000ccb6:	b29b      	uxth	r3, r3
9000ccb8:	02db      	lsls	r3, r3, #11
9000ccba:	b29b      	uxth	r3, r3
9000ccbc:	4313      	orrs	r3, r2
9000ccbe:	b29a      	uxth	r2, r3
9000ccc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000ccc4:	005b      	lsls	r3, r3, #1
9000ccc6:	33c0      	adds	r3, #192	; 0xc0
9000ccc8:	443b      	add	r3, r7
9000ccca:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000ccce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000ccd2:	3301      	adds	r3, #1
9000ccd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000ccd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
9000ccdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cce0:	429a      	cmp	r2, r3
9000cce2:	d384      	bcc.n	9000cbee <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000cce4:	68b9      	ldr	r1, [r7, #8]
9000cce6:	1c4b      	adds	r3, r1, #1
9000cce8:	60bb      	str	r3, [r7, #8]
9000ccea:	f107 0274 	add.w	r2, r7, #116	; 0x74
9000ccee:	2301      	movs	r3, #1
9000ccf0:	9300      	str	r3, [sp, #0]
9000ccf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000ccf6:	68f8      	ldr	r0, [r7, #12]
9000ccf8:	f7ff fb1e 	bl	9000c338 <UTIL_LCD_FillRGBRect>
9000ccfc:	e048      	b.n	9000cd90 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000ccfe:	2300      	movs	r3, #0
9000cd00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000cd04:	e032      	b.n	9000cd6c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000cd06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
9000cd0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cd0e:	1ad2      	subs	r2, r2, r3
9000cd10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
9000cd14:	4413      	add	r3, r2
9000cd16:	3b01      	subs	r3, #1
9000cd18:	2201      	movs	r2, #1
9000cd1a:	fa02 f303 	lsl.w	r3, r2, r3
9000cd1e:	461a      	mov	r2, r3
9000cd20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
9000cd24:	4013      	ands	r3, r2
9000cd26:	2b00      	cmp	r3, #0
9000cd28:	d00d      	beq.n	9000cd46 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000cd2a:	4b22      	ldr	r3, [pc, #136]	; (9000cdb4 <DrawChar+0x2b0>)
9000cd2c:	68db      	ldr	r3, [r3, #12]
9000cd2e:	4a21      	ldr	r2, [pc, #132]	; (9000cdb4 <DrawChar+0x2b0>)
9000cd30:	015b      	lsls	r3, r3, #5
9000cd32:	4413      	add	r3, r2
9000cd34:	681a      	ldr	r2, [r3, #0]
9000cd36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cd3a:	009b      	lsls	r3, r3, #2
9000cd3c:	33c0      	adds	r3, #192	; 0xc0
9000cd3e:	443b      	add	r3, r7
9000cd40:	f843 2cac 	str.w	r2, [r3, #-172]
9000cd44:	e00d      	b.n	9000cd62 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000cd46:	4b1b      	ldr	r3, [pc, #108]	; (9000cdb4 <DrawChar+0x2b0>)
9000cd48:	68db      	ldr	r3, [r3, #12]
9000cd4a:	4a1a      	ldr	r2, [pc, #104]	; (9000cdb4 <DrawChar+0x2b0>)
9000cd4c:	015b      	lsls	r3, r3, #5
9000cd4e:	4413      	add	r3, r2
9000cd50:	3304      	adds	r3, #4
9000cd52:	681a      	ldr	r2, [r3, #0]
9000cd54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cd58:	009b      	lsls	r3, r3, #2
9000cd5a:	33c0      	adds	r3, #192	; 0xc0
9000cd5c:	443b      	add	r3, r7
9000cd5e:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000cd62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000cd66:	3301      	adds	r3, #1
9000cd68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000cd6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
9000cd70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cd74:	429a      	cmp	r2, r3
9000cd76:	d3c6      	bcc.n	9000cd06 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000cd78:	68b9      	ldr	r1, [r7, #8]
9000cd7a:	1c4b      	adds	r3, r1, #1
9000cd7c:	60bb      	str	r3, [r7, #8]
9000cd7e:	f107 0214 	add.w	r2, r7, #20
9000cd82:	2301      	movs	r3, #1
9000cd84:	9300      	str	r3, [sp, #0]
9000cd86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000cd8a:	68f8      	ldr	r0, [r7, #12]
9000cd8c:	f7ff fad4 	bl	9000c338 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000cd90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
9000cd94:	3301      	adds	r3, #1
9000cd96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000cd9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000cd9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
9000cda2:	429a      	cmp	r2, r3
9000cda4:	f4ff aedc 	bcc.w	9000cb60 <DrawChar+0x5c>
    }
  }
}
9000cda8:	bf00      	nop
9000cdaa:	bf00      	nop
9000cdac:	37c0      	adds	r7, #192	; 0xc0
9000cdae:	46bd      	mov	sp, r7
9000cdb0:	bd80      	pop	{r7, pc}
9000cdb2:	bf00      	nop
9000cdb4:	20005064 	.word	0x20005064

9000cdb8 <__errno>:
9000cdb8:	4b01      	ldr	r3, [pc, #4]	; (9000cdc0 <__errno+0x8>)
9000cdba:	6818      	ldr	r0, [r3, #0]
9000cdbc:	4770      	bx	lr
9000cdbe:	bf00      	nop
9000cdc0:	20000060 	.word	0x20000060

9000cdc4 <__libc_init_array>:
9000cdc4:	b570      	push	{r4, r5, r6, lr}
9000cdc6:	4d0d      	ldr	r5, [pc, #52]	; (9000cdfc <__libc_init_array+0x38>)
9000cdc8:	4c0d      	ldr	r4, [pc, #52]	; (9000ce00 <__libc_init_array+0x3c>)
9000cdca:	1b64      	subs	r4, r4, r5
9000cdcc:	10a4      	asrs	r4, r4, #2
9000cdce:	2600      	movs	r6, #0
9000cdd0:	42a6      	cmp	r6, r4
9000cdd2:	d109      	bne.n	9000cde8 <__libc_init_array+0x24>
9000cdd4:	4d0b      	ldr	r5, [pc, #44]	; (9000ce04 <__libc_init_array+0x40>)
9000cdd6:	4c0c      	ldr	r4, [pc, #48]	; (9000ce08 <__libc_init_array+0x44>)
9000cdd8:	f001 fa96 	bl	9000e308 <_init>
9000cddc:	1b64      	subs	r4, r4, r5
9000cdde:	10a4      	asrs	r4, r4, #2
9000cde0:	2600      	movs	r6, #0
9000cde2:	42a6      	cmp	r6, r4
9000cde4:	d105      	bne.n	9000cdf2 <__libc_init_array+0x2e>
9000cde6:	bd70      	pop	{r4, r5, r6, pc}
9000cde8:	f855 3b04 	ldr.w	r3, [r5], #4
9000cdec:	4798      	blx	r3
9000cdee:	3601      	adds	r6, #1
9000cdf0:	e7ee      	b.n	9000cdd0 <__libc_init_array+0xc>
9000cdf2:	f855 3b04 	ldr.w	r3, [r5], #4
9000cdf6:	4798      	blx	r3
9000cdf8:	3601      	adds	r6, #1
9000cdfa:	e7f2      	b.n	9000cde2 <__libc_init_array+0x1e>
9000cdfc:	90010be0 	.word	0x90010be0
9000ce00:	90010be0 	.word	0x90010be0
9000ce04:	90010be0 	.word	0x90010be0
9000ce08:	90010be4 	.word	0x90010be4

9000ce0c <malloc>:
9000ce0c:	4b02      	ldr	r3, [pc, #8]	; (9000ce18 <malloc+0xc>)
9000ce0e:	4601      	mov	r1, r0
9000ce10:	6818      	ldr	r0, [r3, #0]
9000ce12:	f000 b885 	b.w	9000cf20 <_malloc_r>
9000ce16:	bf00      	nop
9000ce18:	20000060 	.word	0x20000060

9000ce1c <memcpy>:
9000ce1c:	440a      	add	r2, r1
9000ce1e:	4291      	cmp	r1, r2
9000ce20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
9000ce24:	d100      	bne.n	9000ce28 <memcpy+0xc>
9000ce26:	4770      	bx	lr
9000ce28:	b510      	push	{r4, lr}
9000ce2a:	f811 4b01 	ldrb.w	r4, [r1], #1
9000ce2e:	f803 4f01 	strb.w	r4, [r3, #1]!
9000ce32:	4291      	cmp	r1, r2
9000ce34:	d1f9      	bne.n	9000ce2a <memcpy+0xe>
9000ce36:	bd10      	pop	{r4, pc}

9000ce38 <memset>:
9000ce38:	4402      	add	r2, r0
9000ce3a:	4603      	mov	r3, r0
9000ce3c:	4293      	cmp	r3, r2
9000ce3e:	d100      	bne.n	9000ce42 <memset+0xa>
9000ce40:	4770      	bx	lr
9000ce42:	f803 1b01 	strb.w	r1, [r3], #1
9000ce46:	e7f9      	b.n	9000ce3c <memset+0x4>

9000ce48 <_free_r>:
9000ce48:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000ce4a:	2900      	cmp	r1, #0
9000ce4c:	d044      	beq.n	9000ced8 <_free_r+0x90>
9000ce4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000ce52:	9001      	str	r0, [sp, #4]
9000ce54:	2b00      	cmp	r3, #0
9000ce56:	f1a1 0404 	sub.w	r4, r1, #4
9000ce5a:	bfb8      	it	lt
9000ce5c:	18e4      	addlt	r4, r4, r3
9000ce5e:	f000 f9cb 	bl	9000d1f8 <__malloc_lock>
9000ce62:	4a1e      	ldr	r2, [pc, #120]	; (9000cedc <_free_r+0x94>)
9000ce64:	9801      	ldr	r0, [sp, #4]
9000ce66:	6813      	ldr	r3, [r2, #0]
9000ce68:	b933      	cbnz	r3, 9000ce78 <_free_r+0x30>
9000ce6a:	6063      	str	r3, [r4, #4]
9000ce6c:	6014      	str	r4, [r2, #0]
9000ce6e:	b003      	add	sp, #12
9000ce70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000ce74:	f000 b9c6 	b.w	9000d204 <__malloc_unlock>
9000ce78:	42a3      	cmp	r3, r4
9000ce7a:	d908      	bls.n	9000ce8e <_free_r+0x46>
9000ce7c:	6825      	ldr	r5, [r4, #0]
9000ce7e:	1961      	adds	r1, r4, r5
9000ce80:	428b      	cmp	r3, r1
9000ce82:	bf01      	itttt	eq
9000ce84:	6819      	ldreq	r1, [r3, #0]
9000ce86:	685b      	ldreq	r3, [r3, #4]
9000ce88:	1949      	addeq	r1, r1, r5
9000ce8a:	6021      	streq	r1, [r4, #0]
9000ce8c:	e7ed      	b.n	9000ce6a <_free_r+0x22>
9000ce8e:	461a      	mov	r2, r3
9000ce90:	685b      	ldr	r3, [r3, #4]
9000ce92:	b10b      	cbz	r3, 9000ce98 <_free_r+0x50>
9000ce94:	42a3      	cmp	r3, r4
9000ce96:	d9fa      	bls.n	9000ce8e <_free_r+0x46>
9000ce98:	6811      	ldr	r1, [r2, #0]
9000ce9a:	1855      	adds	r5, r2, r1
9000ce9c:	42a5      	cmp	r5, r4
9000ce9e:	d10b      	bne.n	9000ceb8 <_free_r+0x70>
9000cea0:	6824      	ldr	r4, [r4, #0]
9000cea2:	4421      	add	r1, r4
9000cea4:	1854      	adds	r4, r2, r1
9000cea6:	42a3      	cmp	r3, r4
9000cea8:	6011      	str	r1, [r2, #0]
9000ceaa:	d1e0      	bne.n	9000ce6e <_free_r+0x26>
9000ceac:	681c      	ldr	r4, [r3, #0]
9000ceae:	685b      	ldr	r3, [r3, #4]
9000ceb0:	6053      	str	r3, [r2, #4]
9000ceb2:	4421      	add	r1, r4
9000ceb4:	6011      	str	r1, [r2, #0]
9000ceb6:	e7da      	b.n	9000ce6e <_free_r+0x26>
9000ceb8:	d902      	bls.n	9000cec0 <_free_r+0x78>
9000ceba:	230c      	movs	r3, #12
9000cebc:	6003      	str	r3, [r0, #0]
9000cebe:	e7d6      	b.n	9000ce6e <_free_r+0x26>
9000cec0:	6825      	ldr	r5, [r4, #0]
9000cec2:	1961      	adds	r1, r4, r5
9000cec4:	428b      	cmp	r3, r1
9000cec6:	bf04      	itt	eq
9000cec8:	6819      	ldreq	r1, [r3, #0]
9000ceca:	685b      	ldreq	r3, [r3, #4]
9000cecc:	6063      	str	r3, [r4, #4]
9000cece:	bf04      	itt	eq
9000ced0:	1949      	addeq	r1, r1, r5
9000ced2:	6021      	streq	r1, [r4, #0]
9000ced4:	6054      	str	r4, [r2, #4]
9000ced6:	e7ca      	b.n	9000ce6e <_free_r+0x26>
9000ced8:	b003      	add	sp, #12
9000ceda:	bd30      	pop	{r4, r5, pc}
9000cedc:	200050d0 	.word	0x200050d0

9000cee0 <sbrk_aligned>:
9000cee0:	b570      	push	{r4, r5, r6, lr}
9000cee2:	4e0e      	ldr	r6, [pc, #56]	; (9000cf1c <sbrk_aligned+0x3c>)
9000cee4:	460c      	mov	r4, r1
9000cee6:	6831      	ldr	r1, [r6, #0]
9000cee8:	4605      	mov	r5, r0
9000ceea:	b911      	cbnz	r1, 9000cef2 <sbrk_aligned+0x12>
9000ceec:	f000 f8f8 	bl	9000d0e0 <_sbrk_r>
9000cef0:	6030      	str	r0, [r6, #0]
9000cef2:	4621      	mov	r1, r4
9000cef4:	4628      	mov	r0, r5
9000cef6:	f000 f8f3 	bl	9000d0e0 <_sbrk_r>
9000cefa:	1c43      	adds	r3, r0, #1
9000cefc:	d00a      	beq.n	9000cf14 <sbrk_aligned+0x34>
9000cefe:	1cc4      	adds	r4, r0, #3
9000cf00:	f024 0403 	bic.w	r4, r4, #3
9000cf04:	42a0      	cmp	r0, r4
9000cf06:	d007      	beq.n	9000cf18 <sbrk_aligned+0x38>
9000cf08:	1a21      	subs	r1, r4, r0
9000cf0a:	4628      	mov	r0, r5
9000cf0c:	f000 f8e8 	bl	9000d0e0 <_sbrk_r>
9000cf10:	3001      	adds	r0, #1
9000cf12:	d101      	bne.n	9000cf18 <sbrk_aligned+0x38>
9000cf14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
9000cf18:	4620      	mov	r0, r4
9000cf1a:	bd70      	pop	{r4, r5, r6, pc}
9000cf1c:	200050d4 	.word	0x200050d4

9000cf20 <_malloc_r>:
9000cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cf24:	1ccd      	adds	r5, r1, #3
9000cf26:	f025 0503 	bic.w	r5, r5, #3
9000cf2a:	3508      	adds	r5, #8
9000cf2c:	2d0c      	cmp	r5, #12
9000cf2e:	bf38      	it	cc
9000cf30:	250c      	movcc	r5, #12
9000cf32:	2d00      	cmp	r5, #0
9000cf34:	4607      	mov	r7, r0
9000cf36:	db01      	blt.n	9000cf3c <_malloc_r+0x1c>
9000cf38:	42a9      	cmp	r1, r5
9000cf3a:	d905      	bls.n	9000cf48 <_malloc_r+0x28>
9000cf3c:	230c      	movs	r3, #12
9000cf3e:	603b      	str	r3, [r7, #0]
9000cf40:	2600      	movs	r6, #0
9000cf42:	4630      	mov	r0, r6
9000cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cf48:	4e2e      	ldr	r6, [pc, #184]	; (9000d004 <_malloc_r+0xe4>)
9000cf4a:	f000 f955 	bl	9000d1f8 <__malloc_lock>
9000cf4e:	6833      	ldr	r3, [r6, #0]
9000cf50:	461c      	mov	r4, r3
9000cf52:	bb34      	cbnz	r4, 9000cfa2 <_malloc_r+0x82>
9000cf54:	4629      	mov	r1, r5
9000cf56:	4638      	mov	r0, r7
9000cf58:	f7ff ffc2 	bl	9000cee0 <sbrk_aligned>
9000cf5c:	1c43      	adds	r3, r0, #1
9000cf5e:	4604      	mov	r4, r0
9000cf60:	d14d      	bne.n	9000cffe <_malloc_r+0xde>
9000cf62:	6834      	ldr	r4, [r6, #0]
9000cf64:	4626      	mov	r6, r4
9000cf66:	2e00      	cmp	r6, #0
9000cf68:	d140      	bne.n	9000cfec <_malloc_r+0xcc>
9000cf6a:	6823      	ldr	r3, [r4, #0]
9000cf6c:	4631      	mov	r1, r6
9000cf6e:	4638      	mov	r0, r7
9000cf70:	eb04 0803 	add.w	r8, r4, r3
9000cf74:	f000 f8b4 	bl	9000d0e0 <_sbrk_r>
9000cf78:	4580      	cmp	r8, r0
9000cf7a:	d13a      	bne.n	9000cff2 <_malloc_r+0xd2>
9000cf7c:	6821      	ldr	r1, [r4, #0]
9000cf7e:	3503      	adds	r5, #3
9000cf80:	1a6d      	subs	r5, r5, r1
9000cf82:	f025 0503 	bic.w	r5, r5, #3
9000cf86:	3508      	adds	r5, #8
9000cf88:	2d0c      	cmp	r5, #12
9000cf8a:	bf38      	it	cc
9000cf8c:	250c      	movcc	r5, #12
9000cf8e:	4629      	mov	r1, r5
9000cf90:	4638      	mov	r0, r7
9000cf92:	f7ff ffa5 	bl	9000cee0 <sbrk_aligned>
9000cf96:	3001      	adds	r0, #1
9000cf98:	d02b      	beq.n	9000cff2 <_malloc_r+0xd2>
9000cf9a:	6823      	ldr	r3, [r4, #0]
9000cf9c:	442b      	add	r3, r5
9000cf9e:	6023      	str	r3, [r4, #0]
9000cfa0:	e00e      	b.n	9000cfc0 <_malloc_r+0xa0>
9000cfa2:	6822      	ldr	r2, [r4, #0]
9000cfa4:	1b52      	subs	r2, r2, r5
9000cfa6:	d41e      	bmi.n	9000cfe6 <_malloc_r+0xc6>
9000cfa8:	2a0b      	cmp	r2, #11
9000cfaa:	d916      	bls.n	9000cfda <_malloc_r+0xba>
9000cfac:	1961      	adds	r1, r4, r5
9000cfae:	42a3      	cmp	r3, r4
9000cfb0:	6025      	str	r5, [r4, #0]
9000cfb2:	bf18      	it	ne
9000cfb4:	6059      	strne	r1, [r3, #4]
9000cfb6:	6863      	ldr	r3, [r4, #4]
9000cfb8:	bf08      	it	eq
9000cfba:	6031      	streq	r1, [r6, #0]
9000cfbc:	5162      	str	r2, [r4, r5]
9000cfbe:	604b      	str	r3, [r1, #4]
9000cfc0:	4638      	mov	r0, r7
9000cfc2:	f104 060b 	add.w	r6, r4, #11
9000cfc6:	f000 f91d 	bl	9000d204 <__malloc_unlock>
9000cfca:	f026 0607 	bic.w	r6, r6, #7
9000cfce:	1d23      	adds	r3, r4, #4
9000cfd0:	1af2      	subs	r2, r6, r3
9000cfd2:	d0b6      	beq.n	9000cf42 <_malloc_r+0x22>
9000cfd4:	1b9b      	subs	r3, r3, r6
9000cfd6:	50a3      	str	r3, [r4, r2]
9000cfd8:	e7b3      	b.n	9000cf42 <_malloc_r+0x22>
9000cfda:	6862      	ldr	r2, [r4, #4]
9000cfdc:	42a3      	cmp	r3, r4
9000cfde:	bf0c      	ite	eq
9000cfe0:	6032      	streq	r2, [r6, #0]
9000cfe2:	605a      	strne	r2, [r3, #4]
9000cfe4:	e7ec      	b.n	9000cfc0 <_malloc_r+0xa0>
9000cfe6:	4623      	mov	r3, r4
9000cfe8:	6864      	ldr	r4, [r4, #4]
9000cfea:	e7b2      	b.n	9000cf52 <_malloc_r+0x32>
9000cfec:	4634      	mov	r4, r6
9000cfee:	6876      	ldr	r6, [r6, #4]
9000cff0:	e7b9      	b.n	9000cf66 <_malloc_r+0x46>
9000cff2:	230c      	movs	r3, #12
9000cff4:	603b      	str	r3, [r7, #0]
9000cff6:	4638      	mov	r0, r7
9000cff8:	f000 f904 	bl	9000d204 <__malloc_unlock>
9000cffc:	e7a1      	b.n	9000cf42 <_malloc_r+0x22>
9000cffe:	6025      	str	r5, [r4, #0]
9000d000:	e7de      	b.n	9000cfc0 <_malloc_r+0xa0>
9000d002:	bf00      	nop
9000d004:	200050d0 	.word	0x200050d0

9000d008 <srand>:
9000d008:	b538      	push	{r3, r4, r5, lr}
9000d00a:	4b10      	ldr	r3, [pc, #64]	; (9000d04c <srand+0x44>)
9000d00c:	681d      	ldr	r5, [r3, #0]
9000d00e:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000d010:	4604      	mov	r4, r0
9000d012:	b9b3      	cbnz	r3, 9000d042 <srand+0x3a>
9000d014:	2018      	movs	r0, #24
9000d016:	f7ff fef9 	bl	9000ce0c <malloc>
9000d01a:	4602      	mov	r2, r0
9000d01c:	63a8      	str	r0, [r5, #56]	; 0x38
9000d01e:	b920      	cbnz	r0, 9000d02a <srand+0x22>
9000d020:	4b0b      	ldr	r3, [pc, #44]	; (9000d050 <srand+0x48>)
9000d022:	480c      	ldr	r0, [pc, #48]	; (9000d054 <srand+0x4c>)
9000d024:	2142      	movs	r1, #66	; 0x42
9000d026:	f000 f8a5 	bl	9000d174 <__assert_func>
9000d02a:	490b      	ldr	r1, [pc, #44]	; (9000d058 <srand+0x50>)
9000d02c:	4b0b      	ldr	r3, [pc, #44]	; (9000d05c <srand+0x54>)
9000d02e:	e9c0 1300 	strd	r1, r3, [r0]
9000d032:	4b0b      	ldr	r3, [pc, #44]	; (9000d060 <srand+0x58>)
9000d034:	6083      	str	r3, [r0, #8]
9000d036:	230b      	movs	r3, #11
9000d038:	8183      	strh	r3, [r0, #12]
9000d03a:	2100      	movs	r1, #0
9000d03c:	2001      	movs	r0, #1
9000d03e:	e9c2 0104 	strd	r0, r1, [r2, #16]
9000d042:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000d044:	2200      	movs	r2, #0
9000d046:	611c      	str	r4, [r3, #16]
9000d048:	615a      	str	r2, [r3, #20]
9000d04a:	bd38      	pop	{r3, r4, r5, pc}
9000d04c:	20000060 	.word	0x20000060
9000d050:	90010a9c 	.word	0x90010a9c
9000d054:	90010ab3 	.word	0x90010ab3
9000d058:	abcd330e 	.word	0xabcd330e
9000d05c:	e66d1234 	.word	0xe66d1234
9000d060:	0005deec 	.word	0x0005deec

9000d064 <rand>:
9000d064:	4b16      	ldr	r3, [pc, #88]	; (9000d0c0 <rand+0x5c>)
9000d066:	b510      	push	{r4, lr}
9000d068:	681c      	ldr	r4, [r3, #0]
9000d06a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d06c:	b9b3      	cbnz	r3, 9000d09c <rand+0x38>
9000d06e:	2018      	movs	r0, #24
9000d070:	f7ff fecc 	bl	9000ce0c <malloc>
9000d074:	63a0      	str	r0, [r4, #56]	; 0x38
9000d076:	b928      	cbnz	r0, 9000d084 <rand+0x20>
9000d078:	4602      	mov	r2, r0
9000d07a:	4b12      	ldr	r3, [pc, #72]	; (9000d0c4 <rand+0x60>)
9000d07c:	4812      	ldr	r0, [pc, #72]	; (9000d0c8 <rand+0x64>)
9000d07e:	214e      	movs	r1, #78	; 0x4e
9000d080:	f000 f878 	bl	9000d174 <__assert_func>
9000d084:	4a11      	ldr	r2, [pc, #68]	; (9000d0cc <rand+0x68>)
9000d086:	4b12      	ldr	r3, [pc, #72]	; (9000d0d0 <rand+0x6c>)
9000d088:	e9c0 2300 	strd	r2, r3, [r0]
9000d08c:	4b11      	ldr	r3, [pc, #68]	; (9000d0d4 <rand+0x70>)
9000d08e:	6083      	str	r3, [r0, #8]
9000d090:	230b      	movs	r3, #11
9000d092:	8183      	strh	r3, [r0, #12]
9000d094:	2201      	movs	r2, #1
9000d096:	2300      	movs	r3, #0
9000d098:	e9c0 2304 	strd	r2, r3, [r0, #16]
9000d09c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
9000d09e:	4a0e      	ldr	r2, [pc, #56]	; (9000d0d8 <rand+0x74>)
9000d0a0:	6920      	ldr	r0, [r4, #16]
9000d0a2:	6963      	ldr	r3, [r4, #20]
9000d0a4:	490d      	ldr	r1, [pc, #52]	; (9000d0dc <rand+0x78>)
9000d0a6:	4342      	muls	r2, r0
9000d0a8:	fb01 2203 	mla	r2, r1, r3, r2
9000d0ac:	fba0 0101 	umull	r0, r1, r0, r1
9000d0b0:	1c43      	adds	r3, r0, #1
9000d0b2:	eb42 0001 	adc.w	r0, r2, r1
9000d0b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
9000d0ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000d0be:	bd10      	pop	{r4, pc}
9000d0c0:	20000060 	.word	0x20000060
9000d0c4:	90010a9c 	.word	0x90010a9c
9000d0c8:	90010ab3 	.word	0x90010ab3
9000d0cc:	abcd330e 	.word	0xabcd330e
9000d0d0:	e66d1234 	.word	0xe66d1234
9000d0d4:	0005deec 	.word	0x0005deec
9000d0d8:	5851f42d 	.word	0x5851f42d
9000d0dc:	4c957f2d 	.word	0x4c957f2d

9000d0e0 <_sbrk_r>:
9000d0e0:	b538      	push	{r3, r4, r5, lr}
9000d0e2:	4d06      	ldr	r5, [pc, #24]	; (9000d0fc <_sbrk_r+0x1c>)
9000d0e4:	2300      	movs	r3, #0
9000d0e6:	4604      	mov	r4, r0
9000d0e8:	4608      	mov	r0, r1
9000d0ea:	602b      	str	r3, [r5, #0]
9000d0ec:	f7f3 fc4c 	bl	90000988 <_sbrk>
9000d0f0:	1c43      	adds	r3, r0, #1
9000d0f2:	d102      	bne.n	9000d0fa <_sbrk_r+0x1a>
9000d0f4:	682b      	ldr	r3, [r5, #0]
9000d0f6:	b103      	cbz	r3, 9000d0fa <_sbrk_r+0x1a>
9000d0f8:	6023      	str	r3, [r4, #0]
9000d0fa:	bd38      	pop	{r3, r4, r5, pc}
9000d0fc:	200050d8 	.word	0x200050d8

9000d100 <siprintf>:
9000d100:	b40e      	push	{r1, r2, r3}
9000d102:	b500      	push	{lr}
9000d104:	b09c      	sub	sp, #112	; 0x70
9000d106:	ab1d      	add	r3, sp, #116	; 0x74
9000d108:	9002      	str	r0, [sp, #8]
9000d10a:	9006      	str	r0, [sp, #24]
9000d10c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000d110:	4809      	ldr	r0, [pc, #36]	; (9000d138 <siprintf+0x38>)
9000d112:	9107      	str	r1, [sp, #28]
9000d114:	9104      	str	r1, [sp, #16]
9000d116:	4909      	ldr	r1, [pc, #36]	; (9000d13c <siprintf+0x3c>)
9000d118:	f853 2b04 	ldr.w	r2, [r3], #4
9000d11c:	9105      	str	r1, [sp, #20]
9000d11e:	6800      	ldr	r0, [r0, #0]
9000d120:	9301      	str	r3, [sp, #4]
9000d122:	a902      	add	r1, sp, #8
9000d124:	f000 f8d0 	bl	9000d2c8 <_svfiprintf_r>
9000d128:	9b02      	ldr	r3, [sp, #8]
9000d12a:	2200      	movs	r2, #0
9000d12c:	701a      	strb	r2, [r3, #0]
9000d12e:	b01c      	add	sp, #112	; 0x70
9000d130:	f85d eb04 	ldr.w	lr, [sp], #4
9000d134:	b003      	add	sp, #12
9000d136:	4770      	bx	lr
9000d138:	20000060 	.word	0x20000060
9000d13c:	ffff0208 	.word	0xffff0208

9000d140 <time>:
9000d140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000d142:	4b0b      	ldr	r3, [pc, #44]	; (9000d170 <time+0x30>)
9000d144:	2200      	movs	r2, #0
9000d146:	4669      	mov	r1, sp
9000d148:	4604      	mov	r4, r0
9000d14a:	6818      	ldr	r0, [r3, #0]
9000d14c:	f000 f842 	bl	9000d1d4 <_gettimeofday_r>
9000d150:	2800      	cmp	r0, #0
9000d152:	bfbe      	ittt	lt
9000d154:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
9000d158:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000d15c:	e9cd 2300 	strdlt	r2, r3, [sp]
9000d160:	e9dd 0100 	ldrd	r0, r1, [sp]
9000d164:	b10c      	cbz	r4, 9000d16a <time+0x2a>
9000d166:	e9c4 0100 	strd	r0, r1, [r4]
9000d16a:	b004      	add	sp, #16
9000d16c:	bd10      	pop	{r4, pc}
9000d16e:	bf00      	nop
9000d170:	20000060 	.word	0x20000060

9000d174 <__assert_func>:
9000d174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000d176:	4614      	mov	r4, r2
9000d178:	461a      	mov	r2, r3
9000d17a:	4b09      	ldr	r3, [pc, #36]	; (9000d1a0 <__assert_func+0x2c>)
9000d17c:	681b      	ldr	r3, [r3, #0]
9000d17e:	4605      	mov	r5, r0
9000d180:	68d8      	ldr	r0, [r3, #12]
9000d182:	b14c      	cbz	r4, 9000d198 <__assert_func+0x24>
9000d184:	4b07      	ldr	r3, [pc, #28]	; (9000d1a4 <__assert_func+0x30>)
9000d186:	9100      	str	r1, [sp, #0]
9000d188:	e9cd 3401 	strd	r3, r4, [sp, #4]
9000d18c:	4906      	ldr	r1, [pc, #24]	; (9000d1a8 <__assert_func+0x34>)
9000d18e:	462b      	mov	r3, r5
9000d190:	f000 f80e 	bl	9000d1b0 <fiprintf>
9000d194:	f000 fd46 	bl	9000dc24 <abort>
9000d198:	4b04      	ldr	r3, [pc, #16]	; (9000d1ac <__assert_func+0x38>)
9000d19a:	461c      	mov	r4, r3
9000d19c:	e7f3      	b.n	9000d186 <__assert_func+0x12>
9000d19e:	bf00      	nop
9000d1a0:	20000060 	.word	0x20000060
9000d1a4:	90010b0e 	.word	0x90010b0e
9000d1a8:	90010b1b 	.word	0x90010b1b
9000d1ac:	90010b49 	.word	0x90010b49

9000d1b0 <fiprintf>:
9000d1b0:	b40e      	push	{r1, r2, r3}
9000d1b2:	b503      	push	{r0, r1, lr}
9000d1b4:	4601      	mov	r1, r0
9000d1b6:	ab03      	add	r3, sp, #12
9000d1b8:	4805      	ldr	r0, [pc, #20]	; (9000d1d0 <fiprintf+0x20>)
9000d1ba:	f853 2b04 	ldr.w	r2, [r3], #4
9000d1be:	6800      	ldr	r0, [r0, #0]
9000d1c0:	9301      	str	r3, [sp, #4]
9000d1c2:	f000 f9ab 	bl	9000d51c <_vfiprintf_r>
9000d1c6:	b002      	add	sp, #8
9000d1c8:	f85d eb04 	ldr.w	lr, [sp], #4
9000d1cc:	b003      	add	sp, #12
9000d1ce:	4770      	bx	lr
9000d1d0:	20000060 	.word	0x20000060

9000d1d4 <_gettimeofday_r>:
9000d1d4:	b538      	push	{r3, r4, r5, lr}
9000d1d6:	4d07      	ldr	r5, [pc, #28]	; (9000d1f4 <_gettimeofday_r+0x20>)
9000d1d8:	2300      	movs	r3, #0
9000d1da:	4604      	mov	r4, r0
9000d1dc:	4608      	mov	r0, r1
9000d1de:	4611      	mov	r1, r2
9000d1e0:	602b      	str	r3, [r5, #0]
9000d1e2:	f001 f889 	bl	9000e2f8 <_gettimeofday>
9000d1e6:	1c43      	adds	r3, r0, #1
9000d1e8:	d102      	bne.n	9000d1f0 <_gettimeofday_r+0x1c>
9000d1ea:	682b      	ldr	r3, [r5, #0]
9000d1ec:	b103      	cbz	r3, 9000d1f0 <_gettimeofday_r+0x1c>
9000d1ee:	6023      	str	r3, [r4, #0]
9000d1f0:	bd38      	pop	{r3, r4, r5, pc}
9000d1f2:	bf00      	nop
9000d1f4:	200050d8 	.word	0x200050d8

9000d1f8 <__malloc_lock>:
9000d1f8:	4801      	ldr	r0, [pc, #4]	; (9000d200 <__malloc_lock+0x8>)
9000d1fa:	f000 bed3 	b.w	9000dfa4 <__retarget_lock_acquire_recursive>
9000d1fe:	bf00      	nop
9000d200:	200050dc 	.word	0x200050dc

9000d204 <__malloc_unlock>:
9000d204:	4801      	ldr	r0, [pc, #4]	; (9000d20c <__malloc_unlock+0x8>)
9000d206:	f000 bece 	b.w	9000dfa6 <__retarget_lock_release_recursive>
9000d20a:	bf00      	nop
9000d20c:	200050dc 	.word	0x200050dc

9000d210 <__ssputs_r>:
9000d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d214:	688e      	ldr	r6, [r1, #8]
9000d216:	429e      	cmp	r6, r3
9000d218:	4682      	mov	sl, r0
9000d21a:	460c      	mov	r4, r1
9000d21c:	4690      	mov	r8, r2
9000d21e:	461f      	mov	r7, r3
9000d220:	d838      	bhi.n	9000d294 <__ssputs_r+0x84>
9000d222:	898a      	ldrh	r2, [r1, #12]
9000d224:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000d228:	d032      	beq.n	9000d290 <__ssputs_r+0x80>
9000d22a:	6825      	ldr	r5, [r4, #0]
9000d22c:	6909      	ldr	r1, [r1, #16]
9000d22e:	eba5 0901 	sub.w	r9, r5, r1
9000d232:	6965      	ldr	r5, [r4, #20]
9000d234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000d238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000d23c:	3301      	adds	r3, #1
9000d23e:	444b      	add	r3, r9
9000d240:	106d      	asrs	r5, r5, #1
9000d242:	429d      	cmp	r5, r3
9000d244:	bf38      	it	cc
9000d246:	461d      	movcc	r5, r3
9000d248:	0553      	lsls	r3, r2, #21
9000d24a:	d531      	bpl.n	9000d2b0 <__ssputs_r+0xa0>
9000d24c:	4629      	mov	r1, r5
9000d24e:	f7ff fe67 	bl	9000cf20 <_malloc_r>
9000d252:	4606      	mov	r6, r0
9000d254:	b950      	cbnz	r0, 9000d26c <__ssputs_r+0x5c>
9000d256:	230c      	movs	r3, #12
9000d258:	f8ca 3000 	str.w	r3, [sl]
9000d25c:	89a3      	ldrh	r3, [r4, #12]
9000d25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000d262:	81a3      	strh	r3, [r4, #12]
9000d264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000d268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d26c:	6921      	ldr	r1, [r4, #16]
9000d26e:	464a      	mov	r2, r9
9000d270:	f7ff fdd4 	bl	9000ce1c <memcpy>
9000d274:	89a3      	ldrh	r3, [r4, #12]
9000d276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000d27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000d27e:	81a3      	strh	r3, [r4, #12]
9000d280:	6126      	str	r6, [r4, #16]
9000d282:	6165      	str	r5, [r4, #20]
9000d284:	444e      	add	r6, r9
9000d286:	eba5 0509 	sub.w	r5, r5, r9
9000d28a:	6026      	str	r6, [r4, #0]
9000d28c:	60a5      	str	r5, [r4, #8]
9000d28e:	463e      	mov	r6, r7
9000d290:	42be      	cmp	r6, r7
9000d292:	d900      	bls.n	9000d296 <__ssputs_r+0x86>
9000d294:	463e      	mov	r6, r7
9000d296:	6820      	ldr	r0, [r4, #0]
9000d298:	4632      	mov	r2, r6
9000d29a:	4641      	mov	r1, r8
9000d29c:	f000 feea 	bl	9000e074 <memmove>
9000d2a0:	68a3      	ldr	r3, [r4, #8]
9000d2a2:	1b9b      	subs	r3, r3, r6
9000d2a4:	60a3      	str	r3, [r4, #8]
9000d2a6:	6823      	ldr	r3, [r4, #0]
9000d2a8:	4433      	add	r3, r6
9000d2aa:	6023      	str	r3, [r4, #0]
9000d2ac:	2000      	movs	r0, #0
9000d2ae:	e7db      	b.n	9000d268 <__ssputs_r+0x58>
9000d2b0:	462a      	mov	r2, r5
9000d2b2:	f000 fef9 	bl	9000e0a8 <_realloc_r>
9000d2b6:	4606      	mov	r6, r0
9000d2b8:	2800      	cmp	r0, #0
9000d2ba:	d1e1      	bne.n	9000d280 <__ssputs_r+0x70>
9000d2bc:	6921      	ldr	r1, [r4, #16]
9000d2be:	4650      	mov	r0, sl
9000d2c0:	f7ff fdc2 	bl	9000ce48 <_free_r>
9000d2c4:	e7c7      	b.n	9000d256 <__ssputs_r+0x46>
	...

9000d2c8 <_svfiprintf_r>:
9000d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d2cc:	4698      	mov	r8, r3
9000d2ce:	898b      	ldrh	r3, [r1, #12]
9000d2d0:	061b      	lsls	r3, r3, #24
9000d2d2:	b09d      	sub	sp, #116	; 0x74
9000d2d4:	4607      	mov	r7, r0
9000d2d6:	460d      	mov	r5, r1
9000d2d8:	4614      	mov	r4, r2
9000d2da:	d50e      	bpl.n	9000d2fa <_svfiprintf_r+0x32>
9000d2dc:	690b      	ldr	r3, [r1, #16]
9000d2de:	b963      	cbnz	r3, 9000d2fa <_svfiprintf_r+0x32>
9000d2e0:	2140      	movs	r1, #64	; 0x40
9000d2e2:	f7ff fe1d 	bl	9000cf20 <_malloc_r>
9000d2e6:	6028      	str	r0, [r5, #0]
9000d2e8:	6128      	str	r0, [r5, #16]
9000d2ea:	b920      	cbnz	r0, 9000d2f6 <_svfiprintf_r+0x2e>
9000d2ec:	230c      	movs	r3, #12
9000d2ee:	603b      	str	r3, [r7, #0]
9000d2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000d2f4:	e0d1      	b.n	9000d49a <_svfiprintf_r+0x1d2>
9000d2f6:	2340      	movs	r3, #64	; 0x40
9000d2f8:	616b      	str	r3, [r5, #20]
9000d2fa:	2300      	movs	r3, #0
9000d2fc:	9309      	str	r3, [sp, #36]	; 0x24
9000d2fe:	2320      	movs	r3, #32
9000d300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000d304:	f8cd 800c 	str.w	r8, [sp, #12]
9000d308:	2330      	movs	r3, #48	; 0x30
9000d30a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 9000d4b4 <_svfiprintf_r+0x1ec>
9000d30e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000d312:	f04f 0901 	mov.w	r9, #1
9000d316:	4623      	mov	r3, r4
9000d318:	469a      	mov	sl, r3
9000d31a:	f813 2b01 	ldrb.w	r2, [r3], #1
9000d31e:	b10a      	cbz	r2, 9000d324 <_svfiprintf_r+0x5c>
9000d320:	2a25      	cmp	r2, #37	; 0x25
9000d322:	d1f9      	bne.n	9000d318 <_svfiprintf_r+0x50>
9000d324:	ebba 0b04 	subs.w	fp, sl, r4
9000d328:	d00b      	beq.n	9000d342 <_svfiprintf_r+0x7a>
9000d32a:	465b      	mov	r3, fp
9000d32c:	4622      	mov	r2, r4
9000d32e:	4629      	mov	r1, r5
9000d330:	4638      	mov	r0, r7
9000d332:	f7ff ff6d 	bl	9000d210 <__ssputs_r>
9000d336:	3001      	adds	r0, #1
9000d338:	f000 80aa 	beq.w	9000d490 <_svfiprintf_r+0x1c8>
9000d33c:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000d33e:	445a      	add	r2, fp
9000d340:	9209      	str	r2, [sp, #36]	; 0x24
9000d342:	f89a 3000 	ldrb.w	r3, [sl]
9000d346:	2b00      	cmp	r3, #0
9000d348:	f000 80a2 	beq.w	9000d490 <_svfiprintf_r+0x1c8>
9000d34c:	2300      	movs	r3, #0
9000d34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000d352:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000d356:	f10a 0a01 	add.w	sl, sl, #1
9000d35a:	9304      	str	r3, [sp, #16]
9000d35c:	9307      	str	r3, [sp, #28]
9000d35e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000d362:	931a      	str	r3, [sp, #104]	; 0x68
9000d364:	4654      	mov	r4, sl
9000d366:	2205      	movs	r2, #5
9000d368:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d36c:	4851      	ldr	r0, [pc, #324]	; (9000d4b4 <_svfiprintf_r+0x1ec>)
9000d36e:	f7f2 ffb7 	bl	900002e0 <memchr>
9000d372:	9a04      	ldr	r2, [sp, #16]
9000d374:	b9d8      	cbnz	r0, 9000d3ae <_svfiprintf_r+0xe6>
9000d376:	06d0      	lsls	r0, r2, #27
9000d378:	bf44      	itt	mi
9000d37a:	2320      	movmi	r3, #32
9000d37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000d380:	0711      	lsls	r1, r2, #28
9000d382:	bf44      	itt	mi
9000d384:	232b      	movmi	r3, #43	; 0x2b
9000d386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000d38a:	f89a 3000 	ldrb.w	r3, [sl]
9000d38e:	2b2a      	cmp	r3, #42	; 0x2a
9000d390:	d015      	beq.n	9000d3be <_svfiprintf_r+0xf6>
9000d392:	9a07      	ldr	r2, [sp, #28]
9000d394:	4654      	mov	r4, sl
9000d396:	2000      	movs	r0, #0
9000d398:	f04f 0c0a 	mov.w	ip, #10
9000d39c:	4621      	mov	r1, r4
9000d39e:	f811 3b01 	ldrb.w	r3, [r1], #1
9000d3a2:	3b30      	subs	r3, #48	; 0x30
9000d3a4:	2b09      	cmp	r3, #9
9000d3a6:	d94e      	bls.n	9000d446 <_svfiprintf_r+0x17e>
9000d3a8:	b1b0      	cbz	r0, 9000d3d8 <_svfiprintf_r+0x110>
9000d3aa:	9207      	str	r2, [sp, #28]
9000d3ac:	e014      	b.n	9000d3d8 <_svfiprintf_r+0x110>
9000d3ae:	eba0 0308 	sub.w	r3, r0, r8
9000d3b2:	fa09 f303 	lsl.w	r3, r9, r3
9000d3b6:	4313      	orrs	r3, r2
9000d3b8:	9304      	str	r3, [sp, #16]
9000d3ba:	46a2      	mov	sl, r4
9000d3bc:	e7d2      	b.n	9000d364 <_svfiprintf_r+0x9c>
9000d3be:	9b03      	ldr	r3, [sp, #12]
9000d3c0:	1d19      	adds	r1, r3, #4
9000d3c2:	681b      	ldr	r3, [r3, #0]
9000d3c4:	9103      	str	r1, [sp, #12]
9000d3c6:	2b00      	cmp	r3, #0
9000d3c8:	bfbb      	ittet	lt
9000d3ca:	425b      	neglt	r3, r3
9000d3cc:	f042 0202 	orrlt.w	r2, r2, #2
9000d3d0:	9307      	strge	r3, [sp, #28]
9000d3d2:	9307      	strlt	r3, [sp, #28]
9000d3d4:	bfb8      	it	lt
9000d3d6:	9204      	strlt	r2, [sp, #16]
9000d3d8:	7823      	ldrb	r3, [r4, #0]
9000d3da:	2b2e      	cmp	r3, #46	; 0x2e
9000d3dc:	d10c      	bne.n	9000d3f8 <_svfiprintf_r+0x130>
9000d3de:	7863      	ldrb	r3, [r4, #1]
9000d3e0:	2b2a      	cmp	r3, #42	; 0x2a
9000d3e2:	d135      	bne.n	9000d450 <_svfiprintf_r+0x188>
9000d3e4:	9b03      	ldr	r3, [sp, #12]
9000d3e6:	1d1a      	adds	r2, r3, #4
9000d3e8:	681b      	ldr	r3, [r3, #0]
9000d3ea:	9203      	str	r2, [sp, #12]
9000d3ec:	2b00      	cmp	r3, #0
9000d3ee:	bfb8      	it	lt
9000d3f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000d3f4:	3402      	adds	r4, #2
9000d3f6:	9305      	str	r3, [sp, #20]
9000d3f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9000d4c4 <_svfiprintf_r+0x1fc>
9000d3fc:	7821      	ldrb	r1, [r4, #0]
9000d3fe:	2203      	movs	r2, #3
9000d400:	4650      	mov	r0, sl
9000d402:	f7f2 ff6d 	bl	900002e0 <memchr>
9000d406:	b140      	cbz	r0, 9000d41a <_svfiprintf_r+0x152>
9000d408:	2340      	movs	r3, #64	; 0x40
9000d40a:	eba0 000a 	sub.w	r0, r0, sl
9000d40e:	fa03 f000 	lsl.w	r0, r3, r0
9000d412:	9b04      	ldr	r3, [sp, #16]
9000d414:	4303      	orrs	r3, r0
9000d416:	3401      	adds	r4, #1
9000d418:	9304      	str	r3, [sp, #16]
9000d41a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d41e:	4826      	ldr	r0, [pc, #152]	; (9000d4b8 <_svfiprintf_r+0x1f0>)
9000d420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000d424:	2206      	movs	r2, #6
9000d426:	f7f2 ff5b 	bl	900002e0 <memchr>
9000d42a:	2800      	cmp	r0, #0
9000d42c:	d038      	beq.n	9000d4a0 <_svfiprintf_r+0x1d8>
9000d42e:	4b23      	ldr	r3, [pc, #140]	; (9000d4bc <_svfiprintf_r+0x1f4>)
9000d430:	bb1b      	cbnz	r3, 9000d47a <_svfiprintf_r+0x1b2>
9000d432:	9b03      	ldr	r3, [sp, #12]
9000d434:	3307      	adds	r3, #7
9000d436:	f023 0307 	bic.w	r3, r3, #7
9000d43a:	3308      	adds	r3, #8
9000d43c:	9303      	str	r3, [sp, #12]
9000d43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000d440:	4433      	add	r3, r6
9000d442:	9309      	str	r3, [sp, #36]	; 0x24
9000d444:	e767      	b.n	9000d316 <_svfiprintf_r+0x4e>
9000d446:	fb0c 3202 	mla	r2, ip, r2, r3
9000d44a:	460c      	mov	r4, r1
9000d44c:	2001      	movs	r0, #1
9000d44e:	e7a5      	b.n	9000d39c <_svfiprintf_r+0xd4>
9000d450:	2300      	movs	r3, #0
9000d452:	3401      	adds	r4, #1
9000d454:	9305      	str	r3, [sp, #20]
9000d456:	4619      	mov	r1, r3
9000d458:	f04f 0c0a 	mov.w	ip, #10
9000d45c:	4620      	mov	r0, r4
9000d45e:	f810 2b01 	ldrb.w	r2, [r0], #1
9000d462:	3a30      	subs	r2, #48	; 0x30
9000d464:	2a09      	cmp	r2, #9
9000d466:	d903      	bls.n	9000d470 <_svfiprintf_r+0x1a8>
9000d468:	2b00      	cmp	r3, #0
9000d46a:	d0c5      	beq.n	9000d3f8 <_svfiprintf_r+0x130>
9000d46c:	9105      	str	r1, [sp, #20]
9000d46e:	e7c3      	b.n	9000d3f8 <_svfiprintf_r+0x130>
9000d470:	fb0c 2101 	mla	r1, ip, r1, r2
9000d474:	4604      	mov	r4, r0
9000d476:	2301      	movs	r3, #1
9000d478:	e7f0      	b.n	9000d45c <_svfiprintf_r+0x194>
9000d47a:	ab03      	add	r3, sp, #12
9000d47c:	9300      	str	r3, [sp, #0]
9000d47e:	462a      	mov	r2, r5
9000d480:	4b0f      	ldr	r3, [pc, #60]	; (9000d4c0 <_svfiprintf_r+0x1f8>)
9000d482:	a904      	add	r1, sp, #16
9000d484:	4638      	mov	r0, r7
9000d486:	f3af 8000 	nop.w
9000d48a:	1c42      	adds	r2, r0, #1
9000d48c:	4606      	mov	r6, r0
9000d48e:	d1d6      	bne.n	9000d43e <_svfiprintf_r+0x176>
9000d490:	89ab      	ldrh	r3, [r5, #12]
9000d492:	065b      	lsls	r3, r3, #25
9000d494:	f53f af2c 	bmi.w	9000d2f0 <_svfiprintf_r+0x28>
9000d498:	9809      	ldr	r0, [sp, #36]	; 0x24
9000d49a:	b01d      	add	sp, #116	; 0x74
9000d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000d4a0:	ab03      	add	r3, sp, #12
9000d4a2:	9300      	str	r3, [sp, #0]
9000d4a4:	462a      	mov	r2, r5
9000d4a6:	4b06      	ldr	r3, [pc, #24]	; (9000d4c0 <_svfiprintf_r+0x1f8>)
9000d4a8:	a904      	add	r1, sp, #16
9000d4aa:	4638      	mov	r0, r7
9000d4ac:	f000 f9d4 	bl	9000d858 <_printf_i>
9000d4b0:	e7eb      	b.n	9000d48a <_svfiprintf_r+0x1c2>
9000d4b2:	bf00      	nop
9000d4b4:	90010b4a 	.word	0x90010b4a
9000d4b8:	90010b54 	.word	0x90010b54
9000d4bc:	00000000 	.word	0x00000000
9000d4c0:	9000d211 	.word	0x9000d211
9000d4c4:	90010b50 	.word	0x90010b50

9000d4c8 <__sfputc_r>:
9000d4c8:	6893      	ldr	r3, [r2, #8]
9000d4ca:	3b01      	subs	r3, #1
9000d4cc:	2b00      	cmp	r3, #0
9000d4ce:	b410      	push	{r4}
9000d4d0:	6093      	str	r3, [r2, #8]
9000d4d2:	da08      	bge.n	9000d4e6 <__sfputc_r+0x1e>
9000d4d4:	6994      	ldr	r4, [r2, #24]
9000d4d6:	42a3      	cmp	r3, r4
9000d4d8:	db01      	blt.n	9000d4de <__sfputc_r+0x16>
9000d4da:	290a      	cmp	r1, #10
9000d4dc:	d103      	bne.n	9000d4e6 <__sfputc_r+0x1e>
9000d4de:	f85d 4b04 	ldr.w	r4, [sp], #4
9000d4e2:	f000 badf 	b.w	9000daa4 <__swbuf_r>
9000d4e6:	6813      	ldr	r3, [r2, #0]
9000d4e8:	1c58      	adds	r0, r3, #1
9000d4ea:	6010      	str	r0, [r2, #0]
9000d4ec:	7019      	strb	r1, [r3, #0]
9000d4ee:	4608      	mov	r0, r1
9000d4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
9000d4f4:	4770      	bx	lr

9000d4f6 <__sfputs_r>:
9000d4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000d4f8:	4606      	mov	r6, r0
9000d4fa:	460f      	mov	r7, r1
9000d4fc:	4614      	mov	r4, r2
9000d4fe:	18d5      	adds	r5, r2, r3
9000d500:	42ac      	cmp	r4, r5
9000d502:	d101      	bne.n	9000d508 <__sfputs_r+0x12>
9000d504:	2000      	movs	r0, #0
9000d506:	e007      	b.n	9000d518 <__sfputs_r+0x22>
9000d508:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d50c:	463a      	mov	r2, r7
9000d50e:	4630      	mov	r0, r6
9000d510:	f7ff ffda 	bl	9000d4c8 <__sfputc_r>
9000d514:	1c43      	adds	r3, r0, #1
9000d516:	d1f3      	bne.n	9000d500 <__sfputs_r+0xa>
9000d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000d51c <_vfiprintf_r>:
9000d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d520:	460d      	mov	r5, r1
9000d522:	b09d      	sub	sp, #116	; 0x74
9000d524:	4614      	mov	r4, r2
9000d526:	4698      	mov	r8, r3
9000d528:	4606      	mov	r6, r0
9000d52a:	b118      	cbz	r0, 9000d534 <_vfiprintf_r+0x18>
9000d52c:	6983      	ldr	r3, [r0, #24]
9000d52e:	b90b      	cbnz	r3, 9000d534 <_vfiprintf_r+0x18>
9000d530:	f000 fc9a 	bl	9000de68 <__sinit>
9000d534:	4b89      	ldr	r3, [pc, #548]	; (9000d75c <_vfiprintf_r+0x240>)
9000d536:	429d      	cmp	r5, r3
9000d538:	d11b      	bne.n	9000d572 <_vfiprintf_r+0x56>
9000d53a:	6875      	ldr	r5, [r6, #4]
9000d53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000d53e:	07d9      	lsls	r1, r3, #31
9000d540:	d405      	bmi.n	9000d54e <_vfiprintf_r+0x32>
9000d542:	89ab      	ldrh	r3, [r5, #12]
9000d544:	059a      	lsls	r2, r3, #22
9000d546:	d402      	bmi.n	9000d54e <_vfiprintf_r+0x32>
9000d548:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000d54a:	f000 fd2b 	bl	9000dfa4 <__retarget_lock_acquire_recursive>
9000d54e:	89ab      	ldrh	r3, [r5, #12]
9000d550:	071b      	lsls	r3, r3, #28
9000d552:	d501      	bpl.n	9000d558 <_vfiprintf_r+0x3c>
9000d554:	692b      	ldr	r3, [r5, #16]
9000d556:	b9eb      	cbnz	r3, 9000d594 <_vfiprintf_r+0x78>
9000d558:	4629      	mov	r1, r5
9000d55a:	4630      	mov	r0, r6
9000d55c:	f000 faf4 	bl	9000db48 <__swsetup_r>
9000d560:	b1c0      	cbz	r0, 9000d594 <_vfiprintf_r+0x78>
9000d562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000d564:	07dc      	lsls	r4, r3, #31
9000d566:	d50e      	bpl.n	9000d586 <_vfiprintf_r+0x6a>
9000d568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000d56c:	b01d      	add	sp, #116	; 0x74
9000d56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000d572:	4b7b      	ldr	r3, [pc, #492]	; (9000d760 <_vfiprintf_r+0x244>)
9000d574:	429d      	cmp	r5, r3
9000d576:	d101      	bne.n	9000d57c <_vfiprintf_r+0x60>
9000d578:	68b5      	ldr	r5, [r6, #8]
9000d57a:	e7df      	b.n	9000d53c <_vfiprintf_r+0x20>
9000d57c:	4b79      	ldr	r3, [pc, #484]	; (9000d764 <_vfiprintf_r+0x248>)
9000d57e:	429d      	cmp	r5, r3
9000d580:	bf08      	it	eq
9000d582:	68f5      	ldreq	r5, [r6, #12]
9000d584:	e7da      	b.n	9000d53c <_vfiprintf_r+0x20>
9000d586:	89ab      	ldrh	r3, [r5, #12]
9000d588:	0598      	lsls	r0, r3, #22
9000d58a:	d4ed      	bmi.n	9000d568 <_vfiprintf_r+0x4c>
9000d58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000d58e:	f000 fd0a 	bl	9000dfa6 <__retarget_lock_release_recursive>
9000d592:	e7e9      	b.n	9000d568 <_vfiprintf_r+0x4c>
9000d594:	2300      	movs	r3, #0
9000d596:	9309      	str	r3, [sp, #36]	; 0x24
9000d598:	2320      	movs	r3, #32
9000d59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000d59e:	f8cd 800c 	str.w	r8, [sp, #12]
9000d5a2:	2330      	movs	r3, #48	; 0x30
9000d5a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 9000d768 <_vfiprintf_r+0x24c>
9000d5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000d5ac:	f04f 0901 	mov.w	r9, #1
9000d5b0:	4623      	mov	r3, r4
9000d5b2:	469a      	mov	sl, r3
9000d5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
9000d5b8:	b10a      	cbz	r2, 9000d5be <_vfiprintf_r+0xa2>
9000d5ba:	2a25      	cmp	r2, #37	; 0x25
9000d5bc:	d1f9      	bne.n	9000d5b2 <_vfiprintf_r+0x96>
9000d5be:	ebba 0b04 	subs.w	fp, sl, r4
9000d5c2:	d00b      	beq.n	9000d5dc <_vfiprintf_r+0xc0>
9000d5c4:	465b      	mov	r3, fp
9000d5c6:	4622      	mov	r2, r4
9000d5c8:	4629      	mov	r1, r5
9000d5ca:	4630      	mov	r0, r6
9000d5cc:	f7ff ff93 	bl	9000d4f6 <__sfputs_r>
9000d5d0:	3001      	adds	r0, #1
9000d5d2:	f000 80aa 	beq.w	9000d72a <_vfiprintf_r+0x20e>
9000d5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000d5d8:	445a      	add	r2, fp
9000d5da:	9209      	str	r2, [sp, #36]	; 0x24
9000d5dc:	f89a 3000 	ldrb.w	r3, [sl]
9000d5e0:	2b00      	cmp	r3, #0
9000d5e2:	f000 80a2 	beq.w	9000d72a <_vfiprintf_r+0x20e>
9000d5e6:	2300      	movs	r3, #0
9000d5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000d5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000d5f0:	f10a 0a01 	add.w	sl, sl, #1
9000d5f4:	9304      	str	r3, [sp, #16]
9000d5f6:	9307      	str	r3, [sp, #28]
9000d5f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000d5fc:	931a      	str	r3, [sp, #104]	; 0x68
9000d5fe:	4654      	mov	r4, sl
9000d600:	2205      	movs	r2, #5
9000d602:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d606:	4858      	ldr	r0, [pc, #352]	; (9000d768 <_vfiprintf_r+0x24c>)
9000d608:	f7f2 fe6a 	bl	900002e0 <memchr>
9000d60c:	9a04      	ldr	r2, [sp, #16]
9000d60e:	b9d8      	cbnz	r0, 9000d648 <_vfiprintf_r+0x12c>
9000d610:	06d1      	lsls	r1, r2, #27
9000d612:	bf44      	itt	mi
9000d614:	2320      	movmi	r3, #32
9000d616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000d61a:	0713      	lsls	r3, r2, #28
9000d61c:	bf44      	itt	mi
9000d61e:	232b      	movmi	r3, #43	; 0x2b
9000d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000d624:	f89a 3000 	ldrb.w	r3, [sl]
9000d628:	2b2a      	cmp	r3, #42	; 0x2a
9000d62a:	d015      	beq.n	9000d658 <_vfiprintf_r+0x13c>
9000d62c:	9a07      	ldr	r2, [sp, #28]
9000d62e:	4654      	mov	r4, sl
9000d630:	2000      	movs	r0, #0
9000d632:	f04f 0c0a 	mov.w	ip, #10
9000d636:	4621      	mov	r1, r4
9000d638:	f811 3b01 	ldrb.w	r3, [r1], #1
9000d63c:	3b30      	subs	r3, #48	; 0x30
9000d63e:	2b09      	cmp	r3, #9
9000d640:	d94e      	bls.n	9000d6e0 <_vfiprintf_r+0x1c4>
9000d642:	b1b0      	cbz	r0, 9000d672 <_vfiprintf_r+0x156>
9000d644:	9207      	str	r2, [sp, #28]
9000d646:	e014      	b.n	9000d672 <_vfiprintf_r+0x156>
9000d648:	eba0 0308 	sub.w	r3, r0, r8
9000d64c:	fa09 f303 	lsl.w	r3, r9, r3
9000d650:	4313      	orrs	r3, r2
9000d652:	9304      	str	r3, [sp, #16]
9000d654:	46a2      	mov	sl, r4
9000d656:	e7d2      	b.n	9000d5fe <_vfiprintf_r+0xe2>
9000d658:	9b03      	ldr	r3, [sp, #12]
9000d65a:	1d19      	adds	r1, r3, #4
9000d65c:	681b      	ldr	r3, [r3, #0]
9000d65e:	9103      	str	r1, [sp, #12]
9000d660:	2b00      	cmp	r3, #0
9000d662:	bfbb      	ittet	lt
9000d664:	425b      	neglt	r3, r3
9000d666:	f042 0202 	orrlt.w	r2, r2, #2
9000d66a:	9307      	strge	r3, [sp, #28]
9000d66c:	9307      	strlt	r3, [sp, #28]
9000d66e:	bfb8      	it	lt
9000d670:	9204      	strlt	r2, [sp, #16]
9000d672:	7823      	ldrb	r3, [r4, #0]
9000d674:	2b2e      	cmp	r3, #46	; 0x2e
9000d676:	d10c      	bne.n	9000d692 <_vfiprintf_r+0x176>
9000d678:	7863      	ldrb	r3, [r4, #1]
9000d67a:	2b2a      	cmp	r3, #42	; 0x2a
9000d67c:	d135      	bne.n	9000d6ea <_vfiprintf_r+0x1ce>
9000d67e:	9b03      	ldr	r3, [sp, #12]
9000d680:	1d1a      	adds	r2, r3, #4
9000d682:	681b      	ldr	r3, [r3, #0]
9000d684:	9203      	str	r2, [sp, #12]
9000d686:	2b00      	cmp	r3, #0
9000d688:	bfb8      	it	lt
9000d68a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000d68e:	3402      	adds	r4, #2
9000d690:	9305      	str	r3, [sp, #20]
9000d692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 9000d778 <_vfiprintf_r+0x25c>
9000d696:	7821      	ldrb	r1, [r4, #0]
9000d698:	2203      	movs	r2, #3
9000d69a:	4650      	mov	r0, sl
9000d69c:	f7f2 fe20 	bl	900002e0 <memchr>
9000d6a0:	b140      	cbz	r0, 9000d6b4 <_vfiprintf_r+0x198>
9000d6a2:	2340      	movs	r3, #64	; 0x40
9000d6a4:	eba0 000a 	sub.w	r0, r0, sl
9000d6a8:	fa03 f000 	lsl.w	r0, r3, r0
9000d6ac:	9b04      	ldr	r3, [sp, #16]
9000d6ae:	4303      	orrs	r3, r0
9000d6b0:	3401      	adds	r4, #1
9000d6b2:	9304      	str	r3, [sp, #16]
9000d6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
9000d6b8:	482c      	ldr	r0, [pc, #176]	; (9000d76c <_vfiprintf_r+0x250>)
9000d6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000d6be:	2206      	movs	r2, #6
9000d6c0:	f7f2 fe0e 	bl	900002e0 <memchr>
9000d6c4:	2800      	cmp	r0, #0
9000d6c6:	d03f      	beq.n	9000d748 <_vfiprintf_r+0x22c>
9000d6c8:	4b29      	ldr	r3, [pc, #164]	; (9000d770 <_vfiprintf_r+0x254>)
9000d6ca:	bb1b      	cbnz	r3, 9000d714 <_vfiprintf_r+0x1f8>
9000d6cc:	9b03      	ldr	r3, [sp, #12]
9000d6ce:	3307      	adds	r3, #7
9000d6d0:	f023 0307 	bic.w	r3, r3, #7
9000d6d4:	3308      	adds	r3, #8
9000d6d6:	9303      	str	r3, [sp, #12]
9000d6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000d6da:	443b      	add	r3, r7
9000d6dc:	9309      	str	r3, [sp, #36]	; 0x24
9000d6de:	e767      	b.n	9000d5b0 <_vfiprintf_r+0x94>
9000d6e0:	fb0c 3202 	mla	r2, ip, r2, r3
9000d6e4:	460c      	mov	r4, r1
9000d6e6:	2001      	movs	r0, #1
9000d6e8:	e7a5      	b.n	9000d636 <_vfiprintf_r+0x11a>
9000d6ea:	2300      	movs	r3, #0
9000d6ec:	3401      	adds	r4, #1
9000d6ee:	9305      	str	r3, [sp, #20]
9000d6f0:	4619      	mov	r1, r3
9000d6f2:	f04f 0c0a 	mov.w	ip, #10
9000d6f6:	4620      	mov	r0, r4
9000d6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
9000d6fc:	3a30      	subs	r2, #48	; 0x30
9000d6fe:	2a09      	cmp	r2, #9
9000d700:	d903      	bls.n	9000d70a <_vfiprintf_r+0x1ee>
9000d702:	2b00      	cmp	r3, #0
9000d704:	d0c5      	beq.n	9000d692 <_vfiprintf_r+0x176>
9000d706:	9105      	str	r1, [sp, #20]
9000d708:	e7c3      	b.n	9000d692 <_vfiprintf_r+0x176>
9000d70a:	fb0c 2101 	mla	r1, ip, r1, r2
9000d70e:	4604      	mov	r4, r0
9000d710:	2301      	movs	r3, #1
9000d712:	e7f0      	b.n	9000d6f6 <_vfiprintf_r+0x1da>
9000d714:	ab03      	add	r3, sp, #12
9000d716:	9300      	str	r3, [sp, #0]
9000d718:	462a      	mov	r2, r5
9000d71a:	4b16      	ldr	r3, [pc, #88]	; (9000d774 <_vfiprintf_r+0x258>)
9000d71c:	a904      	add	r1, sp, #16
9000d71e:	4630      	mov	r0, r6
9000d720:	f3af 8000 	nop.w
9000d724:	4607      	mov	r7, r0
9000d726:	1c78      	adds	r0, r7, #1
9000d728:	d1d6      	bne.n	9000d6d8 <_vfiprintf_r+0x1bc>
9000d72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000d72c:	07d9      	lsls	r1, r3, #31
9000d72e:	d405      	bmi.n	9000d73c <_vfiprintf_r+0x220>
9000d730:	89ab      	ldrh	r3, [r5, #12]
9000d732:	059a      	lsls	r2, r3, #22
9000d734:	d402      	bmi.n	9000d73c <_vfiprintf_r+0x220>
9000d736:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000d738:	f000 fc35 	bl	9000dfa6 <__retarget_lock_release_recursive>
9000d73c:	89ab      	ldrh	r3, [r5, #12]
9000d73e:	065b      	lsls	r3, r3, #25
9000d740:	f53f af12 	bmi.w	9000d568 <_vfiprintf_r+0x4c>
9000d744:	9809      	ldr	r0, [sp, #36]	; 0x24
9000d746:	e711      	b.n	9000d56c <_vfiprintf_r+0x50>
9000d748:	ab03      	add	r3, sp, #12
9000d74a:	9300      	str	r3, [sp, #0]
9000d74c:	462a      	mov	r2, r5
9000d74e:	4b09      	ldr	r3, [pc, #36]	; (9000d774 <_vfiprintf_r+0x258>)
9000d750:	a904      	add	r1, sp, #16
9000d752:	4630      	mov	r0, r6
9000d754:	f000 f880 	bl	9000d858 <_printf_i>
9000d758:	e7e4      	b.n	9000d724 <_vfiprintf_r+0x208>
9000d75a:	bf00      	nop
9000d75c:	90010ba0 	.word	0x90010ba0
9000d760:	90010bc0 	.word	0x90010bc0
9000d764:	90010b80 	.word	0x90010b80
9000d768:	90010b4a 	.word	0x90010b4a
9000d76c:	90010b54 	.word	0x90010b54
9000d770:	00000000 	.word	0x00000000
9000d774:	9000d4f7 	.word	0x9000d4f7
9000d778:	90010b50 	.word	0x90010b50

9000d77c <_printf_common>:
9000d77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d780:	4616      	mov	r6, r2
9000d782:	4699      	mov	r9, r3
9000d784:	688a      	ldr	r2, [r1, #8]
9000d786:	690b      	ldr	r3, [r1, #16]
9000d788:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000d78c:	4293      	cmp	r3, r2
9000d78e:	bfb8      	it	lt
9000d790:	4613      	movlt	r3, r2
9000d792:	6033      	str	r3, [r6, #0]
9000d794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000d798:	4607      	mov	r7, r0
9000d79a:	460c      	mov	r4, r1
9000d79c:	b10a      	cbz	r2, 9000d7a2 <_printf_common+0x26>
9000d79e:	3301      	adds	r3, #1
9000d7a0:	6033      	str	r3, [r6, #0]
9000d7a2:	6823      	ldr	r3, [r4, #0]
9000d7a4:	0699      	lsls	r1, r3, #26
9000d7a6:	bf42      	ittt	mi
9000d7a8:	6833      	ldrmi	r3, [r6, #0]
9000d7aa:	3302      	addmi	r3, #2
9000d7ac:	6033      	strmi	r3, [r6, #0]
9000d7ae:	6825      	ldr	r5, [r4, #0]
9000d7b0:	f015 0506 	ands.w	r5, r5, #6
9000d7b4:	d106      	bne.n	9000d7c4 <_printf_common+0x48>
9000d7b6:	f104 0a19 	add.w	sl, r4, #25
9000d7ba:	68e3      	ldr	r3, [r4, #12]
9000d7bc:	6832      	ldr	r2, [r6, #0]
9000d7be:	1a9b      	subs	r3, r3, r2
9000d7c0:	42ab      	cmp	r3, r5
9000d7c2:	dc26      	bgt.n	9000d812 <_printf_common+0x96>
9000d7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000d7c8:	1e13      	subs	r3, r2, #0
9000d7ca:	6822      	ldr	r2, [r4, #0]
9000d7cc:	bf18      	it	ne
9000d7ce:	2301      	movne	r3, #1
9000d7d0:	0692      	lsls	r2, r2, #26
9000d7d2:	d42b      	bmi.n	9000d82c <_printf_common+0xb0>
9000d7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000d7d8:	4649      	mov	r1, r9
9000d7da:	4638      	mov	r0, r7
9000d7dc:	47c0      	blx	r8
9000d7de:	3001      	adds	r0, #1
9000d7e0:	d01e      	beq.n	9000d820 <_printf_common+0xa4>
9000d7e2:	6823      	ldr	r3, [r4, #0]
9000d7e4:	68e5      	ldr	r5, [r4, #12]
9000d7e6:	6832      	ldr	r2, [r6, #0]
9000d7e8:	f003 0306 	and.w	r3, r3, #6
9000d7ec:	2b04      	cmp	r3, #4
9000d7ee:	bf08      	it	eq
9000d7f0:	1aad      	subeq	r5, r5, r2
9000d7f2:	68a3      	ldr	r3, [r4, #8]
9000d7f4:	6922      	ldr	r2, [r4, #16]
9000d7f6:	bf0c      	ite	eq
9000d7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000d7fc:	2500      	movne	r5, #0
9000d7fe:	4293      	cmp	r3, r2
9000d800:	bfc4      	itt	gt
9000d802:	1a9b      	subgt	r3, r3, r2
9000d804:	18ed      	addgt	r5, r5, r3
9000d806:	2600      	movs	r6, #0
9000d808:	341a      	adds	r4, #26
9000d80a:	42b5      	cmp	r5, r6
9000d80c:	d11a      	bne.n	9000d844 <_printf_common+0xc8>
9000d80e:	2000      	movs	r0, #0
9000d810:	e008      	b.n	9000d824 <_printf_common+0xa8>
9000d812:	2301      	movs	r3, #1
9000d814:	4652      	mov	r2, sl
9000d816:	4649      	mov	r1, r9
9000d818:	4638      	mov	r0, r7
9000d81a:	47c0      	blx	r8
9000d81c:	3001      	adds	r0, #1
9000d81e:	d103      	bne.n	9000d828 <_printf_common+0xac>
9000d820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d828:	3501      	adds	r5, #1
9000d82a:	e7c6      	b.n	9000d7ba <_printf_common+0x3e>
9000d82c:	18e1      	adds	r1, r4, r3
9000d82e:	1c5a      	adds	r2, r3, #1
9000d830:	2030      	movs	r0, #48	; 0x30
9000d832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000d836:	4422      	add	r2, r4
9000d838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000d83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000d840:	3302      	adds	r3, #2
9000d842:	e7c7      	b.n	9000d7d4 <_printf_common+0x58>
9000d844:	2301      	movs	r3, #1
9000d846:	4622      	mov	r2, r4
9000d848:	4649      	mov	r1, r9
9000d84a:	4638      	mov	r0, r7
9000d84c:	47c0      	blx	r8
9000d84e:	3001      	adds	r0, #1
9000d850:	d0e6      	beq.n	9000d820 <_printf_common+0xa4>
9000d852:	3601      	adds	r6, #1
9000d854:	e7d9      	b.n	9000d80a <_printf_common+0x8e>
	...

9000d858 <_printf_i>:
9000d858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000d85c:	7e0f      	ldrb	r7, [r1, #24]
9000d85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000d860:	2f78      	cmp	r7, #120	; 0x78
9000d862:	4691      	mov	r9, r2
9000d864:	4680      	mov	r8, r0
9000d866:	460c      	mov	r4, r1
9000d868:	469a      	mov	sl, r3
9000d86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000d86e:	d807      	bhi.n	9000d880 <_printf_i+0x28>
9000d870:	2f62      	cmp	r7, #98	; 0x62
9000d872:	d80a      	bhi.n	9000d88a <_printf_i+0x32>
9000d874:	2f00      	cmp	r7, #0
9000d876:	f000 80d8 	beq.w	9000da2a <_printf_i+0x1d2>
9000d87a:	2f58      	cmp	r7, #88	; 0x58
9000d87c:	f000 80a3 	beq.w	9000d9c6 <_printf_i+0x16e>
9000d880:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000d884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000d888:	e03a      	b.n	9000d900 <_printf_i+0xa8>
9000d88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000d88e:	2b15      	cmp	r3, #21
9000d890:	d8f6      	bhi.n	9000d880 <_printf_i+0x28>
9000d892:	a101      	add	r1, pc, #4	; (adr r1, 9000d898 <_printf_i+0x40>)
9000d894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000d898:	9000d8f1 	.word	0x9000d8f1
9000d89c:	9000d905 	.word	0x9000d905
9000d8a0:	9000d881 	.word	0x9000d881
9000d8a4:	9000d881 	.word	0x9000d881
9000d8a8:	9000d881 	.word	0x9000d881
9000d8ac:	9000d881 	.word	0x9000d881
9000d8b0:	9000d905 	.word	0x9000d905
9000d8b4:	9000d881 	.word	0x9000d881
9000d8b8:	9000d881 	.word	0x9000d881
9000d8bc:	9000d881 	.word	0x9000d881
9000d8c0:	9000d881 	.word	0x9000d881
9000d8c4:	9000da11 	.word	0x9000da11
9000d8c8:	9000d935 	.word	0x9000d935
9000d8cc:	9000d9f3 	.word	0x9000d9f3
9000d8d0:	9000d881 	.word	0x9000d881
9000d8d4:	9000d881 	.word	0x9000d881
9000d8d8:	9000da33 	.word	0x9000da33
9000d8dc:	9000d881 	.word	0x9000d881
9000d8e0:	9000d935 	.word	0x9000d935
9000d8e4:	9000d881 	.word	0x9000d881
9000d8e8:	9000d881 	.word	0x9000d881
9000d8ec:	9000d9fb 	.word	0x9000d9fb
9000d8f0:	682b      	ldr	r3, [r5, #0]
9000d8f2:	1d1a      	adds	r2, r3, #4
9000d8f4:	681b      	ldr	r3, [r3, #0]
9000d8f6:	602a      	str	r2, [r5, #0]
9000d8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000d8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000d900:	2301      	movs	r3, #1
9000d902:	e0a3      	b.n	9000da4c <_printf_i+0x1f4>
9000d904:	6820      	ldr	r0, [r4, #0]
9000d906:	6829      	ldr	r1, [r5, #0]
9000d908:	0606      	lsls	r6, r0, #24
9000d90a:	f101 0304 	add.w	r3, r1, #4
9000d90e:	d50a      	bpl.n	9000d926 <_printf_i+0xce>
9000d910:	680e      	ldr	r6, [r1, #0]
9000d912:	602b      	str	r3, [r5, #0]
9000d914:	2e00      	cmp	r6, #0
9000d916:	da03      	bge.n	9000d920 <_printf_i+0xc8>
9000d918:	232d      	movs	r3, #45	; 0x2d
9000d91a:	4276      	negs	r6, r6
9000d91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000d920:	485e      	ldr	r0, [pc, #376]	; (9000da9c <_printf_i+0x244>)
9000d922:	230a      	movs	r3, #10
9000d924:	e019      	b.n	9000d95a <_printf_i+0x102>
9000d926:	680e      	ldr	r6, [r1, #0]
9000d928:	602b      	str	r3, [r5, #0]
9000d92a:	f010 0f40 	tst.w	r0, #64	; 0x40
9000d92e:	bf18      	it	ne
9000d930:	b236      	sxthne	r6, r6
9000d932:	e7ef      	b.n	9000d914 <_printf_i+0xbc>
9000d934:	682b      	ldr	r3, [r5, #0]
9000d936:	6820      	ldr	r0, [r4, #0]
9000d938:	1d19      	adds	r1, r3, #4
9000d93a:	6029      	str	r1, [r5, #0]
9000d93c:	0601      	lsls	r1, r0, #24
9000d93e:	d501      	bpl.n	9000d944 <_printf_i+0xec>
9000d940:	681e      	ldr	r6, [r3, #0]
9000d942:	e002      	b.n	9000d94a <_printf_i+0xf2>
9000d944:	0646      	lsls	r6, r0, #25
9000d946:	d5fb      	bpl.n	9000d940 <_printf_i+0xe8>
9000d948:	881e      	ldrh	r6, [r3, #0]
9000d94a:	4854      	ldr	r0, [pc, #336]	; (9000da9c <_printf_i+0x244>)
9000d94c:	2f6f      	cmp	r7, #111	; 0x6f
9000d94e:	bf0c      	ite	eq
9000d950:	2308      	moveq	r3, #8
9000d952:	230a      	movne	r3, #10
9000d954:	2100      	movs	r1, #0
9000d956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000d95a:	6865      	ldr	r5, [r4, #4]
9000d95c:	60a5      	str	r5, [r4, #8]
9000d95e:	2d00      	cmp	r5, #0
9000d960:	bfa2      	ittt	ge
9000d962:	6821      	ldrge	r1, [r4, #0]
9000d964:	f021 0104 	bicge.w	r1, r1, #4
9000d968:	6021      	strge	r1, [r4, #0]
9000d96a:	b90e      	cbnz	r6, 9000d970 <_printf_i+0x118>
9000d96c:	2d00      	cmp	r5, #0
9000d96e:	d04d      	beq.n	9000da0c <_printf_i+0x1b4>
9000d970:	4615      	mov	r5, r2
9000d972:	fbb6 f1f3 	udiv	r1, r6, r3
9000d976:	fb03 6711 	mls	r7, r3, r1, r6
9000d97a:	5dc7      	ldrb	r7, [r0, r7]
9000d97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000d980:	4637      	mov	r7, r6
9000d982:	42bb      	cmp	r3, r7
9000d984:	460e      	mov	r6, r1
9000d986:	d9f4      	bls.n	9000d972 <_printf_i+0x11a>
9000d988:	2b08      	cmp	r3, #8
9000d98a:	d10b      	bne.n	9000d9a4 <_printf_i+0x14c>
9000d98c:	6823      	ldr	r3, [r4, #0]
9000d98e:	07de      	lsls	r6, r3, #31
9000d990:	d508      	bpl.n	9000d9a4 <_printf_i+0x14c>
9000d992:	6923      	ldr	r3, [r4, #16]
9000d994:	6861      	ldr	r1, [r4, #4]
9000d996:	4299      	cmp	r1, r3
9000d998:	bfde      	ittt	le
9000d99a:	2330      	movle	r3, #48	; 0x30
9000d99c:	f805 3c01 	strble.w	r3, [r5, #-1]
9000d9a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
9000d9a4:	1b52      	subs	r2, r2, r5
9000d9a6:	6122      	str	r2, [r4, #16]
9000d9a8:	f8cd a000 	str.w	sl, [sp]
9000d9ac:	464b      	mov	r3, r9
9000d9ae:	aa03      	add	r2, sp, #12
9000d9b0:	4621      	mov	r1, r4
9000d9b2:	4640      	mov	r0, r8
9000d9b4:	f7ff fee2 	bl	9000d77c <_printf_common>
9000d9b8:	3001      	adds	r0, #1
9000d9ba:	d14c      	bne.n	9000da56 <_printf_i+0x1fe>
9000d9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000d9c0:	b004      	add	sp, #16
9000d9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000d9c6:	4835      	ldr	r0, [pc, #212]	; (9000da9c <_printf_i+0x244>)
9000d9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
9000d9cc:	6829      	ldr	r1, [r5, #0]
9000d9ce:	6823      	ldr	r3, [r4, #0]
9000d9d0:	f851 6b04 	ldr.w	r6, [r1], #4
9000d9d4:	6029      	str	r1, [r5, #0]
9000d9d6:	061d      	lsls	r5, r3, #24
9000d9d8:	d514      	bpl.n	9000da04 <_printf_i+0x1ac>
9000d9da:	07df      	lsls	r7, r3, #31
9000d9dc:	bf44      	itt	mi
9000d9de:	f043 0320 	orrmi.w	r3, r3, #32
9000d9e2:	6023      	strmi	r3, [r4, #0]
9000d9e4:	b91e      	cbnz	r6, 9000d9ee <_printf_i+0x196>
9000d9e6:	6823      	ldr	r3, [r4, #0]
9000d9e8:	f023 0320 	bic.w	r3, r3, #32
9000d9ec:	6023      	str	r3, [r4, #0]
9000d9ee:	2310      	movs	r3, #16
9000d9f0:	e7b0      	b.n	9000d954 <_printf_i+0xfc>
9000d9f2:	6823      	ldr	r3, [r4, #0]
9000d9f4:	f043 0320 	orr.w	r3, r3, #32
9000d9f8:	6023      	str	r3, [r4, #0]
9000d9fa:	2378      	movs	r3, #120	; 0x78
9000d9fc:	4828      	ldr	r0, [pc, #160]	; (9000daa0 <_printf_i+0x248>)
9000d9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000da02:	e7e3      	b.n	9000d9cc <_printf_i+0x174>
9000da04:	0659      	lsls	r1, r3, #25
9000da06:	bf48      	it	mi
9000da08:	b2b6      	uxthmi	r6, r6
9000da0a:	e7e6      	b.n	9000d9da <_printf_i+0x182>
9000da0c:	4615      	mov	r5, r2
9000da0e:	e7bb      	b.n	9000d988 <_printf_i+0x130>
9000da10:	682b      	ldr	r3, [r5, #0]
9000da12:	6826      	ldr	r6, [r4, #0]
9000da14:	6961      	ldr	r1, [r4, #20]
9000da16:	1d18      	adds	r0, r3, #4
9000da18:	6028      	str	r0, [r5, #0]
9000da1a:	0635      	lsls	r5, r6, #24
9000da1c:	681b      	ldr	r3, [r3, #0]
9000da1e:	d501      	bpl.n	9000da24 <_printf_i+0x1cc>
9000da20:	6019      	str	r1, [r3, #0]
9000da22:	e002      	b.n	9000da2a <_printf_i+0x1d2>
9000da24:	0670      	lsls	r0, r6, #25
9000da26:	d5fb      	bpl.n	9000da20 <_printf_i+0x1c8>
9000da28:	8019      	strh	r1, [r3, #0]
9000da2a:	2300      	movs	r3, #0
9000da2c:	6123      	str	r3, [r4, #16]
9000da2e:	4615      	mov	r5, r2
9000da30:	e7ba      	b.n	9000d9a8 <_printf_i+0x150>
9000da32:	682b      	ldr	r3, [r5, #0]
9000da34:	1d1a      	adds	r2, r3, #4
9000da36:	602a      	str	r2, [r5, #0]
9000da38:	681d      	ldr	r5, [r3, #0]
9000da3a:	6862      	ldr	r2, [r4, #4]
9000da3c:	2100      	movs	r1, #0
9000da3e:	4628      	mov	r0, r5
9000da40:	f7f2 fc4e 	bl	900002e0 <memchr>
9000da44:	b108      	cbz	r0, 9000da4a <_printf_i+0x1f2>
9000da46:	1b40      	subs	r0, r0, r5
9000da48:	6060      	str	r0, [r4, #4]
9000da4a:	6863      	ldr	r3, [r4, #4]
9000da4c:	6123      	str	r3, [r4, #16]
9000da4e:	2300      	movs	r3, #0
9000da50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000da54:	e7a8      	b.n	9000d9a8 <_printf_i+0x150>
9000da56:	6923      	ldr	r3, [r4, #16]
9000da58:	462a      	mov	r2, r5
9000da5a:	4649      	mov	r1, r9
9000da5c:	4640      	mov	r0, r8
9000da5e:	47d0      	blx	sl
9000da60:	3001      	adds	r0, #1
9000da62:	d0ab      	beq.n	9000d9bc <_printf_i+0x164>
9000da64:	6823      	ldr	r3, [r4, #0]
9000da66:	079b      	lsls	r3, r3, #30
9000da68:	d413      	bmi.n	9000da92 <_printf_i+0x23a>
9000da6a:	68e0      	ldr	r0, [r4, #12]
9000da6c:	9b03      	ldr	r3, [sp, #12]
9000da6e:	4298      	cmp	r0, r3
9000da70:	bfb8      	it	lt
9000da72:	4618      	movlt	r0, r3
9000da74:	e7a4      	b.n	9000d9c0 <_printf_i+0x168>
9000da76:	2301      	movs	r3, #1
9000da78:	4632      	mov	r2, r6
9000da7a:	4649      	mov	r1, r9
9000da7c:	4640      	mov	r0, r8
9000da7e:	47d0      	blx	sl
9000da80:	3001      	adds	r0, #1
9000da82:	d09b      	beq.n	9000d9bc <_printf_i+0x164>
9000da84:	3501      	adds	r5, #1
9000da86:	68e3      	ldr	r3, [r4, #12]
9000da88:	9903      	ldr	r1, [sp, #12]
9000da8a:	1a5b      	subs	r3, r3, r1
9000da8c:	42ab      	cmp	r3, r5
9000da8e:	dcf2      	bgt.n	9000da76 <_printf_i+0x21e>
9000da90:	e7eb      	b.n	9000da6a <_printf_i+0x212>
9000da92:	2500      	movs	r5, #0
9000da94:	f104 0619 	add.w	r6, r4, #25
9000da98:	e7f5      	b.n	9000da86 <_printf_i+0x22e>
9000da9a:	bf00      	nop
9000da9c:	90010b5b 	.word	0x90010b5b
9000daa0:	90010b6c 	.word	0x90010b6c

9000daa4 <__swbuf_r>:
9000daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000daa6:	460e      	mov	r6, r1
9000daa8:	4614      	mov	r4, r2
9000daaa:	4605      	mov	r5, r0
9000daac:	b118      	cbz	r0, 9000dab6 <__swbuf_r+0x12>
9000daae:	6983      	ldr	r3, [r0, #24]
9000dab0:	b90b      	cbnz	r3, 9000dab6 <__swbuf_r+0x12>
9000dab2:	f000 f9d9 	bl	9000de68 <__sinit>
9000dab6:	4b21      	ldr	r3, [pc, #132]	; (9000db3c <__swbuf_r+0x98>)
9000dab8:	429c      	cmp	r4, r3
9000daba:	d12b      	bne.n	9000db14 <__swbuf_r+0x70>
9000dabc:	686c      	ldr	r4, [r5, #4]
9000dabe:	69a3      	ldr	r3, [r4, #24]
9000dac0:	60a3      	str	r3, [r4, #8]
9000dac2:	89a3      	ldrh	r3, [r4, #12]
9000dac4:	071a      	lsls	r2, r3, #28
9000dac6:	d52f      	bpl.n	9000db28 <__swbuf_r+0x84>
9000dac8:	6923      	ldr	r3, [r4, #16]
9000daca:	b36b      	cbz	r3, 9000db28 <__swbuf_r+0x84>
9000dacc:	6923      	ldr	r3, [r4, #16]
9000dace:	6820      	ldr	r0, [r4, #0]
9000dad0:	1ac0      	subs	r0, r0, r3
9000dad2:	6963      	ldr	r3, [r4, #20]
9000dad4:	b2f6      	uxtb	r6, r6
9000dad6:	4283      	cmp	r3, r0
9000dad8:	4637      	mov	r7, r6
9000dada:	dc04      	bgt.n	9000dae6 <__swbuf_r+0x42>
9000dadc:	4621      	mov	r1, r4
9000dade:	4628      	mov	r0, r5
9000dae0:	f000 f92e 	bl	9000dd40 <_fflush_r>
9000dae4:	bb30      	cbnz	r0, 9000db34 <__swbuf_r+0x90>
9000dae6:	68a3      	ldr	r3, [r4, #8]
9000dae8:	3b01      	subs	r3, #1
9000daea:	60a3      	str	r3, [r4, #8]
9000daec:	6823      	ldr	r3, [r4, #0]
9000daee:	1c5a      	adds	r2, r3, #1
9000daf0:	6022      	str	r2, [r4, #0]
9000daf2:	701e      	strb	r6, [r3, #0]
9000daf4:	6963      	ldr	r3, [r4, #20]
9000daf6:	3001      	adds	r0, #1
9000daf8:	4283      	cmp	r3, r0
9000dafa:	d004      	beq.n	9000db06 <__swbuf_r+0x62>
9000dafc:	89a3      	ldrh	r3, [r4, #12]
9000dafe:	07db      	lsls	r3, r3, #31
9000db00:	d506      	bpl.n	9000db10 <__swbuf_r+0x6c>
9000db02:	2e0a      	cmp	r6, #10
9000db04:	d104      	bne.n	9000db10 <__swbuf_r+0x6c>
9000db06:	4621      	mov	r1, r4
9000db08:	4628      	mov	r0, r5
9000db0a:	f000 f919 	bl	9000dd40 <_fflush_r>
9000db0e:	b988      	cbnz	r0, 9000db34 <__swbuf_r+0x90>
9000db10:	4638      	mov	r0, r7
9000db12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000db14:	4b0a      	ldr	r3, [pc, #40]	; (9000db40 <__swbuf_r+0x9c>)
9000db16:	429c      	cmp	r4, r3
9000db18:	d101      	bne.n	9000db1e <__swbuf_r+0x7a>
9000db1a:	68ac      	ldr	r4, [r5, #8]
9000db1c:	e7cf      	b.n	9000dabe <__swbuf_r+0x1a>
9000db1e:	4b09      	ldr	r3, [pc, #36]	; (9000db44 <__swbuf_r+0xa0>)
9000db20:	429c      	cmp	r4, r3
9000db22:	bf08      	it	eq
9000db24:	68ec      	ldreq	r4, [r5, #12]
9000db26:	e7ca      	b.n	9000dabe <__swbuf_r+0x1a>
9000db28:	4621      	mov	r1, r4
9000db2a:	4628      	mov	r0, r5
9000db2c:	f000 f80c 	bl	9000db48 <__swsetup_r>
9000db30:	2800      	cmp	r0, #0
9000db32:	d0cb      	beq.n	9000dacc <__swbuf_r+0x28>
9000db34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
9000db38:	e7ea      	b.n	9000db10 <__swbuf_r+0x6c>
9000db3a:	bf00      	nop
9000db3c:	90010ba0 	.word	0x90010ba0
9000db40:	90010bc0 	.word	0x90010bc0
9000db44:	90010b80 	.word	0x90010b80

9000db48 <__swsetup_r>:
9000db48:	4b32      	ldr	r3, [pc, #200]	; (9000dc14 <__swsetup_r+0xcc>)
9000db4a:	b570      	push	{r4, r5, r6, lr}
9000db4c:	681d      	ldr	r5, [r3, #0]
9000db4e:	4606      	mov	r6, r0
9000db50:	460c      	mov	r4, r1
9000db52:	b125      	cbz	r5, 9000db5e <__swsetup_r+0x16>
9000db54:	69ab      	ldr	r3, [r5, #24]
9000db56:	b913      	cbnz	r3, 9000db5e <__swsetup_r+0x16>
9000db58:	4628      	mov	r0, r5
9000db5a:	f000 f985 	bl	9000de68 <__sinit>
9000db5e:	4b2e      	ldr	r3, [pc, #184]	; (9000dc18 <__swsetup_r+0xd0>)
9000db60:	429c      	cmp	r4, r3
9000db62:	d10f      	bne.n	9000db84 <__swsetup_r+0x3c>
9000db64:	686c      	ldr	r4, [r5, #4]
9000db66:	89a3      	ldrh	r3, [r4, #12]
9000db68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000db6c:	0719      	lsls	r1, r3, #28
9000db6e:	d42c      	bmi.n	9000dbca <__swsetup_r+0x82>
9000db70:	06dd      	lsls	r5, r3, #27
9000db72:	d411      	bmi.n	9000db98 <__swsetup_r+0x50>
9000db74:	2309      	movs	r3, #9
9000db76:	6033      	str	r3, [r6, #0]
9000db78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000db7c:	81a3      	strh	r3, [r4, #12]
9000db7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000db82:	e03e      	b.n	9000dc02 <__swsetup_r+0xba>
9000db84:	4b25      	ldr	r3, [pc, #148]	; (9000dc1c <__swsetup_r+0xd4>)
9000db86:	429c      	cmp	r4, r3
9000db88:	d101      	bne.n	9000db8e <__swsetup_r+0x46>
9000db8a:	68ac      	ldr	r4, [r5, #8]
9000db8c:	e7eb      	b.n	9000db66 <__swsetup_r+0x1e>
9000db8e:	4b24      	ldr	r3, [pc, #144]	; (9000dc20 <__swsetup_r+0xd8>)
9000db90:	429c      	cmp	r4, r3
9000db92:	bf08      	it	eq
9000db94:	68ec      	ldreq	r4, [r5, #12]
9000db96:	e7e6      	b.n	9000db66 <__swsetup_r+0x1e>
9000db98:	0758      	lsls	r0, r3, #29
9000db9a:	d512      	bpl.n	9000dbc2 <__swsetup_r+0x7a>
9000db9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000db9e:	b141      	cbz	r1, 9000dbb2 <__swsetup_r+0x6a>
9000dba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000dba4:	4299      	cmp	r1, r3
9000dba6:	d002      	beq.n	9000dbae <__swsetup_r+0x66>
9000dba8:	4630      	mov	r0, r6
9000dbaa:	f7ff f94d 	bl	9000ce48 <_free_r>
9000dbae:	2300      	movs	r3, #0
9000dbb0:	6363      	str	r3, [r4, #52]	; 0x34
9000dbb2:	89a3      	ldrh	r3, [r4, #12]
9000dbb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000dbb8:	81a3      	strh	r3, [r4, #12]
9000dbba:	2300      	movs	r3, #0
9000dbbc:	6063      	str	r3, [r4, #4]
9000dbbe:	6923      	ldr	r3, [r4, #16]
9000dbc0:	6023      	str	r3, [r4, #0]
9000dbc2:	89a3      	ldrh	r3, [r4, #12]
9000dbc4:	f043 0308 	orr.w	r3, r3, #8
9000dbc8:	81a3      	strh	r3, [r4, #12]
9000dbca:	6923      	ldr	r3, [r4, #16]
9000dbcc:	b94b      	cbnz	r3, 9000dbe2 <__swsetup_r+0x9a>
9000dbce:	89a3      	ldrh	r3, [r4, #12]
9000dbd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000dbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000dbd8:	d003      	beq.n	9000dbe2 <__swsetup_r+0x9a>
9000dbda:	4621      	mov	r1, r4
9000dbdc:	4630      	mov	r0, r6
9000dbde:	f000 fa09 	bl	9000dff4 <__smakebuf_r>
9000dbe2:	89a0      	ldrh	r0, [r4, #12]
9000dbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000dbe8:	f010 0301 	ands.w	r3, r0, #1
9000dbec:	d00a      	beq.n	9000dc04 <__swsetup_r+0xbc>
9000dbee:	2300      	movs	r3, #0
9000dbf0:	60a3      	str	r3, [r4, #8]
9000dbf2:	6963      	ldr	r3, [r4, #20]
9000dbf4:	425b      	negs	r3, r3
9000dbf6:	61a3      	str	r3, [r4, #24]
9000dbf8:	6923      	ldr	r3, [r4, #16]
9000dbfa:	b943      	cbnz	r3, 9000dc0e <__swsetup_r+0xc6>
9000dbfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000dc00:	d1ba      	bne.n	9000db78 <__swsetup_r+0x30>
9000dc02:	bd70      	pop	{r4, r5, r6, pc}
9000dc04:	0781      	lsls	r1, r0, #30
9000dc06:	bf58      	it	pl
9000dc08:	6963      	ldrpl	r3, [r4, #20]
9000dc0a:	60a3      	str	r3, [r4, #8]
9000dc0c:	e7f4      	b.n	9000dbf8 <__swsetup_r+0xb0>
9000dc0e:	2000      	movs	r0, #0
9000dc10:	e7f7      	b.n	9000dc02 <__swsetup_r+0xba>
9000dc12:	bf00      	nop
9000dc14:	20000060 	.word	0x20000060
9000dc18:	90010ba0 	.word	0x90010ba0
9000dc1c:	90010bc0 	.word	0x90010bc0
9000dc20:	90010b80 	.word	0x90010b80

9000dc24 <abort>:
9000dc24:	b508      	push	{r3, lr}
9000dc26:	2006      	movs	r0, #6
9000dc28:	f000 fa96 	bl	9000e158 <raise>
9000dc2c:	2001      	movs	r0, #1
9000dc2e:	f7f2 fe33 	bl	90000898 <_exit>
	...

9000dc34 <__sflush_r>:
9000dc34:	898a      	ldrh	r2, [r1, #12]
9000dc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000dc3a:	4605      	mov	r5, r0
9000dc3c:	0710      	lsls	r0, r2, #28
9000dc3e:	460c      	mov	r4, r1
9000dc40:	d458      	bmi.n	9000dcf4 <__sflush_r+0xc0>
9000dc42:	684b      	ldr	r3, [r1, #4]
9000dc44:	2b00      	cmp	r3, #0
9000dc46:	dc05      	bgt.n	9000dc54 <__sflush_r+0x20>
9000dc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000dc4a:	2b00      	cmp	r3, #0
9000dc4c:	dc02      	bgt.n	9000dc54 <__sflush_r+0x20>
9000dc4e:	2000      	movs	r0, #0
9000dc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000dc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000dc56:	2e00      	cmp	r6, #0
9000dc58:	d0f9      	beq.n	9000dc4e <__sflush_r+0x1a>
9000dc5a:	2300      	movs	r3, #0
9000dc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000dc60:	682f      	ldr	r7, [r5, #0]
9000dc62:	602b      	str	r3, [r5, #0]
9000dc64:	d032      	beq.n	9000dccc <__sflush_r+0x98>
9000dc66:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000dc68:	89a3      	ldrh	r3, [r4, #12]
9000dc6a:	075a      	lsls	r2, r3, #29
9000dc6c:	d505      	bpl.n	9000dc7a <__sflush_r+0x46>
9000dc6e:	6863      	ldr	r3, [r4, #4]
9000dc70:	1ac0      	subs	r0, r0, r3
9000dc72:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000dc74:	b10b      	cbz	r3, 9000dc7a <__sflush_r+0x46>
9000dc76:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000dc78:	1ac0      	subs	r0, r0, r3
9000dc7a:	2300      	movs	r3, #0
9000dc7c:	4602      	mov	r2, r0
9000dc7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000dc80:	6a21      	ldr	r1, [r4, #32]
9000dc82:	4628      	mov	r0, r5
9000dc84:	47b0      	blx	r6
9000dc86:	1c43      	adds	r3, r0, #1
9000dc88:	89a3      	ldrh	r3, [r4, #12]
9000dc8a:	d106      	bne.n	9000dc9a <__sflush_r+0x66>
9000dc8c:	6829      	ldr	r1, [r5, #0]
9000dc8e:	291d      	cmp	r1, #29
9000dc90:	d82c      	bhi.n	9000dcec <__sflush_r+0xb8>
9000dc92:	4a2a      	ldr	r2, [pc, #168]	; (9000dd3c <__sflush_r+0x108>)
9000dc94:	40ca      	lsrs	r2, r1
9000dc96:	07d6      	lsls	r6, r2, #31
9000dc98:	d528      	bpl.n	9000dcec <__sflush_r+0xb8>
9000dc9a:	2200      	movs	r2, #0
9000dc9c:	6062      	str	r2, [r4, #4]
9000dc9e:	04d9      	lsls	r1, r3, #19
9000dca0:	6922      	ldr	r2, [r4, #16]
9000dca2:	6022      	str	r2, [r4, #0]
9000dca4:	d504      	bpl.n	9000dcb0 <__sflush_r+0x7c>
9000dca6:	1c42      	adds	r2, r0, #1
9000dca8:	d101      	bne.n	9000dcae <__sflush_r+0x7a>
9000dcaa:	682b      	ldr	r3, [r5, #0]
9000dcac:	b903      	cbnz	r3, 9000dcb0 <__sflush_r+0x7c>
9000dcae:	6560      	str	r0, [r4, #84]	; 0x54
9000dcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000dcb2:	602f      	str	r7, [r5, #0]
9000dcb4:	2900      	cmp	r1, #0
9000dcb6:	d0ca      	beq.n	9000dc4e <__sflush_r+0x1a>
9000dcb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000dcbc:	4299      	cmp	r1, r3
9000dcbe:	d002      	beq.n	9000dcc6 <__sflush_r+0x92>
9000dcc0:	4628      	mov	r0, r5
9000dcc2:	f7ff f8c1 	bl	9000ce48 <_free_r>
9000dcc6:	2000      	movs	r0, #0
9000dcc8:	6360      	str	r0, [r4, #52]	; 0x34
9000dcca:	e7c1      	b.n	9000dc50 <__sflush_r+0x1c>
9000dccc:	6a21      	ldr	r1, [r4, #32]
9000dcce:	2301      	movs	r3, #1
9000dcd0:	4628      	mov	r0, r5
9000dcd2:	47b0      	blx	r6
9000dcd4:	1c41      	adds	r1, r0, #1
9000dcd6:	d1c7      	bne.n	9000dc68 <__sflush_r+0x34>
9000dcd8:	682b      	ldr	r3, [r5, #0]
9000dcda:	2b00      	cmp	r3, #0
9000dcdc:	d0c4      	beq.n	9000dc68 <__sflush_r+0x34>
9000dcde:	2b1d      	cmp	r3, #29
9000dce0:	d001      	beq.n	9000dce6 <__sflush_r+0xb2>
9000dce2:	2b16      	cmp	r3, #22
9000dce4:	d101      	bne.n	9000dcea <__sflush_r+0xb6>
9000dce6:	602f      	str	r7, [r5, #0]
9000dce8:	e7b1      	b.n	9000dc4e <__sflush_r+0x1a>
9000dcea:	89a3      	ldrh	r3, [r4, #12]
9000dcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000dcf0:	81a3      	strh	r3, [r4, #12]
9000dcf2:	e7ad      	b.n	9000dc50 <__sflush_r+0x1c>
9000dcf4:	690f      	ldr	r7, [r1, #16]
9000dcf6:	2f00      	cmp	r7, #0
9000dcf8:	d0a9      	beq.n	9000dc4e <__sflush_r+0x1a>
9000dcfa:	0793      	lsls	r3, r2, #30
9000dcfc:	680e      	ldr	r6, [r1, #0]
9000dcfe:	bf08      	it	eq
9000dd00:	694b      	ldreq	r3, [r1, #20]
9000dd02:	600f      	str	r7, [r1, #0]
9000dd04:	bf18      	it	ne
9000dd06:	2300      	movne	r3, #0
9000dd08:	eba6 0807 	sub.w	r8, r6, r7
9000dd0c:	608b      	str	r3, [r1, #8]
9000dd0e:	f1b8 0f00 	cmp.w	r8, #0
9000dd12:	dd9c      	ble.n	9000dc4e <__sflush_r+0x1a>
9000dd14:	6a21      	ldr	r1, [r4, #32]
9000dd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000dd18:	4643      	mov	r3, r8
9000dd1a:	463a      	mov	r2, r7
9000dd1c:	4628      	mov	r0, r5
9000dd1e:	47b0      	blx	r6
9000dd20:	2800      	cmp	r0, #0
9000dd22:	dc06      	bgt.n	9000dd32 <__sflush_r+0xfe>
9000dd24:	89a3      	ldrh	r3, [r4, #12]
9000dd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000dd2a:	81a3      	strh	r3, [r4, #12]
9000dd2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000dd30:	e78e      	b.n	9000dc50 <__sflush_r+0x1c>
9000dd32:	4407      	add	r7, r0
9000dd34:	eba8 0800 	sub.w	r8, r8, r0
9000dd38:	e7e9      	b.n	9000dd0e <__sflush_r+0xda>
9000dd3a:	bf00      	nop
9000dd3c:	20400001 	.word	0x20400001

9000dd40 <_fflush_r>:
9000dd40:	b538      	push	{r3, r4, r5, lr}
9000dd42:	690b      	ldr	r3, [r1, #16]
9000dd44:	4605      	mov	r5, r0
9000dd46:	460c      	mov	r4, r1
9000dd48:	b913      	cbnz	r3, 9000dd50 <_fflush_r+0x10>
9000dd4a:	2500      	movs	r5, #0
9000dd4c:	4628      	mov	r0, r5
9000dd4e:	bd38      	pop	{r3, r4, r5, pc}
9000dd50:	b118      	cbz	r0, 9000dd5a <_fflush_r+0x1a>
9000dd52:	6983      	ldr	r3, [r0, #24]
9000dd54:	b90b      	cbnz	r3, 9000dd5a <_fflush_r+0x1a>
9000dd56:	f000 f887 	bl	9000de68 <__sinit>
9000dd5a:	4b14      	ldr	r3, [pc, #80]	; (9000ddac <_fflush_r+0x6c>)
9000dd5c:	429c      	cmp	r4, r3
9000dd5e:	d11b      	bne.n	9000dd98 <_fflush_r+0x58>
9000dd60:	686c      	ldr	r4, [r5, #4]
9000dd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000dd66:	2b00      	cmp	r3, #0
9000dd68:	d0ef      	beq.n	9000dd4a <_fflush_r+0xa>
9000dd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000dd6c:	07d0      	lsls	r0, r2, #31
9000dd6e:	d404      	bmi.n	9000dd7a <_fflush_r+0x3a>
9000dd70:	0599      	lsls	r1, r3, #22
9000dd72:	d402      	bmi.n	9000dd7a <_fflush_r+0x3a>
9000dd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000dd76:	f000 f915 	bl	9000dfa4 <__retarget_lock_acquire_recursive>
9000dd7a:	4628      	mov	r0, r5
9000dd7c:	4621      	mov	r1, r4
9000dd7e:	f7ff ff59 	bl	9000dc34 <__sflush_r>
9000dd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000dd84:	07da      	lsls	r2, r3, #31
9000dd86:	4605      	mov	r5, r0
9000dd88:	d4e0      	bmi.n	9000dd4c <_fflush_r+0xc>
9000dd8a:	89a3      	ldrh	r3, [r4, #12]
9000dd8c:	059b      	lsls	r3, r3, #22
9000dd8e:	d4dd      	bmi.n	9000dd4c <_fflush_r+0xc>
9000dd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000dd92:	f000 f908 	bl	9000dfa6 <__retarget_lock_release_recursive>
9000dd96:	e7d9      	b.n	9000dd4c <_fflush_r+0xc>
9000dd98:	4b05      	ldr	r3, [pc, #20]	; (9000ddb0 <_fflush_r+0x70>)
9000dd9a:	429c      	cmp	r4, r3
9000dd9c:	d101      	bne.n	9000dda2 <_fflush_r+0x62>
9000dd9e:	68ac      	ldr	r4, [r5, #8]
9000dda0:	e7df      	b.n	9000dd62 <_fflush_r+0x22>
9000dda2:	4b04      	ldr	r3, [pc, #16]	; (9000ddb4 <_fflush_r+0x74>)
9000dda4:	429c      	cmp	r4, r3
9000dda6:	bf08      	it	eq
9000dda8:	68ec      	ldreq	r4, [r5, #12]
9000ddaa:	e7da      	b.n	9000dd62 <_fflush_r+0x22>
9000ddac:	90010ba0 	.word	0x90010ba0
9000ddb0:	90010bc0 	.word	0x90010bc0
9000ddb4:	90010b80 	.word	0x90010b80

9000ddb8 <std>:
9000ddb8:	2300      	movs	r3, #0
9000ddba:	b510      	push	{r4, lr}
9000ddbc:	4604      	mov	r4, r0
9000ddbe:	e9c0 3300 	strd	r3, r3, [r0]
9000ddc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000ddc6:	6083      	str	r3, [r0, #8]
9000ddc8:	8181      	strh	r1, [r0, #12]
9000ddca:	6643      	str	r3, [r0, #100]	; 0x64
9000ddcc:	81c2      	strh	r2, [r0, #14]
9000ddce:	6183      	str	r3, [r0, #24]
9000ddd0:	4619      	mov	r1, r3
9000ddd2:	2208      	movs	r2, #8
9000ddd4:	305c      	adds	r0, #92	; 0x5c
9000ddd6:	f7ff f82f 	bl	9000ce38 <memset>
9000ddda:	4b05      	ldr	r3, [pc, #20]	; (9000ddf0 <std+0x38>)
9000dddc:	6263      	str	r3, [r4, #36]	; 0x24
9000ddde:	4b05      	ldr	r3, [pc, #20]	; (9000ddf4 <std+0x3c>)
9000dde0:	62a3      	str	r3, [r4, #40]	; 0x28
9000dde2:	4b05      	ldr	r3, [pc, #20]	; (9000ddf8 <std+0x40>)
9000dde4:	62e3      	str	r3, [r4, #44]	; 0x2c
9000dde6:	4b05      	ldr	r3, [pc, #20]	; (9000ddfc <std+0x44>)
9000dde8:	6224      	str	r4, [r4, #32]
9000ddea:	6323      	str	r3, [r4, #48]	; 0x30
9000ddec:	bd10      	pop	{r4, pc}
9000ddee:	bf00      	nop
9000ddf0:	9000e191 	.word	0x9000e191
9000ddf4:	9000e1b3 	.word	0x9000e1b3
9000ddf8:	9000e1eb 	.word	0x9000e1eb
9000ddfc:	9000e20f 	.word	0x9000e20f

9000de00 <_cleanup_r>:
9000de00:	4901      	ldr	r1, [pc, #4]	; (9000de08 <_cleanup_r+0x8>)
9000de02:	f000 b8af 	b.w	9000df64 <_fwalk_reent>
9000de06:	bf00      	nop
9000de08:	9000dd41 	.word	0x9000dd41

9000de0c <__sfmoreglue>:
9000de0c:	b570      	push	{r4, r5, r6, lr}
9000de0e:	2268      	movs	r2, #104	; 0x68
9000de10:	1e4d      	subs	r5, r1, #1
9000de12:	4355      	muls	r5, r2
9000de14:	460e      	mov	r6, r1
9000de16:	f105 0174 	add.w	r1, r5, #116	; 0x74
9000de1a:	f7ff f881 	bl	9000cf20 <_malloc_r>
9000de1e:	4604      	mov	r4, r0
9000de20:	b140      	cbz	r0, 9000de34 <__sfmoreglue+0x28>
9000de22:	2100      	movs	r1, #0
9000de24:	e9c0 1600 	strd	r1, r6, [r0]
9000de28:	300c      	adds	r0, #12
9000de2a:	60a0      	str	r0, [r4, #8]
9000de2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
9000de30:	f7ff f802 	bl	9000ce38 <memset>
9000de34:	4620      	mov	r0, r4
9000de36:	bd70      	pop	{r4, r5, r6, pc}

9000de38 <__sfp_lock_acquire>:
9000de38:	4801      	ldr	r0, [pc, #4]	; (9000de40 <__sfp_lock_acquire+0x8>)
9000de3a:	f000 b8b3 	b.w	9000dfa4 <__retarget_lock_acquire_recursive>
9000de3e:	bf00      	nop
9000de40:	200050dd 	.word	0x200050dd

9000de44 <__sfp_lock_release>:
9000de44:	4801      	ldr	r0, [pc, #4]	; (9000de4c <__sfp_lock_release+0x8>)
9000de46:	f000 b8ae 	b.w	9000dfa6 <__retarget_lock_release_recursive>
9000de4a:	bf00      	nop
9000de4c:	200050dd 	.word	0x200050dd

9000de50 <__sinit_lock_acquire>:
9000de50:	4801      	ldr	r0, [pc, #4]	; (9000de58 <__sinit_lock_acquire+0x8>)
9000de52:	f000 b8a7 	b.w	9000dfa4 <__retarget_lock_acquire_recursive>
9000de56:	bf00      	nop
9000de58:	200050de 	.word	0x200050de

9000de5c <__sinit_lock_release>:
9000de5c:	4801      	ldr	r0, [pc, #4]	; (9000de64 <__sinit_lock_release+0x8>)
9000de5e:	f000 b8a2 	b.w	9000dfa6 <__retarget_lock_release_recursive>
9000de62:	bf00      	nop
9000de64:	200050de 	.word	0x200050de

9000de68 <__sinit>:
9000de68:	b510      	push	{r4, lr}
9000de6a:	4604      	mov	r4, r0
9000de6c:	f7ff fff0 	bl	9000de50 <__sinit_lock_acquire>
9000de70:	69a3      	ldr	r3, [r4, #24]
9000de72:	b11b      	cbz	r3, 9000de7c <__sinit+0x14>
9000de74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000de78:	f7ff bff0 	b.w	9000de5c <__sinit_lock_release>
9000de7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
9000de80:	6523      	str	r3, [r4, #80]	; 0x50
9000de82:	4b13      	ldr	r3, [pc, #76]	; (9000ded0 <__sinit+0x68>)
9000de84:	4a13      	ldr	r2, [pc, #76]	; (9000ded4 <__sinit+0x6c>)
9000de86:	681b      	ldr	r3, [r3, #0]
9000de88:	62a2      	str	r2, [r4, #40]	; 0x28
9000de8a:	42a3      	cmp	r3, r4
9000de8c:	bf04      	itt	eq
9000de8e:	2301      	moveq	r3, #1
9000de90:	61a3      	streq	r3, [r4, #24]
9000de92:	4620      	mov	r0, r4
9000de94:	f000 f820 	bl	9000ded8 <__sfp>
9000de98:	6060      	str	r0, [r4, #4]
9000de9a:	4620      	mov	r0, r4
9000de9c:	f000 f81c 	bl	9000ded8 <__sfp>
9000dea0:	60a0      	str	r0, [r4, #8]
9000dea2:	4620      	mov	r0, r4
9000dea4:	f000 f818 	bl	9000ded8 <__sfp>
9000dea8:	2200      	movs	r2, #0
9000deaa:	60e0      	str	r0, [r4, #12]
9000deac:	2104      	movs	r1, #4
9000deae:	6860      	ldr	r0, [r4, #4]
9000deb0:	f7ff ff82 	bl	9000ddb8 <std>
9000deb4:	68a0      	ldr	r0, [r4, #8]
9000deb6:	2201      	movs	r2, #1
9000deb8:	2109      	movs	r1, #9
9000deba:	f7ff ff7d 	bl	9000ddb8 <std>
9000debe:	68e0      	ldr	r0, [r4, #12]
9000dec0:	2202      	movs	r2, #2
9000dec2:	2112      	movs	r1, #18
9000dec4:	f7ff ff78 	bl	9000ddb8 <std>
9000dec8:	2301      	movs	r3, #1
9000deca:	61a3      	str	r3, [r4, #24]
9000decc:	e7d2      	b.n	9000de74 <__sinit+0xc>
9000dece:	bf00      	nop
9000ded0:	90010a98 	.word	0x90010a98
9000ded4:	9000de01 	.word	0x9000de01

9000ded8 <__sfp>:
9000ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000deda:	4607      	mov	r7, r0
9000dedc:	f7ff ffac 	bl	9000de38 <__sfp_lock_acquire>
9000dee0:	4b1e      	ldr	r3, [pc, #120]	; (9000df5c <__sfp+0x84>)
9000dee2:	681e      	ldr	r6, [r3, #0]
9000dee4:	69b3      	ldr	r3, [r6, #24]
9000dee6:	b913      	cbnz	r3, 9000deee <__sfp+0x16>
9000dee8:	4630      	mov	r0, r6
9000deea:	f7ff ffbd 	bl	9000de68 <__sinit>
9000deee:	3648      	adds	r6, #72	; 0x48
9000def0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
9000def4:	3b01      	subs	r3, #1
9000def6:	d503      	bpl.n	9000df00 <__sfp+0x28>
9000def8:	6833      	ldr	r3, [r6, #0]
9000defa:	b30b      	cbz	r3, 9000df40 <__sfp+0x68>
9000defc:	6836      	ldr	r6, [r6, #0]
9000defe:	e7f7      	b.n	9000def0 <__sfp+0x18>
9000df00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
9000df04:	b9d5      	cbnz	r5, 9000df3c <__sfp+0x64>
9000df06:	4b16      	ldr	r3, [pc, #88]	; (9000df60 <__sfp+0x88>)
9000df08:	60e3      	str	r3, [r4, #12]
9000df0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000df0e:	6665      	str	r5, [r4, #100]	; 0x64
9000df10:	f000 f847 	bl	9000dfa2 <__retarget_lock_init_recursive>
9000df14:	f7ff ff96 	bl	9000de44 <__sfp_lock_release>
9000df18:	e9c4 5501 	strd	r5, r5, [r4, #4]
9000df1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
9000df20:	6025      	str	r5, [r4, #0]
9000df22:	61a5      	str	r5, [r4, #24]
9000df24:	2208      	movs	r2, #8
9000df26:	4629      	mov	r1, r5
9000df28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
9000df2c:	f7fe ff84 	bl	9000ce38 <memset>
9000df30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
9000df34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
9000df38:	4620      	mov	r0, r4
9000df3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000df3c:	3468      	adds	r4, #104	; 0x68
9000df3e:	e7d9      	b.n	9000def4 <__sfp+0x1c>
9000df40:	2104      	movs	r1, #4
9000df42:	4638      	mov	r0, r7
9000df44:	f7ff ff62 	bl	9000de0c <__sfmoreglue>
9000df48:	4604      	mov	r4, r0
9000df4a:	6030      	str	r0, [r6, #0]
9000df4c:	2800      	cmp	r0, #0
9000df4e:	d1d5      	bne.n	9000defc <__sfp+0x24>
9000df50:	f7ff ff78 	bl	9000de44 <__sfp_lock_release>
9000df54:	230c      	movs	r3, #12
9000df56:	603b      	str	r3, [r7, #0]
9000df58:	e7ee      	b.n	9000df38 <__sfp+0x60>
9000df5a:	bf00      	nop
9000df5c:	90010a98 	.word	0x90010a98
9000df60:	ffff0001 	.word	0xffff0001

9000df64 <_fwalk_reent>:
9000df64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000df68:	4606      	mov	r6, r0
9000df6a:	4688      	mov	r8, r1
9000df6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
9000df70:	2700      	movs	r7, #0
9000df72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000df76:	f1b9 0901 	subs.w	r9, r9, #1
9000df7a:	d505      	bpl.n	9000df88 <_fwalk_reent+0x24>
9000df7c:	6824      	ldr	r4, [r4, #0]
9000df7e:	2c00      	cmp	r4, #0
9000df80:	d1f7      	bne.n	9000df72 <_fwalk_reent+0xe>
9000df82:	4638      	mov	r0, r7
9000df84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000df88:	89ab      	ldrh	r3, [r5, #12]
9000df8a:	2b01      	cmp	r3, #1
9000df8c:	d907      	bls.n	9000df9e <_fwalk_reent+0x3a>
9000df8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000df92:	3301      	adds	r3, #1
9000df94:	d003      	beq.n	9000df9e <_fwalk_reent+0x3a>
9000df96:	4629      	mov	r1, r5
9000df98:	4630      	mov	r0, r6
9000df9a:	47c0      	blx	r8
9000df9c:	4307      	orrs	r7, r0
9000df9e:	3568      	adds	r5, #104	; 0x68
9000dfa0:	e7e9      	b.n	9000df76 <_fwalk_reent+0x12>

9000dfa2 <__retarget_lock_init_recursive>:
9000dfa2:	4770      	bx	lr

9000dfa4 <__retarget_lock_acquire_recursive>:
9000dfa4:	4770      	bx	lr

9000dfa6 <__retarget_lock_release_recursive>:
9000dfa6:	4770      	bx	lr

9000dfa8 <__swhatbuf_r>:
9000dfa8:	b570      	push	{r4, r5, r6, lr}
9000dfaa:	460e      	mov	r6, r1
9000dfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000dfb0:	2900      	cmp	r1, #0
9000dfb2:	b096      	sub	sp, #88	; 0x58
9000dfb4:	4614      	mov	r4, r2
9000dfb6:	461d      	mov	r5, r3
9000dfb8:	da08      	bge.n	9000dfcc <__swhatbuf_r+0x24>
9000dfba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
9000dfbe:	2200      	movs	r2, #0
9000dfc0:	602a      	str	r2, [r5, #0]
9000dfc2:	061a      	lsls	r2, r3, #24
9000dfc4:	d410      	bmi.n	9000dfe8 <__swhatbuf_r+0x40>
9000dfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000dfca:	e00e      	b.n	9000dfea <__swhatbuf_r+0x42>
9000dfcc:	466a      	mov	r2, sp
9000dfce:	f000 f945 	bl	9000e25c <_fstat_r>
9000dfd2:	2800      	cmp	r0, #0
9000dfd4:	dbf1      	blt.n	9000dfba <__swhatbuf_r+0x12>
9000dfd6:	9a01      	ldr	r2, [sp, #4]
9000dfd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9000dfdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
9000dfe0:	425a      	negs	r2, r3
9000dfe2:	415a      	adcs	r2, r3
9000dfe4:	602a      	str	r2, [r5, #0]
9000dfe6:	e7ee      	b.n	9000dfc6 <__swhatbuf_r+0x1e>
9000dfe8:	2340      	movs	r3, #64	; 0x40
9000dfea:	2000      	movs	r0, #0
9000dfec:	6023      	str	r3, [r4, #0]
9000dfee:	b016      	add	sp, #88	; 0x58
9000dff0:	bd70      	pop	{r4, r5, r6, pc}
	...

9000dff4 <__smakebuf_r>:
9000dff4:	898b      	ldrh	r3, [r1, #12]
9000dff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000dff8:	079d      	lsls	r5, r3, #30
9000dffa:	4606      	mov	r6, r0
9000dffc:	460c      	mov	r4, r1
9000dffe:	d507      	bpl.n	9000e010 <__smakebuf_r+0x1c>
9000e000:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000e004:	6023      	str	r3, [r4, #0]
9000e006:	6123      	str	r3, [r4, #16]
9000e008:	2301      	movs	r3, #1
9000e00a:	6163      	str	r3, [r4, #20]
9000e00c:	b002      	add	sp, #8
9000e00e:	bd70      	pop	{r4, r5, r6, pc}
9000e010:	ab01      	add	r3, sp, #4
9000e012:	466a      	mov	r2, sp
9000e014:	f7ff ffc8 	bl	9000dfa8 <__swhatbuf_r>
9000e018:	9900      	ldr	r1, [sp, #0]
9000e01a:	4605      	mov	r5, r0
9000e01c:	4630      	mov	r0, r6
9000e01e:	f7fe ff7f 	bl	9000cf20 <_malloc_r>
9000e022:	b948      	cbnz	r0, 9000e038 <__smakebuf_r+0x44>
9000e024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000e028:	059a      	lsls	r2, r3, #22
9000e02a:	d4ef      	bmi.n	9000e00c <__smakebuf_r+0x18>
9000e02c:	f023 0303 	bic.w	r3, r3, #3
9000e030:	f043 0302 	orr.w	r3, r3, #2
9000e034:	81a3      	strh	r3, [r4, #12]
9000e036:	e7e3      	b.n	9000e000 <__smakebuf_r+0xc>
9000e038:	4b0d      	ldr	r3, [pc, #52]	; (9000e070 <__smakebuf_r+0x7c>)
9000e03a:	62b3      	str	r3, [r6, #40]	; 0x28
9000e03c:	89a3      	ldrh	r3, [r4, #12]
9000e03e:	6020      	str	r0, [r4, #0]
9000e040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000e044:	81a3      	strh	r3, [r4, #12]
9000e046:	9b00      	ldr	r3, [sp, #0]
9000e048:	6163      	str	r3, [r4, #20]
9000e04a:	9b01      	ldr	r3, [sp, #4]
9000e04c:	6120      	str	r0, [r4, #16]
9000e04e:	b15b      	cbz	r3, 9000e068 <__smakebuf_r+0x74>
9000e050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000e054:	4630      	mov	r0, r6
9000e056:	f000 f913 	bl	9000e280 <_isatty_r>
9000e05a:	b128      	cbz	r0, 9000e068 <__smakebuf_r+0x74>
9000e05c:	89a3      	ldrh	r3, [r4, #12]
9000e05e:	f023 0303 	bic.w	r3, r3, #3
9000e062:	f043 0301 	orr.w	r3, r3, #1
9000e066:	81a3      	strh	r3, [r4, #12]
9000e068:	89a0      	ldrh	r0, [r4, #12]
9000e06a:	4305      	orrs	r5, r0
9000e06c:	81a5      	strh	r5, [r4, #12]
9000e06e:	e7cd      	b.n	9000e00c <__smakebuf_r+0x18>
9000e070:	9000de01 	.word	0x9000de01

9000e074 <memmove>:
9000e074:	4288      	cmp	r0, r1
9000e076:	b510      	push	{r4, lr}
9000e078:	eb01 0402 	add.w	r4, r1, r2
9000e07c:	d902      	bls.n	9000e084 <memmove+0x10>
9000e07e:	4284      	cmp	r4, r0
9000e080:	4623      	mov	r3, r4
9000e082:	d807      	bhi.n	9000e094 <memmove+0x20>
9000e084:	1e43      	subs	r3, r0, #1
9000e086:	42a1      	cmp	r1, r4
9000e088:	d008      	beq.n	9000e09c <memmove+0x28>
9000e08a:	f811 2b01 	ldrb.w	r2, [r1], #1
9000e08e:	f803 2f01 	strb.w	r2, [r3, #1]!
9000e092:	e7f8      	b.n	9000e086 <memmove+0x12>
9000e094:	4402      	add	r2, r0
9000e096:	4601      	mov	r1, r0
9000e098:	428a      	cmp	r2, r1
9000e09a:	d100      	bne.n	9000e09e <memmove+0x2a>
9000e09c:	bd10      	pop	{r4, pc}
9000e09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000e0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000e0a6:	e7f7      	b.n	9000e098 <memmove+0x24>

9000e0a8 <_realloc_r>:
9000e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e0ac:	4680      	mov	r8, r0
9000e0ae:	4614      	mov	r4, r2
9000e0b0:	460e      	mov	r6, r1
9000e0b2:	b921      	cbnz	r1, 9000e0be <_realloc_r+0x16>
9000e0b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000e0b8:	4611      	mov	r1, r2
9000e0ba:	f7fe bf31 	b.w	9000cf20 <_malloc_r>
9000e0be:	b92a      	cbnz	r2, 9000e0cc <_realloc_r+0x24>
9000e0c0:	f7fe fec2 	bl	9000ce48 <_free_r>
9000e0c4:	4625      	mov	r5, r4
9000e0c6:	4628      	mov	r0, r5
9000e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e0cc:	f000 f8fa 	bl	9000e2c4 <_malloc_usable_size_r>
9000e0d0:	4284      	cmp	r4, r0
9000e0d2:	4607      	mov	r7, r0
9000e0d4:	d802      	bhi.n	9000e0dc <_realloc_r+0x34>
9000e0d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000e0da:	d812      	bhi.n	9000e102 <_realloc_r+0x5a>
9000e0dc:	4621      	mov	r1, r4
9000e0de:	4640      	mov	r0, r8
9000e0e0:	f7fe ff1e 	bl	9000cf20 <_malloc_r>
9000e0e4:	4605      	mov	r5, r0
9000e0e6:	2800      	cmp	r0, #0
9000e0e8:	d0ed      	beq.n	9000e0c6 <_realloc_r+0x1e>
9000e0ea:	42bc      	cmp	r4, r7
9000e0ec:	4622      	mov	r2, r4
9000e0ee:	4631      	mov	r1, r6
9000e0f0:	bf28      	it	cs
9000e0f2:	463a      	movcs	r2, r7
9000e0f4:	f7fe fe92 	bl	9000ce1c <memcpy>
9000e0f8:	4631      	mov	r1, r6
9000e0fa:	4640      	mov	r0, r8
9000e0fc:	f7fe fea4 	bl	9000ce48 <_free_r>
9000e100:	e7e1      	b.n	9000e0c6 <_realloc_r+0x1e>
9000e102:	4635      	mov	r5, r6
9000e104:	e7df      	b.n	9000e0c6 <_realloc_r+0x1e>

9000e106 <_raise_r>:
9000e106:	291f      	cmp	r1, #31
9000e108:	b538      	push	{r3, r4, r5, lr}
9000e10a:	4604      	mov	r4, r0
9000e10c:	460d      	mov	r5, r1
9000e10e:	d904      	bls.n	9000e11a <_raise_r+0x14>
9000e110:	2316      	movs	r3, #22
9000e112:	6003      	str	r3, [r0, #0]
9000e114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000e118:	bd38      	pop	{r3, r4, r5, pc}
9000e11a:	6c42      	ldr	r2, [r0, #68]	; 0x44
9000e11c:	b112      	cbz	r2, 9000e124 <_raise_r+0x1e>
9000e11e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9000e122:	b94b      	cbnz	r3, 9000e138 <_raise_r+0x32>
9000e124:	4620      	mov	r0, r4
9000e126:	f000 f831 	bl	9000e18c <_getpid_r>
9000e12a:	462a      	mov	r2, r5
9000e12c:	4601      	mov	r1, r0
9000e12e:	4620      	mov	r0, r4
9000e130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000e134:	f000 b818 	b.w	9000e168 <_kill_r>
9000e138:	2b01      	cmp	r3, #1
9000e13a:	d00a      	beq.n	9000e152 <_raise_r+0x4c>
9000e13c:	1c59      	adds	r1, r3, #1
9000e13e:	d103      	bne.n	9000e148 <_raise_r+0x42>
9000e140:	2316      	movs	r3, #22
9000e142:	6003      	str	r3, [r0, #0]
9000e144:	2001      	movs	r0, #1
9000e146:	e7e7      	b.n	9000e118 <_raise_r+0x12>
9000e148:	2400      	movs	r4, #0
9000e14a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
9000e14e:	4628      	mov	r0, r5
9000e150:	4798      	blx	r3
9000e152:	2000      	movs	r0, #0
9000e154:	e7e0      	b.n	9000e118 <_raise_r+0x12>
	...

9000e158 <raise>:
9000e158:	4b02      	ldr	r3, [pc, #8]	; (9000e164 <raise+0xc>)
9000e15a:	4601      	mov	r1, r0
9000e15c:	6818      	ldr	r0, [r3, #0]
9000e15e:	f7ff bfd2 	b.w	9000e106 <_raise_r>
9000e162:	bf00      	nop
9000e164:	20000060 	.word	0x20000060

9000e168 <_kill_r>:
9000e168:	b538      	push	{r3, r4, r5, lr}
9000e16a:	4d07      	ldr	r5, [pc, #28]	; (9000e188 <_kill_r+0x20>)
9000e16c:	2300      	movs	r3, #0
9000e16e:	4604      	mov	r4, r0
9000e170:	4608      	mov	r0, r1
9000e172:	4611      	mov	r1, r2
9000e174:	602b      	str	r3, [r5, #0]
9000e176:	f7f2 fb7f 	bl	90000878 <_kill>
9000e17a:	1c43      	adds	r3, r0, #1
9000e17c:	d102      	bne.n	9000e184 <_kill_r+0x1c>
9000e17e:	682b      	ldr	r3, [r5, #0]
9000e180:	b103      	cbz	r3, 9000e184 <_kill_r+0x1c>
9000e182:	6023      	str	r3, [r4, #0]
9000e184:	bd38      	pop	{r3, r4, r5, pc}
9000e186:	bf00      	nop
9000e188:	200050d8 	.word	0x200050d8

9000e18c <_getpid_r>:
9000e18c:	f7f2 bb6c 	b.w	90000868 <_getpid>

9000e190 <__sread>:
9000e190:	b510      	push	{r4, lr}
9000e192:	460c      	mov	r4, r1
9000e194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e198:	f000 f89c 	bl	9000e2d4 <_read_r>
9000e19c:	2800      	cmp	r0, #0
9000e19e:	bfab      	itete	ge
9000e1a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000e1a2:	89a3      	ldrhlt	r3, [r4, #12]
9000e1a4:	181b      	addge	r3, r3, r0
9000e1a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000e1aa:	bfac      	ite	ge
9000e1ac:	6563      	strge	r3, [r4, #84]	; 0x54
9000e1ae:	81a3      	strhlt	r3, [r4, #12]
9000e1b0:	bd10      	pop	{r4, pc}

9000e1b2 <__swrite>:
9000e1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e1b6:	461f      	mov	r7, r3
9000e1b8:	898b      	ldrh	r3, [r1, #12]
9000e1ba:	05db      	lsls	r3, r3, #23
9000e1bc:	4605      	mov	r5, r0
9000e1be:	460c      	mov	r4, r1
9000e1c0:	4616      	mov	r6, r2
9000e1c2:	d505      	bpl.n	9000e1d0 <__swrite+0x1e>
9000e1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e1c8:	2302      	movs	r3, #2
9000e1ca:	2200      	movs	r2, #0
9000e1cc:	f000 f868 	bl	9000e2a0 <_lseek_r>
9000e1d0:	89a3      	ldrh	r3, [r4, #12]
9000e1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000e1d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000e1da:	81a3      	strh	r3, [r4, #12]
9000e1dc:	4632      	mov	r2, r6
9000e1de:	463b      	mov	r3, r7
9000e1e0:	4628      	mov	r0, r5
9000e1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000e1e6:	f000 b817 	b.w	9000e218 <_write_r>

9000e1ea <__sseek>:
9000e1ea:	b510      	push	{r4, lr}
9000e1ec:	460c      	mov	r4, r1
9000e1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e1f2:	f000 f855 	bl	9000e2a0 <_lseek_r>
9000e1f6:	1c43      	adds	r3, r0, #1
9000e1f8:	89a3      	ldrh	r3, [r4, #12]
9000e1fa:	bf15      	itete	ne
9000e1fc:	6560      	strne	r0, [r4, #84]	; 0x54
9000e1fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000e202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000e206:	81a3      	strheq	r3, [r4, #12]
9000e208:	bf18      	it	ne
9000e20a:	81a3      	strhne	r3, [r4, #12]
9000e20c:	bd10      	pop	{r4, pc}

9000e20e <__sclose>:
9000e20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000e212:	f000 b813 	b.w	9000e23c <_close_r>
	...

9000e218 <_write_r>:
9000e218:	b538      	push	{r3, r4, r5, lr}
9000e21a:	4d07      	ldr	r5, [pc, #28]	; (9000e238 <_write_r+0x20>)
9000e21c:	4604      	mov	r4, r0
9000e21e:	4608      	mov	r0, r1
9000e220:	4611      	mov	r1, r2
9000e222:	2200      	movs	r2, #0
9000e224:	602a      	str	r2, [r5, #0]
9000e226:	461a      	mov	r2, r3
9000e228:	f7f2 fb5d 	bl	900008e6 <_write>
9000e22c:	1c43      	adds	r3, r0, #1
9000e22e:	d102      	bne.n	9000e236 <_write_r+0x1e>
9000e230:	682b      	ldr	r3, [r5, #0]
9000e232:	b103      	cbz	r3, 9000e236 <_write_r+0x1e>
9000e234:	6023      	str	r3, [r4, #0]
9000e236:	bd38      	pop	{r3, r4, r5, pc}
9000e238:	200050d8 	.word	0x200050d8

9000e23c <_close_r>:
9000e23c:	b538      	push	{r3, r4, r5, lr}
9000e23e:	4d06      	ldr	r5, [pc, #24]	; (9000e258 <_close_r+0x1c>)
9000e240:	2300      	movs	r3, #0
9000e242:	4604      	mov	r4, r0
9000e244:	4608      	mov	r0, r1
9000e246:	602b      	str	r3, [r5, #0]
9000e248:	f7f2 fb69 	bl	9000091e <_close>
9000e24c:	1c43      	adds	r3, r0, #1
9000e24e:	d102      	bne.n	9000e256 <_close_r+0x1a>
9000e250:	682b      	ldr	r3, [r5, #0]
9000e252:	b103      	cbz	r3, 9000e256 <_close_r+0x1a>
9000e254:	6023      	str	r3, [r4, #0]
9000e256:	bd38      	pop	{r3, r4, r5, pc}
9000e258:	200050d8 	.word	0x200050d8

9000e25c <_fstat_r>:
9000e25c:	b538      	push	{r3, r4, r5, lr}
9000e25e:	4d07      	ldr	r5, [pc, #28]	; (9000e27c <_fstat_r+0x20>)
9000e260:	2300      	movs	r3, #0
9000e262:	4604      	mov	r4, r0
9000e264:	4608      	mov	r0, r1
9000e266:	4611      	mov	r1, r2
9000e268:	602b      	str	r3, [r5, #0]
9000e26a:	f7f2 fb64 	bl	90000936 <_fstat>
9000e26e:	1c43      	adds	r3, r0, #1
9000e270:	d102      	bne.n	9000e278 <_fstat_r+0x1c>
9000e272:	682b      	ldr	r3, [r5, #0]
9000e274:	b103      	cbz	r3, 9000e278 <_fstat_r+0x1c>
9000e276:	6023      	str	r3, [r4, #0]
9000e278:	bd38      	pop	{r3, r4, r5, pc}
9000e27a:	bf00      	nop
9000e27c:	200050d8 	.word	0x200050d8

9000e280 <_isatty_r>:
9000e280:	b538      	push	{r3, r4, r5, lr}
9000e282:	4d06      	ldr	r5, [pc, #24]	; (9000e29c <_isatty_r+0x1c>)
9000e284:	2300      	movs	r3, #0
9000e286:	4604      	mov	r4, r0
9000e288:	4608      	mov	r0, r1
9000e28a:	602b      	str	r3, [r5, #0]
9000e28c:	f7f2 fb63 	bl	90000956 <_isatty>
9000e290:	1c43      	adds	r3, r0, #1
9000e292:	d102      	bne.n	9000e29a <_isatty_r+0x1a>
9000e294:	682b      	ldr	r3, [r5, #0]
9000e296:	b103      	cbz	r3, 9000e29a <_isatty_r+0x1a>
9000e298:	6023      	str	r3, [r4, #0]
9000e29a:	bd38      	pop	{r3, r4, r5, pc}
9000e29c:	200050d8 	.word	0x200050d8

9000e2a0 <_lseek_r>:
9000e2a0:	b538      	push	{r3, r4, r5, lr}
9000e2a2:	4d07      	ldr	r5, [pc, #28]	; (9000e2c0 <_lseek_r+0x20>)
9000e2a4:	4604      	mov	r4, r0
9000e2a6:	4608      	mov	r0, r1
9000e2a8:	4611      	mov	r1, r2
9000e2aa:	2200      	movs	r2, #0
9000e2ac:	602a      	str	r2, [r5, #0]
9000e2ae:	461a      	mov	r2, r3
9000e2b0:	f7f2 fb5c 	bl	9000096c <_lseek>
9000e2b4:	1c43      	adds	r3, r0, #1
9000e2b6:	d102      	bne.n	9000e2be <_lseek_r+0x1e>
9000e2b8:	682b      	ldr	r3, [r5, #0]
9000e2ba:	b103      	cbz	r3, 9000e2be <_lseek_r+0x1e>
9000e2bc:	6023      	str	r3, [r4, #0]
9000e2be:	bd38      	pop	{r3, r4, r5, pc}
9000e2c0:	200050d8 	.word	0x200050d8

9000e2c4 <_malloc_usable_size_r>:
9000e2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000e2c8:	1f18      	subs	r0, r3, #4
9000e2ca:	2b00      	cmp	r3, #0
9000e2cc:	bfbc      	itt	lt
9000e2ce:	580b      	ldrlt	r3, [r1, r0]
9000e2d0:	18c0      	addlt	r0, r0, r3
9000e2d2:	4770      	bx	lr

9000e2d4 <_read_r>:
9000e2d4:	b538      	push	{r3, r4, r5, lr}
9000e2d6:	4d07      	ldr	r5, [pc, #28]	; (9000e2f4 <_read_r+0x20>)
9000e2d8:	4604      	mov	r4, r0
9000e2da:	4608      	mov	r0, r1
9000e2dc:	4611      	mov	r1, r2
9000e2de:	2200      	movs	r2, #0
9000e2e0:	602a      	str	r2, [r5, #0]
9000e2e2:	461a      	mov	r2, r3
9000e2e4:	f7f2 fae2 	bl	900008ac <_read>
9000e2e8:	1c43      	adds	r3, r0, #1
9000e2ea:	d102      	bne.n	9000e2f2 <_read_r+0x1e>
9000e2ec:	682b      	ldr	r3, [r5, #0]
9000e2ee:	b103      	cbz	r3, 9000e2f2 <_read_r+0x1e>
9000e2f0:	6023      	str	r3, [r4, #0]
9000e2f2:	bd38      	pop	{r3, r4, r5, pc}
9000e2f4:	200050d8 	.word	0x200050d8

9000e2f8 <_gettimeofday>:
9000e2f8:	4b02      	ldr	r3, [pc, #8]	; (9000e304 <_gettimeofday+0xc>)
9000e2fa:	2258      	movs	r2, #88	; 0x58
9000e2fc:	601a      	str	r2, [r3, #0]
9000e2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000e302:	4770      	bx	lr
9000e304:	200050d8 	.word	0x200050d8

9000e308 <_init>:
9000e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e30a:	bf00      	nop
9000e30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000e30e:	bc08      	pop	{r3}
9000e310:	469e      	mov	lr, r3
9000e312:	4770      	bx	lr

9000e314 <_fini>:
9000e314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000e316:	bf00      	nop
9000e318:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000e31a:	bc08      	pop	{r3}
9000e31c:	469e      	mov	lr, r3
9000e31e:	4770      	bx	lr
