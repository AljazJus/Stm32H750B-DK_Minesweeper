
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc98  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  9000cf38  9000cf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  9000d454  9000d454  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  9000d454  9000d454  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  9000d454  9000d454  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  9000d454  9000d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  9000d458  9000d458  0001d458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  9000d45c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005010  200000b8  9000d514  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200050c8  9000d514  000250c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_line   000296c7  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00027e19  00000000  00000000  000497ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000511a  00000000  00000000  000715c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002008  00000000  00000000  000766e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018b8d1  00000000  00000000  000786e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e00  00000000  00000000  00203fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00040c31  00000000  00000000  00205dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002469f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e8  00000000  00000000  00246a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0024fe2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0024fe50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	200000b8 	.word	0x200000b8
900002bc:	00000000 	.word	0x00000000
900002c0:	9000cf20 	.word	0x9000cf20

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	200000bc 	.word	0x200000bc
900002dc:	9000cf20 	.word	0x9000cf20

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90000384:	f002 ff30 	bl	900031e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000388:	480c      	ldr	r0, [pc, #48]	; (900003bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000038a:	490d      	ldr	r1, [pc, #52]	; (900003c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
9000038c:	4a0d      	ldr	r2, [pc, #52]	; (900003c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
9000038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000390:	e002      	b.n	90000398 <LoopCopyDataInit>

90000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000396:	3304      	adds	r3, #4

90000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
9000039c:	d3f9      	bcc.n	90000392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
9000039e:	4a0a      	ldr	r2, [pc, #40]	; (900003c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
900003a0:	4c0a      	ldr	r4, [pc, #40]	; (900003cc <LoopFillZerobss+0x22>)
  movs r3, #0
900003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
900003a4:	e001      	b.n	900003aa <LoopFillZerobss>

900003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
900003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
900003a8:	3204      	adds	r2, #4

900003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
900003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
900003ac:	d3fb      	bcc.n	900003a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
900003ae:	f00b fb15 	bl	9000b9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f000 f80f 	bl	900003d4 <main>
  bx  lr
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
900003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
900003c0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
900003c4:	9000d45c 	.word	0x9000d45c
  ldr r2, =_sbss
900003c8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
900003cc:	200050c8 	.word	0x200050c8

900003d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
900003d4:	b580      	push	{r7, lr}
900003d6:	b082      	sub	sp, #8
900003d8:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
900003da:	f000 f9dd 	bl	90000798 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
900003de:	f000 f949 	bl	90000674 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
900003e2:	f002 ff63 	bl	900032ac <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
900003e6:	f000 f83d 	bl	90000464 <SystemClock_Config>

  /* Configure LED1 */
  BSP_LED_Init(LED1);
900003ea:	2000      	movs	r0, #0
900003ec:	f000 ffca 	bl	90001384 <BSP_LED_Init>

  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
900003f0:	2101      	movs	r1, #1
900003f2:	2000      	movs	r0, #0
900003f4:	f001 fc7a 	bl	90001cec <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
900003f8:	4816      	ldr	r0, [pc, #88]	; (90000454 <main+0x80>)
900003fa:	f00a fed3 	bl	9000b1a4 <UTIL_LCD_SetFuncDriver>

  /* Set Foreground Layer */
  UTIL_LCD_SetLayer(0);
900003fe:	2000      	movs	r0, #0
90000400:	f00a ff26 	bl	9000b250 <UTIL_LCD_SetLayer>

  /* Clear the LCD Background layer */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
90000404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90000408:	f00b f814 	bl	9000b434 <UTIL_LCD_Clear>
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
9000040c:	1d3b      	adds	r3, r7, #4
9000040e:	4619      	mov	r1, r3
90000410:	2000      	movs	r0, #0
90000412:	f001 fe25 	bl	90002060 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
90000416:	463b      	mov	r3, r7
90000418:	4619      	mov	r1, r3
9000041a:	2000      	movs	r0, #0
9000041c:	f001 fe3e 	bl	9000209c <BSP_LCD_GetYSize>
  hTS->Width = x_size;
90000420:	4b0d      	ldr	r3, [pc, #52]	; (90000458 <main+0x84>)
90000422:	681b      	ldr	r3, [r3, #0]
90000424:	687a      	ldr	r2, [r7, #4]
90000426:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
90000428:	4b0b      	ldr	r3, [pc, #44]	; (90000458 <main+0x84>)
9000042a:	681b      	ldr	r3, [r3, #0]
9000042c:	683a      	ldr	r2, [r7, #0]
9000042e:	605a      	str	r2, [r3, #4]
  hTS->Orientation = TS_SWAP_XY;
90000430:	4b09      	ldr	r3, [pc, #36]	; (90000458 <main+0x84>)
90000432:	681b      	ldr	r3, [r3, #0]
90000434:	2208      	movs	r2, #8
90000436:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
90000438:	4b07      	ldr	r3, [pc, #28]	; (90000458 <main+0x84>)
9000043a:	681b      	ldr	r3, [r3, #0]
9000043c:	2205      	movs	r2, #5
9000043e:	60da      	str	r2, [r3, #12]
  /* Touchscreen initialization */
  BSP_TS_Init(0, hTS);
90000440:	4b05      	ldr	r3, [pc, #20]	; (90000458 <main+0x84>)
90000442:	681b      	ldr	r3, [r3, #0]
90000444:	4619      	mov	r1, r3
90000446:	2000      	movs	r0, #0
90000448:	f002 fcb0 	bl	90002dac <BSP_TS_Init>

  /* Infinite loop */
  while (1)
  {
    sweeperMain();
9000044c:	f009 fdc4 	bl	90009fd8 <sweeperMain>
90000450:	e7fc      	b.n	9000044c <main+0x78>
90000452:	bf00      	nop
90000454:	9000cfd8 	.word	0x9000cfd8
90000458:	200000d4 	.word	0x200000d4

9000045c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
9000045c:	b480      	push	{r7}
9000045e:	af00      	add	r7, sp, #0
  while (1)
90000460:	e7fe      	b.n	90000460 <Error_Handler+0x4>
	...

90000464 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
90000464:	b580      	push	{r7, lr}
90000466:	b0ce      	sub	sp, #312	; 0x138
90000468:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
9000046a:	2300      	movs	r3, #0
9000046c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY); /* PWR set to LDO for the STM32H750B-DISCO board */
90000470:	2002      	movs	r0, #2
90000472:	f006 fb95 	bl	90006ba0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000476:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000047a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
9000047e:	2200      	movs	r2, #0
90000480:	601a      	str	r2, [r3, #0]
90000482:	4b79      	ldr	r3, [pc, #484]	; (90000668 <SystemClock_Config+0x204>)
90000484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000486:	4a78      	ldr	r2, [pc, #480]	; (90000668 <SystemClock_Config+0x204>)
90000488:	f023 0301 	bic.w	r3, r3, #1
9000048c:	62d3      	str	r3, [r2, #44]	; 0x2c
9000048e:	4b76      	ldr	r3, [pc, #472]	; (90000668 <SystemClock_Config+0x204>)
90000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000492:	f003 0201 	and.w	r2, r3, #1
90000496:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000049a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
9000049e:	601a      	str	r2, [r3, #0]
900004a0:	4b72      	ldr	r3, [pc, #456]	; (9000066c <SystemClock_Config+0x208>)
900004a2:	699b      	ldr	r3, [r3, #24]
900004a4:	4a71      	ldr	r2, [pc, #452]	; (9000066c <SystemClock_Config+0x208>)
900004a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900004aa:	6193      	str	r3, [r2, #24]
900004ac:	4b6f      	ldr	r3, [pc, #444]	; (9000066c <SystemClock_Config+0x208>)
900004ae:	699b      	ldr	r3, [r3, #24]
900004b0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
900004b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
900004b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
900004bc:	601a      	str	r2, [r3, #0]
900004be:	f507 739c 	add.w	r3, r7, #312	; 0x138
900004c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
900004c6:	681b      	ldr	r3, [r3, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
900004c8:	bf00      	nop
900004ca:	4b68      	ldr	r3, [pc, #416]	; (9000066c <SystemClock_Config+0x208>)
900004cc:	699b      	ldr	r3, [r3, #24]
900004ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900004d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900004d6:	d1f8      	bne.n	900004ca <SystemClock_Config+0x66>
  {
  }

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900004d8:	2301      	movs	r3, #1
900004da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
900004de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
900004e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
900004e6:	2300      	movs	r3, #0
900004e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
900004ec:	2300      	movs	r3, #0
900004ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900004f2:	2302      	movs	r3, #2
900004f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900004f8:	2302      	movs	r3, #2
900004fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  RCC_OscInitStruct.PLL.PLLM = 5;
900004fe:	2305      	movs	r3, #5
90000500:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLN = 160;
90000504:	23a0      	movs	r3, #160	; 0xa0
90000506:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000050a:	2300      	movs	r3, #0
9000050c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLP = 2;
90000510:	2302      	movs	r3, #2
90000512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLR = 2;
90000516:	2302      	movs	r3, #2
90000518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLQ = 4;
9000051c:	2304      	movs	r3, #4
9000051e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90000522:	2300      	movs	r3, #0
90000524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90000528:	2308      	movs	r3, #8
9000052a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
9000052e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
90000532:	4618      	mov	r0, r3
90000534:	f006 fb6e 	bl	90006c14 <HAL_RCC_OscConfig>
90000538:	4603      	mov	r3, r0
9000053a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  if (ret != HAL_OK)
9000053e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
90000542:	2b00      	cmp	r3, #0
90000544:	d001      	beq.n	9000054a <SystemClock_Config+0xe6>
  {
    Error_Handler();
90000546:	f7ff ff89 	bl	9000045c <Error_Handler>
  }

  PeriphClkInitStruct.PLL3.PLL3M = 5;
9000054a:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000054e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000552:	2205      	movs	r2, #5
90000554:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
90000556:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000055a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000055e:	2260      	movs	r2, #96	; 0x60
90000560:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
90000562:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000056a:	2202      	movs	r2, #2
9000056c:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
9000056e:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000576:	220a      	movs	r2, #10
90000578:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 18;
9000057a:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000057e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
90000582:	2212      	movs	r2, #18
90000584:	639a      	str	r2, [r3, #56]	; 0x38

  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
90000586:	f507 739c 	add.w	r3, r7, #312	; 0x138
9000058a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000058e:	2200      	movs	r2, #0
90000590:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
90000592:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
9000059a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000059e:	63da      	str	r2, [r3, #60]	; 0x3c

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
900005a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
900005a4:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
900005a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
900005ac:	f04f 0300 	mov.w	r3, #0
900005b0:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
900005b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
900005b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
900005bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
900005c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
900005c4:	f107 0308 	add.w	r3, r7, #8
900005c8:	4618      	mov	r0, r3
900005ca:	f007 faf3 	bl	90007bb4 <HAL_RCCEx_PeriphCLKConfig>

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
900005ce:	233f      	movs	r3, #63	; 0x3f
900005d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
900005d4:	2303      	movs	r3, #3
900005d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
900005da:	2300      	movs	r3, #0
900005dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
900005e0:	2308      	movs	r3, #8
900005e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
900005e6:	2340      	movs	r3, #64	; 0x40
900005e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
900005ec:	2340      	movs	r3, #64	; 0x40
900005ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
900005f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
900005f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
900005fa:	2340      	movs	r3, #64	; 0x40
900005fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
90000600:	f507 738a 	add.w	r3, r7, #276	; 0x114
90000604:	2104      	movs	r1, #4
90000606:	4618      	mov	r0, r3
90000608:	f006 ff5e 	bl	900074c8 <HAL_RCC_ClockConfig>
9000060c:	4603      	mov	r3, r0
9000060e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  if (ret != HAL_OK)
90000612:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
90000616:	2b00      	cmp	r3, #0
90000618:	d001      	beq.n	9000061e <SystemClock_Config+0x1ba>
  {
    Error_Handler();
9000061a:	f7ff ff1f 	bl	9000045c <Error_Handler>
  }
  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE();
9000061e:	4b14      	ldr	r3, [pc, #80]	; (90000670 <SystemClock_Config+0x20c>)
90000620:	681b      	ldr	r3, [r3, #0]
90000622:	4a13      	ldr	r2, [pc, #76]	; (90000670 <SystemClock_Config+0x20c>)
90000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000628:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000062a:	4b11      	ldr	r3, [pc, #68]	; (90000670 <SystemClock_Config+0x20c>)
9000062c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000630:	4a0f      	ldr	r2, [pc, #60]	; (90000670 <SystemClock_Config+0x20c>)
90000632:	f043 0302 	orr.w	r3, r3, #2
90000636:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
9000063a:	4b0d      	ldr	r3, [pc, #52]	; (90000670 <SystemClock_Config+0x20c>)
9000063c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000640:	f003 0202 	and.w	r2, r3, #2
90000644:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000648:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
9000064c:	601a      	str	r2, [r3, #0]
9000064e:	f507 739c 	add.w	r3, r7, #312	; 0x138
90000652:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
90000656:	681b      	ldr	r3, [r3, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
90000658:	f002 fece 	bl	900033f8 <HAL_EnableCompensationCell>
}
9000065c:	bf00      	nop
9000065e:	f507 779c 	add.w	r7, r7, #312	; 0x138
90000662:	46bd      	mov	sp, r7
90000664:	bd80      	pop	{r7, pc}
90000666:	bf00      	nop
90000668:	58000400 	.word	0x58000400
9000066c:	58024800 	.word	0x58024800
90000670:	58024400 	.word	0x58024400

90000674 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
90000674:	b480      	push	{r7}
90000676:	b085      	sub	sp, #20
90000678:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000067a:	4b34      	ldr	r3, [pc, #208]	; (9000074c <CPU_CACHE_Enable+0xd8>)
9000067c:	695b      	ldr	r3, [r3, #20]
9000067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90000682:	2b00      	cmp	r3, #0
90000684:	d11b      	bne.n	900006be <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000686:	f3bf 8f4f 	dsb	sy
}
9000068a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000068c:	f3bf 8f6f 	isb	sy
}
90000690:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90000692:	4b2e      	ldr	r3, [pc, #184]	; (9000074c <CPU_CACHE_Enable+0xd8>)
90000694:	2200      	movs	r2, #0
90000696:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
9000069a:	f3bf 8f4f 	dsb	sy
}
9000069e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006a0:	f3bf 8f6f 	isb	sy
}
900006a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900006a6:	4b29      	ldr	r3, [pc, #164]	; (9000074c <CPU_CACHE_Enable+0xd8>)
900006a8:	695b      	ldr	r3, [r3, #20]
900006aa:	4a28      	ldr	r2, [pc, #160]	; (9000074c <CPU_CACHE_Enable+0xd8>)
900006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900006b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900006b2:	f3bf 8f4f 	dsb	sy
}
900006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006b8:	f3bf 8f6f 	isb	sy
}
900006bc:	e000      	b.n	900006c0 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900006be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900006c0:	4b22      	ldr	r3, [pc, #136]	; (9000074c <CPU_CACHE_Enable+0xd8>)
900006c2:	695b      	ldr	r3, [r3, #20]
900006c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900006c8:	2b00      	cmp	r3, #0
900006ca:	d138      	bne.n	9000073e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900006cc:	4b1f      	ldr	r3, [pc, #124]	; (9000074c <CPU_CACHE_Enable+0xd8>)
900006ce:	2200      	movs	r2, #0
900006d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900006d4:	f3bf 8f4f 	dsb	sy
}
900006d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
900006da:	4b1c      	ldr	r3, [pc, #112]	; (9000074c <CPU_CACHE_Enable+0xd8>)
900006dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900006e0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900006e2:	68fb      	ldr	r3, [r7, #12]
900006e4:	0b5b      	lsrs	r3, r3, #13
900006e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
900006ea:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900006ec:	68fb      	ldr	r3, [r7, #12]
900006ee:	08db      	lsrs	r3, r3, #3
900006f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
900006f4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
900006f6:	68bb      	ldr	r3, [r7, #8]
900006f8:	015a      	lsls	r2, r3, #5
900006fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
900006fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000700:	687a      	ldr	r2, [r7, #4]
90000702:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000704:	4911      	ldr	r1, [pc, #68]	; (9000074c <CPU_CACHE_Enable+0xd8>)
90000706:	4313      	orrs	r3, r2
90000708:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
9000070c:	687b      	ldr	r3, [r7, #4]
9000070e:	1e5a      	subs	r2, r3, #1
90000710:	607a      	str	r2, [r7, #4]
90000712:	2b00      	cmp	r3, #0
90000714:	d1ef      	bne.n	900006f6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
90000716:	68bb      	ldr	r3, [r7, #8]
90000718:	1e5a      	subs	r2, r3, #1
9000071a:	60ba      	str	r2, [r7, #8]
9000071c:	2b00      	cmp	r3, #0
9000071e:	d1e5      	bne.n	900006ec <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
90000720:	f3bf 8f4f 	dsb	sy
}
90000724:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000726:	4b09      	ldr	r3, [pc, #36]	; (9000074c <CPU_CACHE_Enable+0xd8>)
90000728:	695b      	ldr	r3, [r3, #20]
9000072a:	4a08      	ldr	r2, [pc, #32]	; (9000074c <CPU_CACHE_Enable+0xd8>)
9000072c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90000730:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000732:	f3bf 8f4f 	dsb	sy
}
90000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000738:	f3bf 8f6f 	isb	sy
}
9000073c:	e000      	b.n	90000740 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000073e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
90000740:	bf00      	nop
90000742:	3714      	adds	r7, #20
90000744:	46bd      	mov	sp, r7
90000746:	f85d 7b04 	ldr.w	r7, [sp], #4
9000074a:	4770      	bx	lr
9000074c:	e000ed00 	.word	0xe000ed00

90000750 <MX_LTDC_ClockConfig>:
 * @note   This API is called by BSP_LCD_Init()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
90000750:	b580      	push	{r7, lr}
90000752:	b082      	sub	sp, #8
90000754:	af00      	add	r7, sp, #0
90000756:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90000758:	490e      	ldr	r1, [pc, #56]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
9000075a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
9000075e:	f04f 0300 	mov.w	r3, #0
90000762:	e9c1 2300 	strd	r2, r3, [r1]
  periph_clk_init_struct.PLL3.PLL3M = 5;
90000766:	4b0b      	ldr	r3, [pc, #44]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
90000768:	2205      	movs	r2, #5
9000076a:	629a      	str	r2, [r3, #40]	; 0x28
  periph_clk_init_struct.PLL3.PLL3N = 192;
9000076c:	4b09      	ldr	r3, [pc, #36]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
9000076e:	22c0      	movs	r2, #192	; 0xc0
90000770:	62da      	str	r2, [r3, #44]	; 0x2c
  periph_clk_init_struct.PLL3.PLL3P = 2;
90000772:	4b08      	ldr	r3, [pc, #32]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
90000774:	2202      	movs	r2, #2
90000776:	631a      	str	r2, [r3, #48]	; 0x30
  periph_clk_init_struct.PLL3.PLL3Q = 20;
90000778:	4b06      	ldr	r3, [pc, #24]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
9000077a:	2214      	movs	r2, #20
9000077c:	635a      	str	r2, [r3, #52]	; 0x34
  periph_clk_init_struct.PLL3.PLL3R = 99;
9000077e:	4b05      	ldr	r3, [pc, #20]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
90000780:	2263      	movs	r2, #99	; 0x63
90000782:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
90000784:	4803      	ldr	r0, [pc, #12]	; (90000794 <MX_LTDC_ClockConfig+0x44>)
90000786:	f007 fa15 	bl	90007bb4 <HAL_RCCEx_PeriphCLKConfig>
9000078a:	4603      	mov	r3, r0
}
9000078c:	4618      	mov	r0, r3
9000078e:	3708      	adds	r7, #8
90000790:	46bd      	mov	sp, r7
90000792:	bd80      	pop	{r7, pc}
90000794:	200000d8 	.word	0x200000d8

90000798 <MPU_Config>:
 *         The Configured Region Size is 32MB because same as SDRAM size.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
90000798:	b580      	push	{r7, lr}
9000079a:	b084      	sub	sp, #16
9000079c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
9000079e:	f002 ff4b 	bl	90003638 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
900007a2:	2301      	movs	r3, #1
900007a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
900007a6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
900007aa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900007ac:	2318      	movs	r3, #24
900007ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900007b0:	2303      	movs	r3, #3
900007b2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
900007b4:	2300      	movs	r3, #0
900007b6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900007b8:	2301      	movs	r3, #1
900007ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
900007bc:	2300      	movs	r3, #0
900007be:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
900007c0:	2301      	movs	r3, #1
900007c2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
900007c4:	2300      	movs	r3, #0
900007c6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
900007c8:	2300      	movs	r3, #0
900007ca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
900007cc:	2300      	movs	r3, #0
900007ce:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900007d0:	463b      	mov	r3, r7
900007d2:	4618      	mov	r0, r3
900007d4:	f002 ff68 	bl	900036a8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900007d8:	2004      	movs	r0, #4
900007da:	f002 ff45 	bl	90003668 <HAL_MPU_Enable>
}
900007de:	bf00      	nop
900007e0:	3710      	adds	r7, #16
900007e2:	46bd      	mov	sp, r7
900007e4:	bd80      	pop	{r7, pc}

900007e6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
900007e6:	b480      	push	{r7}
900007e8:	af00      	add	r7, sp, #0
}
900007ea:	bf00      	nop
900007ec:	46bd      	mov	sp, r7
900007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900007f2:	4770      	bx	lr

900007f4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
900007f4:	b480      	push	{r7}
900007f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
900007f8:	e7fe      	b.n	900007f8 <HardFault_Handler+0x4>

900007fa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
900007fa:	b480      	push	{r7}
900007fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
900007fe:	e7fe      	b.n	900007fe <MemManage_Handler+0x4>

90000800 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
90000800:	b480      	push	{r7}
90000802:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
90000804:	e7fe      	b.n	90000804 <BusFault_Handler+0x4>

90000806 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
90000806:	b480      	push	{r7}
90000808:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
9000080a:	e7fe      	b.n	9000080a <UsageFault_Handler+0x4>

9000080c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
9000080c:	b480      	push	{r7}
9000080e:	af00      	add	r7, sp, #0
}
90000810:	bf00      	nop
90000812:	46bd      	mov	sp, r7
90000814:	f85d 7b04 	ldr.w	r7, [sp], #4
90000818:	4770      	bx	lr

9000081a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
9000081a:	b480      	push	{r7}
9000081c:	af00      	add	r7, sp, #0
}
9000081e:	bf00      	nop
90000820:	46bd      	mov	sp, r7
90000822:	f85d 7b04 	ldr.w	r7, [sp], #4
90000826:	4770      	bx	lr

90000828 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
90000828:	b480      	push	{r7}
9000082a:	af00      	add	r7, sp, #0
}
9000082c:	bf00      	nop
9000082e:	46bd      	mov	sp, r7
90000830:	f85d 7b04 	ldr.w	r7, [sp], #4
90000834:	4770      	bx	lr

90000836 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
90000836:	b580      	push	{r7, lr}
90000838:	af00      	add	r7, sp, #0
  HAL_IncTick();
9000083a:	f002 fdb1 	bl	900033a0 <HAL_IncTick>
}
9000083e:	bf00      	nop
90000840:	bd80      	pop	{r7, pc}
	...

90000844 <OTG_FS_IRQHandler>:
#ifdef USE_USB_FS
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
90000844:	b580      	push	{r7, lr}
90000846:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
90000848:	4802      	ldr	r0, [pc, #8]	; (90000854 <OTG_FS_IRQHandler+0x10>)
9000084a:	f003 fd1a 	bl	90004282 <HAL_HCD_IRQHandler>
}
9000084e:	bf00      	nop
90000850:	bd80      	pop	{r7, pc}
90000852:	bf00      	nop
90000854:	2000019c 	.word	0x2000019c

90000858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
90000858:	b480      	push	{r7}
9000085a:	af00      	add	r7, sp, #0
  return 1;
9000085c:	2301      	movs	r3, #1
}
9000085e:	4618      	mov	r0, r3
90000860:	46bd      	mov	sp, r7
90000862:	f85d 7b04 	ldr.w	r7, [sp], #4
90000866:	4770      	bx	lr

90000868 <_kill>:

int _kill(int pid, int sig)
{
90000868:	b580      	push	{r7, lr}
9000086a:	b082      	sub	sp, #8
9000086c:	af00      	add	r7, sp, #0
9000086e:	6078      	str	r0, [r7, #4]
90000870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
90000872:	f00b f8ad 	bl	9000b9d0 <__errno>
90000876:	4603      	mov	r3, r0
90000878:	2216      	movs	r2, #22
9000087a:	601a      	str	r2, [r3, #0]
  return -1;
9000087c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90000880:	4618      	mov	r0, r3
90000882:	3708      	adds	r7, #8
90000884:	46bd      	mov	sp, r7
90000886:	bd80      	pop	{r7, pc}

90000888 <_exit>:

void _exit (int status)
{
90000888:	b580      	push	{r7, lr}
9000088a:	b082      	sub	sp, #8
9000088c:	af00      	add	r7, sp, #0
9000088e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
90000890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90000894:	6878      	ldr	r0, [r7, #4]
90000896:	f7ff ffe7 	bl	90000868 <_kill>
  while (1) {}    /* Make sure we hang here */
9000089a:	e7fe      	b.n	9000089a <_exit+0x12>

9000089c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
9000089c:	b580      	push	{r7, lr}
9000089e:	b086      	sub	sp, #24
900008a0:	af00      	add	r7, sp, #0
900008a2:	60f8      	str	r0, [r7, #12]
900008a4:	60b9      	str	r1, [r7, #8]
900008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008a8:	2300      	movs	r3, #0
900008aa:	617b      	str	r3, [r7, #20]
900008ac:	e00a      	b.n	900008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
900008ae:	f3af 8000 	nop.w
900008b2:	4601      	mov	r1, r0
900008b4:	68bb      	ldr	r3, [r7, #8]
900008b6:	1c5a      	adds	r2, r3, #1
900008b8:	60ba      	str	r2, [r7, #8]
900008ba:	b2ca      	uxtb	r2, r1
900008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008be:	697b      	ldr	r3, [r7, #20]
900008c0:	3301      	adds	r3, #1
900008c2:	617b      	str	r3, [r7, #20]
900008c4:	697a      	ldr	r2, [r7, #20]
900008c6:	687b      	ldr	r3, [r7, #4]
900008c8:	429a      	cmp	r2, r3
900008ca:	dbf0      	blt.n	900008ae <_read+0x12>
  }

  return len;
900008cc:	687b      	ldr	r3, [r7, #4]
}
900008ce:	4618      	mov	r0, r3
900008d0:	3718      	adds	r7, #24
900008d2:	46bd      	mov	sp, r7
900008d4:	bd80      	pop	{r7, pc}

900008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
900008d6:	b580      	push	{r7, lr}
900008d8:	b086      	sub	sp, #24
900008da:	af00      	add	r7, sp, #0
900008dc:	60f8      	str	r0, [r7, #12]
900008de:	60b9      	str	r1, [r7, #8]
900008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008e2:	2300      	movs	r3, #0
900008e4:	617b      	str	r3, [r7, #20]
900008e6:	e009      	b.n	900008fc <_write+0x26>
  {
    __io_putchar(*ptr++);
900008e8:	68bb      	ldr	r3, [r7, #8]
900008ea:	1c5a      	adds	r2, r3, #1
900008ec:	60ba      	str	r2, [r7, #8]
900008ee:	781b      	ldrb	r3, [r3, #0]
900008f0:	4618      	mov	r0, r3
900008f2:	f00a fb0d 	bl	9000af10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
900008f6:	697b      	ldr	r3, [r7, #20]
900008f8:	3301      	adds	r3, #1
900008fa:	617b      	str	r3, [r7, #20]
900008fc:	697a      	ldr	r2, [r7, #20]
900008fe:	687b      	ldr	r3, [r7, #4]
90000900:	429a      	cmp	r2, r3
90000902:	dbf1      	blt.n	900008e8 <_write+0x12>
  }
  return len;
90000904:	687b      	ldr	r3, [r7, #4]
}
90000906:	4618      	mov	r0, r3
90000908:	3718      	adds	r7, #24
9000090a:	46bd      	mov	sp, r7
9000090c:	bd80      	pop	{r7, pc}

9000090e <_close>:

int _close(int file)
{
9000090e:	b480      	push	{r7}
90000910:	b083      	sub	sp, #12
90000912:	af00      	add	r7, sp, #0
90000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
90000916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9000091a:	4618      	mov	r0, r3
9000091c:	370c      	adds	r7, #12
9000091e:	46bd      	mov	sp, r7
90000920:	f85d 7b04 	ldr.w	r7, [sp], #4
90000924:	4770      	bx	lr

90000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
90000926:	b480      	push	{r7}
90000928:	b083      	sub	sp, #12
9000092a:	af00      	add	r7, sp, #0
9000092c:	6078      	str	r0, [r7, #4]
9000092e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
90000930:	683b      	ldr	r3, [r7, #0]
90000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90000936:	605a      	str	r2, [r3, #4]
  return 0;
90000938:	2300      	movs	r3, #0
}
9000093a:	4618      	mov	r0, r3
9000093c:	370c      	adds	r7, #12
9000093e:	46bd      	mov	sp, r7
90000940:	f85d 7b04 	ldr.w	r7, [sp], #4
90000944:	4770      	bx	lr

90000946 <_isatty>:

int _isatty(int file)
{
90000946:	b480      	push	{r7}
90000948:	b083      	sub	sp, #12
9000094a:	af00      	add	r7, sp, #0
9000094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
9000094e:	2301      	movs	r3, #1
}
90000950:	4618      	mov	r0, r3
90000952:	370c      	adds	r7, #12
90000954:	46bd      	mov	sp, r7
90000956:	f85d 7b04 	ldr.w	r7, [sp], #4
9000095a:	4770      	bx	lr

9000095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
9000095c:	b480      	push	{r7}
9000095e:	b085      	sub	sp, #20
90000960:	af00      	add	r7, sp, #0
90000962:	60f8      	str	r0, [r7, #12]
90000964:	60b9      	str	r1, [r7, #8]
90000966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
90000968:	2300      	movs	r3, #0
}
9000096a:	4618      	mov	r0, r3
9000096c:	3714      	adds	r7, #20
9000096e:	46bd      	mov	sp, r7
90000970:	f85d 7b04 	ldr.w	r7, [sp], #4
90000974:	4770      	bx	lr
	...

90000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000978:	b580      	push	{r7, lr}
9000097a:	b086      	sub	sp, #24
9000097c:	af00      	add	r7, sp, #0
9000097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000980:	4a14      	ldr	r2, [pc, #80]	; (900009d4 <_sbrk+0x5c>)
90000982:	4b15      	ldr	r3, [pc, #84]	; (900009d8 <_sbrk+0x60>)
90000984:	1ad3      	subs	r3, r2, r3
90000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000988:	697b      	ldr	r3, [r7, #20]
9000098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
9000098c:	4b13      	ldr	r3, [pc, #76]	; (900009dc <_sbrk+0x64>)
9000098e:	681b      	ldr	r3, [r3, #0]
90000990:	2b00      	cmp	r3, #0
90000992:	d102      	bne.n	9000099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000994:	4b11      	ldr	r3, [pc, #68]	; (900009dc <_sbrk+0x64>)
90000996:	4a12      	ldr	r2, [pc, #72]	; (900009e0 <_sbrk+0x68>)
90000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
9000099a:	4b10      	ldr	r3, [pc, #64]	; (900009dc <_sbrk+0x64>)
9000099c:	681a      	ldr	r2, [r3, #0]
9000099e:	687b      	ldr	r3, [r7, #4]
900009a0:	4413      	add	r3, r2
900009a2:	693a      	ldr	r2, [r7, #16]
900009a4:	429a      	cmp	r2, r3
900009a6:	d207      	bcs.n	900009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
900009a8:	f00b f812 	bl	9000b9d0 <__errno>
900009ac:	4603      	mov	r3, r0
900009ae:	220c      	movs	r2, #12
900009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
900009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900009b6:	e009      	b.n	900009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
900009b8:	4b08      	ldr	r3, [pc, #32]	; (900009dc <_sbrk+0x64>)
900009ba:	681b      	ldr	r3, [r3, #0]
900009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
900009be:	4b07      	ldr	r3, [pc, #28]	; (900009dc <_sbrk+0x64>)
900009c0:	681a      	ldr	r2, [r3, #0]
900009c2:	687b      	ldr	r3, [r7, #4]
900009c4:	4413      	add	r3, r2
900009c6:	4a05      	ldr	r2, [pc, #20]	; (900009dc <_sbrk+0x64>)
900009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
900009ca:	68fb      	ldr	r3, [r7, #12]
}
900009cc:	4618      	mov	r0, r3
900009ce:	3718      	adds	r7, #24
900009d0:	46bd      	mov	sp, r7
900009d2:	bd80      	pop	{r7, pc}
900009d4:	20020000 	.word	0x20020000
900009d8:	00001000 	.word	0x00001000
900009dc:	20000198 	.word	0x20000198
900009e0:	200050c8 	.word	0x200050c8

900009e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef * hhcd)
{
900009e4:	b580      	push	{r7, lr}
900009e6:	b082      	sub	sp, #8
900009e8:	af00      	add	r7, sp, #0
900009ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
900009ec:	687b      	ldr	r3, [r7, #4]
900009ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
900009f2:	4618      	mov	r0, r3
900009f4:	f009 fa4e 	bl	90009e94 <USBH_LL_IncTimer>
}
900009f8:	bf00      	nop
900009fa:	3708      	adds	r7, #8
900009fc:	46bd      	mov	sp, r7
900009fe:	bd80      	pop	{r7, pc}

90000a00 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef * hhcd)
{
90000a00:	b580      	push	{r7, lr}
90000a02:	b082      	sub	sp, #8
90000a04:	af00      	add	r7, sp, #0
90000a06:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
90000a08:	687b      	ldr	r3, [r7, #4]
90000a0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a0e:	4618      	mov	r0, r3
90000a10:	f009 fa86 	bl	90009f20 <USBH_LL_Connect>
}
90000a14:	bf00      	nop
90000a16:	3708      	adds	r7, #8
90000a18:	46bd      	mov	sp, r7
90000a1a:	bd80      	pop	{r7, pc}

90000a1c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef * hhcd)
{
90000a1c:	b580      	push	{r7, lr}
90000a1e:	b082      	sub	sp, #8
90000a20:	af00      	add	r7, sp, #0
90000a22:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
90000a24:	687b      	ldr	r3, [r7, #4]
90000a26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a2a:	4618      	mov	r0, r3
90000a2c:	f009 fa8f 	bl	90009f4e <USBH_LL_Disconnect>
}
90000a30:	bf00      	nop
90000a32:	3708      	adds	r7, #8
90000a34:	46bd      	mov	sp, r7
90000a36:	bd80      	pop	{r7, pc}

90000a38 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000a38:	b580      	push	{r7, lr}
90000a3a:	b082      	sub	sp, #8
90000a3c:	af00      	add	r7, sp, #0
90000a3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
90000a40:	687b      	ldr	r3, [r7, #4]
90000a42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a46:	4618      	mov	r0, r3
90000a48:	f009 fa4e 	bl	90009ee8 <USBH_LL_PortEnabled>
}
90000a4c:	bf00      	nop
90000a4e:	3708      	adds	r7, #8
90000a50:	46bd      	mov	sp, r7
90000a52:	bd80      	pop	{r7, pc}

90000a54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
90000a54:	b580      	push	{r7, lr}
90000a56:	b082      	sub	sp, #8
90000a58:	af00      	add	r7, sp, #0
90000a5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
90000a5c:	687b      	ldr	r3, [r7, #4]
90000a5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
90000a62:	4618      	mov	r0, r3
90000a64:	f009 fa4e 	bl	90009f04 <USBH_LL_PortDisabled>
}
90000a68:	bf00      	nop
90000a6a:	3708      	adds	r7, #8
90000a6c:	46bd      	mov	sp, r7
90000a6e:	bd80      	pop	{r7, pc}

90000a70 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef * hhcd,
                                         uint8_t chnum,
                                         HCD_URBStateTypeDef urb_state)
{
90000a70:	b480      	push	{r7}
90000a72:	b083      	sub	sp, #12
90000a74:	af00      	add	r7, sp, #0
90000a76:	6078      	str	r0, [r7, #4]
90000a78:	460b      	mov	r3, r1
90000a7a:	70fb      	strb	r3, [r7, #3]
90000a7c:	4613      	mov	r3, r2
90000a7e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
90000a80:	bf00      	nop
90000a82:	370c      	adds	r7, #12
90000a84:	46bd      	mov	sp, r7
90000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a8a:	4770      	bx	lr

90000a8c <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef * phost)
{
90000a8c:	b580      	push	{r7, lr}
90000a8e:	b082      	sub	sp, #8
90000a90:	af00      	add	r7, sp, #0
90000a92:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
90000a94:	687b      	ldr	r3, [r7, #4]
90000a96:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
90000a9a:	4618      	mov	r0, r3
90000a9c:	f003 fd00 	bl	900044a0 <HAL_HCD_Stop>
  return USBH_OK;
90000aa0:	2300      	movs	r3, #0
}
90000aa2:	4618      	mov	r0, r3
90000aa4:	3708      	adds	r7, #8
90000aa6:	46bd      	mov	sp, r7
90000aa8:	bd80      	pop	{r7, pc}
	...

90000aac <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
90000aac:	b580      	push	{r7, lr}
90000aae:	b084      	sub	sp, #16
90000ab0:	af00      	add	r7, sp, #0
90000ab2:	6078      	str	r0, [r7, #4]
90000ab4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
90000ab6:	687b      	ldr	r3, [r7, #4]
90000ab8:	2b00      	cmp	r3, #0
90000aba:	d103      	bne.n	90000ac4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
90000abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000ac0:	60fb      	str	r3, [r7, #12]
90000ac2:	e02c      	b.n	90000b1e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
90000ac4:	683b      	ldr	r3, [r7, #0]
90000ac6:	681a      	ldr	r2, [r3, #0]
90000ac8:	687b      	ldr	r3, [r7, #4]
90000aca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
90000acc:	683b      	ldr	r3, [r7, #0]
90000ace:	685a      	ldr	r2, [r3, #4]
90000ad0:	687b      	ldr	r3, [r7, #4]
90000ad2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
90000ad4:	683b      	ldr	r3, [r7, #0]
90000ad6:	891a      	ldrh	r2, [r3, #8]
90000ad8:	687b      	ldr	r3, [r7, #4]
90000ada:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
90000adc:	683b      	ldr	r3, [r7, #0]
90000ade:	68da      	ldr	r2, [r3, #12]
90000ae0:	687b      	ldr	r3, [r7, #4]
90000ae2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
90000ae4:	683b      	ldr	r3, [r7, #0]
90000ae6:	691a      	ldr	r2, [r3, #16]
90000ae8:	687b      	ldr	r3, [r7, #4]
90000aea:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90000aec:	683b      	ldr	r3, [r7, #0]
90000aee:	695a      	ldr	r2, [r3, #20]
90000af0:	687b      	ldr	r3, [r7, #4]
90000af2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
90000af4:	687b      	ldr	r3, [r7, #4]
90000af6:	4a0c      	ldr	r2, [pc, #48]	; (90000b28 <FT5336_RegisterBusIO+0x7c>)
90000af8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
90000afa:	687b      	ldr	r3, [r7, #4]
90000afc:	4a0b      	ldr	r2, [pc, #44]	; (90000b2c <FT5336_RegisterBusIO+0x80>)
90000afe:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
90000b00:	687b      	ldr	r3, [r7, #4]
90000b02:	687a      	ldr	r2, [r7, #4]
90000b04:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
90000b06:	687b      	ldr	r3, [r7, #4]
90000b08:	681b      	ldr	r3, [r3, #0]
90000b0a:	2b00      	cmp	r3, #0
90000b0c:	d004      	beq.n	90000b18 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
90000b0e:	687b      	ldr	r3, [r7, #4]
90000b10:	681b      	ldr	r3, [r3, #0]
90000b12:	4798      	blx	r3
90000b14:	60f8      	str	r0, [r7, #12]
90000b16:	e002      	b.n	90000b1e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
90000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000b1c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
90000b1e:	68fb      	ldr	r3, [r7, #12]
}
90000b20:	4618      	mov	r0, r3
90000b22:	3710      	adds	r7, #16
90000b24:	46bd      	mov	sp, r7
90000b26:	bd80      	pop	{r7, pc}
90000b28:	90000f25 	.word	0x90000f25
90000b2c:	90000f59 	.word	0x90000f59

90000b30 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
90000b30:	b480      	push	{r7}
90000b32:	b083      	sub	sp, #12
90000b34:	af00      	add	r7, sp, #0
90000b36:	6078      	str	r0, [r7, #4]
90000b38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90000b3a:	683b      	ldr	r3, [r7, #0]
90000b3c:	2201      	movs	r2, #1
90000b3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
90000b40:	683b      	ldr	r3, [r7, #0]
90000b42:	2201      	movs	r2, #1
90000b44:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90000b46:	683b      	ldr	r3, [r7, #0]
90000b48:	2205      	movs	r2, #5
90000b4a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90000b4c:	683b      	ldr	r3, [r7, #0]
90000b4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90000b52:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90000b54:	683b      	ldr	r3, [r7, #0]
90000b56:	f44f 7288 	mov.w	r2, #272	; 0x110
90000b5a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
90000b5c:	2300      	movs	r3, #0
}
90000b5e:	4618      	mov	r0, r3
90000b60:	370c      	adds	r7, #12
90000b62:	46bd      	mov	sp, r7
90000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b68:	4770      	bx	lr

90000b6a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
90000b6a:	b580      	push	{r7, lr}
90000b6c:	b084      	sub	sp, #16
90000b6e:	af00      	add	r7, sp, #0
90000b70:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000b72:	2300      	movs	r3, #0
90000b74:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
90000b76:	687b      	ldr	r3, [r7, #4]
90000b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
90000b7c:	2b00      	cmp	r3, #0
90000b7e:	d10d      	bne.n	90000b9c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
90000b80:	687b      	ldr	r3, [r7, #4]
90000b82:	681b      	ldr	r3, [r3, #0]
90000b84:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
90000b86:	6878      	ldr	r0, [r7, #4]
90000b88:	f000 f987 	bl	90000e9a <FT5336_DisableIT>
90000b8c:	4602      	mov	r2, r0
90000b8e:	68fb      	ldr	r3, [r7, #12]
90000b90:	4413      	add	r3, r2
90000b92:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
90000b94:	687b      	ldr	r3, [r7, #4]
90000b96:	2201      	movs	r2, #1
90000b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
90000b9c:	68fb      	ldr	r3, [r7, #12]
90000b9e:	2b00      	cmp	r3, #0
90000ba0:	d002      	beq.n	90000ba8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
90000ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000ba6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000ba8:	68fb      	ldr	r3, [r7, #12]
}
90000baa:	4618      	mov	r0, r3
90000bac:	3710      	adds	r7, #16
90000bae:	46bd      	mov	sp, r7
90000bb0:	bd80      	pop	{r7, pc}

90000bb2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
90000bb2:	b480      	push	{r7}
90000bb4:	b085      	sub	sp, #20
90000bb6:	af00      	add	r7, sp, #0
90000bb8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
90000bba:	2300      	movs	r3, #0
90000bbc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
90000bbe:	687b      	ldr	r3, [r7, #4]
90000bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
90000bc4:	2b01      	cmp	r3, #1
90000bc6:	d103      	bne.n	90000bd0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
90000bc8:	687b      	ldr	r3, [r7, #4]
90000bca:	2200      	movs	r2, #0
90000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
90000bd0:	68fb      	ldr	r3, [r7, #12]
}
90000bd2:	4618      	mov	r0, r3
90000bd4:	3714      	adds	r7, #20
90000bd6:	46bd      	mov	sp, r7
90000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000bdc:	4770      	bx	lr

90000bde <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
90000bde:	b580      	push	{r7, lr}
90000be0:	b084      	sub	sp, #16
90000be2:	af00      	add	r7, sp, #0
90000be4:	6078      	str	r0, [r7, #4]
90000be6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90000be8:	687b      	ldr	r3, [r7, #4]
90000bea:	f103 0218 	add.w	r2, r3, #24
90000bee:	683b      	ldr	r3, [r7, #0]
90000bf0:	681b      	ldr	r3, [r3, #0]
90000bf2:	b2db      	uxtb	r3, r3
90000bf4:	4619      	mov	r1, r3
90000bf6:	4610      	mov	r0, r2
90000bf8:	f000 fa25 	bl	90001046 <ft5336_radian_value>
90000bfc:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90000bfe:	687b      	ldr	r3, [r7, #4]
90000c00:	f103 0218 	add.w	r2, r3, #24
90000c04:	683b      	ldr	r3, [r7, #0]
90000c06:	685b      	ldr	r3, [r3, #4]
90000c08:	b2db      	uxtb	r3, r3
90000c0a:	4619      	mov	r1, r3
90000c0c:	4610      	mov	r0, r2
90000c0e:	f000 fa2b 	bl	90001068 <ft5336_offset_left_right>
90000c12:	4602      	mov	r2, r0
90000c14:	68fb      	ldr	r3, [r7, #12]
90000c16:	4413      	add	r3, r2
90000c18:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90000c1a:	687b      	ldr	r3, [r7, #4]
90000c1c:	f103 0218 	add.w	r2, r3, #24
90000c20:	683b      	ldr	r3, [r7, #0]
90000c22:	689b      	ldr	r3, [r3, #8]
90000c24:	b2db      	uxtb	r3, r3
90000c26:	4619      	mov	r1, r3
90000c28:	4610      	mov	r0, r2
90000c2a:	f000 fa2e 	bl	9000108a <ft5336_offset_up_down>
90000c2e:	4602      	mov	r2, r0
90000c30:	68fb      	ldr	r3, [r7, #12]
90000c32:	4413      	add	r3, r2
90000c34:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90000c36:	687b      	ldr	r3, [r7, #4]
90000c38:	f103 0218 	add.w	r2, r3, #24
90000c3c:	683b      	ldr	r3, [r7, #0]
90000c3e:	68db      	ldr	r3, [r3, #12]
90000c40:	b2db      	uxtb	r3, r3
90000c42:	4619      	mov	r1, r3
90000c44:	4610      	mov	r0, r2
90000c46:	f000 fa31 	bl	900010ac <ft5336_disatnce_left_right>
90000c4a:	4602      	mov	r2, r0
90000c4c:	68fb      	ldr	r3, [r7, #12]
90000c4e:	4413      	add	r3, r2
90000c50:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90000c52:	687b      	ldr	r3, [r7, #4]
90000c54:	f103 0218 	add.w	r2, r3, #24
90000c58:	683b      	ldr	r3, [r7, #0]
90000c5a:	691b      	ldr	r3, [r3, #16]
90000c5c:	b2db      	uxtb	r3, r3
90000c5e:	4619      	mov	r1, r3
90000c60:	4610      	mov	r0, r2
90000c62:	f000 fa34 	bl	900010ce <ft5336_distance_up_down>
90000c66:	4602      	mov	r2, r0
90000c68:	68fb      	ldr	r3, [r7, #12]
90000c6a:	4413      	add	r3, r2
90000c6c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90000c6e:	687b      	ldr	r3, [r7, #4]
90000c70:	f103 0218 	add.w	r2, r3, #24
90000c74:	683b      	ldr	r3, [r7, #0]
90000c76:	695b      	ldr	r3, [r3, #20]
90000c78:	b2db      	uxtb	r3, r3
90000c7a:	4619      	mov	r1, r3
90000c7c:	4610      	mov	r0, r2
90000c7e:	f000 fa37 	bl	900010f0 <ft5336_distance_zoom>
90000c82:	4602      	mov	r2, r0
90000c84:	68fb      	ldr	r3, [r7, #12]
90000c86:	4413      	add	r3, r2
90000c88:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
90000c8a:	68fb      	ldr	r3, [r7, #12]
90000c8c:	2b00      	cmp	r3, #0
90000c8e:	d002      	beq.n	90000c96 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
90000c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000c94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
90000c96:	68fb      	ldr	r3, [r7, #12]
}
90000c98:	4618      	mov	r0, r3
90000c9a:	3710      	adds	r7, #16
90000c9c:	46bd      	mov	sp, r7
90000c9e:	bd80      	pop	{r7, pc}

90000ca0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
90000ca0:	b580      	push	{r7, lr}
90000ca2:	b082      	sub	sp, #8
90000ca4:	af00      	add	r7, sp, #0
90000ca6:	6078      	str	r0, [r7, #4]
90000ca8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90000caa:	687b      	ldr	r3, [r7, #4]
90000cac:	3318      	adds	r3, #24
90000cae:	6839      	ldr	r1, [r7, #0]
90000cb0:	4618      	mov	r0, r3
90000cb2:	f000 fa3f 	bl	90001134 <ft5336_chip_id>
90000cb6:	4603      	mov	r3, r0
}
90000cb8:	4618      	mov	r0, r3
90000cba:	3708      	adds	r7, #8
90000cbc:	46bd      	mov	sp, r7
90000cbe:	bd80      	pop	{r7, pc}

90000cc0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
90000cc0:	b580      	push	{r7, lr}
90000cc2:	b084      	sub	sp, #16
90000cc4:	af00      	add	r7, sp, #0
90000cc6:	6078      	str	r0, [r7, #4]
90000cc8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000cca:	2300      	movs	r3, #0
90000ccc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000cce:	6878      	ldr	r0, [r7, #4]
90000cd0:	f000 f908 	bl	90000ee4 <FT5336_DetectTouch>
90000cd4:	4603      	mov	r3, r0
90000cd6:	461a      	mov	r2, r3
90000cd8:	683b      	ldr	r3, [r7, #0]
90000cda:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000cdc:	687b      	ldr	r3, [r7, #4]
90000cde:	f103 0018 	add.w	r0, r3, #24
90000ce2:	f107 0208 	add.w	r2, r7, #8
90000ce6:	2304      	movs	r3, #4
90000ce8:	2103      	movs	r1, #3
90000cea:	f000 f94f 	bl	90000f8c <ft5336_read_reg>
90000cee:	4603      	mov	r3, r0
90000cf0:	2b00      	cmp	r3, #0
90000cf2:	d003      	beq.n	90000cfc <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
90000cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000cf8:	60fb      	str	r3, [r7, #12]
90000cfa:	e00f      	b.n	90000d1c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90000cfc:	7a3b      	ldrb	r3, [r7, #8]
90000cfe:	021b      	lsls	r3, r3, #8
90000d00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000d04:	7a7a      	ldrb	r2, [r7, #9]
90000d06:	431a      	orrs	r2, r3
90000d08:	683b      	ldr	r3, [r7, #0]
90000d0a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90000d0c:	7abb      	ldrb	r3, [r7, #10]
90000d0e:	021b      	lsls	r3, r3, #8
90000d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90000d14:	7afa      	ldrb	r2, [r7, #11]
90000d16:	431a      	orrs	r2, r3
90000d18:	683b      	ldr	r3, [r7, #0]
90000d1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
90000d1c:	68fb      	ldr	r3, [r7, #12]
}
90000d1e:	4618      	mov	r0, r3
90000d20:	3710      	adds	r7, #16
90000d22:	46bd      	mov	sp, r7
90000d24:	bd80      	pop	{r7, pc}

90000d26 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
90000d26:	b580      	push	{r7, lr}
90000d28:	b08c      	sub	sp, #48	; 0x30
90000d2a:	af00      	add	r7, sp, #0
90000d2c:	6078      	str	r0, [r7, #4]
90000d2e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
90000d30:	2300      	movs	r3, #0
90000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90000d34:	6878      	ldr	r0, [r7, #4]
90000d36:	f000 f8d5 	bl	90000ee4 <FT5336_DetectTouch>
90000d3a:	4603      	mov	r3, r0
90000d3c:	461a      	mov	r2, r3
90000d3e:	683b      	ldr	r3, [r7, #0]
90000d40:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90000d42:	687b      	ldr	r3, [r7, #4]
90000d44:	f103 0018 	add.w	r0, r3, #24
90000d48:	f107 0208 	add.w	r2, r7, #8
90000d4c:	231e      	movs	r3, #30
90000d4e:	2103      	movs	r1, #3
90000d50:	f000 f91c 	bl	90000f8c <ft5336_read_reg>
90000d54:	4603      	mov	r3, r0
90000d56:	2b00      	cmp	r3, #0
90000d58:	d003      	beq.n	90000d62 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
90000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
90000d60:	e077      	b.n	90000e52 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000d62:	2300      	movs	r3, #0
90000d64:	62bb      	str	r3, [r7, #40]	; 0x28
90000d66:	e071      	b.n	90000e4c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90000d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000d6a:	4613      	mov	r3, r2
90000d6c:	005b      	lsls	r3, r3, #1
90000d6e:	4413      	add	r3, r2
90000d70:	005b      	lsls	r3, r3, #1
90000d72:	3330      	adds	r3, #48	; 0x30
90000d74:	443b      	add	r3, r7
90000d76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d7a:	021b      	lsls	r3, r3, #8
90000d7c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
90000d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000d82:	4613      	mov	r3, r2
90000d84:	005b      	lsls	r3, r3, #1
90000d86:	4413      	add	r3, r2
90000d88:	005b      	lsls	r3, r3, #1
90000d8a:	3301      	adds	r3, #1
90000d8c:	3330      	adds	r3, #48	; 0x30
90000d8e:	443b      	add	r3, r7
90000d90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000d94:	ea41 0203 	orr.w	r2, r1, r3
90000d98:	6839      	ldr	r1, [r7, #0]
90000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000d9c:	009b      	lsls	r3, r3, #2
90000d9e:	440b      	add	r3, r1
90000da0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90000da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000da4:	4613      	mov	r3, r2
90000da6:	005b      	lsls	r3, r3, #1
90000da8:	4413      	add	r3, r2
90000daa:	005b      	lsls	r3, r3, #1
90000dac:	3302      	adds	r3, #2
90000dae:	3330      	adds	r3, #48	; 0x30
90000db0:	443b      	add	r3, r7
90000db2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000db6:	021b      	lsls	r3, r3, #8
90000db8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
90000dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000dbe:	4613      	mov	r3, r2
90000dc0:	005b      	lsls	r3, r3, #1
90000dc2:	4413      	add	r3, r2
90000dc4:	005b      	lsls	r3, r3, #1
90000dc6:	3303      	adds	r3, #3
90000dc8:	3330      	adds	r3, #48	; 0x30
90000dca:	443b      	add	r3, r7
90000dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000dd0:	4319      	orrs	r1, r3
90000dd2:	683b      	ldr	r3, [r7, #0]
90000dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000dd6:	3206      	adds	r2, #6
90000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90000ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000dde:	4613      	mov	r3, r2
90000de0:	005b      	lsls	r3, r3, #1
90000de2:	4413      	add	r3, r2
90000de4:	005b      	lsls	r3, r3, #1
90000de6:	3330      	adds	r3, #48	; 0x30
90000de8:	443b      	add	r3, r7
90000dea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000dee:	099b      	lsrs	r3, r3, #6
90000df0:	b2db      	uxtb	r3, r3
90000df2:	4619      	mov	r1, r3
90000df4:	683b      	ldr	r3, [r7, #0]
90000df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000df8:	3210      	adds	r2, #16
90000dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90000dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000e00:	4613      	mov	r3, r2
90000e02:	005b      	lsls	r3, r3, #1
90000e04:	4413      	add	r3, r2
90000e06:	005b      	lsls	r3, r3, #1
90000e08:	3304      	adds	r3, #4
90000e0a:	3330      	adds	r3, #48	; 0x30
90000e0c:	443b      	add	r3, r7
90000e0e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000e12:	4619      	mov	r1, r3
90000e14:	683a      	ldr	r2, [r7, #0]
90000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e18:	330a      	adds	r3, #10
90000e1a:	009b      	lsls	r3, r3, #2
90000e1c:	4413      	add	r3, r2
90000e1e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90000e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
90000e22:	4613      	mov	r3, r2
90000e24:	005b      	lsls	r3, r3, #1
90000e26:	4413      	add	r3, r2
90000e28:	005b      	lsls	r3, r3, #1
90000e2a:	3305      	adds	r3, #5
90000e2c:	3330      	adds	r3, #48	; 0x30
90000e2e:	443b      	add	r3, r7
90000e30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
90000e34:	091b      	lsrs	r3, r3, #4
90000e36:	b2db      	uxtb	r3, r3
90000e38:	4619      	mov	r1, r3
90000e3a:	683a      	ldr	r2, [r7, #0]
90000e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e3e:	3314      	adds	r3, #20
90000e40:	009b      	lsls	r3, r3, #2
90000e42:	4413      	add	r3, r2
90000e44:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
90000e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e48:	3301      	adds	r3, #1
90000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
90000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90000e4e:	2b04      	cmp	r3, #4
90000e50:	d98a      	bls.n	90000d68 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
90000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
90000e54:	4618      	mov	r0, r3
90000e56:	3730      	adds	r7, #48	; 0x30
90000e58:	46bd      	mov	sp, r7
90000e5a:	bd80      	pop	{r7, pc}

90000e5c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
90000e5c:	b580      	push	{r7, lr}
90000e5e:	b082      	sub	sp, #8
90000e60:	af00      	add	r7, sp, #0
90000e62:	6078      	str	r0, [r7, #4]
90000e64:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90000e66:	687b      	ldr	r3, [r7, #4]
90000e68:	3318      	adds	r3, #24
90000e6a:	6839      	ldr	r1, [r7, #0]
90000e6c:	4618      	mov	r0, r3
90000e6e:	f000 f8bb 	bl	90000fe8 <ft5336_gest_id>
90000e72:	4603      	mov	r3, r0
}
90000e74:	4618      	mov	r0, r3
90000e76:	3708      	adds	r7, #8
90000e78:	46bd      	mov	sp, r7
90000e7a:	bd80      	pop	{r7, pc}

90000e7c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
90000e7c:	b580      	push	{r7, lr}
90000e7e:	b082      	sub	sp, #8
90000e80:	af00      	add	r7, sp, #0
90000e82:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90000e84:	687b      	ldr	r3, [r7, #4]
90000e86:	3318      	adds	r3, #24
90000e88:	2101      	movs	r1, #1
90000e8a:	4618      	mov	r0, r3
90000e8c:	f000 f941 	bl	90001112 <ft5336_g_mode>
90000e90:	4603      	mov	r3, r0
}
90000e92:	4618      	mov	r0, r3
90000e94:	3708      	adds	r7, #8
90000e96:	46bd      	mov	sp, r7
90000e98:	bd80      	pop	{r7, pc}

90000e9a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
90000e9a:	b580      	push	{r7, lr}
90000e9c:	b082      	sub	sp, #8
90000e9e:	af00      	add	r7, sp, #0
90000ea0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90000ea2:	687b      	ldr	r3, [r7, #4]
90000ea4:	3318      	adds	r3, #24
90000ea6:	2100      	movs	r1, #0
90000ea8:	4618      	mov	r0, r3
90000eaa:	f000 f932 	bl	90001112 <ft5336_g_mode>
90000eae:	4603      	mov	r3, r0
}
90000eb0:	4618      	mov	r0, r3
90000eb2:	3708      	adds	r7, #8
90000eb4:	46bd      	mov	sp, r7
90000eb6:	bd80      	pop	{r7, pc}

90000eb8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
90000eb8:	b480      	push	{r7}
90000eba:	b083      	sub	sp, #12
90000ebc:	af00      	add	r7, sp, #0
90000ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000ec0:	2300      	movs	r3, #0
}
90000ec2:	4618      	mov	r0, r3
90000ec4:	370c      	adds	r7, #12
90000ec6:	46bd      	mov	sp, r7
90000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ecc:	4770      	bx	lr

90000ece <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
90000ece:	b480      	push	{r7}
90000ed0:	b083      	sub	sp, #12
90000ed2:	af00      	add	r7, sp, #0
90000ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
90000ed6:	2300      	movs	r3, #0
}
90000ed8:	4618      	mov	r0, r3
90000eda:	370c      	adds	r7, #12
90000edc:	46bd      	mov	sp, r7
90000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ee2:	4770      	bx	lr

90000ee4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
90000ee4:	b580      	push	{r7, lr}
90000ee6:	b084      	sub	sp, #16
90000ee8:	af00      	add	r7, sp, #0
90000eea:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90000eec:	687b      	ldr	r3, [r7, #4]
90000eee:	3318      	adds	r3, #24
90000ef0:	f107 020b 	add.w	r2, r7, #11
90000ef4:	4611      	mov	r1, r2
90000ef6:	4618      	mov	r0, r3
90000ef8:	f000 f886 	bl	90001008 <ft5336_td_status>
90000efc:	4603      	mov	r3, r0
90000efe:	2b00      	cmp	r3, #0
90000f00:	d003      	beq.n	90000f0a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
90000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000f06:	60fb      	str	r3, [r7, #12]
90000f08:	e007      	b.n	90000f1a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90000f0a:	7afb      	ldrb	r3, [r7, #11]
90000f0c:	2b05      	cmp	r3, #5
90000f0e:	d902      	bls.n	90000f16 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
90000f10:	2300      	movs	r3, #0
90000f12:	60fb      	str	r3, [r7, #12]
90000f14:	e001      	b.n	90000f1a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
90000f16:	7afb      	ldrb	r3, [r7, #11]
90000f18:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
90000f1a:	68fb      	ldr	r3, [r7, #12]
}
90000f1c:	4618      	mov	r0, r3
90000f1e:	3710      	adds	r7, #16
90000f20:	46bd      	mov	sp, r7
90000f22:	bd80      	pop	{r7, pc}

90000f24 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000f24:	b590      	push	{r4, r7, lr}
90000f26:	b087      	sub	sp, #28
90000f28:	af00      	add	r7, sp, #0
90000f2a:	60f8      	str	r0, [r7, #12]
90000f2c:	607a      	str	r2, [r7, #4]
90000f2e:	461a      	mov	r2, r3
90000f30:	460b      	mov	r3, r1
90000f32:	72fb      	strb	r3, [r7, #11]
90000f34:	4613      	mov	r3, r2
90000f36:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000f38:	68fb      	ldr	r3, [r7, #12]
90000f3a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90000f3c:	697b      	ldr	r3, [r7, #20]
90000f3e:	691c      	ldr	r4, [r3, #16]
90000f40:	697b      	ldr	r3, [r7, #20]
90000f42:	8918      	ldrh	r0, [r3, #8]
90000f44:	7afb      	ldrb	r3, [r7, #11]
90000f46:	b299      	uxth	r1, r3
90000f48:	893b      	ldrh	r3, [r7, #8]
90000f4a:	687a      	ldr	r2, [r7, #4]
90000f4c:	47a0      	blx	r4
90000f4e:	4603      	mov	r3, r0
}
90000f50:	4618      	mov	r0, r3
90000f52:	371c      	adds	r7, #28
90000f54:	46bd      	mov	sp, r7
90000f56:	bd90      	pop	{r4, r7, pc}

90000f58 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90000f58:	b590      	push	{r4, r7, lr}
90000f5a:	b087      	sub	sp, #28
90000f5c:	af00      	add	r7, sp, #0
90000f5e:	60f8      	str	r0, [r7, #12]
90000f60:	607a      	str	r2, [r7, #4]
90000f62:	461a      	mov	r2, r3
90000f64:	460b      	mov	r3, r1
90000f66:	72fb      	strb	r3, [r7, #11]
90000f68:	4613      	mov	r3, r2
90000f6a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
90000f6c:	68fb      	ldr	r3, [r7, #12]
90000f6e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90000f70:	697b      	ldr	r3, [r7, #20]
90000f72:	68dc      	ldr	r4, [r3, #12]
90000f74:	697b      	ldr	r3, [r7, #20]
90000f76:	8918      	ldrh	r0, [r3, #8]
90000f78:	7afb      	ldrb	r3, [r7, #11]
90000f7a:	b299      	uxth	r1, r3
90000f7c:	893b      	ldrh	r3, [r7, #8]
90000f7e:	687a      	ldr	r2, [r7, #4]
90000f80:	47a0      	blx	r4
90000f82:	4603      	mov	r3, r0
}
90000f84:	4618      	mov	r0, r3
90000f86:	371c      	adds	r7, #28
90000f88:	46bd      	mov	sp, r7
90000f8a:	bd90      	pop	{r4, r7, pc}

90000f8c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90000f8c:	b590      	push	{r4, r7, lr}
90000f8e:	b085      	sub	sp, #20
90000f90:	af00      	add	r7, sp, #0
90000f92:	60f8      	str	r0, [r7, #12]
90000f94:	607a      	str	r2, [r7, #4]
90000f96:	461a      	mov	r2, r3
90000f98:	460b      	mov	r3, r1
90000f9a:	72fb      	strb	r3, [r7, #11]
90000f9c:	4613      	mov	r3, r2
90000f9e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90000fa0:	68fb      	ldr	r3, [r7, #12]
90000fa2:	685c      	ldr	r4, [r3, #4]
90000fa4:	68fb      	ldr	r3, [r7, #12]
90000fa6:	6898      	ldr	r0, [r3, #8]
90000fa8:	893b      	ldrh	r3, [r7, #8]
90000faa:	7af9      	ldrb	r1, [r7, #11]
90000fac:	687a      	ldr	r2, [r7, #4]
90000fae:	47a0      	blx	r4
90000fb0:	4603      	mov	r3, r0
}
90000fb2:	4618      	mov	r0, r3
90000fb4:	3714      	adds	r7, #20
90000fb6:	46bd      	mov	sp, r7
90000fb8:	bd90      	pop	{r4, r7, pc}

90000fba <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
90000fba:	b590      	push	{r4, r7, lr}
90000fbc:	b085      	sub	sp, #20
90000fbe:	af00      	add	r7, sp, #0
90000fc0:	60f8      	str	r0, [r7, #12]
90000fc2:	607a      	str	r2, [r7, #4]
90000fc4:	461a      	mov	r2, r3
90000fc6:	460b      	mov	r3, r1
90000fc8:	72fb      	strb	r3, [r7, #11]
90000fca:	4613      	mov	r3, r2
90000fcc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90000fce:	68fb      	ldr	r3, [r7, #12]
90000fd0:	681c      	ldr	r4, [r3, #0]
90000fd2:	68fb      	ldr	r3, [r7, #12]
90000fd4:	6898      	ldr	r0, [r3, #8]
90000fd6:	893b      	ldrh	r3, [r7, #8]
90000fd8:	7af9      	ldrb	r1, [r7, #11]
90000fda:	687a      	ldr	r2, [r7, #4]
90000fdc:	47a0      	blx	r4
90000fde:	4603      	mov	r3, r0
}
90000fe0:	4618      	mov	r0, r3
90000fe2:	3714      	adds	r7, #20
90000fe4:	46bd      	mov	sp, r7
90000fe6:	bd90      	pop	{r4, r7, pc}

90000fe8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90000fe8:	b580      	push	{r7, lr}
90000fea:	b082      	sub	sp, #8
90000fec:	af00      	add	r7, sp, #0
90000fee:	6078      	str	r0, [r7, #4]
90000ff0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
90000ff2:	2301      	movs	r3, #1
90000ff4:	683a      	ldr	r2, [r7, #0]
90000ff6:	2101      	movs	r1, #1
90000ff8:	6878      	ldr	r0, [r7, #4]
90000ffa:	f7ff ffc7 	bl	90000f8c <ft5336_read_reg>
90000ffe:	4603      	mov	r3, r0
}
90001000:	4618      	mov	r0, r3
90001002:	3708      	adds	r7, #8
90001004:	46bd      	mov	sp, r7
90001006:	bd80      	pop	{r7, pc}

90001008 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90001008:	b580      	push	{r7, lr}
9000100a:	b084      	sub	sp, #16
9000100c:	af00      	add	r7, sp, #0
9000100e:	6078      	str	r0, [r7, #4]
90001010:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
90001012:	2301      	movs	r3, #1
90001014:	683a      	ldr	r2, [r7, #0]
90001016:	2102      	movs	r1, #2
90001018:	6878      	ldr	r0, [r7, #4]
9000101a:	f7ff ffb7 	bl	90000f8c <ft5336_read_reg>
9000101e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
90001020:	68fb      	ldr	r3, [r7, #12]
90001022:	2b00      	cmp	r3, #0
90001024:	d10a      	bne.n	9000103c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90001026:	683b      	ldr	r3, [r7, #0]
90001028:	781b      	ldrb	r3, [r3, #0]
9000102a:	f003 030f 	and.w	r3, r3, #15
9000102e:	b2da      	uxtb	r2, r3
90001030:	683b      	ldr	r3, [r7, #0]
90001032:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
90001034:	683b      	ldr	r3, [r7, #0]
90001036:	781a      	ldrb	r2, [r3, #0]
90001038:	683b      	ldr	r3, [r7, #0]
9000103a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
9000103c:	68fb      	ldr	r3, [r7, #12]
}
9000103e:	4618      	mov	r0, r3
90001040:	3710      	adds	r7, #16
90001042:	46bd      	mov	sp, r7
90001044:	bd80      	pop	{r7, pc}

90001046 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90001046:	b580      	push	{r7, lr}
90001048:	b082      	sub	sp, #8
9000104a:	af00      	add	r7, sp, #0
9000104c:	6078      	str	r0, [r7, #4]
9000104e:	460b      	mov	r3, r1
90001050:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
90001052:	1cfa      	adds	r2, r7, #3
90001054:	2301      	movs	r3, #1
90001056:	2191      	movs	r1, #145	; 0x91
90001058:	6878      	ldr	r0, [r7, #4]
9000105a:	f7ff ffae 	bl	90000fba <ft5336_write_reg>
9000105e:	4603      	mov	r3, r0
}
90001060:	4618      	mov	r0, r3
90001062:	3708      	adds	r7, #8
90001064:	46bd      	mov	sp, r7
90001066:	bd80      	pop	{r7, pc}

90001068 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90001068:	b580      	push	{r7, lr}
9000106a:	b082      	sub	sp, #8
9000106c:	af00      	add	r7, sp, #0
9000106e:	6078      	str	r0, [r7, #4]
90001070:	460b      	mov	r3, r1
90001072:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
90001074:	1cfa      	adds	r2, r7, #3
90001076:	2301      	movs	r3, #1
90001078:	2192      	movs	r1, #146	; 0x92
9000107a:	6878      	ldr	r0, [r7, #4]
9000107c:	f7ff ff9d 	bl	90000fba <ft5336_write_reg>
90001080:	4603      	mov	r3, r0
}
90001082:	4618      	mov	r0, r3
90001084:	3708      	adds	r7, #8
90001086:	46bd      	mov	sp, r7
90001088:	bd80      	pop	{r7, pc}

9000108a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
9000108a:	b580      	push	{r7, lr}
9000108c:	b082      	sub	sp, #8
9000108e:	af00      	add	r7, sp, #0
90001090:	6078      	str	r0, [r7, #4]
90001092:	460b      	mov	r3, r1
90001094:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
90001096:	1cfa      	adds	r2, r7, #3
90001098:	2301      	movs	r3, #1
9000109a:	2193      	movs	r1, #147	; 0x93
9000109c:	6878      	ldr	r0, [r7, #4]
9000109e:	f7ff ff8c 	bl	90000fba <ft5336_write_reg>
900010a2:	4603      	mov	r3, r0
}
900010a4:	4618      	mov	r0, r3
900010a6:	3708      	adds	r7, #8
900010a8:	46bd      	mov	sp, r7
900010aa:	bd80      	pop	{r7, pc}

900010ac <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900010ac:	b580      	push	{r7, lr}
900010ae:	b082      	sub	sp, #8
900010b0:	af00      	add	r7, sp, #0
900010b2:	6078      	str	r0, [r7, #4]
900010b4:	460b      	mov	r3, r1
900010b6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
900010b8:	1cfa      	adds	r2, r7, #3
900010ba:	2301      	movs	r3, #1
900010bc:	2194      	movs	r1, #148	; 0x94
900010be:	6878      	ldr	r0, [r7, #4]
900010c0:	f7ff ff7b 	bl	90000fba <ft5336_write_reg>
900010c4:	4603      	mov	r3, r0
}
900010c6:	4618      	mov	r0, r3
900010c8:	3708      	adds	r7, #8
900010ca:	46bd      	mov	sp, r7
900010cc:	bd80      	pop	{r7, pc}

900010ce <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
900010ce:	b580      	push	{r7, lr}
900010d0:	b082      	sub	sp, #8
900010d2:	af00      	add	r7, sp, #0
900010d4:	6078      	str	r0, [r7, #4]
900010d6:	460b      	mov	r3, r1
900010d8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
900010da:	1cfa      	adds	r2, r7, #3
900010dc:	2301      	movs	r3, #1
900010de:	2195      	movs	r1, #149	; 0x95
900010e0:	6878      	ldr	r0, [r7, #4]
900010e2:	f7ff ff6a 	bl	90000fba <ft5336_write_reg>
900010e6:	4603      	mov	r3, r0
}
900010e8:	4618      	mov	r0, r3
900010ea:	3708      	adds	r7, #8
900010ec:	46bd      	mov	sp, r7
900010ee:	bd80      	pop	{r7, pc}

900010f0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
900010f0:	b580      	push	{r7, lr}
900010f2:	b082      	sub	sp, #8
900010f4:	af00      	add	r7, sp, #0
900010f6:	6078      	str	r0, [r7, #4]
900010f8:	460b      	mov	r3, r1
900010fa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
900010fc:	1cfa      	adds	r2, r7, #3
900010fe:	2301      	movs	r3, #1
90001100:	2196      	movs	r1, #150	; 0x96
90001102:	6878      	ldr	r0, [r7, #4]
90001104:	f7ff ff59 	bl	90000fba <ft5336_write_reg>
90001108:	4603      	mov	r3, r0
}
9000110a:	4618      	mov	r0, r3
9000110c:	3708      	adds	r7, #8
9000110e:	46bd      	mov	sp, r7
90001110:	bd80      	pop	{r7, pc}

90001112 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90001112:	b580      	push	{r7, lr}
90001114:	b082      	sub	sp, #8
90001116:	af00      	add	r7, sp, #0
90001118:	6078      	str	r0, [r7, #4]
9000111a:	460b      	mov	r3, r1
9000111c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
9000111e:	1cfa      	adds	r2, r7, #3
90001120:	2301      	movs	r3, #1
90001122:	21a4      	movs	r1, #164	; 0xa4
90001124:	6878      	ldr	r0, [r7, #4]
90001126:	f7ff ff48 	bl	90000fba <ft5336_write_reg>
9000112a:	4603      	mov	r3, r0
}
9000112c:	4618      	mov	r0, r3
9000112e:	3708      	adds	r7, #8
90001130:	46bd      	mov	sp, r7
90001132:	bd80      	pop	{r7, pc}

90001134 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90001134:	b580      	push	{r7, lr}
90001136:	b084      	sub	sp, #16
90001138:	af00      	add	r7, sp, #0
9000113a:	6078      	str	r0, [r7, #4]
9000113c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
9000113e:	2301      	movs	r3, #1
90001140:	683a      	ldr	r2, [r7, #0]
90001142:	21a8      	movs	r1, #168	; 0xa8
90001144:	6878      	ldr	r0, [r7, #4]
90001146:	f7ff ff21 	bl	90000f8c <ft5336_read_reg>
9000114a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
9000114c:	68fb      	ldr	r3, [r7, #12]
9000114e:	2b00      	cmp	r3, #0
90001150:	d107      	bne.n	90001162 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
90001152:	683b      	ldr	r3, [r7, #0]
90001154:	781a      	ldrb	r2, [r3, #0]
90001156:	683b      	ldr	r3, [r7, #0]
90001158:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
9000115a:	683b      	ldr	r3, [r7, #0]
9000115c:	781a      	ldrb	r2, [r3, #0]
9000115e:	683b      	ldr	r3, [r7, #0]
90001160:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
90001162:	68fb      	ldr	r3, [r7, #12]
}
90001164:	4618      	mov	r0, r3
90001166:	3710      	adds	r7, #16
90001168:	46bd      	mov	sp, r7
9000116a:	bd80      	pop	{r7, pc}

9000116c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000116c:	b580      	push	{r7, lr}
9000116e:	b084      	sub	sp, #16
90001170:	af00      	add	r7, sp, #0
90001172:	6078      	str	r0, [r7, #4]
90001174:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
90001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000117a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
9000117c:	683b      	ldr	r3, [r7, #0]
9000117e:	681b      	ldr	r3, [r3, #0]
90001180:	4619      	mov	r1, r3
90001182:	6878      	ldr	r0, [r7, #4]
90001184:	f000 f832 	bl	900011ec <MT48LC4M32B2_ClockEnable>
90001188:	4603      	mov	r3, r0
9000118a:	2b00      	cmp	r3, #0
9000118c:	d128      	bne.n	900011e0 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
9000118e:	2001      	movs	r0, #1
90001190:	f000 f8e2 	bl	90001358 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90001194:	683b      	ldr	r3, [r7, #0]
90001196:	681b      	ldr	r3, [r3, #0]
90001198:	4619      	mov	r1, r3
9000119a:	6878      	ldr	r0, [r7, #4]
9000119c:	f000 f84a 	bl	90001234 <MT48LC4M32B2_Precharge>
900011a0:	4603      	mov	r3, r0
900011a2:	2b00      	cmp	r3, #0
900011a4:	d11c      	bne.n	900011e0 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
900011a6:	683b      	ldr	r3, [r7, #0]
900011a8:	6819      	ldr	r1, [r3, #0]
900011aa:	683b      	ldr	r3, [r7, #0]
900011ac:	685b      	ldr	r3, [r3, #4]
900011ae:	461a      	mov	r2, r3
900011b0:	6878      	ldr	r0, [r7, #4]
900011b2:	f000 f897 	bl	900012e4 <MT48LC4M32B2_RefreshMode>
900011b6:	4603      	mov	r3, r0
900011b8:	2b00      	cmp	r3, #0
900011ba:	d111      	bne.n	900011e0 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
900011bc:	6839      	ldr	r1, [r7, #0]
900011be:	6878      	ldr	r0, [r7, #4]
900011c0:	f000 f85c 	bl	9000127c <MT48LC4M32B2_ModeRegConfig>
900011c4:	4603      	mov	r3, r0
900011c6:	2b00      	cmp	r3, #0
900011c8:	d10a      	bne.n	900011e0 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
900011ca:	683b      	ldr	r3, [r7, #0]
900011cc:	689b      	ldr	r3, [r3, #8]
900011ce:	4619      	mov	r1, r3
900011d0:	6878      	ldr	r0, [r7, #4]
900011d2:	f000 f8ad 	bl	90001330 <MT48LC4M32B2_RefreshRate>
900011d6:	4603      	mov	r3, r0
900011d8:	2b00      	cmp	r3, #0
900011da:	d101      	bne.n	900011e0 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
900011dc:	2300      	movs	r3, #0
900011de:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
900011e0:	68fb      	ldr	r3, [r7, #12]
}
900011e2:	4618      	mov	r0, r3
900011e4:	3710      	adds	r7, #16
900011e6:	46bd      	mov	sp, r7
900011e8:	bd80      	pop	{r7, pc}
	...

900011ec <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
900011ec:	b580      	push	{r7, lr}
900011ee:	b082      	sub	sp, #8
900011f0:	af00      	add	r7, sp, #0
900011f2:	6078      	str	r0, [r7, #4]
900011f4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900011f6:	4b0e      	ldr	r3, [pc, #56]	; (90001230 <MT48LC4M32B2_ClockEnable+0x44>)
900011f8:	2201      	movs	r2, #1
900011fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
900011fc:	4a0c      	ldr	r2, [pc, #48]	; (90001230 <MT48LC4M32B2_ClockEnable+0x44>)
900011fe:	683b      	ldr	r3, [r7, #0]
90001200:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
90001202:	4b0b      	ldr	r3, [pc, #44]	; (90001230 <MT48LC4M32B2_ClockEnable+0x44>)
90001204:	2201      	movs	r2, #1
90001206:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001208:	4b09      	ldr	r3, [pc, #36]	; (90001230 <MT48LC4M32B2_ClockEnable+0x44>)
9000120a:	2200      	movs	r2, #0
9000120c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
90001212:	4907      	ldr	r1, [pc, #28]	; (90001230 <MT48LC4M32B2_ClockEnable+0x44>)
90001214:	6878      	ldr	r0, [r7, #4]
90001216:	f008 f881 	bl	9000931c <HAL_SDRAM_SendCommand>
9000121a:	4603      	mov	r3, r0
9000121c:	2b00      	cmp	r3, #0
9000121e:	d002      	beq.n	90001226 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90001224:	e000      	b.n	90001228 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001226:	2300      	movs	r3, #0
  }
}
90001228:	4618      	mov	r0, r3
9000122a:	3708      	adds	r7, #8
9000122c:	46bd      	mov	sp, r7
9000122e:	bd80      	pop	{r7, pc}
90001230:	200004a0 	.word	0x200004a0

90001234 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
90001234:	b580      	push	{r7, lr}
90001236:	b082      	sub	sp, #8
90001238:	af00      	add	r7, sp, #0
9000123a:	6078      	str	r0, [r7, #4]
9000123c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
9000123e:	4b0e      	ldr	r3, [pc, #56]	; (90001278 <MT48LC4M32B2_Precharge+0x44>)
90001240:	2202      	movs	r2, #2
90001242:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
90001244:	4a0c      	ldr	r2, [pc, #48]	; (90001278 <MT48LC4M32B2_Precharge+0x44>)
90001246:	683b      	ldr	r3, [r7, #0]
90001248:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
9000124a:	4b0b      	ldr	r3, [pc, #44]	; (90001278 <MT48LC4M32B2_Precharge+0x44>)
9000124c:	2201      	movs	r2, #1
9000124e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001250:	4b09      	ldr	r3, [pc, #36]	; (90001278 <MT48LC4M32B2_Precharge+0x44>)
90001252:	2200      	movs	r2, #0
90001254:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001256:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000125a:	4907      	ldr	r1, [pc, #28]	; (90001278 <MT48LC4M32B2_Precharge+0x44>)
9000125c:	6878      	ldr	r0, [r7, #4]
9000125e:	f008 f85d 	bl	9000931c <HAL_SDRAM_SendCommand>
90001262:	4603      	mov	r3, r0
90001264:	2b00      	cmp	r3, #0
90001266:	d002      	beq.n	9000126e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
90001268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000126c:	e000      	b.n	90001270 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000126e:	2300      	movs	r3, #0
  }
}
90001270:	4618      	mov	r0, r3
90001272:	3708      	adds	r7, #8
90001274:	46bd      	mov	sp, r7
90001276:	bd80      	pop	{r7, pc}
90001278:	200004a0 	.word	0x200004a0

9000127c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
9000127c:	b580      	push	{r7, lr}
9000127e:	b084      	sub	sp, #16
90001280:	af00      	add	r7, sp, #0
90001282:	6078      	str	r0, [r7, #4]
90001284:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90001286:	683b      	ldr	r3, [r7, #0]
90001288:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
9000128a:	683b      	ldr	r3, [r7, #0]
9000128c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
9000128e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
90001290:	683b      	ldr	r3, [r7, #0]
90001292:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
90001294:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
90001296:	683b      	ldr	r3, [r7, #0]
90001298:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
9000129a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
9000129c:	683b      	ldr	r3, [r7, #0]
9000129e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
900012a0:	4313      	orrs	r3, r2
900012a2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
900012a4:	4b0e      	ldr	r3, [pc, #56]	; (900012e0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012a6:	2204      	movs	r2, #4
900012a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
900012aa:	683b      	ldr	r3, [r7, #0]
900012ac:	681b      	ldr	r3, [r3, #0]
900012ae:	4a0c      	ldr	r2, [pc, #48]	; (900012e0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012b0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
900012b2:	4b0b      	ldr	r3, [pc, #44]	; (900012e0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012b4:	2201      	movs	r2, #1
900012b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
900012b8:	4a09      	ldr	r2, [pc, #36]	; (900012e0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012ba:	68fb      	ldr	r3, [r7, #12]
900012bc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
900012c2:	4907      	ldr	r1, [pc, #28]	; (900012e0 <MT48LC4M32B2_ModeRegConfig+0x64>)
900012c4:	6878      	ldr	r0, [r7, #4]
900012c6:	f008 f829 	bl	9000931c <HAL_SDRAM_SendCommand>
900012ca:	4603      	mov	r3, r0
900012cc:	2b00      	cmp	r3, #0
900012ce:	d002      	beq.n	900012d6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
900012d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900012d4:	e000      	b.n	900012d8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
900012d6:	2300      	movs	r3, #0
  }
}
900012d8:	4618      	mov	r0, r3
900012da:	3710      	adds	r7, #16
900012dc:	46bd      	mov	sp, r7
900012de:	bd80      	pop	{r7, pc}
900012e0:	200004a0 	.word	0x200004a0

900012e4 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
900012e4:	b580      	push	{r7, lr}
900012e6:	b084      	sub	sp, #16
900012e8:	af00      	add	r7, sp, #0
900012ea:	60f8      	str	r0, [r7, #12]
900012ec:	60b9      	str	r1, [r7, #8]
900012ee:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
900012f0:	4a0e      	ldr	r2, [pc, #56]	; (9000132c <MT48LC4M32B2_RefreshMode+0x48>)
900012f2:	687b      	ldr	r3, [r7, #4]
900012f4:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
900012f6:	4a0d      	ldr	r2, [pc, #52]	; (9000132c <MT48LC4M32B2_RefreshMode+0x48>)
900012f8:	68bb      	ldr	r3, [r7, #8]
900012fa:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
900012fc:	4b0b      	ldr	r3, [pc, #44]	; (9000132c <MT48LC4M32B2_RefreshMode+0x48>)
900012fe:	2208      	movs	r2, #8
90001300:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
90001302:	4b0a      	ldr	r3, [pc, #40]	; (9000132c <MT48LC4M32B2_RefreshMode+0x48>)
90001304:	2200      	movs	r2, #0
90001306:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90001308:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000130c:	4907      	ldr	r1, [pc, #28]	; (9000132c <MT48LC4M32B2_RefreshMode+0x48>)
9000130e:	68f8      	ldr	r0, [r7, #12]
90001310:	f008 f804 	bl	9000931c <HAL_SDRAM_SendCommand>
90001314:	4603      	mov	r3, r0
90001316:	2b00      	cmp	r3, #0
90001318:	d002      	beq.n	90001320 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
9000131a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000131e:	e000      	b.n	90001322 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
90001320:	2300      	movs	r3, #0
  }
}
90001322:	4618      	mov	r0, r3
90001324:	3710      	adds	r7, #16
90001326:	46bd      	mov	sp, r7
90001328:	bd80      	pop	{r7, pc}
9000132a:	bf00      	nop
9000132c:	200004a0 	.word	0x200004a0

90001330 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
90001330:	b580      	push	{r7, lr}
90001332:	b082      	sub	sp, #8
90001334:	af00      	add	r7, sp, #0
90001336:	6078      	str	r0, [r7, #4]
90001338:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
9000133a:	6839      	ldr	r1, [r7, #0]
9000133c:	6878      	ldr	r0, [r7, #4]
9000133e:	f008 f822 	bl	90009386 <HAL_SDRAM_ProgramRefreshRate>
90001342:	4603      	mov	r3, r0
90001344:	2b00      	cmp	r3, #0
90001346:	d002      	beq.n	9000134e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
90001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000134c:	e000      	b.n	90001350 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
9000134e:	2300      	movs	r3, #0
  }
}
90001350:	4618      	mov	r0, r3
90001352:	3708      	adds	r7, #8
90001354:	46bd      	mov	sp, r7
90001356:	bd80      	pop	{r7, pc}

90001358 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
90001358:	b580      	push	{r7, lr}
9000135a:	b084      	sub	sp, #16
9000135c:	af00      	add	r7, sp, #0
9000135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90001360:	f002 f832 	bl	900033c8 <HAL_GetTick>
90001364:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
90001366:	bf00      	nop
90001368:	f002 f82e 	bl	900033c8 <HAL_GetTick>
9000136c:	4602      	mov	r2, r0
9000136e:	68fb      	ldr	r3, [r7, #12]
90001370:	1ad3      	subs	r3, r2, r3
90001372:	687a      	ldr	r2, [r7, #4]
90001374:	429a      	cmp	r2, r3
90001376:	d8f7      	bhi.n	90001368 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
90001378:	2300      	movs	r3, #0
}
9000137a:	4618      	mov	r0, r3
9000137c:	3710      	adds	r7, #16
9000137e:	46bd      	mov	sp, r7
90001380:	bd80      	pop	{r7, pc}
	...

90001384 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
90001384:	b580      	push	{r7, lr}
90001386:	b08a      	sub	sp, #40	; 0x28
90001388:	af00      	add	r7, sp, #0
9000138a:	4603      	mov	r3, r0
9000138c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
9000138e:	2300      	movs	r3, #0
90001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
90001392:	79fb      	ldrb	r3, [r7, #7]
90001394:	2b00      	cmp	r3, #0
90001396:	d10f      	bne.n	900013b8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
90001398:	4b26      	ldr	r3, [pc, #152]	; (90001434 <BSP_LED_Init+0xb0>)
9000139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000139e:	4a25      	ldr	r2, [pc, #148]	; (90001434 <BSP_LED_Init+0xb0>)
900013a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013a8:	4b22      	ldr	r3, [pc, #136]	; (90001434 <BSP_LED_Init+0xb0>)
900013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
900013b2:	60fb      	str	r3, [r7, #12]
900013b4:	68fb      	ldr	r3, [r7, #12]
900013b6:	e015      	b.n	900013e4 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
900013b8:	79fb      	ldrb	r3, [r7, #7]
900013ba:	2b01      	cmp	r3, #1
900013bc:	d10f      	bne.n	900013de <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
900013be:	4b1d      	ldr	r3, [pc, #116]	; (90001434 <BSP_LED_Init+0xb0>)
900013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013c4:	4a1b      	ldr	r2, [pc, #108]	; (90001434 <BSP_LED_Init+0xb0>)
900013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900013ce:	4b19      	ldr	r3, [pc, #100]	; (90001434 <BSP_LED_Init+0xb0>)
900013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900013d8:	60bb      	str	r3, [r7, #8]
900013da:	68bb      	ldr	r3, [r7, #8]
900013dc:	e002      	b.n	900013e4 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
900013de:	f06f 0301 	mvn.w	r3, #1
900013e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
900013e4:	79fb      	ldrb	r3, [r7, #7]
900013e6:	4a14      	ldr	r2, [pc, #80]	; (90001438 <BSP_LED_Init+0xb4>)
900013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900013ec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
900013ee:	2301      	movs	r3, #1
900013f0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
900013f2:	2301      	movs	r3, #1
900013f4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900013f6:	2303      	movs	r3, #3
900013f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
900013fa:	79fb      	ldrb	r3, [r7, #7]
900013fc:	4a0f      	ldr	r2, [pc, #60]	; (9000143c <BSP_LED_Init+0xb8>)
900013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001402:	f107 0210 	add.w	r2, r7, #16
90001406:	4611      	mov	r1, r2
90001408:	4618      	mov	r0, r3
9000140a:	f002 fc67 	bl	90003cdc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
9000140e:	79fb      	ldrb	r3, [r7, #7]
90001410:	4a0a      	ldr	r2, [pc, #40]	; (9000143c <BSP_LED_Init+0xb8>)
90001412:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90001416:	79fb      	ldrb	r3, [r7, #7]
90001418:	4a07      	ldr	r2, [pc, #28]	; (90001438 <BSP_LED_Init+0xb4>)
9000141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000141e:	b29b      	uxth	r3, r3
90001420:	2201      	movs	r2, #1
90001422:	4619      	mov	r1, r3
90001424:	f002 ff14 	bl	90004250 <HAL_GPIO_WritePin>
  return ret;
90001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
9000142a:	4618      	mov	r0, r3
9000142c:	3728      	adds	r7, #40	; 0x28
9000142e:	46bd      	mov	sp, r7
90001430:	bd80      	pop	{r7, pc}
90001432:	bf00      	nop
90001434:	58024400 	.word	0x58024400
90001438:	9000cf4c 	.word	0x9000cf4c
9000143c:	20000030 	.word	0x20000030

90001440 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
90001440:	b580      	push	{r7, lr}
90001442:	b082      	sub	sp, #8
90001444:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
90001446:	2300      	movs	r3, #0
90001448:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
9000144a:	4b16      	ldr	r3, [pc, #88]	; (900014a4 <BSP_I2C4_Init+0x64>)
9000144c:	4a16      	ldr	r2, [pc, #88]	; (900014a8 <BSP_I2C4_Init+0x68>)
9000144e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
90001450:	4b16      	ldr	r3, [pc, #88]	; (900014ac <BSP_I2C4_Init+0x6c>)
90001452:	681b      	ldr	r3, [r3, #0]
90001454:	2b00      	cmp	r3, #0
90001456:	d11f      	bne.n	90001498 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
90001458:	4b14      	ldr	r3, [pc, #80]	; (900014ac <BSP_I2C4_Init+0x6c>)
9000145a:	681b      	ldr	r3, [r3, #0]
9000145c:	3301      	adds	r3, #1
9000145e:	4a13      	ldr	r2, [pc, #76]	; (900014ac <BSP_I2C4_Init+0x6c>)
90001460:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90001462:	4810      	ldr	r0, [pc, #64]	; (900014a4 <BSP_I2C4_Init+0x64>)
90001464:	f004 fc44 	bl	90005cf0 <HAL_I2C_GetState>
90001468:	4603      	mov	r3, r0
9000146a:	2b00      	cmp	r3, #0
9000146c:	d114      	bne.n	90001498 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
9000146e:	480d      	ldr	r0, [pc, #52]	; (900014a4 <BSP_I2C4_Init+0x64>)
90001470:	f000 fb60 	bl	90001b34 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90001474:	f006 fb88 	bl	90007b88 <HAL_RCC_GetPCLK2Freq>
90001478:	4603      	mov	r3, r0
9000147a:	490d      	ldr	r1, [pc, #52]	; (900014b0 <BSP_I2C4_Init+0x70>)
9000147c:	4618      	mov	r0, r3
9000147e:	f000 f8e3 	bl	90001648 <I2C_GetTiming>
90001482:	4603      	mov	r3, r0
90001484:	4619      	mov	r1, r3
90001486:	4807      	ldr	r0, [pc, #28]	; (900014a4 <BSP_I2C4_Init+0x64>)
90001488:	f000 f838 	bl	900014fc <MX_I2C4_Init>
9000148c:	4603      	mov	r3, r0
9000148e:	2b00      	cmp	r3, #0
90001490:	d002      	beq.n	90001498 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
90001492:	f06f 0307 	mvn.w	r3, #7
90001496:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
90001498:	687b      	ldr	r3, [r7, #4]
}
9000149a:	4618      	mov	r0, r3
9000149c:	3708      	adds	r7, #8
9000149e:	46bd      	mov	sp, r7
900014a0:	bd80      	pop	{r7, pc}
900014a2:	bf00      	nop
900014a4:	20000eb8 	.word	0x20000eb8
900014a8:	58001c00 	.word	0x58001c00
900014ac:	200004b0 	.word	0x200004b0
900014b0:	000186a0 	.word	0x000186a0

900014b4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
900014b4:	b580      	push	{r7, lr}
900014b6:	b082      	sub	sp, #8
900014b8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
900014ba:	2300      	movs	r3, #0
900014bc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
900014be:	4b0d      	ldr	r3, [pc, #52]	; (900014f4 <BSP_I2C4_DeInit+0x40>)
900014c0:	681b      	ldr	r3, [r3, #0]
900014c2:	3b01      	subs	r3, #1
900014c4:	4a0b      	ldr	r2, [pc, #44]	; (900014f4 <BSP_I2C4_DeInit+0x40>)
900014c6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
900014c8:	4b0a      	ldr	r3, [pc, #40]	; (900014f4 <BSP_I2C4_DeInit+0x40>)
900014ca:	681b      	ldr	r3, [r3, #0]
900014cc:	2b00      	cmp	r3, #0
900014ce:	d10b      	bne.n	900014e8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
900014d0:	4809      	ldr	r0, [pc, #36]	; (900014f8 <BSP_I2C4_DeInit+0x44>)
900014d2:	f000 fb9b 	bl	90001c0c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
900014d6:	4808      	ldr	r0, [pc, #32]	; (900014f8 <BSP_I2C4_DeInit+0x44>)
900014d8:	f004 f998 	bl	9000580c <HAL_I2C_DeInit>
900014dc:	4603      	mov	r3, r0
900014de:	2b00      	cmp	r3, #0
900014e0:	d002      	beq.n	900014e8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
900014e2:	f06f 0307 	mvn.w	r3, #7
900014e6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
900014e8:	687b      	ldr	r3, [r7, #4]
}
900014ea:	4618      	mov	r0, r3
900014ec:	3708      	adds	r7, #8
900014ee:	46bd      	mov	sp, r7
900014f0:	bd80      	pop	{r7, pc}
900014f2:	bf00      	nop
900014f4:	200004b0 	.word	0x200004b0
900014f8:	20000eb8 	.word	0x20000eb8

900014fc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
900014fc:	b580      	push	{r7, lr}
900014fe:	b084      	sub	sp, #16
90001500:	af00      	add	r7, sp, #0
90001502:	6078      	str	r0, [r7, #4]
90001504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
90001506:	2300      	movs	r3, #0
90001508:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
9000150a:	687b      	ldr	r3, [r7, #4]
9000150c:	683a      	ldr	r2, [r7, #0]
9000150e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
90001510:	687b      	ldr	r3, [r7, #4]
90001512:	2200      	movs	r2, #0
90001514:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90001516:	687b      	ldr	r3, [r7, #4]
90001518:	2201      	movs	r2, #1
9000151a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
9000151c:	687b      	ldr	r3, [r7, #4]
9000151e:	2200      	movs	r2, #0
90001520:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
90001522:	687b      	ldr	r3, [r7, #4]
90001524:	2200      	movs	r2, #0
90001526:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90001528:	687b      	ldr	r3, [r7, #4]
9000152a:	2200      	movs	r2, #0
9000152c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
9000152e:	687b      	ldr	r3, [r7, #4]
90001530:	2200      	movs	r2, #0
90001532:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90001534:	687b      	ldr	r3, [r7, #4]
90001536:	2200      	movs	r2, #0
90001538:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
9000153a:	6878      	ldr	r0, [r7, #4]
9000153c:	f004 f8d6 	bl	900056ec <HAL_I2C_Init>
90001540:	4603      	mov	r3, r0
90001542:	2b00      	cmp	r3, #0
90001544:	d002      	beq.n	9000154c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
90001546:	2301      	movs	r3, #1
90001548:	73fb      	strb	r3, [r7, #15]
9000154a:	e014      	b.n	90001576 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
9000154c:	2300      	movs	r3, #0
9000154e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90001550:	68b9      	ldr	r1, [r7, #8]
90001552:	6878      	ldr	r0, [r7, #4]
90001554:	f004 fe9e 	bl	90006294 <HAL_I2CEx_ConfigAnalogFilter>
90001558:	4603      	mov	r3, r0
9000155a:	2b00      	cmp	r3, #0
9000155c:	d002      	beq.n	90001564 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
9000155e:	2301      	movs	r3, #1
90001560:	73fb      	strb	r3, [r7, #15]
90001562:	e008      	b.n	90001576 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90001564:	2100      	movs	r1, #0
90001566:	6878      	ldr	r0, [r7, #4]
90001568:	f004 fedf 	bl	9000632a <HAL_I2CEx_ConfigDigitalFilter>
9000156c:	4603      	mov	r3, r0
9000156e:	2b00      	cmp	r3, #0
90001570:	d001      	beq.n	90001576 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
90001572:	2301      	movs	r3, #1
90001574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
90001576:	7bfb      	ldrb	r3, [r7, #15]
}
90001578:	4618      	mov	r0, r3
9000157a:	3710      	adds	r7, #16
9000157c:	46bd      	mov	sp, r7
9000157e:	bd80      	pop	{r7, pc}

90001580 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
90001580:	b580      	push	{r7, lr}
90001582:	b088      	sub	sp, #32
90001584:	af02      	add	r7, sp, #8
90001586:	60ba      	str	r2, [r7, #8]
90001588:	461a      	mov	r2, r3
9000158a:	4603      	mov	r3, r0
9000158c:	81fb      	strh	r3, [r7, #14]
9000158e:	460b      	mov	r3, r1
90001590:	81bb      	strh	r3, [r7, #12]
90001592:	4613      	mov	r3, r2
90001594:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
90001596:	89b9      	ldrh	r1, [r7, #12]
90001598:	89f8      	ldrh	r0, [r7, #14]
9000159a:	88fb      	ldrh	r3, [r7, #6]
9000159c:	9300      	str	r3, [sp, #0]
9000159e:	68bb      	ldr	r3, [r7, #8]
900015a0:	2201      	movs	r2, #1
900015a2:	f000 fb57 	bl	90001c54 <I2C4_WriteReg>
900015a6:	4603      	mov	r3, r0
900015a8:	2b00      	cmp	r3, #0
900015aa:	d102      	bne.n	900015b2 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
900015ac:	2300      	movs	r3, #0
900015ae:	617b      	str	r3, [r7, #20]
900015b0:	e00c      	b.n	900015cc <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900015b2:	4809      	ldr	r0, [pc, #36]	; (900015d8 <BSP_I2C4_WriteReg+0x58>)
900015b4:	f004 fbaa 	bl	90005d0c <HAL_I2C_GetError>
900015b8:	4603      	mov	r3, r0
900015ba:	2b04      	cmp	r3, #4
900015bc:	d103      	bne.n	900015c6 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
900015be:	f06f 0365 	mvn.w	r3, #101	; 0x65
900015c2:	617b      	str	r3, [r7, #20]
900015c4:	e002      	b.n	900015cc <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
900015c6:	f06f 0303 	mvn.w	r3, #3
900015ca:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
900015cc:	697b      	ldr	r3, [r7, #20]
}
900015ce:	4618      	mov	r0, r3
900015d0:	3718      	adds	r7, #24
900015d2:	46bd      	mov	sp, r7
900015d4:	bd80      	pop	{r7, pc}
900015d6:	bf00      	nop
900015d8:	20000eb8 	.word	0x20000eb8

900015dc <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
900015dc:	b580      	push	{r7, lr}
900015de:	b088      	sub	sp, #32
900015e0:	af02      	add	r7, sp, #8
900015e2:	60ba      	str	r2, [r7, #8]
900015e4:	461a      	mov	r2, r3
900015e6:	4603      	mov	r3, r0
900015e8:	81fb      	strh	r3, [r7, #14]
900015ea:	460b      	mov	r3, r1
900015ec:	81bb      	strh	r3, [r7, #12]
900015ee:	4613      	mov	r3, r2
900015f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
900015f2:	89b9      	ldrh	r1, [r7, #12]
900015f4:	89f8      	ldrh	r0, [r7, #14]
900015f6:	88fb      	ldrh	r3, [r7, #6]
900015f8:	9300      	str	r3, [sp, #0]
900015fa:	68bb      	ldr	r3, [r7, #8]
900015fc:	2201      	movs	r2, #1
900015fe:	f000 fb4f 	bl	90001ca0 <I2C4_ReadReg>
90001602:	4603      	mov	r3, r0
90001604:	2b00      	cmp	r3, #0
90001606:	d102      	bne.n	9000160e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
90001608:	2300      	movs	r3, #0
9000160a:	617b      	str	r3, [r7, #20]
9000160c:	e00c      	b.n	90001628 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000160e:	4809      	ldr	r0, [pc, #36]	; (90001634 <BSP_I2C4_ReadReg+0x58>)
90001610:	f004 fb7c 	bl	90005d0c <HAL_I2C_GetError>
90001614:	4603      	mov	r3, r0
90001616:	2b04      	cmp	r3, #4
90001618:	d103      	bne.n	90001622 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
9000161a:	f06f 0365 	mvn.w	r3, #101	; 0x65
9000161e:	617b      	str	r3, [r7, #20]
90001620:	e002      	b.n	90001628 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
90001622:	f06f 0303 	mvn.w	r3, #3
90001626:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
90001628:	697b      	ldr	r3, [r7, #20]
}
9000162a:	4618      	mov	r0, r3
9000162c:	3718      	adds	r7, #24
9000162e:	46bd      	mov	sp, r7
90001630:	bd80      	pop	{r7, pc}
90001632:	bf00      	nop
90001634:	20000eb8 	.word	0x20000eb8

90001638 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
90001638:	b580      	push	{r7, lr}
9000163a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
9000163c:	f001 fec4 	bl	900033c8 <HAL_GetTick>
90001640:	4603      	mov	r3, r0
}
90001642:	4618      	mov	r0, r3
90001644:	bd80      	pop	{r7, pc}
	...

90001648 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
90001648:	b580      	push	{r7, lr}
9000164a:	b086      	sub	sp, #24
9000164c:	af00      	add	r7, sp, #0
9000164e:	6078      	str	r0, [r7, #4]
90001650:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
90001652:	2300      	movs	r3, #0
90001654:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90001656:	687b      	ldr	r3, [r7, #4]
90001658:	2b00      	cmp	r3, #0
9000165a:	d06b      	beq.n	90001734 <I2C_GetTiming+0xec>
9000165c:	683b      	ldr	r3, [r7, #0]
9000165e:	2b00      	cmp	r3, #0
90001660:	d068      	beq.n	90001734 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001662:	2300      	movs	r3, #0
90001664:	613b      	str	r3, [r7, #16]
90001666:	e060      	b.n	9000172a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
90001668:	4a35      	ldr	r2, [pc, #212]	; (90001740 <I2C_GetTiming+0xf8>)
9000166a:	693b      	ldr	r3, [r7, #16]
9000166c:	212c      	movs	r1, #44	; 0x2c
9000166e:	fb01 f303 	mul.w	r3, r1, r3
90001672:	4413      	add	r3, r2
90001674:	3304      	adds	r3, #4
90001676:	681b      	ldr	r3, [r3, #0]
90001678:	683a      	ldr	r2, [r7, #0]
9000167a:	429a      	cmp	r2, r3
9000167c:	d352      	bcc.n	90001724 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
9000167e:	4a30      	ldr	r2, [pc, #192]	; (90001740 <I2C_GetTiming+0xf8>)
90001680:	693b      	ldr	r3, [r7, #16]
90001682:	212c      	movs	r1, #44	; 0x2c
90001684:	fb01 f303 	mul.w	r3, r1, r3
90001688:	4413      	add	r3, r2
9000168a:	3308      	adds	r3, #8
9000168c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
9000168e:	683a      	ldr	r2, [r7, #0]
90001690:	429a      	cmp	r2, r3
90001692:	d847      	bhi.n	90001724 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
90001694:	6939      	ldr	r1, [r7, #16]
90001696:	6878      	ldr	r0, [r7, #4]
90001698:	f000 f856 	bl	90001748 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
9000169c:	6939      	ldr	r1, [r7, #16]
9000169e:	6878      	ldr	r0, [r7, #4]
900016a0:	f000 f940 	bl	90001924 <I2C_Compute_SCLL_SCLH>
900016a4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
900016a6:	68fb      	ldr	r3, [r7, #12]
900016a8:	2b7f      	cmp	r3, #127	; 0x7f
900016aa:	d842      	bhi.n	90001732 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900016ac:	4925      	ldr	r1, [pc, #148]	; (90001744 <I2C_GetTiming+0xfc>)
900016ae:	68fa      	ldr	r2, [r7, #12]
900016b0:	4613      	mov	r3, r2
900016b2:	009b      	lsls	r3, r3, #2
900016b4:	4413      	add	r3, r2
900016b6:	009b      	lsls	r3, r3, #2
900016b8:	440b      	add	r3, r1
900016ba:	681b      	ldr	r3, [r3, #0]
900016bc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900016be:	4821      	ldr	r0, [pc, #132]	; (90001744 <I2C_GetTiming+0xfc>)
900016c0:	68fa      	ldr	r2, [r7, #12]
900016c2:	4613      	mov	r3, r2
900016c4:	009b      	lsls	r3, r3, #2
900016c6:	4413      	add	r3, r2
900016c8:	009b      	lsls	r3, r3, #2
900016ca:	4403      	add	r3, r0
900016cc:	3304      	adds	r3, #4
900016ce:	681b      	ldr	r3, [r3, #0]
900016d0:	051b      	lsls	r3, r3, #20
900016d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900016d6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900016d8:	481a      	ldr	r0, [pc, #104]	; (90001744 <I2C_GetTiming+0xfc>)
900016da:	68fa      	ldr	r2, [r7, #12]
900016dc:	4613      	mov	r3, r2
900016de:	009b      	lsls	r3, r3, #2
900016e0:	4413      	add	r3, r2
900016e2:	009b      	lsls	r3, r3, #2
900016e4:	4403      	add	r3, r0
900016e6:	3308      	adds	r3, #8
900016e8:	681b      	ldr	r3, [r3, #0]
900016ea:	041b      	lsls	r3, r3, #16
900016ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900016f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900016f2:	4814      	ldr	r0, [pc, #80]	; (90001744 <I2C_GetTiming+0xfc>)
900016f4:	68fa      	ldr	r2, [r7, #12]
900016f6:	4613      	mov	r3, r2
900016f8:	009b      	lsls	r3, r3, #2
900016fa:	4413      	add	r3, r2
900016fc:	009b      	lsls	r3, r3, #2
900016fe:	4403      	add	r3, r0
90001700:	330c      	adds	r3, #12
90001702:	681b      	ldr	r3, [r3, #0]
90001704:	021b      	lsls	r3, r3, #8
90001706:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90001708:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
9000170a:	480e      	ldr	r0, [pc, #56]	; (90001744 <I2C_GetTiming+0xfc>)
9000170c:	68fa      	ldr	r2, [r7, #12]
9000170e:	4613      	mov	r3, r2
90001710:	009b      	lsls	r3, r3, #2
90001712:	4413      	add	r3, r2
90001714:	009b      	lsls	r3, r3, #2
90001716:	4403      	add	r3, r0
90001718:	3310      	adds	r3, #16
9000171a:	681b      	ldr	r3, [r3, #0]
9000171c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000171e:	430b      	orrs	r3, r1
90001720:	617b      	str	r3, [r7, #20]
        }
        break;
90001722:	e006      	b.n	90001732 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
90001724:	693b      	ldr	r3, [r7, #16]
90001726:	3301      	adds	r3, #1
90001728:	613b      	str	r3, [r7, #16]
9000172a:	693b      	ldr	r3, [r7, #16]
9000172c:	2b02      	cmp	r3, #2
9000172e:	d99b      	bls.n	90001668 <I2C_GetTiming+0x20>
90001730:	e000      	b.n	90001734 <I2C_GetTiming+0xec>
        break;
90001732:	bf00      	nop
      }
    }
  }

  return ret;
90001734:	697b      	ldr	r3, [r7, #20]
}
90001736:	4618      	mov	r0, r3
90001738:	3718      	adds	r7, #24
9000173a:	46bd      	mov	sp, r7
9000173c:	bd80      	pop	{r7, pc}
9000173e:	bf00      	nop
90001740:	9000cf54 	.word	0x9000cf54
90001744:	200004b4 	.word	0x200004b4

90001748 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001748:	b480      	push	{r7}
9000174a:	b08f      	sub	sp, #60	; 0x3c
9000174c:	af00      	add	r7, sp, #0
9000174e:	6078      	str	r0, [r7, #4]
90001750:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
90001752:	2310      	movs	r3, #16
90001754:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001756:	687b      	ldr	r3, [r7, #4]
90001758:	085a      	lsrs	r2, r3, #1
9000175a:	4b6e      	ldr	r3, [pc, #440]	; (90001914 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
9000175c:	4413      	add	r3, r2
9000175e:	687a      	ldr	r2, [r7, #4]
90001760:	fbb3 f3f2 	udiv	r3, r3, r2
90001764:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
90001766:	2332      	movs	r3, #50	; 0x32
90001768:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
9000176a:	f44f 7382 	mov.w	r3, #260	; 0x104
9000176e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001770:	4a69      	ldr	r2, [pc, #420]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001772:	683b      	ldr	r3, [r7, #0]
90001774:	212c      	movs	r1, #44	; 0x2c
90001776:	fb01 f303 	mul.w	r3, r1, r3
9000177a:	4413      	add	r3, r2
9000177c:	3324      	adds	r3, #36	; 0x24
9000177e:	681b      	ldr	r3, [r3, #0]
90001780:	4618      	mov	r0, r3
90001782:	4a65      	ldr	r2, [pc, #404]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
90001784:	683b      	ldr	r3, [r7, #0]
90001786:	212c      	movs	r1, #44	; 0x2c
90001788:	fb01 f303 	mul.w	r3, r1, r3
9000178c:	4413      	add	r3, r2
9000178e:	330c      	adds	r3, #12
90001790:	681b      	ldr	r3, [r3, #0]
90001792:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001794:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90001796:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90001798:	495f      	ldr	r1, [pc, #380]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000179a:	683b      	ldr	r3, [r7, #0]
9000179c:	202c      	movs	r0, #44	; 0x2c
9000179e:	fb00 f303 	mul.w	r3, r0, r3
900017a2:	440b      	add	r3, r1
900017a4:	3328      	adds	r3, #40	; 0x28
900017a6:	681b      	ldr	r3, [r3, #0]
900017a8:	3303      	adds	r3, #3
900017aa:	69f9      	ldr	r1, [r7, #28]
900017ac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900017b0:	1ad3      	subs	r3, r2, r3
900017b2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900017b4:	4a58      	ldr	r2, [pc, #352]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017b6:	683b      	ldr	r3, [r7, #0]
900017b8:	212c      	movs	r1, #44	; 0x2c
900017ba:	fb01 f303 	mul.w	r3, r1, r3
900017be:	4413      	add	r3, r2
900017c0:	3310      	adds	r3, #16
900017c2:	681b      	ldr	r3, [r3, #0]
900017c4:	4618      	mov	r0, r3
900017c6:	4a54      	ldr	r2, [pc, #336]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017c8:	683b      	ldr	r3, [r7, #0]
900017ca:	212c      	movs	r1, #44	; 0x2c
900017cc:	fb01 f303 	mul.w	r3, r1, r3
900017d0:	4413      	add	r3, r2
900017d2:	3320      	adds	r3, #32
900017d4:	681b      	ldr	r3, [r3, #0]
900017d6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900017d8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900017da:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900017dc:	494e      	ldr	r1, [pc, #312]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017de:	683b      	ldr	r3, [r7, #0]
900017e0:	202c      	movs	r0, #44	; 0x2c
900017e2:	fb00 f303 	mul.w	r3, r0, r3
900017e6:	440b      	add	r3, r1
900017e8:	3328      	adds	r3, #40	; 0x28
900017ea:	681b      	ldr	r3, [r3, #0]
900017ec:	3304      	adds	r3, #4
900017ee:	69f9      	ldr	r1, [r7, #28]
900017f0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900017f4:	1ad3      	subs	r3, r2, r3
900017f6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
900017f8:	4a47      	ldr	r2, [pc, #284]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
900017fa:	683b      	ldr	r3, [r7, #0]
900017fc:	212c      	movs	r1, #44	; 0x2c
900017fe:	fb01 f303 	mul.w	r3, r1, r3
90001802:	4413      	add	r3, r2
90001804:	3320      	adds	r3, #32
90001806:	681b      	ldr	r3, [r3, #0]
90001808:	4618      	mov	r0, r3
9000180a:	4a43      	ldr	r2, [pc, #268]	; (90001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
9000180c:	683b      	ldr	r3, [r7, #0]
9000180e:	212c      	movs	r1, #44	; 0x2c
90001810:	fb01 f303 	mul.w	r3, r1, r3
90001814:	4413      	add	r3, r2
90001816:	3314      	adds	r3, #20
90001818:	681b      	ldr	r3, [r3, #0]
9000181a:	4403      	add	r3, r0
9000181c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
9000181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001820:	2b00      	cmp	r3, #0
90001822:	dc01      	bgt.n	90001828 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
90001824:	2300      	movs	r3, #0
90001826:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
90001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000182a:	2b00      	cmp	r3, #0
9000182c:	dc01      	bgt.n	90001832 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
9000182e:	2300      	movs	r3, #0
90001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90001832:	2300      	movs	r3, #0
90001834:	62bb      	str	r3, [r7, #40]	; 0x28
90001836:	e062      	b.n	900018fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90001838:	2300      	movs	r3, #0
9000183a:	627b      	str	r3, [r7, #36]	; 0x24
9000183c:	e059      	b.n	900018f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
9000183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001840:	3301      	adds	r3, #1
90001842:	6aba      	ldr	r2, [r7, #40]	; 0x28
90001844:	3201      	adds	r2, #1
90001846:	fb03 f202 	mul.w	r2, r3, r2
9000184a:	69fb      	ldr	r3, [r7, #28]
9000184c:	fb02 f303 	mul.w	r3, r2, r3
90001850:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
90001852:	693b      	ldr	r3, [r7, #16]
90001854:	68fa      	ldr	r2, [r7, #12]
90001856:	429a      	cmp	r2, r3
90001858:	d348      	bcc.n	900018ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000185a:	2300      	movs	r3, #0
9000185c:	623b      	str	r3, [r7, #32]
9000185e:	e042      	b.n	900018e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
90001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001862:	3301      	adds	r3, #1
90001864:	6a3a      	ldr	r2, [r7, #32]
90001866:	fb03 f202 	mul.w	r2, r3, r2
9000186a:	69fb      	ldr	r3, [r7, #28]
9000186c:	fb02 f303 	mul.w	r3, r2, r3
90001870:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90001872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001874:	68ba      	ldr	r2, [r7, #8]
90001876:	429a      	cmp	r2, r3
90001878:	d332      	bcc.n	900018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
9000187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000187c:	68ba      	ldr	r2, [r7, #8]
9000187e:	429a      	cmp	r2, r3
90001880:	d82e      	bhi.n	900018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
90001882:	6aba      	ldr	r2, [r7, #40]	; 0x28
90001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001886:	429a      	cmp	r2, r3
90001888:	d02a      	beq.n	900018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000188a:	4b24      	ldr	r3, [pc, #144]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
9000188c:	681a      	ldr	r2, [r3, #0]
9000188e:	4924      	ldr	r1, [pc, #144]	; (90001920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
90001890:	4613      	mov	r3, r2
90001892:	009b      	lsls	r3, r3, #2
90001894:	4413      	add	r3, r2
90001896:	009b      	lsls	r3, r3, #2
90001898:	440b      	add	r3, r1
9000189a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000189c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000189e:	4b1f      	ldr	r3, [pc, #124]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018a0:	681a      	ldr	r2, [r3, #0]
900018a2:	491f      	ldr	r1, [pc, #124]	; (90001920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900018a4:	4613      	mov	r3, r2
900018a6:	009b      	lsls	r3, r3, #2
900018a8:	4413      	add	r3, r2
900018aa:	009b      	lsls	r3, r3, #2
900018ac:	440b      	add	r3, r1
900018ae:	3304      	adds	r3, #4
900018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900018b2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900018b4:	4b19      	ldr	r3, [pc, #100]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018b6:	681a      	ldr	r2, [r3, #0]
900018b8:	4919      	ldr	r1, [pc, #100]	; (90001920 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
900018ba:	4613      	mov	r3, r2
900018bc:	009b      	lsls	r3, r3, #2
900018be:	4413      	add	r3, r2
900018c0:	009b      	lsls	r3, r3, #2
900018c2:	440b      	add	r3, r1
900018c4:	3308      	adds	r3, #8
900018c6:	6a3a      	ldr	r2, [r7, #32]
900018c8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
900018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
900018cc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
900018ce:	4b13      	ldr	r3, [pc, #76]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018d0:	681b      	ldr	r3, [r3, #0]
900018d2:	3301      	adds	r3, #1
900018d4:	4a11      	ldr	r2, [pc, #68]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018d6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900018d8:	4b10      	ldr	r3, [pc, #64]	; (9000191c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
900018da:	681b      	ldr	r3, [r3, #0]
900018dc:	2b7f      	cmp	r3, #127	; 0x7f
900018de:	d812      	bhi.n	90001906 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900018e0:	6a3b      	ldr	r3, [r7, #32]
900018e2:	3301      	adds	r3, #1
900018e4:	623b      	str	r3, [r7, #32]
900018e6:	6a3b      	ldr	r3, [r7, #32]
900018e8:	2b0f      	cmp	r3, #15
900018ea:	d9b9      	bls.n	90001860 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
900018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900018ee:	3301      	adds	r3, #1
900018f0:	627b      	str	r3, [r7, #36]	; 0x24
900018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900018f4:	2b0f      	cmp	r3, #15
900018f6:	d9a2      	bls.n	9000183e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
900018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900018fa:	3301      	adds	r3, #1
900018fc:	62bb      	str	r3, [r7, #40]	; 0x28
900018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001900:	2b0f      	cmp	r3, #15
90001902:	d999      	bls.n	90001838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
90001904:	e000      	b.n	90001908 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
90001906:	bf00      	nop
          }
        }
      }
    }
  }
}
90001908:	373c      	adds	r7, #60	; 0x3c
9000190a:	46bd      	mov	sp, r7
9000190c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001910:	4770      	bx	lr
90001912:	bf00      	nop
90001914:	3b9aca00 	.word	0x3b9aca00
90001918:	9000cf54 	.word	0x9000cf54
9000191c:	20000eb4 	.word	0x20000eb4
90001920:	200004b4 	.word	0x200004b4

90001924 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
90001924:	b480      	push	{r7}
90001926:	b093      	sub	sp, #76	; 0x4c
90001928:	af00      	add	r7, sp, #0
9000192a:	6078      	str	r0, [r7, #4]
9000192c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
9000192e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90001932:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90001934:	687b      	ldr	r3, [r7, #4]
90001936:	085a      	lsrs	r2, r3, #1
90001938:	4b7a      	ldr	r3, [pc, #488]	; (90001b24 <I2C_Compute_SCLL_SCLH+0x200>)
9000193a:	4413      	add	r3, r2
9000193c:	687a      	ldr	r2, [r7, #4]
9000193e:	fbb3 f3f2 	udiv	r3, r3, r2
90001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
90001944:	4a78      	ldr	r2, [pc, #480]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
90001946:	683b      	ldr	r3, [r7, #0]
90001948:	212c      	movs	r1, #44	; 0x2c
9000194a:	fb01 f303 	mul.w	r3, r1, r3
9000194e:	4413      	add	r3, r2
90001950:	681b      	ldr	r3, [r3, #0]
90001952:	085a      	lsrs	r2, r3, #1
90001954:	4b73      	ldr	r3, [pc, #460]	; (90001b24 <I2C_Compute_SCLL_SCLH+0x200>)
90001956:	4413      	add	r3, r2
90001958:	4973      	ldr	r1, [pc, #460]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
9000195a:	683a      	ldr	r2, [r7, #0]
9000195c:	202c      	movs	r0, #44	; 0x2c
9000195e:	fb00 f202 	mul.w	r2, r0, r2
90001962:	440a      	add	r2, r1
90001964:	6812      	ldr	r2, [r2, #0]
90001966:	fbb3 f3f2 	udiv	r3, r3, r2
9000196a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
9000196c:	2332      	movs	r3, #50	; 0x32
9000196e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
90001970:	4a6d      	ldr	r2, [pc, #436]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
90001972:	683b      	ldr	r3, [r7, #0]
90001974:	212c      	movs	r1, #44	; 0x2c
90001976:	fb01 f303 	mul.w	r3, r1, r3
9000197a:	4413      	add	r3, r2
9000197c:	3328      	adds	r3, #40	; 0x28
9000197e:	681a      	ldr	r2, [r3, #0]
90001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001982:	fb02 f303 	mul.w	r3, r2, r3
90001986:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
90001988:	4a67      	ldr	r2, [pc, #412]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
9000198a:	683b      	ldr	r3, [r7, #0]
9000198c:	212c      	movs	r1, #44	; 0x2c
9000198e:	fb01 f303 	mul.w	r3, r1, r3
90001992:	4413      	add	r3, r2
90001994:	3304      	adds	r3, #4
90001996:	681b      	ldr	r3, [r3, #0]
90001998:	4a62      	ldr	r2, [pc, #392]	; (90001b24 <I2C_Compute_SCLL_SCLH+0x200>)
9000199a:	fbb2 f3f3 	udiv	r3, r2, r3
9000199e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
900019a0:	4a61      	ldr	r2, [pc, #388]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
900019a2:	683b      	ldr	r3, [r7, #0]
900019a4:	212c      	movs	r1, #44	; 0x2c
900019a6:	fb01 f303 	mul.w	r3, r1, r3
900019aa:	4413      	add	r3, r2
900019ac:	3308      	adds	r3, #8
900019ae:	681b      	ldr	r3, [r3, #0]
900019b0:	4a5c      	ldr	r2, [pc, #368]	; (90001b24 <I2C_Compute_SCLL_SCLH+0x200>)
900019b2:	fbb2 f3f3 	udiv	r3, r2, r3
900019b6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
900019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900019ba:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900019bc:	2300      	movs	r3, #0
900019be:	637b      	str	r3, [r7, #52]	; 0x34
900019c0:	e0a3      	b.n	90001b0a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900019c2:	495a      	ldr	r1, [pc, #360]	; (90001b2c <I2C_Compute_SCLL_SCLH+0x208>)
900019c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900019c6:	4613      	mov	r3, r2
900019c8:	009b      	lsls	r3, r3, #2
900019ca:	4413      	add	r3, r2
900019cc:	009b      	lsls	r3, r3, #2
900019ce:	440b      	add	r3, r1
900019d0:	681b      	ldr	r3, [r3, #0]
900019d2:	1c5a      	adds	r2, r3, #1
900019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900019d6:	fb02 f303 	mul.w	r3, r2, r3
900019da:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900019dc:	2300      	movs	r3, #0
900019de:	63fb      	str	r3, [r7, #60]	; 0x3c
900019e0:	e08c      	b.n	90001afc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900019e4:	6a3b      	ldr	r3, [r7, #32]
900019e6:	441a      	add	r2, r3
900019e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900019ea:	3301      	adds	r3, #1
900019ec:	6979      	ldr	r1, [r7, #20]
900019ee:	fb03 f101 	mul.w	r1, r3, r1
900019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900019f4:	005b      	lsls	r3, r3, #1
900019f6:	440b      	add	r3, r1
900019f8:	4413      	add	r3, r2
900019fa:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900019fc:	4a4a      	ldr	r2, [pc, #296]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
900019fe:	683b      	ldr	r3, [r7, #0]
90001a00:	212c      	movs	r1, #44	; 0x2c
90001a02:	fb01 f303 	mul.w	r3, r1, r3
90001a06:	4413      	add	r3, r2
90001a08:	3318      	adds	r3, #24
90001a0a:	681b      	ldr	r3, [r3, #0]
90001a0c:	693a      	ldr	r2, [r7, #16]
90001a0e:	429a      	cmp	r2, r3
90001a10:	d971      	bls.n	90001af6 <I2C_Compute_SCLL_SCLH+0x1d2>
90001a12:	693a      	ldr	r2, [r7, #16]
90001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001a16:	1ad2      	subs	r2, r2, r3
90001a18:	6a3b      	ldr	r3, [r7, #32]
90001a1a:	1ad3      	subs	r3, r2, r3
90001a1c:	089b      	lsrs	r3, r3, #2
90001a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90001a20:	429a      	cmp	r2, r3
90001a22:	d268      	bcs.n	90001af6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001a24:	2300      	movs	r3, #0
90001a26:	63bb      	str	r3, [r7, #56]	; 0x38
90001a28:	e062      	b.n	90001af0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90001a2c:	6a3b      	ldr	r3, [r7, #32]
90001a2e:	441a      	add	r2, r3
90001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001a32:	3301      	adds	r3, #1
90001a34:	6979      	ldr	r1, [r7, #20]
90001a36:	fb03 f101 	mul.w	r1, r3, r1
90001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90001a3c:	005b      	lsls	r3, r3, #1
90001a3e:	440b      	add	r3, r1
90001a40:	4413      	add	r3, r2
90001a42:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
90001a44:	693a      	ldr	r2, [r7, #16]
90001a46:	68fb      	ldr	r3, [r7, #12]
90001a48:	441a      	add	r2, r3
90001a4a:	4937      	ldr	r1, [pc, #220]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
90001a4c:	683b      	ldr	r3, [r7, #0]
90001a4e:	202c      	movs	r0, #44	; 0x2c
90001a50:	fb00 f303 	mul.w	r3, r0, r3
90001a54:	440b      	add	r3, r1
90001a56:	3320      	adds	r3, #32
90001a58:	681b      	ldr	r3, [r3, #0]
90001a5a:	441a      	add	r2, r3
90001a5c:	4932      	ldr	r1, [pc, #200]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
90001a5e:	683b      	ldr	r3, [r7, #0]
90001a60:	202c      	movs	r0, #44	; 0x2c
90001a62:	fb00 f303 	mul.w	r3, r0, r3
90001a66:	440b      	add	r3, r1
90001a68:	3324      	adds	r3, #36	; 0x24
90001a6a:	681b      	ldr	r3, [r3, #0]
90001a6c:	4413      	add	r3, r2
90001a6e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90001a70:	68ba      	ldr	r2, [r7, #8]
90001a72:	69bb      	ldr	r3, [r7, #24]
90001a74:	429a      	cmp	r2, r3
90001a76:	d338      	bcc.n	90001aea <I2C_Compute_SCLL_SCLH+0x1c6>
90001a78:	68ba      	ldr	r2, [r7, #8]
90001a7a:	69fb      	ldr	r3, [r7, #28]
90001a7c:	429a      	cmp	r2, r3
90001a7e:	d834      	bhi.n	90001aea <I2C_Compute_SCLL_SCLH+0x1c6>
90001a80:	4a29      	ldr	r2, [pc, #164]	; (90001b28 <I2C_Compute_SCLL_SCLH+0x204>)
90001a82:	683b      	ldr	r3, [r7, #0]
90001a84:	212c      	movs	r1, #44	; 0x2c
90001a86:	fb01 f303 	mul.w	r3, r1, r3
90001a8a:	4413      	add	r3, r2
90001a8c:	331c      	adds	r3, #28
90001a8e:	681b      	ldr	r3, [r3, #0]
90001a90:	68fa      	ldr	r2, [r7, #12]
90001a92:	429a      	cmp	r2, r3
90001a94:	d329      	bcc.n	90001aea <I2C_Compute_SCLL_SCLH+0x1c6>
90001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90001a98:	68fb      	ldr	r3, [r7, #12]
90001a9a:	429a      	cmp	r2, r3
90001a9c:	d225      	bcs.n	90001aea <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
90001a9e:	68ba      	ldr	r2, [r7, #8]
90001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001aa2:	1ad3      	subs	r3, r2, r3
90001aa4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
90001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001aa8:	2b00      	cmp	r3, #0
90001aaa:	da02      	bge.n	90001ab2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
90001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001aae:	425b      	negs	r3, r3
90001ab0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
90001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
90001ab6:	429a      	cmp	r2, r3
90001ab8:	d917      	bls.n	90001aea <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
90001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001abc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
90001abe:	491b      	ldr	r1, [pc, #108]	; (90001b2c <I2C_Compute_SCLL_SCLH+0x208>)
90001ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001ac2:	4613      	mov	r3, r2
90001ac4:	009b      	lsls	r3, r3, #2
90001ac6:	4413      	add	r3, r2
90001ac8:	009b      	lsls	r3, r3, #2
90001aca:	440b      	add	r3, r1
90001acc:	3310      	adds	r3, #16
90001ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
90001ad0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
90001ad2:	4916      	ldr	r1, [pc, #88]	; (90001b2c <I2C_Compute_SCLL_SCLH+0x208>)
90001ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001ad6:	4613      	mov	r3, r2
90001ad8:	009b      	lsls	r3, r3, #2
90001ada:	4413      	add	r3, r2
90001adc:	009b      	lsls	r3, r3, #2
90001ade:	440b      	add	r3, r1
90001ae0:	330c      	adds	r3, #12
90001ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
90001ae4:	601a      	str	r2, [r3, #0]
              ret = count;
90001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001ae8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90001aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001aec:	3301      	adds	r3, #1
90001aee:	63bb      	str	r3, [r7, #56]	; 0x38
90001af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90001af2:	2bff      	cmp	r3, #255	; 0xff
90001af4:	d999      	bls.n	90001a2a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90001af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001af8:	3301      	adds	r3, #1
90001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
90001afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001afe:	2bff      	cmp	r3, #255	; 0xff
90001b00:	f67f af6f 	bls.w	900019e2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001b06:	3301      	adds	r3, #1
90001b08:	637b      	str	r3, [r7, #52]	; 0x34
90001b0a:	4b09      	ldr	r3, [pc, #36]	; (90001b30 <I2C_Compute_SCLL_SCLH+0x20c>)
90001b0c:	681b      	ldr	r3, [r3, #0]
90001b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90001b10:	429a      	cmp	r2, r3
90001b12:	f4ff af56 	bcc.w	900019c2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
90001b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
90001b18:	4618      	mov	r0, r3
90001b1a:	374c      	adds	r7, #76	; 0x4c
90001b1c:	46bd      	mov	sp, r7
90001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001b22:	4770      	bx	lr
90001b24:	3b9aca00 	.word	0x3b9aca00
90001b28:	9000cf54 	.word	0x9000cf54
90001b2c:	200004b4 	.word	0x200004b4
90001b30:	20000eb4 	.word	0x20000eb4

90001b34 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
90001b34:	b580      	push	{r7, lr}
90001b36:	b08a      	sub	sp, #40	; 0x28
90001b38:	af00      	add	r7, sp, #0
90001b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90001b3c:	4b31      	ldr	r3, [pc, #196]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b42:	4a30      	ldr	r2, [pc, #192]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b44:	f043 0308 	orr.w	r3, r3, #8
90001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b4c:	4b2d      	ldr	r3, [pc, #180]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b52:	f003 0308 	and.w	r3, r3, #8
90001b56:	613b      	str	r3, [r7, #16]
90001b58:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90001b5a:	4b2a      	ldr	r3, [pc, #168]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b60:	4a28      	ldr	r2, [pc, #160]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b62:	f043 0308 	orr.w	r3, r3, #8
90001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b6a:	4b26      	ldr	r3, [pc, #152]	; (90001c04 <I2C4_MspInit+0xd0>)
90001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b70:	f003 0308 	and.w	r3, r3, #8
90001b74:	60fb      	str	r3, [r7, #12]
90001b76:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90001b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001b7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001b7e:	2312      	movs	r3, #18
90001b80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001b82:	2300      	movs	r3, #0
90001b84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001b86:	2302      	movs	r3, #2
90001b88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90001b8a:	2304      	movs	r3, #4
90001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90001b8e:	f107 0314 	add.w	r3, r7, #20
90001b92:	4619      	mov	r1, r3
90001b94:	481c      	ldr	r0, [pc, #112]	; (90001c08 <I2C4_MspInit+0xd4>)
90001b96:	f002 f8a1 	bl	90003cdc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001b9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
90001ba0:	2312      	movs	r3, #18
90001ba2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
90001ba4:	2300      	movs	r3, #0
90001ba6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
90001ba8:	2302      	movs	r3, #2
90001baa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90001bac:	2304      	movs	r3, #4
90001bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90001bb0:	f107 0314 	add.w	r3, r7, #20
90001bb4:	4619      	mov	r1, r3
90001bb6:	4814      	ldr	r0, [pc, #80]	; (90001c08 <I2C4_MspInit+0xd4>)
90001bb8:	f002 f890 	bl	90003cdc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
90001bbc:	4b11      	ldr	r3, [pc, #68]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001bc2:	4a10      	ldr	r2, [pc, #64]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001bc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001bcc:	4b0d      	ldr	r3, [pc, #52]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001bd6:	60bb      	str	r3, [r7, #8]
90001bd8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
90001bda:	4b0a      	ldr	r3, [pc, #40]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90001be0:	4a08      	ldr	r2, [pc, #32]	; (90001c04 <I2C4_MspInit+0xd0>)
90001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001be6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
90001bea:	4b06      	ldr	r3, [pc, #24]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90001bf0:	4a04      	ldr	r2, [pc, #16]	; (90001c04 <I2C4_MspInit+0xd0>)
90001bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90001bf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
90001bfa:	bf00      	nop
90001bfc:	3728      	adds	r7, #40	; 0x28
90001bfe:	46bd      	mov	sp, r7
90001c00:	bd80      	pop	{r7, pc}
90001c02:	bf00      	nop
90001c04:	58024400 	.word	0x58024400
90001c08:	58020c00 	.word	0x58020c00

90001c0c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
90001c0c:	b580      	push	{r7, lr}
90001c0e:	b088      	sub	sp, #32
90001c10:	af00      	add	r7, sp, #0
90001c12:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
90001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001c18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90001c1a:	68fb      	ldr	r3, [r7, #12]
90001c1c:	4619      	mov	r1, r3
90001c1e:	480b      	ldr	r0, [pc, #44]	; (90001c4c <I2C4_MspDeInit+0x40>)
90001c20:	f002 fa0c 	bl	9000403c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
90001c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90001c28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90001c2a:	68fb      	ldr	r3, [r7, #12]
90001c2c:	4619      	mov	r1, r3
90001c2e:	4807      	ldr	r0, [pc, #28]	; (90001c4c <I2C4_MspDeInit+0x40>)
90001c30:	f002 fa04 	bl	9000403c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90001c34:	4b06      	ldr	r3, [pc, #24]	; (90001c50 <I2C4_MspDeInit+0x44>)
90001c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001c3a:	4a05      	ldr	r2, [pc, #20]	; (90001c50 <I2C4_MspDeInit+0x44>)
90001c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90001c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
90001c44:	bf00      	nop
90001c46:	3720      	adds	r7, #32
90001c48:	46bd      	mov	sp, r7
90001c4a:	bd80      	pop	{r7, pc}
90001c4c:	58020c00 	.word	0x58020c00
90001c50:	58024400 	.word	0x58024400

90001c54 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001c54:	b580      	push	{r7, lr}
90001c56:	b088      	sub	sp, #32
90001c58:	af04      	add	r7, sp, #16
90001c5a:	607b      	str	r3, [r7, #4]
90001c5c:	4603      	mov	r3, r0
90001c5e:	81fb      	strh	r3, [r7, #14]
90001c60:	460b      	mov	r3, r1
90001c62:	81bb      	strh	r3, [r7, #12]
90001c64:	4613      	mov	r3, r2
90001c66:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001c68:	8978      	ldrh	r0, [r7, #10]
90001c6a:	89ba      	ldrh	r2, [r7, #12]
90001c6c:	89f9      	ldrh	r1, [r7, #14]
90001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001c72:	9302      	str	r3, [sp, #8]
90001c74:	8b3b      	ldrh	r3, [r7, #24]
90001c76:	9301      	str	r3, [sp, #4]
90001c78:	687b      	ldr	r3, [r7, #4]
90001c7a:	9300      	str	r3, [sp, #0]
90001c7c:	4603      	mov	r3, r0
90001c7e:	4807      	ldr	r0, [pc, #28]	; (90001c9c <I2C4_WriteReg+0x48>)
90001c80:	f003 fe08 	bl	90005894 <HAL_I2C_Mem_Write>
90001c84:	4603      	mov	r3, r0
90001c86:	2b00      	cmp	r3, #0
90001c88:	d101      	bne.n	90001c8e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001c8a:	2300      	movs	r3, #0
90001c8c:	e001      	b.n	90001c92 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001c8e:	f06f 0307 	mvn.w	r3, #7
}
90001c92:	4618      	mov	r0, r3
90001c94:	3710      	adds	r7, #16
90001c96:	46bd      	mov	sp, r7
90001c98:	bd80      	pop	{r7, pc}
90001c9a:	bf00      	nop
90001c9c:	20000eb8 	.word	0x20000eb8

90001ca0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
90001ca0:	b580      	push	{r7, lr}
90001ca2:	b088      	sub	sp, #32
90001ca4:	af04      	add	r7, sp, #16
90001ca6:	607b      	str	r3, [r7, #4]
90001ca8:	4603      	mov	r3, r0
90001caa:	81fb      	strh	r3, [r7, #14]
90001cac:	460b      	mov	r3, r1
90001cae:	81bb      	strh	r3, [r7, #12]
90001cb0:	4613      	mov	r3, r2
90001cb2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90001cb4:	8978      	ldrh	r0, [r7, #10]
90001cb6:	89ba      	ldrh	r2, [r7, #12]
90001cb8:	89f9      	ldrh	r1, [r7, #14]
90001cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90001cbe:	9302      	str	r3, [sp, #8]
90001cc0:	8b3b      	ldrh	r3, [r7, #24]
90001cc2:	9301      	str	r3, [sp, #4]
90001cc4:	687b      	ldr	r3, [r7, #4]
90001cc6:	9300      	str	r3, [sp, #0]
90001cc8:	4603      	mov	r3, r0
90001cca:	4807      	ldr	r0, [pc, #28]	; (90001ce8 <I2C4_ReadReg+0x48>)
90001ccc:	f003 fef6 	bl	90005abc <HAL_I2C_Mem_Read>
90001cd0:	4603      	mov	r3, r0
90001cd2:	2b00      	cmp	r3, #0
90001cd4:	d101      	bne.n	90001cda <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
90001cd6:	2300      	movs	r3, #0
90001cd8:	e001      	b.n	90001cde <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
90001cda:	f06f 0307 	mvn.w	r3, #7
}
90001cde:	4618      	mov	r0, r3
90001ce0:	3710      	adds	r7, #16
90001ce2:	46bd      	mov	sp, r7
90001ce4:	bd80      	pop	{r7, pc}
90001ce6:	bf00      	nop
90001ce8:	20000eb8 	.word	0x20000eb8

90001cec <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
90001cec:	b580      	push	{r7, lr}
90001cee:	b084      	sub	sp, #16
90001cf0:	af02      	add	r7, sp, #8
90001cf2:	6078      	str	r0, [r7, #4]
90001cf4:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
90001cf6:	f44f 7388 	mov.w	r3, #272	; 0x110
90001cfa:	9300      	str	r3, [sp, #0]
90001cfc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90001d00:	2200      	movs	r2, #0
90001d02:	6839      	ldr	r1, [r7, #0]
90001d04:	6878      	ldr	r0, [r7, #4]
90001d06:	f000 f805 	bl	90001d14 <BSP_LCD_InitEx>
90001d0a:	4603      	mov	r3, r0
}
90001d0c:	4618      	mov	r0, r3
90001d0e:	3708      	adds	r7, #8
90001d10:	46bd      	mov	sp, r7
90001d12:	bd80      	pop	{r7, pc}

90001d14 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
90001d14:	b580      	push	{r7, lr}
90001d16:	b09e      	sub	sp, #120	; 0x78
90001d18:	af00      	add	r7, sp, #0
90001d1a:	60f8      	str	r0, [r7, #12]
90001d1c:	60b9      	str	r1, [r7, #8]
90001d1e:	607a      	str	r2, [r7, #4]
90001d20:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001d22:	2300      	movs	r3, #0
90001d24:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
90001d26:	2300      	movs	r3, #0
90001d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
90001d2a:	68bb      	ldr	r3, [r7, #8]
90001d2c:	2b01      	cmp	r3, #1
90001d2e:	d808      	bhi.n	90001d42 <BSP_LCD_InitEx+0x2e>
90001d30:	68fb      	ldr	r3, [r7, #12]
90001d32:	2b00      	cmp	r3, #0
90001d34:	d105      	bne.n	90001d42 <BSP_LCD_InitEx+0x2e>
90001d36:	687b      	ldr	r3, [r7, #4]
90001d38:	2b02      	cmp	r3, #2
90001d3a:	d006      	beq.n	90001d4a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
90001d3c:	687b      	ldr	r3, [r7, #4]
90001d3e:	2b00      	cmp	r3, #0
90001d40:	d003      	beq.n	90001d4a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001d42:	f06f 0301 	mvn.w	r3, #1
90001d46:	677b      	str	r3, [r7, #116]	; 0x74
90001d48:	e0a8      	b.n	90001e9c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
90001d4a:	687b      	ldr	r3, [r7, #4]
90001d4c:	2b02      	cmp	r3, #2
90001d4e:	d109      	bne.n	90001d64 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
90001d50:	2302      	movs	r3, #2
90001d52:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
90001d54:	4a54      	ldr	r2, [pc, #336]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001d56:	68fb      	ldr	r3, [r7, #12]
90001d58:	015b      	lsls	r3, r3, #5
90001d5a:	4413      	add	r3, r2
90001d5c:	3310      	adds	r3, #16
90001d5e:	2202      	movs	r2, #2
90001d60:	601a      	str	r2, [r3, #0]
90001d62:	e008      	b.n	90001d76 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
90001d64:	2300      	movs	r3, #0
90001d66:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
90001d68:	4a4f      	ldr	r2, [pc, #316]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001d6a:	68fb      	ldr	r3, [r7, #12]
90001d6c:	015b      	lsls	r3, r3, #5
90001d6e:	4413      	add	r3, r2
90001d70:	3310      	adds	r3, #16
90001d72:	2204      	movs	r2, #4
90001d74:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
90001d76:	4a4c      	ldr	r2, [pc, #304]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001d78:	68fb      	ldr	r3, [r7, #12]
90001d7a:	015b      	lsls	r3, r3, #5
90001d7c:	4413      	add	r3, r2
90001d7e:	330c      	adds	r3, #12
90001d80:	687a      	ldr	r2, [r7, #4]
90001d82:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
90001d84:	4a48      	ldr	r2, [pc, #288]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001d86:	68fb      	ldr	r3, [r7, #12]
90001d88:	015b      	lsls	r3, r3, #5
90001d8a:	4413      	add	r3, r2
90001d8c:	683a      	ldr	r2, [r7, #0]
90001d8e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
90001d90:	4a45      	ldr	r2, [pc, #276]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001d92:	68fb      	ldr	r3, [r7, #12]
90001d94:	015b      	lsls	r3, r3, #5
90001d96:	4413      	add	r3, r2
90001d98:	3304      	adds	r3, #4
90001d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
90001d9e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
90001da0:	4b42      	ldr	r3, [pc, #264]	; (90001eac <BSP_LCD_InitEx+0x198>)
90001da2:	4a43      	ldr	r2, [pc, #268]	; (90001eb0 <BSP_LCD_InitEx+0x19c>)
90001da4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
90001da6:	4b43      	ldr	r3, [pc, #268]	; (90001eb4 <BSP_LCD_InitEx+0x1a0>)
90001da8:	4a43      	ldr	r2, [pc, #268]	; (90001eb8 <BSP_LCD_InitEx+0x1a4>)
90001daa:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
90001dac:	483f      	ldr	r0, [pc, #252]	; (90001eac <BSP_LCD_InitEx+0x198>)
90001dae:	f000 fcf9 	bl	900027a4 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
90001db2:	4840      	ldr	r0, [pc, #256]	; (90001eb4 <BSP_LCD_InitEx+0x1a0>)
90001db4:	f000 fdc2 	bl	9000293c <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
90001db8:	4b40      	ldr	r3, [pc, #256]	; (90001ebc <BSP_LCD_InitEx+0x1a8>)
90001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
90001dbc:	4b40      	ldr	r3, [pc, #256]	; (90001ec0 <BSP_LCD_InitEx+0x1ac>)
90001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
90001dc0:	2370      	movs	r3, #112	; 0x70
90001dc2:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
90001dc4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
90001dc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
90001dcc:	4611      	mov	r1, r2
90001dce:	4618      	mov	r0, r3
90001dd0:	f7fe fe6c 	bl	90000aac <FT5336_RegisterBusIO>
90001dd4:	4603      	mov	r3, r0
90001dd6:	2b00      	cmp	r3, #0
90001dd8:	da03      	bge.n	90001de2 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001dda:	f06f 0304 	mvn.w	r3, #4
90001dde:	677b      	str	r3, [r7, #116]	; 0x74
90001de0:	e02b      	b.n	90001e3a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
90001de2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
90001de6:	f107 0344 	add.w	r3, r7, #68	; 0x44
90001dea:	4611      	mov	r1, r2
90001dec:	4618      	mov	r0, r3
90001dee:	f7fe ff57 	bl	90000ca0 <FT5336_ReadID>
90001df2:	4603      	mov	r3, r0
90001df4:	2b00      	cmp	r3, #0
90001df6:	da03      	bge.n	90001e00 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90001df8:	f06f 0304 	mvn.w	r3, #4
90001dfc:	677b      	str	r3, [r7, #116]	; 0x74
90001dfe:	e01c      	b.n	90001e3a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
90001e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90001e02:	2b51      	cmp	r3, #81	; 0x51
90001e04:	d003      	beq.n	90001e0e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
90001e06:	f06f 0306 	mvn.w	r3, #6
90001e0a:	677b      	str	r3, [r7, #116]	; 0x74
90001e0c:	e015      	b.n	90001e3a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
90001e0e:	4827      	ldr	r0, [pc, #156]	; (90001eac <BSP_LCD_InitEx+0x198>)
90001e10:	f7fe fc9e 	bl	90000750 <MX_LTDC_ClockConfig>
90001e14:	4603      	mov	r3, r0
90001e16:	2b00      	cmp	r3, #0
90001e18:	d003      	beq.n	90001e22 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001e1a:	f06f 0303 	mvn.w	r3, #3
90001e1e:	677b      	str	r3, [r7, #116]	; 0x74
90001e20:	e00b      	b.n	90001e3a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
90001e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
90001e26:	6839      	ldr	r1, [r7, #0]
90001e28:	4820      	ldr	r0, [pc, #128]	; (90001eac <BSP_LCD_InitEx+0x198>)
90001e2a:	f000 f84d 	bl	90001ec8 <MX_LTDC_Init>
90001e2e:	4603      	mov	r3, r0
90001e30:	2b00      	cmp	r3, #0
90001e32:	d002      	beq.n	90001e3a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
90001e34:	f06f 0303 	mvn.w	r3, #3
90001e38:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
90001e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
90001e3c:	2b00      	cmp	r3, #0
90001e3e:	d12d      	bne.n	90001e9c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
90001e40:	2000      	movs	r0, #0
90001e42:	f000 fe0d 	bl	90002a60 <BSP_SDRAM_Init>
90001e46:	4603      	mov	r3, r0
90001e48:	2b00      	cmp	r3, #0
90001e4a:	d002      	beq.n	90001e52 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
90001e4c:	f06f 0303 	mvn.w	r3, #3
90001e50:	e025      	b.n	90001e9e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
90001e52:	2300      	movs	r3, #0
90001e54:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
90001e56:	683b      	ldr	r3, [r7, #0]
90001e58:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
90001e5a:	2300      	movs	r3, #0
90001e5c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
90001e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
90001e62:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
90001e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90001e66:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
90001e68:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
90001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
90001e6e:	f107 0314 	add.w	r3, r7, #20
90001e72:	461a      	mov	r2, r3
90001e74:	2100      	movs	r1, #0
90001e76:	480d      	ldr	r0, [pc, #52]	; (90001eac <BSP_LCD_InitEx+0x198>)
90001e78:	f000 f872 	bl	90001f60 <MX_LTDC_ConfigLayer>
90001e7c:	4603      	mov	r3, r0
90001e7e:	2b00      	cmp	r3, #0
90001e80:	d002      	beq.n	90001e88 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
90001e82:	f06f 0303 	mvn.w	r3, #3
90001e86:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
90001e88:	480e      	ldr	r0, [pc, #56]	; (90001ec4 <BSP_LCD_InitEx+0x1b0>)
90001e8a:	f000 fdbf 	bl	90002a0c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
90001e8e:	4a06      	ldr	r2, [pc, #24]	; (90001ea8 <BSP_LCD_InitEx+0x194>)
90001e90:	68fb      	ldr	r3, [r7, #12]
90001e92:	015b      	lsls	r3, r3, #5
90001e94:	4413      	add	r3, r2
90001e96:	3318      	adds	r3, #24
90001e98:	2201      	movs	r2, #1
90001e9a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
90001e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
90001e9e:	4618      	mov	r0, r3
90001ea0:	3778      	adds	r7, #120	; 0x78
90001ea2:	46bd      	mov	sp, r7
90001ea4:	bd80      	pop	{r7, pc}
90001ea6:	bf00      	nop
90001ea8:	20001068 	.word	0x20001068
90001eac:	20000fc0 	.word	0x20000fc0
90001eb0:	50001000 	.word	0x50001000
90001eb4:	20000f58 	.word	0x20000f58
90001eb8:	52001000 	.word	0x52001000
90001ebc:	90001441 	.word	0x90001441
90001ec0:	900015dd 	.word	0x900015dd
90001ec4:	20000f0c 	.word	0x20000f0c

90001ec8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
90001ec8:	b580      	push	{r7, lr}
90001eca:	b084      	sub	sp, #16
90001ecc:	af00      	add	r7, sp, #0
90001ece:	60f8      	str	r0, [r7, #12]
90001ed0:	60b9      	str	r1, [r7, #8]
90001ed2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
90001ed4:	68fb      	ldr	r3, [r7, #12]
90001ed6:	4a21      	ldr	r2, [pc, #132]	; (90001f5c <MX_LTDC_Init+0x94>)
90001ed8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001eda:	68fb      	ldr	r3, [r7, #12]
90001edc:	2200      	movs	r2, #0
90001ede:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
90001ee0:	68fb      	ldr	r3, [r7, #12]
90001ee2:	2200      	movs	r2, #0
90001ee4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001ee6:	68fb      	ldr	r3, [r7, #12]
90001ee8:	2200      	movs	r2, #0
90001eea:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001eec:	68fb      	ldr	r3, [r7, #12]
90001eee:	2200      	movs	r2, #0
90001ef0:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
90001ef2:	68fb      	ldr	r3, [r7, #12]
90001ef4:	2228      	movs	r2, #40	; 0x28
90001ef6:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
90001ef8:	68fb      	ldr	r3, [r7, #12]
90001efa:	222a      	movs	r2, #42	; 0x2a
90001efc:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
90001efe:	68bb      	ldr	r3, [r7, #8]
90001f00:	f103 0235 	add.w	r2, r3, #53	; 0x35
90001f04:	68fb      	ldr	r3, [r7, #12]
90001f06:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
90001f08:	68bb      	ldr	r3, [r7, #8]
90001f0a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
90001f0e:	68fb      	ldr	r3, [r7, #12]
90001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
90001f12:	68fb      	ldr	r3, [r7, #12]
90001f14:	2209      	movs	r2, #9
90001f16:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
90001f18:	68fb      	ldr	r3, [r7, #12]
90001f1a:	220b      	movs	r2, #11
90001f1c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
90001f1e:	687b      	ldr	r3, [r7, #4]
90001f20:	f103 020b 	add.w	r2, r3, #11
90001f24:	68fb      	ldr	r3, [r7, #12]
90001f26:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
90001f28:	687b      	ldr	r3, [r7, #4]
90001f2a:	f103 020d 	add.w	r2, r3, #13
90001f2e:	68fb      	ldr	r3, [r7, #12]
90001f30:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
90001f32:	68fb      	ldr	r3, [r7, #12]
90001f34:	22ff      	movs	r2, #255	; 0xff
90001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
90001f3a:	68fb      	ldr	r3, [r7, #12]
90001f3c:	22ff      	movs	r2, #255	; 0xff
90001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
90001f42:	68fb      	ldr	r3, [r7, #12]
90001f44:	22ff      	movs	r2, #255	; 0xff
90001f46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
90001f4a:	68f8      	ldr	r0, [r7, #12]
90001f4c:	f004 fa3a 	bl	900063c4 <HAL_LTDC_Init>
90001f50:	4603      	mov	r3, r0
}
90001f52:	4618      	mov	r0, r3
90001f54:	3710      	adds	r7, #16
90001f56:	46bd      	mov	sp, r7
90001f58:	bd80      	pop	{r7, pc}
90001f5a:	bf00      	nop
90001f5c:	50001000 	.word	0x50001000

90001f60 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
90001f60:	b580      	push	{r7, lr}
90001f62:	b092      	sub	sp, #72	; 0x48
90001f64:	af00      	add	r7, sp, #0
90001f66:	60f8      	str	r0, [r7, #12]
90001f68:	60b9      	str	r1, [r7, #8]
90001f6a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
90001f6c:	687b      	ldr	r3, [r7, #4]
90001f6e:	681b      	ldr	r3, [r3, #0]
90001f70:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
90001f72:	687b      	ldr	r3, [r7, #4]
90001f74:	685b      	ldr	r3, [r3, #4]
90001f76:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
90001f78:	687b      	ldr	r3, [r7, #4]
90001f7a:	689b      	ldr	r3, [r3, #8]
90001f7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
90001f7e:	687b      	ldr	r3, [r7, #4]
90001f80:	68db      	ldr	r3, [r3, #12]
90001f82:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
90001f84:	687b      	ldr	r3, [r7, #4]
90001f86:	691b      	ldr	r3, [r3, #16]
90001f88:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
90001f8a:	23ff      	movs	r3, #255	; 0xff
90001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
90001f8e:	2300      	movs	r3, #0
90001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
90001f92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
90001f96:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
90001f98:	2307      	movs	r3, #7
90001f9a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
90001f9c:	687b      	ldr	r3, [r7, #4]
90001f9e:	695b      	ldr	r3, [r3, #20]
90001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
90001fa2:	687b      	ldr	r3, [r7, #4]
90001fa4:	685a      	ldr	r2, [r3, #4]
90001fa6:	687b      	ldr	r3, [r7, #4]
90001fa8:	681b      	ldr	r3, [r3, #0]
90001faa:	1ad3      	subs	r3, r2, r3
90001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
90001fae:	687b      	ldr	r3, [r7, #4]
90001fb0:	68da      	ldr	r2, [r3, #12]
90001fb2:	687b      	ldr	r3, [r7, #4]
90001fb4:	689b      	ldr	r3, [r3, #8]
90001fb6:	1ad3      	subs	r3, r2, r3
90001fb8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
90001fba:	2300      	movs	r3, #0
90001fbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
90001fc0:	2300      	movs	r3, #0
90001fc2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
90001fc6:	2300      	movs	r3, #0
90001fc8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
90001fcc:	f107 0314 	add.w	r3, r7, #20
90001fd0:	68ba      	ldr	r2, [r7, #8]
90001fd2:	4619      	mov	r1, r3
90001fd4:	68f8      	ldr	r0, [r7, #12]
90001fd6:	f004 facf 	bl	90006578 <HAL_LTDC_ConfigLayer>
90001fda:	4603      	mov	r3, r0
}
90001fdc:	4618      	mov	r0, r3
90001fde:	3748      	adds	r7, #72	; 0x48
90001fe0:	46bd      	mov	sp, r7
90001fe2:	bd80      	pop	{r7, pc}

90001fe4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
90001fe4:	b480      	push	{r7}
90001fe6:	b085      	sub	sp, #20
90001fe8:	af00      	add	r7, sp, #0
90001fea:	6078      	str	r0, [r7, #4]
90001fec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90001fee:	2300      	movs	r3, #0
90001ff0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90001ff2:	687b      	ldr	r3, [r7, #4]
90001ff4:	2b00      	cmp	r3, #0
90001ff6:	d003      	beq.n	90002000 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90001ff8:	f06f 0301 	mvn.w	r3, #1
90001ffc:	60fb      	str	r3, [r7, #12]
90001ffe:	e007      	b.n	90002010 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
90002000:	4a07      	ldr	r2, [pc, #28]	; (90002020 <BSP_LCD_GetPixelFormat+0x3c>)
90002002:	687b      	ldr	r3, [r7, #4]
90002004:	015b      	lsls	r3, r3, #5
90002006:	4413      	add	r3, r2
90002008:	330c      	adds	r3, #12
9000200a:	681a      	ldr	r2, [r3, #0]
9000200c:	683b      	ldr	r3, [r7, #0]
9000200e:	601a      	str	r2, [r3, #0]
  }

  return ret;
90002010:	68fb      	ldr	r3, [r7, #12]
}
90002012:	4618      	mov	r0, r3
90002014:	3714      	adds	r7, #20
90002016:	46bd      	mov	sp, r7
90002018:	f85d 7b04 	ldr.w	r7, [sp], #4
9000201c:	4770      	bx	lr
9000201e:	bf00      	nop
90002020:	20001068 	.word	0x20001068

90002024 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
90002024:	b480      	push	{r7}
90002026:	b085      	sub	sp, #20
90002028:	af00      	add	r7, sp, #0
9000202a:	6078      	str	r0, [r7, #4]
9000202c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000202e:	2300      	movs	r3, #0
90002030:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
90002032:	687b      	ldr	r3, [r7, #4]
90002034:	2b00      	cmp	r3, #0
90002036:	d003      	beq.n	90002040 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002038:	f06f 0301 	mvn.w	r3, #1
9000203c:	60fb      	str	r3, [r7, #12]
9000203e:	e006      	b.n	9000204e <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
90002040:	4a06      	ldr	r2, [pc, #24]	; (9000205c <BSP_LCD_SetActiveLayer+0x38>)
90002042:	687b      	ldr	r3, [r7, #4]
90002044:	015b      	lsls	r3, r3, #5
90002046:	4413      	add	r3, r2
90002048:	3308      	adds	r3, #8
9000204a:	683a      	ldr	r2, [r7, #0]
9000204c:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000204e:	68fb      	ldr	r3, [r7, #12]
}
90002050:	4618      	mov	r0, r3
90002052:	3714      	adds	r7, #20
90002054:	46bd      	mov	sp, r7
90002056:	f85d 7b04 	ldr.w	r7, [sp], #4
9000205a:	4770      	bx	lr
9000205c:	20001068 	.word	0x20001068

90002060 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
90002060:	b480      	push	{r7}
90002062:	b085      	sub	sp, #20
90002064:	af00      	add	r7, sp, #0
90002066:	6078      	str	r0, [r7, #4]
90002068:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
9000206a:	2300      	movs	r3, #0
9000206c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
9000206e:	687b      	ldr	r3, [r7, #4]
90002070:	2b00      	cmp	r3, #0
90002072:	d003      	beq.n	9000207c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002074:	f06f 0301 	mvn.w	r3, #1
90002078:	60fb      	str	r3, [r7, #12]
9000207a:	e006      	b.n	9000208a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
9000207c:	4a06      	ldr	r2, [pc, #24]	; (90002098 <BSP_LCD_GetXSize+0x38>)
9000207e:	687b      	ldr	r3, [r7, #4]
90002080:	015b      	lsls	r3, r3, #5
90002082:	4413      	add	r3, r2
90002084:	681a      	ldr	r2, [r3, #0]
90002086:	683b      	ldr	r3, [r7, #0]
90002088:	601a      	str	r2, [r3, #0]
  }

  return ret;
9000208a:	68fb      	ldr	r3, [r7, #12]
}
9000208c:	4618      	mov	r0, r3
9000208e:	3714      	adds	r7, #20
90002090:	46bd      	mov	sp, r7
90002092:	f85d 7b04 	ldr.w	r7, [sp], #4
90002096:	4770      	bx	lr
90002098:	20001068 	.word	0x20001068

9000209c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
9000209c:	b480      	push	{r7}
9000209e:	b085      	sub	sp, #20
900020a0:	af00      	add	r7, sp, #0
900020a2:	6078      	str	r0, [r7, #4]
900020a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020a6:	2300      	movs	r3, #0
900020a8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
900020aa:	687b      	ldr	r3, [r7, #4]
900020ac:	2b00      	cmp	r3, #0
900020ae:	d003      	beq.n	900020b8 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
900020b0:	f06f 0301 	mvn.w	r3, #1
900020b4:	60fb      	str	r3, [r7, #12]
900020b6:	e007      	b.n	900020c8 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
900020b8:	4a07      	ldr	r2, [pc, #28]	; (900020d8 <BSP_LCD_GetYSize+0x3c>)
900020ba:	687b      	ldr	r3, [r7, #4]
900020bc:	015b      	lsls	r3, r3, #5
900020be:	4413      	add	r3, r2
900020c0:	3304      	adds	r3, #4
900020c2:	681a      	ldr	r2, [r3, #0]
900020c4:	683b      	ldr	r3, [r7, #0]
900020c6:	601a      	str	r2, [r3, #0]
  }

  return ret;
900020c8:	68fb      	ldr	r3, [r7, #12]
}
900020ca:	4618      	mov	r0, r3
900020cc:	3714      	adds	r7, #20
900020ce:	46bd      	mov	sp, r7
900020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
900020d4:	4770      	bx	lr
900020d6:	bf00      	nop
900020d8:	20001068 	.word	0x20001068

900020dc <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
900020dc:	b580      	push	{r7, lr}
900020de:	b08e      	sub	sp, #56	; 0x38
900020e0:	af02      	add	r7, sp, #8
900020e2:	60f8      	str	r0, [r7, #12]
900020e4:	60b9      	str	r1, [r7, #8]
900020e6:	607a      	str	r2, [r7, #4]
900020e8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
900020ea:	2300      	movs	r3, #0
900020ec:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
900020ee:	683b      	ldr	r3, [r7, #0]
900020f0:	330a      	adds	r3, #10
900020f2:	781b      	ldrb	r3, [r3, #0]
900020f4:	461a      	mov	r2, r3
900020f6:	683b      	ldr	r3, [r7, #0]
900020f8:	330b      	adds	r3, #11
900020fa:	781b      	ldrb	r3, [r3, #0]
900020fc:	021b      	lsls	r3, r3, #8
900020fe:	441a      	add	r2, r3
90002100:	683b      	ldr	r3, [r7, #0]
90002102:	330c      	adds	r3, #12
90002104:	781b      	ldrb	r3, [r3, #0]
90002106:	041b      	lsls	r3, r3, #16
90002108:	441a      	add	r2, r3
9000210a:	683b      	ldr	r3, [r7, #0]
9000210c:	330d      	adds	r3, #13
9000210e:	781b      	ldrb	r3, [r3, #0]
90002110:	061b      	lsls	r3, r3, #24
90002112:	4413      	add	r3, r2
90002114:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
90002116:	683b      	ldr	r3, [r7, #0]
90002118:	3312      	adds	r3, #18
9000211a:	781b      	ldrb	r3, [r3, #0]
9000211c:	461a      	mov	r2, r3
9000211e:	683b      	ldr	r3, [r7, #0]
90002120:	3313      	adds	r3, #19
90002122:	781b      	ldrb	r3, [r3, #0]
90002124:	021b      	lsls	r3, r3, #8
90002126:	441a      	add	r2, r3
90002128:	683b      	ldr	r3, [r7, #0]
9000212a:	3314      	adds	r3, #20
9000212c:	781b      	ldrb	r3, [r3, #0]
9000212e:	041b      	lsls	r3, r3, #16
90002130:	441a      	add	r2, r3
90002132:	683b      	ldr	r3, [r7, #0]
90002134:	3315      	adds	r3, #21
90002136:	781b      	ldrb	r3, [r3, #0]
90002138:	061b      	lsls	r3, r3, #24
9000213a:	4413      	add	r3, r2
9000213c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
9000213e:	683b      	ldr	r3, [r7, #0]
90002140:	3316      	adds	r3, #22
90002142:	781b      	ldrb	r3, [r3, #0]
90002144:	461a      	mov	r2, r3
90002146:	683b      	ldr	r3, [r7, #0]
90002148:	3317      	adds	r3, #23
9000214a:	781b      	ldrb	r3, [r3, #0]
9000214c:	021b      	lsls	r3, r3, #8
9000214e:	441a      	add	r2, r3
90002150:	683b      	ldr	r3, [r7, #0]
90002152:	3318      	adds	r3, #24
90002154:	781b      	ldrb	r3, [r3, #0]
90002156:	041b      	lsls	r3, r3, #16
90002158:	441a      	add	r2, r3
9000215a:	683b      	ldr	r3, [r7, #0]
9000215c:	3319      	adds	r3, #25
9000215e:	781b      	ldrb	r3, [r3, #0]
90002160:	061b      	lsls	r3, r3, #24
90002162:	4413      	add	r3, r2
90002164:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
90002166:	683b      	ldr	r3, [r7, #0]
90002168:	331c      	adds	r3, #28
9000216a:	781b      	ldrb	r3, [r3, #0]
9000216c:	461a      	mov	r2, r3
9000216e:	683b      	ldr	r3, [r7, #0]
90002170:	331d      	adds	r3, #29
90002172:	781b      	ldrb	r3, [r3, #0]
90002174:	021b      	lsls	r3, r3, #8
90002176:	4413      	add	r3, r2
90002178:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
9000217a:	4a37      	ldr	r2, [pc, #220]	; (90002258 <BSP_LCD_DrawBitmap+0x17c>)
9000217c:	68fb      	ldr	r3, [r7, #12]
9000217e:	015b      	lsls	r3, r3, #5
90002180:	4413      	add	r3, r2
90002182:	3308      	adds	r3, #8
90002184:	681b      	ldr	r3, [r3, #0]
90002186:	4a35      	ldr	r2, [pc, #212]	; (9000225c <BSP_LCD_DrawBitmap+0x180>)
90002188:	2134      	movs	r1, #52	; 0x34
9000218a:	fb01 f303 	mul.w	r3, r1, r3
9000218e:	4413      	add	r3, r2
90002190:	335c      	adds	r3, #92	; 0x5c
90002192:	681a      	ldr	r2, [r3, #0]
90002194:	4930      	ldr	r1, [pc, #192]	; (90002258 <BSP_LCD_DrawBitmap+0x17c>)
90002196:	68fb      	ldr	r3, [r7, #12]
90002198:	015b      	lsls	r3, r3, #5
9000219a:	440b      	add	r3, r1
9000219c:	681b      	ldr	r3, [r3, #0]
9000219e:	6879      	ldr	r1, [r7, #4]
900021a0:	fb03 f101 	mul.w	r1, r3, r1
900021a4:	68bb      	ldr	r3, [r7, #8]
900021a6:	440b      	add	r3, r1
900021a8:	482b      	ldr	r0, [pc, #172]	; (90002258 <BSP_LCD_DrawBitmap+0x17c>)
900021aa:	68f9      	ldr	r1, [r7, #12]
900021ac:	0149      	lsls	r1, r1, #5
900021ae:	4401      	add	r1, r0
900021b0:	3110      	adds	r1, #16
900021b2:	6809      	ldr	r1, [r1, #0]
900021b4:	fb01 f303 	mul.w	r3, r1, r3
900021b8:	4413      	add	r3, r2
900021ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
900021bc:	693b      	ldr	r3, [r7, #16]
900021be:	3b20      	subs	r3, #32
900021c0:	2b07      	cmp	r3, #7
900021c2:	d802      	bhi.n	900021ca <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
900021c4:	2300      	movs	r3, #0
900021c6:	627b      	str	r3, [r7, #36]	; 0x24
900021c8:	e008      	b.n	900021dc <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
900021ca:	693b      	ldr	r3, [r7, #16]
900021cc:	3b10      	subs	r3, #16
900021ce:	2b07      	cmp	r3, #7
900021d0:	d802      	bhi.n	900021d8 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
900021d2:	2302      	movs	r3, #2
900021d4:	627b      	str	r3, [r7, #36]	; 0x24
900021d6:	e001      	b.n	900021dc <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
900021d8:	2301      	movs	r3, #1
900021da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
900021dc:	697b      	ldr	r3, [r7, #20]
900021de:	3b01      	subs	r3, #1
900021e0:	69ba      	ldr	r2, [r7, #24]
900021e2:	fb02 f303 	mul.w	r3, r2, r3
900021e6:	693a      	ldr	r2, [r7, #16]
900021e8:	08d2      	lsrs	r2, r2, #3
900021ea:	fb03 f202 	mul.w	r2, r3, r2
900021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900021f0:	4413      	add	r3, r2
900021f2:	683a      	ldr	r2, [r7, #0]
900021f4:	4413      	add	r3, r2
900021f6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
900021f8:	2300      	movs	r3, #0
900021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
900021fc:	e023      	b.n	90002246 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
900021fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
90002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002202:	9300      	str	r3, [sp, #0]
90002204:	69bb      	ldr	r3, [r7, #24]
90002206:	6a39      	ldr	r1, [r7, #32]
90002208:	68f8      	ldr	r0, [r7, #12]
9000220a:	f000 fa77 	bl	900026fc <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
9000220e:	4a12      	ldr	r2, [pc, #72]	; (90002258 <BSP_LCD_DrawBitmap+0x17c>)
90002210:	68fb      	ldr	r3, [r7, #12]
90002212:	015b      	lsls	r3, r3, #5
90002214:	4413      	add	r3, r2
90002216:	681b      	ldr	r3, [r3, #0]
90002218:	490f      	ldr	r1, [pc, #60]	; (90002258 <BSP_LCD_DrawBitmap+0x17c>)
9000221a:	68fa      	ldr	r2, [r7, #12]
9000221c:	0152      	lsls	r2, r2, #5
9000221e:	440a      	add	r2, r1
90002220:	3210      	adds	r2, #16
90002222:	6812      	ldr	r2, [r2, #0]
90002224:	fb02 f303 	mul.w	r3, r2, r3
90002228:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000222a:	4413      	add	r3, r2
9000222c:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
9000222e:	693b      	ldr	r3, [r7, #16]
90002230:	08db      	lsrs	r3, r3, #3
90002232:	69ba      	ldr	r2, [r7, #24]
90002234:	fb02 f303 	mul.w	r3, r2, r3
90002238:	425b      	negs	r3, r3
9000223a:	6a3a      	ldr	r2, [r7, #32]
9000223c:	4413      	add	r3, r2
9000223e:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
90002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90002242:	3301      	adds	r3, #1
90002244:	62fb      	str	r3, [r7, #44]	; 0x2c
90002246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90002248:	697b      	ldr	r3, [r7, #20]
9000224a:	429a      	cmp	r2, r3
9000224c:	d3d7      	bcc.n	900021fe <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
9000224e:	69fb      	ldr	r3, [r7, #28]
}
90002250:	4618      	mov	r0, r3
90002252:	3730      	adds	r7, #48	; 0x30
90002254:	46bd      	mov	sp, r7
90002256:	bd80      	pop	{r7, pc}
90002258:	20001068 	.word	0x20001068
9000225c:	20000fc0 	.word	0x20000fc0

90002260 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
90002260:	b580      	push	{r7, lr}
90002262:	b088      	sub	sp, #32
90002264:	af00      	add	r7, sp, #0
90002266:	60f8      	str	r0, [r7, #12]
90002268:	60b9      	str	r1, [r7, #8]
9000226a:	607a      	str	r2, [r7, #4]
9000226c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
9000226e:	683b      	ldr	r3, [r7, #0]
90002270:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
90002272:	2300      	movs	r3, #0
90002274:	61fb      	str	r3, [r7, #28]
90002276:	e032      	b.n	900022de <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
90002278:	2300      	movs	r3, #0
9000227a:	617b      	str	r3, [r7, #20]
9000227c:	e028      	b.n	900022d0 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
9000227e:	69bb      	ldr	r3, [r7, #24]
90002280:	781b      	ldrb	r3, [r3, #0]
90002282:	461a      	mov	r2, r3
90002284:	69bb      	ldr	r3, [r7, #24]
90002286:	3301      	adds	r3, #1
90002288:	781b      	ldrb	r3, [r3, #0]
9000228a:	021b      	lsls	r3, r3, #8
9000228c:	431a      	orrs	r2, r3
9000228e:	69bb      	ldr	r3, [r7, #24]
90002290:	3302      	adds	r3, #2
90002292:	781b      	ldrb	r3, [r3, #0]
90002294:	041b      	lsls	r3, r3, #16
90002296:	431a      	orrs	r2, r3
90002298:	69bb      	ldr	r3, [r7, #24]
9000229a:	3303      	adds	r3, #3
9000229c:	781b      	ldrb	r3, [r3, #0]
9000229e:	061b      	lsls	r3, r3, #24
900022a0:	4313      	orrs	r3, r2
900022a2:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
900022a4:	68ba      	ldr	r2, [r7, #8]
900022a6:	697b      	ldr	r3, [r7, #20]
900022a8:	18d1      	adds	r1, r2, r3
900022aa:	687a      	ldr	r2, [r7, #4]
900022ac:	69fb      	ldr	r3, [r7, #28]
900022ae:	441a      	add	r2, r3
900022b0:	693b      	ldr	r3, [r7, #16]
900022b2:	68f8      	ldr	r0, [r7, #12]
900022b4:	f000 f95e 	bl	90002574 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
900022b8:	4a0d      	ldr	r2, [pc, #52]	; (900022f0 <BSP_LCD_FillRGBRect+0x90>)
900022ba:	68fb      	ldr	r3, [r7, #12]
900022bc:	015b      	lsls	r3, r3, #5
900022be:	4413      	add	r3, r2
900022c0:	3310      	adds	r3, #16
900022c2:	681b      	ldr	r3, [r3, #0]
900022c4:	69ba      	ldr	r2, [r7, #24]
900022c6:	4413      	add	r3, r2
900022c8:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
900022ca:	697b      	ldr	r3, [r7, #20]
900022cc:	3301      	adds	r3, #1
900022ce:	617b      	str	r3, [r7, #20]
900022d0:	697a      	ldr	r2, [r7, #20]
900022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900022d4:	429a      	cmp	r2, r3
900022d6:	d3d2      	bcc.n	9000227e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
900022d8:	69fb      	ldr	r3, [r7, #28]
900022da:	3301      	adds	r3, #1
900022dc:	61fb      	str	r3, [r7, #28]
900022de:	69fa      	ldr	r2, [r7, #28]
900022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900022e2:	429a      	cmp	r2, r3
900022e4:	d3c8      	bcc.n	90002278 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
900022e6:	2300      	movs	r3, #0
}
900022e8:	4618      	mov	r0, r3
900022ea:	3720      	adds	r7, #32
900022ec:	46bd      	mov	sp, r7
900022ee:	bd80      	pop	{r7, pc}
900022f0:	20001068 	.word	0x20001068

900022f4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
900022f4:	b580      	push	{r7, lr}
900022f6:	b088      	sub	sp, #32
900022f8:	af02      	add	r7, sp, #8
900022fa:	60f8      	str	r0, [r7, #12]
900022fc:	60b9      	str	r1, [r7, #8]
900022fe:	607a      	str	r2, [r7, #4]
90002300:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002302:	4a21      	ldr	r2, [pc, #132]	; (90002388 <BSP_LCD_DrawHLine+0x94>)
90002304:	68fb      	ldr	r3, [r7, #12]
90002306:	015b      	lsls	r3, r3, #5
90002308:	4413      	add	r3, r2
9000230a:	3308      	adds	r3, #8
9000230c:	681b      	ldr	r3, [r3, #0]
9000230e:	4a1f      	ldr	r2, [pc, #124]	; (9000238c <BSP_LCD_DrawHLine+0x98>)
90002310:	2134      	movs	r1, #52	; 0x34
90002312:	fb01 f303 	mul.w	r3, r1, r3
90002316:	4413      	add	r3, r2
90002318:	335c      	adds	r3, #92	; 0x5c
9000231a:	681a      	ldr	r2, [r3, #0]
9000231c:	491a      	ldr	r1, [pc, #104]	; (90002388 <BSP_LCD_DrawHLine+0x94>)
9000231e:	68fb      	ldr	r3, [r7, #12]
90002320:	015b      	lsls	r3, r3, #5
90002322:	440b      	add	r3, r1
90002324:	3310      	adds	r3, #16
90002326:	681b      	ldr	r3, [r3, #0]
90002328:	4817      	ldr	r0, [pc, #92]	; (90002388 <BSP_LCD_DrawHLine+0x94>)
9000232a:	68f9      	ldr	r1, [r7, #12]
9000232c:	0149      	lsls	r1, r1, #5
9000232e:	4401      	add	r1, r0
90002330:	6809      	ldr	r1, [r1, #0]
90002332:	6878      	ldr	r0, [r7, #4]
90002334:	fb01 f000 	mul.w	r0, r1, r0
90002338:	68b9      	ldr	r1, [r7, #8]
9000233a:	4401      	add	r1, r0
9000233c:	fb01 f303 	mul.w	r3, r1, r3
90002340:	4413      	add	r3, r2
90002342:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
90002344:	68ba      	ldr	r2, [r7, #8]
90002346:	683b      	ldr	r3, [r7, #0]
90002348:	441a      	add	r2, r3
9000234a:	490f      	ldr	r1, [pc, #60]	; (90002388 <BSP_LCD_DrawHLine+0x94>)
9000234c:	68fb      	ldr	r3, [r7, #12]
9000234e:	015b      	lsls	r3, r3, #5
90002350:	440b      	add	r3, r1
90002352:	681b      	ldr	r3, [r3, #0]
90002354:	429a      	cmp	r2, r3
90002356:	d907      	bls.n	90002368 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
90002358:	4a0b      	ldr	r2, [pc, #44]	; (90002388 <BSP_LCD_DrawHLine+0x94>)
9000235a:	68fb      	ldr	r3, [r7, #12]
9000235c:	015b      	lsls	r3, r3, #5
9000235e:	4413      	add	r3, r2
90002360:	681a      	ldr	r2, [r3, #0]
90002362:	68bb      	ldr	r3, [r7, #8]
90002364:	1ad3      	subs	r3, r2, r3
90002366:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
90002368:	6979      	ldr	r1, [r7, #20]
9000236a:	6a3b      	ldr	r3, [r7, #32]
9000236c:	9301      	str	r3, [sp, #4]
9000236e:	2300      	movs	r3, #0
90002370:	9300      	str	r3, [sp, #0]
90002372:	2301      	movs	r3, #1
90002374:	683a      	ldr	r2, [r7, #0]
90002376:	68f8      	ldr	r0, [r7, #12]
90002378:	f000 f956 	bl	90002628 <LL_FillBuffer>

  return BSP_ERROR_NONE;
9000237c:	2300      	movs	r3, #0
}
9000237e:	4618      	mov	r0, r3
90002380:	3718      	adds	r7, #24
90002382:	46bd      	mov	sp, r7
90002384:	bd80      	pop	{r7, pc}
90002386:	bf00      	nop
90002388:	20001068 	.word	0x20001068
9000238c:	20000fc0 	.word	0x20000fc0

90002390 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
90002390:	b580      	push	{r7, lr}
90002392:	b088      	sub	sp, #32
90002394:	af02      	add	r7, sp, #8
90002396:	60f8      	str	r0, [r7, #12]
90002398:	60b9      	str	r1, [r7, #8]
9000239a:	607a      	str	r2, [r7, #4]
9000239c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
9000239e:	4a24      	ldr	r2, [pc, #144]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
900023a0:	68fb      	ldr	r3, [r7, #12]
900023a2:	015b      	lsls	r3, r3, #5
900023a4:	4413      	add	r3, r2
900023a6:	3308      	adds	r3, #8
900023a8:	681b      	ldr	r3, [r3, #0]
900023aa:	4a22      	ldr	r2, [pc, #136]	; (90002434 <BSP_LCD_DrawVLine+0xa4>)
900023ac:	2134      	movs	r1, #52	; 0x34
900023ae:	fb01 f303 	mul.w	r3, r1, r3
900023b2:	4413      	add	r3, r2
900023b4:	335c      	adds	r3, #92	; 0x5c
900023b6:	681a      	ldr	r2, [r3, #0]
900023b8:	491d      	ldr	r1, [pc, #116]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
900023ba:	68fb      	ldr	r3, [r7, #12]
900023bc:	015b      	lsls	r3, r3, #5
900023be:	440b      	add	r3, r1
900023c0:	3310      	adds	r3, #16
900023c2:	681b      	ldr	r3, [r3, #0]
900023c4:	481a      	ldr	r0, [pc, #104]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
900023c6:	68f9      	ldr	r1, [r7, #12]
900023c8:	0149      	lsls	r1, r1, #5
900023ca:	4401      	add	r1, r0
900023cc:	6809      	ldr	r1, [r1, #0]
900023ce:	6878      	ldr	r0, [r7, #4]
900023d0:	fb01 f000 	mul.w	r0, r1, r0
900023d4:	68b9      	ldr	r1, [r7, #8]
900023d6:	4401      	add	r1, r0
900023d8:	fb01 f303 	mul.w	r3, r1, r3
900023dc:	4413      	add	r3, r2
900023de:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
900023e0:	687a      	ldr	r2, [r7, #4]
900023e2:	683b      	ldr	r3, [r7, #0]
900023e4:	441a      	add	r2, r3
900023e6:	4912      	ldr	r1, [pc, #72]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
900023e8:	68fb      	ldr	r3, [r7, #12]
900023ea:	015b      	lsls	r3, r3, #5
900023ec:	440b      	add	r3, r1
900023ee:	3304      	adds	r3, #4
900023f0:	681b      	ldr	r3, [r3, #0]
900023f2:	429a      	cmp	r2, r3
900023f4:	d908      	bls.n	90002408 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
900023f6:	4a0e      	ldr	r2, [pc, #56]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
900023f8:	68fb      	ldr	r3, [r7, #12]
900023fa:	015b      	lsls	r3, r3, #5
900023fc:	4413      	add	r3, r2
900023fe:	3304      	adds	r3, #4
90002400:	681a      	ldr	r2, [r3, #0]
90002402:	687b      	ldr	r3, [r7, #4]
90002404:	1ad3      	subs	r3, r2, r3
90002406:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
90002408:	6979      	ldr	r1, [r7, #20]
9000240a:	4a09      	ldr	r2, [pc, #36]	; (90002430 <BSP_LCD_DrawVLine+0xa0>)
9000240c:	68fb      	ldr	r3, [r7, #12]
9000240e:	015b      	lsls	r3, r3, #5
90002410:	4413      	add	r3, r2
90002412:	681b      	ldr	r3, [r3, #0]
90002414:	3b01      	subs	r3, #1
90002416:	6a3a      	ldr	r2, [r7, #32]
90002418:	9201      	str	r2, [sp, #4]
9000241a:	9300      	str	r3, [sp, #0]
9000241c:	683b      	ldr	r3, [r7, #0]
9000241e:	2201      	movs	r2, #1
90002420:	68f8      	ldr	r0, [r7, #12]
90002422:	f000 f901 	bl	90002628 <LL_FillBuffer>

  return BSP_ERROR_NONE;
90002426:	2300      	movs	r3, #0
}
90002428:	4618      	mov	r0, r3
9000242a:	3718      	adds	r7, #24
9000242c:	46bd      	mov	sp, r7
9000242e:	bd80      	pop	{r7, pc}
90002430:	20001068 	.word	0x20001068
90002434:	20000fc0 	.word	0x20000fc0

90002438 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
90002438:	b580      	push	{r7, lr}
9000243a:	b088      	sub	sp, #32
9000243c:	af02      	add	r7, sp, #8
9000243e:	60f8      	str	r0, [r7, #12]
90002440:	60b9      	str	r1, [r7, #8]
90002442:	607a      	str	r2, [r7, #4]
90002444:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
90002446:	4a1b      	ldr	r2, [pc, #108]	; (900024b4 <BSP_LCD_FillRect+0x7c>)
90002448:	68fb      	ldr	r3, [r7, #12]
9000244a:	015b      	lsls	r3, r3, #5
9000244c:	4413      	add	r3, r2
9000244e:	3308      	adds	r3, #8
90002450:	681b      	ldr	r3, [r3, #0]
90002452:	4a19      	ldr	r2, [pc, #100]	; (900024b8 <BSP_LCD_FillRect+0x80>)
90002454:	2134      	movs	r1, #52	; 0x34
90002456:	fb01 f303 	mul.w	r3, r1, r3
9000245a:	4413      	add	r3, r2
9000245c:	335c      	adds	r3, #92	; 0x5c
9000245e:	681a      	ldr	r2, [r3, #0]
90002460:	4914      	ldr	r1, [pc, #80]	; (900024b4 <BSP_LCD_FillRect+0x7c>)
90002462:	68fb      	ldr	r3, [r7, #12]
90002464:	015b      	lsls	r3, r3, #5
90002466:	440b      	add	r3, r1
90002468:	3310      	adds	r3, #16
9000246a:	681b      	ldr	r3, [r3, #0]
9000246c:	4811      	ldr	r0, [pc, #68]	; (900024b4 <BSP_LCD_FillRect+0x7c>)
9000246e:	68f9      	ldr	r1, [r7, #12]
90002470:	0149      	lsls	r1, r1, #5
90002472:	4401      	add	r1, r0
90002474:	6809      	ldr	r1, [r1, #0]
90002476:	6878      	ldr	r0, [r7, #4]
90002478:	fb01 f000 	mul.w	r0, r1, r0
9000247c:	68b9      	ldr	r1, [r7, #8]
9000247e:	4401      	add	r1, r0
90002480:	fb01 f303 	mul.w	r3, r1, r3
90002484:	4413      	add	r3, r2
90002486:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
90002488:	6979      	ldr	r1, [r7, #20]
9000248a:	4a0a      	ldr	r2, [pc, #40]	; (900024b4 <BSP_LCD_FillRect+0x7c>)
9000248c:	68fb      	ldr	r3, [r7, #12]
9000248e:	015b      	lsls	r3, r3, #5
90002490:	4413      	add	r3, r2
90002492:	681a      	ldr	r2, [r3, #0]
90002494:	683b      	ldr	r3, [r7, #0]
90002496:	1ad3      	subs	r3, r2, r3
90002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000249a:	9201      	str	r2, [sp, #4]
9000249c:	9300      	str	r3, [sp, #0]
9000249e:	6a3b      	ldr	r3, [r7, #32]
900024a0:	683a      	ldr	r2, [r7, #0]
900024a2:	68f8      	ldr	r0, [r7, #12]
900024a4:	f000 f8c0 	bl	90002628 <LL_FillBuffer>

  return BSP_ERROR_NONE;
900024a8:	2300      	movs	r3, #0
}
900024aa:	4618      	mov	r0, r3
900024ac:	3718      	adds	r7, #24
900024ae:	46bd      	mov	sp, r7
900024b0:	bd80      	pop	{r7, pc}
900024b2:	bf00      	nop
900024b4:	20001068 	.word	0x20001068
900024b8:	20000fc0 	.word	0x20000fc0

900024bc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
900024bc:	b480      	push	{r7}
900024be:	b085      	sub	sp, #20
900024c0:	af00      	add	r7, sp, #0
900024c2:	60f8      	str	r0, [r7, #12]
900024c4:	60b9      	str	r1, [r7, #8]
900024c6:	607a      	str	r2, [r7, #4]
900024c8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900024ca:	4a28      	ldr	r2, [pc, #160]	; (9000256c <BSP_LCD_ReadPixel+0xb0>)
900024cc:	68fb      	ldr	r3, [r7, #12]
900024ce:	015b      	lsls	r3, r3, #5
900024d0:	4413      	add	r3, r2
900024d2:	3308      	adds	r3, #8
900024d4:	681b      	ldr	r3, [r3, #0]
900024d6:	4a26      	ldr	r2, [pc, #152]	; (90002570 <BSP_LCD_ReadPixel+0xb4>)
900024d8:	2134      	movs	r1, #52	; 0x34
900024da:	fb01 f303 	mul.w	r3, r1, r3
900024de:	4413      	add	r3, r2
900024e0:	3348      	adds	r3, #72	; 0x48
900024e2:	681b      	ldr	r3, [r3, #0]
900024e4:	2b00      	cmp	r3, #0
900024e6:	d11c      	bne.n	90002522 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
900024e8:	4a20      	ldr	r2, [pc, #128]	; (9000256c <BSP_LCD_ReadPixel+0xb0>)
900024ea:	68fb      	ldr	r3, [r7, #12]
900024ec:	015b      	lsls	r3, r3, #5
900024ee:	4413      	add	r3, r2
900024f0:	3308      	adds	r3, #8
900024f2:	681b      	ldr	r3, [r3, #0]
900024f4:	4a1e      	ldr	r2, [pc, #120]	; (90002570 <BSP_LCD_ReadPixel+0xb4>)
900024f6:	2134      	movs	r1, #52	; 0x34
900024f8:	fb01 f303 	mul.w	r3, r1, r3
900024fc:	4413      	add	r3, r2
900024fe:	335c      	adds	r3, #92	; 0x5c
90002500:	681a      	ldr	r2, [r3, #0]
90002502:	491a      	ldr	r1, [pc, #104]	; (9000256c <BSP_LCD_ReadPixel+0xb0>)
90002504:	68fb      	ldr	r3, [r7, #12]
90002506:	015b      	lsls	r3, r3, #5
90002508:	440b      	add	r3, r1
9000250a:	681b      	ldr	r3, [r3, #0]
9000250c:	6879      	ldr	r1, [r7, #4]
9000250e:	fb03 f101 	mul.w	r1, r3, r1
90002512:	68bb      	ldr	r3, [r7, #8]
90002514:	440b      	add	r3, r1
90002516:	009b      	lsls	r3, r3, #2
90002518:	4413      	add	r3, r2
9000251a:	681a      	ldr	r2, [r3, #0]
9000251c:	683b      	ldr	r3, [r7, #0]
9000251e:	601a      	str	r2, [r3, #0]
90002520:	e01d      	b.n	9000255e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
90002522:	4a12      	ldr	r2, [pc, #72]	; (9000256c <BSP_LCD_ReadPixel+0xb0>)
90002524:	68fb      	ldr	r3, [r7, #12]
90002526:	015b      	lsls	r3, r3, #5
90002528:	4413      	add	r3, r2
9000252a:	3308      	adds	r3, #8
9000252c:	681b      	ldr	r3, [r3, #0]
9000252e:	4a10      	ldr	r2, [pc, #64]	; (90002570 <BSP_LCD_ReadPixel+0xb4>)
90002530:	2134      	movs	r1, #52	; 0x34
90002532:	fb01 f303 	mul.w	r3, r1, r3
90002536:	4413      	add	r3, r2
90002538:	335c      	adds	r3, #92	; 0x5c
9000253a:	681a      	ldr	r2, [r3, #0]
9000253c:	490b      	ldr	r1, [pc, #44]	; (9000256c <BSP_LCD_ReadPixel+0xb0>)
9000253e:	68fb      	ldr	r3, [r7, #12]
90002540:	015b      	lsls	r3, r3, #5
90002542:	440b      	add	r3, r1
90002544:	681b      	ldr	r3, [r3, #0]
90002546:	6879      	ldr	r1, [r7, #4]
90002548:	fb03 f101 	mul.w	r1, r3, r1
9000254c:	68bb      	ldr	r3, [r7, #8]
9000254e:	440b      	add	r3, r1
90002550:	005b      	lsls	r3, r3, #1
90002552:	4413      	add	r3, r2
90002554:	881b      	ldrh	r3, [r3, #0]
90002556:	b29b      	uxth	r3, r3
90002558:	461a      	mov	r2, r3
9000255a:	683b      	ldr	r3, [r7, #0]
9000255c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
9000255e:	2300      	movs	r3, #0
}
90002560:	4618      	mov	r0, r3
90002562:	3714      	adds	r7, #20
90002564:	46bd      	mov	sp, r7
90002566:	f85d 7b04 	ldr.w	r7, [sp], #4
9000256a:	4770      	bx	lr
9000256c:	20001068 	.word	0x20001068
90002570:	20000fc0 	.word	0x20000fc0

90002574 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
90002574:	b480      	push	{r7}
90002576:	b085      	sub	sp, #20
90002578:	af00      	add	r7, sp, #0
9000257a:	60f8      	str	r0, [r7, #12]
9000257c:	60b9      	str	r1, [r7, #8]
9000257e:	607a      	str	r2, [r7, #4]
90002580:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90002582:	4a27      	ldr	r2, [pc, #156]	; (90002620 <BSP_LCD_WritePixel+0xac>)
90002584:	68fb      	ldr	r3, [r7, #12]
90002586:	015b      	lsls	r3, r3, #5
90002588:	4413      	add	r3, r2
9000258a:	3308      	adds	r3, #8
9000258c:	681b      	ldr	r3, [r3, #0]
9000258e:	4a25      	ldr	r2, [pc, #148]	; (90002624 <BSP_LCD_WritePixel+0xb0>)
90002590:	2134      	movs	r1, #52	; 0x34
90002592:	fb01 f303 	mul.w	r3, r1, r3
90002596:	4413      	add	r3, r2
90002598:	3348      	adds	r3, #72	; 0x48
9000259a:	681b      	ldr	r3, [r3, #0]
9000259c:	2b00      	cmp	r3, #0
9000259e:	d11c      	bne.n	900025da <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
900025a0:	4a1f      	ldr	r2, [pc, #124]	; (90002620 <BSP_LCD_WritePixel+0xac>)
900025a2:	68fb      	ldr	r3, [r7, #12]
900025a4:	015b      	lsls	r3, r3, #5
900025a6:	4413      	add	r3, r2
900025a8:	3308      	adds	r3, #8
900025aa:	681b      	ldr	r3, [r3, #0]
900025ac:	4a1d      	ldr	r2, [pc, #116]	; (90002624 <BSP_LCD_WritePixel+0xb0>)
900025ae:	2134      	movs	r1, #52	; 0x34
900025b0:	fb01 f303 	mul.w	r3, r1, r3
900025b4:	4413      	add	r3, r2
900025b6:	335c      	adds	r3, #92	; 0x5c
900025b8:	681a      	ldr	r2, [r3, #0]
900025ba:	4919      	ldr	r1, [pc, #100]	; (90002620 <BSP_LCD_WritePixel+0xac>)
900025bc:	68fb      	ldr	r3, [r7, #12]
900025be:	015b      	lsls	r3, r3, #5
900025c0:	440b      	add	r3, r1
900025c2:	681b      	ldr	r3, [r3, #0]
900025c4:	6879      	ldr	r1, [r7, #4]
900025c6:	fb03 f101 	mul.w	r1, r3, r1
900025ca:	68bb      	ldr	r3, [r7, #8]
900025cc:	440b      	add	r3, r1
900025ce:	009b      	lsls	r3, r3, #2
900025d0:	4413      	add	r3, r2
900025d2:	461a      	mov	r2, r3
900025d4:	683b      	ldr	r3, [r7, #0]
900025d6:	6013      	str	r3, [r2, #0]
900025d8:	e01b      	b.n	90002612 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
900025da:	4a11      	ldr	r2, [pc, #68]	; (90002620 <BSP_LCD_WritePixel+0xac>)
900025dc:	68fb      	ldr	r3, [r7, #12]
900025de:	015b      	lsls	r3, r3, #5
900025e0:	4413      	add	r3, r2
900025e2:	3308      	adds	r3, #8
900025e4:	681b      	ldr	r3, [r3, #0]
900025e6:	4a0f      	ldr	r2, [pc, #60]	; (90002624 <BSP_LCD_WritePixel+0xb0>)
900025e8:	2134      	movs	r1, #52	; 0x34
900025ea:	fb01 f303 	mul.w	r3, r1, r3
900025ee:	4413      	add	r3, r2
900025f0:	335c      	adds	r3, #92	; 0x5c
900025f2:	681a      	ldr	r2, [r3, #0]
900025f4:	490a      	ldr	r1, [pc, #40]	; (90002620 <BSP_LCD_WritePixel+0xac>)
900025f6:	68fb      	ldr	r3, [r7, #12]
900025f8:	015b      	lsls	r3, r3, #5
900025fa:	440b      	add	r3, r1
900025fc:	681b      	ldr	r3, [r3, #0]
900025fe:	6879      	ldr	r1, [r7, #4]
90002600:	fb03 f101 	mul.w	r1, r3, r1
90002604:	68bb      	ldr	r3, [r7, #8]
90002606:	440b      	add	r3, r1
90002608:	005b      	lsls	r3, r3, #1
9000260a:	4413      	add	r3, r2
9000260c:	683a      	ldr	r2, [r7, #0]
9000260e:	b292      	uxth	r2, r2
90002610:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
90002612:	2300      	movs	r3, #0
}
90002614:	4618      	mov	r0, r3
90002616:	3714      	adds	r7, #20
90002618:	46bd      	mov	sp, r7
9000261a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000261e:	4770      	bx	lr
90002620:	20001068 	.word	0x20001068
90002624:	20000fc0 	.word	0x20000fc0

90002628 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
90002628:	b580      	push	{r7, lr}
9000262a:	b088      	sub	sp, #32
9000262c:	af02      	add	r7, sp, #8
9000262e:	60f8      	str	r0, [r7, #12]
90002630:	60b9      	str	r1, [r7, #8]
90002632:	607a      	str	r2, [r7, #4]
90002634:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
90002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002638:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
9000263a:	4a2d      	ldr	r2, [pc, #180]	; (900026f0 <LL_FillBuffer+0xc8>)
9000263c:	68fb      	ldr	r3, [r7, #12]
9000263e:	015b      	lsls	r3, r3, #5
90002640:	4413      	add	r3, r2
90002642:	330c      	adds	r3, #12
90002644:	681b      	ldr	r3, [r3, #0]
90002646:	2b02      	cmp	r3, #2
90002648:	d129      	bne.n	9000269e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000264a:	2302      	movs	r3, #2
9000264c:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
9000264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002650:	0adb      	lsrs	r3, r3, #11
90002652:	f003 021f 	and.w	r2, r3, #31
90002656:	4613      	mov	r3, r2
90002658:	011b      	lsls	r3, r3, #4
9000265a:	4413      	add	r3, r2
9000265c:	015a      	lsls	r2, r3, #5
9000265e:	1ad3      	subs	r3, r2, r3
90002660:	3317      	adds	r3, #23
90002662:	099b      	lsrs	r3, r3, #6
90002664:	0419      	lsls	r1, r3, #16
90002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002668:	095b      	lsrs	r3, r3, #5
9000266a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000266e:	4613      	mov	r3, r2
90002670:	01db      	lsls	r3, r3, #7
90002672:	4413      	add	r3, r2
90002674:	005b      	lsls	r3, r3, #1
90002676:	4413      	add	r3, r2
90002678:	3321      	adds	r3, #33	; 0x21
9000267a:	099b      	lsrs	r3, r3, #6
9000267c:	021b      	lsls	r3, r3, #8
9000267e:	4319      	orrs	r1, r3
90002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90002682:	f003 021f 	and.w	r2, r3, #31
90002686:	4613      	mov	r3, r2
90002688:	011b      	lsls	r3, r3, #4
9000268a:	4413      	add	r3, r2
9000268c:	015a      	lsls	r2, r3, #5
9000268e:	1ad3      	subs	r3, r2, r3
90002690:	3317      	adds	r3, #23
90002692:	099b      	lsrs	r3, r3, #6
90002694:	430b      	orrs	r3, r1
90002696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
9000269a:	613b      	str	r3, [r7, #16]
    break;
9000269c:	e002      	b.n	900026a4 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
9000269e:	2300      	movs	r3, #0
900026a0:	617b      	str	r3, [r7, #20]
    break;
900026a2:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
900026a4:	4b13      	ldr	r3, [pc, #76]	; (900026f4 <LL_FillBuffer+0xcc>)
900026a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
900026aa:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
900026ac:	4a11      	ldr	r2, [pc, #68]	; (900026f4 <LL_FillBuffer+0xcc>)
900026ae:	697b      	ldr	r3, [r7, #20]
900026b0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
900026b2:	4a10      	ldr	r2, [pc, #64]	; (900026f4 <LL_FillBuffer+0xcc>)
900026b4:	6a3b      	ldr	r3, [r7, #32]
900026b6:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
900026b8:	4b0e      	ldr	r3, [pc, #56]	; (900026f4 <LL_FillBuffer+0xcc>)
900026ba:	4a0f      	ldr	r2, [pc, #60]	; (900026f8 <LL_FillBuffer+0xd0>)
900026bc:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
900026be:	480d      	ldr	r0, [pc, #52]	; (900026f4 <LL_FillBuffer+0xcc>)
900026c0:	f001 f836 	bl	90003730 <HAL_DMA2D_Init>
900026c4:	4603      	mov	r3, r0
900026c6:	2b00      	cmp	r3, #0
900026c8:	d10e      	bne.n	900026e8 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
900026ca:	68ba      	ldr	r2, [r7, #8]
900026cc:	683b      	ldr	r3, [r7, #0]
900026ce:	9300      	str	r3, [sp, #0]
900026d0:	687b      	ldr	r3, [r7, #4]
900026d2:	6939      	ldr	r1, [r7, #16]
900026d4:	4807      	ldr	r0, [pc, #28]	; (900026f4 <LL_FillBuffer+0xcc>)
900026d6:	f001 f899 	bl	9000380c <HAL_DMA2D_Start>
900026da:	4603      	mov	r3, r0
900026dc:	2b00      	cmp	r3, #0
900026de:	d103      	bne.n	900026e8 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
900026e0:	2132      	movs	r1, #50	; 0x32
900026e2:	4804      	ldr	r0, [pc, #16]	; (900026f4 <LL_FillBuffer+0xcc>)
900026e4:	f001 f8bd 	bl	90003862 <HAL_DMA2D_PollForTransfer>
    }
  }
}
900026e8:	bf00      	nop
900026ea:	3718      	adds	r7, #24
900026ec:	46bd      	mov	sp, r7
900026ee:	bd80      	pop	{r7, pc}
900026f0:	20001068 	.word	0x20001068
900026f4:	20000f58 	.word	0x20000f58
900026f8:	52001000 	.word	0x52001000

900026fc <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
900026fc:	b580      	push	{r7, lr}
900026fe:	b088      	sub	sp, #32
90002700:	af02      	add	r7, sp, #8
90002702:	60f8      	str	r0, [r7, #12]
90002704:	60b9      	str	r1, [r7, #8]
90002706:	607a      	str	r2, [r7, #4]
90002708:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
9000270a:	4a23      	ldr	r2, [pc, #140]	; (90002798 <LL_ConvertLineToRGB+0x9c>)
9000270c:	68fb      	ldr	r3, [r7, #12]
9000270e:	015b      	lsls	r3, r3, #5
90002710:	4413      	add	r3, r2
90002712:	330c      	adds	r3, #12
90002714:	681b      	ldr	r3, [r3, #0]
90002716:	2b02      	cmp	r3, #2
90002718:	d102      	bne.n	90002720 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
9000271a:	2302      	movs	r3, #2
9000271c:	617b      	str	r3, [r7, #20]
    break;
9000271e:	e002      	b.n	90002726 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
90002720:	2300      	movs	r3, #0
90002722:	617b      	str	r3, [r7, #20]
    break;
90002724:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
90002726:	4b1d      	ldr	r3, [pc, #116]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002728:	f44f 3280 	mov.w	r2, #65536	; 0x10000
9000272c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
9000272e:	4a1b      	ldr	r2, [pc, #108]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002730:	697b      	ldr	r3, [r7, #20]
90002732:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
90002734:	4b19      	ldr	r3, [pc, #100]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002736:	2200      	movs	r2, #0
90002738:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
9000273a:	4b18      	ldr	r3, [pc, #96]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
9000273c:	2200      	movs	r2, #0
9000273e:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
90002740:	4b16      	ldr	r3, [pc, #88]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002742:	22ff      	movs	r2, #255	; 0xff
90002744:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
90002746:	4a15      	ldr	r2, [pc, #84]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002748:	6a3b      	ldr	r3, [r7, #32]
9000274a:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
9000274c:	4b13      	ldr	r3, [pc, #76]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
9000274e:	2200      	movs	r2, #0
90002750:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
90002752:	4b12      	ldr	r3, [pc, #72]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002754:	4a12      	ldr	r2, [pc, #72]	; (900027a0 <LL_ConvertLineToRGB+0xa4>)
90002756:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
90002758:	4810      	ldr	r0, [pc, #64]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
9000275a:	f000 ffe9 	bl	90003730 <HAL_DMA2D_Init>
9000275e:	4603      	mov	r3, r0
90002760:	2b00      	cmp	r3, #0
90002762:	d115      	bne.n	90002790 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
90002764:	2101      	movs	r1, #1
90002766:	480d      	ldr	r0, [pc, #52]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
90002768:	f001 f964 	bl	90003a34 <HAL_DMA2D_ConfigLayer>
9000276c:	4603      	mov	r3, r0
9000276e:	2b00      	cmp	r3, #0
90002770:	d10e      	bne.n	90002790 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
90002772:	68b9      	ldr	r1, [r7, #8]
90002774:	687a      	ldr	r2, [r7, #4]
90002776:	2301      	movs	r3, #1
90002778:	9300      	str	r3, [sp, #0]
9000277a:	683b      	ldr	r3, [r7, #0]
9000277c:	4807      	ldr	r0, [pc, #28]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
9000277e:	f001 f845 	bl	9000380c <HAL_DMA2D_Start>
90002782:	4603      	mov	r3, r0
90002784:	2b00      	cmp	r3, #0
90002786:	d103      	bne.n	90002790 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
90002788:	2132      	movs	r1, #50	; 0x32
9000278a:	4804      	ldr	r0, [pc, #16]	; (9000279c <LL_ConvertLineToRGB+0xa0>)
9000278c:	f001 f869 	bl	90003862 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
90002790:	bf00      	nop
90002792:	3718      	adds	r7, #24
90002794:	46bd      	mov	sp, r7
90002796:	bd80      	pop	{r7, pc}
90002798:	20001068 	.word	0x20001068
9000279c:	20000f58 	.word	0x20000f58
900027a0:	52001000 	.word	0x52001000

900027a4 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
900027a4:	b580      	push	{r7, lr}
900027a6:	b08e      	sub	sp, #56	; 0x38
900027a8:	af00      	add	r7, sp, #0
900027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
900027ac:	687b      	ldr	r3, [r7, #4]
900027ae:	681b      	ldr	r3, [r3, #0]
900027b0:	4a5b      	ldr	r2, [pc, #364]	; (90002920 <LTDC_MspInit+0x17c>)
900027b2:	4293      	cmp	r3, r2
900027b4:	f040 80b0 	bne.w	90002918 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
900027b8:	4b5a      	ldr	r3, [pc, #360]	; (90002924 <LTDC_MspInit+0x180>)
900027ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
900027be:	4a59      	ldr	r2, [pc, #356]	; (90002924 <LTDC_MspInit+0x180>)
900027c0:	f043 0308 	orr.w	r3, r3, #8
900027c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
900027c8:	4b56      	ldr	r3, [pc, #344]	; (90002924 <LTDC_MspInit+0x180>)
900027ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
900027ce:	f003 0308 	and.w	r3, r3, #8
900027d2:	623b      	str	r3, [r7, #32]
900027d4:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
900027d6:	4b53      	ldr	r3, [pc, #332]	; (90002924 <LTDC_MspInit+0x180>)
900027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027dc:	4a51      	ldr	r2, [pc, #324]	; (90002924 <LTDC_MspInit+0x180>)
900027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900027e6:	4b4f      	ldr	r3, [pc, #316]	; (90002924 <LTDC_MspInit+0x180>)
900027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
900027f0:	61fb      	str	r3, [r7, #28]
900027f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900027f4:	4b4b      	ldr	r3, [pc, #300]	; (90002924 <LTDC_MspInit+0x180>)
900027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900027fa:	4a4a      	ldr	r2, [pc, #296]	; (90002924 <LTDC_MspInit+0x180>)
900027fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90002800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002804:	4b47      	ldr	r3, [pc, #284]	; (90002924 <LTDC_MspInit+0x180>)
90002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000280e:	61bb      	str	r3, [r7, #24]
90002810:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002812:	4b44      	ldr	r3, [pc, #272]	; (90002924 <LTDC_MspInit+0x180>)
90002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002818:	4a42      	ldr	r2, [pc, #264]	; (90002924 <LTDC_MspInit+0x180>)
9000281a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
9000281e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002822:	4b40      	ldr	r3, [pc, #256]	; (90002924 <LTDC_MspInit+0x180>)
90002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000282c:	617b      	str	r3, [r7, #20]
9000282e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90002830:	4b3c      	ldr	r3, [pc, #240]	; (90002924 <LTDC_MspInit+0x180>)
90002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002836:	4a3b      	ldr	r2, [pc, #236]	; (90002924 <LTDC_MspInit+0x180>)
90002838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000283c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002840:	4b38      	ldr	r3, [pc, #224]	; (90002924 <LTDC_MspInit+0x180>)
90002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000284a:	613b      	str	r3, [r7, #16]
9000284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
9000284e:	4b35      	ldr	r3, [pc, #212]	; (90002924 <LTDC_MspInit+0x180>)
90002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002854:	4a33      	ldr	r2, [pc, #204]	; (90002924 <LTDC_MspInit+0x180>)
90002856:	f043 0308 	orr.w	r3, r3, #8
9000285a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000285e:	4b31      	ldr	r3, [pc, #196]	; (90002924 <LTDC_MspInit+0x180>)
90002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002864:	f003 0308 	and.w	r3, r3, #8
90002868:	60fb      	str	r3, [r7, #12]
9000286a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
9000286c:	f24d 2303 	movw	r3, #53763	; 0xd203
90002870:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002872:	2302      	movs	r3, #2
90002874:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
90002876:	2300      	movs	r3, #0
90002878:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
9000287a:	2302      	movs	r3, #2
9000287c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
9000287e:	230e      	movs	r3, #14
90002880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
90002882:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002886:	4619      	mov	r1, r3
90002888:	4827      	ldr	r0, [pc, #156]	; (90002928 <LTDC_MspInit+0x184>)
9000288a:	f001 fa27 	bl	90003cdc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
9000288e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90002892:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
90002894:	230e      	movs	r3, #14
90002896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
90002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000289c:	4619      	mov	r1, r3
9000289e:	4823      	ldr	r0, [pc, #140]	; (9000292c <LTDC_MspInit+0x188>)
900028a0:	f001 fa1c 	bl	90003cdc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
900028a4:	23ff      	movs	r3, #255	; 0xff
900028a6:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900028a8:	230e      	movs	r3, #14
900028aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
900028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028b0:	4619      	mov	r1, r3
900028b2:	481f      	ldr	r0, [pc, #124]	; (90002930 <LTDC_MspInit+0x18c>)
900028b4:	f001 fa12 	bl	90003cdc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
900028b8:	f240 2302 	movw	r3, #514	; 0x202
900028bc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
900028be:	2302      	movs	r3, #2
900028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
900028c2:	2300      	movs	r3, #0
900028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
900028c6:	2302      	movs	r3, #2
900028c8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
900028ca:	230e      	movs	r3, #14
900028cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028d2:	4619      	mov	r1, r3
900028d4:	4817      	ldr	r0, [pc, #92]	; (90002934 <LTDC_MspInit+0x190>)
900028d6:	f001 fa01 	bl	90003cdc <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
900028da:	2380      	movs	r3, #128	; 0x80
900028dc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
900028de:	2301      	movs	r3, #1
900028e0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
900028e6:	4619      	mov	r1, r3
900028e8:	4813      	ldr	r0, [pc, #76]	; (90002938 <LTDC_MspInit+0x194>)
900028ea:	f001 f9f7 	bl	90003cdc <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
900028ee:	2201      	movs	r2, #1
900028f0:	2180      	movs	r1, #128	; 0x80
900028f2:	4811      	ldr	r0, [pc, #68]	; (90002938 <LTDC_MspInit+0x194>)
900028f4:	f001 fcac 	bl	90004250 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
900028f8:	4b0a      	ldr	r3, [pc, #40]	; (90002924 <LTDC_MspInit+0x180>)
900028fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900028fe:	4a09      	ldr	r2, [pc, #36]	; (90002924 <LTDC_MspInit+0x180>)
90002900:	f043 0308 	orr.w	r3, r3, #8
90002904:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
90002908:	4b06      	ldr	r3, [pc, #24]	; (90002924 <LTDC_MspInit+0x180>)
9000290a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000290e:	4a05      	ldr	r2, [pc, #20]	; (90002924 <LTDC_MspInit+0x180>)
90002910:	f023 0308 	bic.w	r3, r3, #8
90002914:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
90002918:	bf00      	nop
9000291a:	3738      	adds	r7, #56	; 0x38
9000291c:	46bd      	mov	sp, r7
9000291e:	bd80      	pop	{r7, pc}
90002920:	50001000 	.word	0x50001000
90002924:	58024400 	.word	0x58024400
90002928:	58022000 	.word	0x58022000
9000292c:	58022400 	.word	0x58022400
90002930:	58022800 	.word	0x58022800
90002934:	58021c00 	.word	0x58021c00
90002938:	58020c00 	.word	0x58020c00

9000293c <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
9000293c:	b480      	push	{r7}
9000293e:	b085      	sub	sp, #20
90002940:	af00      	add	r7, sp, #0
90002942:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
90002944:	687b      	ldr	r3, [r7, #4]
90002946:	681b      	ldr	r3, [r3, #0]
90002948:	4a11      	ldr	r2, [pc, #68]	; (90002990 <DMA2D_MspInit+0x54>)
9000294a:	4293      	cmp	r3, r2
9000294c:	d11a      	bne.n	90002984 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000294e:	4b11      	ldr	r3, [pc, #68]	; (90002994 <DMA2D_MspInit+0x58>)
90002950:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002954:	4a0f      	ldr	r2, [pc, #60]	; (90002994 <DMA2D_MspInit+0x58>)
90002956:	f043 0310 	orr.w	r3, r3, #16
9000295a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
9000295e:	4b0d      	ldr	r3, [pc, #52]	; (90002994 <DMA2D_MspInit+0x58>)
90002960:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002964:	f003 0310 	and.w	r3, r3, #16
90002968:	60fb      	str	r3, [r7, #12]
9000296a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
9000296c:	4b09      	ldr	r3, [pc, #36]	; (90002994 <DMA2D_MspInit+0x58>)
9000296e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90002970:	4a08      	ldr	r2, [pc, #32]	; (90002994 <DMA2D_MspInit+0x58>)
90002972:	f043 0310 	orr.w	r3, r3, #16
90002976:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90002978:	4b06      	ldr	r3, [pc, #24]	; (90002994 <DMA2D_MspInit+0x58>)
9000297a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000297c:	4a05      	ldr	r2, [pc, #20]	; (90002994 <DMA2D_MspInit+0x58>)
9000297e:	f023 0310 	bic.w	r3, r3, #16
90002982:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
90002984:	bf00      	nop
90002986:	3714      	adds	r7, #20
90002988:	46bd      	mov	sp, r7
9000298a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000298e:	4770      	bx	lr
90002990:	52001000 	.word	0x52001000
90002994:	58024400 	.word	0x58024400

90002998 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
90002998:	b580      	push	{r7, lr}
9000299a:	b08a      	sub	sp, #40	; 0x28
9000299c:	af00      	add	r7, sp, #0
9000299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
900029a0:	4b18      	ldr	r3, [pc, #96]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900029a6:	4a17      	ldr	r2, [pc, #92]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900029ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900029b0:	4b14      	ldr	r3, [pc, #80]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900029ba:	613b      	str	r3, [r7, #16]
900029bc:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
900029be:	4b11      	ldr	r3, [pc, #68]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900029c4:	4a0f      	ldr	r2, [pc, #60]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029c6:	f043 0302 	orr.w	r3, r3, #2
900029ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
900029ce:	4b0d      	ldr	r3, [pc, #52]	; (90002a04 <TIMx_PWM_MspInit+0x6c>)
900029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900029d4:	f003 0302 	and.w	r3, r3, #2
900029d8:	60fb      	str	r3, [r7, #12]
900029da:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
900029dc:	2302      	movs	r3, #2
900029de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
900029e0:	2300      	movs	r3, #0
900029e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
900029e4:	2301      	movs	r3, #1
900029e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
900029e8:	2303      	movs	r3, #3
900029ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
900029ec:	2301      	movs	r3, #1
900029ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
900029f0:	f107 0314 	add.w	r3, r7, #20
900029f4:	4619      	mov	r1, r3
900029f6:	4804      	ldr	r0, [pc, #16]	; (90002a08 <TIMx_PWM_MspInit+0x70>)
900029f8:	f001 f970 	bl	90003cdc <HAL_GPIO_Init>
}
900029fc:	bf00      	nop
900029fe:	3728      	adds	r7, #40	; 0x28
90002a00:	46bd      	mov	sp, r7
90002a02:	bd80      	pop	{r7, pc}
90002a04:	58024400 	.word	0x58024400
90002a08:	58022800 	.word	0x58022800

90002a0c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
90002a0c:	b580      	push	{r7, lr}
90002a0e:	b082      	sub	sp, #8
90002a10:	af00      	add	r7, sp, #0
90002a12:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
90002a14:	687b      	ldr	r3, [r7, #4]
90002a16:	4a11      	ldr	r2, [pc, #68]	; (90002a5c <TIMx_PWM_Init+0x50>)
90002a18:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
90002a1a:	6878      	ldr	r0, [r7, #4]
90002a1c:	f006 fd32 	bl	90009484 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
90002a20:	6878      	ldr	r0, [r7, #4]
90002a22:	f7ff ffb9 	bl	90002998 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
90002a26:	687b      	ldr	r3, [r7, #4]
90002a28:	2204      	movs	r2, #4
90002a2a:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
90002a2c:	687b      	ldr	r3, [r7, #4]
90002a2e:	f24c 3250 	movw	r2, #50000	; 0xc350
90002a32:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
90002a34:	687b      	ldr	r3, [r7, #4]
90002a36:	2200      	movs	r2, #0
90002a38:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
90002a3a:	687b      	ldr	r3, [r7, #4]
90002a3c:	2200      	movs	r2, #0
90002a3e:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
90002a40:	687b      	ldr	r3, [r7, #4]
90002a42:	2200      	movs	r2, #0
90002a44:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
90002a46:	687b      	ldr	r3, [r7, #4]
90002a48:	2200      	movs	r2, #0
90002a4a:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
90002a4c:	6878      	ldr	r0, [r7, #4]
90002a4e:	f006 fcc2 	bl	900093d6 <HAL_TIM_PWM_Init>
}
90002a52:	bf00      	nop
90002a54:	3708      	adds	r7, #8
90002a56:	46bd      	mov	sp, r7
90002a58:	bd80      	pop	{r7, pc}
90002a5a:	bf00      	nop
90002a5c:	40010400 	.word	0x40010400

90002a60 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
90002a60:	b580      	push	{r7, lr}
90002a62:	b084      	sub	sp, #16
90002a64:	af00      	add	r7, sp, #0
90002a66:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90002a68:	2300      	movs	r3, #0
90002a6a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
90002a6c:	687b      	ldr	r3, [r7, #4]
90002a6e:	2b00      	cmp	r3, #0
90002a70:	d003      	beq.n	90002a7a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
90002a72:	f06f 0301 	mvn.w	r3, #1
90002a76:	60fb      	str	r3, [r7, #12]
90002a78:	e044      	b.n	90002b04 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
90002a7a:	687b      	ldr	r3, [r7, #4]
90002a7c:	2234      	movs	r2, #52	; 0x34
90002a7e:	fb02 f303 	mul.w	r3, r2, r3
90002a82:	4a23      	ldr	r2, [pc, #140]	; (90002b10 <BSP_SDRAM_Init+0xb0>)
90002a84:	4413      	add	r3, r2
90002a86:	4618      	mov	r0, r3
90002a88:	f000 f892 	bl	90002bb0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90002a8c:	687b      	ldr	r3, [r7, #4]
90002a8e:	2234      	movs	r2, #52	; 0x34
90002a90:	fb02 f303 	mul.w	r3, r2, r3
90002a94:	4a1e      	ldr	r2, [pc, #120]	; (90002b10 <BSP_SDRAM_Init+0xb0>)
90002a96:	4413      	add	r3, r2
90002a98:	2210      	movs	r2, #16
90002a9a:	2104      	movs	r1, #4
90002a9c:	4618      	mov	r0, r3
90002a9e:	f000 f83b 	bl	90002b18 <MX_SDRAM_BANK2_Init>
90002aa2:	4603      	mov	r3, r0
90002aa4:	2b00      	cmp	r3, #0
90002aa6:	d003      	beq.n	90002ab0 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
90002aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90002aac:	60fb      	str	r3, [r7, #12]
90002aae:	e029      	b.n	90002b04 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90002ab0:	4b18      	ldr	r3, [pc, #96]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ab2:	2208      	movs	r2, #8
90002ab4:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
90002ab6:	4b17      	ldr	r3, [pc, #92]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ab8:	2203      	movs	r2, #3
90002aba:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
90002abc:	4b15      	ldr	r3, [pc, #84]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002abe:	f240 6203 	movw	r2, #1539	; 0x603
90002ac2:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
90002ac4:	4b13      	ldr	r3, [pc, #76]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ac6:	2200      	movs	r2, #0
90002ac8:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
90002aca:	4b12      	ldr	r3, [pc, #72]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002acc:	2200      	movs	r2, #0
90002ace:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
90002ad0:	4b10      	ldr	r3, [pc, #64]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ad2:	2230      	movs	r2, #48	; 0x30
90002ad4:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
90002ad6:	4b0f      	ldr	r3, [pc, #60]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ad8:	2200      	movs	r2, #0
90002ada:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
90002adc:	4b0d      	ldr	r3, [pc, #52]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002ade:	f44f 7200 	mov.w	r2, #512	; 0x200
90002ae2:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90002ae4:	687b      	ldr	r3, [r7, #4]
90002ae6:	2234      	movs	r2, #52	; 0x34
90002ae8:	fb02 f303 	mul.w	r3, r2, r3
90002aec:	4a08      	ldr	r2, [pc, #32]	; (90002b10 <BSP_SDRAM_Init+0xb0>)
90002aee:	4413      	add	r3, r2
90002af0:	4908      	ldr	r1, [pc, #32]	; (90002b14 <BSP_SDRAM_Init+0xb4>)
90002af2:	4618      	mov	r0, r3
90002af4:	f7fe fb3a 	bl	9000116c <MT48LC4M32B2_Init>
90002af8:	4603      	mov	r3, r0
90002afa:	2b00      	cmp	r3, #0
90002afc:	d002      	beq.n	90002b04 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90002afe:	f06f 0304 	mvn.w	r3, #4
90002b02:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
90002b04:	68fb      	ldr	r3, [r7, #12]
}
90002b06:	4618      	mov	r0, r3
90002b08:	3710      	adds	r7, #16
90002b0a:	46bd      	mov	sp, r7
90002b0c:	bd80      	pop	{r7, pc}
90002b0e:	bf00      	nop
90002b10:	20001088 	.word	0x20001088
90002b14:	200010bc 	.word	0x200010bc

90002b18 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
90002b18:	b580      	push	{r7, lr}
90002b1a:	b08c      	sub	sp, #48	; 0x30
90002b1c:	af00      	add	r7, sp, #0
90002b1e:	60f8      	str	r0, [r7, #12]
90002b20:	60b9      	str	r1, [r7, #8]
90002b22:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
90002b24:	4b20      	ldr	r3, [pc, #128]	; (90002ba8 <MX_SDRAM_BANK2_Init+0x90>)
90002b26:	4a21      	ldr	r2, [pc, #132]	; (90002bac <MX_SDRAM_BANK2_Init+0x94>)
90002b28:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90002b2a:	68fb      	ldr	r3, [r7, #12]
90002b2c:	2201      	movs	r2, #1
90002b2e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90002b30:	68fb      	ldr	r3, [r7, #12]
90002b32:	2200      	movs	r2, #0
90002b34:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90002b36:	68fb      	ldr	r3, [r7, #12]
90002b38:	68ba      	ldr	r2, [r7, #8]
90002b3a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90002b3c:	68fb      	ldr	r3, [r7, #12]
90002b3e:	687a      	ldr	r2, [r7, #4]
90002b40:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90002b42:	4b19      	ldr	r3, [pc, #100]	; (90002ba8 <MX_SDRAM_BANK2_Init+0x90>)
90002b44:	2240      	movs	r2, #64	; 0x40
90002b46:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90002b48:	68fb      	ldr	r3, [r7, #12]
90002b4a:	f44f 72c0 	mov.w	r2, #384	; 0x180
90002b4e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90002b50:	68fb      	ldr	r3, [r7, #12]
90002b52:	2200      	movs	r2, #0
90002b54:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
90002b56:	68fb      	ldr	r3, [r7, #12]
90002b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
90002b5c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90002b5e:	68fb      	ldr	r3, [r7, #12]
90002b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90002b64:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90002b66:	68fb      	ldr	r3, [r7, #12]
90002b68:	2200      	movs	r2, #0
90002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
90002b6c:	2302      	movs	r3, #2
90002b6e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
90002b70:	2307      	movs	r3, #7
90002b72:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
90002b74:	2304      	movs	r3, #4
90002b76:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
90002b78:	2307      	movs	r3, #7
90002b7a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
90002b7c:	2302      	movs	r3, #2
90002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
90002b80:	2302      	movs	r3, #2
90002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
90002b84:	2302      	movs	r3, #2
90002b86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90002b88:	f107 0314 	add.w	r3, r7, #20
90002b8c:	4619      	mov	r1, r3
90002b8e:	68f8      	ldr	r0, [r7, #12]
90002b90:	f006 fb7e 	bl	90009290 <HAL_SDRAM_Init>
90002b94:	4603      	mov	r3, r0
90002b96:	2b00      	cmp	r3, #0
90002b98:	d001      	beq.n	90002b9e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
90002b9a:	2301      	movs	r3, #1
90002b9c:	e000      	b.n	90002ba0 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
90002b9e:	2300      	movs	r3, #0
}
90002ba0:	4618      	mov	r0, r3
90002ba2:	3730      	adds	r7, #48	; 0x30
90002ba4:	46bd      	mov	sp, r7
90002ba6:	bd80      	pop	{r7, pc}
90002ba8:	20001088 	.word	0x20001088
90002bac:	52004140 	.word	0x52004140

90002bb0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
90002bb0:	b580      	push	{r7, lr}
90002bb2:	b08e      	sub	sp, #56	; 0x38
90002bb4:	af00      	add	r7, sp, #0
90002bb6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90002bb8:	4b73      	ldr	r3, [pc, #460]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bbe:	4a72      	ldr	r2, [pc, #456]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90002bc4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90002bc8:	4b6f      	ldr	r3, [pc, #444]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90002bd2:	623b      	str	r3, [r7, #32]
90002bd4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
90002bd6:	4b6c      	ldr	r3, [pc, #432]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bd8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bdc:	4a6a      	ldr	r2, [pc, #424]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bde:	f043 0301 	orr.w	r3, r3, #1
90002be2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
90002be6:	4b68      	ldr	r3, [pc, #416]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002be8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
90002bec:	f003 0301 	and.w	r3, r3, #1
90002bf0:	61fb      	str	r3, [r7, #28]
90002bf2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
90002bf4:	4b64      	ldr	r3, [pc, #400]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002bfa:	4a63      	ldr	r2, [pc, #396]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002bfc:	f043 0308 	orr.w	r3, r3, #8
90002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c04:	4b60      	ldr	r3, [pc, #384]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c0a:	f003 0308 	and.w	r3, r3, #8
90002c0e:	61bb      	str	r3, [r7, #24]
90002c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90002c12:	4b5d      	ldr	r3, [pc, #372]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c18:	4a5b      	ldr	r2, [pc, #364]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c1a:	f043 0310 	orr.w	r3, r3, #16
90002c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c22:	4b59      	ldr	r3, [pc, #356]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c28:	f003 0310 	and.w	r3, r3, #16
90002c2c:	617b      	str	r3, [r7, #20]
90002c2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90002c30:	4b55      	ldr	r3, [pc, #340]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c36:	4a54      	ldr	r2, [pc, #336]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c38:	f043 0320 	orr.w	r3, r3, #32
90002c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c40:	4b51      	ldr	r3, [pc, #324]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c46:	f003 0320 	and.w	r3, r3, #32
90002c4a:	613b      	str	r3, [r7, #16]
90002c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90002c4e:	4b4e      	ldr	r3, [pc, #312]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c54:	4a4c      	ldr	r2, [pc, #304]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90002c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c5e:	4b4a      	ldr	r3, [pc, #296]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
90002c68:	60fb      	str	r3, [r7, #12]
90002c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90002c6c:	4b46      	ldr	r3, [pc, #280]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c72:	4a45      	ldr	r2, [pc, #276]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90002c7c:	4b42      	ldr	r3, [pc, #264]	; (90002d88 <SDRAM_MspInit+0x1d8>)
90002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002c86:	60bb      	str	r3, [r7, #8]
90002c88:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
90002c8a:	2302      	movs	r3, #2
90002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
90002c8e:	2301      	movs	r3, #1
90002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
90002c92:	2303      	movs	r3, #3
90002c94:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90002c96:	230c      	movs	r3, #12
90002c98:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90002c9a:	f24c 7303 	movw	r3, #50947	; 0xc703
90002c9e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002ca4:	4619      	mov	r1, r3
90002ca6:	4839      	ldr	r0, [pc, #228]	; (90002d8c <SDRAM_MspInit+0x1dc>)
90002ca8:	f001 f818 	bl	90003cdc <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90002cac:	f64f 7383 	movw	r3, #65411	; 0xff83
90002cb0:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90002cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cb6:	4619      	mov	r1, r3
90002cb8:	4835      	ldr	r0, [pc, #212]	; (90002d90 <SDRAM_MspInit+0x1e0>)
90002cba:	f001 f80f 	bl	90003cdc <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90002cbe:	f64f 033f 	movw	r3, #63551	; 0xf83f
90002cc2:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90002cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cc8:	4619      	mov	r1, r3
90002cca:	4832      	ldr	r0, [pc, #200]	; (90002d94 <SDRAM_MspInit+0x1e4>)
90002ccc:	f001 f806 	bl	90003cdc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90002cd0:	f248 1333 	movw	r3, #33075	; 0x8133
90002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cda:	4619      	mov	r1, r3
90002cdc:	482e      	ldr	r0, [pc, #184]	; (90002d98 <SDRAM_MspInit+0x1e8>)
90002cde:	f000 fffd 	bl	90003cdc <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90002ce2:	23e0      	movs	r3, #224	; 0xe0
90002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
90002cea:	4619      	mov	r1, r3
90002cec:	482b      	ldr	r0, [pc, #172]	; (90002d9c <SDRAM_MspInit+0x1ec>)
90002cee:	f000 fff5 	bl	90003cdc <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90002cf2:	4b2b      	ldr	r3, [pc, #172]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
90002cf8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90002cfa:	4b29      	ldr	r3, [pc, #164]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90002d00:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90002d02:	4b27      	ldr	r3, [pc, #156]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d04:	2280      	movs	r2, #128	; 0x80
90002d06:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90002d08:	4b25      	ldr	r3, [pc, #148]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d0a:	2200      	movs	r2, #0
90002d0c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90002d0e:	4b24      	ldr	r3, [pc, #144]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d10:	f240 2202 	movw	r2, #514	; 0x202
90002d14:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90002d16:	4b22      	ldr	r3, [pc, #136]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d18:	f640 0208 	movw	r2, #2056	; 0x808
90002d1c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90002d1e:	4b20      	ldr	r3, [pc, #128]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d20:	2220      	movs	r2, #32
90002d22:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90002d24:	4b1e      	ldr	r3, [pc, #120]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d26:	2280      	movs	r2, #128	; 0x80
90002d28:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90002d2a:	4b1d      	ldr	r3, [pc, #116]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90002d30:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
90002d32:	4b1b      	ldr	r3, [pc, #108]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d34:	2200      	movs	r2, #0
90002d36:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90002d38:	4b19      	ldr	r3, [pc, #100]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d3a:	2200      	movs	r2, #0
90002d3c:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
90002d3e:	4b18      	ldr	r3, [pc, #96]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d40:	2280      	movs	r2, #128	; 0x80
90002d42:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
90002d44:	4b16      	ldr	r3, [pc, #88]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d46:	2200      	movs	r2, #0
90002d48:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
90002d4a:	4b15      	ldr	r3, [pc, #84]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d4c:	2200      	movs	r2, #0
90002d4e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90002d50:	4b13      	ldr	r3, [pc, #76]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d52:	4a14      	ldr	r2, [pc, #80]	; (90002da4 <SDRAM_MspInit+0x1f4>)
90002d54:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90002d56:	4b14      	ldr	r3, [pc, #80]	; (90002da8 <SDRAM_MspInit+0x1f8>)
90002d58:	4a11      	ldr	r2, [pc, #68]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d5a:	631a      	str	r2, [r3, #48]	; 0x30
90002d5c:	4b10      	ldr	r3, [pc, #64]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d5e:	4a12      	ldr	r2, [pc, #72]	; (90002da8 <SDRAM_MspInit+0x1f8>)
90002d60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
90002d62:	480f      	ldr	r0, [pc, #60]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d64:	f003 fe2c 	bl	900069c0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
90002d68:	480d      	ldr	r0, [pc, #52]	; (90002da0 <SDRAM_MspInit+0x1f0>)
90002d6a:	f003 fddd 	bl	90006928 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90002d6e:	2200      	movs	r2, #0
90002d70:	210f      	movs	r1, #15
90002d72:	207a      	movs	r0, #122	; 0x7a
90002d74:	f000 fc2b 	bl	900035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90002d78:	207a      	movs	r0, #122	; 0x7a
90002d7a:	f000 fc42 	bl	90003602 <HAL_NVIC_EnableIRQ>
}
90002d7e:	bf00      	nop
90002d80:	3738      	adds	r7, #56	; 0x38
90002d82:	46bd      	mov	sp, r7
90002d84:	bd80      	pop	{r7, pc}
90002d86:	bf00      	nop
90002d88:	58024400 	.word	0x58024400
90002d8c:	58020c00 	.word	0x58020c00
90002d90:	58021000 	.word	0x58021000
90002d94:	58021400 	.word	0x58021400
90002d98:	58021800 	.word	0x58021800
90002d9c:	58021c00 	.word	0x58021c00
90002da0:	200010dc 	.word	0x200010dc
90002da4:	52000040 	.word	0x52000040
90002da8:	20001088 	.word	0x20001088

90002dac <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90002dac:	b580      	push	{r7, lr}
90002dae:	b088      	sub	sp, #32
90002db0:	af00      	add	r7, sp, #0
90002db2:	6078      	str	r0, [r7, #4]
90002db4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002db6:	2300      	movs	r3, #0
90002db8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002dba:	687b      	ldr	r3, [r7, #4]
90002dbc:	2b00      	cmp	r3, #0
90002dbe:	d11c      	bne.n	90002dfa <BSP_TS_Init+0x4e>
90002dc0:	683b      	ldr	r3, [r7, #0]
90002dc2:	681b      	ldr	r3, [r3, #0]
90002dc4:	2b00      	cmp	r3, #0
90002dc6:	d018      	beq.n	90002dfa <BSP_TS_Init+0x4e>
90002dc8:	683b      	ldr	r3, [r7, #0]
90002dca:	681b      	ldr	r3, [r3, #0]
90002dcc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
90002dd0:	d813      	bhi.n	90002dfa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002dd2:	683b      	ldr	r3, [r7, #0]
90002dd4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90002dd6:	2b00      	cmp	r3, #0
90002dd8:	d00f      	beq.n	90002dfa <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002dda:	683b      	ldr	r3, [r7, #0]
90002ddc:	685b      	ldr	r3, [r3, #4]
90002dde:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
90002de2:	d80a      	bhi.n	90002dfa <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90002de4:	683b      	ldr	r3, [r7, #0]
90002de6:	68da      	ldr	r2, [r3, #12]
90002de8:	683b      	ldr	r3, [r7, #0]
90002dea:	6819      	ldr	r1, [r3, #0]
90002dec:	683b      	ldr	r3, [r7, #0]
90002dee:	685b      	ldr	r3, [r3, #4]
90002df0:	428b      	cmp	r3, r1
90002df2:	bf28      	it	cs
90002df4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90002df6:	429a      	cmp	r2, r3
90002df8:	d903      	bls.n	90002e02 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002dfa:	f06f 0301 	mvn.w	r3, #1
90002dfe:	61fb      	str	r3, [r7, #28]
90002e00:	e06e      	b.n	90002ee0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
90002e02:	6878      	ldr	r0, [r7, #4]
90002e04:	f000 f98c 	bl	90003120 <FT5336_Probe>
90002e08:	4603      	mov	r3, r0
90002e0a:	2b00      	cmp	r3, #0
90002e0c:	d003      	beq.n	90002e16 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
90002e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90002e12:	61fb      	str	r3, [r7, #28]
90002e14:	e064      	b.n	90002ee0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90002e16:	683b      	ldr	r3, [r7, #0]
90002e18:	681a      	ldr	r2, [r3, #0]
90002e1a:	4934      	ldr	r1, [pc, #208]	; (90002eec <BSP_TS_Init+0x140>)
90002e1c:	687b      	ldr	r3, [r7, #4]
90002e1e:	019b      	lsls	r3, r3, #6
90002e20:	440b      	add	r3, r1
90002e22:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
90002e24:	683b      	ldr	r3, [r7, #0]
90002e26:	685a      	ldr	r2, [r3, #4]
90002e28:	4930      	ldr	r1, [pc, #192]	; (90002eec <BSP_TS_Init+0x140>)
90002e2a:	687b      	ldr	r3, [r7, #4]
90002e2c:	019b      	lsls	r3, r3, #6
90002e2e:	440b      	add	r3, r1
90002e30:	3304      	adds	r3, #4
90002e32:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
90002e34:	683b      	ldr	r3, [r7, #0]
90002e36:	689a      	ldr	r2, [r3, #8]
90002e38:	492c      	ldr	r1, [pc, #176]	; (90002eec <BSP_TS_Init+0x140>)
90002e3a:	687b      	ldr	r3, [r7, #4]
90002e3c:	019b      	lsls	r3, r3, #6
90002e3e:	440b      	add	r3, r1
90002e40:	3308      	adds	r3, #8
90002e42:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
90002e44:	683b      	ldr	r3, [r7, #0]
90002e46:	68da      	ldr	r2, [r3, #12]
90002e48:	4928      	ldr	r1, [pc, #160]	; (90002eec <BSP_TS_Init+0x140>)
90002e4a:	687b      	ldr	r3, [r7, #4]
90002e4c:	019b      	lsls	r3, r3, #6
90002e4e:	440b      	add	r3, r1
90002e50:	330c      	adds	r3, #12
90002e52:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90002e54:	4b26      	ldr	r3, [pc, #152]	; (90002ef0 <BSP_TS_Init+0x144>)
90002e56:	681b      	ldr	r3, [r3, #0]
90002e58:	69db      	ldr	r3, [r3, #28]
90002e5a:	4926      	ldr	r1, [pc, #152]	; (90002ef4 <BSP_TS_Init+0x148>)
90002e5c:	687a      	ldr	r2, [r7, #4]
90002e5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002e62:	f107 010c 	add.w	r1, r7, #12
90002e66:	4610      	mov	r0, r2
90002e68:	4798      	blx	r3
90002e6a:	4603      	mov	r3, r0
90002e6c:	2b00      	cmp	r3, #0
90002e6e:	da03      	bge.n	90002e78 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
90002e70:	f06f 0304 	mvn.w	r3, #4
90002e74:	61fb      	str	r3, [r7, #28]
90002e76:	e033      	b.n	90002ee0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90002e78:	693a      	ldr	r2, [r7, #16]
90002e7a:	491c      	ldr	r1, [pc, #112]	; (90002eec <BSP_TS_Init+0x140>)
90002e7c:	687b      	ldr	r3, [r7, #4]
90002e7e:	019b      	lsls	r3, r3, #6
90002e80:	440b      	add	r3, r1
90002e82:	3310      	adds	r3, #16
90002e84:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
90002e86:	697a      	ldr	r2, [r7, #20]
90002e88:	4918      	ldr	r1, [pc, #96]	; (90002eec <BSP_TS_Init+0x140>)
90002e8a:	687b      	ldr	r3, [r7, #4]
90002e8c:	019b      	lsls	r3, r3, #6
90002e8e:	440b      	add	r3, r1
90002e90:	3314      	adds	r3, #20
90002e92:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002e94:	2300      	movs	r3, #0
90002e96:	61bb      	str	r3, [r7, #24]
90002e98:	e01f      	b.n	90002eda <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90002e9a:	683b      	ldr	r3, [r7, #0]
90002e9c:	681a      	ldr	r2, [r3, #0]
90002e9e:	683b      	ldr	r3, [r7, #0]
90002ea0:	68db      	ldr	r3, [r3, #12]
90002ea2:	4413      	add	r3, r2
90002ea4:	1c5a      	adds	r2, r3, #1
90002ea6:	4811      	ldr	r0, [pc, #68]	; (90002eec <BSP_TS_Init+0x140>)
90002ea8:	687b      	ldr	r3, [r7, #4]
90002eaa:	0119      	lsls	r1, r3, #4
90002eac:	69bb      	ldr	r3, [r7, #24]
90002eae:	440b      	add	r3, r1
90002eb0:	3306      	adds	r3, #6
90002eb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90002eb6:	683b      	ldr	r3, [r7, #0]
90002eb8:	685a      	ldr	r2, [r3, #4]
90002eba:	683b      	ldr	r3, [r7, #0]
90002ebc:	68db      	ldr	r3, [r3, #12]
90002ebe:	4413      	add	r3, r2
90002ec0:	1c5a      	adds	r2, r3, #1
90002ec2:	480a      	ldr	r0, [pc, #40]	; (90002eec <BSP_TS_Init+0x140>)
90002ec4:	687b      	ldr	r3, [r7, #4]
90002ec6:	0119      	lsls	r1, r3, #4
90002ec8:	69bb      	ldr	r3, [r7, #24]
90002eca:	440b      	add	r3, r1
90002ecc:	330a      	adds	r3, #10
90002ece:	009b      	lsls	r3, r3, #2
90002ed0:	4403      	add	r3, r0
90002ed2:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
90002ed4:	69bb      	ldr	r3, [r7, #24]
90002ed6:	3301      	adds	r3, #1
90002ed8:	61bb      	str	r3, [r7, #24]
90002eda:	69bb      	ldr	r3, [r7, #24]
90002edc:	2b04      	cmp	r3, #4
90002ede:	d9dc      	bls.n	90002e9a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
90002ee0:	69fb      	ldr	r3, [r7, #28]
}
90002ee2:	4618      	mov	r0, r3
90002ee4:	3720      	adds	r7, #32
90002ee6:	46bd      	mov	sp, r7
90002ee8:	bd80      	pop	{r7, pc}
90002eea:	bf00      	nop
90002eec:	20001150 	.word	0x20001150
90002ef0:	20001148 	.word	0x20001148
90002ef4:	2000114c 	.word	0x2000114c

90002ef8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
90002ef8:	b580      	push	{r7, lr}
90002efa:	b08a      	sub	sp, #40	; 0x28
90002efc:	af00      	add	r7, sp, #0
90002efe:	6078      	str	r0, [r7, #4]
90002f00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
90002f02:	2300      	movs	r3, #0
90002f04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
90002f06:	687b      	ldr	r3, [r7, #4]
90002f08:	2b00      	cmp	r3, #0
90002f0a:	d003      	beq.n	90002f14 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
90002f0c:	f06f 0301 	mvn.w	r3, #1
90002f10:	627b      	str	r3, [r7, #36]	; 0x24
90002f12:	e0f9      	b.n	90003108 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90002f14:	4b7f      	ldr	r3, [pc, #508]	; (90003114 <BSP_TS_GetState+0x21c>)
90002f16:	681b      	ldr	r3, [r3, #0]
90002f18:	691b      	ldr	r3, [r3, #16]
90002f1a:	497f      	ldr	r1, [pc, #508]	; (90003118 <BSP_TS_GetState+0x220>)
90002f1c:	687a      	ldr	r2, [r7, #4]
90002f1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
90002f22:	f107 0108 	add.w	r1, r7, #8
90002f26:	4610      	mov	r0, r2
90002f28:	4798      	blx	r3
90002f2a:	4603      	mov	r3, r0
90002f2c:	2b00      	cmp	r3, #0
90002f2e:	da03      	bge.n	90002f38 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
90002f30:	f06f 0304 	mvn.w	r3, #4
90002f34:	627b      	str	r3, [r7, #36]	; 0x24
90002f36:	e0e7      	b.n	90003108 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
90002f38:	68bb      	ldr	r3, [r7, #8]
90002f3a:	2b00      	cmp	r3, #0
90002f3c:	f000 80d1 	beq.w	900030e2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
90002f40:	68fb      	ldr	r3, [r7, #12]
90002f42:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
90002f44:	693b      	ldr	r3, [r7, #16]
90002f46:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90002f48:	4a74      	ldr	r2, [pc, #464]	; (9000311c <BSP_TS_GetState+0x224>)
90002f4a:	687b      	ldr	r3, [r7, #4]
90002f4c:	019b      	lsls	r3, r3, #6
90002f4e:	4413      	add	r3, r2
90002f50:	3308      	adds	r3, #8
90002f52:	681b      	ldr	r3, [r3, #0]
90002f54:	f003 0308 	and.w	r3, r3, #8
90002f58:	2b00      	cmp	r3, #0
90002f5a:	d003      	beq.n	90002f64 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
90002f5c:	693b      	ldr	r3, [r7, #16]
90002f5e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
90002f60:	68fb      	ldr	r3, [r7, #12]
90002f62:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90002f64:	4a6d      	ldr	r2, [pc, #436]	; (9000311c <BSP_TS_GetState+0x224>)
90002f66:	687b      	ldr	r3, [r7, #4]
90002f68:	019b      	lsls	r3, r3, #6
90002f6a:	4413      	add	r3, r2
90002f6c:	3308      	adds	r3, #8
90002f6e:	681b      	ldr	r3, [r3, #0]
90002f70:	f003 0302 	and.w	r3, r3, #2
90002f74:	2b00      	cmp	r3, #0
90002f76:	d009      	beq.n	90002f8c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90002f78:	4a68      	ldr	r2, [pc, #416]	; (9000311c <BSP_TS_GetState+0x224>)
90002f7a:	687b      	ldr	r3, [r7, #4]
90002f7c:	019b      	lsls	r3, r3, #6
90002f7e:	4413      	add	r3, r2
90002f80:	3310      	adds	r3, #16
90002f82:	681a      	ldr	r2, [r3, #0]
90002f84:	68fb      	ldr	r3, [r7, #12]
90002f86:	1ad3      	subs	r3, r2, r3
90002f88:	3b01      	subs	r3, #1
90002f8a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90002f8c:	4a63      	ldr	r2, [pc, #396]	; (9000311c <BSP_TS_GetState+0x224>)
90002f8e:	687b      	ldr	r3, [r7, #4]
90002f90:	019b      	lsls	r3, r3, #6
90002f92:	4413      	add	r3, r2
90002f94:	3308      	adds	r3, #8
90002f96:	681b      	ldr	r3, [r3, #0]
90002f98:	f003 0304 	and.w	r3, r3, #4
90002f9c:	2b00      	cmp	r3, #0
90002f9e:	d008      	beq.n	90002fb2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90002fa0:	4a5e      	ldr	r2, [pc, #376]	; (9000311c <BSP_TS_GetState+0x224>)
90002fa2:	687b      	ldr	r3, [r7, #4]
90002fa4:	019b      	lsls	r3, r3, #6
90002fa6:	4413      	add	r3, r2
90002fa8:	3314      	adds	r3, #20
90002faa:	681a      	ldr	r2, [r3, #0]
90002fac:	693b      	ldr	r3, [r7, #16]
90002fae:	1ad3      	subs	r3, r2, r3
90002fb0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90002fb2:	4a5a      	ldr	r2, [pc, #360]	; (9000311c <BSP_TS_GetState+0x224>)
90002fb4:	687b      	ldr	r3, [r7, #4]
90002fb6:	019b      	lsls	r3, r3, #6
90002fb8:	4413      	add	r3, r2
90002fba:	681b      	ldr	r3, [r3, #0]
90002fbc:	6a3a      	ldr	r2, [r7, #32]
90002fbe:	fb03 f202 	mul.w	r2, r3, r2
90002fc2:	4956      	ldr	r1, [pc, #344]	; (9000311c <BSP_TS_GetState+0x224>)
90002fc4:	687b      	ldr	r3, [r7, #4]
90002fc6:	019b      	lsls	r3, r3, #6
90002fc8:	440b      	add	r3, r1
90002fca:	3310      	adds	r3, #16
90002fcc:	681b      	ldr	r3, [r3, #0]
90002fce:	fbb2 f2f3 	udiv	r2, r2, r3
90002fd2:	683b      	ldr	r3, [r7, #0]
90002fd4:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90002fd6:	4a51      	ldr	r2, [pc, #324]	; (9000311c <BSP_TS_GetState+0x224>)
90002fd8:	687b      	ldr	r3, [r7, #4]
90002fda:	019b      	lsls	r3, r3, #6
90002fdc:	4413      	add	r3, r2
90002fde:	3304      	adds	r3, #4
90002fe0:	681b      	ldr	r3, [r3, #0]
90002fe2:	69fa      	ldr	r2, [r7, #28]
90002fe4:	fb03 f202 	mul.w	r2, r3, r2
90002fe8:	494c      	ldr	r1, [pc, #304]	; (9000311c <BSP_TS_GetState+0x224>)
90002fea:	687b      	ldr	r3, [r7, #4]
90002fec:	019b      	lsls	r3, r3, #6
90002fee:	440b      	add	r3, r1
90002ff0:	3314      	adds	r3, #20
90002ff2:	681b      	ldr	r3, [r3, #0]
90002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
90002ff8:	683b      	ldr	r3, [r7, #0]
90002ffa:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
90002ffc:	68ba      	ldr	r2, [r7, #8]
90002ffe:	683b      	ldr	r3, [r7, #0]
90003000:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90003002:	683b      	ldr	r3, [r7, #0]
90003004:	685a      	ldr	r2, [r3, #4]
90003006:	4945      	ldr	r1, [pc, #276]	; (9000311c <BSP_TS_GetState+0x224>)
90003008:	687b      	ldr	r3, [r7, #4]
9000300a:	019b      	lsls	r3, r3, #6
9000300c:	440b      	add	r3, r1
9000300e:	3318      	adds	r3, #24
90003010:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90003012:	429a      	cmp	r2, r3
90003014:	d909      	bls.n	9000302a <BSP_TS_GetState+0x132>
90003016:	683b      	ldr	r3, [r7, #0]
90003018:	685a      	ldr	r2, [r3, #4]
9000301a:	4940      	ldr	r1, [pc, #256]	; (9000311c <BSP_TS_GetState+0x224>)
9000301c:	687b      	ldr	r3, [r7, #4]
9000301e:	019b      	lsls	r3, r3, #6
90003020:	440b      	add	r3, r1
90003022:	3318      	adds	r3, #24
90003024:	681b      	ldr	r3, [r3, #0]
90003026:	1ad3      	subs	r3, r2, r3
90003028:	e008      	b.n	9000303c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
9000302a:	4a3c      	ldr	r2, [pc, #240]	; (9000311c <BSP_TS_GetState+0x224>)
9000302c:	687b      	ldr	r3, [r7, #4]
9000302e:	019b      	lsls	r3, r3, #6
90003030:	4413      	add	r3, r2
90003032:	3318      	adds	r3, #24
90003034:	681a      	ldr	r2, [r3, #0]
90003036:	683b      	ldr	r3, [r7, #0]
90003038:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000303a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
9000303c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
9000303e:	683b      	ldr	r3, [r7, #0]
90003040:	689a      	ldr	r2, [r3, #8]
90003042:	4936      	ldr	r1, [pc, #216]	; (9000311c <BSP_TS_GetState+0x224>)
90003044:	687b      	ldr	r3, [r7, #4]
90003046:	019b      	lsls	r3, r3, #6
90003048:	440b      	add	r3, r1
9000304a:	332c      	adds	r3, #44	; 0x2c
9000304c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000304e:	429a      	cmp	r2, r3
90003050:	d909      	bls.n	90003066 <BSP_TS_GetState+0x16e>
90003052:	683b      	ldr	r3, [r7, #0]
90003054:	689a      	ldr	r2, [r3, #8]
90003056:	4931      	ldr	r1, [pc, #196]	; (9000311c <BSP_TS_GetState+0x224>)
90003058:	687b      	ldr	r3, [r7, #4]
9000305a:	019b      	lsls	r3, r3, #6
9000305c:	440b      	add	r3, r1
9000305e:	332c      	adds	r3, #44	; 0x2c
90003060:	681b      	ldr	r3, [r3, #0]
90003062:	1ad3      	subs	r3, r2, r3
90003064:	e008      	b.n	90003078 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
90003066:	4a2d      	ldr	r2, [pc, #180]	; (9000311c <BSP_TS_GetState+0x224>)
90003068:	687b      	ldr	r3, [r7, #4]
9000306a:	019b      	lsls	r3, r3, #6
9000306c:	4413      	add	r3, r2
9000306e:	332c      	adds	r3, #44	; 0x2c
90003070:	681a      	ldr	r2, [r3, #0]
90003072:	683b      	ldr	r3, [r7, #0]
90003074:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90003076:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90003078:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000307a:	4a28      	ldr	r2, [pc, #160]	; (9000311c <BSP_TS_GetState+0x224>)
9000307c:	687b      	ldr	r3, [r7, #4]
9000307e:	019b      	lsls	r3, r3, #6
90003080:	4413      	add	r3, r2
90003082:	330c      	adds	r3, #12
90003084:	681b      	ldr	r3, [r3, #0]
90003086:	69ba      	ldr	r2, [r7, #24]
90003088:	429a      	cmp	r2, r3
9000308a:	d808      	bhi.n	9000309e <BSP_TS_GetState+0x1a6>
9000308c:	4a23      	ldr	r2, [pc, #140]	; (9000311c <BSP_TS_GetState+0x224>)
9000308e:	687b      	ldr	r3, [r7, #4]
90003090:	019b      	lsls	r3, r3, #6
90003092:	4413      	add	r3, r2
90003094:	330c      	adds	r3, #12
90003096:	681b      	ldr	r3, [r3, #0]
90003098:	697a      	ldr	r2, [r7, #20]
9000309a:	429a      	cmp	r2, r3
9000309c:	d910      	bls.n	900030c0 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
9000309e:	683b      	ldr	r3, [r7, #0]
900030a0:	685a      	ldr	r2, [r3, #4]
900030a2:	491e      	ldr	r1, [pc, #120]	; (9000311c <BSP_TS_GetState+0x224>)
900030a4:	687b      	ldr	r3, [r7, #4]
900030a6:	019b      	lsls	r3, r3, #6
900030a8:	440b      	add	r3, r1
900030aa:	3318      	adds	r3, #24
900030ac:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
900030ae:	683b      	ldr	r3, [r7, #0]
900030b0:	689a      	ldr	r2, [r3, #8]
900030b2:	491a      	ldr	r1, [pc, #104]	; (9000311c <BSP_TS_GetState+0x224>)
900030b4:	687b      	ldr	r3, [r7, #4]
900030b6:	019b      	lsls	r3, r3, #6
900030b8:	440b      	add	r3, r1
900030ba:	332c      	adds	r3, #44	; 0x2c
900030bc:	601a      	str	r2, [r3, #0]
900030be:	e023      	b.n	90003108 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900030c0:	4a16      	ldr	r2, [pc, #88]	; (9000311c <BSP_TS_GetState+0x224>)
900030c2:	687b      	ldr	r3, [r7, #4]
900030c4:	019b      	lsls	r3, r3, #6
900030c6:	4413      	add	r3, r2
900030c8:	3318      	adds	r3, #24
900030ca:	681a      	ldr	r2, [r3, #0]
900030cc:	683b      	ldr	r3, [r7, #0]
900030ce:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900030d0:	4a12      	ldr	r2, [pc, #72]	; (9000311c <BSP_TS_GetState+0x224>)
900030d2:	687b      	ldr	r3, [r7, #4]
900030d4:	019b      	lsls	r3, r3, #6
900030d6:	4413      	add	r3, r2
900030d8:	332c      	adds	r3, #44	; 0x2c
900030da:	681a      	ldr	r2, [r3, #0]
900030dc:	683b      	ldr	r3, [r7, #0]
900030de:	609a      	str	r2, [r3, #8]
900030e0:	e012      	b.n	90003108 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
900030e2:	683b      	ldr	r3, [r7, #0]
900030e4:	2200      	movs	r2, #0
900030e6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900030e8:	4a0c      	ldr	r2, [pc, #48]	; (9000311c <BSP_TS_GetState+0x224>)
900030ea:	687b      	ldr	r3, [r7, #4]
900030ec:	019b      	lsls	r3, r3, #6
900030ee:	4413      	add	r3, r2
900030f0:	3318      	adds	r3, #24
900030f2:	681a      	ldr	r2, [r3, #0]
900030f4:	683b      	ldr	r3, [r7, #0]
900030f6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900030f8:	4a08      	ldr	r2, [pc, #32]	; (9000311c <BSP_TS_GetState+0x224>)
900030fa:	687b      	ldr	r3, [r7, #4]
900030fc:	019b      	lsls	r3, r3, #6
900030fe:	4413      	add	r3, r2
90003100:	332c      	adds	r3, #44	; 0x2c
90003102:	681a      	ldr	r2, [r3, #0]
90003104:	683b      	ldr	r3, [r7, #0]
90003106:	609a      	str	r2, [r3, #8]
    }
}

return ret;
90003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000310a:	4618      	mov	r0, r3
9000310c:	3728      	adds	r7, #40	; 0x28
9000310e:	46bd      	mov	sp, r7
90003110:	bd80      	pop	{r7, pc}
90003112:	bf00      	nop
90003114:	20001148 	.word	0x20001148
90003118:	2000114c 	.word	0x2000114c
9000311c:	20001150 	.word	0x20001150

90003120 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
90003120:	b580      	push	{r7, lr}
90003122:	b08a      	sub	sp, #40	; 0x28
90003124:	af00      	add	r7, sp, #0
90003126:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
90003128:	2300      	movs	r3, #0
9000312a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
9000312c:	2300      	movs	r3, #0
9000312e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90003130:	2370      	movs	r3, #112	; 0x70
90003132:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
90003134:	4b23      	ldr	r3, [pc, #140]	; (900031c4 <FT5336_Probe+0xa4>)
90003136:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90003138:	4b23      	ldr	r3, [pc, #140]	; (900031c8 <FT5336_Probe+0xa8>)
9000313a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000313c:	4b23      	ldr	r3, [pc, #140]	; (900031cc <FT5336_Probe+0xac>)
9000313e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90003140:	4b23      	ldr	r3, [pc, #140]	; (900031d0 <FT5336_Probe+0xb0>)
90003142:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
90003144:	4b23      	ldr	r3, [pc, #140]	; (900031d4 <FT5336_Probe+0xb4>)
90003146:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90003148:	f107 030c 	add.w	r3, r7, #12
9000314c:	4619      	mov	r1, r3
9000314e:	4822      	ldr	r0, [pc, #136]	; (900031d8 <FT5336_Probe+0xb8>)
90003150:	f7fd fcac 	bl	90000aac <FT5336_RegisterBusIO>
90003154:	4603      	mov	r3, r0
90003156:	2b00      	cmp	r3, #0
90003158:	d003      	beq.n	90003162 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
9000315a:	f06f 0307 	mvn.w	r3, #7
9000315e:	627b      	str	r3, [r7, #36]	; 0x24
90003160:	e02a      	b.n	900031b8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90003162:	f107 0308 	add.w	r3, r7, #8
90003166:	4619      	mov	r1, r3
90003168:	481b      	ldr	r0, [pc, #108]	; (900031d8 <FT5336_Probe+0xb8>)
9000316a:	f7fd fd99 	bl	90000ca0 <FT5336_ReadID>
9000316e:	4603      	mov	r3, r0
90003170:	2b00      	cmp	r3, #0
90003172:	d003      	beq.n	9000317c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
90003174:	f06f 0304 	mvn.w	r3, #4
90003178:	627b      	str	r3, [r7, #36]	; 0x24
9000317a:	e01d      	b.n	900031b8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
9000317c:	68bb      	ldr	r3, [r7, #8]
9000317e:	2b51      	cmp	r3, #81	; 0x51
90003180:	d003      	beq.n	9000318a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
90003182:	f06f 0306 	mvn.w	r3, #6
90003186:	627b      	str	r3, [r7, #36]	; 0x24
90003188:	e016      	b.n	900031b8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
9000318a:	4a14      	ldr	r2, [pc, #80]	; (900031dc <FT5336_Probe+0xbc>)
9000318c:	687b      	ldr	r3, [r7, #4]
9000318e:	4912      	ldr	r1, [pc, #72]	; (900031d8 <FT5336_Probe+0xb8>)
90003190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90003194:	4b12      	ldr	r3, [pc, #72]	; (900031e0 <FT5336_Probe+0xc0>)
90003196:	4a13      	ldr	r2, [pc, #76]	; (900031e4 <FT5336_Probe+0xc4>)
90003198:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000319a:	4b11      	ldr	r3, [pc, #68]	; (900031e0 <FT5336_Probe+0xc0>)
9000319c:	681b      	ldr	r3, [r3, #0]
9000319e:	681b      	ldr	r3, [r3, #0]
900031a0:	490e      	ldr	r1, [pc, #56]	; (900031dc <FT5336_Probe+0xbc>)
900031a2:	687a      	ldr	r2, [r7, #4]
900031a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900031a8:	4610      	mov	r0, r2
900031aa:	4798      	blx	r3
900031ac:	4603      	mov	r3, r0
900031ae:	2b00      	cmp	r3, #0
900031b0:	d002      	beq.n	900031b8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
900031b2:	f06f 0304 	mvn.w	r3, #4
900031b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
900031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
900031ba:	4618      	mov	r0, r3
900031bc:	3728      	adds	r7, #40	; 0x28
900031be:	46bd      	mov	sp, r7
900031c0:	bd80      	pop	{r7, pc}
900031c2:	bf00      	nop
900031c4:	90001441 	.word	0x90001441
900031c8:	900014b5 	.word	0x900014b5
900031cc:	900015dd 	.word	0x900015dd
900031d0:	90001581 	.word	0x90001581
900031d4:	90001639 	.word	0x90001639
900031d8:	20001190 	.word	0x20001190
900031dc:	2000114c 	.word	0x2000114c
900031e0:	20001148 	.word	0x20001148
900031e4:	20000000 	.word	0x20000000

900031e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
900031e8:	b480      	push	{r7}
900031ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900031ec:	4b29      	ldr	r3, [pc, #164]	; (90003294 <SystemInit+0xac>)
900031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900031f2:	4a28      	ldr	r2, [pc, #160]	; (90003294 <SystemInit+0xac>)
900031f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
900031f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
900031fc:	4b26      	ldr	r3, [pc, #152]	; (90003298 <SystemInit+0xb0>)
900031fe:	681b      	ldr	r3, [r3, #0]
90003200:	4a25      	ldr	r2, [pc, #148]	; (90003298 <SystemInit+0xb0>)
90003202:	f043 0301 	orr.w	r3, r3, #1
90003206:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90003208:	4b23      	ldr	r3, [pc, #140]	; (90003298 <SystemInit+0xb0>)
9000320a:	2200      	movs	r2, #0
9000320c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
9000320e:	4b22      	ldr	r3, [pc, #136]	; (90003298 <SystemInit+0xb0>)
90003210:	681a      	ldr	r2, [r3, #0]
90003212:	4921      	ldr	r1, [pc, #132]	; (90003298 <SystemInit+0xb0>)
90003214:	4b21      	ldr	r3, [pc, #132]	; (9000329c <SystemInit+0xb4>)
90003216:	4013      	ands	r3, r2
90003218:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
9000321a:	4b1f      	ldr	r3, [pc, #124]	; (90003298 <SystemInit+0xb0>)
9000321c:	2200      	movs	r2, #0
9000321e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90003220:	4b1d      	ldr	r3, [pc, #116]	; (90003298 <SystemInit+0xb0>)
90003222:	2200      	movs	r2, #0
90003224:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90003226:	4b1c      	ldr	r3, [pc, #112]	; (90003298 <SystemInit+0xb0>)
90003228:	2200      	movs	r2, #0
9000322a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
9000322c:	4b1a      	ldr	r3, [pc, #104]	; (90003298 <SystemInit+0xb0>)
9000322e:	2200      	movs	r2, #0
90003230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
90003232:	4b19      	ldr	r3, [pc, #100]	; (90003298 <SystemInit+0xb0>)
90003234:	2200      	movs	r2, #0
90003236:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
90003238:	4b17      	ldr	r3, [pc, #92]	; (90003298 <SystemInit+0xb0>)
9000323a:	2200      	movs	r2, #0
9000323c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000323e:	4b16      	ldr	r3, [pc, #88]	; (90003298 <SystemInit+0xb0>)
90003240:	2200      	movs	r2, #0
90003242:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
90003244:	4b14      	ldr	r3, [pc, #80]	; (90003298 <SystemInit+0xb0>)
90003246:	2200      	movs	r2, #0
90003248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
9000324a:	4b13      	ldr	r3, [pc, #76]	; (90003298 <SystemInit+0xb0>)
9000324c:	2200      	movs	r2, #0
9000324e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
90003250:	4b11      	ldr	r3, [pc, #68]	; (90003298 <SystemInit+0xb0>)
90003252:	2200      	movs	r2, #0
90003254:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90003256:	4b10      	ldr	r3, [pc, #64]	; (90003298 <SystemInit+0xb0>)
90003258:	2200      	movs	r2, #0
9000325a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
9000325c:	4b0e      	ldr	r3, [pc, #56]	; (90003298 <SystemInit+0xb0>)
9000325e:	681b      	ldr	r3, [r3, #0]
90003260:	4a0d      	ldr	r2, [pc, #52]	; (90003298 <SystemInit+0xb0>)
90003262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90003266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90003268:	4b0b      	ldr	r3, [pc, #44]	; (90003298 <SystemInit+0xb0>)
9000326a:	2200      	movs	r2, #0
9000326c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
9000326e:	4b0c      	ldr	r3, [pc, #48]	; (900032a0 <SystemInit+0xb8>)
90003270:	681a      	ldr	r2, [r3, #0]
90003272:	4b0c      	ldr	r3, [pc, #48]	; (900032a4 <SystemInit+0xbc>)
90003274:	4013      	ands	r3, r2
90003276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000327a:	d202      	bcs.n	90003282 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
9000327c:	4b0a      	ldr	r3, [pc, #40]	; (900032a8 <SystemInit+0xc0>)
9000327e:	2201      	movs	r2, #1
90003280:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90003282:	4b04      	ldr	r3, [pc, #16]	; (90003294 <SystemInit+0xac>)
90003284:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90003288:	609a      	str	r2, [r3, #8]
#endif  


}
9000328a:	bf00      	nop
9000328c:	46bd      	mov	sp, r7
9000328e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003292:	4770      	bx	lr
90003294:	e000ed00 	.word	0xe000ed00
90003298:	58024400 	.word	0x58024400
9000329c:	eaf6ed7f 	.word	0xeaf6ed7f
900032a0:	5c001000 	.word	0x5c001000
900032a4:	ffff0000 	.word	0xffff0000
900032a8:	51008108 	.word	0x51008108

900032ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900032ac:	b580      	push	{r7, lr}
900032ae:	b082      	sub	sp, #8
900032b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900032b2:	2003      	movs	r0, #3
900032b4:	f000 f980 	bl	900035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900032b8:	f004 fabc 	bl	90007834 <HAL_RCC_GetSysClockFreq>
900032bc:	4602      	mov	r2, r0
900032be:	4b15      	ldr	r3, [pc, #84]	; (90003314 <HAL_Init+0x68>)
900032c0:	699b      	ldr	r3, [r3, #24]
900032c2:	0a1b      	lsrs	r3, r3, #8
900032c4:	f003 030f 	and.w	r3, r3, #15
900032c8:	4913      	ldr	r1, [pc, #76]	; (90003318 <HAL_Init+0x6c>)
900032ca:	5ccb      	ldrb	r3, [r1, r3]
900032cc:	f003 031f 	and.w	r3, r3, #31
900032d0:	fa22 f303 	lsr.w	r3, r2, r3
900032d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900032d6:	4b0f      	ldr	r3, [pc, #60]	; (90003314 <HAL_Init+0x68>)
900032d8:	699b      	ldr	r3, [r3, #24]
900032da:	f003 030f 	and.w	r3, r3, #15
900032de:	4a0e      	ldr	r2, [pc, #56]	; (90003318 <HAL_Init+0x6c>)
900032e0:	5cd3      	ldrb	r3, [r2, r3]
900032e2:	f003 031f 	and.w	r3, r3, #31
900032e6:	687a      	ldr	r2, [r7, #4]
900032e8:	fa22 f303 	lsr.w	r3, r2, r3
900032ec:	4a0b      	ldr	r2, [pc, #44]	; (9000331c <HAL_Init+0x70>)
900032ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900032f0:	4a0b      	ldr	r2, [pc, #44]	; (90003320 <HAL_Init+0x74>)
900032f2:	687b      	ldr	r3, [r7, #4]
900032f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
900032f6:	200f      	movs	r0, #15
900032f8:	f000 f81c 	bl	90003334 <HAL_InitTick>
900032fc:	4603      	mov	r3, r0
900032fe:	2b00      	cmp	r3, #0
90003300:	d001      	beq.n	90003306 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90003302:	2301      	movs	r3, #1
90003304:	e002      	b.n	9000330c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90003306:	f000 f80d 	bl	90003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000330a:	2300      	movs	r3, #0
}
9000330c:	4618      	mov	r0, r3
9000330e:	3708      	adds	r7, #8
90003310:	46bd      	mov	sp, r7
90003312:	bd80      	pop	{r7, pc}
90003314:	58024400 	.word	0x58024400
90003318:	9000d004 	.word	0x9000d004
9000331c:	2000003c 	.word	0x2000003c
90003320:	20000038 	.word	0x20000038

90003324 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
90003324:	b480      	push	{r7}
90003326:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
90003328:	bf00      	nop
9000332a:	46bd      	mov	sp, r7
9000332c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003330:	4770      	bx	lr
	...

90003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90003334:	b580      	push	{r7, lr}
90003336:	b082      	sub	sp, #8
90003338:	af00      	add	r7, sp, #0
9000333a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
9000333c:	4b15      	ldr	r3, [pc, #84]	; (90003394 <HAL_InitTick+0x60>)
9000333e:	781b      	ldrb	r3, [r3, #0]
90003340:	2b00      	cmp	r3, #0
90003342:	d101      	bne.n	90003348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90003344:	2301      	movs	r3, #1
90003346:	e021      	b.n	9000338c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90003348:	4b13      	ldr	r3, [pc, #76]	; (90003398 <HAL_InitTick+0x64>)
9000334a:	681a      	ldr	r2, [r3, #0]
9000334c:	4b11      	ldr	r3, [pc, #68]	; (90003394 <HAL_InitTick+0x60>)
9000334e:	781b      	ldrb	r3, [r3, #0]
90003350:	4619      	mov	r1, r3
90003352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90003356:	fbb3 f3f1 	udiv	r3, r3, r1
9000335a:	fbb2 f3f3 	udiv	r3, r2, r3
9000335e:	4618      	mov	r0, r3
90003360:	f000 f95d 	bl	9000361e <HAL_SYSTICK_Config>
90003364:	4603      	mov	r3, r0
90003366:	2b00      	cmp	r3, #0
90003368:	d001      	beq.n	9000336e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
9000336a:	2301      	movs	r3, #1
9000336c:	e00e      	b.n	9000338c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000336e:	687b      	ldr	r3, [r7, #4]
90003370:	2b0f      	cmp	r3, #15
90003372:	d80a      	bhi.n	9000338a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90003374:	2200      	movs	r2, #0
90003376:	6879      	ldr	r1, [r7, #4]
90003378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000337c:	f000 f927 	bl	900035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90003380:	4a06      	ldr	r2, [pc, #24]	; (9000339c <HAL_InitTick+0x68>)
90003382:	687b      	ldr	r3, [r7, #4]
90003384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90003386:	2300      	movs	r3, #0
90003388:	e000      	b.n	9000338c <HAL_InitTick+0x58>
    return HAL_ERROR;
9000338a:	2301      	movs	r3, #1
}
9000338c:	4618      	mov	r0, r3
9000338e:	3708      	adds	r7, #8
90003390:	46bd      	mov	sp, r7
90003392:	bd80      	pop	{r7, pc}
90003394:	20000044 	.word	0x20000044
90003398:	20000038 	.word	0x20000038
9000339c:	20000040 	.word	0x20000040

900033a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
900033a0:	b480      	push	{r7}
900033a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
900033a4:	4b06      	ldr	r3, [pc, #24]	; (900033c0 <HAL_IncTick+0x20>)
900033a6:	781b      	ldrb	r3, [r3, #0]
900033a8:	461a      	mov	r2, r3
900033aa:	4b06      	ldr	r3, [pc, #24]	; (900033c4 <HAL_IncTick+0x24>)
900033ac:	681b      	ldr	r3, [r3, #0]
900033ae:	4413      	add	r3, r2
900033b0:	4a04      	ldr	r2, [pc, #16]	; (900033c4 <HAL_IncTick+0x24>)
900033b2:	6013      	str	r3, [r2, #0]
}
900033b4:	bf00      	nop
900033b6:	46bd      	mov	sp, r7
900033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900033bc:	4770      	bx	lr
900033be:	bf00      	nop
900033c0:	20000044 	.word	0x20000044
900033c4:	200011b8 	.word	0x200011b8

900033c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900033c8:	b480      	push	{r7}
900033ca:	af00      	add	r7, sp, #0
  return uwTick;
900033cc:	4b03      	ldr	r3, [pc, #12]	; (900033dc <HAL_GetTick+0x14>)
900033ce:	681b      	ldr	r3, [r3, #0]
}
900033d0:	4618      	mov	r0, r3
900033d2:	46bd      	mov	sp, r7
900033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900033d8:	4770      	bx	lr
900033da:	bf00      	nop
900033dc:	200011b8 	.word	0x200011b8

900033e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900033e0:	b480      	push	{r7}
900033e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900033e4:	4b03      	ldr	r3, [pc, #12]	; (900033f4 <HAL_GetREVID+0x14>)
900033e6:	681b      	ldr	r3, [r3, #0]
900033e8:	0c1b      	lsrs	r3, r3, #16
}
900033ea:	4618      	mov	r0, r3
900033ec:	46bd      	mov	sp, r7
900033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900033f2:	4770      	bx	lr
900033f4:	5c001000 	.word	0x5c001000

900033f8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
900033f8:	b480      	push	{r7}
900033fa:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
900033fc:	4b05      	ldr	r3, [pc, #20]	; (90003414 <HAL_EnableCompensationCell+0x1c>)
900033fe:	6a1b      	ldr	r3, [r3, #32]
90003400:	4a04      	ldr	r2, [pc, #16]	; (90003414 <HAL_EnableCompensationCell+0x1c>)
90003402:	f043 0301 	orr.w	r3, r3, #1
90003406:	6213      	str	r3, [r2, #32]
}
90003408:	bf00      	nop
9000340a:	46bd      	mov	sp, r7
9000340c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003410:	4770      	bx	lr
90003412:	bf00      	nop
90003414:	58000400 	.word	0x58000400

90003418 <__NVIC_SetPriorityGrouping>:
{
90003418:	b480      	push	{r7}
9000341a:	b085      	sub	sp, #20
9000341c:	af00      	add	r7, sp, #0
9000341e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90003420:	687b      	ldr	r3, [r7, #4]
90003422:	f003 0307 	and.w	r3, r3, #7
90003426:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90003428:	4b0b      	ldr	r3, [pc, #44]	; (90003458 <__NVIC_SetPriorityGrouping+0x40>)
9000342a:	68db      	ldr	r3, [r3, #12]
9000342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000342e:	68ba      	ldr	r2, [r7, #8]
90003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90003434:	4013      	ands	r3, r2
90003436:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90003438:	68fb      	ldr	r3, [r7, #12]
9000343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000343c:	68bb      	ldr	r3, [r7, #8]
9000343e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90003440:	4b06      	ldr	r3, [pc, #24]	; (9000345c <__NVIC_SetPriorityGrouping+0x44>)
90003442:	4313      	orrs	r3, r2
90003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90003446:	4a04      	ldr	r2, [pc, #16]	; (90003458 <__NVIC_SetPriorityGrouping+0x40>)
90003448:	68bb      	ldr	r3, [r7, #8]
9000344a:	60d3      	str	r3, [r2, #12]
}
9000344c:	bf00      	nop
9000344e:	3714      	adds	r7, #20
90003450:	46bd      	mov	sp, r7
90003452:	f85d 7b04 	ldr.w	r7, [sp], #4
90003456:	4770      	bx	lr
90003458:	e000ed00 	.word	0xe000ed00
9000345c:	05fa0000 	.word	0x05fa0000

90003460 <__NVIC_GetPriorityGrouping>:
{
90003460:	b480      	push	{r7}
90003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90003464:	4b04      	ldr	r3, [pc, #16]	; (90003478 <__NVIC_GetPriorityGrouping+0x18>)
90003466:	68db      	ldr	r3, [r3, #12]
90003468:	0a1b      	lsrs	r3, r3, #8
9000346a:	f003 0307 	and.w	r3, r3, #7
}
9000346e:	4618      	mov	r0, r3
90003470:	46bd      	mov	sp, r7
90003472:	f85d 7b04 	ldr.w	r7, [sp], #4
90003476:	4770      	bx	lr
90003478:	e000ed00 	.word	0xe000ed00

9000347c <__NVIC_EnableIRQ>:
{
9000347c:	b480      	push	{r7}
9000347e:	b083      	sub	sp, #12
90003480:	af00      	add	r7, sp, #0
90003482:	4603      	mov	r3, r0
90003484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000348a:	2b00      	cmp	r3, #0
9000348c:	db0b      	blt.n	900034a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000348e:	88fb      	ldrh	r3, [r7, #6]
90003490:	f003 021f 	and.w	r2, r3, #31
90003494:	4907      	ldr	r1, [pc, #28]	; (900034b4 <__NVIC_EnableIRQ+0x38>)
90003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000349a:	095b      	lsrs	r3, r3, #5
9000349c:	2001      	movs	r0, #1
9000349e:	fa00 f202 	lsl.w	r2, r0, r2
900034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
900034a6:	bf00      	nop
900034a8:	370c      	adds	r7, #12
900034aa:	46bd      	mov	sp, r7
900034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900034b0:	4770      	bx	lr
900034b2:	bf00      	nop
900034b4:	e000e100 	.word	0xe000e100

900034b8 <__NVIC_SetPriority>:
{
900034b8:	b480      	push	{r7}
900034ba:	b083      	sub	sp, #12
900034bc:	af00      	add	r7, sp, #0
900034be:	4603      	mov	r3, r0
900034c0:	6039      	str	r1, [r7, #0]
900034c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900034c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034c8:	2b00      	cmp	r3, #0
900034ca:	db0a      	blt.n	900034e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034cc:	683b      	ldr	r3, [r7, #0]
900034ce:	b2da      	uxtb	r2, r3
900034d0:	490c      	ldr	r1, [pc, #48]	; (90003504 <__NVIC_SetPriority+0x4c>)
900034d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900034d6:	0112      	lsls	r2, r2, #4
900034d8:	b2d2      	uxtb	r2, r2
900034da:	440b      	add	r3, r1
900034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
900034e0:	e00a      	b.n	900034f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900034e2:	683b      	ldr	r3, [r7, #0]
900034e4:	b2da      	uxtb	r2, r3
900034e6:	4908      	ldr	r1, [pc, #32]	; (90003508 <__NVIC_SetPriority+0x50>)
900034e8:	88fb      	ldrh	r3, [r7, #6]
900034ea:	f003 030f 	and.w	r3, r3, #15
900034ee:	3b04      	subs	r3, #4
900034f0:	0112      	lsls	r2, r2, #4
900034f2:	b2d2      	uxtb	r2, r2
900034f4:	440b      	add	r3, r1
900034f6:	761a      	strb	r2, [r3, #24]
}
900034f8:	bf00      	nop
900034fa:	370c      	adds	r7, #12
900034fc:	46bd      	mov	sp, r7
900034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90003502:	4770      	bx	lr
90003504:	e000e100 	.word	0xe000e100
90003508:	e000ed00 	.word	0xe000ed00

9000350c <NVIC_EncodePriority>:
{
9000350c:	b480      	push	{r7}
9000350e:	b089      	sub	sp, #36	; 0x24
90003510:	af00      	add	r7, sp, #0
90003512:	60f8      	str	r0, [r7, #12]
90003514:	60b9      	str	r1, [r7, #8]
90003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90003518:	68fb      	ldr	r3, [r7, #12]
9000351a:	f003 0307 	and.w	r3, r3, #7
9000351e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90003520:	69fb      	ldr	r3, [r7, #28]
90003522:	f1c3 0307 	rsb	r3, r3, #7
90003526:	2b04      	cmp	r3, #4
90003528:	bf28      	it	cs
9000352a:	2304      	movcs	r3, #4
9000352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000352e:	69fb      	ldr	r3, [r7, #28]
90003530:	3304      	adds	r3, #4
90003532:	2b06      	cmp	r3, #6
90003534:	d902      	bls.n	9000353c <NVIC_EncodePriority+0x30>
90003536:	69fb      	ldr	r3, [r7, #28]
90003538:	3b03      	subs	r3, #3
9000353a:	e000      	b.n	9000353e <NVIC_EncodePriority+0x32>
9000353c:	2300      	movs	r3, #0
9000353e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90003544:	69bb      	ldr	r3, [r7, #24]
90003546:	fa02 f303 	lsl.w	r3, r2, r3
9000354a:	43da      	mvns	r2, r3
9000354c:	68bb      	ldr	r3, [r7, #8]
9000354e:	401a      	ands	r2, r3
90003550:	697b      	ldr	r3, [r7, #20]
90003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90003554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90003558:	697b      	ldr	r3, [r7, #20]
9000355a:	fa01 f303 	lsl.w	r3, r1, r3
9000355e:	43d9      	mvns	r1, r3
90003560:	687b      	ldr	r3, [r7, #4]
90003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90003564:	4313      	orrs	r3, r2
}
90003566:	4618      	mov	r0, r3
90003568:	3724      	adds	r7, #36	; 0x24
9000356a:	46bd      	mov	sp, r7
9000356c:	f85d 7b04 	ldr.w	r7, [sp], #4
90003570:	4770      	bx	lr
	...

90003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90003574:	b580      	push	{r7, lr}
90003576:	b082      	sub	sp, #8
90003578:	af00      	add	r7, sp, #0
9000357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
9000357c:	687b      	ldr	r3, [r7, #4]
9000357e:	3b01      	subs	r3, #1
90003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90003584:	d301      	bcc.n	9000358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90003586:	2301      	movs	r3, #1
90003588:	e00f      	b.n	900035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
9000358a:	4a0a      	ldr	r2, [pc, #40]	; (900035b4 <SysTick_Config+0x40>)
9000358c:	687b      	ldr	r3, [r7, #4]
9000358e:	3b01      	subs	r3, #1
90003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90003592:	210f      	movs	r1, #15
90003594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90003598:	f7ff ff8e 	bl	900034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
9000359c:	4b05      	ldr	r3, [pc, #20]	; (900035b4 <SysTick_Config+0x40>)
9000359e:	2200      	movs	r2, #0
900035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
900035a2:	4b04      	ldr	r3, [pc, #16]	; (900035b4 <SysTick_Config+0x40>)
900035a4:	2207      	movs	r2, #7
900035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
900035a8:	2300      	movs	r3, #0
}
900035aa:	4618      	mov	r0, r3
900035ac:	3708      	adds	r7, #8
900035ae:	46bd      	mov	sp, r7
900035b0:	bd80      	pop	{r7, pc}
900035b2:	bf00      	nop
900035b4:	e000e010 	.word	0xe000e010

900035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900035b8:	b580      	push	{r7, lr}
900035ba:	b082      	sub	sp, #8
900035bc:	af00      	add	r7, sp, #0
900035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
900035c0:	6878      	ldr	r0, [r7, #4]
900035c2:	f7ff ff29 	bl	90003418 <__NVIC_SetPriorityGrouping>
}
900035c6:	bf00      	nop
900035c8:	3708      	adds	r7, #8
900035ca:	46bd      	mov	sp, r7
900035cc:	bd80      	pop	{r7, pc}

900035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900035ce:	b580      	push	{r7, lr}
900035d0:	b086      	sub	sp, #24
900035d2:	af00      	add	r7, sp, #0
900035d4:	4603      	mov	r3, r0
900035d6:	60b9      	str	r1, [r7, #8]
900035d8:	607a      	str	r2, [r7, #4]
900035da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
900035dc:	f7ff ff40 	bl	90003460 <__NVIC_GetPriorityGrouping>
900035e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
900035e2:	687a      	ldr	r2, [r7, #4]
900035e4:	68b9      	ldr	r1, [r7, #8]
900035e6:	6978      	ldr	r0, [r7, #20]
900035e8:	f7ff ff90 	bl	9000350c <NVIC_EncodePriority>
900035ec:	4602      	mov	r2, r0
900035ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
900035f2:	4611      	mov	r1, r2
900035f4:	4618      	mov	r0, r3
900035f6:	f7ff ff5f 	bl	900034b8 <__NVIC_SetPriority>
}
900035fa:	bf00      	nop
900035fc:	3718      	adds	r7, #24
900035fe:	46bd      	mov	sp, r7
90003600:	bd80      	pop	{r7, pc}

90003602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90003602:	b580      	push	{r7, lr}
90003604:	b082      	sub	sp, #8
90003606:	af00      	add	r7, sp, #0
90003608:	4603      	mov	r3, r0
9000360a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000360c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90003610:	4618      	mov	r0, r3
90003612:	f7ff ff33 	bl	9000347c <__NVIC_EnableIRQ>
}
90003616:	bf00      	nop
90003618:	3708      	adds	r7, #8
9000361a:	46bd      	mov	sp, r7
9000361c:	bd80      	pop	{r7, pc}

9000361e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
9000361e:	b580      	push	{r7, lr}
90003620:	b082      	sub	sp, #8
90003622:	af00      	add	r7, sp, #0
90003624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
90003626:	6878      	ldr	r0, [r7, #4]
90003628:	f7ff ffa4 	bl	90003574 <SysTick_Config>
9000362c:	4603      	mov	r3, r0
}
9000362e:	4618      	mov	r0, r3
90003630:	3708      	adds	r7, #8
90003632:	46bd      	mov	sp, r7
90003634:	bd80      	pop	{r7, pc}
	...

90003638 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90003638:	b480      	push	{r7}
9000363a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
9000363c:	f3bf 8f5f 	dmb	sy
}
90003640:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90003642:	4b07      	ldr	r3, [pc, #28]	; (90003660 <HAL_MPU_Disable+0x28>)
90003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90003646:	4a06      	ldr	r2, [pc, #24]	; (90003660 <HAL_MPU_Disable+0x28>)
90003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000364c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
9000364e:	4b05      	ldr	r3, [pc, #20]	; (90003664 <HAL_MPU_Disable+0x2c>)
90003650:	2200      	movs	r2, #0
90003652:	605a      	str	r2, [r3, #4]
}
90003654:	bf00      	nop
90003656:	46bd      	mov	sp, r7
90003658:	f85d 7b04 	ldr.w	r7, [sp], #4
9000365c:	4770      	bx	lr
9000365e:	bf00      	nop
90003660:	e000ed00 	.word	0xe000ed00
90003664:	e000ed90 	.word	0xe000ed90

90003668 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
90003668:	b480      	push	{r7}
9000366a:	b083      	sub	sp, #12
9000366c:	af00      	add	r7, sp, #0
9000366e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90003670:	4a0b      	ldr	r2, [pc, #44]	; (900036a0 <HAL_MPU_Enable+0x38>)
90003672:	687b      	ldr	r3, [r7, #4]
90003674:	f043 0301 	orr.w	r3, r3, #1
90003678:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
9000367a:	4b0a      	ldr	r3, [pc, #40]	; (900036a4 <HAL_MPU_Enable+0x3c>)
9000367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000367e:	4a09      	ldr	r2, [pc, #36]	; (900036a4 <HAL_MPU_Enable+0x3c>)
90003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003684:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90003686:	f3bf 8f4f 	dsb	sy
}
9000368a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000368c:	f3bf 8f6f 	isb	sy
}
90003690:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90003692:	bf00      	nop
90003694:	370c      	adds	r7, #12
90003696:	46bd      	mov	sp, r7
90003698:	f85d 7b04 	ldr.w	r7, [sp], #4
9000369c:	4770      	bx	lr
9000369e:	bf00      	nop
900036a0:	e000ed90 	.word	0xe000ed90
900036a4:	e000ed00 	.word	0xe000ed00

900036a8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
900036a8:	b480      	push	{r7}
900036aa:	b083      	sub	sp, #12
900036ac:	af00      	add	r7, sp, #0
900036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
900036b0:	687b      	ldr	r3, [r7, #4]
900036b2:	785a      	ldrb	r2, [r3, #1]
900036b4:	4b1d      	ldr	r3, [pc, #116]	; (9000372c <HAL_MPU_ConfigRegion+0x84>)
900036b6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
900036b8:	687b      	ldr	r3, [r7, #4]
900036ba:	781b      	ldrb	r3, [r3, #0]
900036bc:	2b00      	cmp	r3, #0
900036be:	d029      	beq.n	90003714 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
900036c0:	4a1a      	ldr	r2, [pc, #104]	; (9000372c <HAL_MPU_ConfigRegion+0x84>)
900036c2:	687b      	ldr	r3, [r7, #4]
900036c4:	685b      	ldr	r3, [r3, #4]
900036c6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	7b1b      	ldrb	r3, [r3, #12]
900036cc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036ce:	687b      	ldr	r3, [r7, #4]
900036d0:	7adb      	ldrb	r3, [r3, #11]
900036d2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900036d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036d6:	687b      	ldr	r3, [r7, #4]
900036d8:	7a9b      	ldrb	r3, [r3, #10]
900036da:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900036dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900036de:	687b      	ldr	r3, [r7, #4]
900036e0:	7b5b      	ldrb	r3, [r3, #13]
900036e2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900036e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900036e6:	687b      	ldr	r3, [r7, #4]
900036e8:	7b9b      	ldrb	r3, [r3, #14]
900036ea:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900036ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900036ee:	687b      	ldr	r3, [r7, #4]
900036f0:	7bdb      	ldrb	r3, [r3, #15]
900036f2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900036f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900036f6:	687b      	ldr	r3, [r7, #4]
900036f8:	7a5b      	ldrb	r3, [r3, #9]
900036fa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900036fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900036fe:	687b      	ldr	r3, [r7, #4]
90003700:	7a1b      	ldrb	r3, [r3, #8]
90003702:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90003704:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90003706:	687a      	ldr	r2, [r7, #4]
90003708:	7812      	ldrb	r2, [r2, #0]
9000370a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000370c:	4a07      	ldr	r2, [pc, #28]	; (9000372c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000370e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90003710:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90003712:	e005      	b.n	90003720 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90003714:	4b05      	ldr	r3, [pc, #20]	; (9000372c <HAL_MPU_ConfigRegion+0x84>)
90003716:	2200      	movs	r2, #0
90003718:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
9000371a:	4b04      	ldr	r3, [pc, #16]	; (9000372c <HAL_MPU_ConfigRegion+0x84>)
9000371c:	2200      	movs	r2, #0
9000371e:	611a      	str	r2, [r3, #16]
}
90003720:	bf00      	nop
90003722:	370c      	adds	r7, #12
90003724:	46bd      	mov	sp, r7
90003726:	f85d 7b04 	ldr.w	r7, [sp], #4
9000372a:	4770      	bx	lr
9000372c:	e000ed90 	.word	0xe000ed90

90003730 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
90003730:	b580      	push	{r7, lr}
90003732:	b082      	sub	sp, #8
90003734:	af00      	add	r7, sp, #0
90003736:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90003738:	687b      	ldr	r3, [r7, #4]
9000373a:	2b00      	cmp	r3, #0
9000373c:	d101      	bne.n	90003742 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
9000373e:	2301      	movs	r3, #1
90003740:	e04f      	b.n	900037e2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90003742:	687b      	ldr	r3, [r7, #4]
90003744:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
90003748:	b2db      	uxtb	r3, r3
9000374a:	2b00      	cmp	r3, #0
9000374c:	d106      	bne.n	9000375c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
9000374e:	687b      	ldr	r3, [r7, #4]
90003750:	2200      	movs	r2, #0
90003752:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
90003756:	6878      	ldr	r0, [r7, #4]
90003758:	f000 f84e 	bl	900037f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000375c:	687b      	ldr	r3, [r7, #4]
9000375e:	2202      	movs	r2, #2
90003760:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90003764:	687b      	ldr	r3, [r7, #4]
90003766:	681b      	ldr	r3, [r3, #0]
90003768:	681a      	ldr	r2, [r3, #0]
9000376a:	4b20      	ldr	r3, [pc, #128]	; (900037ec <HAL_DMA2D_Init+0xbc>)
9000376c:	4013      	ands	r3, r2
9000376e:	687a      	ldr	r2, [r7, #4]
90003770:	6851      	ldr	r1, [r2, #4]
90003772:	687a      	ldr	r2, [r7, #4]
90003774:	69d2      	ldr	r2, [r2, #28]
90003776:	4311      	orrs	r1, r2
90003778:	687a      	ldr	r2, [r7, #4]
9000377a:	6812      	ldr	r2, [r2, #0]
9000377c:	430b      	orrs	r3, r1
9000377e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90003780:	687b      	ldr	r3, [r7, #4]
90003782:	681b      	ldr	r3, [r3, #0]
90003784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90003786:	4b1a      	ldr	r3, [pc, #104]	; (900037f0 <HAL_DMA2D_Init+0xc0>)
90003788:	4013      	ands	r3, r2
9000378a:	687a      	ldr	r2, [r7, #4]
9000378c:	6891      	ldr	r1, [r2, #8]
9000378e:	687a      	ldr	r2, [r7, #4]
90003790:	6992      	ldr	r2, [r2, #24]
90003792:	4311      	orrs	r1, r2
90003794:	687a      	ldr	r2, [r7, #4]
90003796:	6812      	ldr	r2, [r2, #0]
90003798:	430b      	orrs	r3, r1
9000379a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000379c:	687b      	ldr	r3, [r7, #4]
9000379e:	681b      	ldr	r3, [r3, #0]
900037a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900037a2:	4b14      	ldr	r3, [pc, #80]	; (900037f4 <HAL_DMA2D_Init+0xc4>)
900037a4:	4013      	ands	r3, r2
900037a6:	687a      	ldr	r2, [r7, #4]
900037a8:	68d1      	ldr	r1, [r2, #12]
900037aa:	687a      	ldr	r2, [r7, #4]
900037ac:	6812      	ldr	r2, [r2, #0]
900037ae:	430b      	orrs	r3, r1
900037b0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
900037b2:	687b      	ldr	r3, [r7, #4]
900037b4:	681b      	ldr	r3, [r3, #0]
900037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900037b8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
900037bc:	687b      	ldr	r3, [r7, #4]
900037be:	691b      	ldr	r3, [r3, #16]
900037c0:	051a      	lsls	r2, r3, #20
900037c2:	687b      	ldr	r3, [r7, #4]
900037c4:	695b      	ldr	r3, [r3, #20]
900037c6:	055b      	lsls	r3, r3, #21
900037c8:	431a      	orrs	r2, r3
900037ca:	687b      	ldr	r3, [r7, #4]
900037cc:	681b      	ldr	r3, [r3, #0]
900037ce:	430a      	orrs	r2, r1
900037d0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
900037d2:	687b      	ldr	r3, [r7, #4]
900037d4:	2200      	movs	r2, #0
900037d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
900037d8:	687b      	ldr	r3, [r7, #4]
900037da:	2201      	movs	r2, #1
900037dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
900037e0:	2300      	movs	r3, #0
}
900037e2:	4618      	mov	r0, r3
900037e4:	3708      	adds	r7, #8
900037e6:	46bd      	mov	sp, r7
900037e8:	bd80      	pop	{r7, pc}
900037ea:	bf00      	nop
900037ec:	fff8ffbf 	.word	0xfff8ffbf
900037f0:	fffffef8 	.word	0xfffffef8
900037f4:	ffff0000 	.word	0xffff0000

900037f8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
900037f8:	b480      	push	{r7}
900037fa:	b083      	sub	sp, #12
900037fc:	af00      	add	r7, sp, #0
900037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
90003800:	bf00      	nop
90003802:	370c      	adds	r7, #12
90003804:	46bd      	mov	sp, r7
90003806:	f85d 7b04 	ldr.w	r7, [sp], #4
9000380a:	4770      	bx	lr

9000380c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
9000380c:	b580      	push	{r7, lr}
9000380e:	b086      	sub	sp, #24
90003810:	af02      	add	r7, sp, #8
90003812:	60f8      	str	r0, [r7, #12]
90003814:	60b9      	str	r1, [r7, #8]
90003816:	607a      	str	r2, [r7, #4]
90003818:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000381a:	68fb      	ldr	r3, [r7, #12]
9000381c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90003820:	2b01      	cmp	r3, #1
90003822:	d101      	bne.n	90003828 <HAL_DMA2D_Start+0x1c>
90003824:	2302      	movs	r3, #2
90003826:	e018      	b.n	9000385a <HAL_DMA2D_Start+0x4e>
90003828:	68fb      	ldr	r3, [r7, #12]
9000382a:	2201      	movs	r2, #1
9000382c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003830:	68fb      	ldr	r3, [r7, #12]
90003832:	2202      	movs	r2, #2
90003834:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
90003838:	69bb      	ldr	r3, [r7, #24]
9000383a:	9300      	str	r3, [sp, #0]
9000383c:	683b      	ldr	r3, [r7, #0]
9000383e:	687a      	ldr	r2, [r7, #4]
90003840:	68b9      	ldr	r1, [r7, #8]
90003842:	68f8      	ldr	r0, [r7, #12]
90003844:	f000 f9a4 	bl	90003b90 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
90003848:	68fb      	ldr	r3, [r7, #12]
9000384a:	681b      	ldr	r3, [r3, #0]
9000384c:	681a      	ldr	r2, [r3, #0]
9000384e:	68fb      	ldr	r3, [r7, #12]
90003850:	681b      	ldr	r3, [r3, #0]
90003852:	f042 0201 	orr.w	r2, r2, #1
90003856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
90003858:	2300      	movs	r3, #0
}
9000385a:	4618      	mov	r0, r3
9000385c:	3710      	adds	r7, #16
9000385e:	46bd      	mov	sp, r7
90003860:	bd80      	pop	{r7, pc}

90003862 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
90003862:	b580      	push	{r7, lr}
90003864:	b086      	sub	sp, #24
90003866:	af00      	add	r7, sp, #0
90003868:	6078      	str	r0, [r7, #4]
9000386a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
9000386c:	2300      	movs	r3, #0
9000386e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
90003870:	687b      	ldr	r3, [r7, #4]
90003872:	681b      	ldr	r3, [r3, #0]
90003874:	681b      	ldr	r3, [r3, #0]
90003876:	f003 0301 	and.w	r3, r3, #1
9000387a:	2b00      	cmp	r3, #0
9000387c:	d056      	beq.n	9000392c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000387e:	f7ff fda3 	bl	900033c8 <HAL_GetTick>
90003882:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
90003884:	e04b      	b.n	9000391e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003886:	687b      	ldr	r3, [r7, #4]
90003888:	681b      	ldr	r3, [r3, #0]
9000388a:	685b      	ldr	r3, [r3, #4]
9000388c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000388e:	68fb      	ldr	r3, [r7, #12]
90003890:	f003 0321 	and.w	r3, r3, #33	; 0x21
90003894:	2b00      	cmp	r3, #0
90003896:	d023      	beq.n	900038e0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
90003898:	68fb      	ldr	r3, [r7, #12]
9000389a:	f003 0320 	and.w	r3, r3, #32
9000389e:	2b00      	cmp	r3, #0
900038a0:	d005      	beq.n	900038ae <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
900038a2:	687b      	ldr	r3, [r7, #4]
900038a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900038a6:	f043 0202 	orr.w	r2, r3, #2
900038aa:	687b      	ldr	r3, [r7, #4]
900038ac:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
900038ae:	68fb      	ldr	r3, [r7, #12]
900038b0:	f003 0301 	and.w	r3, r3, #1
900038b4:	2b00      	cmp	r3, #0
900038b6:	d005      	beq.n	900038c4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
900038b8:	687b      	ldr	r3, [r7, #4]
900038ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900038bc:	f043 0201 	orr.w	r2, r3, #1
900038c0:	687b      	ldr	r3, [r7, #4]
900038c2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900038c4:	687b      	ldr	r3, [r7, #4]
900038c6:	681b      	ldr	r3, [r3, #0]
900038c8:	2221      	movs	r2, #33	; 0x21
900038ca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900038cc:	687b      	ldr	r3, [r7, #4]
900038ce:	2204      	movs	r2, #4
900038d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	2200      	movs	r2, #0
900038d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
900038dc:	2301      	movs	r3, #1
900038de:	e0a5      	b.n	90003a2c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900038e0:	683b      	ldr	r3, [r7, #0]
900038e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900038e6:	d01a      	beq.n	9000391e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900038e8:	f7ff fd6e 	bl	900033c8 <HAL_GetTick>
900038ec:	4602      	mov	r2, r0
900038ee:	697b      	ldr	r3, [r7, #20]
900038f0:	1ad3      	subs	r3, r2, r3
900038f2:	683a      	ldr	r2, [r7, #0]
900038f4:	429a      	cmp	r2, r3
900038f6:	d302      	bcc.n	900038fe <HAL_DMA2D_PollForTransfer+0x9c>
900038f8:	683b      	ldr	r3, [r7, #0]
900038fa:	2b00      	cmp	r3, #0
900038fc:	d10f      	bne.n	9000391e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900038fe:	687b      	ldr	r3, [r7, #4]
90003900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003902:	f043 0220 	orr.w	r2, r3, #32
90003906:	687b      	ldr	r3, [r7, #4]
90003908:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
9000390a:	687b      	ldr	r3, [r7, #4]
9000390c:	2203      	movs	r2, #3
9000390e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
90003912:	687b      	ldr	r3, [r7, #4]
90003914:	2200      	movs	r2, #0
90003916:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
9000391a:	2303      	movs	r3, #3
9000391c:	e086      	b.n	90003a2c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
9000391e:	687b      	ldr	r3, [r7, #4]
90003920:	681b      	ldr	r3, [r3, #0]
90003922:	685b      	ldr	r3, [r3, #4]
90003924:	f003 0302 	and.w	r3, r3, #2
90003928:	2b00      	cmp	r3, #0
9000392a:	d0ac      	beq.n	90003886 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
9000392c:	687b      	ldr	r3, [r7, #4]
9000392e:	681b      	ldr	r3, [r3, #0]
90003930:	69db      	ldr	r3, [r3, #28]
90003932:	f003 0320 	and.w	r3, r3, #32
90003936:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
90003938:	687b      	ldr	r3, [r7, #4]
9000393a:	681b      	ldr	r3, [r3, #0]
9000393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000393e:	f003 0320 	and.w	r3, r3, #32
90003942:	693a      	ldr	r2, [r7, #16]
90003944:	4313      	orrs	r3, r2
90003946:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
90003948:	693b      	ldr	r3, [r7, #16]
9000394a:	2b00      	cmp	r3, #0
9000394c:	d061      	beq.n	90003a12 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
9000394e:	f7ff fd3b 	bl	900033c8 <HAL_GetTick>
90003952:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003954:	e056      	b.n	90003a04 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
90003956:	687b      	ldr	r3, [r7, #4]
90003958:	681b      	ldr	r3, [r3, #0]
9000395a:	685b      	ldr	r3, [r3, #4]
9000395c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
9000395e:	68fb      	ldr	r3, [r7, #12]
90003960:	f003 0329 	and.w	r3, r3, #41	; 0x29
90003964:	2b00      	cmp	r3, #0
90003966:	d02e      	beq.n	900039c6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90003968:	68fb      	ldr	r3, [r7, #12]
9000396a:	f003 0308 	and.w	r3, r3, #8
9000396e:	2b00      	cmp	r3, #0
90003970:	d005      	beq.n	9000397e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90003972:	687b      	ldr	r3, [r7, #4]
90003974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90003976:	f043 0204 	orr.w	r2, r3, #4
9000397a:	687b      	ldr	r3, [r7, #4]
9000397c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000397e:	68fb      	ldr	r3, [r7, #12]
90003980:	f003 0320 	and.w	r3, r3, #32
90003984:	2b00      	cmp	r3, #0
90003986:	d005      	beq.n	90003994 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90003988:	687b      	ldr	r3, [r7, #4]
9000398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
9000398c:	f043 0202 	orr.w	r2, r3, #2
90003990:	687b      	ldr	r3, [r7, #4]
90003992:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
90003994:	68fb      	ldr	r3, [r7, #12]
90003996:	f003 0301 	and.w	r3, r3, #1
9000399a:	2b00      	cmp	r3, #0
9000399c:	d005      	beq.n	900039aa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000399e:	687b      	ldr	r3, [r7, #4]
900039a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900039a2:	f043 0201 	orr.w	r2, r3, #1
900039a6:	687b      	ldr	r3, [r7, #4]
900039a8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
900039aa:	687b      	ldr	r3, [r7, #4]
900039ac:	681b      	ldr	r3, [r3, #0]
900039ae:	2229      	movs	r2, #41	; 0x29
900039b0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
900039b2:	687b      	ldr	r3, [r7, #4]
900039b4:	2204      	movs	r2, #4
900039b6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
900039ba:	687b      	ldr	r3, [r7, #4]
900039bc:	2200      	movs	r2, #0
900039be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
900039c2:	2301      	movs	r3, #1
900039c4:	e032      	b.n	90003a2c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900039c6:	683b      	ldr	r3, [r7, #0]
900039c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900039cc:	d01a      	beq.n	90003a04 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900039ce:	f7ff fcfb 	bl	900033c8 <HAL_GetTick>
900039d2:	4602      	mov	r2, r0
900039d4:	697b      	ldr	r3, [r7, #20]
900039d6:	1ad3      	subs	r3, r2, r3
900039d8:	683a      	ldr	r2, [r7, #0]
900039da:	429a      	cmp	r2, r3
900039dc:	d302      	bcc.n	900039e4 <HAL_DMA2D_PollForTransfer+0x182>
900039de:	683b      	ldr	r3, [r7, #0]
900039e0:	2b00      	cmp	r3, #0
900039e2:	d10f      	bne.n	90003a04 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
900039e4:	687b      	ldr	r3, [r7, #4]
900039e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900039e8:	f043 0220 	orr.w	r2, r3, #32
900039ec:	687b      	ldr	r3, [r7, #4]
900039ee:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
900039f0:	687b      	ldr	r3, [r7, #4]
900039f2:	2203      	movs	r2, #3
900039f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
900039f8:	687b      	ldr	r3, [r7, #4]
900039fa:	2200      	movs	r2, #0
900039fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
90003a00:	2303      	movs	r3, #3
90003a02:	e013      	b.n	90003a2c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
90003a04:	687b      	ldr	r3, [r7, #4]
90003a06:	681b      	ldr	r3, [r3, #0]
90003a08:	685b      	ldr	r3, [r3, #4]
90003a0a:	f003 0310 	and.w	r3, r3, #16
90003a0e:	2b00      	cmp	r3, #0
90003a10:	d0a1      	beq.n	90003956 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
90003a12:	687b      	ldr	r3, [r7, #4]
90003a14:	681b      	ldr	r3, [r3, #0]
90003a16:	2212      	movs	r2, #18
90003a18:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003a1a:	687b      	ldr	r3, [r7, #4]
90003a1c:	2201      	movs	r2, #1
90003a1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003a22:	687b      	ldr	r3, [r7, #4]
90003a24:	2200      	movs	r2, #0
90003a26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90003a2a:	2300      	movs	r3, #0
}
90003a2c:	4618      	mov	r0, r3
90003a2e:	3718      	adds	r7, #24
90003a30:	46bd      	mov	sp, r7
90003a32:	bd80      	pop	{r7, pc}

90003a34 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90003a34:	b480      	push	{r7}
90003a36:	b087      	sub	sp, #28
90003a38:	af00      	add	r7, sp, #0
90003a3a:	6078      	str	r0, [r7, #4]
90003a3c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
90003a3e:	687b      	ldr	r3, [r7, #4]
90003a40:	685b      	ldr	r3, [r3, #4]
90003a42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
90003a46:	683b      	ldr	r3, [r7, #0]
90003a48:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90003a4a:	687b      	ldr	r3, [r7, #4]
90003a4c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
90003a50:	2b01      	cmp	r3, #1
90003a52:	d101      	bne.n	90003a58 <HAL_DMA2D_ConfigLayer+0x24>
90003a54:	2302      	movs	r3, #2
90003a56:	e092      	b.n	90003b7e <HAL_DMA2D_ConfigLayer+0x14a>
90003a58:	687b      	ldr	r3, [r7, #4]
90003a5a:	2201      	movs	r2, #1
90003a5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90003a60:	687b      	ldr	r3, [r7, #4]
90003a62:	2202      	movs	r2, #2
90003a64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
90003a68:	683a      	ldr	r2, [r7, #0]
90003a6a:	4613      	mov	r3, r2
90003a6c:	00db      	lsls	r3, r3, #3
90003a6e:	1a9b      	subs	r3, r3, r2
90003a70:	009b      	lsls	r3, r3, #2
90003a72:	3328      	adds	r3, #40	; 0x28
90003a74:	687a      	ldr	r2, [r7, #4]
90003a76:	4413      	add	r3, r2
90003a78:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a7a:	68fb      	ldr	r3, [r7, #12]
90003a7c:	685a      	ldr	r2, [r3, #4]
90003a7e:	68fb      	ldr	r3, [r7, #12]
90003a80:	689b      	ldr	r3, [r3, #8]
90003a82:	041b      	lsls	r3, r3, #16
90003a84:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a86:	68fb      	ldr	r3, [r7, #12]
90003a88:	691b      	ldr	r3, [r3, #16]
90003a8a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90003a8e:	68fb      	ldr	r3, [r7, #12]
90003a90:	695b      	ldr	r3, [r3, #20]
90003a92:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90003a94:	4313      	orrs	r3, r2
90003a96:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
90003a98:	4b3c      	ldr	r3, [pc, #240]	; (90003b8c <HAL_DMA2D_ConfigLayer+0x158>)
90003a9a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003a9c:	68fb      	ldr	r3, [r7, #12]
90003a9e:	685b      	ldr	r3, [r3, #4]
90003aa0:	2b0a      	cmp	r3, #10
90003aa2:	d003      	beq.n	90003aac <HAL_DMA2D_ConfigLayer+0x78>
90003aa4:	68fb      	ldr	r3, [r7, #12]
90003aa6:	685b      	ldr	r3, [r3, #4]
90003aa8:	2b09      	cmp	r3, #9
90003aaa:	d107      	bne.n	90003abc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90003aac:	68fb      	ldr	r3, [r7, #12]
90003aae:	68db      	ldr	r3, [r3, #12]
90003ab0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90003ab4:	693a      	ldr	r2, [r7, #16]
90003ab6:	4313      	orrs	r3, r2
90003ab8:	613b      	str	r3, [r7, #16]
90003aba:	e005      	b.n	90003ac8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90003abc:	68fb      	ldr	r3, [r7, #12]
90003abe:	68db      	ldr	r3, [r3, #12]
90003ac0:	061b      	lsls	r3, r3, #24
90003ac2:	693a      	ldr	r2, [r7, #16]
90003ac4:	4313      	orrs	r3, r2
90003ac6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90003ac8:	683b      	ldr	r3, [r7, #0]
90003aca:	2b00      	cmp	r3, #0
90003acc:	d120      	bne.n	90003b10 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90003ace:	687b      	ldr	r3, [r7, #4]
90003ad0:	681b      	ldr	r3, [r3, #0]
90003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003ad4:	697b      	ldr	r3, [r7, #20]
90003ad6:	43db      	mvns	r3, r3
90003ad8:	ea02 0103 	and.w	r1, r2, r3
90003adc:	687b      	ldr	r3, [r7, #4]
90003ade:	681b      	ldr	r3, [r3, #0]
90003ae0:	693a      	ldr	r2, [r7, #16]
90003ae2:	430a      	orrs	r2, r1
90003ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90003ae6:	687b      	ldr	r3, [r7, #4]
90003ae8:	681b      	ldr	r3, [r3, #0]
90003aea:	68fa      	ldr	r2, [r7, #12]
90003aec:	6812      	ldr	r2, [r2, #0]
90003aee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003af0:	68fb      	ldr	r3, [r7, #12]
90003af2:	685b      	ldr	r3, [r3, #4]
90003af4:	2b0a      	cmp	r3, #10
90003af6:	d003      	beq.n	90003b00 <HAL_DMA2D_ConfigLayer+0xcc>
90003af8:	68fb      	ldr	r3, [r7, #12]
90003afa:	685b      	ldr	r3, [r3, #4]
90003afc:	2b09      	cmp	r3, #9
90003afe:	d135      	bne.n	90003b6c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90003b00:	68fb      	ldr	r3, [r7, #12]
90003b02:	68da      	ldr	r2, [r3, #12]
90003b04:	687b      	ldr	r3, [r7, #4]
90003b06:	681b      	ldr	r3, [r3, #0]
90003b08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003b0c:	629a      	str	r2, [r3, #40]	; 0x28
90003b0e:	e02d      	b.n	90003b6c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90003b10:	68fb      	ldr	r3, [r7, #12]
90003b12:	685b      	ldr	r3, [r3, #4]
90003b14:	2b0b      	cmp	r3, #11
90003b16:	d109      	bne.n	90003b2c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90003b18:	68fb      	ldr	r3, [r7, #12]
90003b1a:	699b      	ldr	r3, [r3, #24]
90003b1c:	049b      	lsls	r3, r3, #18
90003b1e:	693a      	ldr	r2, [r7, #16]
90003b20:	4313      	orrs	r3, r2
90003b22:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
90003b24:	697b      	ldr	r3, [r7, #20]
90003b26:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
90003b2a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90003b2c:	687b      	ldr	r3, [r7, #4]
90003b2e:	681b      	ldr	r3, [r3, #0]
90003b30:	69da      	ldr	r2, [r3, #28]
90003b32:	697b      	ldr	r3, [r7, #20]
90003b34:	43db      	mvns	r3, r3
90003b36:	ea02 0103 	and.w	r1, r2, r3
90003b3a:	687b      	ldr	r3, [r7, #4]
90003b3c:	681b      	ldr	r3, [r3, #0]
90003b3e:	693a      	ldr	r2, [r7, #16]
90003b40:	430a      	orrs	r2, r1
90003b42:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90003b44:	687b      	ldr	r3, [r7, #4]
90003b46:	681b      	ldr	r3, [r3, #0]
90003b48:	68fa      	ldr	r2, [r7, #12]
90003b4a:	6812      	ldr	r2, [r2, #0]
90003b4c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90003b4e:	68fb      	ldr	r3, [r7, #12]
90003b50:	685b      	ldr	r3, [r3, #4]
90003b52:	2b0a      	cmp	r3, #10
90003b54:	d003      	beq.n	90003b5e <HAL_DMA2D_ConfigLayer+0x12a>
90003b56:	68fb      	ldr	r3, [r7, #12]
90003b58:	685b      	ldr	r3, [r3, #4]
90003b5a:	2b09      	cmp	r3, #9
90003b5c:	d106      	bne.n	90003b6c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90003b5e:	68fb      	ldr	r3, [r7, #12]
90003b60:	68da      	ldr	r2, [r3, #12]
90003b62:	687b      	ldr	r3, [r7, #4]
90003b64:	681b      	ldr	r3, [r3, #0]
90003b66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
90003b6a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
90003b6c:	687b      	ldr	r3, [r7, #4]
90003b6e:	2201      	movs	r2, #1
90003b70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90003b74:	687b      	ldr	r3, [r7, #4]
90003b76:	2200      	movs	r2, #0
90003b78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90003b7c:	2300      	movs	r3, #0
}
90003b7e:	4618      	mov	r0, r3
90003b80:	371c      	adds	r7, #28
90003b82:	46bd      	mov	sp, r7
90003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b88:	4770      	bx	lr
90003b8a:	bf00      	nop
90003b8c:	ff33000f 	.word	0xff33000f

90003b90 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
90003b90:	b480      	push	{r7}
90003b92:	b08b      	sub	sp, #44	; 0x2c
90003b94:	af00      	add	r7, sp, #0
90003b96:	60f8      	str	r0, [r7, #12]
90003b98:	60b9      	str	r1, [r7, #8]
90003b9a:	607a      	str	r2, [r7, #4]
90003b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
90003b9e:	68fb      	ldr	r3, [r7, #12]
90003ba0:	681b      	ldr	r3, [r3, #0]
90003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003ba4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
90003ba8:	683b      	ldr	r3, [r7, #0]
90003baa:	041a      	lsls	r2, r3, #16
90003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90003bae:	431a      	orrs	r2, r3
90003bb0:	68fb      	ldr	r3, [r7, #12]
90003bb2:	681b      	ldr	r3, [r3, #0]
90003bb4:	430a      	orrs	r2, r1
90003bb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
90003bb8:	68fb      	ldr	r3, [r7, #12]
90003bba:	681b      	ldr	r3, [r3, #0]
90003bbc:	687a      	ldr	r2, [r7, #4]
90003bbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
90003bc0:	68fb      	ldr	r3, [r7, #12]
90003bc2:	685b      	ldr	r3, [r3, #4]
90003bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90003bc8:	d174      	bne.n	90003cb4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
90003bca:	68bb      	ldr	r3, [r7, #8]
90003bcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
90003bd0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
90003bd2:	68bb      	ldr	r3, [r7, #8]
90003bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90003bd8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
90003bda:	68bb      	ldr	r3, [r7, #8]
90003bdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90003be0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
90003be2:	68bb      	ldr	r3, [r7, #8]
90003be4:	b2db      	uxtb	r3, r3
90003be6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
90003be8:	68fb      	ldr	r3, [r7, #12]
90003bea:	689b      	ldr	r3, [r3, #8]
90003bec:	2b00      	cmp	r3, #0
90003bee:	d108      	bne.n	90003c02 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
90003bf0:	69ba      	ldr	r2, [r7, #24]
90003bf2:	69fb      	ldr	r3, [r7, #28]
90003bf4:	431a      	orrs	r2, r3
90003bf6:	6a3b      	ldr	r3, [r7, #32]
90003bf8:	4313      	orrs	r3, r2
90003bfa:	697a      	ldr	r2, [r7, #20]
90003bfc:	4313      	orrs	r3, r2
90003bfe:	627b      	str	r3, [r7, #36]	; 0x24
90003c00:	e053      	b.n	90003caa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
90003c02:	68fb      	ldr	r3, [r7, #12]
90003c04:	689b      	ldr	r3, [r3, #8]
90003c06:	2b01      	cmp	r3, #1
90003c08:	d106      	bne.n	90003c18 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
90003c0a:	69ba      	ldr	r2, [r7, #24]
90003c0c:	69fb      	ldr	r3, [r7, #28]
90003c0e:	4313      	orrs	r3, r2
90003c10:	697a      	ldr	r2, [r7, #20]
90003c12:	4313      	orrs	r3, r2
90003c14:	627b      	str	r3, [r7, #36]	; 0x24
90003c16:	e048      	b.n	90003caa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
90003c18:	68fb      	ldr	r3, [r7, #12]
90003c1a:	689b      	ldr	r3, [r3, #8]
90003c1c:	2b02      	cmp	r3, #2
90003c1e:	d111      	bne.n	90003c44 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
90003c20:	69fb      	ldr	r3, [r7, #28]
90003c22:	0cdb      	lsrs	r3, r3, #19
90003c24:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
90003c26:	69bb      	ldr	r3, [r7, #24]
90003c28:	0a9b      	lsrs	r3, r3, #10
90003c2a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c2c:	697b      	ldr	r3, [r7, #20]
90003c2e:	08db      	lsrs	r3, r3, #3
90003c30:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
90003c32:	69bb      	ldr	r3, [r7, #24]
90003c34:	015a      	lsls	r2, r3, #5
90003c36:	69fb      	ldr	r3, [r7, #28]
90003c38:	02db      	lsls	r3, r3, #11
90003c3a:	4313      	orrs	r3, r2
90003c3c:	697a      	ldr	r2, [r7, #20]
90003c3e:	4313      	orrs	r3, r2
90003c40:	627b      	str	r3, [r7, #36]	; 0x24
90003c42:	e032      	b.n	90003caa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
90003c44:	68fb      	ldr	r3, [r7, #12]
90003c46:	689b      	ldr	r3, [r3, #8]
90003c48:	2b03      	cmp	r3, #3
90003c4a:	d117      	bne.n	90003c7c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
90003c4c:	6a3b      	ldr	r3, [r7, #32]
90003c4e:	0fdb      	lsrs	r3, r3, #31
90003c50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
90003c52:	69fb      	ldr	r3, [r7, #28]
90003c54:	0cdb      	lsrs	r3, r3, #19
90003c56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
90003c58:	69bb      	ldr	r3, [r7, #24]
90003c5a:	0adb      	lsrs	r3, r3, #11
90003c5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
90003c5e:	697b      	ldr	r3, [r7, #20]
90003c60:	08db      	lsrs	r3, r3, #3
90003c62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
90003c64:	69bb      	ldr	r3, [r7, #24]
90003c66:	015a      	lsls	r2, r3, #5
90003c68:	69fb      	ldr	r3, [r7, #28]
90003c6a:	029b      	lsls	r3, r3, #10
90003c6c:	431a      	orrs	r2, r3
90003c6e:	6a3b      	ldr	r3, [r7, #32]
90003c70:	03db      	lsls	r3, r3, #15
90003c72:	4313      	orrs	r3, r2
90003c74:	697a      	ldr	r2, [r7, #20]
90003c76:	4313      	orrs	r3, r2
90003c78:	627b      	str	r3, [r7, #36]	; 0x24
90003c7a:	e016      	b.n	90003caa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
90003c7c:	6a3b      	ldr	r3, [r7, #32]
90003c7e:	0f1b      	lsrs	r3, r3, #28
90003c80:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
90003c82:	69fb      	ldr	r3, [r7, #28]
90003c84:	0d1b      	lsrs	r3, r3, #20
90003c86:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
90003c88:	69bb      	ldr	r3, [r7, #24]
90003c8a:	0b1b      	lsrs	r3, r3, #12
90003c8c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
90003c8e:	697b      	ldr	r3, [r7, #20]
90003c90:	091b      	lsrs	r3, r3, #4
90003c92:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
90003c94:	69bb      	ldr	r3, [r7, #24]
90003c96:	011a      	lsls	r2, r3, #4
90003c98:	69fb      	ldr	r3, [r7, #28]
90003c9a:	021b      	lsls	r3, r3, #8
90003c9c:	431a      	orrs	r2, r3
90003c9e:	6a3b      	ldr	r3, [r7, #32]
90003ca0:	031b      	lsls	r3, r3, #12
90003ca2:	4313      	orrs	r3, r2
90003ca4:	697a      	ldr	r2, [r7, #20]
90003ca6:	4313      	orrs	r3, r2
90003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
90003caa:	68fb      	ldr	r3, [r7, #12]
90003cac:	681b      	ldr	r3, [r3, #0]
90003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90003cb0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
90003cb2:	e00d      	b.n	90003cd0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
90003cb4:	68fb      	ldr	r3, [r7, #12]
90003cb6:	685b      	ldr	r3, [r3, #4]
90003cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90003cbc:	d104      	bne.n	90003cc8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
90003cbe:	68fb      	ldr	r3, [r7, #12]
90003cc0:	681b      	ldr	r3, [r3, #0]
90003cc2:	68ba      	ldr	r2, [r7, #8]
90003cc4:	615a      	str	r2, [r3, #20]
}
90003cc6:	e003      	b.n	90003cd0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
90003cc8:	68fb      	ldr	r3, [r7, #12]
90003cca:	681b      	ldr	r3, [r3, #0]
90003ccc:	68ba      	ldr	r2, [r7, #8]
90003cce:	60da      	str	r2, [r3, #12]
}
90003cd0:	bf00      	nop
90003cd2:	372c      	adds	r7, #44	; 0x2c
90003cd4:	46bd      	mov	sp, r7
90003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
90003cda:	4770      	bx	lr

90003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90003cdc:	b480      	push	{r7}
90003cde:	b089      	sub	sp, #36	; 0x24
90003ce0:	af00      	add	r7, sp, #0
90003ce2:	6078      	str	r0, [r7, #4]
90003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90003ce6:	2300      	movs	r3, #0
90003ce8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90003cea:	4b89      	ldr	r3, [pc, #548]	; (90003f10 <HAL_GPIO_Init+0x234>)
90003cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90003cee:	e194      	b.n	9000401a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90003cf0:	683b      	ldr	r3, [r7, #0]
90003cf2:	681a      	ldr	r2, [r3, #0]
90003cf4:	2101      	movs	r1, #1
90003cf6:	69fb      	ldr	r3, [r7, #28]
90003cf8:	fa01 f303 	lsl.w	r3, r1, r3
90003cfc:	4013      	ands	r3, r2
90003cfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
90003d00:	693b      	ldr	r3, [r7, #16]
90003d02:	2b00      	cmp	r3, #0
90003d04:	f000 8186 	beq.w	90004014 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90003d08:	683b      	ldr	r3, [r7, #0]
90003d0a:	685b      	ldr	r3, [r3, #4]
90003d0c:	f003 0303 	and.w	r3, r3, #3
90003d10:	2b01      	cmp	r3, #1
90003d12:	d005      	beq.n	90003d20 <HAL_GPIO_Init+0x44>
90003d14:	683b      	ldr	r3, [r7, #0]
90003d16:	685b      	ldr	r3, [r3, #4]
90003d18:	f003 0303 	and.w	r3, r3, #3
90003d1c:	2b02      	cmp	r3, #2
90003d1e:	d130      	bne.n	90003d82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
90003d20:	687b      	ldr	r3, [r7, #4]
90003d22:	689b      	ldr	r3, [r3, #8]
90003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90003d26:	69fb      	ldr	r3, [r7, #28]
90003d28:	005b      	lsls	r3, r3, #1
90003d2a:	2203      	movs	r2, #3
90003d2c:	fa02 f303 	lsl.w	r3, r2, r3
90003d30:	43db      	mvns	r3, r3
90003d32:	69ba      	ldr	r2, [r7, #24]
90003d34:	4013      	ands	r3, r2
90003d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90003d38:	683b      	ldr	r3, [r7, #0]
90003d3a:	68da      	ldr	r2, [r3, #12]
90003d3c:	69fb      	ldr	r3, [r7, #28]
90003d3e:	005b      	lsls	r3, r3, #1
90003d40:	fa02 f303 	lsl.w	r3, r2, r3
90003d44:	69ba      	ldr	r2, [r7, #24]
90003d46:	4313      	orrs	r3, r2
90003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90003d4a:	687b      	ldr	r3, [r7, #4]
90003d4c:	69ba      	ldr	r2, [r7, #24]
90003d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90003d50:	687b      	ldr	r3, [r7, #4]
90003d52:	685b      	ldr	r3, [r3, #4]
90003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90003d56:	2201      	movs	r2, #1
90003d58:	69fb      	ldr	r3, [r7, #28]
90003d5a:	fa02 f303 	lsl.w	r3, r2, r3
90003d5e:	43db      	mvns	r3, r3
90003d60:	69ba      	ldr	r2, [r7, #24]
90003d62:	4013      	ands	r3, r2
90003d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90003d66:	683b      	ldr	r3, [r7, #0]
90003d68:	685b      	ldr	r3, [r3, #4]
90003d6a:	091b      	lsrs	r3, r3, #4
90003d6c:	f003 0201 	and.w	r2, r3, #1
90003d70:	69fb      	ldr	r3, [r7, #28]
90003d72:	fa02 f303 	lsl.w	r3, r2, r3
90003d76:	69ba      	ldr	r2, [r7, #24]
90003d78:	4313      	orrs	r3, r2
90003d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90003d7c:	687b      	ldr	r3, [r7, #4]
90003d7e:	69ba      	ldr	r2, [r7, #24]
90003d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90003d82:	683b      	ldr	r3, [r7, #0]
90003d84:	685b      	ldr	r3, [r3, #4]
90003d86:	f003 0303 	and.w	r3, r3, #3
90003d8a:	2b03      	cmp	r3, #3
90003d8c:	d017      	beq.n	90003dbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
90003d8e:	687b      	ldr	r3, [r7, #4]
90003d90:	68db      	ldr	r3, [r3, #12]
90003d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90003d94:	69fb      	ldr	r3, [r7, #28]
90003d96:	005b      	lsls	r3, r3, #1
90003d98:	2203      	movs	r2, #3
90003d9a:	fa02 f303 	lsl.w	r3, r2, r3
90003d9e:	43db      	mvns	r3, r3
90003da0:	69ba      	ldr	r2, [r7, #24]
90003da2:	4013      	ands	r3, r2
90003da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90003da6:	683b      	ldr	r3, [r7, #0]
90003da8:	689a      	ldr	r2, [r3, #8]
90003daa:	69fb      	ldr	r3, [r7, #28]
90003dac:	005b      	lsls	r3, r3, #1
90003dae:	fa02 f303 	lsl.w	r3, r2, r3
90003db2:	69ba      	ldr	r2, [r7, #24]
90003db4:	4313      	orrs	r3, r2
90003db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90003db8:	687b      	ldr	r3, [r7, #4]
90003dba:	69ba      	ldr	r2, [r7, #24]
90003dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90003dbe:	683b      	ldr	r3, [r7, #0]
90003dc0:	685b      	ldr	r3, [r3, #4]
90003dc2:	f003 0303 	and.w	r3, r3, #3
90003dc6:	2b02      	cmp	r3, #2
90003dc8:	d123      	bne.n	90003e12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90003dca:	69fb      	ldr	r3, [r7, #28]
90003dcc:	08da      	lsrs	r2, r3, #3
90003dce:	687b      	ldr	r3, [r7, #4]
90003dd0:	3208      	adds	r2, #8
90003dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90003dd8:	69fb      	ldr	r3, [r7, #28]
90003dda:	f003 0307 	and.w	r3, r3, #7
90003dde:	009b      	lsls	r3, r3, #2
90003de0:	220f      	movs	r2, #15
90003de2:	fa02 f303 	lsl.w	r3, r2, r3
90003de6:	43db      	mvns	r3, r3
90003de8:	69ba      	ldr	r2, [r7, #24]
90003dea:	4013      	ands	r3, r2
90003dec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90003dee:	683b      	ldr	r3, [r7, #0]
90003df0:	691a      	ldr	r2, [r3, #16]
90003df2:	69fb      	ldr	r3, [r7, #28]
90003df4:	f003 0307 	and.w	r3, r3, #7
90003df8:	009b      	lsls	r3, r3, #2
90003dfa:	fa02 f303 	lsl.w	r3, r2, r3
90003dfe:	69ba      	ldr	r2, [r7, #24]
90003e00:	4313      	orrs	r3, r2
90003e02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90003e04:	69fb      	ldr	r3, [r7, #28]
90003e06:	08da      	lsrs	r2, r3, #3
90003e08:	687b      	ldr	r3, [r7, #4]
90003e0a:	3208      	adds	r2, #8
90003e0c:	69b9      	ldr	r1, [r7, #24]
90003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90003e12:	687b      	ldr	r3, [r7, #4]
90003e14:	681b      	ldr	r3, [r3, #0]
90003e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90003e18:	69fb      	ldr	r3, [r7, #28]
90003e1a:	005b      	lsls	r3, r3, #1
90003e1c:	2203      	movs	r2, #3
90003e1e:	fa02 f303 	lsl.w	r3, r2, r3
90003e22:	43db      	mvns	r3, r3
90003e24:	69ba      	ldr	r2, [r7, #24]
90003e26:	4013      	ands	r3, r2
90003e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90003e2a:	683b      	ldr	r3, [r7, #0]
90003e2c:	685b      	ldr	r3, [r3, #4]
90003e2e:	f003 0203 	and.w	r2, r3, #3
90003e32:	69fb      	ldr	r3, [r7, #28]
90003e34:	005b      	lsls	r3, r3, #1
90003e36:	fa02 f303 	lsl.w	r3, r2, r3
90003e3a:	69ba      	ldr	r2, [r7, #24]
90003e3c:	4313      	orrs	r3, r2
90003e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
90003e40:	687b      	ldr	r3, [r7, #4]
90003e42:	69ba      	ldr	r2, [r7, #24]
90003e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90003e46:	683b      	ldr	r3, [r7, #0]
90003e48:	685b      	ldr	r3, [r3, #4]
90003e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90003e4e:	2b00      	cmp	r3, #0
90003e50:	f000 80e0 	beq.w	90004014 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90003e54:	4b2f      	ldr	r3, [pc, #188]	; (90003f14 <HAL_GPIO_Init+0x238>)
90003e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003e5a:	4a2e      	ldr	r2, [pc, #184]	; (90003f14 <HAL_GPIO_Init+0x238>)
90003e5c:	f043 0302 	orr.w	r3, r3, #2
90003e60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90003e64:	4b2b      	ldr	r3, [pc, #172]	; (90003f14 <HAL_GPIO_Init+0x238>)
90003e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90003e6a:	f003 0302 	and.w	r3, r3, #2
90003e6e:	60fb      	str	r3, [r7, #12]
90003e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
90003e72:	4a29      	ldr	r2, [pc, #164]	; (90003f18 <HAL_GPIO_Init+0x23c>)
90003e74:	69fb      	ldr	r3, [r7, #28]
90003e76:	089b      	lsrs	r3, r3, #2
90003e78:	3302      	adds	r3, #2
90003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90003e80:	69fb      	ldr	r3, [r7, #28]
90003e82:	f003 0303 	and.w	r3, r3, #3
90003e86:	009b      	lsls	r3, r3, #2
90003e88:	220f      	movs	r2, #15
90003e8a:	fa02 f303 	lsl.w	r3, r2, r3
90003e8e:	43db      	mvns	r3, r3
90003e90:	69ba      	ldr	r2, [r7, #24]
90003e92:	4013      	ands	r3, r2
90003e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90003e96:	687b      	ldr	r3, [r7, #4]
90003e98:	4a20      	ldr	r2, [pc, #128]	; (90003f1c <HAL_GPIO_Init+0x240>)
90003e9a:	4293      	cmp	r3, r2
90003e9c:	d052      	beq.n	90003f44 <HAL_GPIO_Init+0x268>
90003e9e:	687b      	ldr	r3, [r7, #4]
90003ea0:	4a1f      	ldr	r2, [pc, #124]	; (90003f20 <HAL_GPIO_Init+0x244>)
90003ea2:	4293      	cmp	r3, r2
90003ea4:	d031      	beq.n	90003f0a <HAL_GPIO_Init+0x22e>
90003ea6:	687b      	ldr	r3, [r7, #4]
90003ea8:	4a1e      	ldr	r2, [pc, #120]	; (90003f24 <HAL_GPIO_Init+0x248>)
90003eaa:	4293      	cmp	r3, r2
90003eac:	d02b      	beq.n	90003f06 <HAL_GPIO_Init+0x22a>
90003eae:	687b      	ldr	r3, [r7, #4]
90003eb0:	4a1d      	ldr	r2, [pc, #116]	; (90003f28 <HAL_GPIO_Init+0x24c>)
90003eb2:	4293      	cmp	r3, r2
90003eb4:	d025      	beq.n	90003f02 <HAL_GPIO_Init+0x226>
90003eb6:	687b      	ldr	r3, [r7, #4]
90003eb8:	4a1c      	ldr	r2, [pc, #112]	; (90003f2c <HAL_GPIO_Init+0x250>)
90003eba:	4293      	cmp	r3, r2
90003ebc:	d01f      	beq.n	90003efe <HAL_GPIO_Init+0x222>
90003ebe:	687b      	ldr	r3, [r7, #4]
90003ec0:	4a1b      	ldr	r2, [pc, #108]	; (90003f30 <HAL_GPIO_Init+0x254>)
90003ec2:	4293      	cmp	r3, r2
90003ec4:	d019      	beq.n	90003efa <HAL_GPIO_Init+0x21e>
90003ec6:	687b      	ldr	r3, [r7, #4]
90003ec8:	4a1a      	ldr	r2, [pc, #104]	; (90003f34 <HAL_GPIO_Init+0x258>)
90003eca:	4293      	cmp	r3, r2
90003ecc:	d013      	beq.n	90003ef6 <HAL_GPIO_Init+0x21a>
90003ece:	687b      	ldr	r3, [r7, #4]
90003ed0:	4a19      	ldr	r2, [pc, #100]	; (90003f38 <HAL_GPIO_Init+0x25c>)
90003ed2:	4293      	cmp	r3, r2
90003ed4:	d00d      	beq.n	90003ef2 <HAL_GPIO_Init+0x216>
90003ed6:	687b      	ldr	r3, [r7, #4]
90003ed8:	4a18      	ldr	r2, [pc, #96]	; (90003f3c <HAL_GPIO_Init+0x260>)
90003eda:	4293      	cmp	r3, r2
90003edc:	d007      	beq.n	90003eee <HAL_GPIO_Init+0x212>
90003ede:	687b      	ldr	r3, [r7, #4]
90003ee0:	4a17      	ldr	r2, [pc, #92]	; (90003f40 <HAL_GPIO_Init+0x264>)
90003ee2:	4293      	cmp	r3, r2
90003ee4:	d101      	bne.n	90003eea <HAL_GPIO_Init+0x20e>
90003ee6:	2309      	movs	r3, #9
90003ee8:	e02d      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003eea:	230a      	movs	r3, #10
90003eec:	e02b      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003eee:	2308      	movs	r3, #8
90003ef0:	e029      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003ef2:	2307      	movs	r3, #7
90003ef4:	e027      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003ef6:	2306      	movs	r3, #6
90003ef8:	e025      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003efa:	2305      	movs	r3, #5
90003efc:	e023      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003efe:	2304      	movs	r3, #4
90003f00:	e021      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003f02:	2303      	movs	r3, #3
90003f04:	e01f      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003f06:	2302      	movs	r3, #2
90003f08:	e01d      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003f0a:	2301      	movs	r3, #1
90003f0c:	e01b      	b.n	90003f46 <HAL_GPIO_Init+0x26a>
90003f0e:	bf00      	nop
90003f10:	58000080 	.word	0x58000080
90003f14:	58024400 	.word	0x58024400
90003f18:	58000400 	.word	0x58000400
90003f1c:	58020000 	.word	0x58020000
90003f20:	58020400 	.word	0x58020400
90003f24:	58020800 	.word	0x58020800
90003f28:	58020c00 	.word	0x58020c00
90003f2c:	58021000 	.word	0x58021000
90003f30:	58021400 	.word	0x58021400
90003f34:	58021800 	.word	0x58021800
90003f38:	58021c00 	.word	0x58021c00
90003f3c:	58022000 	.word	0x58022000
90003f40:	58022400 	.word	0x58022400
90003f44:	2300      	movs	r3, #0
90003f46:	69fa      	ldr	r2, [r7, #28]
90003f48:	f002 0203 	and.w	r2, r2, #3
90003f4c:	0092      	lsls	r2, r2, #2
90003f4e:	4093      	lsls	r3, r2
90003f50:	69ba      	ldr	r2, [r7, #24]
90003f52:	4313      	orrs	r3, r2
90003f54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90003f56:	4938      	ldr	r1, [pc, #224]	; (90004038 <HAL_GPIO_Init+0x35c>)
90003f58:	69fb      	ldr	r3, [r7, #28]
90003f5a:	089b      	lsrs	r3, r3, #2
90003f5c:	3302      	adds	r3, #2
90003f5e:	69ba      	ldr	r2, [r7, #24]
90003f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003f68:	681b      	ldr	r3, [r3, #0]
90003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f6c:	693b      	ldr	r3, [r7, #16]
90003f6e:	43db      	mvns	r3, r3
90003f70:	69ba      	ldr	r2, [r7, #24]
90003f72:	4013      	ands	r3, r2
90003f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90003f76:	683b      	ldr	r3, [r7, #0]
90003f78:	685b      	ldr	r3, [r3, #4]
90003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90003f7e:	2b00      	cmp	r3, #0
90003f80:	d003      	beq.n	90003f8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
90003f82:	69ba      	ldr	r2, [r7, #24]
90003f84:	693b      	ldr	r3, [r7, #16]
90003f86:	4313      	orrs	r3, r2
90003f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90003f8e:	69bb      	ldr	r3, [r7, #24]
90003f90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
90003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90003f96:	685b      	ldr	r3, [r3, #4]
90003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003f9a:	693b      	ldr	r3, [r7, #16]
90003f9c:	43db      	mvns	r3, r3
90003f9e:	69ba      	ldr	r2, [r7, #24]
90003fa0:	4013      	ands	r3, r2
90003fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90003fa4:	683b      	ldr	r3, [r7, #0]
90003fa6:	685b      	ldr	r3, [r3, #4]
90003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003fac:	2b00      	cmp	r3, #0
90003fae:	d003      	beq.n	90003fb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
90003fb0:	69ba      	ldr	r2, [r7, #24]
90003fb2:	693b      	ldr	r3, [r7, #16]
90003fb4:	4313      	orrs	r3, r2
90003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90003fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90003fbc:	69bb      	ldr	r3, [r7, #24]
90003fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90003fc0:	697b      	ldr	r3, [r7, #20]
90003fc2:	685b      	ldr	r3, [r3, #4]
90003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003fc6:	693b      	ldr	r3, [r7, #16]
90003fc8:	43db      	mvns	r3, r3
90003fca:	69ba      	ldr	r2, [r7, #24]
90003fcc:	4013      	ands	r3, r2
90003fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90003fd0:	683b      	ldr	r3, [r7, #0]
90003fd2:	685b      	ldr	r3, [r3, #4]
90003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003fd8:	2b00      	cmp	r3, #0
90003fda:	d003      	beq.n	90003fe4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90003fdc:	69ba      	ldr	r2, [r7, #24]
90003fde:	693b      	ldr	r3, [r7, #16]
90003fe0:	4313      	orrs	r3, r2
90003fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90003fe4:	697b      	ldr	r3, [r7, #20]
90003fe6:	69ba      	ldr	r2, [r7, #24]
90003fe8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90003fea:	697b      	ldr	r3, [r7, #20]
90003fec:	681b      	ldr	r3, [r3, #0]
90003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90003ff0:	693b      	ldr	r3, [r7, #16]
90003ff2:	43db      	mvns	r3, r3
90003ff4:	69ba      	ldr	r2, [r7, #24]
90003ff6:	4013      	ands	r3, r2
90003ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90003ffa:	683b      	ldr	r3, [r7, #0]
90003ffc:	685b      	ldr	r3, [r3, #4]
90003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90004002:	2b00      	cmp	r3, #0
90004004:	d003      	beq.n	9000400e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90004006:	69ba      	ldr	r2, [r7, #24]
90004008:	693b      	ldr	r3, [r7, #16]
9000400a:	4313      	orrs	r3, r2
9000400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000400e:	697b      	ldr	r3, [r7, #20]
90004010:	69ba      	ldr	r2, [r7, #24]
90004012:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90004014:	69fb      	ldr	r3, [r7, #28]
90004016:	3301      	adds	r3, #1
90004018:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000401a:	683b      	ldr	r3, [r7, #0]
9000401c:	681a      	ldr	r2, [r3, #0]
9000401e:	69fb      	ldr	r3, [r7, #28]
90004020:	fa22 f303 	lsr.w	r3, r2, r3
90004024:	2b00      	cmp	r3, #0
90004026:	f47f ae63 	bne.w	90003cf0 <HAL_GPIO_Init+0x14>
  }
}
9000402a:	bf00      	nop
9000402c:	bf00      	nop
9000402e:	3724      	adds	r7, #36	; 0x24
90004030:	46bd      	mov	sp, r7
90004032:	f85d 7b04 	ldr.w	r7, [sp], #4
90004036:	4770      	bx	lr
90004038:	58000400 	.word	0x58000400

9000403c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
9000403c:	b480      	push	{r7}
9000403e:	b087      	sub	sp, #28
90004040:	af00      	add	r7, sp, #0
90004042:	6078      	str	r0, [r7, #4]
90004044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90004046:	2300      	movs	r3, #0
90004048:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
9000404a:	4b75      	ldr	r3, [pc, #468]	; (90004220 <HAL_GPIO_DeInit+0x1e4>)
9000404c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000404e:	e0d9      	b.n	90004204 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
90004050:	2201      	movs	r2, #1
90004052:	697b      	ldr	r3, [r7, #20]
90004054:	fa02 f303 	lsl.w	r3, r2, r3
90004058:	683a      	ldr	r2, [r7, #0]
9000405a:	4013      	ands	r3, r2
9000405c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
9000405e:	68fb      	ldr	r3, [r7, #12]
90004060:	2b00      	cmp	r3, #0
90004062:	f000 80cc 	beq.w	900041fe <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
90004066:	4a6f      	ldr	r2, [pc, #444]	; (90004224 <HAL_GPIO_DeInit+0x1e8>)
90004068:	697b      	ldr	r3, [r7, #20]
9000406a:	089b      	lsrs	r3, r3, #2
9000406c:	3302      	adds	r3, #2
9000406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90004072:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90004074:	697b      	ldr	r3, [r7, #20]
90004076:	f003 0303 	and.w	r3, r3, #3
9000407a:	009b      	lsls	r3, r3, #2
9000407c:	220f      	movs	r2, #15
9000407e:	fa02 f303 	lsl.w	r3, r2, r3
90004082:	68ba      	ldr	r2, [r7, #8]
90004084:	4013      	ands	r3, r2
90004086:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90004088:	687b      	ldr	r3, [r7, #4]
9000408a:	4a67      	ldr	r2, [pc, #412]	; (90004228 <HAL_GPIO_DeInit+0x1ec>)
9000408c:	4293      	cmp	r3, r2
9000408e:	d037      	beq.n	90004100 <HAL_GPIO_DeInit+0xc4>
90004090:	687b      	ldr	r3, [r7, #4]
90004092:	4a66      	ldr	r2, [pc, #408]	; (9000422c <HAL_GPIO_DeInit+0x1f0>)
90004094:	4293      	cmp	r3, r2
90004096:	d031      	beq.n	900040fc <HAL_GPIO_DeInit+0xc0>
90004098:	687b      	ldr	r3, [r7, #4]
9000409a:	4a65      	ldr	r2, [pc, #404]	; (90004230 <HAL_GPIO_DeInit+0x1f4>)
9000409c:	4293      	cmp	r3, r2
9000409e:	d02b      	beq.n	900040f8 <HAL_GPIO_DeInit+0xbc>
900040a0:	687b      	ldr	r3, [r7, #4]
900040a2:	4a64      	ldr	r2, [pc, #400]	; (90004234 <HAL_GPIO_DeInit+0x1f8>)
900040a4:	4293      	cmp	r3, r2
900040a6:	d025      	beq.n	900040f4 <HAL_GPIO_DeInit+0xb8>
900040a8:	687b      	ldr	r3, [r7, #4]
900040aa:	4a63      	ldr	r2, [pc, #396]	; (90004238 <HAL_GPIO_DeInit+0x1fc>)
900040ac:	4293      	cmp	r3, r2
900040ae:	d01f      	beq.n	900040f0 <HAL_GPIO_DeInit+0xb4>
900040b0:	687b      	ldr	r3, [r7, #4]
900040b2:	4a62      	ldr	r2, [pc, #392]	; (9000423c <HAL_GPIO_DeInit+0x200>)
900040b4:	4293      	cmp	r3, r2
900040b6:	d019      	beq.n	900040ec <HAL_GPIO_DeInit+0xb0>
900040b8:	687b      	ldr	r3, [r7, #4]
900040ba:	4a61      	ldr	r2, [pc, #388]	; (90004240 <HAL_GPIO_DeInit+0x204>)
900040bc:	4293      	cmp	r3, r2
900040be:	d013      	beq.n	900040e8 <HAL_GPIO_DeInit+0xac>
900040c0:	687b      	ldr	r3, [r7, #4]
900040c2:	4a60      	ldr	r2, [pc, #384]	; (90004244 <HAL_GPIO_DeInit+0x208>)
900040c4:	4293      	cmp	r3, r2
900040c6:	d00d      	beq.n	900040e4 <HAL_GPIO_DeInit+0xa8>
900040c8:	687b      	ldr	r3, [r7, #4]
900040ca:	4a5f      	ldr	r2, [pc, #380]	; (90004248 <HAL_GPIO_DeInit+0x20c>)
900040cc:	4293      	cmp	r3, r2
900040ce:	d007      	beq.n	900040e0 <HAL_GPIO_DeInit+0xa4>
900040d0:	687b      	ldr	r3, [r7, #4]
900040d2:	4a5e      	ldr	r2, [pc, #376]	; (9000424c <HAL_GPIO_DeInit+0x210>)
900040d4:	4293      	cmp	r3, r2
900040d6:	d101      	bne.n	900040dc <HAL_GPIO_DeInit+0xa0>
900040d8:	2309      	movs	r3, #9
900040da:	e012      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040dc:	230a      	movs	r3, #10
900040de:	e010      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040e0:	2308      	movs	r3, #8
900040e2:	e00e      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040e4:	2307      	movs	r3, #7
900040e6:	e00c      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040e8:	2306      	movs	r3, #6
900040ea:	e00a      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040ec:	2305      	movs	r3, #5
900040ee:	e008      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040f0:	2304      	movs	r3, #4
900040f2:	e006      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040f4:	2303      	movs	r3, #3
900040f6:	e004      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040f8:	2302      	movs	r3, #2
900040fa:	e002      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
900040fc:	2301      	movs	r3, #1
900040fe:	e000      	b.n	90004102 <HAL_GPIO_DeInit+0xc6>
90004100:	2300      	movs	r3, #0
90004102:	697a      	ldr	r2, [r7, #20]
90004104:	f002 0203 	and.w	r2, r2, #3
90004108:	0092      	lsls	r2, r2, #2
9000410a:	4093      	lsls	r3, r2
9000410c:	68ba      	ldr	r2, [r7, #8]
9000410e:	429a      	cmp	r2, r3
90004110:	d136      	bne.n	90004180 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90004112:	693b      	ldr	r3, [r7, #16]
90004114:	681a      	ldr	r2, [r3, #0]
90004116:	68fb      	ldr	r3, [r7, #12]
90004118:	43db      	mvns	r3, r3
9000411a:	401a      	ands	r2, r3
9000411c:	693b      	ldr	r3, [r7, #16]
9000411e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90004120:	693b      	ldr	r3, [r7, #16]
90004122:	685a      	ldr	r2, [r3, #4]
90004124:	68fb      	ldr	r3, [r7, #12]
90004126:	43db      	mvns	r3, r3
90004128:	401a      	ands	r2, r3
9000412a:	693b      	ldr	r3, [r7, #16]
9000412c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
9000412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90004132:	685a      	ldr	r2, [r3, #4]
90004134:	68fb      	ldr	r3, [r7, #12]
90004136:	43db      	mvns	r3, r3
90004138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
9000413c:	4013      	ands	r3, r2
9000413e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90004140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90004144:	681a      	ldr	r2, [r3, #0]
90004146:	68fb      	ldr	r3, [r7, #12]
90004148:	43db      	mvns	r3, r3
9000414a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
9000414e:	4013      	ands	r3, r2
90004150:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
90004152:	697b      	ldr	r3, [r7, #20]
90004154:	f003 0303 	and.w	r3, r3, #3
90004158:	009b      	lsls	r3, r3, #2
9000415a:	220f      	movs	r2, #15
9000415c:	fa02 f303 	lsl.w	r3, r2, r3
90004160:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
90004162:	4a30      	ldr	r2, [pc, #192]	; (90004224 <HAL_GPIO_DeInit+0x1e8>)
90004164:	697b      	ldr	r3, [r7, #20]
90004166:	089b      	lsrs	r3, r3, #2
90004168:	3302      	adds	r3, #2
9000416a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
9000416e:	68bb      	ldr	r3, [r7, #8]
90004170:	43da      	mvns	r2, r3
90004172:	482c      	ldr	r0, [pc, #176]	; (90004224 <HAL_GPIO_DeInit+0x1e8>)
90004174:	697b      	ldr	r3, [r7, #20]
90004176:	089b      	lsrs	r3, r3, #2
90004178:	400a      	ands	r2, r1
9000417a:	3302      	adds	r3, #2
9000417c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
90004180:	687b      	ldr	r3, [r7, #4]
90004182:	681a      	ldr	r2, [r3, #0]
90004184:	697b      	ldr	r3, [r7, #20]
90004186:	005b      	lsls	r3, r3, #1
90004188:	2103      	movs	r1, #3
9000418a:	fa01 f303 	lsl.w	r3, r1, r3
9000418e:	431a      	orrs	r2, r3
90004190:	687b      	ldr	r3, [r7, #4]
90004192:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
90004194:	697b      	ldr	r3, [r7, #20]
90004196:	08da      	lsrs	r2, r3, #3
90004198:	687b      	ldr	r3, [r7, #4]
9000419a:	3208      	adds	r2, #8
9000419c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900041a0:	697b      	ldr	r3, [r7, #20]
900041a2:	f003 0307 	and.w	r3, r3, #7
900041a6:	009b      	lsls	r3, r3, #2
900041a8:	220f      	movs	r2, #15
900041aa:	fa02 f303 	lsl.w	r3, r2, r3
900041ae:	43db      	mvns	r3, r3
900041b0:	697a      	ldr	r2, [r7, #20]
900041b2:	08d2      	lsrs	r2, r2, #3
900041b4:	4019      	ands	r1, r3
900041b6:	687b      	ldr	r3, [r7, #4]
900041b8:	3208      	adds	r2, #8
900041ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900041be:	687b      	ldr	r3, [r7, #4]
900041c0:	68da      	ldr	r2, [r3, #12]
900041c2:	697b      	ldr	r3, [r7, #20]
900041c4:	005b      	lsls	r3, r3, #1
900041c6:	2103      	movs	r1, #3
900041c8:	fa01 f303 	lsl.w	r3, r1, r3
900041cc:	43db      	mvns	r3, r3
900041ce:	401a      	ands	r2, r3
900041d0:	687b      	ldr	r3, [r7, #4]
900041d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900041d4:	687b      	ldr	r3, [r7, #4]
900041d6:	685a      	ldr	r2, [r3, #4]
900041d8:	2101      	movs	r1, #1
900041da:	697b      	ldr	r3, [r7, #20]
900041dc:	fa01 f303 	lsl.w	r3, r1, r3
900041e0:	43db      	mvns	r3, r3
900041e2:	401a      	ands	r2, r3
900041e4:	687b      	ldr	r3, [r7, #4]
900041e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900041e8:	687b      	ldr	r3, [r7, #4]
900041ea:	689a      	ldr	r2, [r3, #8]
900041ec:	697b      	ldr	r3, [r7, #20]
900041ee:	005b      	lsls	r3, r3, #1
900041f0:	2103      	movs	r1, #3
900041f2:	fa01 f303 	lsl.w	r3, r1, r3
900041f6:	43db      	mvns	r3, r3
900041f8:	401a      	ands	r2, r3
900041fa:	687b      	ldr	r3, [r7, #4]
900041fc:	609a      	str	r2, [r3, #8]
    }

    position++;
900041fe:	697b      	ldr	r3, [r7, #20]
90004200:	3301      	adds	r3, #1
90004202:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
90004204:	683a      	ldr	r2, [r7, #0]
90004206:	697b      	ldr	r3, [r7, #20]
90004208:	fa22 f303 	lsr.w	r3, r2, r3
9000420c:	2b00      	cmp	r3, #0
9000420e:	f47f af1f 	bne.w	90004050 <HAL_GPIO_DeInit+0x14>
  }
}
90004212:	bf00      	nop
90004214:	bf00      	nop
90004216:	371c      	adds	r7, #28
90004218:	46bd      	mov	sp, r7
9000421a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000421e:	4770      	bx	lr
90004220:	58000080 	.word	0x58000080
90004224:	58000400 	.word	0x58000400
90004228:	58020000 	.word	0x58020000
9000422c:	58020400 	.word	0x58020400
90004230:	58020800 	.word	0x58020800
90004234:	58020c00 	.word	0x58020c00
90004238:	58021000 	.word	0x58021000
9000423c:	58021400 	.word	0x58021400
90004240:	58021800 	.word	0x58021800
90004244:	58021c00 	.word	0x58021c00
90004248:	58022000 	.word	0x58022000
9000424c:	58022400 	.word	0x58022400

90004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90004250:	b480      	push	{r7}
90004252:	b083      	sub	sp, #12
90004254:	af00      	add	r7, sp, #0
90004256:	6078      	str	r0, [r7, #4]
90004258:	460b      	mov	r3, r1
9000425a:	807b      	strh	r3, [r7, #2]
9000425c:	4613      	mov	r3, r2
9000425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90004260:	787b      	ldrb	r3, [r7, #1]
90004262:	2b00      	cmp	r3, #0
90004264:	d003      	beq.n	9000426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90004266:	887a      	ldrh	r2, [r7, #2]
90004268:	687b      	ldr	r3, [r7, #4]
9000426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
9000426c:	e003      	b.n	90004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000426e:	887b      	ldrh	r3, [r7, #2]
90004270:	041a      	lsls	r2, r3, #16
90004272:	687b      	ldr	r3, [r7, #4]
90004274:	619a      	str	r2, [r3, #24]
}
90004276:	bf00      	nop
90004278:	370c      	adds	r7, #12
9000427a:	46bd      	mov	sp, r7
9000427c:	f85d 7b04 	ldr.w	r7, [sp], #4
90004280:	4770      	bx	lr

90004282 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90004282:	b580      	push	{r7, lr}
90004284:	b086      	sub	sp, #24
90004286:	af00      	add	r7, sp, #0
90004288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000428a:	687b      	ldr	r3, [r7, #4]
9000428c:	681b      	ldr	r3, [r3, #0]
9000428e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004290:	693b      	ldr	r3, [r7, #16]
90004292:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
90004294:	687b      	ldr	r3, [r7, #4]
90004296:	681b      	ldr	r3, [r3, #0]
90004298:	4618      	mov	r0, r3
9000429a:	f005 fc11 	bl	90009ac0 <USB_GetMode>
9000429e:	4603      	mov	r3, r0
900042a0:	2b01      	cmp	r3, #1
900042a2:	f040 80fa 	bne.w	9000449a <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
900042a6:	687b      	ldr	r3, [r7, #4]
900042a8:	681b      	ldr	r3, [r3, #0]
900042aa:	4618      	mov	r0, r3
900042ac:	f005 fbd4 	bl	90009a58 <USB_ReadInterrupts>
900042b0:	4603      	mov	r3, r0
900042b2:	2b00      	cmp	r3, #0
900042b4:	f000 80f0 	beq.w	90004498 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
900042b8:	687b      	ldr	r3, [r7, #4]
900042ba:	681b      	ldr	r3, [r3, #0]
900042bc:	4618      	mov	r0, r3
900042be:	f005 fbcb 	bl	90009a58 <USB_ReadInterrupts>
900042c2:	4603      	mov	r3, r0
900042c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900042c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900042cc:	d104      	bne.n	900042d8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
900042ce:	687b      	ldr	r3, [r7, #4]
900042d0:	681b      	ldr	r3, [r3, #0]
900042d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
900042d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
900042d8:	687b      	ldr	r3, [r7, #4]
900042da:	681b      	ldr	r3, [r3, #0]
900042dc:	4618      	mov	r0, r3
900042de:	f005 fbbb 	bl	90009a58 <USB_ReadInterrupts>
900042e2:	4603      	mov	r3, r0
900042e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900042e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900042ec:	d104      	bne.n	900042f8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
900042ee:	687b      	ldr	r3, [r7, #4]
900042f0:	681b      	ldr	r3, [r3, #0]
900042f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
900042f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
900042f8:	687b      	ldr	r3, [r7, #4]
900042fa:	681b      	ldr	r3, [r3, #0]
900042fc:	4618      	mov	r0, r3
900042fe:	f005 fbab 	bl	90009a58 <USB_ReadInterrupts>
90004302:	4603      	mov	r3, r0
90004304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
90004308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000430c:	d104      	bne.n	90004318 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
9000430e:	687b      	ldr	r3, [r7, #4]
90004310:	681b      	ldr	r3, [r3, #0]
90004312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90004316:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
90004318:	687b      	ldr	r3, [r7, #4]
9000431a:	681b      	ldr	r3, [r3, #0]
9000431c:	4618      	mov	r0, r3
9000431e:	f005 fb9b 	bl	90009a58 <USB_ReadInterrupts>
90004322:	4603      	mov	r3, r0
90004324:	f003 0302 	and.w	r3, r3, #2
90004328:	2b02      	cmp	r3, #2
9000432a:	d103      	bne.n	90004334 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
9000432c:	687b      	ldr	r3, [r7, #4]
9000432e:	681b      	ldr	r3, [r3, #0]
90004330:	2202      	movs	r2, #2
90004332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
90004334:	687b      	ldr	r3, [r7, #4]
90004336:	681b      	ldr	r3, [r3, #0]
90004338:	4618      	mov	r0, r3
9000433a:	f005 fb8d 	bl	90009a58 <USB_ReadInterrupts>
9000433e:	4603      	mov	r3, r0
90004340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90004344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90004348:	d120      	bne.n	9000438c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
9000434a:	687b      	ldr	r3, [r7, #4]
9000434c:	681b      	ldr	r3, [r3, #0]
9000434e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90004352:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
90004354:	68fb      	ldr	r3, [r7, #12]
90004356:	f503 6388 	add.w	r3, r3, #1088	; 0x440
9000435a:	681b      	ldr	r3, [r3, #0]
9000435c:	f003 0301 	and.w	r3, r3, #1
90004360:	2b00      	cmp	r3, #0
90004362:	d113      	bne.n	9000438c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
90004364:	2110      	movs	r1, #16
90004366:	6938      	ldr	r0, [r7, #16]
90004368:	f005 faba 	bl	900098e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
9000436c:	6938      	ldr	r0, [r7, #16]
9000436e:	f005 faeb 	bl	90009948 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90004372:	687b      	ldr	r3, [r7, #4]
90004374:	699b      	ldr	r3, [r3, #24]
90004376:	2b02      	cmp	r3, #2
90004378:	d105      	bne.n	90004386 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
9000437a:	687b      	ldr	r3, [r7, #4]
9000437c:	681b      	ldr	r3, [r3, #0]
9000437e:	2101      	movs	r1, #1
90004380:	4618      	mov	r0, r3
90004382:	f005 fbab 	bl	90009adc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
90004386:	6878      	ldr	r0, [r7, #4]
90004388:	f7fc fb48 	bl	90000a1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
9000438c:	687b      	ldr	r3, [r7, #4]
9000438e:	681b      	ldr	r3, [r3, #0]
90004390:	4618      	mov	r0, r3
90004392:	f005 fb61 	bl	90009a58 <USB_ReadInterrupts>
90004396:	4603      	mov	r3, r0
90004398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
9000439c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900043a0:	d102      	bne.n	900043a8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
900043a2:	6878      	ldr	r0, [r7, #4]
900043a4:	f001 f92e 	bl	90005604 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
900043a8:	687b      	ldr	r3, [r7, #4]
900043aa:	681b      	ldr	r3, [r3, #0]
900043ac:	4618      	mov	r0, r3
900043ae:	f005 fb53 	bl	90009a58 <USB_ReadInterrupts>
900043b2:	4603      	mov	r3, r0
900043b4:	f003 0308 	and.w	r3, r3, #8
900043b8:	2b08      	cmp	r3, #8
900043ba:	d106      	bne.n	900043ca <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
900043bc:	6878      	ldr	r0, [r7, #4]
900043be:	f7fc fb11 	bl	900009e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
900043c2:	687b      	ldr	r3, [r7, #4]
900043c4:	681b      	ldr	r3, [r3, #0]
900043c6:	2208      	movs	r2, #8
900043c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
900043ca:	687b      	ldr	r3, [r7, #4]
900043cc:	681b      	ldr	r3, [r3, #0]
900043ce:	4618      	mov	r0, r3
900043d0:	f005 fb42 	bl	90009a58 <USB_ReadInterrupts>
900043d4:	4603      	mov	r3, r0
900043d6:	f003 0310 	and.w	r3, r3, #16
900043da:	2b10      	cmp	r3, #16
900043dc:	d101      	bne.n	900043e2 <HAL_HCD_IRQHandler+0x160>
900043de:	2301      	movs	r3, #1
900043e0:	e000      	b.n	900043e4 <HAL_HCD_IRQHandler+0x162>
900043e2:	2300      	movs	r3, #0
900043e4:	2b00      	cmp	r3, #0
900043e6:	d012      	beq.n	9000440e <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900043e8:	687b      	ldr	r3, [r7, #4]
900043ea:	681b      	ldr	r3, [r3, #0]
900043ec:	699a      	ldr	r2, [r3, #24]
900043ee:	687b      	ldr	r3, [r7, #4]
900043f0:	681b      	ldr	r3, [r3, #0]
900043f2:	f022 0210 	bic.w	r2, r2, #16
900043f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
900043f8:	6878      	ldr	r0, [r7, #4]
900043fa:	f001 f831 	bl	90005460 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
900043fe:	687b      	ldr	r3, [r7, #4]
90004400:	681b      	ldr	r3, [r3, #0]
90004402:	699a      	ldr	r2, [r3, #24]
90004404:	687b      	ldr	r3, [r7, #4]
90004406:	681b      	ldr	r3, [r3, #0]
90004408:	f042 0210 	orr.w	r2, r2, #16
9000440c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
9000440e:	687b      	ldr	r3, [r7, #4]
90004410:	681b      	ldr	r3, [r3, #0]
90004412:	4618      	mov	r0, r3
90004414:	f005 fb20 	bl	90009a58 <USB_ReadInterrupts>
90004418:	4603      	mov	r3, r0
9000441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000441e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90004422:	d13a      	bne.n	9000449a <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
90004424:	687b      	ldr	r3, [r7, #4]
90004426:	681b      	ldr	r3, [r3, #0]
90004428:	4618      	mov	r0, r3
9000442a:	f005 fb94 	bl	90009b56 <USB_HC_ReadInterrupt>
9000442e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
90004430:	2300      	movs	r3, #0
90004432:	617b      	str	r3, [r7, #20]
90004434:	e025      	b.n	90004482 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
90004436:	697b      	ldr	r3, [r7, #20]
90004438:	f003 030f 	and.w	r3, r3, #15
9000443c:	68ba      	ldr	r2, [r7, #8]
9000443e:	fa22 f303 	lsr.w	r3, r2, r3
90004442:	f003 0301 	and.w	r3, r3, #1
90004446:	2b00      	cmp	r3, #0
90004448:	d018      	beq.n	9000447c <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
9000444a:	697b      	ldr	r3, [r7, #20]
9000444c:	015a      	lsls	r2, r3, #5
9000444e:	68fb      	ldr	r3, [r7, #12]
90004450:	4413      	add	r3, r2
90004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004456:	681b      	ldr	r3, [r3, #0]
90004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
9000445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90004460:	d106      	bne.n	90004470 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
90004462:	697b      	ldr	r3, [r7, #20]
90004464:	b2db      	uxtb	r3, r3
90004466:	4619      	mov	r1, r3
90004468:	6878      	ldr	r0, [r7, #4]
9000446a:	f000 f836 	bl	900044da <HCD_HC_IN_IRQHandler>
9000446e:	e005      	b.n	9000447c <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
90004470:	697b      	ldr	r3, [r7, #20]
90004472:	b2db      	uxtb	r3, r3
90004474:	4619      	mov	r1, r3
90004476:	6878      	ldr	r0, [r7, #4]
90004478:	f000 fc40 	bl	90004cfc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
9000447c:	697b      	ldr	r3, [r7, #20]
9000447e:	3301      	adds	r3, #1
90004480:	617b      	str	r3, [r7, #20]
90004482:	687b      	ldr	r3, [r7, #4]
90004484:	689b      	ldr	r3, [r3, #8]
90004486:	697a      	ldr	r2, [r7, #20]
90004488:	429a      	cmp	r2, r3
9000448a:	d3d4      	bcc.n	90004436 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
9000448c:	687b      	ldr	r3, [r7, #4]
9000448e:	681b      	ldr	r3, [r3, #0]
90004490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90004494:	615a      	str	r2, [r3, #20]
90004496:	e000      	b.n	9000449a <HAL_HCD_IRQHandler+0x218>
      return;
90004498:	bf00      	nop
    }
  }
}
9000449a:	3718      	adds	r7, #24
9000449c:	46bd      	mov	sp, r7
9000449e:	bd80      	pop	{r7, pc}

900044a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
900044a0:	b580      	push	{r7, lr}
900044a2:	b082      	sub	sp, #8
900044a4:	af00      	add	r7, sp, #0
900044a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
900044a8:	687b      	ldr	r3, [r7, #4]
900044aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
900044ae:	2b01      	cmp	r3, #1
900044b0:	d101      	bne.n	900044b6 <HAL_HCD_Stop+0x16>
900044b2:	2302      	movs	r3, #2
900044b4:	e00d      	b.n	900044d2 <HAL_HCD_Stop+0x32>
900044b6:	687b      	ldr	r3, [r7, #4]
900044b8:	2201      	movs	r2, #1
900044ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
900044be:	687b      	ldr	r3, [r7, #4]
900044c0:	681b      	ldr	r3, [r3, #0]
900044c2:	4618      	mov	r0, r3
900044c4:	f005 fc54 	bl	90009d70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
900044c8:	687b      	ldr	r3, [r7, #4]
900044ca:	2200      	movs	r2, #0
900044cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
900044d0:	2300      	movs	r3, #0
}
900044d2:	4618      	mov	r0, r3
900044d4:	3708      	adds	r7, #8
900044d6:	46bd      	mov	sp, r7
900044d8:	bd80      	pop	{r7, pc}

900044da <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
900044da:	b580      	push	{r7, lr}
900044dc:	b086      	sub	sp, #24
900044de:	af00      	add	r7, sp, #0
900044e0:	6078      	str	r0, [r7, #4]
900044e2:	460b      	mov	r3, r1
900044e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
900044e6:	687b      	ldr	r3, [r7, #4]
900044e8:	681b      	ldr	r3, [r3, #0]
900044ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
900044ec:	697b      	ldr	r3, [r7, #20]
900044ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
900044f0:	687b      	ldr	r3, [r7, #4]
900044f2:	681b      	ldr	r3, [r3, #0]
900044f4:	78fa      	ldrb	r2, [r7, #3]
900044f6:	4611      	mov	r1, r2
900044f8:	4618      	mov	r0, r3
900044fa:	f005 fac0 	bl	90009a7e <USB_ReadChInterrupts>
900044fe:	4603      	mov	r3, r0
90004500:	f003 0304 	and.w	r3, r3, #4
90004504:	2b04      	cmp	r3, #4
90004506:	d119      	bne.n	9000453c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004508:	78fb      	ldrb	r3, [r7, #3]
9000450a:	015a      	lsls	r2, r3, #5
9000450c:	693b      	ldr	r3, [r7, #16]
9000450e:	4413      	add	r3, r2
90004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004514:	461a      	mov	r2, r3
90004516:	2304      	movs	r3, #4
90004518:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
9000451a:	78fb      	ldrb	r3, [r7, #3]
9000451c:	687a      	ldr	r2, [r7, #4]
9000451e:	212c      	movs	r1, #44	; 0x2c
90004520:	fb01 f303 	mul.w	r3, r1, r3
90004524:	4413      	add	r3, r2
90004526:	3361      	adds	r3, #97	; 0x61
90004528:	2207      	movs	r2, #7
9000452a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000452c:	687b      	ldr	r3, [r7, #4]
9000452e:	681b      	ldr	r3, [r3, #0]
90004530:	78fa      	ldrb	r2, [r7, #3]
90004532:	4611      	mov	r1, r2
90004534:	4618      	mov	r0, r3
90004536:	f005 fb1f 	bl	90009b78 <USB_HC_Halt>
9000453a:	e09a      	b.n	90004672 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
9000453c:	687b      	ldr	r3, [r7, #4]
9000453e:	681b      	ldr	r3, [r3, #0]
90004540:	78fa      	ldrb	r2, [r7, #3]
90004542:	4611      	mov	r1, r2
90004544:	4618      	mov	r0, r3
90004546:	f005 fa9a 	bl	90009a7e <USB_ReadChInterrupts>
9000454a:	4603      	mov	r3, r0
9000454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90004554:	d11a      	bne.n	9000458c <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
90004556:	78fb      	ldrb	r3, [r7, #3]
90004558:	015a      	lsls	r2, r3, #5
9000455a:	693b      	ldr	r3, [r7, #16]
9000455c:	4413      	add	r3, r2
9000455e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004562:	461a      	mov	r2, r3
90004564:	f44f 7380 	mov.w	r3, #256	; 0x100
90004568:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
9000456a:	78fb      	ldrb	r3, [r7, #3]
9000456c:	687a      	ldr	r2, [r7, #4]
9000456e:	212c      	movs	r1, #44	; 0x2c
90004570:	fb01 f303 	mul.w	r3, r1, r3
90004574:	4413      	add	r3, r2
90004576:	3361      	adds	r3, #97	; 0x61
90004578:	2208      	movs	r2, #8
9000457a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000457c:	687b      	ldr	r3, [r7, #4]
9000457e:	681b      	ldr	r3, [r3, #0]
90004580:	78fa      	ldrb	r2, [r7, #3]
90004582:	4611      	mov	r1, r2
90004584:	4618      	mov	r0, r3
90004586:	f005 faf7 	bl	90009b78 <USB_HC_Halt>
9000458a:	e072      	b.n	90004672 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
9000458c:	687b      	ldr	r3, [r7, #4]
9000458e:	681b      	ldr	r3, [r3, #0]
90004590:	78fa      	ldrb	r2, [r7, #3]
90004592:	4611      	mov	r1, r2
90004594:	4618      	mov	r0, r3
90004596:	f005 fa72 	bl	90009a7e <USB_ReadChInterrupts>
9000459a:	4603      	mov	r3, r0
9000459c:	f003 0308 	and.w	r3, r3, #8
900045a0:	2b08      	cmp	r3, #8
900045a2:	d119      	bne.n	900045d8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
900045a4:	78fb      	ldrb	r3, [r7, #3]
900045a6:	015a      	lsls	r2, r3, #5
900045a8:	693b      	ldr	r3, [r7, #16]
900045aa:	4413      	add	r3, r2
900045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900045b0:	461a      	mov	r2, r3
900045b2:	2308      	movs	r3, #8
900045b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
900045b6:	78fb      	ldrb	r3, [r7, #3]
900045b8:	687a      	ldr	r2, [r7, #4]
900045ba:	212c      	movs	r1, #44	; 0x2c
900045bc:	fb01 f303 	mul.w	r3, r1, r3
900045c0:	4413      	add	r3, r2
900045c2:	3361      	adds	r3, #97	; 0x61
900045c4:	2206      	movs	r2, #6
900045c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
900045c8:	687b      	ldr	r3, [r7, #4]
900045ca:	681b      	ldr	r3, [r3, #0]
900045cc:	78fa      	ldrb	r2, [r7, #3]
900045ce:	4611      	mov	r1, r2
900045d0:	4618      	mov	r0, r3
900045d2:	f005 fad1 	bl	90009b78 <USB_HC_Halt>
900045d6:	e04c      	b.n	90004672 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900045d8:	687b      	ldr	r3, [r7, #4]
900045da:	681b      	ldr	r3, [r3, #0]
900045dc:	78fa      	ldrb	r2, [r7, #3]
900045de:	4611      	mov	r1, r2
900045e0:	4618      	mov	r0, r3
900045e2:	f005 fa4c 	bl	90009a7e <USB_ReadChInterrupts>
900045e6:	4603      	mov	r3, r0
900045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900045ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900045f0:	d11a      	bne.n	90004628 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
900045f2:	78fb      	ldrb	r3, [r7, #3]
900045f4:	015a      	lsls	r2, r3, #5
900045f6:	693b      	ldr	r3, [r7, #16]
900045f8:	4413      	add	r3, r2
900045fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900045fe:	461a      	mov	r2, r3
90004600:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004604:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
90004606:	78fb      	ldrb	r3, [r7, #3]
90004608:	687a      	ldr	r2, [r7, #4]
9000460a:	212c      	movs	r1, #44	; 0x2c
9000460c:	fb01 f303 	mul.w	r3, r1, r3
90004610:	4413      	add	r3, r2
90004612:	3361      	adds	r3, #97	; 0x61
90004614:	2209      	movs	r2, #9
90004616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004618:	687b      	ldr	r3, [r7, #4]
9000461a:	681b      	ldr	r3, [r3, #0]
9000461c:	78fa      	ldrb	r2, [r7, #3]
9000461e:	4611      	mov	r1, r2
90004620:	4618      	mov	r0, r3
90004622:	f005 faa9 	bl	90009b78 <USB_HC_Halt>
90004626:	e024      	b.n	90004672 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90004628:	687b      	ldr	r3, [r7, #4]
9000462a:	681b      	ldr	r3, [r3, #0]
9000462c:	78fa      	ldrb	r2, [r7, #3]
9000462e:	4611      	mov	r1, r2
90004630:	4618      	mov	r0, r3
90004632:	f005 fa24 	bl	90009a7e <USB_ReadChInterrupts>
90004636:	4603      	mov	r3, r0
90004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000463c:	2b80      	cmp	r3, #128	; 0x80
9000463e:	d118      	bne.n	90004672 <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
90004640:	78fb      	ldrb	r3, [r7, #3]
90004642:	015a      	lsls	r2, r3, #5
90004644:	693b      	ldr	r3, [r7, #16]
90004646:	4413      	add	r3, r2
90004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000464c:	461a      	mov	r2, r3
9000464e:	2380      	movs	r3, #128	; 0x80
90004650:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004652:	78fb      	ldrb	r3, [r7, #3]
90004654:	687a      	ldr	r2, [r7, #4]
90004656:	212c      	movs	r1, #44	; 0x2c
90004658:	fb01 f303 	mul.w	r3, r1, r3
9000465c:	4413      	add	r3, r2
9000465e:	3361      	adds	r3, #97	; 0x61
90004660:	2207      	movs	r2, #7
90004662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004664:	687b      	ldr	r3, [r7, #4]
90004666:	681b      	ldr	r3, [r3, #0]
90004668:	78fa      	ldrb	r2, [r7, #3]
9000466a:	4611      	mov	r1, r2
9000466c:	4618      	mov	r0, r3
9000466e:	f005 fa83 	bl	90009b78 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004672:	687b      	ldr	r3, [r7, #4]
90004674:	681b      	ldr	r3, [r3, #0]
90004676:	78fa      	ldrb	r2, [r7, #3]
90004678:	4611      	mov	r1, r2
9000467a:	4618      	mov	r0, r3
9000467c:	f005 f9ff 	bl	90009a7e <USB_ReadChInterrupts>
90004680:	4603      	mov	r3, r0
90004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000468a:	d111      	bne.n	900046b0 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
9000468c:	687b      	ldr	r3, [r7, #4]
9000468e:	681b      	ldr	r3, [r3, #0]
90004690:	78fa      	ldrb	r2, [r7, #3]
90004692:	4611      	mov	r1, r2
90004694:	4618      	mov	r0, r3
90004696:	f005 fa6f 	bl	90009b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
9000469a:	78fb      	ldrb	r3, [r7, #3]
9000469c:	015a      	lsls	r2, r3, #5
9000469e:	693b      	ldr	r3, [r7, #16]
900046a0:	4413      	add	r3, r2
900046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900046a6:	461a      	mov	r2, r3
900046a8:	f44f 7300 	mov.w	r3, #512	; 0x200
900046ac:	6093      	str	r3, [r2, #8]
900046ae:	e322      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
900046b0:	687b      	ldr	r3, [r7, #4]
900046b2:	681b      	ldr	r3, [r3, #0]
900046b4:	78fa      	ldrb	r2, [r7, #3]
900046b6:	4611      	mov	r1, r2
900046b8:	4618      	mov	r0, r3
900046ba:	f005 f9e0 	bl	90009a7e <USB_ReadChInterrupts>
900046be:	4603      	mov	r3, r0
900046c0:	f003 0301 	and.w	r3, r3, #1
900046c4:	2b01      	cmp	r3, #1
900046c6:	f040 80f0 	bne.w	900048aa <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900046ca:	78fb      	ldrb	r3, [r7, #3]
900046cc:	015a      	lsls	r2, r3, #5
900046ce:	693b      	ldr	r3, [r7, #16]
900046d0:	4413      	add	r3, r2
900046d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900046d6:	461a      	mov	r2, r3
900046d8:	2320      	movs	r3, #32
900046da:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
900046dc:	687b      	ldr	r3, [r7, #4]
900046de:	68db      	ldr	r3, [r3, #12]
900046e0:	2b00      	cmp	r3, #0
900046e2:	d019      	beq.n	90004718 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
900046e4:	78fb      	ldrb	r3, [r7, #3]
900046e6:	687a      	ldr	r2, [r7, #4]
900046e8:	212c      	movs	r1, #44	; 0x2c
900046ea:	fb01 f303 	mul.w	r3, r1, r3
900046ee:	4413      	add	r3, r2
900046f0:	3348      	adds	r3, #72	; 0x48
900046f2:	6819      	ldr	r1, [r3, #0]
900046f4:	78fb      	ldrb	r3, [r7, #3]
900046f6:	015a      	lsls	r2, r3, #5
900046f8:	693b      	ldr	r3, [r7, #16]
900046fa:	4413      	add	r3, r2
900046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004700:	691b      	ldr	r3, [r3, #16]
90004702:	f3c3 0212 	ubfx	r2, r3, #0, #19
90004706:	78fb      	ldrb	r3, [r7, #3]
90004708:	1a8a      	subs	r2, r1, r2
9000470a:	6879      	ldr	r1, [r7, #4]
9000470c:	202c      	movs	r0, #44	; 0x2c
9000470e:	fb00 f303 	mul.w	r3, r0, r3
90004712:	440b      	add	r3, r1
90004714:	3350      	adds	r3, #80	; 0x50
90004716:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
90004718:	78fb      	ldrb	r3, [r7, #3]
9000471a:	687a      	ldr	r2, [r7, #4]
9000471c:	212c      	movs	r1, #44	; 0x2c
9000471e:	fb01 f303 	mul.w	r3, r1, r3
90004722:	4413      	add	r3, r2
90004724:	3361      	adds	r3, #97	; 0x61
90004726:	2201      	movs	r2, #1
90004728:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
9000472a:	78fb      	ldrb	r3, [r7, #3]
9000472c:	687a      	ldr	r2, [r7, #4]
9000472e:	212c      	movs	r1, #44	; 0x2c
90004730:	fb01 f303 	mul.w	r3, r1, r3
90004734:	4413      	add	r3, r2
90004736:	335c      	adds	r3, #92	; 0x5c
90004738:	2200      	movs	r2, #0
9000473a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
9000473c:	78fb      	ldrb	r3, [r7, #3]
9000473e:	015a      	lsls	r2, r3, #5
90004740:	693b      	ldr	r3, [r7, #16]
90004742:	4413      	add	r3, r2
90004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004748:	461a      	mov	r2, r3
9000474a:	2301      	movs	r3, #1
9000474c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
9000474e:	78fb      	ldrb	r3, [r7, #3]
90004750:	687a      	ldr	r2, [r7, #4]
90004752:	212c      	movs	r1, #44	; 0x2c
90004754:	fb01 f303 	mul.w	r3, r1, r3
90004758:	4413      	add	r3, r2
9000475a:	333f      	adds	r3, #63	; 0x3f
9000475c:	781b      	ldrb	r3, [r3, #0]
9000475e:	2b00      	cmp	r3, #0
90004760:	d009      	beq.n	90004776 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004762:	78fb      	ldrb	r3, [r7, #3]
90004764:	687a      	ldr	r2, [r7, #4]
90004766:	212c      	movs	r1, #44	; 0x2c
90004768:	fb01 f303 	mul.w	r3, r1, r3
9000476c:	4413      	add	r3, r2
9000476e:	333f      	adds	r3, #63	; 0x3f
90004770:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004772:	2b02      	cmp	r3, #2
90004774:	d110      	bne.n	90004798 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004776:	687b      	ldr	r3, [r7, #4]
90004778:	681b      	ldr	r3, [r3, #0]
9000477a:	78fa      	ldrb	r2, [r7, #3]
9000477c:	4611      	mov	r1, r2
9000477e:	4618      	mov	r0, r3
90004780:	f005 f9fa 	bl	90009b78 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004784:	78fb      	ldrb	r3, [r7, #3]
90004786:	015a      	lsls	r2, r3, #5
90004788:	693b      	ldr	r3, [r7, #16]
9000478a:	4413      	add	r3, r2
9000478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004790:	461a      	mov	r2, r3
90004792:	2310      	movs	r3, #16
90004794:	6093      	str	r3, [r2, #8]
90004796:	e039      	b.n	9000480c <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
90004798:	78fb      	ldrb	r3, [r7, #3]
9000479a:	687a      	ldr	r2, [r7, #4]
9000479c:	212c      	movs	r1, #44	; 0x2c
9000479e:	fb01 f303 	mul.w	r3, r1, r3
900047a2:	4413      	add	r3, r2
900047a4:	333f      	adds	r3, #63	; 0x3f
900047a6:	781b      	ldrb	r3, [r3, #0]
900047a8:	2b03      	cmp	r3, #3
900047aa:	d009      	beq.n	900047c0 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
900047ac:	78fb      	ldrb	r3, [r7, #3]
900047ae:	687a      	ldr	r2, [r7, #4]
900047b0:	212c      	movs	r1, #44	; 0x2c
900047b2:	fb01 f303 	mul.w	r3, r1, r3
900047b6:	4413      	add	r3, r2
900047b8:	333f      	adds	r3, #63	; 0x3f
900047ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
900047bc:	2b01      	cmp	r3, #1
900047be:	d125      	bne.n	9000480c <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
900047c0:	78fb      	ldrb	r3, [r7, #3]
900047c2:	015a      	lsls	r2, r3, #5
900047c4:	693b      	ldr	r3, [r7, #16]
900047c6:	4413      	add	r3, r2
900047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900047cc:	681b      	ldr	r3, [r3, #0]
900047ce:	78fa      	ldrb	r2, [r7, #3]
900047d0:	0151      	lsls	r1, r2, #5
900047d2:	693a      	ldr	r2, [r7, #16]
900047d4:	440a      	add	r2, r1
900047d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
900047da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
900047de:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
900047e0:	78fb      	ldrb	r3, [r7, #3]
900047e2:	687a      	ldr	r2, [r7, #4]
900047e4:	212c      	movs	r1, #44	; 0x2c
900047e6:	fb01 f303 	mul.w	r3, r1, r3
900047ea:	4413      	add	r3, r2
900047ec:	3360      	adds	r3, #96	; 0x60
900047ee:	2201      	movs	r2, #1
900047f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900047f2:	78fb      	ldrb	r3, [r7, #3]
900047f4:	687a      	ldr	r2, [r7, #4]
900047f6:	212c      	movs	r1, #44	; 0x2c
900047f8:	fb01 f303 	mul.w	r3, r1, r3
900047fc:	4413      	add	r3, r2
900047fe:	3360      	adds	r3, #96	; 0x60
90004800:	781a      	ldrb	r2, [r3, #0]
90004802:	78fb      	ldrb	r3, [r7, #3]
90004804:	4619      	mov	r1, r3
90004806:	6878      	ldr	r0, [r7, #4]
90004808:	f7fc f932 	bl	90000a70 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
9000480c:	687b      	ldr	r3, [r7, #4]
9000480e:	68db      	ldr	r3, [r3, #12]
90004810:	2b01      	cmp	r3, #1
90004812:	d135      	bne.n	90004880 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
90004814:	78fb      	ldrb	r3, [r7, #3]
90004816:	687a      	ldr	r2, [r7, #4]
90004818:	212c      	movs	r1, #44	; 0x2c
9000481a:	fb01 f303 	mul.w	r3, r1, r3
9000481e:	4413      	add	r3, r2
90004820:	3350      	adds	r3, #80	; 0x50
90004822:	681b      	ldr	r3, [r3, #0]
90004824:	78fa      	ldrb	r2, [r7, #3]
90004826:	6879      	ldr	r1, [r7, #4]
90004828:	202c      	movs	r0, #44	; 0x2c
9000482a:	fb00 f202 	mul.w	r2, r0, r2
9000482e:	440a      	add	r2, r1
90004830:	3240      	adds	r2, #64	; 0x40
90004832:	8812      	ldrh	r2, [r2, #0]
90004834:	4413      	add	r3, r2
90004836:	3b01      	subs	r3, #1
90004838:	78fa      	ldrb	r2, [r7, #3]
9000483a:	6879      	ldr	r1, [r7, #4]
9000483c:	202c      	movs	r0, #44	; 0x2c
9000483e:	fb00 f202 	mul.w	r2, r0, r2
90004842:	440a      	add	r2, r1
90004844:	3240      	adds	r2, #64	; 0x40
90004846:	8812      	ldrh	r2, [r2, #0]
90004848:	fbb3 f3f2 	udiv	r3, r3, r2
9000484c:	f003 0301 	and.w	r3, r3, #1
90004850:	2b00      	cmp	r3, #0
90004852:	f000 8250 	beq.w	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
90004856:	78fb      	ldrb	r3, [r7, #3]
90004858:	687a      	ldr	r2, [r7, #4]
9000485a:	212c      	movs	r1, #44	; 0x2c
9000485c:	fb01 f303 	mul.w	r3, r1, r3
90004860:	4413      	add	r3, r2
90004862:	3354      	adds	r3, #84	; 0x54
90004864:	781a      	ldrb	r2, [r3, #0]
90004866:	78fb      	ldrb	r3, [r7, #3]
90004868:	f082 0201 	eor.w	r2, r2, #1
9000486c:	b2d0      	uxtb	r0, r2
9000486e:	687a      	ldr	r2, [r7, #4]
90004870:	212c      	movs	r1, #44	; 0x2c
90004872:	fb01 f303 	mul.w	r3, r1, r3
90004876:	4413      	add	r3, r2
90004878:	3354      	adds	r3, #84	; 0x54
9000487a:	4602      	mov	r2, r0
9000487c:	701a      	strb	r2, [r3, #0]
9000487e:	e23a      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
90004880:	78fb      	ldrb	r3, [r7, #3]
90004882:	687a      	ldr	r2, [r7, #4]
90004884:	212c      	movs	r1, #44	; 0x2c
90004886:	fb01 f303 	mul.w	r3, r1, r3
9000488a:	4413      	add	r3, r2
9000488c:	3354      	adds	r3, #84	; 0x54
9000488e:	781a      	ldrb	r2, [r3, #0]
90004890:	78fb      	ldrb	r3, [r7, #3]
90004892:	f082 0201 	eor.w	r2, r2, #1
90004896:	b2d0      	uxtb	r0, r2
90004898:	687a      	ldr	r2, [r7, #4]
9000489a:	212c      	movs	r1, #44	; 0x2c
9000489c:	fb01 f303 	mul.w	r3, r1, r3
900048a0:	4413      	add	r3, r2
900048a2:	3354      	adds	r3, #84	; 0x54
900048a4:	4602      	mov	r2, r0
900048a6:	701a      	strb	r2, [r3, #0]
900048a8:	e225      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
900048aa:	687b      	ldr	r3, [r7, #4]
900048ac:	681b      	ldr	r3, [r3, #0]
900048ae:	78fa      	ldrb	r2, [r7, #3]
900048b0:	4611      	mov	r1, r2
900048b2:	4618      	mov	r0, r3
900048b4:	f005 f8e3 	bl	90009a7e <USB_ReadChInterrupts>
900048b8:	4603      	mov	r3, r0
900048ba:	f003 0320 	and.w	r3, r3, #32
900048be:	2b20      	cmp	r3, #32
900048c0:	d109      	bne.n	900048d6 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
900048c2:	78fb      	ldrb	r3, [r7, #3]
900048c4:	015a      	lsls	r2, r3, #5
900048c6:	693b      	ldr	r3, [r7, #16]
900048c8:	4413      	add	r3, r2
900048ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900048ce:	461a      	mov	r2, r3
900048d0:	2320      	movs	r3, #32
900048d2:	6093      	str	r3, [r2, #8]
900048d4:	e20f      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
900048d6:	687b      	ldr	r3, [r7, #4]
900048d8:	681b      	ldr	r3, [r3, #0]
900048da:	78fa      	ldrb	r2, [r7, #3]
900048dc:	4611      	mov	r1, r2
900048de:	4618      	mov	r0, r3
900048e0:	f005 f8cd 	bl	90009a7e <USB_ReadChInterrupts>
900048e4:	4603      	mov	r3, r0
900048e6:	f003 0302 	and.w	r3, r3, #2
900048ea:	2b02      	cmp	r3, #2
900048ec:	f040 8168 	bne.w	90004bc0 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
900048f0:	78fb      	ldrb	r3, [r7, #3]
900048f2:	015a      	lsls	r2, r3, #5
900048f4:	693b      	ldr	r3, [r7, #16]
900048f6:	4413      	add	r3, r2
900048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900048fc:	461a      	mov	r2, r3
900048fe:	2302      	movs	r3, #2
90004900:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
90004902:	78fb      	ldrb	r3, [r7, #3]
90004904:	687a      	ldr	r2, [r7, #4]
90004906:	212c      	movs	r1, #44	; 0x2c
90004908:	fb01 f303 	mul.w	r3, r1, r3
9000490c:	4413      	add	r3, r2
9000490e:	3361      	adds	r3, #97	; 0x61
90004910:	781b      	ldrb	r3, [r3, #0]
90004912:	2b01      	cmp	r3, #1
90004914:	d112      	bne.n	9000493c <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004916:	78fb      	ldrb	r3, [r7, #3]
90004918:	687a      	ldr	r2, [r7, #4]
9000491a:	212c      	movs	r1, #44	; 0x2c
9000491c:	fb01 f303 	mul.w	r3, r1, r3
90004920:	4413      	add	r3, r2
90004922:	3361      	adds	r3, #97	; 0x61
90004924:	2202      	movs	r2, #2
90004926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
90004928:	78fb      	ldrb	r3, [r7, #3]
9000492a:	687a      	ldr	r2, [r7, #4]
9000492c:	212c      	movs	r1, #44	; 0x2c
9000492e:	fb01 f303 	mul.w	r3, r1, r3
90004932:	4413      	add	r3, r2
90004934:	3360      	adds	r3, #96	; 0x60
90004936:	2201      	movs	r2, #1
90004938:	701a      	strb	r2, [r3, #0]
9000493a:	e133      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
9000493c:	78fb      	ldrb	r3, [r7, #3]
9000493e:	687a      	ldr	r2, [r7, #4]
90004940:	212c      	movs	r1, #44	; 0x2c
90004942:	fb01 f303 	mul.w	r3, r1, r3
90004946:	4413      	add	r3, r2
90004948:	3361      	adds	r3, #97	; 0x61
9000494a:	781b      	ldrb	r3, [r3, #0]
9000494c:	2b06      	cmp	r3, #6
9000494e:	d112      	bne.n	90004976 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004950:	78fb      	ldrb	r3, [r7, #3]
90004952:	687a      	ldr	r2, [r7, #4]
90004954:	212c      	movs	r1, #44	; 0x2c
90004956:	fb01 f303 	mul.w	r3, r1, r3
9000495a:	4413      	add	r3, r2
9000495c:	3361      	adds	r3, #97	; 0x61
9000495e:	2202      	movs	r2, #2
90004960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
90004962:	78fb      	ldrb	r3, [r7, #3]
90004964:	687a      	ldr	r2, [r7, #4]
90004966:	212c      	movs	r1, #44	; 0x2c
90004968:	fb01 f303 	mul.w	r3, r1, r3
9000496c:	4413      	add	r3, r2
9000496e:	3360      	adds	r3, #96	; 0x60
90004970:	2205      	movs	r2, #5
90004972:	701a      	strb	r2, [r3, #0]
90004974:	e116      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90004976:	78fb      	ldrb	r3, [r7, #3]
90004978:	687a      	ldr	r2, [r7, #4]
9000497a:	212c      	movs	r1, #44	; 0x2c
9000497c:	fb01 f303 	mul.w	r3, r1, r3
90004980:	4413      	add	r3, r2
90004982:	3361      	adds	r3, #97	; 0x61
90004984:	781b      	ldrb	r3, [r3, #0]
90004986:	2b07      	cmp	r3, #7
90004988:	d009      	beq.n	9000499e <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
9000498a:	78fb      	ldrb	r3, [r7, #3]
9000498c:	687a      	ldr	r2, [r7, #4]
9000498e:	212c      	movs	r1, #44	; 0x2c
90004990:	fb01 f303 	mul.w	r3, r1, r3
90004994:	4413      	add	r3, r2
90004996:	3361      	adds	r3, #97	; 0x61
90004998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
9000499a:	2b09      	cmp	r3, #9
9000499c:	d158      	bne.n	90004a50 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000499e:	78fb      	ldrb	r3, [r7, #3]
900049a0:	687a      	ldr	r2, [r7, #4]
900049a2:	212c      	movs	r1, #44	; 0x2c
900049a4:	fb01 f303 	mul.w	r3, r1, r3
900049a8:	4413      	add	r3, r2
900049aa:	3361      	adds	r3, #97	; 0x61
900049ac:	2202      	movs	r2, #2
900049ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
900049b0:	78fb      	ldrb	r3, [r7, #3]
900049b2:	6879      	ldr	r1, [r7, #4]
900049b4:	222c      	movs	r2, #44	; 0x2c
900049b6:	fb03 f202 	mul.w	r2, r3, r2
900049ba:	440a      	add	r2, r1
900049bc:	325c      	adds	r2, #92	; 0x5c
900049be:	6812      	ldr	r2, [r2, #0]
900049c0:	3201      	adds	r2, #1
900049c2:	6879      	ldr	r1, [r7, #4]
900049c4:	202c      	movs	r0, #44	; 0x2c
900049c6:	fb00 f303 	mul.w	r3, r0, r3
900049ca:	440b      	add	r3, r1
900049cc:	335c      	adds	r3, #92	; 0x5c
900049ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900049d0:	78fb      	ldrb	r3, [r7, #3]
900049d2:	687a      	ldr	r2, [r7, #4]
900049d4:	212c      	movs	r1, #44	; 0x2c
900049d6:	fb01 f303 	mul.w	r3, r1, r3
900049da:	4413      	add	r3, r2
900049dc:	335c      	adds	r3, #92	; 0x5c
900049de:	681b      	ldr	r3, [r3, #0]
900049e0:	2b02      	cmp	r3, #2
900049e2:	d912      	bls.n	90004a0a <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900049e4:	78fb      	ldrb	r3, [r7, #3]
900049e6:	687a      	ldr	r2, [r7, #4]
900049e8:	212c      	movs	r1, #44	; 0x2c
900049ea:	fb01 f303 	mul.w	r3, r1, r3
900049ee:	4413      	add	r3, r2
900049f0:	335c      	adds	r3, #92	; 0x5c
900049f2:	2200      	movs	r2, #0
900049f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900049f6:	78fb      	ldrb	r3, [r7, #3]
900049f8:	687a      	ldr	r2, [r7, #4]
900049fa:	212c      	movs	r1, #44	; 0x2c
900049fc:	fb01 f303 	mul.w	r3, r1, r3
90004a00:	4413      	add	r3, r2
90004a02:	3360      	adds	r3, #96	; 0x60
90004a04:	2204      	movs	r2, #4
90004a06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004a08:	e0cc      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004a0a:	78fb      	ldrb	r3, [r7, #3]
90004a0c:	687a      	ldr	r2, [r7, #4]
90004a0e:	212c      	movs	r1, #44	; 0x2c
90004a10:	fb01 f303 	mul.w	r3, r1, r3
90004a14:	4413      	add	r3, r2
90004a16:	3360      	adds	r3, #96	; 0x60
90004a18:	2202      	movs	r2, #2
90004a1a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004a1c:	78fb      	ldrb	r3, [r7, #3]
90004a1e:	015a      	lsls	r2, r3, #5
90004a20:	693b      	ldr	r3, [r7, #16]
90004a22:	4413      	add	r3, r2
90004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004a28:	681b      	ldr	r3, [r3, #0]
90004a2a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004a2c:	68fb      	ldr	r3, [r7, #12]
90004a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
90004a32:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004a34:	68fb      	ldr	r3, [r7, #12]
90004a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90004a3a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004a3c:	78fb      	ldrb	r3, [r7, #3]
90004a3e:	015a      	lsls	r2, r3, #5
90004a40:	693b      	ldr	r3, [r7, #16]
90004a42:	4413      	add	r3, r2
90004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004a48:	461a      	mov	r2, r3
90004a4a:	68fb      	ldr	r3, [r7, #12]
90004a4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90004a4e:	e0a9      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
90004a50:	78fb      	ldrb	r3, [r7, #3]
90004a52:	687a      	ldr	r2, [r7, #4]
90004a54:	212c      	movs	r1, #44	; 0x2c
90004a56:	fb01 f303 	mul.w	r3, r1, r3
90004a5a:	4413      	add	r3, r2
90004a5c:	3361      	adds	r3, #97	; 0x61
90004a5e:	781b      	ldrb	r3, [r3, #0]
90004a60:	2b05      	cmp	r3, #5
90004a62:	d109      	bne.n	90004a78 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a64:	78fb      	ldrb	r3, [r7, #3]
90004a66:	687a      	ldr	r2, [r7, #4]
90004a68:	212c      	movs	r1, #44	; 0x2c
90004a6a:	fb01 f303 	mul.w	r3, r1, r3
90004a6e:	4413      	add	r3, r2
90004a70:	3361      	adds	r3, #97	; 0x61
90004a72:	2202      	movs	r2, #2
90004a74:	701a      	strb	r2, [r3, #0]
90004a76:	e095      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
90004a78:	78fb      	ldrb	r3, [r7, #3]
90004a7a:	687a      	ldr	r2, [r7, #4]
90004a7c:	212c      	movs	r1, #44	; 0x2c
90004a7e:	fb01 f303 	mul.w	r3, r1, r3
90004a82:	4413      	add	r3, r2
90004a84:	3361      	adds	r3, #97	; 0x61
90004a86:	781b      	ldrb	r3, [r3, #0]
90004a88:	2b03      	cmp	r3, #3
90004a8a:	d109      	bne.n	90004aa0 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004a8c:	78fb      	ldrb	r3, [r7, #3]
90004a8e:	687a      	ldr	r2, [r7, #4]
90004a90:	212c      	movs	r1, #44	; 0x2c
90004a92:	fb01 f303 	mul.w	r3, r1, r3
90004a96:	4413      	add	r3, r2
90004a98:	3361      	adds	r3, #97	; 0x61
90004a9a:	2202      	movs	r2, #2
90004a9c:	701a      	strb	r2, [r3, #0]
90004a9e:	e081      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
90004aa0:	78fb      	ldrb	r3, [r7, #3]
90004aa2:	687a      	ldr	r2, [r7, #4]
90004aa4:	212c      	movs	r1, #44	; 0x2c
90004aa6:	fb01 f303 	mul.w	r3, r1, r3
90004aaa:	4413      	add	r3, r2
90004aac:	3361      	adds	r3, #97	; 0x61
90004aae:	781b      	ldrb	r3, [r3, #0]
90004ab0:	2b04      	cmp	r3, #4
90004ab2:	d13f      	bne.n	90004b34 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004ab4:	78fb      	ldrb	r3, [r7, #3]
90004ab6:	687a      	ldr	r2, [r7, #4]
90004ab8:	212c      	movs	r1, #44	; 0x2c
90004aba:	fb01 f303 	mul.w	r3, r1, r3
90004abe:	4413      	add	r3, r2
90004ac0:	3361      	adds	r3, #97	; 0x61
90004ac2:	2202      	movs	r2, #2
90004ac4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004ac6:	78fb      	ldrb	r3, [r7, #3]
90004ac8:	687a      	ldr	r2, [r7, #4]
90004aca:	212c      	movs	r1, #44	; 0x2c
90004acc:	fb01 f303 	mul.w	r3, r1, r3
90004ad0:	4413      	add	r3, r2
90004ad2:	3360      	adds	r3, #96	; 0x60
90004ad4:	2202      	movs	r2, #2
90004ad6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ad8:	78fb      	ldrb	r3, [r7, #3]
90004ada:	687a      	ldr	r2, [r7, #4]
90004adc:	212c      	movs	r1, #44	; 0x2c
90004ade:	fb01 f303 	mul.w	r3, r1, r3
90004ae2:	4413      	add	r3, r2
90004ae4:	333f      	adds	r3, #63	; 0x3f
90004ae6:	781b      	ldrb	r3, [r3, #0]
90004ae8:	2b00      	cmp	r3, #0
90004aea:	d009      	beq.n	90004b00 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004aec:	78fb      	ldrb	r3, [r7, #3]
90004aee:	687a      	ldr	r2, [r7, #4]
90004af0:	212c      	movs	r1, #44	; 0x2c
90004af2:	fb01 f303 	mul.w	r3, r1, r3
90004af6:	4413      	add	r3, r2
90004af8:	333f      	adds	r3, #63	; 0x3f
90004afa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004afc:	2b02      	cmp	r3, #2
90004afe:	d151      	bne.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90004b00:	78fb      	ldrb	r3, [r7, #3]
90004b02:	015a      	lsls	r2, r3, #5
90004b04:	693b      	ldr	r3, [r7, #16]
90004b06:	4413      	add	r3, r2
90004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004b0c:	681b      	ldr	r3, [r3, #0]
90004b0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90004b10:	68fb      	ldr	r3, [r7, #12]
90004b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
90004b16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90004b18:	68fb      	ldr	r3, [r7, #12]
90004b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90004b1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90004b20:	78fb      	ldrb	r3, [r7, #3]
90004b22:	015a      	lsls	r2, r3, #5
90004b24:	693b      	ldr	r3, [r7, #16]
90004b26:	4413      	add	r3, r2
90004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004b2c:	461a      	mov	r2, r3
90004b2e:	68fb      	ldr	r3, [r7, #12]
90004b30:	6013      	str	r3, [r2, #0]
90004b32:	e037      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
90004b34:	78fb      	ldrb	r3, [r7, #3]
90004b36:	687a      	ldr	r2, [r7, #4]
90004b38:	212c      	movs	r1, #44	; 0x2c
90004b3a:	fb01 f303 	mul.w	r3, r1, r3
90004b3e:	4413      	add	r3, r2
90004b40:	3361      	adds	r3, #97	; 0x61
90004b42:	781b      	ldrb	r3, [r3, #0]
90004b44:	2b08      	cmp	r3, #8
90004b46:	d122      	bne.n	90004b8e <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90004b48:	78fb      	ldrb	r3, [r7, #3]
90004b4a:	687a      	ldr	r2, [r7, #4]
90004b4c:	212c      	movs	r1, #44	; 0x2c
90004b4e:	fb01 f303 	mul.w	r3, r1, r3
90004b52:	4413      	add	r3, r2
90004b54:	3361      	adds	r3, #97	; 0x61
90004b56:	2202      	movs	r2, #2
90004b58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
90004b5a:	78fb      	ldrb	r3, [r7, #3]
90004b5c:	6879      	ldr	r1, [r7, #4]
90004b5e:	222c      	movs	r2, #44	; 0x2c
90004b60:	fb03 f202 	mul.w	r2, r3, r2
90004b64:	440a      	add	r2, r1
90004b66:	325c      	adds	r2, #92	; 0x5c
90004b68:	6812      	ldr	r2, [r2, #0]
90004b6a:	3201      	adds	r2, #1
90004b6c:	6879      	ldr	r1, [r7, #4]
90004b6e:	202c      	movs	r0, #44	; 0x2c
90004b70:	fb00 f303 	mul.w	r3, r0, r3
90004b74:	440b      	add	r3, r1
90004b76:	335c      	adds	r3, #92	; 0x5c
90004b78:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
90004b7a:	78fb      	ldrb	r3, [r7, #3]
90004b7c:	687a      	ldr	r2, [r7, #4]
90004b7e:	212c      	movs	r1, #44	; 0x2c
90004b80:	fb01 f303 	mul.w	r3, r1, r3
90004b84:	4413      	add	r3, r2
90004b86:	3360      	adds	r3, #96	; 0x60
90004b88:	2204      	movs	r2, #4
90004b8a:	701a      	strb	r2, [r3, #0]
90004b8c:	e00a      	b.n	90004ba4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
90004b8e:	78fb      	ldrb	r3, [r7, #3]
90004b90:	687a      	ldr	r2, [r7, #4]
90004b92:	212c      	movs	r1, #44	; 0x2c
90004b94:	fb01 f303 	mul.w	r3, r1, r3
90004b98:	4413      	add	r3, r2
90004b9a:	3361      	adds	r3, #97	; 0x61
90004b9c:	781b      	ldrb	r3, [r3, #0]
90004b9e:	2b02      	cmp	r3, #2
90004ba0:	f000 80a8 	beq.w	90004cf4 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
90004ba4:	78fb      	ldrb	r3, [r7, #3]
90004ba6:	687a      	ldr	r2, [r7, #4]
90004ba8:	212c      	movs	r1, #44	; 0x2c
90004baa:	fb01 f303 	mul.w	r3, r1, r3
90004bae:	4413      	add	r3, r2
90004bb0:	3360      	adds	r3, #96	; 0x60
90004bb2:	781a      	ldrb	r2, [r3, #0]
90004bb4:	78fb      	ldrb	r3, [r7, #3]
90004bb6:	4619      	mov	r1, r3
90004bb8:	6878      	ldr	r0, [r7, #4]
90004bba:	f7fb ff59 	bl	90000a70 <HAL_HCD_HC_NotifyURBChange_Callback>
90004bbe:	e09a      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004bc0:	687b      	ldr	r3, [r7, #4]
90004bc2:	681b      	ldr	r3, [r3, #0]
90004bc4:	78fa      	ldrb	r2, [r7, #3]
90004bc6:	4611      	mov	r1, r2
90004bc8:	4618      	mov	r0, r3
90004bca:	f004 ff58 	bl	90009a7e <USB_ReadChInterrupts>
90004bce:	4603      	mov	r3, r0
90004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004bd4:	2b40      	cmp	r3, #64	; 0x40
90004bd6:	d122      	bne.n	90004c1e <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004bd8:	78fb      	ldrb	r3, [r7, #3]
90004bda:	015a      	lsls	r2, r3, #5
90004bdc:	693b      	ldr	r3, [r7, #16]
90004bde:	4413      	add	r3, r2
90004be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004be4:	461a      	mov	r2, r3
90004be6:	2340      	movs	r3, #64	; 0x40
90004be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
90004bea:	78fb      	ldrb	r3, [r7, #3]
90004bec:	687a      	ldr	r2, [r7, #4]
90004bee:	212c      	movs	r1, #44	; 0x2c
90004bf0:	fb01 f303 	mul.w	r3, r1, r3
90004bf4:	4413      	add	r3, r2
90004bf6:	3361      	adds	r3, #97	; 0x61
90004bf8:	2205      	movs	r2, #5
90004bfa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004bfc:	78fb      	ldrb	r3, [r7, #3]
90004bfe:	687a      	ldr	r2, [r7, #4]
90004c00:	212c      	movs	r1, #44	; 0x2c
90004c02:	fb01 f303 	mul.w	r3, r1, r3
90004c06:	4413      	add	r3, r2
90004c08:	335c      	adds	r3, #92	; 0x5c
90004c0a:	2200      	movs	r2, #0
90004c0c:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c0e:	687b      	ldr	r3, [r7, #4]
90004c10:	681b      	ldr	r3, [r3, #0]
90004c12:	78fa      	ldrb	r2, [r7, #3]
90004c14:	4611      	mov	r1, r2
90004c16:	4618      	mov	r0, r3
90004c18:	f004 ffae 	bl	90009b78 <USB_HC_Halt>
90004c1c:	e06b      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004c1e:	687b      	ldr	r3, [r7, #4]
90004c20:	681b      	ldr	r3, [r3, #0]
90004c22:	78fa      	ldrb	r2, [r7, #3]
90004c24:	4611      	mov	r1, r2
90004c26:	4618      	mov	r0, r3
90004c28:	f004 ff29 	bl	90009a7e <USB_ReadChInterrupts>
90004c2c:	4603      	mov	r3, r0
90004c2e:	f003 0310 	and.w	r3, r3, #16
90004c32:	2b10      	cmp	r3, #16
90004c34:	d15f      	bne.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
90004c36:	78fb      	ldrb	r3, [r7, #3]
90004c38:	687a      	ldr	r2, [r7, #4]
90004c3a:	212c      	movs	r1, #44	; 0x2c
90004c3c:	fb01 f303 	mul.w	r3, r1, r3
90004c40:	4413      	add	r3, r2
90004c42:	333f      	adds	r3, #63	; 0x3f
90004c44:	781b      	ldrb	r3, [r3, #0]
90004c46:	2b03      	cmp	r3, #3
90004c48:	d119      	bne.n	90004c7e <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004c4a:	78fb      	ldrb	r3, [r7, #3]
90004c4c:	687a      	ldr	r2, [r7, #4]
90004c4e:	212c      	movs	r1, #44	; 0x2c
90004c50:	fb01 f303 	mul.w	r3, r1, r3
90004c54:	4413      	add	r3, r2
90004c56:	335c      	adds	r3, #92	; 0x5c
90004c58:	2200      	movs	r2, #0
90004c5a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
90004c5c:	78fb      	ldrb	r3, [r7, #3]
90004c5e:	687a      	ldr	r2, [r7, #4]
90004c60:	212c      	movs	r1, #44	; 0x2c
90004c62:	fb01 f303 	mul.w	r3, r1, r3
90004c66:	4413      	add	r3, r2
90004c68:	3361      	adds	r3, #97	; 0x61
90004c6a:	2204      	movs	r2, #4
90004c6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004c6e:	687b      	ldr	r3, [r7, #4]
90004c70:	681b      	ldr	r3, [r3, #0]
90004c72:	78fa      	ldrb	r2, [r7, #3]
90004c74:	4611      	mov	r1, r2
90004c76:	4618      	mov	r0, r3
90004c78:	f004 ff7e 	bl	90009b78 <USB_HC_Halt>
90004c7c:	e030      	b.n	90004ce0 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004c7e:	78fb      	ldrb	r3, [r7, #3]
90004c80:	687a      	ldr	r2, [r7, #4]
90004c82:	212c      	movs	r1, #44	; 0x2c
90004c84:	fb01 f303 	mul.w	r3, r1, r3
90004c88:	4413      	add	r3, r2
90004c8a:	333f      	adds	r3, #63	; 0x3f
90004c8c:	781b      	ldrb	r3, [r3, #0]
90004c8e:	2b00      	cmp	r3, #0
90004c90:	d009      	beq.n	90004ca6 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
90004c92:	78fb      	ldrb	r3, [r7, #3]
90004c94:	687a      	ldr	r2, [r7, #4]
90004c96:	212c      	movs	r1, #44	; 0x2c
90004c98:	fb01 f303 	mul.w	r3, r1, r3
90004c9c:	4413      	add	r3, r2
90004c9e:	333f      	adds	r3, #63	; 0x3f
90004ca0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
90004ca2:	2b02      	cmp	r3, #2
90004ca4:	d11c      	bne.n	90004ce0 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
90004ca6:	78fb      	ldrb	r3, [r7, #3]
90004ca8:	687a      	ldr	r2, [r7, #4]
90004caa:	212c      	movs	r1, #44	; 0x2c
90004cac:	fb01 f303 	mul.w	r3, r1, r3
90004cb0:	4413      	add	r3, r2
90004cb2:	335c      	adds	r3, #92	; 0x5c
90004cb4:	2200      	movs	r2, #0
90004cb6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
90004cb8:	687b      	ldr	r3, [r7, #4]
90004cba:	68db      	ldr	r3, [r3, #12]
90004cbc:	2b00      	cmp	r3, #0
90004cbe:	d10f      	bne.n	90004ce0 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
90004cc0:	78fb      	ldrb	r3, [r7, #3]
90004cc2:	687a      	ldr	r2, [r7, #4]
90004cc4:	212c      	movs	r1, #44	; 0x2c
90004cc6:	fb01 f303 	mul.w	r3, r1, r3
90004cca:	4413      	add	r3, r2
90004ccc:	3361      	adds	r3, #97	; 0x61
90004cce:	2204      	movs	r2, #4
90004cd0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
90004cd2:	687b      	ldr	r3, [r7, #4]
90004cd4:	681b      	ldr	r3, [r3, #0]
90004cd6:	78fa      	ldrb	r2, [r7, #3]
90004cd8:	4611      	mov	r1, r2
90004cda:	4618      	mov	r0, r3
90004cdc:	f004 ff4c 	bl	90009b78 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004ce0:	78fb      	ldrb	r3, [r7, #3]
90004ce2:	015a      	lsls	r2, r3, #5
90004ce4:	693b      	ldr	r3, [r7, #16]
90004ce6:	4413      	add	r3, r2
90004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004cec:	461a      	mov	r2, r3
90004cee:	2310      	movs	r3, #16
90004cf0:	6093      	str	r3, [r2, #8]
90004cf2:	e000      	b.n	90004cf6 <HCD_HC_IN_IRQHandler+0x81c>
        return;
90004cf4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
90004cf6:	3718      	adds	r7, #24
90004cf8:	46bd      	mov	sp, r7
90004cfa:	bd80      	pop	{r7, pc}

90004cfc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
90004cfc:	b580      	push	{r7, lr}
90004cfe:	b086      	sub	sp, #24
90004d00:	af00      	add	r7, sp, #0
90004d02:	6078      	str	r0, [r7, #4]
90004d04:	460b      	mov	r3, r1
90004d06:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90004d08:	687b      	ldr	r3, [r7, #4]
90004d0a:	681b      	ldr	r3, [r3, #0]
90004d0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90004d0e:	697b      	ldr	r3, [r7, #20]
90004d10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
90004d12:	687b      	ldr	r3, [r7, #4]
90004d14:	681b      	ldr	r3, [r3, #0]
90004d16:	78fa      	ldrb	r2, [r7, #3]
90004d18:	4611      	mov	r1, r2
90004d1a:	4618      	mov	r0, r3
90004d1c:	f004 feaf 	bl	90009a7e <USB_ReadChInterrupts>
90004d20:	4603      	mov	r3, r0
90004d22:	f003 0304 	and.w	r3, r3, #4
90004d26:	2b04      	cmp	r3, #4
90004d28:	d119      	bne.n	90004d5e <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
90004d2a:	78fb      	ldrb	r3, [r7, #3]
90004d2c:	015a      	lsls	r2, r3, #5
90004d2e:	693b      	ldr	r3, [r7, #16]
90004d30:	4413      	add	r3, r2
90004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004d36:	461a      	mov	r2, r3
90004d38:	2304      	movs	r3, #4
90004d3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
90004d3c:	78fb      	ldrb	r3, [r7, #3]
90004d3e:	687a      	ldr	r2, [r7, #4]
90004d40:	212c      	movs	r1, #44	; 0x2c
90004d42:	fb01 f303 	mul.w	r3, r1, r3
90004d46:	4413      	add	r3, r2
90004d48:	3361      	adds	r3, #97	; 0x61
90004d4a:	2207      	movs	r2, #7
90004d4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004d4e:	687b      	ldr	r3, [r7, #4]
90004d50:	681b      	ldr	r3, [r3, #0]
90004d52:	78fa      	ldrb	r2, [r7, #3]
90004d54:	4611      	mov	r1, r2
90004d56:	4618      	mov	r0, r3
90004d58:	f004 ff0e 	bl	90009b78 <USB_HC_Halt>
90004d5c:	e37d      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
90004d5e:	687b      	ldr	r3, [r7, #4]
90004d60:	681b      	ldr	r3, [r3, #0]
90004d62:	78fa      	ldrb	r2, [r7, #3]
90004d64:	4611      	mov	r1, r2
90004d66:	4618      	mov	r0, r3
90004d68:	f004 fe89 	bl	90009a7e <USB_ReadChInterrupts>
90004d6c:	4603      	mov	r3, r0
90004d6e:	f003 0320 	and.w	r3, r3, #32
90004d72:	2b20      	cmp	r3, #32
90004d74:	d136      	bne.n	90004de4 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
90004d76:	78fb      	ldrb	r3, [r7, #3]
90004d78:	015a      	lsls	r2, r3, #5
90004d7a:	693b      	ldr	r3, [r7, #16]
90004d7c:	4413      	add	r3, r2
90004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004d82:	461a      	mov	r2, r3
90004d84:	2320      	movs	r3, #32
90004d86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
90004d88:	78fb      	ldrb	r3, [r7, #3]
90004d8a:	687a      	ldr	r2, [r7, #4]
90004d8c:	212c      	movs	r1, #44	; 0x2c
90004d8e:	fb01 f303 	mul.w	r3, r1, r3
90004d92:	4413      	add	r3, r2
90004d94:	333d      	adds	r3, #61	; 0x3d
90004d96:	781b      	ldrb	r3, [r3, #0]
90004d98:	2b01      	cmp	r3, #1
90004d9a:	f040 835e 	bne.w	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
90004d9e:	78fb      	ldrb	r3, [r7, #3]
90004da0:	687a      	ldr	r2, [r7, #4]
90004da2:	212c      	movs	r1, #44	; 0x2c
90004da4:	fb01 f303 	mul.w	r3, r1, r3
90004da8:	4413      	add	r3, r2
90004daa:	333d      	adds	r3, #61	; 0x3d
90004dac:	2200      	movs	r2, #0
90004dae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
90004db0:	78fb      	ldrb	r3, [r7, #3]
90004db2:	687a      	ldr	r2, [r7, #4]
90004db4:	212c      	movs	r1, #44	; 0x2c
90004db6:	fb01 f303 	mul.w	r3, r1, r3
90004dba:	4413      	add	r3, r2
90004dbc:	3360      	adds	r3, #96	; 0x60
90004dbe:	2202      	movs	r2, #2
90004dc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
90004dc2:	78fb      	ldrb	r3, [r7, #3]
90004dc4:	687a      	ldr	r2, [r7, #4]
90004dc6:	212c      	movs	r1, #44	; 0x2c
90004dc8:	fb01 f303 	mul.w	r3, r1, r3
90004dcc:	4413      	add	r3, r2
90004dce:	3361      	adds	r3, #97	; 0x61
90004dd0:	2203      	movs	r2, #3
90004dd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90004dd4:	687b      	ldr	r3, [r7, #4]
90004dd6:	681b      	ldr	r3, [r3, #0]
90004dd8:	78fa      	ldrb	r2, [r7, #3]
90004dda:	4611      	mov	r1, r2
90004ddc:	4618      	mov	r0, r3
90004dde:	f004 fecb 	bl	90009b78 <USB_HC_Halt>
90004de2:	e33a      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
90004de4:	687b      	ldr	r3, [r7, #4]
90004de6:	681b      	ldr	r3, [r3, #0]
90004de8:	78fa      	ldrb	r2, [r7, #3]
90004dea:	4611      	mov	r1, r2
90004dec:	4618      	mov	r0, r3
90004dee:	f004 fe46 	bl	90009a7e <USB_ReadChInterrupts>
90004df2:	4603      	mov	r3, r0
90004df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90004dfc:	d111      	bne.n	90004e22 <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
90004dfe:	78fb      	ldrb	r3, [r7, #3]
90004e00:	015a      	lsls	r2, r3, #5
90004e02:	693b      	ldr	r3, [r7, #16]
90004e04:	4413      	add	r3, r2
90004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004e0a:	461a      	mov	r2, r3
90004e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
90004e10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004e12:	687b      	ldr	r3, [r7, #4]
90004e14:	681b      	ldr	r3, [r3, #0]
90004e16:	78fa      	ldrb	r2, [r7, #3]
90004e18:	4611      	mov	r1, r2
90004e1a:	4618      	mov	r0, r3
90004e1c:	f004 feac 	bl	90009b78 <USB_HC_Halt>
90004e20:	e31b      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
90004e22:	687b      	ldr	r3, [r7, #4]
90004e24:	681b      	ldr	r3, [r3, #0]
90004e26:	78fa      	ldrb	r2, [r7, #3]
90004e28:	4611      	mov	r1, r2
90004e2a:	4618      	mov	r0, r3
90004e2c:	f004 fe27 	bl	90009a7e <USB_ReadChInterrupts>
90004e30:	4603      	mov	r3, r0
90004e32:	f003 0301 	and.w	r3, r3, #1
90004e36:	2b01      	cmp	r3, #1
90004e38:	d140      	bne.n	90004ebc <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004e3a:	78fb      	ldrb	r3, [r7, #3]
90004e3c:	687a      	ldr	r2, [r7, #4]
90004e3e:	212c      	movs	r1, #44	; 0x2c
90004e40:	fb01 f303 	mul.w	r3, r1, r3
90004e44:	4413      	add	r3, r2
90004e46:	335c      	adds	r3, #92	; 0x5c
90004e48:	2200      	movs	r2, #0
90004e4a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004e4c:	687b      	ldr	r3, [r7, #4]
90004e4e:	681b      	ldr	r3, [r3, #0]
90004e50:	78fa      	ldrb	r2, [r7, #3]
90004e52:	4611      	mov	r1, r2
90004e54:	4618      	mov	r0, r3
90004e56:	f004 fe12 	bl	90009a7e <USB_ReadChInterrupts>
90004e5a:	4603      	mov	r3, r0
90004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004e60:	2b40      	cmp	r3, #64	; 0x40
90004e62:	d111      	bne.n	90004e88 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
90004e64:	78fb      	ldrb	r3, [r7, #3]
90004e66:	687a      	ldr	r2, [r7, #4]
90004e68:	212c      	movs	r1, #44	; 0x2c
90004e6a:	fb01 f303 	mul.w	r3, r1, r3
90004e6e:	4413      	add	r3, r2
90004e70:	333d      	adds	r3, #61	; 0x3d
90004e72:	2201      	movs	r2, #1
90004e74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004e76:	78fb      	ldrb	r3, [r7, #3]
90004e78:	015a      	lsls	r2, r3, #5
90004e7a:	693b      	ldr	r3, [r7, #16]
90004e7c:	4413      	add	r3, r2
90004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004e82:	461a      	mov	r2, r3
90004e84:	2340      	movs	r3, #64	; 0x40
90004e86:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
90004e88:	78fb      	ldrb	r3, [r7, #3]
90004e8a:	015a      	lsls	r2, r3, #5
90004e8c:	693b      	ldr	r3, [r7, #16]
90004e8e:	4413      	add	r3, r2
90004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004e94:	461a      	mov	r2, r3
90004e96:	2301      	movs	r3, #1
90004e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
90004e9a:	78fb      	ldrb	r3, [r7, #3]
90004e9c:	687a      	ldr	r2, [r7, #4]
90004e9e:	212c      	movs	r1, #44	; 0x2c
90004ea0:	fb01 f303 	mul.w	r3, r1, r3
90004ea4:	4413      	add	r3, r2
90004ea6:	3361      	adds	r3, #97	; 0x61
90004ea8:	2201      	movs	r2, #1
90004eaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004eac:	687b      	ldr	r3, [r7, #4]
90004eae:	681b      	ldr	r3, [r3, #0]
90004eb0:	78fa      	ldrb	r2, [r7, #3]
90004eb2:	4611      	mov	r1, r2
90004eb4:	4618      	mov	r0, r3
90004eb6:	f004 fe5f 	bl	90009b78 <USB_HC_Halt>
90004eba:	e2ce      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
90004ebc:	687b      	ldr	r3, [r7, #4]
90004ebe:	681b      	ldr	r3, [r3, #0]
90004ec0:	78fa      	ldrb	r2, [r7, #3]
90004ec2:	4611      	mov	r1, r2
90004ec4:	4618      	mov	r0, r3
90004ec6:	f004 fdda 	bl	90009a7e <USB_ReadChInterrupts>
90004eca:	4603      	mov	r3, r0
90004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004ed0:	2b40      	cmp	r3, #64	; 0x40
90004ed2:	d12b      	bne.n	90004f2c <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
90004ed4:	78fb      	ldrb	r3, [r7, #3]
90004ed6:	687a      	ldr	r2, [r7, #4]
90004ed8:	212c      	movs	r1, #44	; 0x2c
90004eda:	fb01 f303 	mul.w	r3, r1, r3
90004ede:	4413      	add	r3, r2
90004ee0:	3361      	adds	r3, #97	; 0x61
90004ee2:	2205      	movs	r2, #5
90004ee4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
90004ee6:	78fb      	ldrb	r3, [r7, #3]
90004ee8:	687a      	ldr	r2, [r7, #4]
90004eea:	212c      	movs	r1, #44	; 0x2c
90004eec:	fb01 f303 	mul.w	r3, r1, r3
90004ef0:	4413      	add	r3, r2
90004ef2:	333d      	adds	r3, #61	; 0x3d
90004ef4:	2201      	movs	r2, #1
90004ef6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
90004ef8:	78fb      	ldrb	r3, [r7, #3]
90004efa:	687a      	ldr	r2, [r7, #4]
90004efc:	212c      	movs	r1, #44	; 0x2c
90004efe:	fb01 f303 	mul.w	r3, r1, r3
90004f02:	4413      	add	r3, r2
90004f04:	335c      	adds	r3, #92	; 0x5c
90004f06:	2200      	movs	r2, #0
90004f08:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f0a:	687b      	ldr	r3, [r7, #4]
90004f0c:	681b      	ldr	r3, [r3, #0]
90004f0e:	78fa      	ldrb	r2, [r7, #3]
90004f10:	4611      	mov	r1, r2
90004f12:	4618      	mov	r0, r3
90004f14:	f004 fe30 	bl	90009b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
90004f18:	78fb      	ldrb	r3, [r7, #3]
90004f1a:	015a      	lsls	r2, r3, #5
90004f1c:	693b      	ldr	r3, [r7, #16]
90004f1e:	4413      	add	r3, r2
90004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004f24:	461a      	mov	r2, r3
90004f26:	2340      	movs	r3, #64	; 0x40
90004f28:	6093      	str	r3, [r2, #8]
90004f2a:	e296      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
90004f2c:	687b      	ldr	r3, [r7, #4]
90004f2e:	681b      	ldr	r3, [r3, #0]
90004f30:	78fa      	ldrb	r2, [r7, #3]
90004f32:	4611      	mov	r1, r2
90004f34:	4618      	mov	r0, r3
90004f36:	f004 fda2 	bl	90009a7e <USB_ReadChInterrupts>
90004f3a:	4603      	mov	r3, r0
90004f3c:	f003 0308 	and.w	r3, r3, #8
90004f40:	2b08      	cmp	r3, #8
90004f42:	d119      	bne.n	90004f78 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
90004f44:	78fb      	ldrb	r3, [r7, #3]
90004f46:	015a      	lsls	r2, r3, #5
90004f48:	693b      	ldr	r3, [r7, #16]
90004f4a:	4413      	add	r3, r2
90004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90004f50:	461a      	mov	r2, r3
90004f52:	2308      	movs	r3, #8
90004f54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
90004f56:	78fb      	ldrb	r3, [r7, #3]
90004f58:	687a      	ldr	r2, [r7, #4]
90004f5a:	212c      	movs	r1, #44	; 0x2c
90004f5c:	fb01 f303 	mul.w	r3, r1, r3
90004f60:	4413      	add	r3, r2
90004f62:	3361      	adds	r3, #97	; 0x61
90004f64:	2206      	movs	r2, #6
90004f66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004f68:	687b      	ldr	r3, [r7, #4]
90004f6a:	681b      	ldr	r3, [r3, #0]
90004f6c:	78fa      	ldrb	r2, [r7, #3]
90004f6e:	4611      	mov	r1, r2
90004f70:	4618      	mov	r0, r3
90004f72:	f004 fe01 	bl	90009b78 <USB_HC_Halt>
90004f76:	e270      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
90004f78:	687b      	ldr	r3, [r7, #4]
90004f7a:	681b      	ldr	r3, [r3, #0]
90004f7c:	78fa      	ldrb	r2, [r7, #3]
90004f7e:	4611      	mov	r1, r2
90004f80:	4618      	mov	r0, r3
90004f82:	f004 fd7c 	bl	90009a7e <USB_ReadChInterrupts>
90004f86:	4603      	mov	r3, r0
90004f88:	f003 0310 	and.w	r3, r3, #16
90004f8c:	2b10      	cmp	r3, #16
90004f8e:	d13f      	bne.n	90005010 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
90004f90:	78fb      	ldrb	r3, [r7, #3]
90004f92:	687a      	ldr	r2, [r7, #4]
90004f94:	212c      	movs	r1, #44	; 0x2c
90004f96:	fb01 f303 	mul.w	r3, r1, r3
90004f9a:	4413      	add	r3, r2
90004f9c:	335c      	adds	r3, #92	; 0x5c
90004f9e:	2200      	movs	r2, #0
90004fa0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
90004fa2:	78fb      	ldrb	r3, [r7, #3]
90004fa4:	687a      	ldr	r2, [r7, #4]
90004fa6:	212c      	movs	r1, #44	; 0x2c
90004fa8:	fb01 f303 	mul.w	r3, r1, r3
90004fac:	4413      	add	r3, r2
90004fae:	3361      	adds	r3, #97	; 0x61
90004fb0:	2204      	movs	r2, #4
90004fb2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
90004fb4:	78fb      	ldrb	r3, [r7, #3]
90004fb6:	687a      	ldr	r2, [r7, #4]
90004fb8:	212c      	movs	r1, #44	; 0x2c
90004fba:	fb01 f303 	mul.w	r3, r1, r3
90004fbe:	4413      	add	r3, r2
90004fc0:	333d      	adds	r3, #61	; 0x3d
90004fc2:	781b      	ldrb	r3, [r3, #0]
90004fc4:	2b00      	cmp	r3, #0
90004fc6:	d112      	bne.n	90004fee <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
90004fc8:	78fb      	ldrb	r3, [r7, #3]
90004fca:	687a      	ldr	r2, [r7, #4]
90004fcc:	212c      	movs	r1, #44	; 0x2c
90004fce:	fb01 f303 	mul.w	r3, r1, r3
90004fd2:	4413      	add	r3, r2
90004fd4:	333c      	adds	r3, #60	; 0x3c
90004fd6:	781b      	ldrb	r3, [r3, #0]
90004fd8:	2b00      	cmp	r3, #0
90004fda:	d108      	bne.n	90004fee <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
90004fdc:	78fb      	ldrb	r3, [r7, #3]
90004fde:	687a      	ldr	r2, [r7, #4]
90004fe0:	212c      	movs	r1, #44	; 0x2c
90004fe2:	fb01 f303 	mul.w	r3, r1, r3
90004fe6:	4413      	add	r3, r2
90004fe8:	333d      	adds	r3, #61	; 0x3d
90004fea:	2201      	movs	r2, #1
90004fec:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
90004fee:	687b      	ldr	r3, [r7, #4]
90004ff0:	681b      	ldr	r3, [r3, #0]
90004ff2:	78fa      	ldrb	r2, [r7, #3]
90004ff4:	4611      	mov	r1, r2
90004ff6:	4618      	mov	r0, r3
90004ff8:	f004 fdbe 	bl	90009b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
90004ffc:	78fb      	ldrb	r3, [r7, #3]
90004ffe:	015a      	lsls	r2, r3, #5
90005000:	693b      	ldr	r3, [r7, #16]
90005002:	4413      	add	r3, r2
90005004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005008:	461a      	mov	r2, r3
9000500a:	2310      	movs	r3, #16
9000500c:	6093      	str	r3, [r2, #8]
9000500e:	e224      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
90005010:	687b      	ldr	r3, [r7, #4]
90005012:	681b      	ldr	r3, [r3, #0]
90005014:	78fa      	ldrb	r2, [r7, #3]
90005016:	4611      	mov	r1, r2
90005018:	4618      	mov	r0, r3
9000501a:	f004 fd30 	bl	90009a7e <USB_ReadChInterrupts>
9000501e:	4603      	mov	r3, r0
90005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005024:	2b80      	cmp	r3, #128	; 0x80
90005026:	d161      	bne.n	900050ec <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
90005028:	687b      	ldr	r3, [r7, #4]
9000502a:	68db      	ldr	r3, [r3, #12]
9000502c:	2b00      	cmp	r3, #0
9000502e:	d110      	bne.n	90005052 <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
90005030:	78fb      	ldrb	r3, [r7, #3]
90005032:	687a      	ldr	r2, [r7, #4]
90005034:	212c      	movs	r1, #44	; 0x2c
90005036:	fb01 f303 	mul.w	r3, r1, r3
9000503a:	4413      	add	r3, r2
9000503c:	3361      	adds	r3, #97	; 0x61
9000503e:	2207      	movs	r2, #7
90005040:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
90005042:	687b      	ldr	r3, [r7, #4]
90005044:	681b      	ldr	r3, [r3, #0]
90005046:	78fa      	ldrb	r2, [r7, #3]
90005048:	4611      	mov	r1, r2
9000504a:	4618      	mov	r0, r3
9000504c:	f004 fd94 	bl	90009b78 <USB_HC_Halt>
90005050:	e042      	b.n	900050d8 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
90005052:	78fb      	ldrb	r3, [r7, #3]
90005054:	6879      	ldr	r1, [r7, #4]
90005056:	222c      	movs	r2, #44	; 0x2c
90005058:	fb03 f202 	mul.w	r2, r3, r2
9000505c:	440a      	add	r2, r1
9000505e:	325c      	adds	r2, #92	; 0x5c
90005060:	6812      	ldr	r2, [r2, #0]
90005062:	3201      	adds	r2, #1
90005064:	6879      	ldr	r1, [r7, #4]
90005066:	202c      	movs	r0, #44	; 0x2c
90005068:	fb00 f303 	mul.w	r3, r0, r3
9000506c:	440b      	add	r3, r1
9000506e:	335c      	adds	r3, #92	; 0x5c
90005070:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
90005072:	78fb      	ldrb	r3, [r7, #3]
90005074:	687a      	ldr	r2, [r7, #4]
90005076:	212c      	movs	r1, #44	; 0x2c
90005078:	fb01 f303 	mul.w	r3, r1, r3
9000507c:	4413      	add	r3, r2
9000507e:	335c      	adds	r3, #92	; 0x5c
90005080:	681b      	ldr	r3, [r3, #0]
90005082:	2b02      	cmp	r3, #2
90005084:	d91f      	bls.n	900050c6 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
90005086:	78fb      	ldrb	r3, [r7, #3]
90005088:	687a      	ldr	r2, [r7, #4]
9000508a:	212c      	movs	r1, #44	; 0x2c
9000508c:	fb01 f303 	mul.w	r3, r1, r3
90005090:	4413      	add	r3, r2
90005092:	335c      	adds	r3, #92	; 0x5c
90005094:	2200      	movs	r2, #0
90005096:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
90005098:	78fb      	ldrb	r3, [r7, #3]
9000509a:	687a      	ldr	r2, [r7, #4]
9000509c:	212c      	movs	r1, #44	; 0x2c
9000509e:	fb01 f303 	mul.w	r3, r1, r3
900050a2:	4413      	add	r3, r2
900050a4:	3360      	adds	r3, #96	; 0x60
900050a6:	2204      	movs	r2, #4
900050a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
900050aa:	78fb      	ldrb	r3, [r7, #3]
900050ac:	687a      	ldr	r2, [r7, #4]
900050ae:	212c      	movs	r1, #44	; 0x2c
900050b0:	fb01 f303 	mul.w	r3, r1, r3
900050b4:	4413      	add	r3, r2
900050b6:	3360      	adds	r3, #96	; 0x60
900050b8:	781a      	ldrb	r2, [r3, #0]
900050ba:	78fb      	ldrb	r3, [r7, #3]
900050bc:	4619      	mov	r1, r3
900050be:	6878      	ldr	r0, [r7, #4]
900050c0:	f7fb fcd6 	bl	90000a70 <HAL_HCD_HC_NotifyURBChange_Callback>
900050c4:	e008      	b.n	900050d8 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900050c6:	78fb      	ldrb	r3, [r7, #3]
900050c8:	687a      	ldr	r2, [r7, #4]
900050ca:	212c      	movs	r1, #44	; 0x2c
900050cc:	fb01 f303 	mul.w	r3, r1, r3
900050d0:	4413      	add	r3, r2
900050d2:	3360      	adds	r3, #96	; 0x60
900050d4:	2202      	movs	r2, #2
900050d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
900050d8:	78fb      	ldrb	r3, [r7, #3]
900050da:	015a      	lsls	r2, r3, #5
900050dc:	693b      	ldr	r3, [r7, #16]
900050de:	4413      	add	r3, r2
900050e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900050e4:	461a      	mov	r2, r3
900050e6:	2380      	movs	r3, #128	; 0x80
900050e8:	6093      	str	r3, [r2, #8]
900050ea:	e1b6      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	681b      	ldr	r3, [r3, #0]
900050f0:	78fa      	ldrb	r2, [r7, #3]
900050f2:	4611      	mov	r1, r2
900050f4:	4618      	mov	r0, r3
900050f6:	f004 fcc2 	bl	90009a7e <USB_ReadChInterrupts>
900050fa:	4603      	mov	r3, r0
900050fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90005100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90005104:	d11a      	bne.n	9000513c <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
90005106:	78fb      	ldrb	r3, [r7, #3]
90005108:	687a      	ldr	r2, [r7, #4]
9000510a:	212c      	movs	r1, #44	; 0x2c
9000510c:	fb01 f303 	mul.w	r3, r1, r3
90005110:	4413      	add	r3, r2
90005112:	3361      	adds	r3, #97	; 0x61
90005114:	2209      	movs	r2, #9
90005116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
90005118:	687b      	ldr	r3, [r7, #4]
9000511a:	681b      	ldr	r3, [r3, #0]
9000511c:	78fa      	ldrb	r2, [r7, #3]
9000511e:	4611      	mov	r1, r2
90005120:	4618      	mov	r0, r3
90005122:	f004 fd29 	bl	90009b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
90005126:	78fb      	ldrb	r3, [r7, #3]
90005128:	015a      	lsls	r2, r3, #5
9000512a:	693b      	ldr	r3, [r7, #16]
9000512c:	4413      	add	r3, r2
9000512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005132:	461a      	mov	r2, r3
90005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
90005138:	6093      	str	r3, [r2, #8]
9000513a:	e18e      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
9000513c:	687b      	ldr	r3, [r7, #4]
9000513e:	681b      	ldr	r3, [r3, #0]
90005140:	78fa      	ldrb	r2, [r7, #3]
90005142:	4611      	mov	r1, r2
90005144:	4618      	mov	r0, r3
90005146:	f004 fc9a 	bl	90009a7e <USB_ReadChInterrupts>
9000514a:	4603      	mov	r3, r0
9000514c:	f003 0302 	and.w	r3, r3, #2
90005150:	2b02      	cmp	r3, #2
90005152:	f040 8182 	bne.w	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
90005156:	78fb      	ldrb	r3, [r7, #3]
90005158:	015a      	lsls	r2, r3, #5
9000515a:	693b      	ldr	r3, [r7, #16]
9000515c:	4413      	add	r3, r2
9000515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005162:	461a      	mov	r2, r3
90005164:	2302      	movs	r3, #2
90005166:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
90005168:	78fb      	ldrb	r3, [r7, #3]
9000516a:	687a      	ldr	r2, [r7, #4]
9000516c:	212c      	movs	r1, #44	; 0x2c
9000516e:	fb01 f303 	mul.w	r3, r1, r3
90005172:	4413      	add	r3, r2
90005174:	3361      	adds	r3, #97	; 0x61
90005176:	781b      	ldrb	r3, [r3, #0]
90005178:	2b01      	cmp	r3, #1
9000517a:	f040 8087 	bne.w	9000528c <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000517e:	78fb      	ldrb	r3, [r7, #3]
90005180:	687a      	ldr	r2, [r7, #4]
90005182:	212c      	movs	r1, #44	; 0x2c
90005184:	fb01 f303 	mul.w	r3, r1, r3
90005188:	4413      	add	r3, r2
9000518a:	3361      	adds	r3, #97	; 0x61
9000518c:	2202      	movs	r2, #2
9000518e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
90005190:	78fb      	ldrb	r3, [r7, #3]
90005192:	687a      	ldr	r2, [r7, #4]
90005194:	212c      	movs	r1, #44	; 0x2c
90005196:	fb01 f303 	mul.w	r3, r1, r3
9000519a:	4413      	add	r3, r2
9000519c:	3360      	adds	r3, #96	; 0x60
9000519e:	2201      	movs	r2, #1
900051a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900051a2:	78fb      	ldrb	r3, [r7, #3]
900051a4:	687a      	ldr	r2, [r7, #4]
900051a6:	212c      	movs	r1, #44	; 0x2c
900051a8:	fb01 f303 	mul.w	r3, r1, r3
900051ac:	4413      	add	r3, r2
900051ae:	333f      	adds	r3, #63	; 0x3f
900051b0:	781b      	ldrb	r3, [r3, #0]
900051b2:	2b02      	cmp	r3, #2
900051b4:	d00a      	beq.n	900051cc <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
900051b6:	78fb      	ldrb	r3, [r7, #3]
900051b8:	687a      	ldr	r2, [r7, #4]
900051ba:	212c      	movs	r1, #44	; 0x2c
900051bc:	fb01 f303 	mul.w	r3, r1, r3
900051c0:	4413      	add	r3, r2
900051c2:	333f      	adds	r3, #63	; 0x3f
900051c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
900051c6:	2b03      	cmp	r3, #3
900051c8:	f040 8138 	bne.w	9000543c <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
900051cc:	687b      	ldr	r3, [r7, #4]
900051ce:	68db      	ldr	r3, [r3, #12]
900051d0:	2b00      	cmp	r3, #0
900051d2:	d113      	bne.n	900051fc <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
900051d4:	78fb      	ldrb	r3, [r7, #3]
900051d6:	687a      	ldr	r2, [r7, #4]
900051d8:	212c      	movs	r1, #44	; 0x2c
900051da:	fb01 f303 	mul.w	r3, r1, r3
900051de:	4413      	add	r3, r2
900051e0:	3355      	adds	r3, #85	; 0x55
900051e2:	781a      	ldrb	r2, [r3, #0]
900051e4:	78fb      	ldrb	r3, [r7, #3]
900051e6:	f082 0201 	eor.w	r2, r2, #1
900051ea:	b2d0      	uxtb	r0, r2
900051ec:	687a      	ldr	r2, [r7, #4]
900051ee:	212c      	movs	r1, #44	; 0x2c
900051f0:	fb01 f303 	mul.w	r3, r1, r3
900051f4:	4413      	add	r3, r2
900051f6:	3355      	adds	r3, #85	; 0x55
900051f8:	4602      	mov	r2, r0
900051fa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
900051fc:	687b      	ldr	r3, [r7, #4]
900051fe:	68db      	ldr	r3, [r3, #12]
90005200:	2b01      	cmp	r3, #1
90005202:	f040 811b 	bne.w	9000543c <HCD_HC_OUT_IRQHandler+0x740>
90005206:	78fb      	ldrb	r3, [r7, #3]
90005208:	687a      	ldr	r2, [r7, #4]
9000520a:	212c      	movs	r1, #44	; 0x2c
9000520c:	fb01 f303 	mul.w	r3, r1, r3
90005210:	4413      	add	r3, r2
90005212:	334c      	adds	r3, #76	; 0x4c
90005214:	681b      	ldr	r3, [r3, #0]
90005216:	2b00      	cmp	r3, #0
90005218:	f000 8110 	beq.w	9000543c <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
9000521c:	78fb      	ldrb	r3, [r7, #3]
9000521e:	687a      	ldr	r2, [r7, #4]
90005220:	212c      	movs	r1, #44	; 0x2c
90005222:	fb01 f303 	mul.w	r3, r1, r3
90005226:	4413      	add	r3, r2
90005228:	334c      	adds	r3, #76	; 0x4c
9000522a:	681b      	ldr	r3, [r3, #0]
9000522c:	78fa      	ldrb	r2, [r7, #3]
9000522e:	6879      	ldr	r1, [r7, #4]
90005230:	202c      	movs	r0, #44	; 0x2c
90005232:	fb00 f202 	mul.w	r2, r0, r2
90005236:	440a      	add	r2, r1
90005238:	3240      	adds	r2, #64	; 0x40
9000523a:	8812      	ldrh	r2, [r2, #0]
9000523c:	4413      	add	r3, r2
9000523e:	3b01      	subs	r3, #1
90005240:	78fa      	ldrb	r2, [r7, #3]
90005242:	6879      	ldr	r1, [r7, #4]
90005244:	202c      	movs	r0, #44	; 0x2c
90005246:	fb00 f202 	mul.w	r2, r0, r2
9000524a:	440a      	add	r2, r1
9000524c:	3240      	adds	r2, #64	; 0x40
9000524e:	8812      	ldrh	r2, [r2, #0]
90005250:	fbb3 f3f2 	udiv	r3, r3, r2
90005254:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
90005256:	68bb      	ldr	r3, [r7, #8]
90005258:	f003 0301 	and.w	r3, r3, #1
9000525c:	2b00      	cmp	r3, #0
9000525e:	f000 80ed 	beq.w	9000543c <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
90005262:	78fb      	ldrb	r3, [r7, #3]
90005264:	687a      	ldr	r2, [r7, #4]
90005266:	212c      	movs	r1, #44	; 0x2c
90005268:	fb01 f303 	mul.w	r3, r1, r3
9000526c:	4413      	add	r3, r2
9000526e:	3355      	adds	r3, #85	; 0x55
90005270:	781a      	ldrb	r2, [r3, #0]
90005272:	78fb      	ldrb	r3, [r7, #3]
90005274:	f082 0201 	eor.w	r2, r2, #1
90005278:	b2d0      	uxtb	r0, r2
9000527a:	687a      	ldr	r2, [r7, #4]
9000527c:	212c      	movs	r1, #44	; 0x2c
9000527e:	fb01 f303 	mul.w	r3, r1, r3
90005282:	4413      	add	r3, r2
90005284:	3355      	adds	r3, #85	; 0x55
90005286:	4602      	mov	r2, r0
90005288:	701a      	strb	r2, [r3, #0]
9000528a:	e0d7      	b.n	9000543c <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
9000528c:	78fb      	ldrb	r3, [r7, #3]
9000528e:	687a      	ldr	r2, [r7, #4]
90005290:	212c      	movs	r1, #44	; 0x2c
90005292:	fb01 f303 	mul.w	r3, r1, r3
90005296:	4413      	add	r3, r2
90005298:	3361      	adds	r3, #97	; 0x61
9000529a:	781b      	ldrb	r3, [r3, #0]
9000529c:	2b03      	cmp	r3, #3
9000529e:	d109      	bne.n	900052b4 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052a0:	78fb      	ldrb	r3, [r7, #3]
900052a2:	687a      	ldr	r2, [r7, #4]
900052a4:	212c      	movs	r1, #44	; 0x2c
900052a6:	fb01 f303 	mul.w	r3, r1, r3
900052aa:	4413      	add	r3, r2
900052ac:	3361      	adds	r3, #97	; 0x61
900052ae:	2202      	movs	r2, #2
900052b0:	701a      	strb	r2, [r3, #0]
900052b2:	e0c3      	b.n	9000543c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
900052b4:	78fb      	ldrb	r3, [r7, #3]
900052b6:	687a      	ldr	r2, [r7, #4]
900052b8:	212c      	movs	r1, #44	; 0x2c
900052ba:	fb01 f303 	mul.w	r3, r1, r3
900052be:	4413      	add	r3, r2
900052c0:	3361      	adds	r3, #97	; 0x61
900052c2:	781b      	ldrb	r3, [r3, #0]
900052c4:	2b04      	cmp	r3, #4
900052c6:	d112      	bne.n	900052ee <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
900052c8:	78fb      	ldrb	r3, [r7, #3]
900052ca:	687a      	ldr	r2, [r7, #4]
900052cc:	212c      	movs	r1, #44	; 0x2c
900052ce:	fb01 f303 	mul.w	r3, r1, r3
900052d2:	4413      	add	r3, r2
900052d4:	3361      	adds	r3, #97	; 0x61
900052d6:	2202      	movs	r2, #2
900052d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
900052da:	78fb      	ldrb	r3, [r7, #3]
900052dc:	687a      	ldr	r2, [r7, #4]
900052de:	212c      	movs	r1, #44	; 0x2c
900052e0:	fb01 f303 	mul.w	r3, r1, r3
900052e4:	4413      	add	r3, r2
900052e6:	3360      	adds	r3, #96	; 0x60
900052e8:	2202      	movs	r2, #2
900052ea:	701a      	strb	r2, [r3, #0]
900052ec:	e0a6      	b.n	9000543c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
900052ee:	78fb      	ldrb	r3, [r7, #3]
900052f0:	687a      	ldr	r2, [r7, #4]
900052f2:	212c      	movs	r1, #44	; 0x2c
900052f4:	fb01 f303 	mul.w	r3, r1, r3
900052f8:	4413      	add	r3, r2
900052fa:	3361      	adds	r3, #97	; 0x61
900052fc:	781b      	ldrb	r3, [r3, #0]
900052fe:	2b05      	cmp	r3, #5
90005300:	d112      	bne.n	90005328 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
90005302:	78fb      	ldrb	r3, [r7, #3]
90005304:	687a      	ldr	r2, [r7, #4]
90005306:	212c      	movs	r1, #44	; 0x2c
90005308:	fb01 f303 	mul.w	r3, r1, r3
9000530c:	4413      	add	r3, r2
9000530e:	3361      	adds	r3, #97	; 0x61
90005310:	2202      	movs	r2, #2
90005312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
90005314:	78fb      	ldrb	r3, [r7, #3]
90005316:	687a      	ldr	r2, [r7, #4]
90005318:	212c      	movs	r1, #44	; 0x2c
9000531a:	fb01 f303 	mul.w	r3, r1, r3
9000531e:	4413      	add	r3, r2
90005320:	3360      	adds	r3, #96	; 0x60
90005322:	2202      	movs	r2, #2
90005324:	701a      	strb	r2, [r3, #0]
90005326:	e089      	b.n	9000543c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
90005328:	78fb      	ldrb	r3, [r7, #3]
9000532a:	687a      	ldr	r2, [r7, #4]
9000532c:	212c      	movs	r1, #44	; 0x2c
9000532e:	fb01 f303 	mul.w	r3, r1, r3
90005332:	4413      	add	r3, r2
90005334:	3361      	adds	r3, #97	; 0x61
90005336:	781b      	ldrb	r3, [r3, #0]
90005338:	2b06      	cmp	r3, #6
9000533a:	d112      	bne.n	90005362 <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000533c:	78fb      	ldrb	r3, [r7, #3]
9000533e:	687a      	ldr	r2, [r7, #4]
90005340:	212c      	movs	r1, #44	; 0x2c
90005342:	fb01 f303 	mul.w	r3, r1, r3
90005346:	4413      	add	r3, r2
90005348:	3361      	adds	r3, #97	; 0x61
9000534a:	2202      	movs	r2, #2
9000534c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
9000534e:	78fb      	ldrb	r3, [r7, #3]
90005350:	687a      	ldr	r2, [r7, #4]
90005352:	212c      	movs	r1, #44	; 0x2c
90005354:	fb01 f303 	mul.w	r3, r1, r3
90005358:	4413      	add	r3, r2
9000535a:	3360      	adds	r3, #96	; 0x60
9000535c:	2205      	movs	r2, #5
9000535e:	701a      	strb	r2, [r3, #0]
90005360:	e06c      	b.n	9000543c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005362:	78fb      	ldrb	r3, [r7, #3]
90005364:	687a      	ldr	r2, [r7, #4]
90005366:	212c      	movs	r1, #44	; 0x2c
90005368:	fb01 f303 	mul.w	r3, r1, r3
9000536c:	4413      	add	r3, r2
9000536e:	3361      	adds	r3, #97	; 0x61
90005370:	781b      	ldrb	r3, [r3, #0]
90005372:	2b07      	cmp	r3, #7
90005374:	d009      	beq.n	9000538a <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
90005376:	78fb      	ldrb	r3, [r7, #3]
90005378:	687a      	ldr	r2, [r7, #4]
9000537a:	212c      	movs	r1, #44	; 0x2c
9000537c:	fb01 f303 	mul.w	r3, r1, r3
90005380:	4413      	add	r3, r2
90005382:	3361      	adds	r3, #97	; 0x61
90005384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
90005386:	2b09      	cmp	r3, #9
90005388:	d166      	bne.n	90005458 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
9000538a:	78fb      	ldrb	r3, [r7, #3]
9000538c:	687a      	ldr	r2, [r7, #4]
9000538e:	212c      	movs	r1, #44	; 0x2c
90005390:	fb01 f303 	mul.w	r3, r1, r3
90005394:	4413      	add	r3, r2
90005396:	3361      	adds	r3, #97	; 0x61
90005398:	2202      	movs	r2, #2
9000539a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
9000539c:	78fb      	ldrb	r3, [r7, #3]
9000539e:	6879      	ldr	r1, [r7, #4]
900053a0:	222c      	movs	r2, #44	; 0x2c
900053a2:	fb03 f202 	mul.w	r2, r3, r2
900053a6:	440a      	add	r2, r1
900053a8:	325c      	adds	r2, #92	; 0x5c
900053aa:	6812      	ldr	r2, [r2, #0]
900053ac:	3201      	adds	r2, #1
900053ae:	6879      	ldr	r1, [r7, #4]
900053b0:	202c      	movs	r0, #44	; 0x2c
900053b2:	fb00 f303 	mul.w	r3, r0, r3
900053b6:	440b      	add	r3, r1
900053b8:	335c      	adds	r3, #92	; 0x5c
900053ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053bc:	78fb      	ldrb	r3, [r7, #3]
900053be:	687a      	ldr	r2, [r7, #4]
900053c0:	212c      	movs	r1, #44	; 0x2c
900053c2:	fb01 f303 	mul.w	r3, r1, r3
900053c6:	4413      	add	r3, r2
900053c8:	335c      	adds	r3, #92	; 0x5c
900053ca:	681b      	ldr	r3, [r3, #0]
900053cc:	2b02      	cmp	r3, #2
900053ce:	d912      	bls.n	900053f6 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
900053d0:	78fb      	ldrb	r3, [r7, #3]
900053d2:	687a      	ldr	r2, [r7, #4]
900053d4:	212c      	movs	r1, #44	; 0x2c
900053d6:	fb01 f303 	mul.w	r3, r1, r3
900053da:	4413      	add	r3, r2
900053dc:	335c      	adds	r3, #92	; 0x5c
900053de:	2200      	movs	r2, #0
900053e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
900053e2:	78fb      	ldrb	r3, [r7, #3]
900053e4:	687a      	ldr	r2, [r7, #4]
900053e6:	212c      	movs	r1, #44	; 0x2c
900053e8:	fb01 f303 	mul.w	r3, r1, r3
900053ec:	4413      	add	r3, r2
900053ee:	3360      	adds	r3, #96	; 0x60
900053f0:	2204      	movs	r2, #4
900053f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
900053f4:	e021      	b.n	9000543a <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
900053f6:	78fb      	ldrb	r3, [r7, #3]
900053f8:	687a      	ldr	r2, [r7, #4]
900053fa:	212c      	movs	r1, #44	; 0x2c
900053fc:	fb01 f303 	mul.w	r3, r1, r3
90005400:	4413      	add	r3, r2
90005402:	3360      	adds	r3, #96	; 0x60
90005404:	2202      	movs	r2, #2
90005406:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
90005408:	78fb      	ldrb	r3, [r7, #3]
9000540a:	015a      	lsls	r2, r3, #5
9000540c:	693b      	ldr	r3, [r7, #16]
9000540e:	4413      	add	r3, r2
90005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005414:	681b      	ldr	r3, [r3, #0]
90005416:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005418:	68fb      	ldr	r3, [r7, #12]
9000541a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
9000541e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
90005420:	68fb      	ldr	r3, [r7, #12]
90005422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90005426:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
90005428:	78fb      	ldrb	r3, [r7, #3]
9000542a:	015a      	lsls	r2, r3, #5
9000542c:	693b      	ldr	r3, [r7, #16]
9000542e:	4413      	add	r3, r2
90005430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005434:	461a      	mov	r2, r3
90005436:	68fb      	ldr	r3, [r7, #12]
90005438:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
9000543a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
9000543c:	78fb      	ldrb	r3, [r7, #3]
9000543e:	687a      	ldr	r2, [r7, #4]
90005440:	212c      	movs	r1, #44	; 0x2c
90005442:	fb01 f303 	mul.w	r3, r1, r3
90005446:	4413      	add	r3, r2
90005448:	3360      	adds	r3, #96	; 0x60
9000544a:	781a      	ldrb	r2, [r3, #0]
9000544c:	78fb      	ldrb	r3, [r7, #3]
9000544e:	4619      	mov	r1, r3
90005450:	6878      	ldr	r0, [r7, #4]
90005452:	f7fb fb0d 	bl	90000a70 <HAL_HCD_HC_NotifyURBChange_Callback>
90005456:	e000      	b.n	9000545a <HCD_HC_OUT_IRQHandler+0x75e>
      return;
90005458:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
9000545a:	3718      	adds	r7, #24
9000545c:	46bd      	mov	sp, r7
9000545e:	bd80      	pop	{r7, pc}

90005460 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005460:	b580      	push	{r7, lr}
90005462:	b08a      	sub	sp, #40	; 0x28
90005464:	af00      	add	r7, sp, #0
90005466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
90005468:	687b      	ldr	r3, [r7, #4]
9000546a:	681b      	ldr	r3, [r3, #0]
9000546c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
9000546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005470:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
90005472:	687b      	ldr	r3, [r7, #4]
90005474:	681b      	ldr	r3, [r3, #0]
90005476:	6a1b      	ldr	r3, [r3, #32]
90005478:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
9000547a:	69fb      	ldr	r3, [r7, #28]
9000547c:	f003 030f 	and.w	r3, r3, #15
90005480:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
90005482:	69fb      	ldr	r3, [r7, #28]
90005484:	0c5b      	lsrs	r3, r3, #17
90005486:	f003 030f 	and.w	r3, r3, #15
9000548a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
9000548c:	69fb      	ldr	r3, [r7, #28]
9000548e:	091b      	lsrs	r3, r3, #4
90005490:	f3c3 030a 	ubfx	r3, r3, #0, #11
90005494:	613b      	str	r3, [r7, #16]

  switch (pktsts)
90005496:	697b      	ldr	r3, [r7, #20]
90005498:	2b02      	cmp	r3, #2
9000549a:	d004      	beq.n	900054a6 <HCD_RXQLVL_IRQHandler+0x46>
9000549c:	697b      	ldr	r3, [r7, #20]
9000549e:	2b05      	cmp	r3, #5
900054a0:	f000 80a9 	beq.w	900055f6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
900054a4:	e0aa      	b.n	900055fc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
900054a6:	693b      	ldr	r3, [r7, #16]
900054a8:	2b00      	cmp	r3, #0
900054aa:	f000 80a6 	beq.w	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
900054ae:	687a      	ldr	r2, [r7, #4]
900054b0:	69bb      	ldr	r3, [r7, #24]
900054b2:	212c      	movs	r1, #44	; 0x2c
900054b4:	fb01 f303 	mul.w	r3, r1, r3
900054b8:	4413      	add	r3, r2
900054ba:	3344      	adds	r3, #68	; 0x44
900054bc:	681b      	ldr	r3, [r3, #0]
900054be:	2b00      	cmp	r3, #0
900054c0:	f000 809b 	beq.w	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
900054c4:	687a      	ldr	r2, [r7, #4]
900054c6:	69bb      	ldr	r3, [r7, #24]
900054c8:	212c      	movs	r1, #44	; 0x2c
900054ca:	fb01 f303 	mul.w	r3, r1, r3
900054ce:	4413      	add	r3, r2
900054d0:	3350      	adds	r3, #80	; 0x50
900054d2:	681a      	ldr	r2, [r3, #0]
900054d4:	693b      	ldr	r3, [r7, #16]
900054d6:	441a      	add	r2, r3
900054d8:	6879      	ldr	r1, [r7, #4]
900054da:	69bb      	ldr	r3, [r7, #24]
900054dc:	202c      	movs	r0, #44	; 0x2c
900054de:	fb00 f303 	mul.w	r3, r0, r3
900054e2:	440b      	add	r3, r1
900054e4:	334c      	adds	r3, #76	; 0x4c
900054e6:	681b      	ldr	r3, [r3, #0]
900054e8:	429a      	cmp	r2, r3
900054ea:	d87a      	bhi.n	900055e2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
900054ec:	687b      	ldr	r3, [r7, #4]
900054ee:	6818      	ldr	r0, [r3, #0]
900054f0:	687a      	ldr	r2, [r7, #4]
900054f2:	69bb      	ldr	r3, [r7, #24]
900054f4:	212c      	movs	r1, #44	; 0x2c
900054f6:	fb01 f303 	mul.w	r3, r1, r3
900054fa:	4413      	add	r3, r2
900054fc:	3344      	adds	r3, #68	; 0x44
900054fe:	681b      	ldr	r3, [r3, #0]
90005500:	693a      	ldr	r2, [r7, #16]
90005502:	b292      	uxth	r2, r2
90005504:	4619      	mov	r1, r3
90005506:	f004 fa4f 	bl	900099a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
9000550a:	687a      	ldr	r2, [r7, #4]
9000550c:	69bb      	ldr	r3, [r7, #24]
9000550e:	212c      	movs	r1, #44	; 0x2c
90005510:	fb01 f303 	mul.w	r3, r1, r3
90005514:	4413      	add	r3, r2
90005516:	3344      	adds	r3, #68	; 0x44
90005518:	681a      	ldr	r2, [r3, #0]
9000551a:	693b      	ldr	r3, [r7, #16]
9000551c:	441a      	add	r2, r3
9000551e:	6879      	ldr	r1, [r7, #4]
90005520:	69bb      	ldr	r3, [r7, #24]
90005522:	202c      	movs	r0, #44	; 0x2c
90005524:	fb00 f303 	mul.w	r3, r0, r3
90005528:	440b      	add	r3, r1
9000552a:	3344      	adds	r3, #68	; 0x44
9000552c:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
9000552e:	687a      	ldr	r2, [r7, #4]
90005530:	69bb      	ldr	r3, [r7, #24]
90005532:	212c      	movs	r1, #44	; 0x2c
90005534:	fb01 f303 	mul.w	r3, r1, r3
90005538:	4413      	add	r3, r2
9000553a:	3350      	adds	r3, #80	; 0x50
9000553c:	681a      	ldr	r2, [r3, #0]
9000553e:	693b      	ldr	r3, [r7, #16]
90005540:	441a      	add	r2, r3
90005542:	6879      	ldr	r1, [r7, #4]
90005544:	69bb      	ldr	r3, [r7, #24]
90005546:	202c      	movs	r0, #44	; 0x2c
90005548:	fb00 f303 	mul.w	r3, r0, r3
9000554c:	440b      	add	r3, r1
9000554e:	3350      	adds	r3, #80	; 0x50
90005550:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
90005552:	69bb      	ldr	r3, [r7, #24]
90005554:	015a      	lsls	r2, r3, #5
90005556:	6a3b      	ldr	r3, [r7, #32]
90005558:	4413      	add	r3, r2
9000555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
9000555e:	691b      	ldr	r3, [r3, #16]
90005560:	0cdb      	lsrs	r3, r3, #19
90005562:	f3c3 0309 	ubfx	r3, r3, #0, #10
90005566:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
90005568:	687a      	ldr	r2, [r7, #4]
9000556a:	69bb      	ldr	r3, [r7, #24]
9000556c:	212c      	movs	r1, #44	; 0x2c
9000556e:	fb01 f303 	mul.w	r3, r1, r3
90005572:	4413      	add	r3, r2
90005574:	3340      	adds	r3, #64	; 0x40
90005576:	881b      	ldrh	r3, [r3, #0]
90005578:	461a      	mov	r2, r3
9000557a:	693b      	ldr	r3, [r7, #16]
9000557c:	4293      	cmp	r3, r2
9000557e:	d13c      	bne.n	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
90005580:	68fb      	ldr	r3, [r7, #12]
90005582:	2b00      	cmp	r3, #0
90005584:	d039      	beq.n	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
90005586:	69bb      	ldr	r3, [r7, #24]
90005588:	015a      	lsls	r2, r3, #5
9000558a:	6a3b      	ldr	r3, [r7, #32]
9000558c:	4413      	add	r3, r2
9000558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90005592:	681b      	ldr	r3, [r3, #0]
90005594:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
90005596:	68bb      	ldr	r3, [r7, #8]
90005598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
9000559c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
9000559e:	68bb      	ldr	r3, [r7, #8]
900055a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900055a4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
900055a6:	69bb      	ldr	r3, [r7, #24]
900055a8:	015a      	lsls	r2, r3, #5
900055aa:	6a3b      	ldr	r3, [r7, #32]
900055ac:	4413      	add	r3, r2
900055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
900055b2:	461a      	mov	r2, r3
900055b4:	68bb      	ldr	r3, [r7, #8]
900055b6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
900055b8:	687a      	ldr	r2, [r7, #4]
900055ba:	69bb      	ldr	r3, [r7, #24]
900055bc:	212c      	movs	r1, #44	; 0x2c
900055be:	fb01 f303 	mul.w	r3, r1, r3
900055c2:	4413      	add	r3, r2
900055c4:	3354      	adds	r3, #84	; 0x54
900055c6:	781b      	ldrb	r3, [r3, #0]
900055c8:	f083 0301 	eor.w	r3, r3, #1
900055cc:	b2d8      	uxtb	r0, r3
900055ce:	687a      	ldr	r2, [r7, #4]
900055d0:	69bb      	ldr	r3, [r7, #24]
900055d2:	212c      	movs	r1, #44	; 0x2c
900055d4:	fb01 f303 	mul.w	r3, r1, r3
900055d8:	4413      	add	r3, r2
900055da:	3354      	adds	r3, #84	; 0x54
900055dc:	4602      	mov	r2, r0
900055de:	701a      	strb	r2, [r3, #0]
      break;
900055e0:	e00b      	b.n	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
900055e2:	687a      	ldr	r2, [r7, #4]
900055e4:	69bb      	ldr	r3, [r7, #24]
900055e6:	212c      	movs	r1, #44	; 0x2c
900055e8:	fb01 f303 	mul.w	r3, r1, r3
900055ec:	4413      	add	r3, r2
900055ee:	3360      	adds	r3, #96	; 0x60
900055f0:	2204      	movs	r2, #4
900055f2:	701a      	strb	r2, [r3, #0]
      break;
900055f4:	e001      	b.n	900055fa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
900055f6:	bf00      	nop
900055f8:	e000      	b.n	900055fc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
900055fa:	bf00      	nop
  }
}
900055fc:	bf00      	nop
900055fe:	3728      	adds	r7, #40	; 0x28
90005600:	46bd      	mov	sp, r7
90005602:	bd80      	pop	{r7, pc}

90005604 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
90005604:	b580      	push	{r7, lr}
90005606:	b086      	sub	sp, #24
90005608:	af00      	add	r7, sp, #0
9000560a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
9000560c:	687b      	ldr	r3, [r7, #4]
9000560e:	681b      	ldr	r3, [r3, #0]
90005610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
90005612:	697b      	ldr	r3, [r7, #20]
90005614:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
90005616:	693b      	ldr	r3, [r7, #16]
90005618:	f503 6388 	add.w	r3, r3, #1088	; 0x440
9000561c:	681b      	ldr	r3, [r3, #0]
9000561e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
90005620:	693b      	ldr	r3, [r7, #16]
90005622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
90005626:	681b      	ldr	r3, [r3, #0]
90005628:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
9000562a:	68bb      	ldr	r3, [r7, #8]
9000562c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
90005630:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
90005632:	68fb      	ldr	r3, [r7, #12]
90005634:	f003 0302 	and.w	r3, r3, #2
90005638:	2b02      	cmp	r3, #2
9000563a:	d10b      	bne.n	90005654 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
9000563c:	68fb      	ldr	r3, [r7, #12]
9000563e:	f003 0301 	and.w	r3, r3, #1
90005642:	2b01      	cmp	r3, #1
90005644:	d102      	bne.n	9000564c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
90005646:	6878      	ldr	r0, [r7, #4]
90005648:	f7fb f9da 	bl	90000a00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
9000564c:	68bb      	ldr	r3, [r7, #8]
9000564e:	f043 0302 	orr.w	r3, r3, #2
90005652:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
90005654:	68fb      	ldr	r3, [r7, #12]
90005656:	f003 0308 	and.w	r3, r3, #8
9000565a:	2b08      	cmp	r3, #8
9000565c:	d132      	bne.n	900056c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
9000565e:	68bb      	ldr	r3, [r7, #8]
90005660:	f043 0308 	orr.w	r3, r3, #8
90005664:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
90005666:	68fb      	ldr	r3, [r7, #12]
90005668:	f003 0304 	and.w	r3, r3, #4
9000566c:	2b04      	cmp	r3, #4
9000566e:	d126      	bne.n	900056be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
90005670:	687b      	ldr	r3, [r7, #4]
90005672:	699b      	ldr	r3, [r3, #24]
90005674:	2b02      	cmp	r3, #2
90005676:	d113      	bne.n	900056a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
90005678:	68fb      	ldr	r3, [r7, #12]
9000567a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
9000567e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90005682:	d106      	bne.n	90005692 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
90005684:	687b      	ldr	r3, [r7, #4]
90005686:	681b      	ldr	r3, [r3, #0]
90005688:	2102      	movs	r1, #2
9000568a:	4618      	mov	r0, r3
9000568c:	f004 fa26 	bl	90009adc <USB_InitFSLSPClkSel>
90005690:	e011      	b.n	900056b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
90005692:	687b      	ldr	r3, [r7, #4]
90005694:	681b      	ldr	r3, [r3, #0]
90005696:	2101      	movs	r1, #1
90005698:	4618      	mov	r0, r3
9000569a:	f004 fa1f 	bl	90009adc <USB_InitFSLSPClkSel>
9000569e:	e00a      	b.n	900056b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
900056a0:	687b      	ldr	r3, [r7, #4]
900056a2:	691b      	ldr	r3, [r3, #16]
900056a4:	2b01      	cmp	r3, #1
900056a6:	d106      	bne.n	900056b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
900056a8:	693b      	ldr	r3, [r7, #16]
900056aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900056ae:	461a      	mov	r2, r3
900056b0:	f64e 2360 	movw	r3, #60000	; 0xea60
900056b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
900056b6:	6878      	ldr	r0, [r7, #4]
900056b8:	f7fb f9be 	bl	90000a38 <HAL_HCD_PortEnabled_Callback>
900056bc:	e002      	b.n	900056c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
900056be:	6878      	ldr	r0, [r7, #4]
900056c0:	f7fb f9c8 	bl	90000a54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
900056c4:	68fb      	ldr	r3, [r7, #12]
900056c6:	f003 0320 	and.w	r3, r3, #32
900056ca:	2b20      	cmp	r3, #32
900056cc:	d103      	bne.n	900056d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
900056ce:	68bb      	ldr	r3, [r7, #8]
900056d0:	f043 0320 	orr.w	r3, r3, #32
900056d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
900056d6:	693b      	ldr	r3, [r7, #16]
900056d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
900056dc:	461a      	mov	r2, r3
900056de:	68bb      	ldr	r3, [r7, #8]
900056e0:	6013      	str	r3, [r2, #0]
}
900056e2:	bf00      	nop
900056e4:	3718      	adds	r7, #24
900056e6:	46bd      	mov	sp, r7
900056e8:	bd80      	pop	{r7, pc}
	...

900056ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
900056ec:	b580      	push	{r7, lr}
900056ee:	b082      	sub	sp, #8
900056f0:	af00      	add	r7, sp, #0
900056f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
900056f4:	687b      	ldr	r3, [r7, #4]
900056f6:	2b00      	cmp	r3, #0
900056f8:	d101      	bne.n	900056fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
900056fa:	2301      	movs	r3, #1
900056fc:	e07f      	b.n	900057fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
900056fe:	687b      	ldr	r3, [r7, #4]
90005700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005704:	b2db      	uxtb	r3, r3
90005706:	2b00      	cmp	r3, #0
90005708:	d106      	bne.n	90005718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
9000570a:	687b      	ldr	r3, [r7, #4]
9000570c:	2200      	movs	r2, #0
9000570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
90005712:	6878      	ldr	r0, [r7, #4]
90005714:	f000 f8a9 	bl	9000586a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
90005718:	687b      	ldr	r3, [r7, #4]
9000571a:	2224      	movs	r2, #36	; 0x24
9000571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
90005720:	687b      	ldr	r3, [r7, #4]
90005722:	681b      	ldr	r3, [r3, #0]
90005724:	681a      	ldr	r2, [r3, #0]
90005726:	687b      	ldr	r3, [r7, #4]
90005728:	681b      	ldr	r3, [r3, #0]
9000572a:	f022 0201 	bic.w	r2, r2, #1
9000572e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005730:	687b      	ldr	r3, [r7, #4]
90005732:	685a      	ldr	r2, [r3, #4]
90005734:	687b      	ldr	r3, [r7, #4]
90005736:	681b      	ldr	r3, [r3, #0]
90005738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
9000573c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000573e:	687b      	ldr	r3, [r7, #4]
90005740:	681b      	ldr	r3, [r3, #0]
90005742:	689a      	ldr	r2, [r3, #8]
90005744:	687b      	ldr	r3, [r7, #4]
90005746:	681b      	ldr	r3, [r3, #0]
90005748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000574c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000574e:	687b      	ldr	r3, [r7, #4]
90005750:	68db      	ldr	r3, [r3, #12]
90005752:	2b01      	cmp	r3, #1
90005754:	d107      	bne.n	90005766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90005756:	687b      	ldr	r3, [r7, #4]
90005758:	689a      	ldr	r2, [r3, #8]
9000575a:	687b      	ldr	r3, [r7, #4]
9000575c:	681b      	ldr	r3, [r3, #0]
9000575e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90005762:	609a      	str	r2, [r3, #8]
90005764:	e006      	b.n	90005774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90005766:	687b      	ldr	r3, [r7, #4]
90005768:	689a      	ldr	r2, [r3, #8]
9000576a:	687b      	ldr	r3, [r7, #4]
9000576c:	681b      	ldr	r3, [r3, #0]
9000576e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
90005772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90005774:	687b      	ldr	r3, [r7, #4]
90005776:	68db      	ldr	r3, [r3, #12]
90005778:	2b02      	cmp	r3, #2
9000577a:	d104      	bne.n	90005786 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000577c:	687b      	ldr	r3, [r7, #4]
9000577e:	681b      	ldr	r3, [r3, #0]
90005780:	f44f 6200 	mov.w	r2, #2048	; 0x800
90005784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90005786:	687b      	ldr	r3, [r7, #4]
90005788:	681b      	ldr	r3, [r3, #0]
9000578a:	6859      	ldr	r1, [r3, #4]
9000578c:	687b      	ldr	r3, [r7, #4]
9000578e:	681a      	ldr	r2, [r3, #0]
90005790:	4b1d      	ldr	r3, [pc, #116]	; (90005808 <HAL_I2C_Init+0x11c>)
90005792:	430b      	orrs	r3, r1
90005794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90005796:	687b      	ldr	r3, [r7, #4]
90005798:	681b      	ldr	r3, [r3, #0]
9000579a:	68da      	ldr	r2, [r3, #12]
9000579c:	687b      	ldr	r3, [r7, #4]
9000579e:	681b      	ldr	r3, [r3, #0]
900057a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900057a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900057a6:	687b      	ldr	r3, [r7, #4]
900057a8:	691a      	ldr	r2, [r3, #16]
900057aa:	687b      	ldr	r3, [r7, #4]
900057ac:	695b      	ldr	r3, [r3, #20]
900057ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
900057b2:	687b      	ldr	r3, [r7, #4]
900057b4:	699b      	ldr	r3, [r3, #24]
900057b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900057b8:	687b      	ldr	r3, [r7, #4]
900057ba:	681b      	ldr	r3, [r3, #0]
900057bc:	430a      	orrs	r2, r1
900057be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900057c0:	687b      	ldr	r3, [r7, #4]
900057c2:	69d9      	ldr	r1, [r3, #28]
900057c4:	687b      	ldr	r3, [r7, #4]
900057c6:	6a1a      	ldr	r2, [r3, #32]
900057c8:	687b      	ldr	r3, [r7, #4]
900057ca:	681b      	ldr	r3, [r3, #0]
900057cc:	430a      	orrs	r2, r1
900057ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
900057d0:	687b      	ldr	r3, [r7, #4]
900057d2:	681b      	ldr	r3, [r3, #0]
900057d4:	681a      	ldr	r2, [r3, #0]
900057d6:	687b      	ldr	r3, [r7, #4]
900057d8:	681b      	ldr	r3, [r3, #0]
900057da:	f042 0201 	orr.w	r2, r2, #1
900057de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900057e0:	687b      	ldr	r3, [r7, #4]
900057e2:	2200      	movs	r2, #0
900057e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900057e6:	687b      	ldr	r3, [r7, #4]
900057e8:	2220      	movs	r2, #32
900057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900057ee:	687b      	ldr	r3, [r7, #4]
900057f0:	2200      	movs	r2, #0
900057f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900057f4:	687b      	ldr	r3, [r7, #4]
900057f6:	2200      	movs	r2, #0
900057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
900057fc:	2300      	movs	r3, #0
}
900057fe:	4618      	mov	r0, r3
90005800:	3708      	adds	r7, #8
90005802:	46bd      	mov	sp, r7
90005804:	bd80      	pop	{r7, pc}
90005806:	bf00      	nop
90005808:	02008000 	.word	0x02008000

9000580c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
9000580c:	b580      	push	{r7, lr}
9000580e:	b082      	sub	sp, #8
90005810:	af00      	add	r7, sp, #0
90005812:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
90005814:	687b      	ldr	r3, [r7, #4]
90005816:	2b00      	cmp	r3, #0
90005818:	d101      	bne.n	9000581e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
9000581a:	2301      	movs	r3, #1
9000581c:	e021      	b.n	90005862 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
9000581e:	687b      	ldr	r3, [r7, #4]
90005820:	2224      	movs	r2, #36	; 0x24
90005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
90005826:	687b      	ldr	r3, [r7, #4]
90005828:	681b      	ldr	r3, [r3, #0]
9000582a:	681a      	ldr	r2, [r3, #0]
9000582c:	687b      	ldr	r3, [r7, #4]
9000582e:	681b      	ldr	r3, [r3, #0]
90005830:	f022 0201 	bic.w	r2, r2, #1
90005834:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
90005836:	6878      	ldr	r0, [r7, #4]
90005838:	f000 f821 	bl	9000587e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000583c:	687b      	ldr	r3, [r7, #4]
9000583e:	2200      	movs	r2, #0
90005840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
90005842:	687b      	ldr	r3, [r7, #4]
90005844:	2200      	movs	r2, #0
90005846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000584a:	687b      	ldr	r3, [r7, #4]
9000584c:	2200      	movs	r2, #0
9000584e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005850:	687b      	ldr	r3, [r7, #4]
90005852:	2200      	movs	r2, #0
90005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
90005858:	687b      	ldr	r3, [r7, #4]
9000585a:	2200      	movs	r2, #0
9000585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
90005860:	2300      	movs	r3, #0
}
90005862:	4618      	mov	r0, r3
90005864:	3708      	adds	r7, #8
90005866:	46bd      	mov	sp, r7
90005868:	bd80      	pop	{r7, pc}

9000586a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
9000586a:	b480      	push	{r7}
9000586c:	b083      	sub	sp, #12
9000586e:	af00      	add	r7, sp, #0
90005870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
90005872:	bf00      	nop
90005874:	370c      	adds	r7, #12
90005876:	46bd      	mov	sp, r7
90005878:	f85d 7b04 	ldr.w	r7, [sp], #4
9000587c:	4770      	bx	lr

9000587e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
9000587e:	b480      	push	{r7}
90005880:	b083      	sub	sp, #12
90005882:	af00      	add	r7, sp, #0
90005884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
90005886:	bf00      	nop
90005888:	370c      	adds	r7, #12
9000588a:	46bd      	mov	sp, r7
9000588c:	f85d 7b04 	ldr.w	r7, [sp], #4
90005890:	4770      	bx	lr
	...

90005894 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005894:	b580      	push	{r7, lr}
90005896:	b088      	sub	sp, #32
90005898:	af02      	add	r7, sp, #8
9000589a:	60f8      	str	r0, [r7, #12]
9000589c:	4608      	mov	r0, r1
9000589e:	4611      	mov	r1, r2
900058a0:	461a      	mov	r2, r3
900058a2:	4603      	mov	r3, r0
900058a4:	817b      	strh	r3, [r7, #10]
900058a6:	460b      	mov	r3, r1
900058a8:	813b      	strh	r3, [r7, #8]
900058aa:	4613      	mov	r3, r2
900058ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
900058ae:	68fb      	ldr	r3, [r7, #12]
900058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900058b4:	b2db      	uxtb	r3, r3
900058b6:	2b20      	cmp	r3, #32
900058b8:	f040 80f9 	bne.w	90005aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
900058bc:	6a3b      	ldr	r3, [r7, #32]
900058be:	2b00      	cmp	r3, #0
900058c0:	d002      	beq.n	900058c8 <HAL_I2C_Mem_Write+0x34>
900058c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
900058c4:	2b00      	cmp	r3, #0
900058c6:	d105      	bne.n	900058d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900058c8:	68fb      	ldr	r3, [r7, #12]
900058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
900058ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
900058d0:	2301      	movs	r3, #1
900058d2:	e0ed      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
900058d4:	68fb      	ldr	r3, [r7, #12]
900058d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900058da:	2b01      	cmp	r3, #1
900058dc:	d101      	bne.n	900058e2 <HAL_I2C_Mem_Write+0x4e>
900058de:	2302      	movs	r3, #2
900058e0:	e0e6      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
900058e2:	68fb      	ldr	r3, [r7, #12]
900058e4:	2201      	movs	r2, #1
900058e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
900058ea:	f7fd fd6d 	bl	900033c8 <HAL_GetTick>
900058ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900058f0:	697b      	ldr	r3, [r7, #20]
900058f2:	9300      	str	r3, [sp, #0]
900058f4:	2319      	movs	r3, #25
900058f6:	2201      	movs	r2, #1
900058f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
900058fc:	68f8      	ldr	r0, [r7, #12]
900058fe:	f000 fadd 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005902:	4603      	mov	r3, r0
90005904:	2b00      	cmp	r3, #0
90005906:	d001      	beq.n	9000590c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
90005908:	2301      	movs	r3, #1
9000590a:	e0d1      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000590c:	68fb      	ldr	r3, [r7, #12]
9000590e:	2221      	movs	r2, #33	; 0x21
90005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005914:	68fb      	ldr	r3, [r7, #12]
90005916:	2240      	movs	r2, #64	; 0x40
90005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000591c:	68fb      	ldr	r3, [r7, #12]
9000591e:	2200      	movs	r2, #0
90005920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005922:	68fb      	ldr	r3, [r7, #12]
90005924:	6a3a      	ldr	r2, [r7, #32]
90005926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90005928:	68fb      	ldr	r3, [r7, #12]
9000592a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
9000592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
9000592e:	68fb      	ldr	r3, [r7, #12]
90005930:	2200      	movs	r2, #0
90005932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005934:	88f8      	ldrh	r0, [r7, #6]
90005936:	893a      	ldrh	r2, [r7, #8]
90005938:	8979      	ldrh	r1, [r7, #10]
9000593a:	697b      	ldr	r3, [r7, #20]
9000593c:	9301      	str	r3, [sp, #4]
9000593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005940:	9300      	str	r3, [sp, #0]
90005942:	4603      	mov	r3, r0
90005944:	68f8      	ldr	r0, [r7, #12]
90005946:	f000 f9ed 	bl	90005d24 <I2C_RequestMemoryWrite>
9000594a:	4603      	mov	r3, r0
9000594c:	2b00      	cmp	r3, #0
9000594e:	d005      	beq.n	9000595c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005950:	68fb      	ldr	r3, [r7, #12]
90005952:	2200      	movs	r2, #0
90005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
90005958:	2301      	movs	r3, #1
9000595a:	e0a9      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000595c:	68fb      	ldr	r3, [r7, #12]
9000595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005960:	b29b      	uxth	r3, r3
90005962:	2bff      	cmp	r3, #255	; 0xff
90005964:	d90e      	bls.n	90005984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005966:	68fb      	ldr	r3, [r7, #12]
90005968:	22ff      	movs	r2, #255	; 0xff
9000596a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
9000596c:	68fb      	ldr	r3, [r7, #12]
9000596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005970:	b2da      	uxtb	r2, r3
90005972:	8979      	ldrh	r1, [r7, #10]
90005974:	2300      	movs	r3, #0
90005976:	9300      	str	r3, [sp, #0]
90005978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000597c:	68f8      	ldr	r0, [r7, #12]
9000597e:	f000 fc57 	bl	90006230 <I2C_TransferConfig>
90005982:	e00f      	b.n	900059a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005984:	68fb      	ldr	r3, [r7, #12]
90005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005988:	b29a      	uxth	r2, r3
9000598a:	68fb      	ldr	r3, [r7, #12]
9000598c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000598e:	68fb      	ldr	r3, [r7, #12]
90005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005992:	b2da      	uxtb	r2, r3
90005994:	8979      	ldrh	r1, [r7, #10]
90005996:	2300      	movs	r3, #0
90005998:	9300      	str	r3, [sp, #0]
9000599a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000599e:	68f8      	ldr	r0, [r7, #12]
900059a0:	f000 fc46 	bl	90006230 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900059a4:	697a      	ldr	r2, [r7, #20]
900059a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
900059a8:	68f8      	ldr	r0, [r7, #12]
900059aa:	f000 fad6 	bl	90005f5a <I2C_WaitOnTXISFlagUntilTimeout>
900059ae:	4603      	mov	r3, r0
900059b0:	2b00      	cmp	r3, #0
900059b2:	d001      	beq.n	900059b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
900059b4:	2301      	movs	r3, #1
900059b6:	e07b      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900059b8:	68fb      	ldr	r3, [r7, #12]
900059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900059bc:	781a      	ldrb	r2, [r3, #0]
900059be:	68fb      	ldr	r3, [r7, #12]
900059c0:	681b      	ldr	r3, [r3, #0]
900059c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
900059c4:	68fb      	ldr	r3, [r7, #12]
900059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900059c8:	1c5a      	adds	r2, r3, #1
900059ca:	68fb      	ldr	r3, [r7, #12]
900059cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
900059ce:	68fb      	ldr	r3, [r7, #12]
900059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900059d2:	b29b      	uxth	r3, r3
900059d4:	3b01      	subs	r3, #1
900059d6:	b29a      	uxth	r2, r3
900059d8:	68fb      	ldr	r3, [r7, #12]
900059da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
900059dc:	68fb      	ldr	r3, [r7, #12]
900059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900059e0:	3b01      	subs	r3, #1
900059e2:	b29a      	uxth	r2, r3
900059e4:	68fb      	ldr	r3, [r7, #12]
900059e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
900059e8:	68fb      	ldr	r3, [r7, #12]
900059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
900059ec:	b29b      	uxth	r3, r3
900059ee:	2b00      	cmp	r3, #0
900059f0:	d034      	beq.n	90005a5c <HAL_I2C_Mem_Write+0x1c8>
900059f2:	68fb      	ldr	r3, [r7, #12]
900059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900059f6:	2b00      	cmp	r3, #0
900059f8:	d130      	bne.n	90005a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
900059fa:	697b      	ldr	r3, [r7, #20]
900059fc:	9300      	str	r3, [sp, #0]
900059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005a00:	2200      	movs	r2, #0
90005a02:	2180      	movs	r1, #128	; 0x80
90005a04:	68f8      	ldr	r0, [r7, #12]
90005a06:	f000 fa59 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005a0a:	4603      	mov	r3, r0
90005a0c:	2b00      	cmp	r3, #0
90005a0e:	d001      	beq.n	90005a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
90005a10:	2301      	movs	r3, #1
90005a12:	e04d      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005a14:	68fb      	ldr	r3, [r7, #12]
90005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a18:	b29b      	uxth	r3, r3
90005a1a:	2bff      	cmp	r3, #255	; 0xff
90005a1c:	d90e      	bls.n	90005a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005a1e:	68fb      	ldr	r3, [r7, #12]
90005a20:	22ff      	movs	r2, #255	; 0xff
90005a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005a24:	68fb      	ldr	r3, [r7, #12]
90005a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005a28:	b2da      	uxtb	r2, r3
90005a2a:	8979      	ldrh	r1, [r7, #10]
90005a2c:	2300      	movs	r3, #0
90005a2e:	9300      	str	r3, [sp, #0]
90005a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005a34:	68f8      	ldr	r0, [r7, #12]
90005a36:	f000 fbfb 	bl	90006230 <I2C_TransferConfig>
90005a3a:	e00f      	b.n	90005a5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005a3c:	68fb      	ldr	r3, [r7, #12]
90005a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a40:	b29a      	uxth	r2, r3
90005a42:	68fb      	ldr	r3, [r7, #12]
90005a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005a46:	68fb      	ldr	r3, [r7, #12]
90005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005a4a:	b2da      	uxtb	r2, r3
90005a4c:	8979      	ldrh	r1, [r7, #10]
90005a4e:	2300      	movs	r3, #0
90005a50:	9300      	str	r3, [sp, #0]
90005a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005a56:	68f8      	ldr	r0, [r7, #12]
90005a58:	f000 fbea 	bl	90006230 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
90005a5c:	68fb      	ldr	r3, [r7, #12]
90005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005a60:	b29b      	uxth	r3, r3
90005a62:	2b00      	cmp	r3, #0
90005a64:	d19e      	bne.n	900059a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005a66:	697a      	ldr	r2, [r7, #20]
90005a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90005a6a:	68f8      	ldr	r0, [r7, #12]
90005a6c:	f000 fabc 	bl	90005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
90005a70:	4603      	mov	r3, r0
90005a72:	2b00      	cmp	r3, #0
90005a74:	d001      	beq.n	90005a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
90005a76:	2301      	movs	r3, #1
90005a78:	e01a      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005a7a:	68fb      	ldr	r3, [r7, #12]
90005a7c:	681b      	ldr	r3, [r3, #0]
90005a7e:	2220      	movs	r2, #32
90005a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005a82:	68fb      	ldr	r3, [r7, #12]
90005a84:	681b      	ldr	r3, [r3, #0]
90005a86:	6859      	ldr	r1, [r3, #4]
90005a88:	68fb      	ldr	r3, [r7, #12]
90005a8a:	681a      	ldr	r2, [r3, #0]
90005a8c:	4b0a      	ldr	r3, [pc, #40]	; (90005ab8 <HAL_I2C_Mem_Write+0x224>)
90005a8e:	400b      	ands	r3, r1
90005a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005a92:	68fb      	ldr	r3, [r7, #12]
90005a94:	2220      	movs	r2, #32
90005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005a9a:	68fb      	ldr	r3, [r7, #12]
90005a9c:	2200      	movs	r2, #0
90005a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005aa2:	68fb      	ldr	r3, [r7, #12]
90005aa4:	2200      	movs	r2, #0
90005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90005aaa:	2300      	movs	r3, #0
90005aac:	e000      	b.n	90005ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
90005aae:	2302      	movs	r3, #2
  }
}
90005ab0:	4618      	mov	r0, r3
90005ab2:	3718      	adds	r7, #24
90005ab4:	46bd      	mov	sp, r7
90005ab6:	bd80      	pop	{r7, pc}
90005ab8:	fe00e800 	.word	0xfe00e800

90005abc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90005abc:	b580      	push	{r7, lr}
90005abe:	b088      	sub	sp, #32
90005ac0:	af02      	add	r7, sp, #8
90005ac2:	60f8      	str	r0, [r7, #12]
90005ac4:	4608      	mov	r0, r1
90005ac6:	4611      	mov	r1, r2
90005ac8:	461a      	mov	r2, r3
90005aca:	4603      	mov	r3, r0
90005acc:	817b      	strh	r3, [r7, #10]
90005ace:	460b      	mov	r3, r1
90005ad0:	813b      	strh	r3, [r7, #8]
90005ad2:	4613      	mov	r3, r2
90005ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
90005ad6:	68fb      	ldr	r3, [r7, #12]
90005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005adc:	b2db      	uxtb	r3, r3
90005ade:	2b20      	cmp	r3, #32
90005ae0:	f040 80fd 	bne.w	90005cde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
90005ae4:	6a3b      	ldr	r3, [r7, #32]
90005ae6:	2b00      	cmp	r3, #0
90005ae8:	d002      	beq.n	90005af0 <HAL_I2C_Mem_Read+0x34>
90005aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90005aec:	2b00      	cmp	r3, #0
90005aee:	d105      	bne.n	90005afc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90005af0:	68fb      	ldr	r3, [r7, #12]
90005af2:	f44f 7200 	mov.w	r2, #512	; 0x200
90005af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
90005af8:	2301      	movs	r3, #1
90005afa:	e0f1      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
90005afc:	68fb      	ldr	r3, [r7, #12]
90005afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90005b02:	2b01      	cmp	r3, #1
90005b04:	d101      	bne.n	90005b0a <HAL_I2C_Mem_Read+0x4e>
90005b06:	2302      	movs	r3, #2
90005b08:	e0ea      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
90005b0a:	68fb      	ldr	r3, [r7, #12]
90005b0c:	2201      	movs	r2, #1
90005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
90005b12:	f7fd fc59 	bl	900033c8 <HAL_GetTick>
90005b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005b18:	697b      	ldr	r3, [r7, #20]
90005b1a:	9300      	str	r3, [sp, #0]
90005b1c:	2319      	movs	r3, #25
90005b1e:	2201      	movs	r2, #1
90005b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90005b24:	68f8      	ldr	r0, [r7, #12]
90005b26:	f000 f9c9 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005b2a:	4603      	mov	r3, r0
90005b2c:	2b00      	cmp	r3, #0
90005b2e:	d001      	beq.n	90005b34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
90005b30:	2301      	movs	r3, #1
90005b32:	e0d5      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005b34:	68fb      	ldr	r3, [r7, #12]
90005b36:	2222      	movs	r2, #34	; 0x22
90005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90005b3c:	68fb      	ldr	r3, [r7, #12]
90005b3e:	2240      	movs	r2, #64	; 0x40
90005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005b44:	68fb      	ldr	r3, [r7, #12]
90005b46:	2200      	movs	r2, #0
90005b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
90005b4a:	68fb      	ldr	r3, [r7, #12]
90005b4c:	6a3a      	ldr	r2, [r7, #32]
90005b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
90005b50:	68fb      	ldr	r3, [r7, #12]
90005b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90005b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
90005b56:	68fb      	ldr	r3, [r7, #12]
90005b58:	2200      	movs	r2, #0
90005b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005b5c:	88f8      	ldrh	r0, [r7, #6]
90005b5e:	893a      	ldrh	r2, [r7, #8]
90005b60:	8979      	ldrh	r1, [r7, #10]
90005b62:	697b      	ldr	r3, [r7, #20]
90005b64:	9301      	str	r3, [sp, #4]
90005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005b68:	9300      	str	r3, [sp, #0]
90005b6a:	4603      	mov	r3, r0
90005b6c:	68f8      	ldr	r0, [r7, #12]
90005b6e:	f000 f92d 	bl	90005dcc <I2C_RequestMemoryRead>
90005b72:	4603      	mov	r3, r0
90005b74:	2b00      	cmp	r3, #0
90005b76:	d005      	beq.n	90005b84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
90005b78:	68fb      	ldr	r3, [r7, #12]
90005b7a:	2200      	movs	r2, #0
90005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
90005b80:	2301      	movs	r3, #1
90005b82:	e0ad      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005b84:	68fb      	ldr	r3, [r7, #12]
90005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005b88:	b29b      	uxth	r3, r3
90005b8a:	2bff      	cmp	r3, #255	; 0xff
90005b8c:	d90e      	bls.n	90005bac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005b8e:	68fb      	ldr	r3, [r7, #12]
90005b90:	22ff      	movs	r2, #255	; 0xff
90005b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
90005b94:	68fb      	ldr	r3, [r7, #12]
90005b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005b98:	b2da      	uxtb	r2, r3
90005b9a:	8979      	ldrh	r1, [r7, #10]
90005b9c:	4b52      	ldr	r3, [pc, #328]	; (90005ce8 <HAL_I2C_Mem_Read+0x22c>)
90005b9e:	9300      	str	r3, [sp, #0]
90005ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005ba4:	68f8      	ldr	r0, [r7, #12]
90005ba6:	f000 fb43 	bl	90006230 <I2C_TransferConfig>
90005baa:	e00f      	b.n	90005bcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
90005bac:	68fb      	ldr	r3, [r7, #12]
90005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005bb0:	b29a      	uxth	r2, r3
90005bb2:	68fb      	ldr	r3, [r7, #12]
90005bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005bb6:	68fb      	ldr	r3, [r7, #12]
90005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005bba:	b2da      	uxtb	r2, r3
90005bbc:	8979      	ldrh	r1, [r7, #10]
90005bbe:	4b4a      	ldr	r3, [pc, #296]	; (90005ce8 <HAL_I2C_Mem_Read+0x22c>)
90005bc0:	9300      	str	r3, [sp, #0]
90005bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005bc6:	68f8      	ldr	r0, [r7, #12]
90005bc8:	f000 fb32 	bl	90006230 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
90005bcc:	697b      	ldr	r3, [r7, #20]
90005bce:	9300      	str	r3, [sp, #0]
90005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005bd2:	2200      	movs	r2, #0
90005bd4:	2104      	movs	r1, #4
90005bd6:	68f8      	ldr	r0, [r7, #12]
90005bd8:	f000 f970 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005bdc:	4603      	mov	r3, r0
90005bde:	2b00      	cmp	r3, #0
90005be0:	d001      	beq.n	90005be6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
90005be2:	2301      	movs	r3, #1
90005be4:	e07c      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90005be6:	68fb      	ldr	r3, [r7, #12]
90005be8:	681b      	ldr	r3, [r3, #0]
90005bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90005bec:	68fb      	ldr	r3, [r7, #12]
90005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005bf0:	b2d2      	uxtb	r2, r2
90005bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
90005bf4:	68fb      	ldr	r3, [r7, #12]
90005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005bf8:	1c5a      	adds	r2, r3, #1
90005bfa:	68fb      	ldr	r3, [r7, #12]
90005bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
90005bfe:	68fb      	ldr	r3, [r7, #12]
90005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c02:	3b01      	subs	r3, #1
90005c04:	b29a      	uxth	r2, r3
90005c06:	68fb      	ldr	r3, [r7, #12]
90005c08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
90005c0a:	68fb      	ldr	r3, [r7, #12]
90005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c0e:	b29b      	uxth	r3, r3
90005c10:	3b01      	subs	r3, #1
90005c12:	b29a      	uxth	r2, r3
90005c14:	68fb      	ldr	r3, [r7, #12]
90005c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005c18:	68fb      	ldr	r3, [r7, #12]
90005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c1c:	b29b      	uxth	r3, r3
90005c1e:	2b00      	cmp	r3, #0
90005c20:	d034      	beq.n	90005c8c <HAL_I2C_Mem_Read+0x1d0>
90005c22:	68fb      	ldr	r3, [r7, #12]
90005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c26:	2b00      	cmp	r3, #0
90005c28:	d130      	bne.n	90005c8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005c2a:	697b      	ldr	r3, [r7, #20]
90005c2c:	9300      	str	r3, [sp, #0]
90005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005c30:	2200      	movs	r2, #0
90005c32:	2180      	movs	r1, #128	; 0x80
90005c34:	68f8      	ldr	r0, [r7, #12]
90005c36:	f000 f941 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005c3a:	4603      	mov	r3, r0
90005c3c:	2b00      	cmp	r3, #0
90005c3e:	d001      	beq.n	90005c44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
90005c40:	2301      	movs	r3, #1
90005c42:	e04d      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005c44:	68fb      	ldr	r3, [r7, #12]
90005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c48:	b29b      	uxth	r3, r3
90005c4a:	2bff      	cmp	r3, #255	; 0xff
90005c4c:	d90e      	bls.n	90005c6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005c4e:	68fb      	ldr	r3, [r7, #12]
90005c50:	22ff      	movs	r2, #255	; 0xff
90005c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
90005c54:	68fb      	ldr	r3, [r7, #12]
90005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c58:	b2da      	uxtb	r2, r3
90005c5a:	8979      	ldrh	r1, [r7, #10]
90005c5c:	2300      	movs	r3, #0
90005c5e:	9300      	str	r3, [sp, #0]
90005c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005c64:	68f8      	ldr	r0, [r7, #12]
90005c66:	f000 fae3 	bl	90006230 <I2C_TransferConfig>
90005c6a:	e00f      	b.n	90005c8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
90005c6c:	68fb      	ldr	r3, [r7, #12]
90005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c70:	b29a      	uxth	r2, r3
90005c72:	68fb      	ldr	r3, [r7, #12]
90005c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
90005c76:	68fb      	ldr	r3, [r7, #12]
90005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90005c7a:	b2da      	uxtb	r2, r3
90005c7c:	8979      	ldrh	r1, [r7, #10]
90005c7e:	2300      	movs	r3, #0
90005c80:	9300      	str	r3, [sp, #0]
90005c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005c86:	68f8      	ldr	r0, [r7, #12]
90005c88:	f000 fad2 	bl	90006230 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
90005c8c:	68fb      	ldr	r3, [r7, #12]
90005c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
90005c90:	b29b      	uxth	r3, r3
90005c92:	2b00      	cmp	r3, #0
90005c94:	d19a      	bne.n	90005bcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005c96:	697a      	ldr	r2, [r7, #20]
90005c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90005c9a:	68f8      	ldr	r0, [r7, #12]
90005c9c:	f000 f9a4 	bl	90005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
90005ca0:	4603      	mov	r3, r0
90005ca2:	2b00      	cmp	r3, #0
90005ca4:	d001      	beq.n	90005caa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
90005ca6:	2301      	movs	r3, #1
90005ca8:	e01a      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005caa:	68fb      	ldr	r3, [r7, #12]
90005cac:	681b      	ldr	r3, [r3, #0]
90005cae:	2220      	movs	r2, #32
90005cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90005cb2:	68fb      	ldr	r3, [r7, #12]
90005cb4:	681b      	ldr	r3, [r3, #0]
90005cb6:	6859      	ldr	r1, [r3, #4]
90005cb8:	68fb      	ldr	r3, [r7, #12]
90005cba:	681a      	ldr	r2, [r3, #0]
90005cbc:	4b0b      	ldr	r3, [pc, #44]	; (90005cec <HAL_I2C_Mem_Read+0x230>)
90005cbe:	400b      	ands	r3, r1
90005cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
90005cc2:	68fb      	ldr	r3, [r7, #12]
90005cc4:	2220      	movs	r2, #32
90005cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005cca:	68fb      	ldr	r3, [r7, #12]
90005ccc:	2200      	movs	r2, #0
90005cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90005cd2:	68fb      	ldr	r3, [r7, #12]
90005cd4:	2200      	movs	r2, #0
90005cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90005cda:	2300      	movs	r3, #0
90005cdc:	e000      	b.n	90005ce0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
90005cde:	2302      	movs	r3, #2
  }
}
90005ce0:	4618      	mov	r0, r3
90005ce2:	3718      	adds	r7, #24
90005ce4:	46bd      	mov	sp, r7
90005ce6:	bd80      	pop	{r7, pc}
90005ce8:	80002400 	.word	0x80002400
90005cec:	fe00e800 	.word	0xfe00e800

90005cf0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
90005cf0:	b480      	push	{r7}
90005cf2:	b083      	sub	sp, #12
90005cf4:	af00      	add	r7, sp, #0
90005cf6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
90005cf8:	687b      	ldr	r3, [r7, #4]
90005cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
90005cfe:	b2db      	uxtb	r3, r3
}
90005d00:	4618      	mov	r0, r3
90005d02:	370c      	adds	r7, #12
90005d04:	46bd      	mov	sp, r7
90005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d0a:	4770      	bx	lr

90005d0c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
90005d0c:	b480      	push	{r7}
90005d0e:	b083      	sub	sp, #12
90005d10:	af00      	add	r7, sp, #0
90005d12:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
90005d14:	687b      	ldr	r3, [r7, #4]
90005d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
90005d18:	4618      	mov	r0, r3
90005d1a:	370c      	adds	r7, #12
90005d1c:	46bd      	mov	sp, r7
90005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d22:	4770      	bx	lr

90005d24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
90005d24:	b580      	push	{r7, lr}
90005d26:	b086      	sub	sp, #24
90005d28:	af02      	add	r7, sp, #8
90005d2a:	60f8      	str	r0, [r7, #12]
90005d2c:	4608      	mov	r0, r1
90005d2e:	4611      	mov	r1, r2
90005d30:	461a      	mov	r2, r3
90005d32:	4603      	mov	r3, r0
90005d34:	817b      	strh	r3, [r7, #10]
90005d36:	460b      	mov	r3, r1
90005d38:	813b      	strh	r3, [r7, #8]
90005d3a:	4613      	mov	r3, r2
90005d3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90005d3e:	88fb      	ldrh	r3, [r7, #6]
90005d40:	b2da      	uxtb	r2, r3
90005d42:	8979      	ldrh	r1, [r7, #10]
90005d44:	4b20      	ldr	r3, [pc, #128]	; (90005dc8 <I2C_RequestMemoryWrite+0xa4>)
90005d46:	9300      	str	r3, [sp, #0]
90005d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
90005d4c:	68f8      	ldr	r0, [r7, #12]
90005d4e:	f000 fa6f 	bl	90006230 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d52:	69fa      	ldr	r2, [r7, #28]
90005d54:	69b9      	ldr	r1, [r7, #24]
90005d56:	68f8      	ldr	r0, [r7, #12]
90005d58:	f000 f8ff 	bl	90005f5a <I2C_WaitOnTXISFlagUntilTimeout>
90005d5c:	4603      	mov	r3, r0
90005d5e:	2b00      	cmp	r3, #0
90005d60:	d001      	beq.n	90005d66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
90005d62:	2301      	movs	r3, #1
90005d64:	e02c      	b.n	90005dc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005d66:	88fb      	ldrh	r3, [r7, #6]
90005d68:	2b01      	cmp	r3, #1
90005d6a:	d105      	bne.n	90005d78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d6c:	893b      	ldrh	r3, [r7, #8]
90005d6e:	b2da      	uxtb	r2, r3
90005d70:	68fb      	ldr	r3, [r7, #12]
90005d72:	681b      	ldr	r3, [r3, #0]
90005d74:	629a      	str	r2, [r3, #40]	; 0x28
90005d76:	e015      	b.n	90005da4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005d78:	893b      	ldrh	r3, [r7, #8]
90005d7a:	0a1b      	lsrs	r3, r3, #8
90005d7c:	b29b      	uxth	r3, r3
90005d7e:	b2da      	uxtb	r2, r3
90005d80:	68fb      	ldr	r3, [r7, #12]
90005d82:	681b      	ldr	r3, [r3, #0]
90005d84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005d86:	69fa      	ldr	r2, [r7, #28]
90005d88:	69b9      	ldr	r1, [r7, #24]
90005d8a:	68f8      	ldr	r0, [r7, #12]
90005d8c:	f000 f8e5 	bl	90005f5a <I2C_WaitOnTXISFlagUntilTimeout>
90005d90:	4603      	mov	r3, r0
90005d92:	2b00      	cmp	r3, #0
90005d94:	d001      	beq.n	90005d9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
90005d96:	2301      	movs	r3, #1
90005d98:	e012      	b.n	90005dc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005d9a:	893b      	ldrh	r3, [r7, #8]
90005d9c:	b2da      	uxtb	r2, r3
90005d9e:	68fb      	ldr	r3, [r7, #12]
90005da0:	681b      	ldr	r3, [r3, #0]
90005da2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
90005da4:	69fb      	ldr	r3, [r7, #28]
90005da6:	9300      	str	r3, [sp, #0]
90005da8:	69bb      	ldr	r3, [r7, #24]
90005daa:	2200      	movs	r2, #0
90005dac:	2180      	movs	r1, #128	; 0x80
90005dae:	68f8      	ldr	r0, [r7, #12]
90005db0:	f000 f884 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005db4:	4603      	mov	r3, r0
90005db6:	2b00      	cmp	r3, #0
90005db8:	d001      	beq.n	90005dbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
90005dba:	2301      	movs	r3, #1
90005dbc:	e000      	b.n	90005dc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
90005dbe:	2300      	movs	r3, #0
}
90005dc0:	4618      	mov	r0, r3
90005dc2:	3710      	adds	r7, #16
90005dc4:	46bd      	mov	sp, r7
90005dc6:	bd80      	pop	{r7, pc}
90005dc8:	80002000 	.word	0x80002000

90005dcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
90005dcc:	b580      	push	{r7, lr}
90005dce:	b086      	sub	sp, #24
90005dd0:	af02      	add	r7, sp, #8
90005dd2:	60f8      	str	r0, [r7, #12]
90005dd4:	4608      	mov	r0, r1
90005dd6:	4611      	mov	r1, r2
90005dd8:	461a      	mov	r2, r3
90005dda:	4603      	mov	r3, r0
90005ddc:	817b      	strh	r3, [r7, #10]
90005dde:	460b      	mov	r3, r1
90005de0:	813b      	strh	r3, [r7, #8]
90005de2:	4613      	mov	r3, r2
90005de4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005de6:	88fb      	ldrh	r3, [r7, #6]
90005de8:	b2da      	uxtb	r2, r3
90005dea:	8979      	ldrh	r1, [r7, #10]
90005dec:	4b20      	ldr	r3, [pc, #128]	; (90005e70 <I2C_RequestMemoryRead+0xa4>)
90005dee:	9300      	str	r3, [sp, #0]
90005df0:	2300      	movs	r3, #0
90005df2:	68f8      	ldr	r0, [r7, #12]
90005df4:	f000 fa1c 	bl	90006230 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005df8:	69fa      	ldr	r2, [r7, #28]
90005dfa:	69b9      	ldr	r1, [r7, #24]
90005dfc:	68f8      	ldr	r0, [r7, #12]
90005dfe:	f000 f8ac 	bl	90005f5a <I2C_WaitOnTXISFlagUntilTimeout>
90005e02:	4603      	mov	r3, r0
90005e04:	2b00      	cmp	r3, #0
90005e06:	d001      	beq.n	90005e0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
90005e08:	2301      	movs	r3, #1
90005e0a:	e02c      	b.n	90005e66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90005e0c:	88fb      	ldrh	r3, [r7, #6]
90005e0e:	2b01      	cmp	r3, #1
90005e10:	d105      	bne.n	90005e1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e12:	893b      	ldrh	r3, [r7, #8]
90005e14:	b2da      	uxtb	r2, r3
90005e16:	68fb      	ldr	r3, [r7, #12]
90005e18:	681b      	ldr	r3, [r3, #0]
90005e1a:	629a      	str	r2, [r3, #40]	; 0x28
90005e1c:	e015      	b.n	90005e4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005e1e:	893b      	ldrh	r3, [r7, #8]
90005e20:	0a1b      	lsrs	r3, r3, #8
90005e22:	b29b      	uxth	r3, r3
90005e24:	b2da      	uxtb	r2, r3
90005e26:	68fb      	ldr	r3, [r7, #12]
90005e28:	681b      	ldr	r3, [r3, #0]
90005e2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005e2c:	69fa      	ldr	r2, [r7, #28]
90005e2e:	69b9      	ldr	r1, [r7, #24]
90005e30:	68f8      	ldr	r0, [r7, #12]
90005e32:	f000 f892 	bl	90005f5a <I2C_WaitOnTXISFlagUntilTimeout>
90005e36:	4603      	mov	r3, r0
90005e38:	2b00      	cmp	r3, #0
90005e3a:	d001      	beq.n	90005e40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
90005e3c:	2301      	movs	r3, #1
90005e3e:	e012      	b.n	90005e66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005e40:	893b      	ldrh	r3, [r7, #8]
90005e42:	b2da      	uxtb	r2, r3
90005e44:	68fb      	ldr	r3, [r7, #12]
90005e46:	681b      	ldr	r3, [r3, #0]
90005e48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005e4a:	69fb      	ldr	r3, [r7, #28]
90005e4c:	9300      	str	r3, [sp, #0]
90005e4e:	69bb      	ldr	r3, [r7, #24]
90005e50:	2200      	movs	r2, #0
90005e52:	2140      	movs	r1, #64	; 0x40
90005e54:	68f8      	ldr	r0, [r7, #12]
90005e56:	f000 f831 	bl	90005ebc <I2C_WaitOnFlagUntilTimeout>
90005e5a:	4603      	mov	r3, r0
90005e5c:	2b00      	cmp	r3, #0
90005e5e:	d001      	beq.n	90005e64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
90005e60:	2301      	movs	r3, #1
90005e62:	e000      	b.n	90005e66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
90005e64:	2300      	movs	r3, #0
}
90005e66:	4618      	mov	r0, r3
90005e68:	3710      	adds	r7, #16
90005e6a:	46bd      	mov	sp, r7
90005e6c:	bd80      	pop	{r7, pc}
90005e6e:	bf00      	nop
90005e70:	80002000 	.word	0x80002000

90005e74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
90005e74:	b480      	push	{r7}
90005e76:	b083      	sub	sp, #12
90005e78:	af00      	add	r7, sp, #0
90005e7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90005e7c:	687b      	ldr	r3, [r7, #4]
90005e7e:	681b      	ldr	r3, [r3, #0]
90005e80:	699b      	ldr	r3, [r3, #24]
90005e82:	f003 0302 	and.w	r3, r3, #2
90005e86:	2b02      	cmp	r3, #2
90005e88:	d103      	bne.n	90005e92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
90005e8a:	687b      	ldr	r3, [r7, #4]
90005e8c:	681b      	ldr	r3, [r3, #0]
90005e8e:	2200      	movs	r2, #0
90005e90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90005e92:	687b      	ldr	r3, [r7, #4]
90005e94:	681b      	ldr	r3, [r3, #0]
90005e96:	699b      	ldr	r3, [r3, #24]
90005e98:	f003 0301 	and.w	r3, r3, #1
90005e9c:	2b01      	cmp	r3, #1
90005e9e:	d007      	beq.n	90005eb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90005ea0:	687b      	ldr	r3, [r7, #4]
90005ea2:	681b      	ldr	r3, [r3, #0]
90005ea4:	699a      	ldr	r2, [r3, #24]
90005ea6:	687b      	ldr	r3, [r7, #4]
90005ea8:	681b      	ldr	r3, [r3, #0]
90005eaa:	f042 0201 	orr.w	r2, r2, #1
90005eae:	619a      	str	r2, [r3, #24]
  }
}
90005eb0:	bf00      	nop
90005eb2:	370c      	adds	r7, #12
90005eb4:	46bd      	mov	sp, r7
90005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
90005eba:	4770      	bx	lr

90005ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
90005ebc:	b580      	push	{r7, lr}
90005ebe:	b084      	sub	sp, #16
90005ec0:	af00      	add	r7, sp, #0
90005ec2:	60f8      	str	r0, [r7, #12]
90005ec4:	60b9      	str	r1, [r7, #8]
90005ec6:	603b      	str	r3, [r7, #0]
90005ec8:	4613      	mov	r3, r2
90005eca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005ecc:	e031      	b.n	90005f32 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005ece:	683b      	ldr	r3, [r7, #0]
90005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005ed4:	d02d      	beq.n	90005f32 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005ed6:	f7fd fa77 	bl	900033c8 <HAL_GetTick>
90005eda:	4602      	mov	r2, r0
90005edc:	69bb      	ldr	r3, [r7, #24]
90005ede:	1ad3      	subs	r3, r2, r3
90005ee0:	683a      	ldr	r2, [r7, #0]
90005ee2:	429a      	cmp	r2, r3
90005ee4:	d302      	bcc.n	90005eec <I2C_WaitOnFlagUntilTimeout+0x30>
90005ee6:	683b      	ldr	r3, [r7, #0]
90005ee8:	2b00      	cmp	r3, #0
90005eea:	d122      	bne.n	90005f32 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90005eec:	68fb      	ldr	r3, [r7, #12]
90005eee:	681b      	ldr	r3, [r3, #0]
90005ef0:	699a      	ldr	r2, [r3, #24]
90005ef2:	68bb      	ldr	r3, [r7, #8]
90005ef4:	4013      	ands	r3, r2
90005ef6:	68ba      	ldr	r2, [r7, #8]
90005ef8:	429a      	cmp	r2, r3
90005efa:	bf0c      	ite	eq
90005efc:	2301      	moveq	r3, #1
90005efe:	2300      	movne	r3, #0
90005f00:	b2db      	uxtb	r3, r3
90005f02:	461a      	mov	r2, r3
90005f04:	79fb      	ldrb	r3, [r7, #7]
90005f06:	429a      	cmp	r2, r3
90005f08:	d113      	bne.n	90005f32 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005f0a:	68fb      	ldr	r3, [r7, #12]
90005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005f0e:	f043 0220 	orr.w	r2, r3, #32
90005f12:	68fb      	ldr	r3, [r7, #12]
90005f14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005f16:	68fb      	ldr	r3, [r7, #12]
90005f18:	2220      	movs	r2, #32
90005f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005f1e:	68fb      	ldr	r3, [r7, #12]
90005f20:	2200      	movs	r2, #0
90005f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005f26:	68fb      	ldr	r3, [r7, #12]
90005f28:	2200      	movs	r2, #0
90005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
90005f2e:	2301      	movs	r3, #1
90005f30:	e00f      	b.n	90005f52 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90005f32:	68fb      	ldr	r3, [r7, #12]
90005f34:	681b      	ldr	r3, [r3, #0]
90005f36:	699a      	ldr	r2, [r3, #24]
90005f38:	68bb      	ldr	r3, [r7, #8]
90005f3a:	4013      	ands	r3, r2
90005f3c:	68ba      	ldr	r2, [r7, #8]
90005f3e:	429a      	cmp	r2, r3
90005f40:	bf0c      	ite	eq
90005f42:	2301      	moveq	r3, #1
90005f44:	2300      	movne	r3, #0
90005f46:	b2db      	uxtb	r3, r3
90005f48:	461a      	mov	r2, r3
90005f4a:	79fb      	ldrb	r3, [r7, #7]
90005f4c:	429a      	cmp	r2, r3
90005f4e:	d0be      	beq.n	90005ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005f50:	2300      	movs	r3, #0
}
90005f52:	4618      	mov	r0, r3
90005f54:	3710      	adds	r7, #16
90005f56:	46bd      	mov	sp, r7
90005f58:	bd80      	pop	{r7, pc}

90005f5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005f5a:	b580      	push	{r7, lr}
90005f5c:	b084      	sub	sp, #16
90005f5e:	af00      	add	r7, sp, #0
90005f60:	60f8      	str	r0, [r7, #12]
90005f62:	60b9      	str	r1, [r7, #8]
90005f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005f66:	e033      	b.n	90005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005f68:	687a      	ldr	r2, [r7, #4]
90005f6a:	68b9      	ldr	r1, [r7, #8]
90005f6c:	68f8      	ldr	r0, [r7, #12]
90005f6e:	f000 f87f 	bl	90006070 <I2C_IsErrorOccurred>
90005f72:	4603      	mov	r3, r0
90005f74:	2b00      	cmp	r3, #0
90005f76:	d001      	beq.n	90005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90005f78:	2301      	movs	r3, #1
90005f7a:	e031      	b.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005f7c:	68bb      	ldr	r3, [r7, #8]
90005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005f82:	d025      	beq.n	90005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005f84:	f7fd fa20 	bl	900033c8 <HAL_GetTick>
90005f88:	4602      	mov	r2, r0
90005f8a:	687b      	ldr	r3, [r7, #4]
90005f8c:	1ad3      	subs	r3, r2, r3
90005f8e:	68ba      	ldr	r2, [r7, #8]
90005f90:	429a      	cmp	r2, r3
90005f92:	d302      	bcc.n	90005f9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
90005f94:	68bb      	ldr	r3, [r7, #8]
90005f96:	2b00      	cmp	r3, #0
90005f98:	d11a      	bne.n	90005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90005f9a:	68fb      	ldr	r3, [r7, #12]
90005f9c:	681b      	ldr	r3, [r3, #0]
90005f9e:	699b      	ldr	r3, [r3, #24]
90005fa0:	f003 0302 	and.w	r3, r3, #2
90005fa4:	2b02      	cmp	r3, #2
90005fa6:	d013      	beq.n	90005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005fa8:	68fb      	ldr	r3, [r7, #12]
90005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005fac:	f043 0220 	orr.w	r2, r3, #32
90005fb0:	68fb      	ldr	r3, [r7, #12]
90005fb2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005fb4:	68fb      	ldr	r3, [r7, #12]
90005fb6:	2220      	movs	r2, #32
90005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005fbc:	68fb      	ldr	r3, [r7, #12]
90005fbe:	2200      	movs	r2, #0
90005fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
90005fc4:	68fb      	ldr	r3, [r7, #12]
90005fc6:	2200      	movs	r2, #0
90005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
90005fcc:	2301      	movs	r3, #1
90005fce:	e007      	b.n	90005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005fd0:	68fb      	ldr	r3, [r7, #12]
90005fd2:	681b      	ldr	r3, [r3, #0]
90005fd4:	699b      	ldr	r3, [r3, #24]
90005fd6:	f003 0302 	and.w	r3, r3, #2
90005fda:	2b02      	cmp	r3, #2
90005fdc:	d1c4      	bne.n	90005f68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
90005fde:	2300      	movs	r3, #0
}
90005fe0:	4618      	mov	r0, r3
90005fe2:	3710      	adds	r7, #16
90005fe4:	46bd      	mov	sp, r7
90005fe6:	bd80      	pop	{r7, pc}

90005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90005fe8:	b580      	push	{r7, lr}
90005fea:	b084      	sub	sp, #16
90005fec:	af00      	add	r7, sp, #0
90005fee:	60f8      	str	r0, [r7, #12]
90005ff0:	60b9      	str	r1, [r7, #8]
90005ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005ff4:	e02f      	b.n	90006056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
90005ff6:	687a      	ldr	r2, [r7, #4]
90005ff8:	68b9      	ldr	r1, [r7, #8]
90005ffa:	68f8      	ldr	r0, [r7, #12]
90005ffc:	f000 f838 	bl	90006070 <I2C_IsErrorOccurred>
90006000:	4603      	mov	r3, r0
90006002:	2b00      	cmp	r3, #0
90006004:	d001      	beq.n	9000600a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
90006006:	2301      	movs	r3, #1
90006008:	e02d      	b.n	90006066 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000600a:	f7fd f9dd 	bl	900033c8 <HAL_GetTick>
9000600e:	4602      	mov	r2, r0
90006010:	687b      	ldr	r3, [r7, #4]
90006012:	1ad3      	subs	r3, r2, r3
90006014:	68ba      	ldr	r2, [r7, #8]
90006016:	429a      	cmp	r2, r3
90006018:	d302      	bcc.n	90006020 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
9000601a:	68bb      	ldr	r3, [r7, #8]
9000601c:	2b00      	cmp	r3, #0
9000601e:	d11a      	bne.n	90006056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90006020:	68fb      	ldr	r3, [r7, #12]
90006022:	681b      	ldr	r3, [r3, #0]
90006024:	699b      	ldr	r3, [r3, #24]
90006026:	f003 0320 	and.w	r3, r3, #32
9000602a:	2b20      	cmp	r3, #32
9000602c:	d013      	beq.n	90006056 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000602e:	68fb      	ldr	r3, [r7, #12]
90006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90006032:	f043 0220 	orr.w	r2, r3, #32
90006036:	68fb      	ldr	r3, [r7, #12]
90006038:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
9000603a:	68fb      	ldr	r3, [r7, #12]
9000603c:	2220      	movs	r2, #32
9000603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
90006042:	68fb      	ldr	r3, [r7, #12]
90006044:	2200      	movs	r2, #0
90006046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
9000604a:	68fb      	ldr	r3, [r7, #12]
9000604c:	2200      	movs	r2, #0
9000604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
90006052:	2301      	movs	r3, #1
90006054:	e007      	b.n	90006066 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90006056:	68fb      	ldr	r3, [r7, #12]
90006058:	681b      	ldr	r3, [r3, #0]
9000605a:	699b      	ldr	r3, [r3, #24]
9000605c:	f003 0320 	and.w	r3, r3, #32
90006060:	2b20      	cmp	r3, #32
90006062:	d1c8      	bne.n	90005ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
90006064:	2300      	movs	r3, #0
}
90006066:	4618      	mov	r0, r3
90006068:	3710      	adds	r7, #16
9000606a:	46bd      	mov	sp, r7
9000606c:	bd80      	pop	{r7, pc}
	...

90006070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
90006070:	b580      	push	{r7, lr}
90006072:	b08a      	sub	sp, #40	; 0x28
90006074:	af00      	add	r7, sp, #0
90006076:	60f8      	str	r0, [r7, #12]
90006078:	60b9      	str	r1, [r7, #8]
9000607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
9000607c:	2300      	movs	r3, #0
9000607e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
90006082:	68fb      	ldr	r3, [r7, #12]
90006084:	681b      	ldr	r3, [r3, #0]
90006086:	699b      	ldr	r3, [r3, #24]
90006088:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
9000608a:	2300      	movs	r3, #0
9000608c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
9000608e:	687b      	ldr	r3, [r7, #4]
90006090:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90006092:	69bb      	ldr	r3, [r7, #24]
90006094:	f003 0310 	and.w	r3, r3, #16
90006098:	2b00      	cmp	r3, #0
9000609a:	d068      	beq.n	9000616e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000609c:	68fb      	ldr	r3, [r7, #12]
9000609e:	681b      	ldr	r3, [r3, #0]
900060a0:	2210      	movs	r2, #16
900060a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900060a4:	e049      	b.n	9000613a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
900060a6:	68bb      	ldr	r3, [r7, #8]
900060a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900060ac:	d045      	beq.n	9000613a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900060ae:	f7fd f98b 	bl	900033c8 <HAL_GetTick>
900060b2:	4602      	mov	r2, r0
900060b4:	69fb      	ldr	r3, [r7, #28]
900060b6:	1ad3      	subs	r3, r2, r3
900060b8:	68ba      	ldr	r2, [r7, #8]
900060ba:	429a      	cmp	r2, r3
900060bc:	d302      	bcc.n	900060c4 <I2C_IsErrorOccurred+0x54>
900060be:	68bb      	ldr	r3, [r7, #8]
900060c0:	2b00      	cmp	r3, #0
900060c2:	d13a      	bne.n	9000613a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900060c4:	68fb      	ldr	r3, [r7, #12]
900060c6:	681b      	ldr	r3, [r3, #0]
900060c8:	685b      	ldr	r3, [r3, #4]
900060ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900060ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
900060d0:	68fb      	ldr	r3, [r7, #12]
900060d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900060d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900060d8:	68fb      	ldr	r3, [r7, #12]
900060da:	681b      	ldr	r3, [r3, #0]
900060dc:	699b      	ldr	r3, [r3, #24]
900060de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900060e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900060e6:	d121      	bne.n	9000612c <I2C_IsErrorOccurred+0xbc>
900060e8:	697b      	ldr	r3, [r7, #20]
900060ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900060ee:	d01d      	beq.n	9000612c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
900060f0:	7cfb      	ldrb	r3, [r7, #19]
900060f2:	2b20      	cmp	r3, #32
900060f4:	d01a      	beq.n	9000612c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900060f6:	68fb      	ldr	r3, [r7, #12]
900060f8:	681b      	ldr	r3, [r3, #0]
900060fa:	685a      	ldr	r2, [r3, #4]
900060fc:	68fb      	ldr	r3, [r7, #12]
900060fe:	681b      	ldr	r3, [r3, #0]
90006100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90006104:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
90006106:	f7fd f95f 	bl	900033c8 <HAL_GetTick>
9000610a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000610c:	e00e      	b.n	9000612c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000610e:	f7fd f95b 	bl	900033c8 <HAL_GetTick>
90006112:	4602      	mov	r2, r0
90006114:	69fb      	ldr	r3, [r7, #28]
90006116:	1ad3      	subs	r3, r2, r3
90006118:	2b19      	cmp	r3, #25
9000611a:	d907      	bls.n	9000612c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000611c:	6a3b      	ldr	r3, [r7, #32]
9000611e:	f043 0320 	orr.w	r3, r3, #32
90006122:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
90006124:	2301      	movs	r3, #1
90006126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
9000612a:	e006      	b.n	9000613a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000612c:	68fb      	ldr	r3, [r7, #12]
9000612e:	681b      	ldr	r3, [r3, #0]
90006130:	699b      	ldr	r3, [r3, #24]
90006132:	f003 0320 	and.w	r3, r3, #32
90006136:	2b20      	cmp	r3, #32
90006138:	d1e9      	bne.n	9000610e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000613a:	68fb      	ldr	r3, [r7, #12]
9000613c:	681b      	ldr	r3, [r3, #0]
9000613e:	699b      	ldr	r3, [r3, #24]
90006140:	f003 0320 	and.w	r3, r3, #32
90006144:	2b20      	cmp	r3, #32
90006146:	d003      	beq.n	90006150 <I2C_IsErrorOccurred+0xe0>
90006148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000614c:	2b00      	cmp	r3, #0
9000614e:	d0aa      	beq.n	900060a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
90006150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90006154:	2b00      	cmp	r3, #0
90006156:	d103      	bne.n	90006160 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90006158:	68fb      	ldr	r3, [r7, #12]
9000615a:	681b      	ldr	r3, [r3, #0]
9000615c:	2220      	movs	r2, #32
9000615e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90006160:	6a3b      	ldr	r3, [r7, #32]
90006162:	f043 0304 	orr.w	r3, r3, #4
90006166:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
90006168:	2301      	movs	r3, #1
9000616a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000616e:	68fb      	ldr	r3, [r7, #12]
90006170:	681b      	ldr	r3, [r3, #0]
90006172:	699b      	ldr	r3, [r3, #24]
90006174:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90006176:	69bb      	ldr	r3, [r7, #24]
90006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000617c:	2b00      	cmp	r3, #0
9000617e:	d00b      	beq.n	90006198 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
90006180:	6a3b      	ldr	r3, [r7, #32]
90006182:	f043 0301 	orr.w	r3, r3, #1
90006186:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90006188:	68fb      	ldr	r3, [r7, #12]
9000618a:	681b      	ldr	r3, [r3, #0]
9000618c:	f44f 7280 	mov.w	r2, #256	; 0x100
90006190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
90006192:	2301      	movs	r3, #1
90006194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90006198:	69bb      	ldr	r3, [r7, #24]
9000619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
9000619e:	2b00      	cmp	r3, #0
900061a0:	d00b      	beq.n	900061ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
900061a2:	6a3b      	ldr	r3, [r7, #32]
900061a4:	f043 0308 	orr.w	r3, r3, #8
900061a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900061aa:	68fb      	ldr	r3, [r7, #12]
900061ac:	681b      	ldr	r3, [r3, #0]
900061ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
900061b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061b4:	2301      	movs	r3, #1
900061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900061ba:	69bb      	ldr	r3, [r7, #24]
900061bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
900061c0:	2b00      	cmp	r3, #0
900061c2:	d00b      	beq.n	900061dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
900061c4:	6a3b      	ldr	r3, [r7, #32]
900061c6:	f043 0302 	orr.w	r3, r3, #2
900061ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
900061cc:	68fb      	ldr	r3, [r7, #12]
900061ce:	681b      	ldr	r3, [r3, #0]
900061d0:	f44f 7200 	mov.w	r2, #512	; 0x200
900061d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
900061d6:	2301      	movs	r3, #1
900061d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
900061dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
900061e0:	2b00      	cmp	r3, #0
900061e2:	d01c      	beq.n	9000621e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
900061e4:	68f8      	ldr	r0, [r7, #12]
900061e6:	f7ff fe45 	bl	90005e74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
900061ea:	68fb      	ldr	r3, [r7, #12]
900061ec:	681b      	ldr	r3, [r3, #0]
900061ee:	6859      	ldr	r1, [r3, #4]
900061f0:	68fb      	ldr	r3, [r7, #12]
900061f2:	681a      	ldr	r2, [r3, #0]
900061f4:	4b0d      	ldr	r3, [pc, #52]	; (9000622c <I2C_IsErrorOccurred+0x1bc>)
900061f6:	400b      	ands	r3, r1
900061f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
900061fa:	68fb      	ldr	r3, [r7, #12]
900061fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900061fe:	6a3b      	ldr	r3, [r7, #32]
90006200:	431a      	orrs	r2, r3
90006202:	68fb      	ldr	r3, [r7, #12]
90006204:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90006206:	68fb      	ldr	r3, [r7, #12]
90006208:	2220      	movs	r2, #32
9000620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000620e:	68fb      	ldr	r3, [r7, #12]
90006210:	2200      	movs	r2, #0
90006212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006216:	68fb      	ldr	r3, [r7, #12]
90006218:	2200      	movs	r2, #0
9000621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
9000621e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
90006222:	4618      	mov	r0, r3
90006224:	3728      	adds	r7, #40	; 0x28
90006226:	46bd      	mov	sp, r7
90006228:	bd80      	pop	{r7, pc}
9000622a:	bf00      	nop
9000622c:	fe00e800 	.word	0xfe00e800

90006230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90006230:	b480      	push	{r7}
90006232:	b087      	sub	sp, #28
90006234:	af00      	add	r7, sp, #0
90006236:	60f8      	str	r0, [r7, #12]
90006238:	607b      	str	r3, [r7, #4]
9000623a:	460b      	mov	r3, r1
9000623c:	817b      	strh	r3, [r7, #10]
9000623e:	4613      	mov	r3, r2
90006240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006242:	897b      	ldrh	r3, [r7, #10]
90006244:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006248:	7a7b      	ldrb	r3, [r7, #9]
9000624a:	041b      	lsls	r3, r3, #16
9000624c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006250:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90006252:	687b      	ldr	r3, [r7, #4]
90006254:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90006256:	6a3b      	ldr	r3, [r7, #32]
90006258:	4313      	orrs	r3, r2
9000625a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
9000625e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90006260:	68fb      	ldr	r3, [r7, #12]
90006262:	681b      	ldr	r3, [r3, #0]
90006264:	685a      	ldr	r2, [r3, #4]
90006266:	6a3b      	ldr	r3, [r7, #32]
90006268:	0d5b      	lsrs	r3, r3, #21
9000626a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
9000626e:	4b08      	ldr	r3, [pc, #32]	; (90006290 <I2C_TransferConfig+0x60>)
90006270:	430b      	orrs	r3, r1
90006272:	43db      	mvns	r3, r3
90006274:	ea02 0103 	and.w	r1, r2, r3
90006278:	68fb      	ldr	r3, [r7, #12]
9000627a:	681b      	ldr	r3, [r3, #0]
9000627c:	697a      	ldr	r2, [r7, #20]
9000627e:	430a      	orrs	r2, r1
90006280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90006282:	bf00      	nop
90006284:	371c      	adds	r7, #28
90006286:	46bd      	mov	sp, r7
90006288:	f85d 7b04 	ldr.w	r7, [sp], #4
9000628c:	4770      	bx	lr
9000628e:	bf00      	nop
90006290:	03ff63ff 	.word	0x03ff63ff

90006294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
90006294:	b480      	push	{r7}
90006296:	b083      	sub	sp, #12
90006298:	af00      	add	r7, sp, #0
9000629a:	6078      	str	r0, [r7, #4]
9000629c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000629e:	687b      	ldr	r3, [r7, #4]
900062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
900062a4:	b2db      	uxtb	r3, r3
900062a6:	2b20      	cmp	r3, #32
900062a8:	d138      	bne.n	9000631c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900062aa:	687b      	ldr	r3, [r7, #4]
900062ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
900062b0:	2b01      	cmp	r3, #1
900062b2:	d101      	bne.n	900062b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
900062b4:	2302      	movs	r3, #2
900062b6:	e032      	b.n	9000631e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
900062b8:	687b      	ldr	r3, [r7, #4]
900062ba:	2201      	movs	r2, #1
900062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
900062c0:	687b      	ldr	r3, [r7, #4]
900062c2:	2224      	movs	r2, #36	; 0x24
900062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900062c8:	687b      	ldr	r3, [r7, #4]
900062ca:	681b      	ldr	r3, [r3, #0]
900062cc:	681a      	ldr	r2, [r3, #0]
900062ce:	687b      	ldr	r3, [r7, #4]
900062d0:	681b      	ldr	r3, [r3, #0]
900062d2:	f022 0201 	bic.w	r2, r2, #1
900062d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900062d8:	687b      	ldr	r3, [r7, #4]
900062da:	681b      	ldr	r3, [r3, #0]
900062dc:	681a      	ldr	r2, [r3, #0]
900062de:	687b      	ldr	r3, [r7, #4]
900062e0:	681b      	ldr	r3, [r3, #0]
900062e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
900062e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
900062e8:	687b      	ldr	r3, [r7, #4]
900062ea:	681b      	ldr	r3, [r3, #0]
900062ec:	6819      	ldr	r1, [r3, #0]
900062ee:	687b      	ldr	r3, [r7, #4]
900062f0:	681b      	ldr	r3, [r3, #0]
900062f2:	683a      	ldr	r2, [r7, #0]
900062f4:	430a      	orrs	r2, r1
900062f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
900062f8:	687b      	ldr	r3, [r7, #4]
900062fa:	681b      	ldr	r3, [r3, #0]
900062fc:	681a      	ldr	r2, [r3, #0]
900062fe:	687b      	ldr	r3, [r7, #4]
90006300:	681b      	ldr	r3, [r3, #0]
90006302:	f042 0201 	orr.w	r2, r2, #1
90006306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
90006308:	687b      	ldr	r3, [r7, #4]
9000630a:	2220      	movs	r2, #32
9000630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90006310:	687b      	ldr	r3, [r7, #4]
90006312:	2200      	movs	r2, #0
90006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
90006318:	2300      	movs	r3, #0
9000631a:	e000      	b.n	9000631e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
9000631c:	2302      	movs	r3, #2
  }
}
9000631e:	4618      	mov	r0, r3
90006320:	370c      	adds	r7, #12
90006322:	46bd      	mov	sp, r7
90006324:	f85d 7b04 	ldr.w	r7, [sp], #4
90006328:	4770      	bx	lr

9000632a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
9000632a:	b480      	push	{r7}
9000632c:	b085      	sub	sp, #20
9000632e:	af00      	add	r7, sp, #0
90006330:	6078      	str	r0, [r7, #4]
90006332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90006334:	687b      	ldr	r3, [r7, #4]
90006336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
9000633a:	b2db      	uxtb	r3, r3
9000633c:	2b20      	cmp	r3, #32
9000633e:	d139      	bne.n	900063b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90006340:	687b      	ldr	r3, [r7, #4]
90006342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90006346:	2b01      	cmp	r3, #1
90006348:	d101      	bne.n	9000634e <HAL_I2CEx_ConfigDigitalFilter+0x24>
9000634a:	2302      	movs	r3, #2
9000634c:	e033      	b.n	900063b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
9000634e:	687b      	ldr	r3, [r7, #4]
90006350:	2201      	movs	r2, #1
90006352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
90006356:	687b      	ldr	r3, [r7, #4]
90006358:	2224      	movs	r2, #36	; 0x24
9000635a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000635e:	687b      	ldr	r3, [r7, #4]
90006360:	681b      	ldr	r3, [r3, #0]
90006362:	681a      	ldr	r2, [r3, #0]
90006364:	687b      	ldr	r3, [r7, #4]
90006366:	681b      	ldr	r3, [r3, #0]
90006368:	f022 0201 	bic.w	r2, r2, #1
9000636c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
9000636e:	687b      	ldr	r3, [r7, #4]
90006370:	681b      	ldr	r3, [r3, #0]
90006372:	681b      	ldr	r3, [r3, #0]
90006374:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
90006376:	68fb      	ldr	r3, [r7, #12]
90006378:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000637c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
9000637e:	683b      	ldr	r3, [r7, #0]
90006380:	021b      	lsls	r3, r3, #8
90006382:	68fa      	ldr	r2, [r7, #12]
90006384:	4313      	orrs	r3, r2
90006386:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
90006388:	687b      	ldr	r3, [r7, #4]
9000638a:	681b      	ldr	r3, [r3, #0]
9000638c:	68fa      	ldr	r2, [r7, #12]
9000638e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
90006390:	687b      	ldr	r3, [r7, #4]
90006392:	681b      	ldr	r3, [r3, #0]
90006394:	681a      	ldr	r2, [r3, #0]
90006396:	687b      	ldr	r3, [r7, #4]
90006398:	681b      	ldr	r3, [r3, #0]
9000639a:	f042 0201 	orr.w	r2, r2, #1
9000639e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
900063a0:	687b      	ldr	r3, [r7, #4]
900063a2:	2220      	movs	r2, #32
900063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900063a8:	687b      	ldr	r3, [r7, #4]
900063aa:	2200      	movs	r2, #0
900063ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
900063b0:	2300      	movs	r3, #0
900063b2:	e000      	b.n	900063b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
900063b4:	2302      	movs	r3, #2
  }
}
900063b6:	4618      	mov	r0, r3
900063b8:	3714      	adds	r7, #20
900063ba:	46bd      	mov	sp, r7
900063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
900063c0:	4770      	bx	lr
	...

900063c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
900063c4:	b580      	push	{r7, lr}
900063c6:	b084      	sub	sp, #16
900063c8:	af00      	add	r7, sp, #0
900063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
900063cc:	687b      	ldr	r3, [r7, #4]
900063ce:	2b00      	cmp	r3, #0
900063d0:	d101      	bne.n	900063d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
900063d2:	2301      	movs	r3, #1
900063d4:	e0bf      	b.n	90006556 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
900063d6:	687b      	ldr	r3, [r7, #4]
900063d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
900063dc:	b2db      	uxtb	r3, r3
900063de:	2b00      	cmp	r3, #0
900063e0:	d106      	bne.n	900063f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
900063e2:	687b      	ldr	r3, [r7, #4]
900063e4:	2200      	movs	r2, #0
900063e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
900063ea:	6878      	ldr	r0, [r7, #4]
900063ec:	f000 f8ba 	bl	90006564 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
900063f0:	687b      	ldr	r3, [r7, #4]
900063f2:	2202      	movs	r2, #2
900063f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
900063f8:	687b      	ldr	r3, [r7, #4]
900063fa:	681b      	ldr	r3, [r3, #0]
900063fc:	699a      	ldr	r2, [r3, #24]
900063fe:	687b      	ldr	r3, [r7, #4]
90006400:	681b      	ldr	r3, [r3, #0]
90006402:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90006406:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006408:	687b      	ldr	r3, [r7, #4]
9000640a:	681b      	ldr	r3, [r3, #0]
9000640c:	6999      	ldr	r1, [r3, #24]
9000640e:	687b      	ldr	r3, [r7, #4]
90006410:	685a      	ldr	r2, [r3, #4]
90006412:	687b      	ldr	r3, [r7, #4]
90006414:	689b      	ldr	r3, [r3, #8]
90006416:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90006418:	687b      	ldr	r3, [r7, #4]
9000641a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000641c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000641e:	687b      	ldr	r3, [r7, #4]
90006420:	691b      	ldr	r3, [r3, #16]
90006422:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90006424:	687b      	ldr	r3, [r7, #4]
90006426:	681b      	ldr	r3, [r3, #0]
90006428:	430a      	orrs	r2, r1
9000642a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000642c:	687b      	ldr	r3, [r7, #4]
9000642e:	681b      	ldr	r3, [r3, #0]
90006430:	6899      	ldr	r1, [r3, #8]
90006432:	687b      	ldr	r3, [r7, #4]
90006434:	681a      	ldr	r2, [r3, #0]
90006436:	4b4a      	ldr	r3, [pc, #296]	; (90006560 <HAL_LTDC_Init+0x19c>)
90006438:	400b      	ands	r3, r1
9000643a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000643c:	687b      	ldr	r3, [r7, #4]
9000643e:	695b      	ldr	r3, [r3, #20]
90006440:	041b      	lsls	r3, r3, #16
90006442:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90006444:	687b      	ldr	r3, [r7, #4]
90006446:	681b      	ldr	r3, [r3, #0]
90006448:	6899      	ldr	r1, [r3, #8]
9000644a:	687b      	ldr	r3, [r7, #4]
9000644c:	699a      	ldr	r2, [r3, #24]
9000644e:	68fb      	ldr	r3, [r7, #12]
90006450:	431a      	orrs	r2, r3
90006452:	687b      	ldr	r3, [r7, #4]
90006454:	681b      	ldr	r3, [r3, #0]
90006456:	430a      	orrs	r2, r1
90006458:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000645a:	687b      	ldr	r3, [r7, #4]
9000645c:	681b      	ldr	r3, [r3, #0]
9000645e:	68d9      	ldr	r1, [r3, #12]
90006460:	687b      	ldr	r3, [r7, #4]
90006462:	681a      	ldr	r2, [r3, #0]
90006464:	4b3e      	ldr	r3, [pc, #248]	; (90006560 <HAL_LTDC_Init+0x19c>)
90006466:	400b      	ands	r3, r1
90006468:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000646a:	687b      	ldr	r3, [r7, #4]
9000646c:	69db      	ldr	r3, [r3, #28]
9000646e:	041b      	lsls	r3, r3, #16
90006470:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90006472:	687b      	ldr	r3, [r7, #4]
90006474:	681b      	ldr	r3, [r3, #0]
90006476:	68d9      	ldr	r1, [r3, #12]
90006478:	687b      	ldr	r3, [r7, #4]
9000647a:	6a1a      	ldr	r2, [r3, #32]
9000647c:	68fb      	ldr	r3, [r7, #12]
9000647e:	431a      	orrs	r2, r3
90006480:	687b      	ldr	r3, [r7, #4]
90006482:	681b      	ldr	r3, [r3, #0]
90006484:	430a      	orrs	r2, r1
90006486:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90006488:	687b      	ldr	r3, [r7, #4]
9000648a:	681b      	ldr	r3, [r3, #0]
9000648c:	6919      	ldr	r1, [r3, #16]
9000648e:	687b      	ldr	r3, [r7, #4]
90006490:	681a      	ldr	r2, [r3, #0]
90006492:	4b33      	ldr	r3, [pc, #204]	; (90006560 <HAL_LTDC_Init+0x19c>)
90006494:	400b      	ands	r3, r1
90006496:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90006498:	687b      	ldr	r3, [r7, #4]
9000649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000649c:	041b      	lsls	r3, r3, #16
9000649e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
900064a0:	687b      	ldr	r3, [r7, #4]
900064a2:	681b      	ldr	r3, [r3, #0]
900064a4:	6919      	ldr	r1, [r3, #16]
900064a6:	687b      	ldr	r3, [r7, #4]
900064a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900064aa:	68fb      	ldr	r3, [r7, #12]
900064ac:	431a      	orrs	r2, r3
900064ae:	687b      	ldr	r3, [r7, #4]
900064b0:	681b      	ldr	r3, [r3, #0]
900064b2:	430a      	orrs	r2, r1
900064b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
900064b6:	687b      	ldr	r3, [r7, #4]
900064b8:	681b      	ldr	r3, [r3, #0]
900064ba:	6959      	ldr	r1, [r3, #20]
900064bc:	687b      	ldr	r3, [r7, #4]
900064be:	681a      	ldr	r2, [r3, #0]
900064c0:	4b27      	ldr	r3, [pc, #156]	; (90006560 <HAL_LTDC_Init+0x19c>)
900064c2:	400b      	ands	r3, r1
900064c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
900064c6:	687b      	ldr	r3, [r7, #4]
900064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900064ca:	041b      	lsls	r3, r3, #16
900064cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
900064ce:	687b      	ldr	r3, [r7, #4]
900064d0:	681b      	ldr	r3, [r3, #0]
900064d2:	6959      	ldr	r1, [r3, #20]
900064d4:	687b      	ldr	r3, [r7, #4]
900064d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900064d8:	68fb      	ldr	r3, [r7, #12]
900064da:	431a      	orrs	r2, r3
900064dc:	687b      	ldr	r3, [r7, #4]
900064de:	681b      	ldr	r3, [r3, #0]
900064e0:	430a      	orrs	r2, r1
900064e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
900064e4:	687b      	ldr	r3, [r7, #4]
900064e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
900064ea:	021b      	lsls	r3, r3, #8
900064ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
900064ee:	687b      	ldr	r3, [r7, #4]
900064f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
900064f4:	041b      	lsls	r3, r3, #16
900064f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
900064f8:	687b      	ldr	r3, [r7, #4]
900064fa:	681b      	ldr	r3, [r3, #0]
900064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900064fe:	687b      	ldr	r3, [r7, #4]
90006500:	681b      	ldr	r3, [r3, #0]
90006502:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
90006506:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90006508:	687b      	ldr	r3, [r7, #4]
9000650a:	681b      	ldr	r3, [r3, #0]
9000650c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000650e:	68ba      	ldr	r2, [r7, #8]
90006510:	68fb      	ldr	r3, [r7, #12]
90006512:	4313      	orrs	r3, r2
90006514:	687a      	ldr	r2, [r7, #4]
90006516:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
9000651a:	431a      	orrs	r2, r3
9000651c:	687b      	ldr	r3, [r7, #4]
9000651e:	681b      	ldr	r3, [r3, #0]
90006520:	430a      	orrs	r2, r1
90006522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90006524:	687b      	ldr	r3, [r7, #4]
90006526:	681b      	ldr	r3, [r3, #0]
90006528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000652a:	687b      	ldr	r3, [r7, #4]
9000652c:	681b      	ldr	r3, [r3, #0]
9000652e:	f042 0206 	orr.w	r2, r2, #6
90006532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
90006534:	687b      	ldr	r3, [r7, #4]
90006536:	681b      	ldr	r3, [r3, #0]
90006538:	699a      	ldr	r2, [r3, #24]
9000653a:	687b      	ldr	r3, [r7, #4]
9000653c:	681b      	ldr	r3, [r3, #0]
9000653e:	f042 0201 	orr.w	r2, r2, #1
90006542:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90006544:	687b      	ldr	r3, [r7, #4]
90006546:	2200      	movs	r2, #0
90006548:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000654c:	687b      	ldr	r3, [r7, #4]
9000654e:	2201      	movs	r2, #1
90006550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
90006554:	2300      	movs	r3, #0
}
90006556:	4618      	mov	r0, r3
90006558:	3710      	adds	r7, #16
9000655a:	46bd      	mov	sp, r7
9000655c:	bd80      	pop	{r7, pc}
9000655e:	bf00      	nop
90006560:	f000f800 	.word	0xf000f800

90006564 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
90006564:	b480      	push	{r7}
90006566:	b083      	sub	sp, #12
90006568:	af00      	add	r7, sp, #0
9000656a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
9000656c:	bf00      	nop
9000656e:	370c      	adds	r7, #12
90006570:	46bd      	mov	sp, r7
90006572:	f85d 7b04 	ldr.w	r7, [sp], #4
90006576:	4770      	bx	lr

90006578 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
90006578:	b5b0      	push	{r4, r5, r7, lr}
9000657a:	b084      	sub	sp, #16
9000657c:	af00      	add	r7, sp, #0
9000657e:	60f8      	str	r0, [r7, #12]
90006580:	60b9      	str	r1, [r7, #8]
90006582:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90006584:	68fb      	ldr	r3, [r7, #12]
90006586:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
9000658a:	2b01      	cmp	r3, #1
9000658c:	d101      	bne.n	90006592 <HAL_LTDC_ConfigLayer+0x1a>
9000658e:	2302      	movs	r3, #2
90006590:	e02c      	b.n	900065ec <HAL_LTDC_ConfigLayer+0x74>
90006592:	68fb      	ldr	r3, [r7, #12]
90006594:	2201      	movs	r2, #1
90006596:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000659a:	68fb      	ldr	r3, [r7, #12]
9000659c:	2202      	movs	r2, #2
9000659e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
900065a2:	68fa      	ldr	r2, [r7, #12]
900065a4:	687b      	ldr	r3, [r7, #4]
900065a6:	2134      	movs	r1, #52	; 0x34
900065a8:	fb01 f303 	mul.w	r3, r1, r3
900065ac:	4413      	add	r3, r2
900065ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
900065b2:	68bb      	ldr	r3, [r7, #8]
900065b4:	4614      	mov	r4, r2
900065b6:	461d      	mov	r5, r3
900065b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900065c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900065c4:	682b      	ldr	r3, [r5, #0]
900065c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
900065c8:	687a      	ldr	r2, [r7, #4]
900065ca:	68b9      	ldr	r1, [r7, #8]
900065cc:	68f8      	ldr	r0, [r7, #12]
900065ce:	f000 f811 	bl	900065f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
900065d2:	68fb      	ldr	r3, [r7, #12]
900065d4:	681b      	ldr	r3, [r3, #0]
900065d6:	2201      	movs	r2, #1
900065d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
900065da:	68fb      	ldr	r3, [r7, #12]
900065dc:	2201      	movs	r2, #1
900065de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
900065e2:	68fb      	ldr	r3, [r7, #12]
900065e4:	2200      	movs	r2, #0
900065e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
900065ea:	2300      	movs	r3, #0
}
900065ec:	4618      	mov	r0, r3
900065ee:	3710      	adds	r7, #16
900065f0:	46bd      	mov	sp, r7
900065f2:	bdb0      	pop	{r4, r5, r7, pc}

900065f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
900065f4:	b480      	push	{r7}
900065f6:	b089      	sub	sp, #36	; 0x24
900065f8:	af00      	add	r7, sp, #0
900065fa:	60f8      	str	r0, [r7, #12]
900065fc:	60b9      	str	r1, [r7, #8]
900065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90006600:	68bb      	ldr	r3, [r7, #8]
90006602:	685a      	ldr	r2, [r3, #4]
90006604:	68fb      	ldr	r3, [r7, #12]
90006606:	681b      	ldr	r3, [r3, #0]
90006608:	68db      	ldr	r3, [r3, #12]
9000660a:	0c1b      	lsrs	r3, r3, #16
9000660c:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006610:	4413      	add	r3, r2
90006612:	041b      	lsls	r3, r3, #16
90006614:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90006616:	68fb      	ldr	r3, [r7, #12]
90006618:	681b      	ldr	r3, [r3, #0]
9000661a:	461a      	mov	r2, r3
9000661c:	687b      	ldr	r3, [r7, #4]
9000661e:	01db      	lsls	r3, r3, #7
90006620:	4413      	add	r3, r2
90006622:	3384      	adds	r3, #132	; 0x84
90006624:	685b      	ldr	r3, [r3, #4]
90006626:	68fa      	ldr	r2, [r7, #12]
90006628:	6812      	ldr	r2, [r2, #0]
9000662a:	4611      	mov	r1, r2
9000662c:	687a      	ldr	r2, [r7, #4]
9000662e:	01d2      	lsls	r2, r2, #7
90006630:	440a      	add	r2, r1
90006632:	3284      	adds	r2, #132	; 0x84
90006634:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90006638:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000663a:	68bb      	ldr	r3, [r7, #8]
9000663c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000663e:	68fb      	ldr	r3, [r7, #12]
90006640:	681b      	ldr	r3, [r3, #0]
90006642:	68db      	ldr	r3, [r3, #12]
90006644:	0c1b      	lsrs	r3, r3, #16
90006646:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000664a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000664c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000664e:	68fb      	ldr	r3, [r7, #12]
90006650:	681b      	ldr	r3, [r3, #0]
90006652:	4619      	mov	r1, r3
90006654:	687b      	ldr	r3, [r7, #4]
90006656:	01db      	lsls	r3, r3, #7
90006658:	440b      	add	r3, r1
9000665a:	3384      	adds	r3, #132	; 0x84
9000665c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000665e:	69fb      	ldr	r3, [r7, #28]
90006660:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90006662:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90006664:	68bb      	ldr	r3, [r7, #8]
90006666:	68da      	ldr	r2, [r3, #12]
90006668:	68fb      	ldr	r3, [r7, #12]
9000666a:	681b      	ldr	r3, [r3, #0]
9000666c:	68db      	ldr	r3, [r3, #12]
9000666e:	f3c3 030a 	ubfx	r3, r3, #0, #11
90006672:	4413      	add	r3, r2
90006674:	041b      	lsls	r3, r3, #16
90006676:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90006678:	68fb      	ldr	r3, [r7, #12]
9000667a:	681b      	ldr	r3, [r3, #0]
9000667c:	461a      	mov	r2, r3
9000667e:	687b      	ldr	r3, [r7, #4]
90006680:	01db      	lsls	r3, r3, #7
90006682:	4413      	add	r3, r2
90006684:	3384      	adds	r3, #132	; 0x84
90006686:	689b      	ldr	r3, [r3, #8]
90006688:	68fa      	ldr	r2, [r7, #12]
9000668a:	6812      	ldr	r2, [r2, #0]
9000668c:	4611      	mov	r1, r2
9000668e:	687a      	ldr	r2, [r7, #4]
90006690:	01d2      	lsls	r2, r2, #7
90006692:	440a      	add	r2, r1
90006694:	3284      	adds	r2, #132	; 0x84
90006696:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000669a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000669c:	68bb      	ldr	r3, [r7, #8]
9000669e:	689a      	ldr	r2, [r3, #8]
900066a0:	68fb      	ldr	r3, [r7, #12]
900066a2:	681b      	ldr	r3, [r3, #0]
900066a4:	68db      	ldr	r3, [r3, #12]
900066a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
900066aa:	4413      	add	r3, r2
900066ac:	1c5a      	adds	r2, r3, #1
900066ae:	68fb      	ldr	r3, [r7, #12]
900066b0:	681b      	ldr	r3, [r3, #0]
900066b2:	4619      	mov	r1, r3
900066b4:	687b      	ldr	r3, [r7, #4]
900066b6:	01db      	lsls	r3, r3, #7
900066b8:	440b      	add	r3, r1
900066ba:	3384      	adds	r3, #132	; 0x84
900066bc:	4619      	mov	r1, r3
900066be:	69fb      	ldr	r3, [r7, #28]
900066c0:	4313      	orrs	r3, r2
900066c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
900066c4:	68fb      	ldr	r3, [r7, #12]
900066c6:	681b      	ldr	r3, [r3, #0]
900066c8:	461a      	mov	r2, r3
900066ca:	687b      	ldr	r3, [r7, #4]
900066cc:	01db      	lsls	r3, r3, #7
900066ce:	4413      	add	r3, r2
900066d0:	3384      	adds	r3, #132	; 0x84
900066d2:	691b      	ldr	r3, [r3, #16]
900066d4:	68fa      	ldr	r2, [r7, #12]
900066d6:	6812      	ldr	r2, [r2, #0]
900066d8:	4611      	mov	r1, r2
900066da:	687a      	ldr	r2, [r7, #4]
900066dc:	01d2      	lsls	r2, r2, #7
900066de:	440a      	add	r2, r1
900066e0:	3284      	adds	r2, #132	; 0x84
900066e2:	f023 0307 	bic.w	r3, r3, #7
900066e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
900066e8:	68fb      	ldr	r3, [r7, #12]
900066ea:	681b      	ldr	r3, [r3, #0]
900066ec:	461a      	mov	r2, r3
900066ee:	687b      	ldr	r3, [r7, #4]
900066f0:	01db      	lsls	r3, r3, #7
900066f2:	4413      	add	r3, r2
900066f4:	3384      	adds	r3, #132	; 0x84
900066f6:	461a      	mov	r2, r3
900066f8:	68bb      	ldr	r3, [r7, #8]
900066fa:	691b      	ldr	r3, [r3, #16]
900066fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
900066fe:	68bb      	ldr	r3, [r7, #8]
90006700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
90006704:	021b      	lsls	r3, r3, #8
90006706:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90006708:	68bb      	ldr	r3, [r7, #8]
9000670a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
9000670e:	041b      	lsls	r3, r3, #16
90006710:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90006712:	68bb      	ldr	r3, [r7, #8]
90006714:	699b      	ldr	r3, [r3, #24]
90006716:	061b      	lsls	r3, r3, #24
90006718:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000671a:	68fb      	ldr	r3, [r7, #12]
9000671c:	681b      	ldr	r3, [r3, #0]
9000671e:	461a      	mov	r2, r3
90006720:	687b      	ldr	r3, [r7, #4]
90006722:	01db      	lsls	r3, r3, #7
90006724:	4413      	add	r3, r2
90006726:	3384      	adds	r3, #132	; 0x84
90006728:	699b      	ldr	r3, [r3, #24]
9000672a:	68fb      	ldr	r3, [r7, #12]
9000672c:	681b      	ldr	r3, [r3, #0]
9000672e:	461a      	mov	r2, r3
90006730:	687b      	ldr	r3, [r7, #4]
90006732:	01db      	lsls	r3, r3, #7
90006734:	4413      	add	r3, r2
90006736:	3384      	adds	r3, #132	; 0x84
90006738:	461a      	mov	r2, r3
9000673a:	2300      	movs	r3, #0
9000673c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000673e:	68bb      	ldr	r3, [r7, #8]
90006740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90006744:	461a      	mov	r2, r3
90006746:	69fb      	ldr	r3, [r7, #28]
90006748:	431a      	orrs	r2, r3
9000674a:	69bb      	ldr	r3, [r7, #24]
9000674c:	431a      	orrs	r2, r3
9000674e:	68fb      	ldr	r3, [r7, #12]
90006750:	681b      	ldr	r3, [r3, #0]
90006752:	4619      	mov	r1, r3
90006754:	687b      	ldr	r3, [r7, #4]
90006756:	01db      	lsls	r3, r3, #7
90006758:	440b      	add	r3, r1
9000675a:	3384      	adds	r3, #132	; 0x84
9000675c:	4619      	mov	r1, r3
9000675e:	697b      	ldr	r3, [r7, #20]
90006760:	4313      	orrs	r3, r2
90006762:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90006764:	68fb      	ldr	r3, [r7, #12]
90006766:	681b      	ldr	r3, [r3, #0]
90006768:	461a      	mov	r2, r3
9000676a:	687b      	ldr	r3, [r7, #4]
9000676c:	01db      	lsls	r3, r3, #7
9000676e:	4413      	add	r3, r2
90006770:	3384      	adds	r3, #132	; 0x84
90006772:	695b      	ldr	r3, [r3, #20]
90006774:	68fa      	ldr	r2, [r7, #12]
90006776:	6812      	ldr	r2, [r2, #0]
90006778:	4611      	mov	r1, r2
9000677a:	687a      	ldr	r2, [r7, #4]
9000677c:	01d2      	lsls	r2, r2, #7
9000677e:	440a      	add	r2, r1
90006780:	3284      	adds	r2, #132	; 0x84
90006782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90006786:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90006788:	68fb      	ldr	r3, [r7, #12]
9000678a:	681b      	ldr	r3, [r3, #0]
9000678c:	461a      	mov	r2, r3
9000678e:	687b      	ldr	r3, [r7, #4]
90006790:	01db      	lsls	r3, r3, #7
90006792:	4413      	add	r3, r2
90006794:	3384      	adds	r3, #132	; 0x84
90006796:	461a      	mov	r2, r3
90006798:	68bb      	ldr	r3, [r7, #8]
9000679a:	695b      	ldr	r3, [r3, #20]
9000679c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000679e:	68fb      	ldr	r3, [r7, #12]
900067a0:	681b      	ldr	r3, [r3, #0]
900067a2:	461a      	mov	r2, r3
900067a4:	687b      	ldr	r3, [r7, #4]
900067a6:	01db      	lsls	r3, r3, #7
900067a8:	4413      	add	r3, r2
900067aa:	3384      	adds	r3, #132	; 0x84
900067ac:	69da      	ldr	r2, [r3, #28]
900067ae:	68fb      	ldr	r3, [r7, #12]
900067b0:	681b      	ldr	r3, [r3, #0]
900067b2:	4619      	mov	r1, r3
900067b4:	687b      	ldr	r3, [r7, #4]
900067b6:	01db      	lsls	r3, r3, #7
900067b8:	440b      	add	r3, r1
900067ba:	3384      	adds	r3, #132	; 0x84
900067bc:	4619      	mov	r1, r3
900067be:	4b58      	ldr	r3, [pc, #352]	; (90006920 <LTDC_SetConfig+0x32c>)
900067c0:	4013      	ands	r3, r2
900067c2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900067c4:	68bb      	ldr	r3, [r7, #8]
900067c6:	69da      	ldr	r2, [r3, #28]
900067c8:	68bb      	ldr	r3, [r7, #8]
900067ca:	6a1b      	ldr	r3, [r3, #32]
900067cc:	68f9      	ldr	r1, [r7, #12]
900067ce:	6809      	ldr	r1, [r1, #0]
900067d0:	4608      	mov	r0, r1
900067d2:	6879      	ldr	r1, [r7, #4]
900067d4:	01c9      	lsls	r1, r1, #7
900067d6:	4401      	add	r1, r0
900067d8:	3184      	adds	r1, #132	; 0x84
900067da:	4313      	orrs	r3, r2
900067dc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900067de:	68fb      	ldr	r3, [r7, #12]
900067e0:	681b      	ldr	r3, [r3, #0]
900067e2:	461a      	mov	r2, r3
900067e4:	687b      	ldr	r3, [r7, #4]
900067e6:	01db      	lsls	r3, r3, #7
900067e8:	4413      	add	r3, r2
900067ea:	3384      	adds	r3, #132	; 0x84
900067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900067ee:	68fb      	ldr	r3, [r7, #12]
900067f0:	681b      	ldr	r3, [r3, #0]
900067f2:	461a      	mov	r2, r3
900067f4:	687b      	ldr	r3, [r7, #4]
900067f6:	01db      	lsls	r3, r3, #7
900067f8:	4413      	add	r3, r2
900067fa:	3384      	adds	r3, #132	; 0x84
900067fc:	461a      	mov	r2, r3
900067fe:	2300      	movs	r3, #0
90006800:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90006802:	68fb      	ldr	r3, [r7, #12]
90006804:	681b      	ldr	r3, [r3, #0]
90006806:	461a      	mov	r2, r3
90006808:	687b      	ldr	r3, [r7, #4]
9000680a:	01db      	lsls	r3, r3, #7
9000680c:	4413      	add	r3, r2
9000680e:	3384      	adds	r3, #132	; 0x84
90006810:	461a      	mov	r2, r3
90006812:	68bb      	ldr	r3, [r7, #8]
90006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006816:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90006818:	68bb      	ldr	r3, [r7, #8]
9000681a:	691b      	ldr	r3, [r3, #16]
9000681c:	2b00      	cmp	r3, #0
9000681e:	d102      	bne.n	90006826 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
90006820:	2304      	movs	r3, #4
90006822:	61fb      	str	r3, [r7, #28]
90006824:	e01b      	b.n	9000685e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90006826:	68bb      	ldr	r3, [r7, #8]
90006828:	691b      	ldr	r3, [r3, #16]
9000682a:	2b01      	cmp	r3, #1
9000682c:	d102      	bne.n	90006834 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
9000682e:	2303      	movs	r3, #3
90006830:	61fb      	str	r3, [r7, #28]
90006832:	e014      	b.n	9000685e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006834:	68bb      	ldr	r3, [r7, #8]
90006836:	691b      	ldr	r3, [r3, #16]
90006838:	2b04      	cmp	r3, #4
9000683a:	d00b      	beq.n	90006854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
9000683c:	68bb      	ldr	r3, [r7, #8]
9000683e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
90006840:	2b02      	cmp	r3, #2
90006842:	d007      	beq.n	90006854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006844:	68bb      	ldr	r3, [r7, #8]
90006846:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
90006848:	2b03      	cmp	r3, #3
9000684a:	d003      	beq.n	90006854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
9000684c:	68bb      	ldr	r3, [r7, #8]
9000684e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
90006850:	2b07      	cmp	r3, #7
90006852:	d102      	bne.n	9000685a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
90006854:	2302      	movs	r3, #2
90006856:	61fb      	str	r3, [r7, #28]
90006858:	e001      	b.n	9000685e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
9000685a:	2301      	movs	r3, #1
9000685c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000685e:	68fb      	ldr	r3, [r7, #12]
90006860:	681b      	ldr	r3, [r3, #0]
90006862:	461a      	mov	r2, r3
90006864:	687b      	ldr	r3, [r7, #4]
90006866:	01db      	lsls	r3, r3, #7
90006868:	4413      	add	r3, r2
9000686a:	3384      	adds	r3, #132	; 0x84
9000686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000686e:	68fa      	ldr	r2, [r7, #12]
90006870:	6812      	ldr	r2, [r2, #0]
90006872:	4611      	mov	r1, r2
90006874:	687a      	ldr	r2, [r7, #4]
90006876:	01d2      	lsls	r2, r2, #7
90006878:	440a      	add	r2, r1
9000687a:	3284      	adds	r2, #132	; 0x84
9000687c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90006880:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90006882:	68bb      	ldr	r3, [r7, #8]
90006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006886:	69fa      	ldr	r2, [r7, #28]
90006888:	fb02 f303 	mul.w	r3, r2, r3
9000688c:	041a      	lsls	r2, r3, #16
9000688e:	68bb      	ldr	r3, [r7, #8]
90006890:	6859      	ldr	r1, [r3, #4]
90006892:	68bb      	ldr	r3, [r7, #8]
90006894:	681b      	ldr	r3, [r3, #0]
90006896:	1acb      	subs	r3, r1, r3
90006898:	69f9      	ldr	r1, [r7, #28]
9000689a:	fb01 f303 	mul.w	r3, r1, r3
9000689e:	3307      	adds	r3, #7
900068a0:	68f9      	ldr	r1, [r7, #12]
900068a2:	6809      	ldr	r1, [r1, #0]
900068a4:	4608      	mov	r0, r1
900068a6:	6879      	ldr	r1, [r7, #4]
900068a8:	01c9      	lsls	r1, r1, #7
900068aa:	4401      	add	r1, r0
900068ac:	3184      	adds	r1, #132	; 0x84
900068ae:	4313      	orrs	r3, r2
900068b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
900068b2:	68fb      	ldr	r3, [r7, #12]
900068b4:	681b      	ldr	r3, [r3, #0]
900068b6:	461a      	mov	r2, r3
900068b8:	687b      	ldr	r3, [r7, #4]
900068ba:	01db      	lsls	r3, r3, #7
900068bc:	4413      	add	r3, r2
900068be:	3384      	adds	r3, #132	; 0x84
900068c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900068c2:	68fb      	ldr	r3, [r7, #12]
900068c4:	681b      	ldr	r3, [r3, #0]
900068c6:	4619      	mov	r1, r3
900068c8:	687b      	ldr	r3, [r7, #4]
900068ca:	01db      	lsls	r3, r3, #7
900068cc:	440b      	add	r3, r1
900068ce:	3384      	adds	r3, #132	; 0x84
900068d0:	4619      	mov	r1, r3
900068d2:	4b14      	ldr	r3, [pc, #80]	; (90006924 <LTDC_SetConfig+0x330>)
900068d4:	4013      	ands	r3, r2
900068d6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
900068d8:	68fb      	ldr	r3, [r7, #12]
900068da:	681b      	ldr	r3, [r3, #0]
900068dc:	461a      	mov	r2, r3
900068de:	687b      	ldr	r3, [r7, #4]
900068e0:	01db      	lsls	r3, r3, #7
900068e2:	4413      	add	r3, r2
900068e4:	3384      	adds	r3, #132	; 0x84
900068e6:	461a      	mov	r2, r3
900068e8:	68bb      	ldr	r3, [r7, #8]
900068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900068ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
900068ee:	68fb      	ldr	r3, [r7, #12]
900068f0:	681b      	ldr	r3, [r3, #0]
900068f2:	461a      	mov	r2, r3
900068f4:	687b      	ldr	r3, [r7, #4]
900068f6:	01db      	lsls	r3, r3, #7
900068f8:	4413      	add	r3, r2
900068fa:	3384      	adds	r3, #132	; 0x84
900068fc:	681b      	ldr	r3, [r3, #0]
900068fe:	68fa      	ldr	r2, [r7, #12]
90006900:	6812      	ldr	r2, [r2, #0]
90006902:	4611      	mov	r1, r2
90006904:	687a      	ldr	r2, [r7, #4]
90006906:	01d2      	lsls	r2, r2, #7
90006908:	440a      	add	r2, r1
9000690a:	3284      	adds	r2, #132	; 0x84
9000690c:	f043 0301 	orr.w	r3, r3, #1
90006910:	6013      	str	r3, [r2, #0]
}
90006912:	bf00      	nop
90006914:	3724      	adds	r7, #36	; 0x24
90006916:	46bd      	mov	sp, r7
90006918:	f85d 7b04 	ldr.w	r7, [sp], #4
9000691c:	4770      	bx	lr
9000691e:	bf00      	nop
90006920:	fffff8f8 	.word	0xfffff8f8
90006924:	fffff800 	.word	0xfffff800

90006928 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006928:	b580      	push	{r7, lr}
9000692a:	b084      	sub	sp, #16
9000692c:	af00      	add	r7, sp, #0
9000692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90006930:	f7fc fd4a 	bl	900033c8 <HAL_GetTick>
90006934:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90006936:	687b      	ldr	r3, [r7, #4]
90006938:	2b00      	cmp	r3, #0
9000693a:	d101      	bne.n	90006940 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
9000693c:	2301      	movs	r3, #1
9000693e:	e03b      	b.n	900069b8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
90006940:	687b      	ldr	r3, [r7, #4]
90006942:	2200      	movs	r2, #0
90006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
90006948:	687b      	ldr	r3, [r7, #4]
9000694a:	2202      	movs	r2, #2
9000694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90006950:	687b      	ldr	r3, [r7, #4]
90006952:	681b      	ldr	r3, [r3, #0]
90006954:	68da      	ldr	r2, [r3, #12]
90006956:	687b      	ldr	r3, [r7, #4]
90006958:	681b      	ldr	r3, [r3, #0]
9000695a:	f022 0201 	bic.w	r2, r2, #1
9000695e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006960:	e00f      	b.n	90006982 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90006962:	f7fc fd31 	bl	900033c8 <HAL_GetTick>
90006966:	4602      	mov	r2, r0
90006968:	68fb      	ldr	r3, [r7, #12]
9000696a:	1ad3      	subs	r3, r2, r3
9000696c:	2b05      	cmp	r3, #5
9000696e:	d908      	bls.n	90006982 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90006970:	687b      	ldr	r3, [r7, #4]
90006972:	2240      	movs	r2, #64	; 0x40
90006974:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
90006976:	687b      	ldr	r3, [r7, #4]
90006978:	2203      	movs	r2, #3
9000697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
9000697e:	2301      	movs	r3, #1
90006980:	e01a      	b.n	900069b8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90006982:	687b      	ldr	r3, [r7, #4]
90006984:	681b      	ldr	r3, [r3, #0]
90006986:	68db      	ldr	r3, [r3, #12]
90006988:	f003 0301 	and.w	r3, r3, #1
9000698c:	2b00      	cmp	r3, #0
9000698e:	d1e8      	bne.n	90006962 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
90006990:	6878      	ldr	r0, [r7, #4]
90006992:	f000 f86d 	bl	90006a70 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006996:	687b      	ldr	r3, [r7, #4]
90006998:	2200      	movs	r2, #0
9000699a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
9000699c:	687b      	ldr	r3, [r7, #4]
9000699e:	2200      	movs	r2, #0
900069a0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
900069a2:	687b      	ldr	r3, [r7, #4]
900069a4:	2200      	movs	r2, #0
900069a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
900069a8:	687b      	ldr	r3, [r7, #4]
900069aa:	2200      	movs	r2, #0
900069ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
900069ae:	687b      	ldr	r3, [r7, #4]
900069b0:	2201      	movs	r2, #1
900069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
900069b6:	2300      	movs	r3, #0
}
900069b8:	4618      	mov	r0, r3
900069ba:	3710      	adds	r7, #16
900069bc:	46bd      	mov	sp, r7
900069be:	bd80      	pop	{r7, pc}

900069c0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
900069c0:	b480      	push	{r7}
900069c2:	b083      	sub	sp, #12
900069c4:	af00      	add	r7, sp, #0
900069c6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
900069c8:	687b      	ldr	r3, [r7, #4]
900069ca:	2b00      	cmp	r3, #0
900069cc:	d101      	bne.n	900069d2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
900069ce:	2301      	movs	r3, #1
900069d0:	e048      	b.n	90006a64 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
900069d2:	687b      	ldr	r3, [r7, #4]
900069d4:	681b      	ldr	r3, [r3, #0]
900069d6:	68da      	ldr	r2, [r3, #12]
900069d8:	687b      	ldr	r3, [r7, #4]
900069da:	681b      	ldr	r3, [r3, #0]
900069dc:	f022 0201 	bic.w	r2, r2, #1
900069e0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
900069e2:	687b      	ldr	r3, [r7, #4]
900069e4:	681b      	ldr	r3, [r3, #0]
900069e6:	2200      	movs	r2, #0
900069e8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
900069ea:	687b      	ldr	r3, [r7, #4]
900069ec:	681b      	ldr	r3, [r3, #0]
900069ee:	2200      	movs	r2, #0
900069f0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
900069f2:	687b      	ldr	r3, [r7, #4]
900069f4:	681b      	ldr	r3, [r3, #0]
900069f6:	2200      	movs	r2, #0
900069f8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
900069fa:	687b      	ldr	r3, [r7, #4]
900069fc:	681b      	ldr	r3, [r3, #0]
900069fe:	2200      	movs	r2, #0
90006a00:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
90006a02:	687b      	ldr	r3, [r7, #4]
90006a04:	681b      	ldr	r3, [r3, #0]
90006a06:	2200      	movs	r2, #0
90006a08:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
90006a0a:	687b      	ldr	r3, [r7, #4]
90006a0c:	681b      	ldr	r3, [r3, #0]
90006a0e:	2200      	movs	r2, #0
90006a10:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
90006a12:	687b      	ldr	r3, [r7, #4]
90006a14:	681b      	ldr	r3, [r3, #0]
90006a16:	2200      	movs	r2, #0
90006a18:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90006a1a:	687b      	ldr	r3, [r7, #4]
90006a1c:	681b      	ldr	r3, [r3, #0]
90006a1e:	2200      	movs	r2, #0
90006a20:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90006a22:	687b      	ldr	r3, [r7, #4]
90006a24:	681b      	ldr	r3, [r3, #0]
90006a26:	2200      	movs	r2, #0
90006a28:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90006a2a:	687b      	ldr	r3, [r7, #4]
90006a2c:	681b      	ldr	r3, [r3, #0]
90006a2e:	2200      	movs	r2, #0
90006a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90006a32:	687b      	ldr	r3, [r7, #4]
90006a34:	681b      	ldr	r3, [r3, #0]
90006a36:	221f      	movs	r2, #31
90006a38:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
90006a3a:	687b      	ldr	r3, [r7, #4]
90006a3c:	2200      	movs	r2, #0
90006a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
90006a40:	687b      	ldr	r3, [r7, #4]
90006a42:	2200      	movs	r2, #0
90006a44:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
90006a46:	687b      	ldr	r3, [r7, #4]
90006a48:	2200      	movs	r2, #0
90006a4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90006a4c:	687b      	ldr	r3, [r7, #4]
90006a4e:	2200      	movs	r2, #0
90006a50:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
90006a52:	687b      	ldr	r3, [r7, #4]
90006a54:	2200      	movs	r2, #0
90006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
90006a5a:	687b      	ldr	r3, [r7, #4]
90006a5c:	2200      	movs	r2, #0
90006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
90006a62:	2300      	movs	r3, #0
}
90006a64:	4618      	mov	r0, r3
90006a66:	370c      	adds	r7, #12
90006a68:	46bd      	mov	sp, r7
90006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a6e:	4770      	bx	lr

90006a70 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90006a70:	b480      	push	{r7}
90006a72:	b085      	sub	sp, #20
90006a74:	af00      	add	r7, sp, #0
90006a76:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90006a78:	687b      	ldr	r3, [r7, #4]
90006a7a:	68d9      	ldr	r1, [r3, #12]
90006a7c:	687b      	ldr	r3, [r7, #4]
90006a7e:	691a      	ldr	r2, [r3, #16]
90006a80:	687b      	ldr	r3, [r7, #4]
90006a82:	681b      	ldr	r3, [r3, #0]
90006a84:	430a      	orrs	r2, r1
90006a86:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a88:	687b      	ldr	r3, [r7, #4]
90006a8a:	695a      	ldr	r2, [r3, #20]
90006a8c:	687b      	ldr	r3, [r7, #4]
90006a8e:	699b      	ldr	r3, [r3, #24]
90006a90:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a92:	687b      	ldr	r3, [r7, #4]
90006a94:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006a96:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006a98:	687b      	ldr	r3, [r7, #4]
90006a9a:	6a1b      	ldr	r3, [r3, #32]
90006a9c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006a9e:	687b      	ldr	r3, [r7, #4]
90006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
90006aa2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006aa4:	687b      	ldr	r3, [r7, #4]
90006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006aa8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
90006aaa:	687b      	ldr	r3, [r7, #4]
90006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
90006aae:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ab0:	687b      	ldr	r3, [r7, #4]
90006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006ab4:	3b01      	subs	r3, #1
90006ab6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
90006ab8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
90006abc:	687b      	ldr	r3, [r7, #4]
90006abe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ac0:	687b      	ldr	r3, [r7, #4]
90006ac2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90006ac4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90006ac6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90006ac8:	687b      	ldr	r3, [r7, #4]
90006aca:	685b      	ldr	r3, [r3, #4]
90006acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006ad0:	d107      	bne.n	90006ae2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90006ad2:	687b      	ldr	r3, [r7, #4]
90006ad4:	681b      	ldr	r3, [r3, #0]
90006ad6:	691a      	ldr	r2, [r3, #16]
90006ad8:	687b      	ldr	r3, [r7, #4]
90006ada:	681b      	ldr	r3, [r3, #0]
90006adc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
90006ae0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90006ae2:	687b      	ldr	r3, [r7, #4]
90006ae4:	681b      	ldr	r3, [r3, #0]
90006ae6:	2200      	movs	r2, #0
90006ae8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90006aea:	687b      	ldr	r3, [r7, #4]
90006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006aee:	2b00      	cmp	r3, #0
90006af0:	da11      	bge.n	90006b16 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90006af2:	687b      	ldr	r3, [r7, #4]
90006af4:	681b      	ldr	r3, [r3, #0]
90006af6:	695a      	ldr	r2, [r3, #20]
90006af8:	687b      	ldr	r3, [r7, #4]
90006afa:	681b      	ldr	r3, [r3, #0]
90006afc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
90006b00:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90006b02:	687b      	ldr	r3, [r7, #4]
90006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006b06:	425b      	negs	r3, r3
90006b08:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90006b0a:	687b      	ldr	r3, [r7, #4]
90006b0c:	681b      	ldr	r3, [r3, #0]
90006b0e:	68fa      	ldr	r2, [r7, #12]
90006b10:	b292      	uxth	r2, r2
90006b12:	621a      	str	r2, [r3, #32]
90006b14:	e006      	b.n	90006b24 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90006b16:	687b      	ldr	r3, [r7, #4]
90006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90006b1a:	461a      	mov	r2, r3
90006b1c:	687b      	ldr	r3, [r7, #4]
90006b1e:	681b      	ldr	r3, [r3, #0]
90006b20:	b292      	uxth	r2, r2
90006b22:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90006b24:	687b      	ldr	r3, [r7, #4]
90006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b28:	2b00      	cmp	r3, #0
90006b2a:	da15      	bge.n	90006b58 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90006b2c:	687b      	ldr	r3, [r7, #4]
90006b2e:	681b      	ldr	r3, [r3, #0]
90006b30:	695a      	ldr	r2, [r3, #20]
90006b32:	687b      	ldr	r3, [r7, #4]
90006b34:	681b      	ldr	r3, [r3, #0]
90006b36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90006b3a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90006b3c:	687b      	ldr	r3, [r7, #4]
90006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b40:	425b      	negs	r3, r3
90006b42:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b44:	687b      	ldr	r3, [r7, #4]
90006b46:	681b      	ldr	r3, [r3, #0]
90006b48:	6a19      	ldr	r1, [r3, #32]
90006b4a:	68fb      	ldr	r3, [r7, #12]
90006b4c:	041a      	lsls	r2, r3, #16
90006b4e:	687b      	ldr	r3, [r7, #4]
90006b50:	681b      	ldr	r3, [r3, #0]
90006b52:	430a      	orrs	r2, r1
90006b54:	621a      	str	r2, [r3, #32]
90006b56:	e009      	b.n	90006b6c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90006b58:	687b      	ldr	r3, [r7, #4]
90006b5a:	681b      	ldr	r3, [r3, #0]
90006b5c:	6a19      	ldr	r1, [r3, #32]
90006b5e:	687b      	ldr	r3, [r7, #4]
90006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b62:	041a      	lsls	r2, r3, #16
90006b64:	687b      	ldr	r3, [r7, #4]
90006b66:	681b      	ldr	r3, [r3, #0]
90006b68:	430a      	orrs	r2, r1
90006b6a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90006b6c:	687b      	ldr	r3, [r7, #4]
90006b6e:	685b      	ldr	r3, [r3, #4]
90006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006b74:	d006      	beq.n	90006b84 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90006b76:	687b      	ldr	r3, [r7, #4]
90006b78:	685a      	ldr	r2, [r3, #4]
90006b7a:	687b      	ldr	r3, [r7, #4]
90006b7c:	681b      	ldr	r3, [r3, #0]
90006b7e:	b2d2      	uxtb	r2, r2
90006b80:	629a      	str	r2, [r3, #40]	; 0x28
90006b82:	e003      	b.n	90006b8c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
90006b84:	687b      	ldr	r3, [r7, #4]
90006b86:	681b      	ldr	r3, [r3, #0]
90006b88:	2200      	movs	r2, #0
90006b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90006b8c:	687b      	ldr	r3, [r7, #4]
90006b8e:	681b      	ldr	r3, [r3, #0]
90006b90:	2200      	movs	r2, #0
90006b92:	625a      	str	r2, [r3, #36]	; 0x24
}
90006b94:	bf00      	nop
90006b96:	3714      	adds	r7, #20
90006b98:	46bd      	mov	sp, r7
90006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006b9e:	4770      	bx	lr

90006ba0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90006ba0:	b580      	push	{r7, lr}
90006ba2:	b084      	sub	sp, #16
90006ba4:	af00      	add	r7, sp, #0
90006ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90006ba8:	4b19      	ldr	r3, [pc, #100]	; (90006c10 <HAL_PWREx_ConfigSupply+0x70>)
90006baa:	68db      	ldr	r3, [r3, #12]
90006bac:	f003 0304 	and.w	r3, r3, #4
90006bb0:	2b04      	cmp	r3, #4
90006bb2:	d00a      	beq.n	90006bca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90006bb4:	4b16      	ldr	r3, [pc, #88]	; (90006c10 <HAL_PWREx_ConfigSupply+0x70>)
90006bb6:	68db      	ldr	r3, [r3, #12]
90006bb8:	f003 0307 	and.w	r3, r3, #7
90006bbc:	687a      	ldr	r2, [r7, #4]
90006bbe:	429a      	cmp	r2, r3
90006bc0:	d001      	beq.n	90006bc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90006bc2:	2301      	movs	r3, #1
90006bc4:	e01f      	b.n	90006c06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
90006bc6:	2300      	movs	r3, #0
90006bc8:	e01d      	b.n	90006c06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90006bca:	4b11      	ldr	r3, [pc, #68]	; (90006c10 <HAL_PWREx_ConfigSupply+0x70>)
90006bcc:	68db      	ldr	r3, [r3, #12]
90006bce:	f023 0207 	bic.w	r2, r3, #7
90006bd2:	490f      	ldr	r1, [pc, #60]	; (90006c10 <HAL_PWREx_ConfigSupply+0x70>)
90006bd4:	687b      	ldr	r3, [r7, #4]
90006bd6:	4313      	orrs	r3, r2
90006bd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
90006bda:	f7fc fbf5 	bl	900033c8 <HAL_GetTick>
90006bde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90006be0:	e009      	b.n	90006bf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90006be2:	f7fc fbf1 	bl	900033c8 <HAL_GetTick>
90006be6:	4602      	mov	r2, r0
90006be8:	68fb      	ldr	r3, [r7, #12]
90006bea:	1ad3      	subs	r3, r2, r3
90006bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90006bf0:	d901      	bls.n	90006bf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
90006bf2:	2301      	movs	r3, #1
90006bf4:	e007      	b.n	90006c06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90006bf6:	4b06      	ldr	r3, [pc, #24]	; (90006c10 <HAL_PWREx_ConfigSupply+0x70>)
90006bf8:	685b      	ldr	r3, [r3, #4]
90006bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90006c02:	d1ee      	bne.n	90006be2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
90006c04:	2300      	movs	r3, #0
}
90006c06:	4618      	mov	r0, r3
90006c08:	3710      	adds	r7, #16
90006c0a:	46bd      	mov	sp, r7
90006c0c:	bd80      	pop	{r7, pc}
90006c0e:	bf00      	nop
90006c10:	58024800 	.word	0x58024800

90006c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90006c14:	b580      	push	{r7, lr}
90006c16:	b08c      	sub	sp, #48	; 0x30
90006c18:	af00      	add	r7, sp, #0
90006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90006c1c:	687b      	ldr	r3, [r7, #4]
90006c1e:	2b00      	cmp	r3, #0
90006c20:	d102      	bne.n	90006c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
90006c22:	2301      	movs	r3, #1
90006c24:	f000 bc48 	b.w	900074b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90006c28:	687b      	ldr	r3, [r7, #4]
90006c2a:	681b      	ldr	r3, [r3, #0]
90006c2c:	f003 0301 	and.w	r3, r3, #1
90006c30:	2b00      	cmp	r3, #0
90006c32:	f000 8088 	beq.w	90006d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006c36:	4b99      	ldr	r3, [pc, #612]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c38:	691b      	ldr	r3, [r3, #16]
90006c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006c40:	4b96      	ldr	r3, [pc, #600]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006c44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
90006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c48:	2b10      	cmp	r3, #16
90006c4a:	d007      	beq.n	90006c5c <HAL_RCC_OscConfig+0x48>
90006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006c4e:	2b18      	cmp	r3, #24
90006c50:	d111      	bne.n	90006c76 <HAL_RCC_OscConfig+0x62>
90006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c54:	f003 0303 	and.w	r3, r3, #3
90006c58:	2b02      	cmp	r3, #2
90006c5a:	d10c      	bne.n	90006c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006c5c:	4b8f      	ldr	r3, [pc, #572]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c5e:	681b      	ldr	r3, [r3, #0]
90006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006c64:	2b00      	cmp	r3, #0
90006c66:	d06d      	beq.n	90006d44 <HAL_RCC_OscConfig+0x130>
90006c68:	687b      	ldr	r3, [r7, #4]
90006c6a:	685b      	ldr	r3, [r3, #4]
90006c6c:	2b00      	cmp	r3, #0
90006c6e:	d169      	bne.n	90006d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90006c70:	2301      	movs	r3, #1
90006c72:	f000 bc21 	b.w	900074b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90006c76:	687b      	ldr	r3, [r7, #4]
90006c78:	685b      	ldr	r3, [r3, #4]
90006c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90006c7e:	d106      	bne.n	90006c8e <HAL_RCC_OscConfig+0x7a>
90006c80:	4b86      	ldr	r3, [pc, #536]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c82:	681b      	ldr	r3, [r3, #0]
90006c84:	4a85      	ldr	r2, [pc, #532]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90006c8a:	6013      	str	r3, [r2, #0]
90006c8c:	e02e      	b.n	90006cec <HAL_RCC_OscConfig+0xd8>
90006c8e:	687b      	ldr	r3, [r7, #4]
90006c90:	685b      	ldr	r3, [r3, #4]
90006c92:	2b00      	cmp	r3, #0
90006c94:	d10c      	bne.n	90006cb0 <HAL_RCC_OscConfig+0x9c>
90006c96:	4b81      	ldr	r3, [pc, #516]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c98:	681b      	ldr	r3, [r3, #0]
90006c9a:	4a80      	ldr	r2, [pc, #512]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90006ca0:	6013      	str	r3, [r2, #0]
90006ca2:	4b7e      	ldr	r3, [pc, #504]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006ca4:	681b      	ldr	r3, [r3, #0]
90006ca6:	4a7d      	ldr	r2, [pc, #500]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90006cac:	6013      	str	r3, [r2, #0]
90006cae:	e01d      	b.n	90006cec <HAL_RCC_OscConfig+0xd8>
90006cb0:	687b      	ldr	r3, [r7, #4]
90006cb2:	685b      	ldr	r3, [r3, #4]
90006cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90006cb8:	d10c      	bne.n	90006cd4 <HAL_RCC_OscConfig+0xc0>
90006cba:	4b78      	ldr	r3, [pc, #480]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006cbc:	681b      	ldr	r3, [r3, #0]
90006cbe:	4a77      	ldr	r2, [pc, #476]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90006cc4:	6013      	str	r3, [r2, #0]
90006cc6:	4b75      	ldr	r3, [pc, #468]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006cc8:	681b      	ldr	r3, [r3, #0]
90006cca:	4a74      	ldr	r2, [pc, #464]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90006cd0:	6013      	str	r3, [r2, #0]
90006cd2:	e00b      	b.n	90006cec <HAL_RCC_OscConfig+0xd8>
90006cd4:	4b71      	ldr	r3, [pc, #452]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006cd6:	681b      	ldr	r3, [r3, #0]
90006cd8:	4a70      	ldr	r2, [pc, #448]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90006cde:	6013      	str	r3, [r2, #0]
90006ce0:	4b6e      	ldr	r3, [pc, #440]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006ce2:	681b      	ldr	r3, [r3, #0]
90006ce4:	4a6d      	ldr	r2, [pc, #436]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90006cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90006cec:	687b      	ldr	r3, [r7, #4]
90006cee:	685b      	ldr	r3, [r3, #4]
90006cf0:	2b00      	cmp	r3, #0
90006cf2:	d013      	beq.n	90006d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006cf4:	f7fc fb68 	bl	900033c8 <HAL_GetTick>
90006cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006cfa:	e008      	b.n	90006d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006cfc:	f7fc fb64 	bl	900033c8 <HAL_GetTick>
90006d00:	4602      	mov	r2, r0
90006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006d04:	1ad3      	subs	r3, r2, r3
90006d06:	2b64      	cmp	r3, #100	; 0x64
90006d08:	d901      	bls.n	90006d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90006d0a:	2303      	movs	r3, #3
90006d0c:	e3d4      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90006d0e:	4b63      	ldr	r3, [pc, #396]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d10:	681b      	ldr	r3, [r3, #0]
90006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006d16:	2b00      	cmp	r3, #0
90006d18:	d0f0      	beq.n	90006cfc <HAL_RCC_OscConfig+0xe8>
90006d1a:	e014      	b.n	90006d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006d1c:	f7fc fb54 	bl	900033c8 <HAL_GetTick>
90006d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d22:	e008      	b.n	90006d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90006d24:	f7fc fb50 	bl	900033c8 <HAL_GetTick>
90006d28:	4602      	mov	r2, r0
90006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006d2c:	1ad3      	subs	r3, r2, r3
90006d2e:	2b64      	cmp	r3, #100	; 0x64
90006d30:	d901      	bls.n	90006d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90006d32:	2303      	movs	r3, #3
90006d34:	e3c0      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
90006d36:	4b59      	ldr	r3, [pc, #356]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d38:	681b      	ldr	r3, [r3, #0]
90006d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90006d3e:	2b00      	cmp	r3, #0
90006d40:	d1f0      	bne.n	90006d24 <HAL_RCC_OscConfig+0x110>
90006d42:	e000      	b.n	90006d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90006d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90006d46:	687b      	ldr	r3, [r7, #4]
90006d48:	681b      	ldr	r3, [r3, #0]
90006d4a:	f003 0302 	and.w	r3, r3, #2
90006d4e:	2b00      	cmp	r3, #0
90006d50:	f000 80ca 	beq.w	90006ee8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006d54:	4b51      	ldr	r3, [pc, #324]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d56:	691b      	ldr	r3, [r3, #16]
90006d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006d5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006d5e:	4b4f      	ldr	r3, [pc, #316]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006d62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90006d64:	6a3b      	ldr	r3, [r7, #32]
90006d66:	2b00      	cmp	r3, #0
90006d68:	d007      	beq.n	90006d7a <HAL_RCC_OscConfig+0x166>
90006d6a:	6a3b      	ldr	r3, [r7, #32]
90006d6c:	2b18      	cmp	r3, #24
90006d6e:	d156      	bne.n	90006e1e <HAL_RCC_OscConfig+0x20a>
90006d70:	69fb      	ldr	r3, [r7, #28]
90006d72:	f003 0303 	and.w	r3, r3, #3
90006d76:	2b00      	cmp	r3, #0
90006d78:	d151      	bne.n	90006e1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006d7a:	4b48      	ldr	r3, [pc, #288]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d7c:	681b      	ldr	r3, [r3, #0]
90006d7e:	f003 0304 	and.w	r3, r3, #4
90006d82:	2b00      	cmp	r3, #0
90006d84:	d005      	beq.n	90006d92 <HAL_RCC_OscConfig+0x17e>
90006d86:	687b      	ldr	r3, [r7, #4]
90006d88:	68db      	ldr	r3, [r3, #12]
90006d8a:	2b00      	cmp	r3, #0
90006d8c:	d101      	bne.n	90006d92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
90006d8e:	2301      	movs	r3, #1
90006d90:	e392      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006d92:	4b42      	ldr	r3, [pc, #264]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006d94:	681b      	ldr	r3, [r3, #0]
90006d96:	f023 0219 	bic.w	r2, r3, #25
90006d9a:	687b      	ldr	r3, [r7, #4]
90006d9c:	68db      	ldr	r3, [r3, #12]
90006d9e:	493f      	ldr	r1, [pc, #252]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006da0:	4313      	orrs	r3, r2
90006da2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006da4:	f7fc fb10 	bl	900033c8 <HAL_GetTick>
90006da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006daa:	e008      	b.n	90006dbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006dac:	f7fc fb0c 	bl	900033c8 <HAL_GetTick>
90006db0:	4602      	mov	r2, r0
90006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006db4:	1ad3      	subs	r3, r2, r3
90006db6:	2b02      	cmp	r3, #2
90006db8:	d901      	bls.n	90006dbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
90006dba:	2303      	movs	r3, #3
90006dbc:	e37c      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006dbe:	4b37      	ldr	r3, [pc, #220]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006dc0:	681b      	ldr	r3, [r3, #0]
90006dc2:	f003 0304 	and.w	r3, r3, #4
90006dc6:	2b00      	cmp	r3, #0
90006dc8:	d0f0      	beq.n	90006dac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006dca:	f7fc fb09 	bl	900033e0 <HAL_GetREVID>
90006dce:	4603      	mov	r3, r0
90006dd0:	f241 0203 	movw	r2, #4099	; 0x1003
90006dd4:	4293      	cmp	r3, r2
90006dd6:	d817      	bhi.n	90006e08 <HAL_RCC_OscConfig+0x1f4>
90006dd8:	687b      	ldr	r3, [r7, #4]
90006dda:	691b      	ldr	r3, [r3, #16]
90006ddc:	2b40      	cmp	r3, #64	; 0x40
90006dde:	d108      	bne.n	90006df2 <HAL_RCC_OscConfig+0x1de>
90006de0:	4b2e      	ldr	r3, [pc, #184]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006de2:	685b      	ldr	r3, [r3, #4]
90006de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90006de8:	4a2c      	ldr	r2, [pc, #176]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90006dee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006df0:	e07a      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006df2:	4b2a      	ldr	r3, [pc, #168]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006df4:	685b      	ldr	r3, [r3, #4]
90006df6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006dfa:	687b      	ldr	r3, [r7, #4]
90006dfc:	691b      	ldr	r3, [r3, #16]
90006dfe:	031b      	lsls	r3, r3, #12
90006e00:	4926      	ldr	r1, [pc, #152]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e02:	4313      	orrs	r3, r2
90006e04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e06:	e06f      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e08:	4b24      	ldr	r3, [pc, #144]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e0a:	685b      	ldr	r3, [r3, #4]
90006e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90006e10:	687b      	ldr	r3, [r7, #4]
90006e12:	691b      	ldr	r3, [r3, #16]
90006e14:	061b      	lsls	r3, r3, #24
90006e16:	4921      	ldr	r1, [pc, #132]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e18:	4313      	orrs	r3, r2
90006e1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90006e1c:	e064      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90006e1e:	687b      	ldr	r3, [r7, #4]
90006e20:	68db      	ldr	r3, [r3, #12]
90006e22:	2b00      	cmp	r3, #0
90006e24:	d047      	beq.n	90006eb6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90006e26:	4b1d      	ldr	r3, [pc, #116]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e28:	681b      	ldr	r3, [r3, #0]
90006e2a:	f023 0219 	bic.w	r2, r3, #25
90006e2e:	687b      	ldr	r3, [r7, #4]
90006e30:	68db      	ldr	r3, [r3, #12]
90006e32:	491a      	ldr	r1, [pc, #104]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e34:	4313      	orrs	r3, r2
90006e36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006e38:	f7fc fac6 	bl	900033c8 <HAL_GetTick>
90006e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e3e:	e008      	b.n	90006e52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006e40:	f7fc fac2 	bl	900033c8 <HAL_GetTick>
90006e44:	4602      	mov	r2, r0
90006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006e48:	1ad3      	subs	r3, r2, r3
90006e4a:	2b02      	cmp	r3, #2
90006e4c:	d901      	bls.n	90006e52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
90006e4e:	2303      	movs	r3, #3
90006e50:	e332      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90006e52:	4b12      	ldr	r3, [pc, #72]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e54:	681b      	ldr	r3, [r3, #0]
90006e56:	f003 0304 	and.w	r3, r3, #4
90006e5a:	2b00      	cmp	r3, #0
90006e5c:	d0f0      	beq.n	90006e40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90006e5e:	f7fc fabf 	bl	900033e0 <HAL_GetREVID>
90006e62:	4603      	mov	r3, r0
90006e64:	f241 0203 	movw	r2, #4099	; 0x1003
90006e68:	4293      	cmp	r3, r2
90006e6a:	d819      	bhi.n	90006ea0 <HAL_RCC_OscConfig+0x28c>
90006e6c:	687b      	ldr	r3, [r7, #4]
90006e6e:	691b      	ldr	r3, [r3, #16]
90006e70:	2b40      	cmp	r3, #64	; 0x40
90006e72:	d108      	bne.n	90006e86 <HAL_RCC_OscConfig+0x272>
90006e74:	4b09      	ldr	r3, [pc, #36]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e76:	685b      	ldr	r3, [r3, #4]
90006e78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90006e7c:	4a07      	ldr	r2, [pc, #28]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90006e82:	6053      	str	r3, [r2, #4]
90006e84:	e030      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
90006e86:	4b05      	ldr	r3, [pc, #20]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e88:	685b      	ldr	r3, [r3, #4]
90006e8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90006e8e:	687b      	ldr	r3, [r7, #4]
90006e90:	691b      	ldr	r3, [r3, #16]
90006e92:	031b      	lsls	r3, r3, #12
90006e94:	4901      	ldr	r1, [pc, #4]	; (90006e9c <HAL_RCC_OscConfig+0x288>)
90006e96:	4313      	orrs	r3, r2
90006e98:	604b      	str	r3, [r1, #4]
90006e9a:	e025      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
90006e9c:	58024400 	.word	0x58024400
90006ea0:	4b9a      	ldr	r3, [pc, #616]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006ea2:	685b      	ldr	r3, [r3, #4]
90006ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90006ea8:	687b      	ldr	r3, [r7, #4]
90006eaa:	691b      	ldr	r3, [r3, #16]
90006eac:	061b      	lsls	r3, r3, #24
90006eae:	4997      	ldr	r1, [pc, #604]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006eb0:	4313      	orrs	r3, r2
90006eb2:	604b      	str	r3, [r1, #4]
90006eb4:	e018      	b.n	90006ee8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90006eb6:	4b95      	ldr	r3, [pc, #596]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006eb8:	681b      	ldr	r3, [r3, #0]
90006eba:	4a94      	ldr	r2, [pc, #592]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006ebc:	f023 0301 	bic.w	r3, r3, #1
90006ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006ec2:	f7fc fa81 	bl	900033c8 <HAL_GetTick>
90006ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006ec8:	e008      	b.n	90006edc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90006eca:	f7fc fa7d 	bl	900033c8 <HAL_GetTick>
90006ece:	4602      	mov	r2, r0
90006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006ed2:	1ad3      	subs	r3, r2, r3
90006ed4:	2b02      	cmp	r3, #2
90006ed6:	d901      	bls.n	90006edc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90006ed8:	2303      	movs	r3, #3
90006eda:	e2ed      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90006edc:	4b8b      	ldr	r3, [pc, #556]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006ede:	681b      	ldr	r3, [r3, #0]
90006ee0:	f003 0304 	and.w	r3, r3, #4
90006ee4:	2b00      	cmp	r3, #0
90006ee6:	d1f0      	bne.n	90006eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90006ee8:	687b      	ldr	r3, [r7, #4]
90006eea:	681b      	ldr	r3, [r3, #0]
90006eec:	f003 0310 	and.w	r3, r3, #16
90006ef0:	2b00      	cmp	r3, #0
90006ef2:	f000 80a9 	beq.w	90007048 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90006ef6:	4b85      	ldr	r3, [pc, #532]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006ef8:	691b      	ldr	r3, [r3, #16]
90006efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
90006efe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90006f00:	4b82      	ldr	r3, [pc, #520]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006f04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90006f06:	69bb      	ldr	r3, [r7, #24]
90006f08:	2b08      	cmp	r3, #8
90006f0a:	d007      	beq.n	90006f1c <HAL_RCC_OscConfig+0x308>
90006f0c:	69bb      	ldr	r3, [r7, #24]
90006f0e:	2b18      	cmp	r3, #24
90006f10:	d13a      	bne.n	90006f88 <HAL_RCC_OscConfig+0x374>
90006f12:	697b      	ldr	r3, [r7, #20]
90006f14:	f003 0303 	and.w	r3, r3, #3
90006f18:	2b01      	cmp	r3, #1
90006f1a:	d135      	bne.n	90006f88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f1c:	4b7b      	ldr	r3, [pc, #492]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f1e:	681b      	ldr	r3, [r3, #0]
90006f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006f24:	2b00      	cmp	r3, #0
90006f26:	d005      	beq.n	90006f34 <HAL_RCC_OscConfig+0x320>
90006f28:	687b      	ldr	r3, [r7, #4]
90006f2a:	69db      	ldr	r3, [r3, #28]
90006f2c:	2b80      	cmp	r3, #128	; 0x80
90006f2e:	d001      	beq.n	90006f34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90006f30:	2301      	movs	r3, #1
90006f32:	e2c1      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f34:	f7fc fa54 	bl	900033e0 <HAL_GetREVID>
90006f38:	4603      	mov	r3, r0
90006f3a:	f241 0203 	movw	r2, #4099	; 0x1003
90006f3e:	4293      	cmp	r3, r2
90006f40:	d817      	bhi.n	90006f72 <HAL_RCC_OscConfig+0x35e>
90006f42:	687b      	ldr	r3, [r7, #4]
90006f44:	6a1b      	ldr	r3, [r3, #32]
90006f46:	2b20      	cmp	r3, #32
90006f48:	d108      	bne.n	90006f5c <HAL_RCC_OscConfig+0x348>
90006f4a:	4b70      	ldr	r3, [pc, #448]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f4c:	685b      	ldr	r3, [r3, #4]
90006f4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90006f52:	4a6e      	ldr	r2, [pc, #440]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90006f58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f5a:	e075      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f5c:	4b6b      	ldr	r3, [pc, #428]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f5e:	685b      	ldr	r3, [r3, #4]
90006f60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90006f64:	687b      	ldr	r3, [r7, #4]
90006f66:	6a1b      	ldr	r3, [r3, #32]
90006f68:	069b      	lsls	r3, r3, #26
90006f6a:	4968      	ldr	r1, [pc, #416]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f6c:	4313      	orrs	r3, r2
90006f6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f70:	e06a      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006f72:	4b66      	ldr	r3, [pc, #408]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f74:	68db      	ldr	r3, [r3, #12]
90006f76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90006f7a:	687b      	ldr	r3, [r7, #4]
90006f7c:	6a1b      	ldr	r3, [r3, #32]
90006f7e:	061b      	lsls	r3, r3, #24
90006f80:	4962      	ldr	r1, [pc, #392]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f82:	4313      	orrs	r3, r2
90006f84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90006f86:	e05f      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
90006f88:	687b      	ldr	r3, [r7, #4]
90006f8a:	69db      	ldr	r3, [r3, #28]
90006f8c:	2b00      	cmp	r3, #0
90006f8e:	d042      	beq.n	90007016 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90006f90:	4b5e      	ldr	r3, [pc, #376]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f92:	681b      	ldr	r3, [r3, #0]
90006f94:	4a5d      	ldr	r2, [pc, #372]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90006f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90006f9c:	f7fc fa14 	bl	900033c8 <HAL_GetTick>
90006fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fa2:	e008      	b.n	90006fb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
90006fa4:	f7fc fa10 	bl	900033c8 <HAL_GetTick>
90006fa8:	4602      	mov	r2, r0
90006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006fac:	1ad3      	subs	r3, r2, r3
90006fae:	2b02      	cmp	r3, #2
90006fb0:	d901      	bls.n	90006fb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90006fb2:	2303      	movs	r3, #3
90006fb4:	e280      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90006fb6:	4b55      	ldr	r3, [pc, #340]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006fb8:	681b      	ldr	r3, [r3, #0]
90006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
90006fbe:	2b00      	cmp	r3, #0
90006fc0:	d0f0      	beq.n	90006fa4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90006fc2:	f7fc fa0d 	bl	900033e0 <HAL_GetREVID>
90006fc6:	4603      	mov	r3, r0
90006fc8:	f241 0203 	movw	r2, #4099	; 0x1003
90006fcc:	4293      	cmp	r3, r2
90006fce:	d817      	bhi.n	90007000 <HAL_RCC_OscConfig+0x3ec>
90006fd0:	687b      	ldr	r3, [r7, #4]
90006fd2:	6a1b      	ldr	r3, [r3, #32]
90006fd4:	2b20      	cmp	r3, #32
90006fd6:	d108      	bne.n	90006fea <HAL_RCC_OscConfig+0x3d6>
90006fd8:	4b4c      	ldr	r3, [pc, #304]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006fda:	685b      	ldr	r3, [r3, #4]
90006fdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90006fe0:	4a4a      	ldr	r2, [pc, #296]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90006fe6:	6053      	str	r3, [r2, #4]
90006fe8:	e02e      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
90006fea:	4b48      	ldr	r3, [pc, #288]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006fec:	685b      	ldr	r3, [r3, #4]
90006fee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90006ff2:	687b      	ldr	r3, [r7, #4]
90006ff4:	6a1b      	ldr	r3, [r3, #32]
90006ff6:	069b      	lsls	r3, r3, #26
90006ff8:	4944      	ldr	r1, [pc, #272]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90006ffa:	4313      	orrs	r3, r2
90006ffc:	604b      	str	r3, [r1, #4]
90006ffe:	e023      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
90007000:	4b42      	ldr	r3, [pc, #264]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007002:	68db      	ldr	r3, [r3, #12]
90007004:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90007008:	687b      	ldr	r3, [r7, #4]
9000700a:	6a1b      	ldr	r3, [r3, #32]
9000700c:	061b      	lsls	r3, r3, #24
9000700e:	493f      	ldr	r1, [pc, #252]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007010:	4313      	orrs	r3, r2
90007012:	60cb      	str	r3, [r1, #12]
90007014:	e018      	b.n	90007048 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90007016:	4b3d      	ldr	r3, [pc, #244]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007018:	681b      	ldr	r3, [r3, #0]
9000701a:	4a3c      	ldr	r2, [pc, #240]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
9000701c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90007020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007022:	f7fc f9d1 	bl	900033c8 <HAL_GetTick>
90007026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90007028:	e008      	b.n	9000703c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000702a:	f7fc f9cd 	bl	900033c8 <HAL_GetTick>
9000702e:	4602      	mov	r2, r0
90007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007032:	1ad3      	subs	r3, r2, r3
90007034:	2b02      	cmp	r3, #2
90007036:	d901      	bls.n	9000703c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90007038:	2303      	movs	r3, #3
9000703a:	e23d      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000703c:	4b33      	ldr	r3, [pc, #204]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
9000703e:	681b      	ldr	r3, [r3, #0]
90007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007044:	2b00      	cmp	r3, #0
90007046:	d1f0      	bne.n	9000702a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90007048:	687b      	ldr	r3, [r7, #4]
9000704a:	681b      	ldr	r3, [r3, #0]
9000704c:	f003 0308 	and.w	r3, r3, #8
90007050:	2b00      	cmp	r3, #0
90007052:	d036      	beq.n	900070c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90007054:	687b      	ldr	r3, [r7, #4]
90007056:	695b      	ldr	r3, [r3, #20]
90007058:	2b00      	cmp	r3, #0
9000705a:	d019      	beq.n	90007090 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
9000705c:	4b2b      	ldr	r3, [pc, #172]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
9000705e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007060:	4a2a      	ldr	r2, [pc, #168]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007062:	f043 0301 	orr.w	r3, r3, #1
90007066:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007068:	f7fc f9ae 	bl	900033c8 <HAL_GetTick>
9000706c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000706e:	e008      	b.n	90007082 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90007070:	f7fc f9aa 	bl	900033c8 <HAL_GetTick>
90007074:	4602      	mov	r2, r0
90007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007078:	1ad3      	subs	r3, r2, r3
9000707a:	2b02      	cmp	r3, #2
9000707c:	d901      	bls.n	90007082 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
9000707e:	2303      	movs	r3, #3
90007080:	e21a      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90007082:	4b22      	ldr	r3, [pc, #136]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007086:	f003 0302 	and.w	r3, r3, #2
9000708a:	2b00      	cmp	r3, #0
9000708c:	d0f0      	beq.n	90007070 <HAL_RCC_OscConfig+0x45c>
9000708e:	e018      	b.n	900070c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90007090:	4b1e      	ldr	r3, [pc, #120]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007094:	4a1d      	ldr	r2, [pc, #116]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
90007096:	f023 0301 	bic.w	r3, r3, #1
9000709a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000709c:	f7fc f994 	bl	900033c8 <HAL_GetTick>
900070a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070a2:	e008      	b.n	900070b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
900070a4:	f7fc f990 	bl	900033c8 <HAL_GetTick>
900070a8:	4602      	mov	r2, r0
900070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900070ac:	1ad3      	subs	r3, r2, r3
900070ae:	2b02      	cmp	r3, #2
900070b0:	d901      	bls.n	900070b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
900070b2:	2303      	movs	r3, #3
900070b4:	e200      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
900070b6:	4b15      	ldr	r3, [pc, #84]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
900070b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900070ba:	f003 0302 	and.w	r3, r3, #2
900070be:	2b00      	cmp	r3, #0
900070c0:	d1f0      	bne.n	900070a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
900070c2:	687b      	ldr	r3, [r7, #4]
900070c4:	681b      	ldr	r3, [r3, #0]
900070c6:	f003 0320 	and.w	r3, r3, #32
900070ca:	2b00      	cmp	r3, #0
900070cc:	d039      	beq.n	90007142 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
900070ce:	687b      	ldr	r3, [r7, #4]
900070d0:	699b      	ldr	r3, [r3, #24]
900070d2:	2b00      	cmp	r3, #0
900070d4:	d01c      	beq.n	90007110 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
900070d6:	4b0d      	ldr	r3, [pc, #52]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
900070d8:	681b      	ldr	r3, [r3, #0]
900070da:	4a0c      	ldr	r2, [pc, #48]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
900070dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900070e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
900070e2:	f7fc f971 	bl	900033c8 <HAL_GetTick>
900070e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900070e8:	e008      	b.n	900070fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
900070ea:	f7fc f96d 	bl	900033c8 <HAL_GetTick>
900070ee:	4602      	mov	r2, r0
900070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900070f2:	1ad3      	subs	r3, r2, r3
900070f4:	2b02      	cmp	r3, #2
900070f6:	d901      	bls.n	900070fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
900070f8:	2303      	movs	r3, #3
900070fa:	e1dd      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
900070fc:	4b03      	ldr	r3, [pc, #12]	; (9000710c <HAL_RCC_OscConfig+0x4f8>)
900070fe:	681b      	ldr	r3, [r3, #0]
90007100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90007104:	2b00      	cmp	r3, #0
90007106:	d0f0      	beq.n	900070ea <HAL_RCC_OscConfig+0x4d6>
90007108:	e01b      	b.n	90007142 <HAL_RCC_OscConfig+0x52e>
9000710a:	bf00      	nop
9000710c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90007110:	4b9b      	ldr	r3, [pc, #620]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007112:	681b      	ldr	r3, [r3, #0]
90007114:	4a9a      	ldr	r2, [pc, #616]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000711a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
9000711c:	f7fc f954 	bl	900033c8 <HAL_GetTick>
90007120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007122:	e008      	b.n	90007136 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
90007124:	f7fc f950 	bl	900033c8 <HAL_GetTick>
90007128:	4602      	mov	r2, r0
9000712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000712c:	1ad3      	subs	r3, r2, r3
9000712e:	2b02      	cmp	r3, #2
90007130:	d901      	bls.n	90007136 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90007132:	2303      	movs	r3, #3
90007134:	e1c0      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90007136:	4b92      	ldr	r3, [pc, #584]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007138:	681b      	ldr	r3, [r3, #0]
9000713a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000713e:	2b00      	cmp	r3, #0
90007140:	d1f0      	bne.n	90007124 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90007142:	687b      	ldr	r3, [r7, #4]
90007144:	681b      	ldr	r3, [r3, #0]
90007146:	f003 0304 	and.w	r3, r3, #4
9000714a:	2b00      	cmp	r3, #0
9000714c:	f000 8081 	beq.w	90007252 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90007150:	4b8c      	ldr	r3, [pc, #560]	; (90007384 <HAL_RCC_OscConfig+0x770>)
90007152:	681b      	ldr	r3, [r3, #0]
90007154:	4a8b      	ldr	r2, [pc, #556]	; (90007384 <HAL_RCC_OscConfig+0x770>)
90007156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000715a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
9000715c:	f7fc f934 	bl	900033c8 <HAL_GetTick>
90007160:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007162:	e008      	b.n	90007176 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90007164:	f7fc f930 	bl	900033c8 <HAL_GetTick>
90007168:	4602      	mov	r2, r0
9000716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000716c:	1ad3      	subs	r3, r2, r3
9000716e:	2b64      	cmp	r3, #100	; 0x64
90007170:	d901      	bls.n	90007176 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90007172:	2303      	movs	r3, #3
90007174:	e1a0      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
90007176:	4b83      	ldr	r3, [pc, #524]	; (90007384 <HAL_RCC_OscConfig+0x770>)
90007178:	681b      	ldr	r3, [r3, #0]
9000717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000717e:	2b00      	cmp	r3, #0
90007180:	d0f0      	beq.n	90007164 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90007182:	687b      	ldr	r3, [r7, #4]
90007184:	689b      	ldr	r3, [r3, #8]
90007186:	2b01      	cmp	r3, #1
90007188:	d106      	bne.n	90007198 <HAL_RCC_OscConfig+0x584>
9000718a:	4b7d      	ldr	r3, [pc, #500]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000718e:	4a7c      	ldr	r2, [pc, #496]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007190:	f043 0301 	orr.w	r3, r3, #1
90007194:	6713      	str	r3, [r2, #112]	; 0x70
90007196:	e02d      	b.n	900071f4 <HAL_RCC_OscConfig+0x5e0>
90007198:	687b      	ldr	r3, [r7, #4]
9000719a:	689b      	ldr	r3, [r3, #8]
9000719c:	2b00      	cmp	r3, #0
9000719e:	d10c      	bne.n	900071ba <HAL_RCC_OscConfig+0x5a6>
900071a0:	4b77      	ldr	r3, [pc, #476]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071a4:	4a76      	ldr	r2, [pc, #472]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071a6:	f023 0301 	bic.w	r3, r3, #1
900071aa:	6713      	str	r3, [r2, #112]	; 0x70
900071ac:	4b74      	ldr	r3, [pc, #464]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071b0:	4a73      	ldr	r2, [pc, #460]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071b2:	f023 0304 	bic.w	r3, r3, #4
900071b6:	6713      	str	r3, [r2, #112]	; 0x70
900071b8:	e01c      	b.n	900071f4 <HAL_RCC_OscConfig+0x5e0>
900071ba:	687b      	ldr	r3, [r7, #4]
900071bc:	689b      	ldr	r3, [r3, #8]
900071be:	2b05      	cmp	r3, #5
900071c0:	d10c      	bne.n	900071dc <HAL_RCC_OscConfig+0x5c8>
900071c2:	4b6f      	ldr	r3, [pc, #444]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071c6:	4a6e      	ldr	r2, [pc, #440]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071c8:	f043 0304 	orr.w	r3, r3, #4
900071cc:	6713      	str	r3, [r2, #112]	; 0x70
900071ce:	4b6c      	ldr	r3, [pc, #432]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071d2:	4a6b      	ldr	r2, [pc, #428]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071d4:	f043 0301 	orr.w	r3, r3, #1
900071d8:	6713      	str	r3, [r2, #112]	; 0x70
900071da:	e00b      	b.n	900071f4 <HAL_RCC_OscConfig+0x5e0>
900071dc:	4b68      	ldr	r3, [pc, #416]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071e0:	4a67      	ldr	r2, [pc, #412]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071e2:	f023 0301 	bic.w	r3, r3, #1
900071e6:	6713      	str	r3, [r2, #112]	; 0x70
900071e8:	4b65      	ldr	r3, [pc, #404]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900071ec:	4a64      	ldr	r2, [pc, #400]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900071ee:	f023 0304 	bic.w	r3, r3, #4
900071f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
900071f4:	687b      	ldr	r3, [r7, #4]
900071f6:	689b      	ldr	r3, [r3, #8]
900071f8:	2b00      	cmp	r3, #0
900071fa:	d015      	beq.n	90007228 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
900071fc:	f7fc f8e4 	bl	900033c8 <HAL_GetTick>
90007200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90007202:	e00a      	b.n	9000721a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007204:	f7fc f8e0 	bl	900033c8 <HAL_GetTick>
90007208:	4602      	mov	r2, r0
9000720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000720c:	1ad3      	subs	r3, r2, r3
9000720e:	f241 3288 	movw	r2, #5000	; 0x1388
90007212:	4293      	cmp	r3, r2
90007214:	d901      	bls.n	9000721a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90007216:	2303      	movs	r3, #3
90007218:	e14e      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000721a:	4b59      	ldr	r3, [pc, #356]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000721e:	f003 0302 	and.w	r3, r3, #2
90007222:	2b00      	cmp	r3, #0
90007224:	d0ee      	beq.n	90007204 <HAL_RCC_OscConfig+0x5f0>
90007226:	e014      	b.n	90007252 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90007228:	f7fc f8ce 	bl	900033c8 <HAL_GetTick>
9000722c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000722e:	e00a      	b.n	90007246 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90007230:	f7fc f8ca 	bl	900033c8 <HAL_GetTick>
90007234:	4602      	mov	r2, r0
90007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007238:	1ad3      	subs	r3, r2, r3
9000723a:	f241 3288 	movw	r2, #5000	; 0x1388
9000723e:	4293      	cmp	r3, r2
90007240:	d901      	bls.n	90007246 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90007242:	2303      	movs	r3, #3
90007244:	e138      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90007246:	4b4e      	ldr	r3, [pc, #312]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000724a:	f003 0302 	and.w	r3, r3, #2
9000724e:	2b00      	cmp	r3, #0
90007250:	d1ee      	bne.n	90007230 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90007252:	687b      	ldr	r3, [r7, #4]
90007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007256:	2b00      	cmp	r3, #0
90007258:	f000 812d 	beq.w	900074b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000725c:	4b48      	ldr	r3, [pc, #288]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000725e:	691b      	ldr	r3, [r3, #16]
90007260:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007264:	2b18      	cmp	r3, #24
90007266:	f000 80bd 	beq.w	900073e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000726a:	687b      	ldr	r3, [r7, #4]
9000726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000726e:	2b02      	cmp	r3, #2
90007270:	f040 809e 	bne.w	900073b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90007274:	4b42      	ldr	r3, [pc, #264]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007276:	681b      	ldr	r3, [r3, #0]
90007278:	4a41      	ldr	r2, [pc, #260]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000727a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000727e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007280:	f7fc f8a2 	bl	900033c8 <HAL_GetTick>
90007284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90007286:	e008      	b.n	9000729a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007288:	f7fc f89e 	bl	900033c8 <HAL_GetTick>
9000728c:	4602      	mov	r2, r0
9000728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007290:	1ad3      	subs	r3, r2, r3
90007292:	2b02      	cmp	r3, #2
90007294:	d901      	bls.n	9000729a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90007296:	2303      	movs	r3, #3
90007298:	e10e      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000729a:	4b39      	ldr	r3, [pc, #228]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000729c:	681b      	ldr	r3, [r3, #0]
9000729e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900072a2:	2b00      	cmp	r3, #0
900072a4:	d1f0      	bne.n	90007288 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
900072a6:	4b36      	ldr	r3, [pc, #216]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900072a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900072aa:	4b37      	ldr	r3, [pc, #220]	; (90007388 <HAL_RCC_OscConfig+0x774>)
900072ac:	4013      	ands	r3, r2
900072ae:	687a      	ldr	r2, [r7, #4]
900072b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
900072b2:	687a      	ldr	r2, [r7, #4]
900072b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900072b6:	0112      	lsls	r2, r2, #4
900072b8:	430a      	orrs	r2, r1
900072ba:	4931      	ldr	r1, [pc, #196]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900072bc:	4313      	orrs	r3, r2
900072be:	628b      	str	r3, [r1, #40]	; 0x28
900072c0:	687b      	ldr	r3, [r7, #4]
900072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900072c4:	3b01      	subs	r3, #1
900072c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
900072ca:	687b      	ldr	r3, [r7, #4]
900072cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900072ce:	3b01      	subs	r3, #1
900072d0:	025b      	lsls	r3, r3, #9
900072d2:	b29b      	uxth	r3, r3
900072d4:	431a      	orrs	r2, r3
900072d6:	687b      	ldr	r3, [r7, #4]
900072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900072da:	3b01      	subs	r3, #1
900072dc:	041b      	lsls	r3, r3, #16
900072de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900072e2:	431a      	orrs	r2, r3
900072e4:	687b      	ldr	r3, [r7, #4]
900072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900072e8:	3b01      	subs	r3, #1
900072ea:	061b      	lsls	r3, r3, #24
900072ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
900072f0:	4923      	ldr	r1, [pc, #140]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900072f2:	4313      	orrs	r3, r2
900072f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
900072f6:	4b22      	ldr	r3, [pc, #136]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900072fa:	4a21      	ldr	r2, [pc, #132]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
900072fc:	f023 0301 	bic.w	r3, r3, #1
90007300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007302:	4b1f      	ldr	r3, [pc, #124]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90007306:	4b21      	ldr	r3, [pc, #132]	; (9000738c <HAL_RCC_OscConfig+0x778>)
90007308:	4013      	ands	r3, r2
9000730a:	687a      	ldr	r2, [r7, #4]
9000730c:	6c92      	ldr	r2, [r2, #72]	; 0x48
9000730e:	00d2      	lsls	r2, r2, #3
90007310:	491b      	ldr	r1, [pc, #108]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007312:	4313      	orrs	r3, r2
90007314:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90007316:	4b1a      	ldr	r3, [pc, #104]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000731a:	f023 020c 	bic.w	r2, r3, #12
9000731e:	687b      	ldr	r3, [r7, #4]
90007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007322:	4917      	ldr	r1, [pc, #92]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007324:	4313      	orrs	r3, r2
90007326:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90007328:	4b15      	ldr	r3, [pc, #84]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000732c:	f023 0202 	bic.w	r2, r3, #2
90007330:	687b      	ldr	r3, [r7, #4]
90007332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007334:	4912      	ldr	r1, [pc, #72]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007336:	4313      	orrs	r3, r2
90007338:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000733a:	4b11      	ldr	r3, [pc, #68]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000733e:	4a10      	ldr	r2, [pc, #64]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90007344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007346:	4b0e      	ldr	r3, [pc, #56]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000734a:	4a0d      	ldr	r2, [pc, #52]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000734c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90007352:	4b0b      	ldr	r3, [pc, #44]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007356:	4a0a      	ldr	r2, [pc, #40]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000735c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
9000735e:	4b08      	ldr	r3, [pc, #32]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007362:	4a07      	ldr	r2, [pc, #28]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007364:	f043 0301 	orr.w	r3, r3, #1
90007368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
9000736a:	4b05      	ldr	r3, [pc, #20]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
9000736c:	681b      	ldr	r3, [r3, #0]
9000736e:	4a04      	ldr	r2, [pc, #16]	; (90007380 <HAL_RCC_OscConfig+0x76c>)
90007370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90007374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90007376:	f7fc f827 	bl	900033c8 <HAL_GetTick>
9000737a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000737c:	e011      	b.n	900073a2 <HAL_RCC_OscConfig+0x78e>
9000737e:	bf00      	nop
90007380:	58024400 	.word	0x58024400
90007384:	58024800 	.word	0x58024800
90007388:	fffffc0c 	.word	0xfffffc0c
9000738c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90007390:	f7fc f81a 	bl	900033c8 <HAL_GetTick>
90007394:	4602      	mov	r2, r0
90007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007398:	1ad3      	subs	r3, r2, r3
9000739a:	2b02      	cmp	r3, #2
9000739c:	d901      	bls.n	900073a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
9000739e:	2303      	movs	r3, #3
900073a0:	e08a      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
900073a2:	4b47      	ldr	r3, [pc, #284]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073a4:	681b      	ldr	r3, [r3, #0]
900073a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900073aa:	2b00      	cmp	r3, #0
900073ac:	d0f0      	beq.n	90007390 <HAL_RCC_OscConfig+0x77c>
900073ae:	e082      	b.n	900074b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
900073b0:	4b43      	ldr	r3, [pc, #268]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073b2:	681b      	ldr	r3, [r3, #0]
900073b4:	4a42      	ldr	r2, [pc, #264]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
900073ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900073bc:	f7fc f804 	bl	900033c8 <HAL_GetTick>
900073c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073c2:	e008      	b.n	900073d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
900073c4:	f7fc f800 	bl	900033c8 <HAL_GetTick>
900073c8:	4602      	mov	r2, r0
900073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900073cc:	1ad3      	subs	r3, r2, r3
900073ce:	2b02      	cmp	r3, #2
900073d0:	d901      	bls.n	900073d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
900073d2:	2303      	movs	r3, #3
900073d4:	e070      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
900073d6:	4b3a      	ldr	r3, [pc, #232]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073d8:	681b      	ldr	r3, [r3, #0]
900073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
900073de:	2b00      	cmp	r3, #0
900073e0:	d1f0      	bne.n	900073c4 <HAL_RCC_OscConfig+0x7b0>
900073e2:	e068      	b.n	900074b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
900073e4:	4b36      	ldr	r3, [pc, #216]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900073e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
900073ea:	4b35      	ldr	r3, [pc, #212]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900073ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
900073f0:	687b      	ldr	r3, [r7, #4]
900073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900073f4:	2b01      	cmp	r3, #1
900073f6:	d031      	beq.n	9000745c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
900073f8:	693b      	ldr	r3, [r7, #16]
900073fa:	f003 0203 	and.w	r2, r3, #3
900073fe:	687b      	ldr	r3, [r7, #4]
90007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90007402:	429a      	cmp	r2, r3
90007404:	d12a      	bne.n	9000745c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007406:	693b      	ldr	r3, [r7, #16]
90007408:	091b      	lsrs	r3, r3, #4
9000740a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
9000740e:	687b      	ldr	r3, [r7, #4]
90007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90007412:	429a      	cmp	r2, r3
90007414:	d122      	bne.n	9000745c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007416:	68fb      	ldr	r3, [r7, #12]
90007418:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000741c:	687b      	ldr	r3, [r7, #4]
9000741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007420:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90007422:	429a      	cmp	r2, r3
90007424:	d11a      	bne.n	9000745c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007426:	68fb      	ldr	r3, [r7, #12]
90007428:	0a5b      	lsrs	r3, r3, #9
9000742a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
9000742e:	687b      	ldr	r3, [r7, #4]
90007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007432:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90007434:	429a      	cmp	r2, r3
90007436:	d111      	bne.n	9000745c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007438:	68fb      	ldr	r3, [r7, #12]
9000743a:	0c1b      	lsrs	r3, r3, #16
9000743c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90007440:	687b      	ldr	r3, [r7, #4]
90007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007444:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90007446:	429a      	cmp	r2, r3
90007448:	d108      	bne.n	9000745c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000744a:	68fb      	ldr	r3, [r7, #12]
9000744c:	0e1b      	lsrs	r3, r3, #24
9000744e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90007452:	687b      	ldr	r3, [r7, #4]
90007454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90007456:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90007458:	429a      	cmp	r2, r3
9000745a:	d001      	beq.n	90007460 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
9000745c:	2301      	movs	r3, #1
9000745e:	e02b      	b.n	900074b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
90007460:	4b17      	ldr	r3, [pc, #92]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
90007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90007464:	08db      	lsrs	r3, r3, #3
90007466:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000746a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000746c:	687b      	ldr	r3, [r7, #4]
9000746e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007470:	693a      	ldr	r2, [r7, #16]
90007472:	429a      	cmp	r2, r3
90007474:	d01f      	beq.n	900074b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
90007476:	4b12      	ldr	r3, [pc, #72]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
90007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000747a:	4a11      	ldr	r2, [pc, #68]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
9000747c:	f023 0301 	bic.w	r3, r3, #1
90007480:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90007482:	f7fb ffa1 	bl	900033c8 <HAL_GetTick>
90007486:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
90007488:	bf00      	nop
9000748a:	f7fb ff9d 	bl	900033c8 <HAL_GetTick>
9000748e:	4602      	mov	r2, r0
90007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007492:	4293      	cmp	r3, r2
90007494:	d0f9      	beq.n	9000748a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90007496:	4b0a      	ldr	r3, [pc, #40]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
90007498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000749a:	4b0a      	ldr	r3, [pc, #40]	; (900074c4 <HAL_RCC_OscConfig+0x8b0>)
9000749c:	4013      	ands	r3, r2
9000749e:	687a      	ldr	r2, [r7, #4]
900074a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
900074a2:	00d2      	lsls	r2, r2, #3
900074a4:	4906      	ldr	r1, [pc, #24]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900074a6:	4313      	orrs	r3, r2
900074a8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
900074aa:	4b05      	ldr	r3, [pc, #20]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900074ae:	4a04      	ldr	r2, [pc, #16]	; (900074c0 <HAL_RCC_OscConfig+0x8ac>)
900074b0:	f043 0301 	orr.w	r3, r3, #1
900074b4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
900074b6:	2300      	movs	r3, #0
}
900074b8:	4618      	mov	r0, r3
900074ba:	3730      	adds	r7, #48	; 0x30
900074bc:	46bd      	mov	sp, r7
900074be:	bd80      	pop	{r7, pc}
900074c0:	58024400 	.word	0x58024400
900074c4:	ffff0007 	.word	0xffff0007

900074c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
900074c8:	b580      	push	{r7, lr}
900074ca:	b086      	sub	sp, #24
900074cc:	af00      	add	r7, sp, #0
900074ce:	6078      	str	r0, [r7, #4]
900074d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
900074d2:	687b      	ldr	r3, [r7, #4]
900074d4:	2b00      	cmp	r3, #0
900074d6:	d101      	bne.n	900074dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
900074d8:	2301      	movs	r3, #1
900074da:	e19c      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900074dc:	4b8a      	ldr	r3, [pc, #552]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900074de:	681b      	ldr	r3, [r3, #0]
900074e0:	f003 030f 	and.w	r3, r3, #15
900074e4:	683a      	ldr	r2, [r7, #0]
900074e6:	429a      	cmp	r2, r3
900074e8:	d910      	bls.n	9000750c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900074ea:	4b87      	ldr	r3, [pc, #540]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900074ec:	681b      	ldr	r3, [r3, #0]
900074ee:	f023 020f 	bic.w	r2, r3, #15
900074f2:	4985      	ldr	r1, [pc, #532]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900074f4:	683b      	ldr	r3, [r7, #0]
900074f6:	4313      	orrs	r3, r2
900074f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900074fa:	4b83      	ldr	r3, [pc, #524]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900074fc:	681b      	ldr	r3, [r3, #0]
900074fe:	f003 030f 	and.w	r3, r3, #15
90007502:	683a      	ldr	r2, [r7, #0]
90007504:	429a      	cmp	r2, r3
90007506:	d001      	beq.n	9000750c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90007508:	2301      	movs	r3, #1
9000750a:	e184      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000750c:	687b      	ldr	r3, [r7, #4]
9000750e:	681b      	ldr	r3, [r3, #0]
90007510:	f003 0304 	and.w	r3, r3, #4
90007514:	2b00      	cmp	r3, #0
90007516:	d010      	beq.n	9000753a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90007518:	687b      	ldr	r3, [r7, #4]
9000751a:	691a      	ldr	r2, [r3, #16]
9000751c:	4b7b      	ldr	r3, [pc, #492]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000751e:	699b      	ldr	r3, [r3, #24]
90007520:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007524:	429a      	cmp	r2, r3
90007526:	d908      	bls.n	9000753a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90007528:	4b78      	ldr	r3, [pc, #480]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000752a:	699b      	ldr	r3, [r3, #24]
9000752c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007530:	687b      	ldr	r3, [r7, #4]
90007532:	691b      	ldr	r3, [r3, #16]
90007534:	4975      	ldr	r1, [pc, #468]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007536:	4313      	orrs	r3, r2
90007538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000753a:	687b      	ldr	r3, [r7, #4]
9000753c:	681b      	ldr	r3, [r3, #0]
9000753e:	f003 0308 	and.w	r3, r3, #8
90007542:	2b00      	cmp	r3, #0
90007544:	d010      	beq.n	90007568 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90007546:	687b      	ldr	r3, [r7, #4]
90007548:	695a      	ldr	r2, [r3, #20]
9000754a:	4b70      	ldr	r3, [pc, #448]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000754c:	69db      	ldr	r3, [r3, #28]
9000754e:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007552:	429a      	cmp	r2, r3
90007554:	d908      	bls.n	90007568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90007556:	4b6d      	ldr	r3, [pc, #436]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007558:	69db      	ldr	r3, [r3, #28]
9000755a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
9000755e:	687b      	ldr	r3, [r7, #4]
90007560:	695b      	ldr	r3, [r3, #20]
90007562:	496a      	ldr	r1, [pc, #424]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007564:	4313      	orrs	r3, r2
90007566:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90007568:	687b      	ldr	r3, [r7, #4]
9000756a:	681b      	ldr	r3, [r3, #0]
9000756c:	f003 0310 	and.w	r3, r3, #16
90007570:	2b00      	cmp	r3, #0
90007572:	d010      	beq.n	90007596 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007574:	687b      	ldr	r3, [r7, #4]
90007576:	699a      	ldr	r2, [r3, #24]
90007578:	4b64      	ldr	r3, [pc, #400]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000757a:	69db      	ldr	r3, [r3, #28]
9000757c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007580:	429a      	cmp	r2, r3
90007582:	d908      	bls.n	90007596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007584:	4b61      	ldr	r3, [pc, #388]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007586:	69db      	ldr	r3, [r3, #28]
90007588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
9000758c:	687b      	ldr	r3, [r7, #4]
9000758e:	699b      	ldr	r3, [r3, #24]
90007590:	495e      	ldr	r1, [pc, #376]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007592:	4313      	orrs	r3, r2
90007594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90007596:	687b      	ldr	r3, [r7, #4]
90007598:	681b      	ldr	r3, [r3, #0]
9000759a:	f003 0320 	and.w	r3, r3, #32
9000759e:	2b00      	cmp	r3, #0
900075a0:	d010      	beq.n	900075c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900075a2:	687b      	ldr	r3, [r7, #4]
900075a4:	69da      	ldr	r2, [r3, #28]
900075a6:	4b59      	ldr	r3, [pc, #356]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075a8:	6a1b      	ldr	r3, [r3, #32]
900075aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
900075ae:	429a      	cmp	r2, r3
900075b0:	d908      	bls.n	900075c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900075b2:	4b56      	ldr	r3, [pc, #344]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075b4:	6a1b      	ldr	r3, [r3, #32]
900075b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900075ba:	687b      	ldr	r3, [r7, #4]
900075bc:	69db      	ldr	r3, [r3, #28]
900075be:	4953      	ldr	r1, [pc, #332]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075c0:	4313      	orrs	r3, r2
900075c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900075c4:	687b      	ldr	r3, [r7, #4]
900075c6:	681b      	ldr	r3, [r3, #0]
900075c8:	f003 0302 	and.w	r3, r3, #2
900075cc:	2b00      	cmp	r3, #0
900075ce:	d010      	beq.n	900075f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900075d0:	687b      	ldr	r3, [r7, #4]
900075d2:	68da      	ldr	r2, [r3, #12]
900075d4:	4b4d      	ldr	r3, [pc, #308]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075d6:	699b      	ldr	r3, [r3, #24]
900075d8:	f003 030f 	and.w	r3, r3, #15
900075dc:	429a      	cmp	r2, r3
900075de:	d908      	bls.n	900075f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900075e0:	4b4a      	ldr	r3, [pc, #296]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075e2:	699b      	ldr	r3, [r3, #24]
900075e4:	f023 020f 	bic.w	r2, r3, #15
900075e8:	687b      	ldr	r3, [r7, #4]
900075ea:	68db      	ldr	r3, [r3, #12]
900075ec:	4947      	ldr	r1, [pc, #284]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900075ee:	4313      	orrs	r3, r2
900075f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900075f2:	687b      	ldr	r3, [r7, #4]
900075f4:	681b      	ldr	r3, [r3, #0]
900075f6:	f003 0301 	and.w	r3, r3, #1
900075fa:	2b00      	cmp	r3, #0
900075fc:	d055      	beq.n	900076aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
900075fe:	4b43      	ldr	r3, [pc, #268]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007600:	699b      	ldr	r3, [r3, #24]
90007602:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90007606:	687b      	ldr	r3, [r7, #4]
90007608:	689b      	ldr	r3, [r3, #8]
9000760a:	4940      	ldr	r1, [pc, #256]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000760c:	4313      	orrs	r3, r2
9000760e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90007610:	687b      	ldr	r3, [r7, #4]
90007612:	685b      	ldr	r3, [r3, #4]
90007614:	2b02      	cmp	r3, #2
90007616:	d107      	bne.n	90007628 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90007618:	4b3c      	ldr	r3, [pc, #240]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000761a:	681b      	ldr	r3, [r3, #0]
9000761c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90007620:	2b00      	cmp	r3, #0
90007622:	d121      	bne.n	90007668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007624:	2301      	movs	r3, #1
90007626:	e0f6      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90007628:	687b      	ldr	r3, [r7, #4]
9000762a:	685b      	ldr	r3, [r3, #4]
9000762c:	2b03      	cmp	r3, #3
9000762e:	d107      	bne.n	90007640 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90007630:	4b36      	ldr	r3, [pc, #216]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007632:	681b      	ldr	r3, [r3, #0]
90007634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90007638:	2b00      	cmp	r3, #0
9000763a:	d115      	bne.n	90007668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
9000763c:	2301      	movs	r3, #1
9000763e:	e0ea      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90007640:	687b      	ldr	r3, [r7, #4]
90007642:	685b      	ldr	r3, [r3, #4]
90007644:	2b01      	cmp	r3, #1
90007646:	d107      	bne.n	90007658 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90007648:	4b30      	ldr	r3, [pc, #192]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000764a:	681b      	ldr	r3, [r3, #0]
9000764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90007650:	2b00      	cmp	r3, #0
90007652:	d109      	bne.n	90007668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007654:	2301      	movs	r3, #1
90007656:	e0de      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90007658:	4b2c      	ldr	r3, [pc, #176]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000765a:	681b      	ldr	r3, [r3, #0]
9000765c:	f003 0304 	and.w	r3, r3, #4
90007660:	2b00      	cmp	r3, #0
90007662:	d101      	bne.n	90007668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
90007664:	2301      	movs	r3, #1
90007666:	e0d6      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90007668:	4b28      	ldr	r3, [pc, #160]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000766a:	691b      	ldr	r3, [r3, #16]
9000766c:	f023 0207 	bic.w	r2, r3, #7
90007670:	687b      	ldr	r3, [r7, #4]
90007672:	685b      	ldr	r3, [r3, #4]
90007674:	4925      	ldr	r1, [pc, #148]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
90007676:	4313      	orrs	r3, r2
90007678:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000767a:	f7fb fea5 	bl	900033c8 <HAL_GetTick>
9000767e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007680:	e00a      	b.n	90007698 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90007682:	f7fb fea1 	bl	900033c8 <HAL_GetTick>
90007686:	4602      	mov	r2, r0
90007688:	697b      	ldr	r3, [r7, #20]
9000768a:	1ad3      	subs	r3, r2, r3
9000768c:	f241 3288 	movw	r2, #5000	; 0x1388
90007690:	4293      	cmp	r3, r2
90007692:	d901      	bls.n	90007698 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
90007694:	2303      	movs	r3, #3
90007696:	e0be      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90007698:	4b1c      	ldr	r3, [pc, #112]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
9000769a:	691b      	ldr	r3, [r3, #16]
9000769c:	f003 0238 	and.w	r2, r3, #56	; 0x38
900076a0:	687b      	ldr	r3, [r7, #4]
900076a2:	685b      	ldr	r3, [r3, #4]
900076a4:	00db      	lsls	r3, r3, #3
900076a6:	429a      	cmp	r2, r3
900076a8:	d1eb      	bne.n	90007682 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900076aa:	687b      	ldr	r3, [r7, #4]
900076ac:	681b      	ldr	r3, [r3, #0]
900076ae:	f003 0302 	and.w	r3, r3, #2
900076b2:	2b00      	cmp	r3, #0
900076b4:	d010      	beq.n	900076d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900076b6:	687b      	ldr	r3, [r7, #4]
900076b8:	68da      	ldr	r2, [r3, #12]
900076ba:	4b14      	ldr	r3, [pc, #80]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900076bc:	699b      	ldr	r3, [r3, #24]
900076be:	f003 030f 	and.w	r3, r3, #15
900076c2:	429a      	cmp	r2, r3
900076c4:	d208      	bcs.n	900076d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900076c6:	4b11      	ldr	r3, [pc, #68]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900076c8:	699b      	ldr	r3, [r3, #24]
900076ca:	f023 020f 	bic.w	r2, r3, #15
900076ce:	687b      	ldr	r3, [r7, #4]
900076d0:	68db      	ldr	r3, [r3, #12]
900076d2:	490e      	ldr	r1, [pc, #56]	; (9000770c <HAL_RCC_ClockConfig+0x244>)
900076d4:	4313      	orrs	r3, r2
900076d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900076d8:	4b0b      	ldr	r3, [pc, #44]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900076da:	681b      	ldr	r3, [r3, #0]
900076dc:	f003 030f 	and.w	r3, r3, #15
900076e0:	683a      	ldr	r2, [r7, #0]
900076e2:	429a      	cmp	r2, r3
900076e4:	d214      	bcs.n	90007710 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
900076e6:	4b08      	ldr	r3, [pc, #32]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900076e8:	681b      	ldr	r3, [r3, #0]
900076ea:	f023 020f 	bic.w	r2, r3, #15
900076ee:	4906      	ldr	r1, [pc, #24]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900076f0:	683b      	ldr	r3, [r7, #0]
900076f2:	4313      	orrs	r3, r2
900076f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900076f6:	4b04      	ldr	r3, [pc, #16]	; (90007708 <HAL_RCC_ClockConfig+0x240>)
900076f8:	681b      	ldr	r3, [r3, #0]
900076fa:	f003 030f 	and.w	r3, r3, #15
900076fe:	683a      	ldr	r2, [r7, #0]
90007700:	429a      	cmp	r2, r3
90007702:	d005      	beq.n	90007710 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90007704:	2301      	movs	r3, #1
90007706:	e086      	b.n	90007816 <HAL_RCC_ClockConfig+0x34e>
90007708:	52002000 	.word	0x52002000
9000770c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90007710:	687b      	ldr	r3, [r7, #4]
90007712:	681b      	ldr	r3, [r3, #0]
90007714:	f003 0304 	and.w	r3, r3, #4
90007718:	2b00      	cmp	r3, #0
9000771a:	d010      	beq.n	9000773e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000771c:	687b      	ldr	r3, [r7, #4]
9000771e:	691a      	ldr	r2, [r3, #16]
90007720:	4b3f      	ldr	r3, [pc, #252]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
90007722:	699b      	ldr	r3, [r3, #24]
90007724:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007728:	429a      	cmp	r2, r3
9000772a:	d208      	bcs.n	9000773e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000772c:	4b3c      	ldr	r3, [pc, #240]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
9000772e:	699b      	ldr	r3, [r3, #24]
90007730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007734:	687b      	ldr	r3, [r7, #4]
90007736:	691b      	ldr	r3, [r3, #16]
90007738:	4939      	ldr	r1, [pc, #228]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
9000773a:	4313      	orrs	r3, r2
9000773c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000773e:	687b      	ldr	r3, [r7, #4]
90007740:	681b      	ldr	r3, [r3, #0]
90007742:	f003 0308 	and.w	r3, r3, #8
90007746:	2b00      	cmp	r3, #0
90007748:	d010      	beq.n	9000776c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000774a:	687b      	ldr	r3, [r7, #4]
9000774c:	695a      	ldr	r2, [r3, #20]
9000774e:	4b34      	ldr	r3, [pc, #208]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
90007750:	69db      	ldr	r3, [r3, #28]
90007752:	f003 0370 	and.w	r3, r3, #112	; 0x70
90007756:	429a      	cmp	r2, r3
90007758:	d208      	bcs.n	9000776c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000775a:	4b31      	ldr	r3, [pc, #196]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
9000775c:	69db      	ldr	r3, [r3, #28]
9000775e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90007762:	687b      	ldr	r3, [r7, #4]
90007764:	695b      	ldr	r3, [r3, #20]
90007766:	492e      	ldr	r1, [pc, #184]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
90007768:	4313      	orrs	r3, r2
9000776a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000776c:	687b      	ldr	r3, [r7, #4]
9000776e:	681b      	ldr	r3, [r3, #0]
90007770:	f003 0310 	and.w	r3, r3, #16
90007774:	2b00      	cmp	r3, #0
90007776:	d010      	beq.n	9000779a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90007778:	687b      	ldr	r3, [r7, #4]
9000777a:	699a      	ldr	r2, [r3, #24]
9000777c:	4b28      	ldr	r3, [pc, #160]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
9000777e:	69db      	ldr	r3, [r3, #28]
90007780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007784:	429a      	cmp	r2, r3
90007786:	d208      	bcs.n	9000779a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90007788:	4b25      	ldr	r3, [pc, #148]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
9000778a:	69db      	ldr	r3, [r3, #28]
9000778c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90007790:	687b      	ldr	r3, [r7, #4]
90007792:	699b      	ldr	r3, [r3, #24]
90007794:	4922      	ldr	r1, [pc, #136]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
90007796:	4313      	orrs	r3, r2
90007798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000779a:	687b      	ldr	r3, [r7, #4]
9000779c:	681b      	ldr	r3, [r3, #0]
9000779e:	f003 0320 	and.w	r3, r3, #32
900077a2:	2b00      	cmp	r3, #0
900077a4:	d010      	beq.n	900077c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900077a6:	687b      	ldr	r3, [r7, #4]
900077a8:	69da      	ldr	r2, [r3, #28]
900077aa:	4b1d      	ldr	r3, [pc, #116]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
900077ac:	6a1b      	ldr	r3, [r3, #32]
900077ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
900077b2:	429a      	cmp	r2, r3
900077b4:	d208      	bcs.n	900077c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
900077b6:	4b1a      	ldr	r3, [pc, #104]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
900077b8:	6a1b      	ldr	r3, [r3, #32]
900077ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900077be:	687b      	ldr	r3, [r7, #4]
900077c0:	69db      	ldr	r3, [r3, #28]
900077c2:	4917      	ldr	r1, [pc, #92]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
900077c4:	4313      	orrs	r3, r2
900077c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900077c8:	f000 f834 	bl	90007834 <HAL_RCC_GetSysClockFreq>
900077cc:	4602      	mov	r2, r0
900077ce:	4b14      	ldr	r3, [pc, #80]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
900077d0:	699b      	ldr	r3, [r3, #24]
900077d2:	0a1b      	lsrs	r3, r3, #8
900077d4:	f003 030f 	and.w	r3, r3, #15
900077d8:	4912      	ldr	r1, [pc, #72]	; (90007824 <HAL_RCC_ClockConfig+0x35c>)
900077da:	5ccb      	ldrb	r3, [r1, r3]
900077dc:	f003 031f 	and.w	r3, r3, #31
900077e0:	fa22 f303 	lsr.w	r3, r2, r3
900077e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900077e6:	4b0e      	ldr	r3, [pc, #56]	; (90007820 <HAL_RCC_ClockConfig+0x358>)
900077e8:	699b      	ldr	r3, [r3, #24]
900077ea:	f003 030f 	and.w	r3, r3, #15
900077ee:	4a0d      	ldr	r2, [pc, #52]	; (90007824 <HAL_RCC_ClockConfig+0x35c>)
900077f0:	5cd3      	ldrb	r3, [r2, r3]
900077f2:	f003 031f 	and.w	r3, r3, #31
900077f6:	693a      	ldr	r2, [r7, #16]
900077f8:	fa22 f303 	lsr.w	r3, r2, r3
900077fc:	4a0a      	ldr	r2, [pc, #40]	; (90007828 <HAL_RCC_ClockConfig+0x360>)
900077fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007800:	4a0a      	ldr	r2, [pc, #40]	; (9000782c <HAL_RCC_ClockConfig+0x364>)
90007802:	693b      	ldr	r3, [r7, #16]
90007804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
90007806:	4b0a      	ldr	r3, [pc, #40]	; (90007830 <HAL_RCC_ClockConfig+0x368>)
90007808:	681b      	ldr	r3, [r3, #0]
9000780a:	4618      	mov	r0, r3
9000780c:	f7fb fd92 	bl	90003334 <HAL_InitTick>
90007810:	4603      	mov	r3, r0
90007812:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90007814:	7bfb      	ldrb	r3, [r7, #15]
}
90007816:	4618      	mov	r0, r3
90007818:	3718      	adds	r7, #24
9000781a:	46bd      	mov	sp, r7
9000781c:	bd80      	pop	{r7, pc}
9000781e:	bf00      	nop
90007820:	58024400 	.word	0x58024400
90007824:	9000d004 	.word	0x9000d004
90007828:	2000003c 	.word	0x2000003c
9000782c:	20000038 	.word	0x20000038
90007830:	20000040 	.word	0x20000040

90007834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90007834:	b480      	push	{r7}
90007836:	b089      	sub	sp, #36	; 0x24
90007838:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
9000783a:	4bb3      	ldr	r3, [pc, #716]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000783c:	691b      	ldr	r3, [r3, #16]
9000783e:	f003 0338 	and.w	r3, r3, #56	; 0x38
90007842:	2b18      	cmp	r3, #24
90007844:	f200 8155 	bhi.w	90007af2 <HAL_RCC_GetSysClockFreq+0x2be>
90007848:	a201      	add	r2, pc, #4	; (adr r2, 90007850 <HAL_RCC_GetSysClockFreq+0x1c>)
9000784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000784e:	bf00      	nop
90007850:	900078b5 	.word	0x900078b5
90007854:	90007af3 	.word	0x90007af3
90007858:	90007af3 	.word	0x90007af3
9000785c:	90007af3 	.word	0x90007af3
90007860:	90007af3 	.word	0x90007af3
90007864:	90007af3 	.word	0x90007af3
90007868:	90007af3 	.word	0x90007af3
9000786c:	90007af3 	.word	0x90007af3
90007870:	900078db 	.word	0x900078db
90007874:	90007af3 	.word	0x90007af3
90007878:	90007af3 	.word	0x90007af3
9000787c:	90007af3 	.word	0x90007af3
90007880:	90007af3 	.word	0x90007af3
90007884:	90007af3 	.word	0x90007af3
90007888:	90007af3 	.word	0x90007af3
9000788c:	90007af3 	.word	0x90007af3
90007890:	900078e1 	.word	0x900078e1
90007894:	90007af3 	.word	0x90007af3
90007898:	90007af3 	.word	0x90007af3
9000789c:	90007af3 	.word	0x90007af3
900078a0:	90007af3 	.word	0x90007af3
900078a4:	90007af3 	.word	0x90007af3
900078a8:	90007af3 	.word	0x90007af3
900078ac:	90007af3 	.word	0x90007af3
900078b0:	900078e7 	.word	0x900078e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900078b4:	4b94      	ldr	r3, [pc, #592]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078b6:	681b      	ldr	r3, [r3, #0]
900078b8:	f003 0320 	and.w	r3, r3, #32
900078bc:	2b00      	cmp	r3, #0
900078be:	d009      	beq.n	900078d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
900078c0:	4b91      	ldr	r3, [pc, #580]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078c2:	681b      	ldr	r3, [r3, #0]
900078c4:	08db      	lsrs	r3, r3, #3
900078c6:	f003 0303 	and.w	r3, r3, #3
900078ca:	4a90      	ldr	r2, [pc, #576]	; (90007b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078cc:	fa22 f303 	lsr.w	r3, r2, r3
900078d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
900078d2:	e111      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900078d4:	4b8d      	ldr	r3, [pc, #564]	; (90007b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
900078d6:	61bb      	str	r3, [r7, #24]
      break;
900078d8:	e10e      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
900078da:	4b8d      	ldr	r3, [pc, #564]	; (90007b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
900078dc:	61bb      	str	r3, [r7, #24]
      break;
900078de:	e10b      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
900078e0:	4b8c      	ldr	r3, [pc, #560]	; (90007b14 <HAL_RCC_GetSysClockFreq+0x2e0>)
900078e2:	61bb      	str	r3, [r7, #24]
      break;
900078e4:	e108      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900078e6:	4b88      	ldr	r3, [pc, #544]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900078ea:	f003 0303 	and.w	r3, r3, #3
900078ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
900078f0:	4b85      	ldr	r3, [pc, #532]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900078f4:	091b      	lsrs	r3, r3, #4
900078f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900078fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
900078fc:	4b82      	ldr	r3, [pc, #520]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007900:	f003 0301 	and.w	r3, r3, #1
90007904:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
90007906:	4b80      	ldr	r3, [pc, #512]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000790a:	08db      	lsrs	r3, r3, #3
9000790c:	f3c3 030c 	ubfx	r3, r3, #0, #13
90007910:	68fa      	ldr	r2, [r7, #12]
90007912:	fb02 f303 	mul.w	r3, r2, r3
90007916:	ee07 3a90 	vmov	s15, r3
9000791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000791e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
90007922:	693b      	ldr	r3, [r7, #16]
90007924:	2b00      	cmp	r3, #0
90007926:	f000 80e1 	beq.w	90007aec <HAL_RCC_GetSysClockFreq+0x2b8>
9000792a:	697b      	ldr	r3, [r7, #20]
9000792c:	2b02      	cmp	r3, #2
9000792e:	f000 8083 	beq.w	90007a38 <HAL_RCC_GetSysClockFreq+0x204>
90007932:	697b      	ldr	r3, [r7, #20]
90007934:	2b02      	cmp	r3, #2
90007936:	f200 80a1 	bhi.w	90007a7c <HAL_RCC_GetSysClockFreq+0x248>
9000793a:	697b      	ldr	r3, [r7, #20]
9000793c:	2b00      	cmp	r3, #0
9000793e:	d003      	beq.n	90007948 <HAL_RCC_GetSysClockFreq+0x114>
90007940:	697b      	ldr	r3, [r7, #20]
90007942:	2b01      	cmp	r3, #1
90007944:	d056      	beq.n	900079f4 <HAL_RCC_GetSysClockFreq+0x1c0>
90007946:	e099      	b.n	90007a7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90007948:	4b6f      	ldr	r3, [pc, #444]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000794a:	681b      	ldr	r3, [r3, #0]
9000794c:	f003 0320 	and.w	r3, r3, #32
90007950:	2b00      	cmp	r3, #0
90007952:	d02d      	beq.n	900079b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
90007954:	4b6c      	ldr	r3, [pc, #432]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007956:	681b      	ldr	r3, [r3, #0]
90007958:	08db      	lsrs	r3, r3, #3
9000795a:	f003 0303 	and.w	r3, r3, #3
9000795e:	4a6b      	ldr	r2, [pc, #428]	; (90007b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
90007960:	fa22 f303 	lsr.w	r3, r2, r3
90007964:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007966:	687b      	ldr	r3, [r7, #4]
90007968:	ee07 3a90 	vmov	s15, r3
9000796c:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007970:	693b      	ldr	r3, [r7, #16]
90007972:	ee07 3a90 	vmov	s15, r3
90007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000797a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000797e:	4b62      	ldr	r3, [pc, #392]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007982:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007986:	ee07 3a90 	vmov	s15, r3
9000798a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000798e:	ed97 6a02 	vldr	s12, [r7, #8]
90007992:	eddf 5a61 	vldr	s11, [pc, #388]	; 90007b18 <HAL_RCC_GetSysClockFreq+0x2e4>
90007996:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000799a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000799e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900079a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079a6:	ee67 7a27 	vmul.f32	s15, s14, s15
900079aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
900079ae:	e087      	b.n	90007ac0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079b0:	693b      	ldr	r3, [r7, #16]
900079b2:	ee07 3a90 	vmov	s15, r3
900079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 90007b1c <HAL_RCC_GetSysClockFreq+0x2e8>
900079be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900079c2:	4b51      	ldr	r3, [pc, #324]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
900079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900079c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900079ca:	ee07 3a90 	vmov	s15, r3
900079ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
900079d2:	ed97 6a02 	vldr	s12, [r7, #8]
900079d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 90007b18 <HAL_RCC_GetSysClockFreq+0x2e4>
900079da:	eec6 7a25 	vdiv.f32	s15, s12, s11
900079de:	ee76 7aa7 	vadd.f32	s15, s13, s15
900079e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900079e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900079ea:	ee67 7a27 	vmul.f32	s15, s14, s15
900079ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
900079f2:	e065      	b.n	90007ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
900079f4:	693b      	ldr	r3, [r7, #16]
900079f6:	ee07 3a90 	vmov	s15, r3
900079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900079fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 90007b20 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a06:	4b40      	ldr	r3, [pc, #256]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a0e:	ee07 3a90 	vmov	s15, r3
90007a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a16:	ed97 6a02 	vldr	s12, [r7, #8]
90007a1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90007b18 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a36:	e043      	b.n	90007ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a38:	693b      	ldr	r3, [r7, #16]
90007a3a:	ee07 3a90 	vmov	s15, r3
90007a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a42:	eddf 6a38 	vldr	s13, [pc, #224]	; 90007b24 <HAL_RCC_GetSysClockFreq+0x2f0>
90007a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a4a:	4b2f      	ldr	r3, [pc, #188]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a52:	ee07 3a90 	vmov	s15, r3
90007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a5a:	ed97 6a02 	vldr	s12, [r7, #8]
90007a5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90007b18 <HAL_RCC_GetSysClockFreq+0x2e4>
90007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
90007a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007a7a:	e021      	b.n	90007ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
90007a7c:	693b      	ldr	r3, [r7, #16]
90007a7e:	ee07 3a90 	vmov	s15, r3
90007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
90007a86:	eddf 6a26 	vldr	s13, [pc, #152]	; 90007b20 <HAL_RCC_GetSysClockFreq+0x2ec>
90007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90007a8e:	4b1e      	ldr	r3, [pc, #120]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
90007a96:	ee07 3a90 	vmov	s15, r3
90007a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
90007a9e:	ed97 6a02 	vldr	s12, [r7, #8]
90007aa2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90007b18 <HAL_RCC_GetSysClockFreq+0x2e4>
90007aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
90007aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
90007aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90007ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90007ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
90007aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
90007abe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
90007ac0:	4b11      	ldr	r3, [pc, #68]	; (90007b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
90007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007ac4:	0a5b      	lsrs	r3, r3, #9
90007ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90007aca:	3301      	adds	r3, #1
90007acc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
90007ace:	683b      	ldr	r3, [r7, #0]
90007ad0:	ee07 3a90 	vmov	s15, r3
90007ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90007ad8:	edd7 6a07 	vldr	s13, [r7, #28]
90007adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
90007ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90007ae4:	ee17 3a90 	vmov	r3, s15
90007ae8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
90007aea:	e005      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
90007aec:	2300      	movs	r3, #0
90007aee:	61bb      	str	r3, [r7, #24]
      break;
90007af0:	e002      	b.n	90007af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
90007af2:	4b07      	ldr	r3, [pc, #28]	; (90007b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
90007af4:	61bb      	str	r3, [r7, #24]
      break;
90007af6:	bf00      	nop
  }

  return sysclockfreq;
90007af8:	69bb      	ldr	r3, [r7, #24]
}
90007afa:	4618      	mov	r0, r3
90007afc:	3724      	adds	r7, #36	; 0x24
90007afe:	46bd      	mov	sp, r7
90007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b04:	4770      	bx	lr
90007b06:	bf00      	nop
90007b08:	58024400 	.word	0x58024400
90007b0c:	03d09000 	.word	0x03d09000
90007b10:	003d0900 	.word	0x003d0900
90007b14:	017d7840 	.word	0x017d7840
90007b18:	46000000 	.word	0x46000000
90007b1c:	4c742400 	.word	0x4c742400
90007b20:	4a742400 	.word	0x4a742400
90007b24:	4bbebc20 	.word	0x4bbebc20

90007b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90007b28:	b580      	push	{r7, lr}
90007b2a:	b082      	sub	sp, #8
90007b2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90007b2e:	f7ff fe81 	bl	90007834 <HAL_RCC_GetSysClockFreq>
90007b32:	4602      	mov	r2, r0
90007b34:	4b10      	ldr	r3, [pc, #64]	; (90007b78 <HAL_RCC_GetHCLKFreq+0x50>)
90007b36:	699b      	ldr	r3, [r3, #24]
90007b38:	0a1b      	lsrs	r3, r3, #8
90007b3a:	f003 030f 	and.w	r3, r3, #15
90007b3e:	490f      	ldr	r1, [pc, #60]	; (90007b7c <HAL_RCC_GetHCLKFreq+0x54>)
90007b40:	5ccb      	ldrb	r3, [r1, r3]
90007b42:	f003 031f 	and.w	r3, r3, #31
90007b46:	fa22 f303 	lsr.w	r3, r2, r3
90007b4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007b4c:	4b0a      	ldr	r3, [pc, #40]	; (90007b78 <HAL_RCC_GetHCLKFreq+0x50>)
90007b4e:	699b      	ldr	r3, [r3, #24]
90007b50:	f003 030f 	and.w	r3, r3, #15
90007b54:	4a09      	ldr	r2, [pc, #36]	; (90007b7c <HAL_RCC_GetHCLKFreq+0x54>)
90007b56:	5cd3      	ldrb	r3, [r2, r3]
90007b58:	f003 031f 	and.w	r3, r3, #31
90007b5c:	687a      	ldr	r2, [r7, #4]
90007b5e:	fa22 f303 	lsr.w	r3, r2, r3
90007b62:	4a07      	ldr	r2, [pc, #28]	; (90007b80 <HAL_RCC_GetHCLKFreq+0x58>)
90007b64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007b66:	4a07      	ldr	r2, [pc, #28]	; (90007b84 <HAL_RCC_GetHCLKFreq+0x5c>)
90007b68:	687b      	ldr	r3, [r7, #4]
90007b6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90007b6c:	4b04      	ldr	r3, [pc, #16]	; (90007b80 <HAL_RCC_GetHCLKFreq+0x58>)
90007b6e:	681b      	ldr	r3, [r3, #0]
}
90007b70:	4618      	mov	r0, r3
90007b72:	3708      	adds	r7, #8
90007b74:	46bd      	mov	sp, r7
90007b76:	bd80      	pop	{r7, pc}
90007b78:	58024400 	.word	0x58024400
90007b7c:	9000d004 	.word	0x9000d004
90007b80:	2000003c 	.word	0x2000003c
90007b84:	20000038 	.word	0x20000038

90007b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90007b88:	b580      	push	{r7, lr}
90007b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90007b8c:	f7ff ffcc 	bl	90007b28 <HAL_RCC_GetHCLKFreq>
90007b90:	4602      	mov	r2, r0
90007b92:	4b06      	ldr	r3, [pc, #24]	; (90007bac <HAL_RCC_GetPCLK2Freq+0x24>)
90007b94:	69db      	ldr	r3, [r3, #28]
90007b96:	0a1b      	lsrs	r3, r3, #8
90007b98:	f003 0307 	and.w	r3, r3, #7
90007b9c:	4904      	ldr	r1, [pc, #16]	; (90007bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
90007b9e:	5ccb      	ldrb	r3, [r1, r3]
90007ba0:	f003 031f 	and.w	r3, r3, #31
90007ba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90007ba8:	4618      	mov	r0, r3
90007baa:	bd80      	pop	{r7, pc}
90007bac:	58024400 	.word	0x58024400
90007bb0:	9000d004 	.word	0x9000d004

90007bb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90007bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90007bb8:	b0ca      	sub	sp, #296	; 0x128
90007bba:	af00      	add	r7, sp, #0
90007bbc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90007bc0:	2300      	movs	r3, #0
90007bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90007bc6:	2300      	movs	r3, #0
90007bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
90007bd4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
90007bd8:	2500      	movs	r5, #0
90007bda:	ea54 0305 	orrs.w	r3, r4, r5
90007bde:	d049      	beq.n	90007c74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
90007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90007bea:	d02f      	beq.n	90007c4c <HAL_RCCEx_PeriphCLKConfig+0x98>
90007bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90007bf0:	d828      	bhi.n	90007c44 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007bf6:	d01a      	beq.n	90007c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
90007bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007bfc:	d822      	bhi.n	90007c44 <HAL_RCCEx_PeriphCLKConfig+0x90>
90007bfe:	2b00      	cmp	r3, #0
90007c00:	d003      	beq.n	90007c0a <HAL_RCCEx_PeriphCLKConfig+0x56>
90007c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90007c06:	d007      	beq.n	90007c18 <HAL_RCCEx_PeriphCLKConfig+0x64>
90007c08:	e01c      	b.n	90007c44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007c0a:	4bb8      	ldr	r3, [pc, #736]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007c0e:	4ab7      	ldr	r2, [pc, #732]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c16:	e01a      	b.n	90007c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c1c:	3308      	adds	r3, #8
90007c1e:	2102      	movs	r1, #2
90007c20:	4618      	mov	r0, r3
90007c22:	f001 f9d1 	bl	90008fc8 <RCCEx_PLL2_Config>
90007c26:	4603      	mov	r3, r0
90007c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c2c:	e00f      	b.n	90007c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c32:	3328      	adds	r3, #40	; 0x28
90007c34:	2102      	movs	r1, #2
90007c36:	4618      	mov	r0, r3
90007c38:	f001 fa78 	bl	9000912c <RCCEx_PLL3_Config>
90007c3c:	4603      	mov	r3, r0
90007c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
90007c42:	e004      	b.n	90007c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007c44:	2301      	movs	r3, #1
90007c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007c4a:	e000      	b.n	90007c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
90007c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
90007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007c52:	2b00      	cmp	r3, #0
90007c54:	d10a      	bne.n	90007c6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
90007c56:	4ba5      	ldr	r3, [pc, #660]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007c5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
90007c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007c64:	4aa1      	ldr	r2, [pc, #644]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007c66:	430b      	orrs	r3, r1
90007c68:	6513      	str	r3, [r2, #80]	; 0x50
90007c6a:	e003      	b.n	90007c74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
90007c7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
90007c80:	f04f 0900 	mov.w	r9, #0
90007c84:	ea58 0309 	orrs.w	r3, r8, r9
90007c88:	d047      	beq.n	90007d1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
90007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007c90:	2b04      	cmp	r3, #4
90007c92:	d82a      	bhi.n	90007cea <HAL_RCCEx_PeriphCLKConfig+0x136>
90007c94:	a201      	add	r2, pc, #4	; (adr r2, 90007c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
90007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90007c9a:	bf00      	nop
90007c9c:	90007cb1 	.word	0x90007cb1
90007ca0:	90007cbf 	.word	0x90007cbf
90007ca4:	90007cd5 	.word	0x90007cd5
90007ca8:	90007cf3 	.word	0x90007cf3
90007cac:	90007cf3 	.word	0x90007cf3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007cb0:	4b8e      	ldr	r3, [pc, #568]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007cb4:	4a8d      	ldr	r2, [pc, #564]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007cbc:	e01a      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007cc2:	3308      	adds	r3, #8
90007cc4:	2100      	movs	r1, #0
90007cc6:	4618      	mov	r0, r3
90007cc8:	f001 f97e 	bl	90008fc8 <RCCEx_PLL2_Config>
90007ccc:	4603      	mov	r3, r0
90007cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007cd2:	e00f      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007cd8:	3328      	adds	r3, #40	; 0x28
90007cda:	2100      	movs	r1, #0
90007cdc:	4618      	mov	r0, r3
90007cde:	f001 fa25 	bl	9000912c <RCCEx_PLL3_Config>
90007ce2:	4603      	mov	r3, r0
90007ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007ce8:	e004      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007cea:	2301      	movs	r3, #1
90007cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007cf0:	e000      	b.n	90007cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
90007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007cf8:	2b00      	cmp	r3, #0
90007cfa:	d10a      	bne.n	90007d12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90007cfc:	4b7b      	ldr	r3, [pc, #492]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007d00:	f023 0107 	bic.w	r1, r3, #7
90007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007d0a:	4a78      	ldr	r2, [pc, #480]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d0c:	430b      	orrs	r3, r1
90007d0e:	6513      	str	r3, [r2, #80]	; 0x50
90007d10:	e003      	b.n	90007d1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007d16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
90007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
90007d22:	f402 7a00 	and.w	sl, r2, #512	; 0x200
90007d26:	f04f 0b00 	mov.w	fp, #0
90007d2a:	ea5a 030b 	orrs.w	r3, sl, fp
90007d2e:	d04c      	beq.n	90007dca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
90007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90007d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007d3a:	d030      	beq.n	90007d9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
90007d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90007d40:	d829      	bhi.n	90007d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d42:	2bc0      	cmp	r3, #192	; 0xc0
90007d44:	d02d      	beq.n	90007da2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
90007d46:	2bc0      	cmp	r3, #192	; 0xc0
90007d48:	d825      	bhi.n	90007d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d4a:	2b80      	cmp	r3, #128	; 0x80
90007d4c:	d018      	beq.n	90007d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
90007d4e:	2b80      	cmp	r3, #128	; 0x80
90007d50:	d821      	bhi.n	90007d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
90007d52:	2b00      	cmp	r3, #0
90007d54:	d002      	beq.n	90007d5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
90007d56:	2b40      	cmp	r3, #64	; 0x40
90007d58:	d007      	beq.n	90007d6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
90007d5a:	e01c      	b.n	90007d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007d5c:	4b63      	ldr	r3, [pc, #396]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007d60:	4a62      	ldr	r2, [pc, #392]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d68:	e01c      	b.n	90007da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d6e:	3308      	adds	r3, #8
90007d70:	2100      	movs	r1, #0
90007d72:	4618      	mov	r0, r3
90007d74:	f001 f928 	bl	90008fc8 <RCCEx_PLL2_Config>
90007d78:	4603      	mov	r3, r0
90007d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d7e:	e011      	b.n	90007da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007d84:	3328      	adds	r3, #40	; 0x28
90007d86:	2100      	movs	r1, #0
90007d88:	4618      	mov	r0, r3
90007d8a:	f001 f9cf 	bl	9000912c <RCCEx_PLL3_Config>
90007d8e:	4603      	mov	r3, r0
90007d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
90007d94:	e006      	b.n	90007da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90007d96:	2301      	movs	r3, #1
90007d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007d9c:	e002      	b.n	90007da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007d9e:	bf00      	nop
90007da0:	e000      	b.n	90007da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
90007da2:	bf00      	nop
    }

    if (ret == HAL_OK)
90007da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007da8:	2b00      	cmp	r3, #0
90007daa:	d10a      	bne.n	90007dc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90007dac:	4b4f      	ldr	r3, [pc, #316]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007db0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
90007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90007dba:	4a4c      	ldr	r2, [pc, #304]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007dbc:	430b      	orrs	r3, r1
90007dbe:	6513      	str	r3, [r2, #80]	; 0x50
90007dc0:	e003      	b.n	90007dca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
90007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
90007dd2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
90007dd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
90007dda:	2300      	movs	r3, #0
90007ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
90007de0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
90007de4:	460b      	mov	r3, r1
90007de6:	4313      	orrs	r3, r2
90007de8:	d053      	beq.n	90007e92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
90007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007dee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90007df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90007df6:	d035      	beq.n	90007e64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
90007df8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90007dfc:	d82e      	bhi.n	90007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007dfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90007e02:	d031      	beq.n	90007e68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
90007e04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90007e08:	d828      	bhi.n	90007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90007e0e:	d01a      	beq.n	90007e46 <HAL_RCCEx_PeriphCLKConfig+0x292>
90007e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90007e14:	d822      	bhi.n	90007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
90007e16:	2b00      	cmp	r3, #0
90007e18:	d003      	beq.n	90007e22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
90007e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007e1e:	d007      	beq.n	90007e30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
90007e20:	e01c      	b.n	90007e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007e22:	4b32      	ldr	r3, [pc, #200]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007e26:	4a31      	ldr	r2, [pc, #196]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e2e:	e01c      	b.n	90007e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e34:	3308      	adds	r3, #8
90007e36:	2100      	movs	r1, #0
90007e38:	4618      	mov	r0, r3
90007e3a:	f001 f8c5 	bl	90008fc8 <RCCEx_PLL2_Config>
90007e3e:	4603      	mov	r3, r0
90007e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007e44:	e011      	b.n	90007e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e4a:	3328      	adds	r3, #40	; 0x28
90007e4c:	2100      	movs	r1, #0
90007e4e:	4618      	mov	r0, r3
90007e50:	f001 f96c 	bl	9000912c <RCCEx_PLL3_Config>
90007e54:	4603      	mov	r3, r0
90007e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007e5a:	e006      	b.n	90007e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007e5c:	2301      	movs	r3, #1
90007e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007e62:	e002      	b.n	90007e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e64:	bf00      	nop
90007e66:	e000      	b.n	90007e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
90007e68:	bf00      	nop
    }

    if (ret == HAL_OK)
90007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007e6e:	2b00      	cmp	r3, #0
90007e70:	d10b      	bne.n	90007e8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90007e72:	4b1e      	ldr	r3, [pc, #120]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007e76:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
90007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90007e82:	4a1a      	ldr	r2, [pc, #104]	; (90007eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
90007e84:	430b      	orrs	r3, r1
90007e86:	6593      	str	r3, [r2, #88]	; 0x58
90007e88:	e003      	b.n	90007e92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007e8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
90007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
90007e9a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
90007e9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
90007ea2:	2300      	movs	r3, #0
90007ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
90007ea8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
90007eac:	460b      	mov	r3, r1
90007eae:	4313      	orrs	r3, r2
90007eb0:	d056      	beq.n	90007f60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
90007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007eb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90007eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90007ebe:	d038      	beq.n	90007f32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
90007ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
90007ec4:	d831      	bhi.n	90007f2a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90007eca:	d034      	beq.n	90007f36 <HAL_RCCEx_PeriphCLKConfig+0x382>
90007ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90007ed0:	d82b      	bhi.n	90007f2a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007ed6:	d01d      	beq.n	90007f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
90007ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90007edc:	d825      	bhi.n	90007f2a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007ede:	2b00      	cmp	r3, #0
90007ee0:	d006      	beq.n	90007ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
90007ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90007ee6:	d00a      	beq.n	90007efe <HAL_RCCEx_PeriphCLKConfig+0x34a>
90007ee8:	e01f      	b.n	90007f2a <HAL_RCCEx_PeriphCLKConfig+0x376>
90007eea:	bf00      	nop
90007eec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007ef0:	4ba2      	ldr	r3, [pc, #648]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007ef4:	4aa1      	ldr	r2, [pc, #644]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007efc:	e01c      	b.n	90007f38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f02:	3308      	adds	r3, #8
90007f04:	2100      	movs	r1, #0
90007f06:	4618      	mov	r0, r3
90007f08:	f001 f85e 	bl	90008fc8 <RCCEx_PLL2_Config>
90007f0c:	4603      	mov	r3, r0
90007f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
90007f12:	e011      	b.n	90007f38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90007f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f18:	3328      	adds	r3, #40	; 0x28
90007f1a:	2100      	movs	r1, #0
90007f1c:	4618      	mov	r0, r3
90007f1e:	f001 f905 	bl	9000912c <RCCEx_PLL3_Config>
90007f22:	4603      	mov	r3, r0
90007f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
90007f28:	e006      	b.n	90007f38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
90007f2a:	2301      	movs	r3, #1
90007f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007f30:	e002      	b.n	90007f38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f32:	bf00      	nop
90007f34:	e000      	b.n	90007f38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
90007f36:	bf00      	nop
    }

    if (ret == HAL_OK)
90007f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007f3c:	2b00      	cmp	r3, #0
90007f3e:	d10b      	bne.n	90007f58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90007f40:	4b8e      	ldr	r3, [pc, #568]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007f44:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
90007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90007f50:	4a8a      	ldr	r2, [pc, #552]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007f52:	430b      	orrs	r3, r1
90007f54:	6593      	str	r3, [r2, #88]	; 0x58
90007f56:	e003      	b.n	90007f60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90007f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
90007f68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
90007f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
90007f70:	2300      	movs	r3, #0
90007f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
90007f76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
90007f7a:	460b      	mov	r3, r1
90007f7c:	4313      	orrs	r3, r2
90007f7e:	d03a      	beq.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
90007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007f86:	2b30      	cmp	r3, #48	; 0x30
90007f88:	d01f      	beq.n	90007fca <HAL_RCCEx_PeriphCLKConfig+0x416>
90007f8a:	2b30      	cmp	r3, #48	; 0x30
90007f8c:	d819      	bhi.n	90007fc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f8e:	2b20      	cmp	r3, #32
90007f90:	d00c      	beq.n	90007fac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90007f92:	2b20      	cmp	r3, #32
90007f94:	d815      	bhi.n	90007fc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
90007f96:	2b00      	cmp	r3, #0
90007f98:	d019      	beq.n	90007fce <HAL_RCCEx_PeriphCLKConfig+0x41a>
90007f9a:	2b10      	cmp	r3, #16
90007f9c:	d111      	bne.n	90007fc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90007f9e:	4b77      	ldr	r3, [pc, #476]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007fa2:	4a76      	ldr	r2, [pc, #472]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007faa:	e011      	b.n	90007fd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007fb0:	3308      	adds	r3, #8
90007fb2:	2102      	movs	r1, #2
90007fb4:	4618      	mov	r0, r3
90007fb6:	f001 f807 	bl	90008fc8 <RCCEx_PLL2_Config>
90007fba:	4603      	mov	r3, r0
90007fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
90007fc0:	e006      	b.n	90007fd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90007fc2:	2301      	movs	r3, #1
90007fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90007fc8:	e002      	b.n	90007fd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007fca:	bf00      	nop
90007fcc:	e000      	b.n	90007fd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
90007fce:	bf00      	nop
    }

    if (ret == HAL_OK)
90007fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007fd4:	2b00      	cmp	r3, #0
90007fd6:	d10a      	bne.n	90007fee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90007fd8:	4b68      	ldr	r3, [pc, #416]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007fdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
90007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007fe6:	4a65      	ldr	r2, [pc, #404]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90007fe8:	430b      	orrs	r3, r1
90007fea:	64d3      	str	r3, [r2, #76]	; 0x4c
90007fec:	e003      	b.n	90007ff6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
90007fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90007ff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90007ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
90007ffe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
90008002:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
90008006:	2300      	movs	r3, #0
90008008:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
9000800c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
90008010:	460b      	mov	r3, r1
90008012:	4313      	orrs	r3, r2
90008014:	d051      	beq.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
90008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000801a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000801c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008020:	d035      	beq.n	9000808e <HAL_RCCEx_PeriphCLKConfig+0x4da>
90008022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008026:	d82e      	bhi.n	90008086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000802c:	d031      	beq.n	90008092 <HAL_RCCEx_PeriphCLKConfig+0x4de>
9000802e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90008032:	d828      	bhi.n	90008086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90008038:	d01a      	beq.n	90008070 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
9000803a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000803e:	d822      	bhi.n	90008086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
90008040:	2b00      	cmp	r3, #0
90008042:	d003      	beq.n	9000804c <HAL_RCCEx_PeriphCLKConfig+0x498>
90008044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008048:	d007      	beq.n	9000805a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000804a:	e01c      	b.n	90008086 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000804c:	4b4b      	ldr	r3, [pc, #300]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008050:	4a4a      	ldr	r2, [pc, #296]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008058:	e01c      	b.n	90008094 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000805e:	3308      	adds	r3, #8
90008060:	2100      	movs	r1, #0
90008062:	4618      	mov	r0, r3
90008064:	f000 ffb0 	bl	90008fc8 <RCCEx_PLL2_Config>
90008068:	4603      	mov	r3, r0
9000806a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
9000806e:	e011      	b.n	90008094 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008074:	3328      	adds	r3, #40	; 0x28
90008076:	2100      	movs	r1, #0
90008078:	4618      	mov	r0, r3
9000807a:	f001 f857 	bl	9000912c <RCCEx_PLL3_Config>
9000807e:	4603      	mov	r3, r0
90008080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
90008084:	e006      	b.n	90008094 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008086:	2301      	movs	r3, #1
90008088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000808c:	e002      	b.n	90008094 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
9000808e:	bf00      	nop
90008090:	e000      	b.n	90008094 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
90008092:	bf00      	nop
    }

    if (ret == HAL_OK)
90008094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008098:	2b00      	cmp	r3, #0
9000809a:	d10a      	bne.n	900080b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000809c:	4b37      	ldr	r3, [pc, #220]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
9000809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900080a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
900080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900080aa:	4a34      	ldr	r2, [pc, #208]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
900080ac:	430b      	orrs	r3, r1
900080ae:	6513      	str	r3, [r2, #80]	; 0x50
900080b0:	e003      	b.n	900080ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
900080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900080b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
900080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080be:	e9d3 2300 	ldrd	r2, r3, [r3]
900080c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
900080c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
900080ca:	2300      	movs	r3, #0
900080cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
900080d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
900080d4:	460b      	mov	r3, r1
900080d6:	4313      	orrs	r3, r2
900080d8:	d056      	beq.n	90008188 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
900080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900080de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900080e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900080e4:	d033      	beq.n	9000814e <HAL_RCCEx_PeriphCLKConfig+0x59a>
900080e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900080ea:	d82c      	bhi.n	90008146 <HAL_RCCEx_PeriphCLKConfig+0x592>
900080ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
900080f0:	d02f      	beq.n	90008152 <HAL_RCCEx_PeriphCLKConfig+0x59e>
900080f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
900080f6:	d826      	bhi.n	90008146 <HAL_RCCEx_PeriphCLKConfig+0x592>
900080f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
900080fc:	d02b      	beq.n	90008156 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
900080fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90008102:	d820      	bhi.n	90008146 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008108:	d012      	beq.n	90008130 <HAL_RCCEx_PeriphCLKConfig+0x57c>
9000810a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000810e:	d81a      	bhi.n	90008146 <HAL_RCCEx_PeriphCLKConfig+0x592>
90008110:	2b00      	cmp	r3, #0
90008112:	d022      	beq.n	9000815a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
90008114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008118:	d115      	bne.n	90008146 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000811e:	3308      	adds	r3, #8
90008120:	2101      	movs	r1, #1
90008122:	4618      	mov	r0, r3
90008124:	f000 ff50 	bl	90008fc8 <RCCEx_PLL2_Config>
90008128:	4603      	mov	r3, r0
9000812a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
9000812e:	e015      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008134:	3328      	adds	r3, #40	; 0x28
90008136:	2101      	movs	r1, #1
90008138:	4618      	mov	r0, r3
9000813a:	f000 fff7 	bl	9000912c <RCCEx_PLL3_Config>
9000813e:	4603      	mov	r3, r0
90008140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
90008144:	e00a      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008146:	2301      	movs	r3, #1
90008148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000814c:	e006      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000814e:	bf00      	nop
90008150:	e004      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008152:	bf00      	nop
90008154:	e002      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
90008156:	bf00      	nop
90008158:	e000      	b.n	9000815c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
9000815a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000815c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008160:	2b00      	cmp	r3, #0
90008162:	d10d      	bne.n	90008180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90008164:	4b05      	ldr	r3, [pc, #20]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008168:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
9000816c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90008172:	4a02      	ldr	r2, [pc, #8]	; (9000817c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
90008174:	430b      	orrs	r3, r1
90008176:	6513      	str	r3, [r2, #80]	; 0x50
90008178:	e006      	b.n	90008188 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
9000817a:	bf00      	nop
9000817c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000818c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008190:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
90008194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
90008198:	2300      	movs	r3, #0
9000819a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
9000819e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
900081a2:	460b      	mov	r3, r1
900081a4:	4313      	orrs	r3, r2
900081a6:	d055      	beq.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
900081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900081ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900081b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900081b4:	d033      	beq.n	9000821e <HAL_RCCEx_PeriphCLKConfig+0x66a>
900081b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900081ba:	d82c      	bhi.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900081c0:	d02f      	beq.n	90008222 <HAL_RCCEx_PeriphCLKConfig+0x66e>
900081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900081c6:	d826      	bhi.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900081cc:	d02b      	beq.n	90008226 <HAL_RCCEx_PeriphCLKConfig+0x672>
900081ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900081d2:	d820      	bhi.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900081d8:	d012      	beq.n	90008200 <HAL_RCCEx_PeriphCLKConfig+0x64c>
900081da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900081de:	d81a      	bhi.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x662>
900081e0:	2b00      	cmp	r3, #0
900081e2:	d022      	beq.n	9000822a <HAL_RCCEx_PeriphCLKConfig+0x676>
900081e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900081e8:	d115      	bne.n	90008216 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900081ee:	3308      	adds	r3, #8
900081f0:	2101      	movs	r1, #1
900081f2:	4618      	mov	r0, r3
900081f4:	f000 fee8 	bl	90008fc8 <RCCEx_PLL2_Config>
900081f8:	4603      	mov	r3, r0
900081fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
900081fe:	e015      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008204:	3328      	adds	r3, #40	; 0x28
90008206:	2101      	movs	r1, #1
90008208:	4618      	mov	r0, r3
9000820a:	f000 ff8f 	bl	9000912c <RCCEx_PLL3_Config>
9000820e:	4603      	mov	r3, r0
90008210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
90008214:	e00a      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
90008216:	2301      	movs	r3, #1
90008218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000821c:	e006      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000821e:	bf00      	nop
90008220:	e004      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008222:	bf00      	nop
90008224:	e002      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
90008226:	bf00      	nop
90008228:	e000      	b.n	9000822c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
9000822a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000822c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008230:	2b00      	cmp	r3, #0
90008232:	d10b      	bne.n	9000824c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90008234:	4ba3      	ldr	r3, [pc, #652]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008238:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
9000823c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90008244:	4a9f      	ldr	r2, [pc, #636]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008246:	430b      	orrs	r3, r1
90008248:	6593      	str	r3, [r2, #88]	; 0x58
9000824a:	e003      	b.n	90008254 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000824c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008258:	e9d3 2300 	ldrd	r2, r3, [r3]
9000825c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
90008260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
90008264:	2300      	movs	r3, #0
90008266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
9000826a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
9000826e:	460b      	mov	r3, r1
90008270:	4313      	orrs	r3, r2
90008272:	d037      	beq.n	900082e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
90008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000827a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000827e:	d00e      	beq.n	9000829e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
90008280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90008284:	d816      	bhi.n	900082b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
90008286:	2b00      	cmp	r3, #0
90008288:	d018      	beq.n	900082bc <HAL_RCCEx_PeriphCLKConfig+0x708>
9000828a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000828e:	d111      	bne.n	900082b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008290:	4b8c      	ldr	r3, [pc, #560]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008294:	4a8b      	ldr	r2, [pc, #556]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000829a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
9000829c:	e00f      	b.n	900082be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082a2:	3308      	adds	r3, #8
900082a4:	2101      	movs	r1, #1
900082a6:	4618      	mov	r0, r3
900082a8:	f000 fe8e 	bl	90008fc8 <RCCEx_PLL2_Config>
900082ac:	4603      	mov	r3, r0
900082ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
900082b2:	e004      	b.n	900082be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900082b4:	2301      	movs	r3, #1
900082b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900082ba:	e000      	b.n	900082be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
900082bc:	bf00      	nop
    }

    if (ret == HAL_OK)
900082be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900082c2:	2b00      	cmp	r3, #0
900082c4:	d10a      	bne.n	900082dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
900082c6:	4b7f      	ldr	r3, [pc, #508]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900082ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
900082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900082d4:	4a7b      	ldr	r2, [pc, #492]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900082d6:	430b      	orrs	r3, r1
900082d8:	6513      	str	r3, [r2, #80]	; 0x50
900082da:	e003      	b.n	900082e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
900082dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900082e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
900082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
900082ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
900082f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
900082f4:	2300      	movs	r3, #0
900082f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
900082fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
900082fe:	460b      	mov	r3, r1
90008300:	4313      	orrs	r3, r2
90008302:	d039      	beq.n	90008378 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
90008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9000830a:	2b03      	cmp	r3, #3
9000830c:	d81c      	bhi.n	90008348 <HAL_RCCEx_PeriphCLKConfig+0x794>
9000830e:	a201      	add	r2, pc, #4	; (adr r2, 90008314 <HAL_RCCEx_PeriphCLKConfig+0x760>)
90008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90008314:	90008351 	.word	0x90008351
90008318:	90008325 	.word	0x90008325
9000831c:	90008333 	.word	0x90008333
90008320:	90008351 	.word	0x90008351
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008324:	4b67      	ldr	r3, [pc, #412]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008328:	4a66      	ldr	r2, [pc, #408]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000832a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000832e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
90008330:	e00f      	b.n	90008352 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008336:	3308      	adds	r3, #8
90008338:	2102      	movs	r1, #2
9000833a:	4618      	mov	r0, r3
9000833c:	f000 fe44 	bl	90008fc8 <RCCEx_PLL2_Config>
90008340:	4603      	mov	r3, r0
90008342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
90008346:	e004      	b.n	90008352 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
90008348:	2301      	movs	r3, #1
9000834a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000834e:	e000      	b.n	90008352 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
90008350:	bf00      	nop
    }

    if (ret == HAL_OK)
90008352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008356:	2b00      	cmp	r3, #0
90008358:	d10a      	bne.n	90008370 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000835a:	4b5a      	ldr	r3, [pc, #360]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000835e:	f023 0103 	bic.w	r1, r3, #3
90008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90008368:	4a56      	ldr	r2, [pc, #344]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000836a:	430b      	orrs	r3, r1
9000836c:	64d3      	str	r3, [r2, #76]	; 0x4c
9000836e:	e003      	b.n	90008378 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000837c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008380:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
90008384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
90008388:	2300      	movs	r3, #0
9000838a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
9000838e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
90008392:	460b      	mov	r3, r1
90008394:	4313      	orrs	r3, r2
90008396:	f000 809f 	beq.w	900084d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000839a:	4b4b      	ldr	r3, [pc, #300]	; (900084c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
9000839c:	681b      	ldr	r3, [r3, #0]
9000839e:	4a4a      	ldr	r2, [pc, #296]	; (900084c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900083a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
900083a6:	f7fb f80f 	bl	900033c8 <HAL_GetTick>
900083aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083ae:	e00b      	b.n	900083c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900083b0:	f7fb f80a 	bl	900033c8 <HAL_GetTick>
900083b4:	4602      	mov	r2, r0
900083b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
900083ba:	1ad3      	subs	r3, r2, r3
900083bc:	2b64      	cmp	r3, #100	; 0x64
900083be:	d903      	bls.n	900083c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
900083c0:	2303      	movs	r3, #3
900083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900083c6:	e005      	b.n	900083d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
900083c8:	4b3f      	ldr	r3, [pc, #252]	; (900084c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
900083ca:	681b      	ldr	r3, [r3, #0]
900083cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
900083d0:	2b00      	cmp	r3, #0
900083d2:	d0ed      	beq.n	900083b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
900083d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900083d8:	2b00      	cmp	r3, #0
900083da:	d179      	bne.n	900084d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
900083dc:	4b39      	ldr	r3, [pc, #228]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900083e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900083e8:	4053      	eors	r3, r2
900083ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
900083ee:	2b00      	cmp	r3, #0
900083f0:	d015      	beq.n	9000841e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
900083f2:	4b34      	ldr	r3, [pc, #208]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900083f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900083fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
900083fe:	4b31      	ldr	r3, [pc, #196]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008402:	4a30      	ldr	r2, [pc, #192]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90008408:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000840a:	4b2e      	ldr	r3, [pc, #184]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000840e:	4a2d      	ldr	r2, [pc, #180]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90008414:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90008416:	4a2b      	ldr	r2, [pc, #172]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
9000841c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000842a:	d118      	bne.n	9000845e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000842c:	f7fa ffcc 	bl	900033c8 <HAL_GetTick>
90008430:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008434:	e00d      	b.n	90008452 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90008436:	f7fa ffc7 	bl	900033c8 <HAL_GetTick>
9000843a:	4602      	mov	r2, r0
9000843c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
90008440:	1ad2      	subs	r2, r2, r3
90008442:	f241 3388 	movw	r3, #5000	; 0x1388
90008446:	429a      	cmp	r2, r3
90008448:	d903      	bls.n	90008452 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
9000844a:	2303      	movs	r3, #3
9000844c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
90008450:	e005      	b.n	9000845e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90008452:	4b1c      	ldr	r3, [pc, #112]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90008456:	f003 0302 	and.w	r3, r3, #2
9000845a:	2b00      	cmp	r3, #0
9000845c:	d0eb      	beq.n	90008436 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
9000845e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008462:	2b00      	cmp	r3, #0
90008464:	d129      	bne.n	900084ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000846a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000846e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90008472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008476:	d10e      	bne.n	90008496 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
90008478:	4b12      	ldr	r3, [pc, #72]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000847a:	691b      	ldr	r3, [r3, #16]
9000847c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
90008480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008484:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90008488:	091a      	lsrs	r2, r3, #4
9000848a:	4b10      	ldr	r3, [pc, #64]	; (900084cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
9000848c:	4013      	ands	r3, r2
9000848e:	4a0d      	ldr	r2, [pc, #52]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008490:	430b      	orrs	r3, r1
90008492:	6113      	str	r3, [r2, #16]
90008494:	e005      	b.n	900084a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
90008496:	4b0b      	ldr	r3, [pc, #44]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
90008498:	691b      	ldr	r3, [r3, #16]
9000849a:	4a0a      	ldr	r2, [pc, #40]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
9000849c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900084a0:	6113      	str	r3, [r2, #16]
900084a2:	4b08      	ldr	r3, [pc, #32]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
900084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900084aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900084ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
900084b2:	4a04      	ldr	r2, [pc, #16]	; (900084c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
900084b4:	430b      	orrs	r3, r1
900084b6:	6713      	str	r3, [r2, #112]	; 0x70
900084b8:	e00e      	b.n	900084d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
900084ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900084be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
900084c2:	e009      	b.n	900084d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
900084c4:	58024400 	.word	0x58024400
900084c8:	58024800 	.word	0x58024800
900084cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
900084d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900084d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
900084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
900084e0:	f002 0301 	and.w	r3, r2, #1
900084e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
900084e8:	2300      	movs	r3, #0
900084ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
900084ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
900084f2:	460b      	mov	r3, r1
900084f4:	4313      	orrs	r3, r2
900084f6:	f000 8089 	beq.w	9000860c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
900084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900084fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90008500:	2b28      	cmp	r3, #40	; 0x28
90008502:	d86b      	bhi.n	900085dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
90008504:	a201      	add	r2, pc, #4	; (adr r2, 9000850c <HAL_RCCEx_PeriphCLKConfig+0x958>)
90008506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000850a:	bf00      	nop
9000850c:	900085e5 	.word	0x900085e5
90008510:	900085dd 	.word	0x900085dd
90008514:	900085dd 	.word	0x900085dd
90008518:	900085dd 	.word	0x900085dd
9000851c:	900085dd 	.word	0x900085dd
90008520:	900085dd 	.word	0x900085dd
90008524:	900085dd 	.word	0x900085dd
90008528:	900085dd 	.word	0x900085dd
9000852c:	900085b1 	.word	0x900085b1
90008530:	900085dd 	.word	0x900085dd
90008534:	900085dd 	.word	0x900085dd
90008538:	900085dd 	.word	0x900085dd
9000853c:	900085dd 	.word	0x900085dd
90008540:	900085dd 	.word	0x900085dd
90008544:	900085dd 	.word	0x900085dd
90008548:	900085dd 	.word	0x900085dd
9000854c:	900085c7 	.word	0x900085c7
90008550:	900085dd 	.word	0x900085dd
90008554:	900085dd 	.word	0x900085dd
90008558:	900085dd 	.word	0x900085dd
9000855c:	900085dd 	.word	0x900085dd
90008560:	900085dd 	.word	0x900085dd
90008564:	900085dd 	.word	0x900085dd
90008568:	900085dd 	.word	0x900085dd
9000856c:	900085e5 	.word	0x900085e5
90008570:	900085dd 	.word	0x900085dd
90008574:	900085dd 	.word	0x900085dd
90008578:	900085dd 	.word	0x900085dd
9000857c:	900085dd 	.word	0x900085dd
90008580:	900085dd 	.word	0x900085dd
90008584:	900085dd 	.word	0x900085dd
90008588:	900085dd 	.word	0x900085dd
9000858c:	900085e5 	.word	0x900085e5
90008590:	900085dd 	.word	0x900085dd
90008594:	900085dd 	.word	0x900085dd
90008598:	900085dd 	.word	0x900085dd
9000859c:	900085dd 	.word	0x900085dd
900085a0:	900085dd 	.word	0x900085dd
900085a4:	900085dd 	.word	0x900085dd
900085a8:	900085dd 	.word	0x900085dd
900085ac:	900085e5 	.word	0x900085e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900085b4:	3308      	adds	r3, #8
900085b6:	2101      	movs	r1, #1
900085b8:	4618      	mov	r0, r3
900085ba:	f000 fd05 	bl	90008fc8 <RCCEx_PLL2_Config>
900085be:	4603      	mov	r3, r0
900085c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900085c4:	e00f      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
900085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900085ca:	3328      	adds	r3, #40	; 0x28
900085cc:	2101      	movs	r1, #1
900085ce:	4618      	mov	r0, r3
900085d0:	f000 fdac 	bl	9000912c <RCCEx_PLL3_Config>
900085d4:	4603      	mov	r3, r0
900085d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
900085da:	e004      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900085dc:	2301      	movs	r3, #1
900085de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900085e2:	e000      	b.n	900085e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
900085e4:	bf00      	nop
    }

    if (ret == HAL_OK)
900085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900085ea:	2b00      	cmp	r3, #0
900085ec:	d10a      	bne.n	90008604 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
900085ee:	4bbf      	ldr	r3, [pc, #764]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900085f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
900085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900085fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900085fc:	4abb      	ldr	r2, [pc, #748]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900085fe:	430b      	orrs	r3, r1
90008600:	6553      	str	r3, [r2, #84]	; 0x54
90008602:	e003      	b.n	9000860c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008610:	e9d3 2300 	ldrd	r2, r3, [r3]
90008614:	f002 0302 	and.w	r3, r2, #2
90008618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000861c:	2300      	movs	r3, #0
9000861e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
90008622:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
90008626:	460b      	mov	r3, r1
90008628:	4313      	orrs	r3, r2
9000862a:	d041      	beq.n	900086b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
9000862c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90008632:	2b05      	cmp	r3, #5
90008634:	d824      	bhi.n	90008680 <HAL_RCCEx_PeriphCLKConfig+0xacc>
90008636:	a201      	add	r2, pc, #4	; (adr r2, 9000863c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
90008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000863c:	90008689 	.word	0x90008689
90008640:	90008655 	.word	0x90008655
90008644:	9000866b 	.word	0x9000866b
90008648:	90008689 	.word	0x90008689
9000864c:	90008689 	.word	0x90008689
90008650:	90008689 	.word	0x90008689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008658:	3308      	adds	r3, #8
9000865a:	2101      	movs	r1, #1
9000865c:	4618      	mov	r0, r3
9000865e:	f000 fcb3 	bl	90008fc8 <RCCEx_PLL2_Config>
90008662:	4603      	mov	r3, r0
90008664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
90008668:	e00f      	b.n	9000868a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000866e:	3328      	adds	r3, #40	; 0x28
90008670:	2101      	movs	r1, #1
90008672:	4618      	mov	r0, r3
90008674:	f000 fd5a 	bl	9000912c <RCCEx_PLL3_Config>
90008678:	4603      	mov	r3, r0
9000867a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
9000867e:	e004      	b.n	9000868a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008680:	2301      	movs	r3, #1
90008682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008686:	e000      	b.n	9000868a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
90008688:	bf00      	nop
    }

    if (ret == HAL_OK)
9000868a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
9000868e:	2b00      	cmp	r3, #0
90008690:	d10a      	bne.n	900086a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90008692:	4b96      	ldr	r3, [pc, #600]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008696:	f023 0107 	bic.w	r1, r3, #7
9000869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000869e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900086a0:	4a92      	ldr	r2, [pc, #584]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900086a2:	430b      	orrs	r3, r1
900086a4:	6553      	str	r3, [r2, #84]	; 0x54
900086a6:	e003      	b.n	900086b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
900086a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900086ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
900086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
900086b8:	f002 0304 	and.w	r3, r2, #4
900086bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
900086c0:	2300      	movs	r3, #0
900086c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
900086c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
900086ca:	460b      	mov	r3, r1
900086cc:	4313      	orrs	r3, r2
900086ce:	d044      	beq.n	9000875a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
900086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900086d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
900086d8:	2b05      	cmp	r3, #5
900086da:	d825      	bhi.n	90008728 <HAL_RCCEx_PeriphCLKConfig+0xb74>
900086dc:	a201      	add	r2, pc, #4	; (adr r2, 900086e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
900086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900086e2:	bf00      	nop
900086e4:	90008731 	.word	0x90008731
900086e8:	900086fd 	.word	0x900086fd
900086ec:	90008713 	.word	0x90008713
900086f0:	90008731 	.word	0x90008731
900086f4:	90008731 	.word	0x90008731
900086f8:	90008731 	.word	0x90008731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
900086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008700:	3308      	adds	r3, #8
90008702:	2101      	movs	r1, #1
90008704:	4618      	mov	r0, r3
90008706:	f000 fc5f 	bl	90008fc8 <RCCEx_PLL2_Config>
9000870a:	4603      	mov	r3, r0
9000870c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008710:	e00f      	b.n	90008732 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008716:	3328      	adds	r3, #40	; 0x28
90008718:	2101      	movs	r1, #1
9000871a:	4618      	mov	r0, r3
9000871c:	f000 fd06 	bl	9000912c <RCCEx_PLL3_Config>
90008720:	4603      	mov	r3, r0
90008722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
90008726:	e004      	b.n	90008732 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008728:	2301      	movs	r3, #1
9000872a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000872e:	e000      	b.n	90008732 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
90008730:	bf00      	nop
    }

    if (ret == HAL_OK)
90008732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008736:	2b00      	cmp	r3, #0
90008738:	d10b      	bne.n	90008752 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000873a:	4b6c      	ldr	r3, [pc, #432]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000873e:	f023 0107 	bic.w	r1, r3, #7
90008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9000874a:	4a68      	ldr	r2, [pc, #416]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
9000874c:	430b      	orrs	r3, r1
9000874e:	6593      	str	r3, [r2, #88]	; 0x58
90008750:	e003      	b.n	9000875a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000875a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000875e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008762:	f002 0320 	and.w	r3, r2, #32
90008766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
9000876a:	2300      	movs	r3, #0
9000876c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
90008770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
90008774:	460b      	mov	r3, r1
90008776:	4313      	orrs	r3, r2
90008778:	d055      	beq.n	90008826 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
9000877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90008782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90008786:	d033      	beq.n	900087f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
90008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000878c:	d82c      	bhi.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000878e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90008792:	d02f      	beq.n	900087f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
90008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90008798:	d826      	bhi.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
9000879a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000879e:	d02b      	beq.n	900087f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
900087a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
900087a4:	d820      	bhi.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900087aa:	d012      	beq.n	900087d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
900087ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900087b0:	d81a      	bhi.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
900087b2:	2b00      	cmp	r3, #0
900087b4:	d022      	beq.n	900087fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
900087b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900087ba:	d115      	bne.n	900087e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
900087bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900087c0:	3308      	adds	r3, #8
900087c2:	2100      	movs	r1, #0
900087c4:	4618      	mov	r0, r3
900087c6:	f000 fbff 	bl	90008fc8 <RCCEx_PLL2_Config>
900087ca:	4603      	mov	r3, r0
900087cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900087d0:	e015      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
900087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900087d6:	3328      	adds	r3, #40	; 0x28
900087d8:	2102      	movs	r1, #2
900087da:	4618      	mov	r0, r3
900087dc:	f000 fca6 	bl	9000912c <RCCEx_PLL3_Config>
900087e0:	4603      	mov	r3, r0
900087e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
900087e6:	e00a      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900087e8:	2301      	movs	r3, #1
900087ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900087ee:	e006      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087f0:	bf00      	nop
900087f2:	e004      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087f4:	bf00      	nop
900087f6:	e002      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087f8:	bf00      	nop
900087fa:	e000      	b.n	900087fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
900087fc:	bf00      	nop
    }

    if (ret == HAL_OK)
900087fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008802:	2b00      	cmp	r3, #0
90008804:	d10b      	bne.n	9000881e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90008806:	4b39      	ldr	r3, [pc, #228]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000880a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
9000880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90008816:	4a35      	ldr	r2, [pc, #212]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
90008818:	430b      	orrs	r3, r1
9000881a:	6553      	str	r3, [r2, #84]	; 0x54
9000881c:	e003      	b.n	90008826 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000881e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000882a:	e9d3 2300 	ldrd	r2, r3, [r3]
9000882e:	f002 0340 	and.w	r3, r2, #64	; 0x40
90008832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
90008836:	2300      	movs	r3, #0
90008838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
9000883c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
90008840:	460b      	mov	r3, r1
90008842:	4313      	orrs	r3, r2
90008844:	d058      	beq.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
90008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000884a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000884e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90008852:	d033      	beq.n	900088bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
90008854:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90008858:	d82c      	bhi.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000885a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000885e:	d02f      	beq.n	900088c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
90008860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90008864:	d826      	bhi.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
9000886a:	d02b      	beq.n	900088c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
9000886c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90008870:	d820      	bhi.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
90008872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90008876:	d012      	beq.n	9000889e <HAL_RCCEx_PeriphCLKConfig+0xcea>
90008878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000887c:	d81a      	bhi.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
9000887e:	2b00      	cmp	r3, #0
90008880:	d022      	beq.n	900088c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
90008882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90008886:	d115      	bne.n	900088b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000888c:	3308      	adds	r3, #8
9000888e:	2100      	movs	r1, #0
90008890:	4618      	mov	r0, r3
90008892:	f000 fb99 	bl	90008fc8 <RCCEx_PLL2_Config>
90008896:	4603      	mov	r3, r0
90008898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
9000889c:	e015      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900088a2:	3328      	adds	r3, #40	; 0x28
900088a4:	2102      	movs	r1, #2
900088a6:	4618      	mov	r0, r3
900088a8:	f000 fc40 	bl	9000912c <RCCEx_PLL3_Config>
900088ac:	4603      	mov	r3, r0
900088ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
900088b2:	e00a      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
900088b4:	2301      	movs	r3, #1
900088b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
900088ba:	e006      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088bc:	bf00      	nop
900088be:	e004      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088c0:	bf00      	nop
900088c2:	e002      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088c4:	bf00      	nop
900088c6:	e000      	b.n	900088ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
900088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
900088ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900088ce:	2b00      	cmp	r3, #0
900088d0:	d10e      	bne.n	900088f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
900088d2:	4b06      	ldr	r3, [pc, #24]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900088d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
900088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900088de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900088e2:	4a02      	ldr	r2, [pc, #8]	; (900088ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
900088e4:	430b      	orrs	r3, r1
900088e6:	6593      	str	r3, [r2, #88]	; 0x58
900088e8:	e006      	b.n	900088f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
900088ea:	bf00      	nop
900088ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900088f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900088f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
900088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
90008900:	f002 0380 	and.w	r3, r2, #128	; 0x80
90008904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
90008908:	2300      	movs	r3, #0
9000890a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
9000890e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
90008912:	460b      	mov	r3, r1
90008914:	4313      	orrs	r3, r2
90008916:	d055      	beq.n	900089c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
90008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000891c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90008920:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90008924:	d033      	beq.n	9000898e <HAL_RCCEx_PeriphCLKConfig+0xdda>
90008926:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
9000892a:	d82c      	bhi.n	90008986 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
9000892c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90008930:	d02f      	beq.n	90008992 <HAL_RCCEx_PeriphCLKConfig+0xdde>
90008932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90008936:	d826      	bhi.n	90008986 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008938:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
9000893c:	d02b      	beq.n	90008996 <HAL_RCCEx_PeriphCLKConfig+0xde2>
9000893e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90008942:	d820      	bhi.n	90008986 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90008948:	d012      	beq.n	90008970 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
9000894a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000894e:	d81a      	bhi.n	90008986 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
90008950:	2b00      	cmp	r3, #0
90008952:	d022      	beq.n	9000899a <HAL_RCCEx_PeriphCLKConfig+0xde6>
90008954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90008958:	d115      	bne.n	90008986 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
9000895e:	3308      	adds	r3, #8
90008960:	2100      	movs	r1, #0
90008962:	4618      	mov	r0, r3
90008964:	f000 fb30 	bl	90008fc8 <RCCEx_PLL2_Config>
90008968:	4603      	mov	r3, r0
9000896a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
9000896e:	e015      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008974:	3328      	adds	r3, #40	; 0x28
90008976:	2102      	movs	r1, #2
90008978:	4618      	mov	r0, r3
9000897a:	f000 fbd7 	bl	9000912c <RCCEx_PLL3_Config>
9000897e:	4603      	mov	r3, r0
90008980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
90008984:	e00a      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008986:	2301      	movs	r3, #1
90008988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
9000898c:	e006      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000898e:	bf00      	nop
90008990:	e004      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008992:	bf00      	nop
90008994:	e002      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
90008996:	bf00      	nop
90008998:	e000      	b.n	9000899c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
9000899a:	bf00      	nop
    }

    if (ret == HAL_OK)
9000899c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900089a0:	2b00      	cmp	r3, #0
900089a2:	d10b      	bne.n	900089bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900089a4:	4ba1      	ldr	r3, [pc, #644]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900089a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
900089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900089b4:	4a9d      	ldr	r2, [pc, #628]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
900089b6:	430b      	orrs	r3, r1
900089b8:	6593      	str	r3, [r2, #88]	; 0x58
900089ba:	e003      	b.n	900089c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
900089bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
900089c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
900089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
900089cc:	f002 0308 	and.w	r3, r2, #8
900089d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
900089d4:	2300      	movs	r3, #0
900089d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
900089da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
900089de:	460b      	mov	r3, r1
900089e0:	4313      	orrs	r3, r2
900089e2:	d01e      	beq.n	90008a22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
900089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900089ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900089f0:	d10c      	bne.n	90008a0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
900089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
900089f6:	3328      	adds	r3, #40	; 0x28
900089f8:	2102      	movs	r1, #2
900089fa:	4618      	mov	r0, r3
900089fc:	f000 fb96 	bl	9000912c <RCCEx_PLL3_Config>
90008a00:	4603      	mov	r3, r0
90008a02:	2b00      	cmp	r3, #0
90008a04:	d002      	beq.n	90008a0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
90008a06:	2301      	movs	r3, #1
90008a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90008a0c:	4b87      	ldr	r3, [pc, #540]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008a10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90008a1c:	4a83      	ldr	r2, [pc, #524]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a1e:	430b      	orrs	r3, r1
90008a20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
90008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a2a:	f002 0310 	and.w	r3, r2, #16
90008a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
90008a32:	2300      	movs	r3, #0
90008a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
90008a38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
90008a3c:	460b      	mov	r3, r1
90008a3e:	4313      	orrs	r3, r2
90008a40:	d01e      	beq.n	90008a80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
90008a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90008a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008a4e:	d10c      	bne.n	90008a6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a54:	3328      	adds	r3, #40	; 0x28
90008a56:	2102      	movs	r1, #2
90008a58:	4618      	mov	r0, r3
90008a5a:	f000 fb67 	bl	9000912c <RCCEx_PLL3_Config>
90008a5e:	4603      	mov	r3, r0
90008a60:	2b00      	cmp	r3, #0
90008a62:	d002      	beq.n	90008a6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
90008a64:	2301      	movs	r3, #1
90008a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90008a6a:	4b70      	ldr	r3, [pc, #448]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90008a7a:	4a6c      	ldr	r2, [pc, #432]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008a7c:	430b      	orrs	r3, r1
90008a7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
90008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
90008a88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
90008a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
90008a90:	2300      	movs	r3, #0
90008a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
90008a96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
90008a9a:	460b      	mov	r3, r1
90008a9c:	4313      	orrs	r3, r2
90008a9e:	d03e      	beq.n	90008b1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
90008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90008aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008aac:	d022      	beq.n	90008af4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
90008aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90008ab2:	d81b      	bhi.n	90008aec <HAL_RCCEx_PeriphCLKConfig+0xf38>
90008ab4:	2b00      	cmp	r3, #0
90008ab6:	d003      	beq.n	90008ac0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
90008ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008abc:	d00b      	beq.n	90008ad6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
90008abe:	e015      	b.n	90008aec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ac4:	3308      	adds	r3, #8
90008ac6:	2100      	movs	r1, #0
90008ac8:	4618      	mov	r0, r3
90008aca:	f000 fa7d 	bl	90008fc8 <RCCEx_PLL2_Config>
90008ace:	4603      	mov	r3, r0
90008ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008ad4:	e00f      	b.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ada:	3328      	adds	r3, #40	; 0x28
90008adc:	2102      	movs	r1, #2
90008ade:	4618      	mov	r0, r3
90008ae0:	f000 fb24 	bl	9000912c <RCCEx_PLL3_Config>
90008ae4:	4603      	mov	r3, r0
90008ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
90008aea:	e004      	b.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008aec:	2301      	movs	r3, #1
90008aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008af2:	e000      	b.n	90008af6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
90008af4:	bf00      	nop
    }

    if (ret == HAL_OK)
90008af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008afa:	2b00      	cmp	r3, #0
90008afc:	d10b      	bne.n	90008b16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90008afe:	4b4b      	ldr	r3, [pc, #300]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90008b02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
90008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90008b0e:	4a47      	ldr	r2, [pc, #284]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b10:	430b      	orrs	r3, r1
90008b12:	6593      	str	r3, [r2, #88]	; 0x58
90008b14:	e003      	b.n	90008b1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90008b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
90008b26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
90008b2a:	67bb      	str	r3, [r7, #120]	; 0x78
90008b2c:	2300      	movs	r3, #0
90008b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
90008b30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
90008b34:	460b      	mov	r3, r1
90008b36:	4313      	orrs	r3, r2
90008b38:	d03b      	beq.n	90008bb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
90008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90008b46:	d01f      	beq.n	90008b88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
90008b48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90008b4c:	d818      	bhi.n	90008b80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
90008b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90008b52:	d003      	beq.n	90008b5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
90008b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90008b58:	d007      	beq.n	90008b6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
90008b5a:	e011      	b.n	90008b80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008b5c:	4b33      	ldr	r3, [pc, #204]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008b60:	4a32      	ldr	r2, [pc, #200]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
90008b68:	e00f      	b.n	90008b8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b6e:	3328      	adds	r3, #40	; 0x28
90008b70:	2101      	movs	r1, #1
90008b72:	4618      	mov	r0, r3
90008b74:	f000 fada 	bl	9000912c <RCCEx_PLL3_Config>
90008b78:	4603      	mov	r3, r0
90008b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
90008b7e:	e004      	b.n	90008b8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008b80:	2301      	movs	r3, #1
90008b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008b86:	e000      	b.n	90008b8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
90008b88:	bf00      	nop
    }

    if (ret == HAL_OK)
90008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008b8e:	2b00      	cmp	r3, #0
90008b90:	d10b      	bne.n	90008baa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
90008b92:	4b26      	ldr	r3, [pc, #152]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008b96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
90008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90008ba2:	4a22      	ldr	r2, [pc, #136]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008ba4:	430b      	orrs	r3, r1
90008ba6:	6553      	str	r3, [r2, #84]	; 0x54
90008ba8:	e003      	b.n	90008bb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
90008bba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
90008bbe:	673b      	str	r3, [r7, #112]	; 0x70
90008bc0:	2300      	movs	r3, #0
90008bc2:	677b      	str	r3, [r7, #116]	; 0x74
90008bc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
90008bc8:	460b      	mov	r3, r1
90008bca:	4313      	orrs	r3, r2
90008bcc:	d034      	beq.n	90008c38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
90008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008bd4:	2b00      	cmp	r3, #0
90008bd6:	d003      	beq.n	90008be0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
90008bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90008bdc:	d007      	beq.n	90008bee <HAL_RCCEx_PeriphCLKConfig+0x103a>
90008bde:	e011      	b.n	90008c04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008be0:	4b12      	ldr	r3, [pc, #72]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008be4:	4a11      	ldr	r2, [pc, #68]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008bec:	e00e      	b.n	90008c0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008bf2:	3308      	adds	r3, #8
90008bf4:	2102      	movs	r1, #2
90008bf6:	4618      	mov	r0, r3
90008bf8:	f000 f9e6 	bl	90008fc8 <RCCEx_PLL2_Config>
90008bfc:	4603      	mov	r3, r0
90008bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
90008c02:	e003      	b.n	90008c0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
90008c04:	2301      	movs	r3, #1
90008c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
90008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008c10:	2b00      	cmp	r3, #0
90008c12:	d10d      	bne.n	90008c30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
90008c14:	4b05      	ldr	r3, [pc, #20]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
90008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008c22:	4a02      	ldr	r2, [pc, #8]	; (90008c2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
90008c24:	430b      	orrs	r3, r1
90008c26:	64d3      	str	r3, [r2, #76]	; 0x4c
90008c28:	e006      	b.n	90008c38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
90008c2a:	bf00      	nop
90008c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90008c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008c34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
90008c44:	66bb      	str	r3, [r7, #104]	; 0x68
90008c46:	2300      	movs	r3, #0
90008c48:	66fb      	str	r3, [r7, #108]	; 0x6c
90008c4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
90008c4e:	460b      	mov	r3, r1
90008c50:	4313      	orrs	r3, r2
90008c52:	d00c      	beq.n	90008c6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
90008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c58:	3328      	adds	r3, #40	; 0x28
90008c5a:	2102      	movs	r1, #2
90008c5c:	4618      	mov	r0, r3
90008c5e:	f000 fa65 	bl	9000912c <RCCEx_PLL3_Config>
90008c62:	4603      	mov	r3, r0
90008c64:	2b00      	cmp	r3, #0
90008c66:	d002      	beq.n	90008c6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
90008c68:	2301      	movs	r3, #1
90008c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
90008c76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
90008c7a:	663b      	str	r3, [r7, #96]	; 0x60
90008c7c:	2300      	movs	r3, #0
90008c7e:	667b      	str	r3, [r7, #100]	; 0x64
90008c80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
90008c84:	460b      	mov	r3, r1
90008c86:	4313      	orrs	r3, r2
90008c88:	d038      	beq.n	90008cfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
90008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008c96:	d018      	beq.n	90008cca <HAL_RCCEx_PeriphCLKConfig+0x1116>
90008c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90008c9c:	d811      	bhi.n	90008cc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90008ca2:	d014      	beq.n	90008cce <HAL_RCCEx_PeriphCLKConfig+0x111a>
90008ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90008ca8:	d80b      	bhi.n	90008cc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
90008caa:	2b00      	cmp	r3, #0
90008cac:	d011      	beq.n	90008cd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
90008cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008cb2:	d106      	bne.n	90008cc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90008cb4:	4bc3      	ldr	r3, [pc, #780]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008cb8:	4ac2      	ldr	r2, [pc, #776]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
90008cc0:	e008      	b.n	90008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
90008cc2:	2301      	movs	r3, #1
90008cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
90008cc8:	e004      	b.n	90008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008cca:	bf00      	nop
90008ccc:	e002      	b.n	90008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008cce:	bf00      	nop
90008cd0:	e000      	b.n	90008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
90008cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
90008cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008cd8:	2b00      	cmp	r3, #0
90008cda:	d10b      	bne.n	90008cf4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
90008cdc:	4bb9      	ldr	r3, [pc, #740]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008ce0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
90008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90008cec:	4ab5      	ldr	r2, [pc, #724]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008cee:	430b      	orrs	r3, r1
90008cf0:	6553      	str	r3, [r2, #84]	; 0x54
90008cf2:	e003      	b.n	90008cfc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
90008cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
90008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
90008d08:	65bb      	str	r3, [r7, #88]	; 0x58
90008d0a:	2300      	movs	r3, #0
90008d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
90008d0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
90008d12:	460b      	mov	r3, r1
90008d14:	4313      	orrs	r3, r2
90008d16:	d009      	beq.n	90008d2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90008d18:	4baa      	ldr	r3, [pc, #680]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008d1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
90008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90008d26:	4aa7      	ldr	r2, [pc, #668]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d28:	430b      	orrs	r3, r1
90008d2a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
90008d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d34:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
90008d38:	653b      	str	r3, [r7, #80]	; 0x50
90008d3a:	2300      	movs	r3, #0
90008d3c:	657b      	str	r3, [r7, #84]	; 0x54
90008d3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
90008d42:	460b      	mov	r3, r1
90008d44:	4313      	orrs	r3, r2
90008d46:	d00a      	beq.n	90008d5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90008d48:	4b9e      	ldr	r3, [pc, #632]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d4a:	691b      	ldr	r3, [r3, #16]
90008d4c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
90008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90008d58:	4a9a      	ldr	r2, [pc, #616]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d5a:	430b      	orrs	r3, r1
90008d5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
90008d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d66:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
90008d6a:	64bb      	str	r3, [r7, #72]	; 0x48
90008d6c:	2300      	movs	r3, #0
90008d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
90008d70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
90008d74:	460b      	mov	r3, r1
90008d76:	4313      	orrs	r3, r2
90008d78:	d009      	beq.n	90008d8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90008d7a:	4b92      	ldr	r3, [pc, #584]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90008d7e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
90008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90008d88:	4a8e      	ldr	r2, [pc, #568]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008d8a:	430b      	orrs	r3, r1
90008d8c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
90008d96:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
90008d9a:	643b      	str	r3, [r7, #64]	; 0x40
90008d9c:	2300      	movs	r3, #0
90008d9e:	647b      	str	r3, [r7, #68]	; 0x44
90008da0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
90008da4:	460b      	mov	r3, r1
90008da6:	4313      	orrs	r3, r2
90008da8:	d00e      	beq.n	90008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90008daa:	4b86      	ldr	r3, [pc, #536]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dac:	691b      	ldr	r3, [r3, #16]
90008dae:	4a85      	ldr	r2, [pc, #532]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90008db4:	6113      	str	r3, [r2, #16]
90008db6:	4b83      	ldr	r3, [pc, #524]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008db8:	6919      	ldr	r1, [r3, #16]
90008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008dbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90008dc2:	4a80      	ldr	r2, [pc, #512]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008dc4:	430b      	orrs	r3, r1
90008dc6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
90008dd0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
90008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
90008dd6:	2300      	movs	r3, #0
90008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
90008dda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
90008dde:	460b      	mov	r3, r1
90008de0:	4313      	orrs	r3, r2
90008de2:	d009      	beq.n	90008df8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90008de4:	4b77      	ldr	r3, [pc, #476]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90008de8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
90008dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008df2:	4a74      	ldr	r2, [pc, #464]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008df4:	430b      	orrs	r3, r1
90008df6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e00:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
90008e04:	633b      	str	r3, [r7, #48]	; 0x30
90008e06:	2300      	movs	r3, #0
90008e08:	637b      	str	r3, [r7, #52]	; 0x34
90008e0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
90008e0e:	460b      	mov	r3, r1
90008e10:	4313      	orrs	r3, r2
90008e12:	d00a      	beq.n	90008e2a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90008e14:	4b6b      	ldr	r3, [pc, #428]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90008e18:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
90008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90008e24:	4a67      	ldr	r2, [pc, #412]	; (90008fc4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
90008e26:	430b      	orrs	r3, r1
90008e28:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
90008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e32:	2100      	movs	r1, #0
90008e34:	62b9      	str	r1, [r7, #40]	; 0x28
90008e36:	f003 0301 	and.w	r3, r3, #1
90008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
90008e3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
90008e40:	460b      	mov	r3, r1
90008e42:	4313      	orrs	r3, r2
90008e44:	d011      	beq.n	90008e6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
90008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e4a:	3308      	adds	r3, #8
90008e4c:	2100      	movs	r1, #0
90008e4e:	4618      	mov	r0, r3
90008e50:	f000 f8ba 	bl	90008fc8 <RCCEx_PLL2_Config>
90008e54:	4603      	mov	r3, r0
90008e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008e5e:	2b00      	cmp	r3, #0
90008e60:	d003      	beq.n	90008e6a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
90008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008e72:	2100      	movs	r1, #0
90008e74:	6239      	str	r1, [r7, #32]
90008e76:	f003 0302 	and.w	r3, r3, #2
90008e7a:	627b      	str	r3, [r7, #36]	; 0x24
90008e7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
90008e80:	460b      	mov	r3, r1
90008e82:	4313      	orrs	r3, r2
90008e84:	d011      	beq.n	90008eaa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
90008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008e8a:	3308      	adds	r3, #8
90008e8c:	2101      	movs	r1, #1
90008e8e:	4618      	mov	r0, r3
90008e90:	f000 f89a 	bl	90008fc8 <RCCEx_PLL2_Config>
90008e94:	4603      	mov	r3, r0
90008e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008e9e:	2b00      	cmp	r3, #0
90008ea0:	d003      	beq.n	90008eaa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
90008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
90008eb2:	2100      	movs	r1, #0
90008eb4:	61b9      	str	r1, [r7, #24]
90008eb6:	f003 0304 	and.w	r3, r3, #4
90008eba:	61fb      	str	r3, [r7, #28]
90008ebc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
90008ec0:	460b      	mov	r3, r1
90008ec2:	4313      	orrs	r3, r2
90008ec4:	d011      	beq.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
90008ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008eca:	3308      	adds	r3, #8
90008ecc:	2102      	movs	r1, #2
90008ece:	4618      	mov	r0, r3
90008ed0:	f000 f87a 	bl	90008fc8 <RCCEx_PLL2_Config>
90008ed4:	4603      	mov	r3, r0
90008ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008ede:	2b00      	cmp	r3, #0
90008ee0:	d003      	beq.n	90008eea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008ee6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
90008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
90008ef2:	2100      	movs	r1, #0
90008ef4:	6139      	str	r1, [r7, #16]
90008ef6:	f003 0308 	and.w	r3, r3, #8
90008efa:	617b      	str	r3, [r7, #20]
90008efc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
90008f00:	460b      	mov	r3, r1
90008f02:	4313      	orrs	r3, r2
90008f04:	d011      	beq.n	90008f2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f0a:	3328      	adds	r3, #40	; 0x28
90008f0c:	2100      	movs	r1, #0
90008f0e:	4618      	mov	r0, r3
90008f10:	f000 f90c 	bl	9000912c <RCCEx_PLL3_Config>
90008f14:	4603      	mov	r3, r0
90008f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
90008f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f1e:	2b00      	cmp	r3, #0
90008f20:	d003      	beq.n	90008f2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
90008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f32:	2100      	movs	r1, #0
90008f34:	60b9      	str	r1, [r7, #8]
90008f36:	f003 0310 	and.w	r3, r3, #16
90008f3a:	60fb      	str	r3, [r7, #12]
90008f3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
90008f40:	460b      	mov	r3, r1
90008f42:	4313      	orrs	r3, r2
90008f44:	d011      	beq.n	90008f6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
90008f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f4a:	3328      	adds	r3, #40	; 0x28
90008f4c:	2101      	movs	r1, #1
90008f4e:	4618      	mov	r0, r3
90008f50:	f000 f8ec 	bl	9000912c <RCCEx_PLL3_Config>
90008f54:	4603      	mov	r3, r0
90008f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f5e:	2b00      	cmp	r3, #0
90008f60:	d003      	beq.n	90008f6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
90008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
90008f72:	2100      	movs	r1, #0
90008f74:	6039      	str	r1, [r7, #0]
90008f76:	f003 0320 	and.w	r3, r3, #32
90008f7a:	607b      	str	r3, [r7, #4]
90008f7c:	e9d7 1200 	ldrd	r1, r2, [r7]
90008f80:	460b      	mov	r3, r1
90008f82:	4313      	orrs	r3, r2
90008f84:	d011      	beq.n	90008faa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
90008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
90008f8a:	3328      	adds	r3, #40	; 0x28
90008f8c:	2102      	movs	r1, #2
90008f8e:	4618      	mov	r0, r3
90008f90:	f000 f8cc 	bl	9000912c <RCCEx_PLL3_Config>
90008f94:	4603      	mov	r3, r0
90008f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
90008f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008f9e:	2b00      	cmp	r3, #0
90008fa0:	d003      	beq.n	90008faa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
90008fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
90008fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
90008faa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
90008fae:	2b00      	cmp	r3, #0
90008fb0:	d101      	bne.n	90008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
90008fb2:	2300      	movs	r3, #0
90008fb4:	e000      	b.n	90008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
90008fb6:	2301      	movs	r3, #1
}
90008fb8:	4618      	mov	r0, r3
90008fba:	f507 7794 	add.w	r7, r7, #296	; 0x128
90008fbe:	46bd      	mov	sp, r7
90008fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90008fc4:	58024400 	.word	0x58024400

90008fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90008fc8:	b580      	push	{r7, lr}
90008fca:	b084      	sub	sp, #16
90008fcc:	af00      	add	r7, sp, #0
90008fce:	6078      	str	r0, [r7, #4]
90008fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90008fd2:	2300      	movs	r3, #0
90008fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90008fd6:	4b53      	ldr	r3, [pc, #332]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008fda:	f003 0303 	and.w	r3, r3, #3
90008fde:	2b03      	cmp	r3, #3
90008fe0:	d101      	bne.n	90008fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90008fe2:	2301      	movs	r3, #1
90008fe4:	e099      	b.n	9000911a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90008fe6:	4b4f      	ldr	r3, [pc, #316]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90008fe8:	681b      	ldr	r3, [r3, #0]
90008fea:	4a4e      	ldr	r2, [pc, #312]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90008fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90008ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90008ff2:	f7fa f9e9 	bl	900033c8 <HAL_GetTick>
90008ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90008ff8:	e008      	b.n	9000900c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
90008ffa:	f7fa f9e5 	bl	900033c8 <HAL_GetTick>
90008ffe:	4602      	mov	r2, r0
90009000:	68bb      	ldr	r3, [r7, #8]
90009002:	1ad3      	subs	r3, r2, r3
90009004:	2b02      	cmp	r3, #2
90009006:	d901      	bls.n	9000900c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90009008:	2303      	movs	r3, #3
9000900a:	e086      	b.n	9000911a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000900c:	4b45      	ldr	r3, [pc, #276]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
9000900e:	681b      	ldr	r3, [r3, #0]
90009010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90009014:	2b00      	cmp	r3, #0
90009016:	d1f0      	bne.n	90008ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90009018:	4b42      	ldr	r3, [pc, #264]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
9000901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000901c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90009020:	687b      	ldr	r3, [r7, #4]
90009022:	681b      	ldr	r3, [r3, #0]
90009024:	031b      	lsls	r3, r3, #12
90009026:	493f      	ldr	r1, [pc, #252]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009028:	4313      	orrs	r3, r2
9000902a:	628b      	str	r3, [r1, #40]	; 0x28
9000902c:	687b      	ldr	r3, [r7, #4]
9000902e:	685b      	ldr	r3, [r3, #4]
90009030:	3b01      	subs	r3, #1
90009032:	f3c3 0208 	ubfx	r2, r3, #0, #9
90009036:	687b      	ldr	r3, [r7, #4]
90009038:	689b      	ldr	r3, [r3, #8]
9000903a:	3b01      	subs	r3, #1
9000903c:	025b      	lsls	r3, r3, #9
9000903e:	b29b      	uxth	r3, r3
90009040:	431a      	orrs	r2, r3
90009042:	687b      	ldr	r3, [r7, #4]
90009044:	68db      	ldr	r3, [r3, #12]
90009046:	3b01      	subs	r3, #1
90009048:	041b      	lsls	r3, r3, #16
9000904a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
9000904e:	431a      	orrs	r2, r3
90009050:	687b      	ldr	r3, [r7, #4]
90009052:	691b      	ldr	r3, [r3, #16]
90009054:	3b01      	subs	r3, #1
90009056:	061b      	lsls	r3, r3, #24
90009058:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
9000905c:	4931      	ldr	r1, [pc, #196]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
9000905e:	4313      	orrs	r3, r2
90009060:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90009062:	4b30      	ldr	r3, [pc, #192]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
9000906a:	687b      	ldr	r3, [r7, #4]
9000906c:	695b      	ldr	r3, [r3, #20]
9000906e:	492d      	ldr	r1, [pc, #180]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009070:	4313      	orrs	r3, r2
90009072:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90009074:	4b2b      	ldr	r3, [pc, #172]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009078:	f023 0220 	bic.w	r2, r3, #32
9000907c:	687b      	ldr	r3, [r7, #4]
9000907e:	699b      	ldr	r3, [r3, #24]
90009080:	4928      	ldr	r1, [pc, #160]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009082:	4313      	orrs	r3, r2
90009084:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90009086:	4b27      	ldr	r3, [pc, #156]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000908a:	4a26      	ldr	r2, [pc, #152]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
9000908c:	f023 0310 	bic.w	r3, r3, #16
90009090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90009092:	4b24      	ldr	r3, [pc, #144]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
90009094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90009096:	4b24      	ldr	r3, [pc, #144]	; (90009128 <RCCEx_PLL2_Config+0x160>)
90009098:	4013      	ands	r3, r2
9000909a:	687a      	ldr	r2, [r7, #4]
9000909c:	69d2      	ldr	r2, [r2, #28]
9000909e:	00d2      	lsls	r2, r2, #3
900090a0:	4920      	ldr	r1, [pc, #128]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090a2:	4313      	orrs	r3, r2
900090a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
900090a6:	4b1f      	ldr	r3, [pc, #124]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090aa:	4a1e      	ldr	r2, [pc, #120]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090ac:	f043 0310 	orr.w	r3, r3, #16
900090b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
900090b2:	683b      	ldr	r3, [r7, #0]
900090b4:	2b00      	cmp	r3, #0
900090b6:	d106      	bne.n	900090c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
900090b8:	4b1a      	ldr	r3, [pc, #104]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090bc:	4a19      	ldr	r2, [pc, #100]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
900090c2:	62d3      	str	r3, [r2, #44]	; 0x2c
900090c4:	e00f      	b.n	900090e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
900090c6:	683b      	ldr	r3, [r7, #0]
900090c8:	2b01      	cmp	r3, #1
900090ca:	d106      	bne.n	900090da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
900090cc:	4b15      	ldr	r3, [pc, #84]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090d0:	4a14      	ldr	r2, [pc, #80]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900090d6:	62d3      	str	r3, [r2, #44]	; 0x2c
900090d8:	e005      	b.n	900090e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
900090da:	4b12      	ldr	r3, [pc, #72]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090de:	4a11      	ldr	r2, [pc, #68]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
900090e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
900090e6:	4b0f      	ldr	r3, [pc, #60]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090e8:	681b      	ldr	r3, [r3, #0]
900090ea:	4a0e      	ldr	r2, [pc, #56]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
900090ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
900090f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900090f2:	f7fa f969 	bl	900033c8 <HAL_GetTick>
900090f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
900090f8:	e008      	b.n	9000910c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
900090fa:	f7fa f965 	bl	900033c8 <HAL_GetTick>
900090fe:	4602      	mov	r2, r0
90009100:	68bb      	ldr	r3, [r7, #8]
90009102:	1ad3      	subs	r3, r2, r3
90009104:	2b02      	cmp	r3, #2
90009106:	d901      	bls.n	9000910c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90009108:	2303      	movs	r3, #3
9000910a:	e006      	b.n	9000911a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000910c:	4b05      	ldr	r3, [pc, #20]	; (90009124 <RCCEx_PLL2_Config+0x15c>)
9000910e:	681b      	ldr	r3, [r3, #0]
90009110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90009114:	2b00      	cmp	r3, #0
90009116:	d0f0      	beq.n	900090fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90009118:	7bfb      	ldrb	r3, [r7, #15]
}
9000911a:	4618      	mov	r0, r3
9000911c:	3710      	adds	r7, #16
9000911e:	46bd      	mov	sp, r7
90009120:	bd80      	pop	{r7, pc}
90009122:	bf00      	nop
90009124:	58024400 	.word	0x58024400
90009128:	ffff0007 	.word	0xffff0007

9000912c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000912c:	b580      	push	{r7, lr}
9000912e:	b084      	sub	sp, #16
90009130:	af00      	add	r7, sp, #0
90009132:	6078      	str	r0, [r7, #4]
90009134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90009136:	2300      	movs	r3, #0
90009138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000913a:	4b53      	ldr	r3, [pc, #332]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000913e:	f003 0303 	and.w	r3, r3, #3
90009142:	2b03      	cmp	r3, #3
90009144:	d101      	bne.n	9000914a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90009146:	2301      	movs	r3, #1
90009148:	e099      	b.n	9000927e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000914a:	4b4f      	ldr	r3, [pc, #316]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000914c:	681b      	ldr	r3, [r3, #0]
9000914e:	4a4e      	ldr	r2, [pc, #312]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90009154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009156:	f7fa f937 	bl	900033c8 <HAL_GetTick>
9000915a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000915c:	e008      	b.n	90009170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000915e:	f7fa f933 	bl	900033c8 <HAL_GetTick>
90009162:	4602      	mov	r2, r0
90009164:	68bb      	ldr	r3, [r7, #8]
90009166:	1ad3      	subs	r3, r2, r3
90009168:	2b02      	cmp	r3, #2
9000916a:	d901      	bls.n	90009170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
9000916c:	2303      	movs	r3, #3
9000916e:	e086      	b.n	9000927e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90009170:	4b45      	ldr	r3, [pc, #276]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009172:	681b      	ldr	r3, [r3, #0]
90009174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90009178:	2b00      	cmp	r3, #0
9000917a:	d1f0      	bne.n	9000915e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000917c:	4b42      	ldr	r3, [pc, #264]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90009180:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90009184:	687b      	ldr	r3, [r7, #4]
90009186:	681b      	ldr	r3, [r3, #0]
90009188:	051b      	lsls	r3, r3, #20
9000918a:	493f      	ldr	r1, [pc, #252]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000918c:	4313      	orrs	r3, r2
9000918e:	628b      	str	r3, [r1, #40]	; 0x28
90009190:	687b      	ldr	r3, [r7, #4]
90009192:	685b      	ldr	r3, [r3, #4]
90009194:	3b01      	subs	r3, #1
90009196:	f3c3 0208 	ubfx	r2, r3, #0, #9
9000919a:	687b      	ldr	r3, [r7, #4]
9000919c:	689b      	ldr	r3, [r3, #8]
9000919e:	3b01      	subs	r3, #1
900091a0:	025b      	lsls	r3, r3, #9
900091a2:	b29b      	uxth	r3, r3
900091a4:	431a      	orrs	r2, r3
900091a6:	687b      	ldr	r3, [r7, #4]
900091a8:	68db      	ldr	r3, [r3, #12]
900091aa:	3b01      	subs	r3, #1
900091ac:	041b      	lsls	r3, r3, #16
900091ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900091b2:	431a      	orrs	r2, r3
900091b4:	687b      	ldr	r3, [r7, #4]
900091b6:	691b      	ldr	r3, [r3, #16]
900091b8:	3b01      	subs	r3, #1
900091ba:	061b      	lsls	r3, r3, #24
900091bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
900091c0:	4931      	ldr	r1, [pc, #196]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091c2:	4313      	orrs	r3, r2
900091c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
900091c6:	4b30      	ldr	r3, [pc, #192]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
900091ce:	687b      	ldr	r3, [r7, #4]
900091d0:	695b      	ldr	r3, [r3, #20]
900091d2:	492d      	ldr	r1, [pc, #180]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091d4:	4313      	orrs	r3, r2
900091d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
900091d8:	4b2b      	ldr	r3, [pc, #172]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
900091e0:	687b      	ldr	r3, [r7, #4]
900091e2:	699b      	ldr	r3, [r3, #24]
900091e4:	4928      	ldr	r1, [pc, #160]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091e6:	4313      	orrs	r3, r2
900091e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
900091ea:	4b27      	ldr	r3, [pc, #156]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900091ee:	4a26      	ldr	r2, [pc, #152]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
900091f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
900091f6:	4b24      	ldr	r3, [pc, #144]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
900091f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900091fa:	4b24      	ldr	r3, [pc, #144]	; (9000928c <RCCEx_PLL3_Config+0x160>)
900091fc:	4013      	ands	r3, r2
900091fe:	687a      	ldr	r2, [r7, #4]
90009200:	69d2      	ldr	r2, [r2, #28]
90009202:	00d2      	lsls	r2, r2, #3
90009204:	4920      	ldr	r1, [pc, #128]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009206:	4313      	orrs	r3, r2
90009208:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000920a:	4b1f      	ldr	r3, [pc, #124]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000920e:	4a1e      	ldr	r2, [pc, #120]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90009214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
90009216:	683b      	ldr	r3, [r7, #0]
90009218:	2b00      	cmp	r3, #0
9000921a:	d106      	bne.n	9000922a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000921c:	4b1a      	ldr	r3, [pc, #104]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009220:	4a19      	ldr	r2, [pc, #100]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90009226:	62d3      	str	r3, [r2, #44]	; 0x2c
90009228:	e00f      	b.n	9000924a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000922a:	683b      	ldr	r3, [r7, #0]
9000922c:	2b01      	cmp	r3, #1
9000922e:	d106      	bne.n	9000923e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90009230:	4b15      	ldr	r3, [pc, #84]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009234:	4a14      	ldr	r2, [pc, #80]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
9000923a:	62d3      	str	r3, [r2, #44]	; 0x2c
9000923c:	e005      	b.n	9000924a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000923e:	4b12      	ldr	r3, [pc, #72]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009242:	4a11      	ldr	r2, [pc, #68]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90009248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000924a:	4b0f      	ldr	r3, [pc, #60]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
9000924c:	681b      	ldr	r3, [r3, #0]
9000924e:	4a0e      	ldr	r2, [pc, #56]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90009254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90009256:	f7fa f8b7 	bl	900033c8 <HAL_GetTick>
9000925a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000925c:	e008      	b.n	90009270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000925e:	f7fa f8b3 	bl	900033c8 <HAL_GetTick>
90009262:	4602      	mov	r2, r0
90009264:	68bb      	ldr	r3, [r7, #8]
90009266:	1ad3      	subs	r3, r2, r3
90009268:	2b02      	cmp	r3, #2
9000926a:	d901      	bls.n	90009270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
9000926c:	2303      	movs	r3, #3
9000926e:	e006      	b.n	9000927e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90009270:	4b05      	ldr	r3, [pc, #20]	; (90009288 <RCCEx_PLL3_Config+0x15c>)
90009272:	681b      	ldr	r3, [r3, #0]
90009274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90009278:	2b00      	cmp	r3, #0
9000927a:	d0f0      	beq.n	9000925e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
9000927c:	7bfb      	ldrb	r3, [r7, #15]
}
9000927e:	4618      	mov	r0, r3
90009280:	3710      	adds	r7, #16
90009282:	46bd      	mov	sp, r7
90009284:	bd80      	pop	{r7, pc}
90009286:	bf00      	nop
90009288:	58024400 	.word	0x58024400
9000928c:	ffff0007 	.word	0xffff0007

90009290 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
90009290:	b580      	push	{r7, lr}
90009292:	b082      	sub	sp, #8
90009294:	af00      	add	r7, sp, #0
90009296:	6078      	str	r0, [r7, #4]
90009298:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000929a:	687b      	ldr	r3, [r7, #4]
9000929c:	2b00      	cmp	r3, #0
9000929e:	d101      	bne.n	900092a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
900092a0:	2301      	movs	r3, #1
900092a2:	e02b      	b.n	900092fc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
900092a4:	687b      	ldr	r3, [r7, #4]
900092a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900092aa:	b2db      	uxtb	r3, r3
900092ac:	2b00      	cmp	r3, #0
900092ae:	d106      	bne.n	900092be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
900092b0:	687b      	ldr	r3, [r7, #4]
900092b2:	2200      	movs	r2, #0
900092b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
900092b8:	6878      	ldr	r0, [r7, #4]
900092ba:	f000 f825 	bl	90009308 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900092be:	687b      	ldr	r3, [r7, #4]
900092c0:	2202      	movs	r2, #2
900092c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900092c6:	687b      	ldr	r3, [r7, #4]
900092c8:	681a      	ldr	r2, [r3, #0]
900092ca:	687b      	ldr	r3, [r7, #4]
900092cc:	3304      	adds	r3, #4
900092ce:	4619      	mov	r1, r3
900092d0:	4610      	mov	r0, r2
900092d2:	f000 f9e1 	bl	90009698 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
900092d6:	687b      	ldr	r3, [r7, #4]
900092d8:	6818      	ldr	r0, [r3, #0]
900092da:	687b      	ldr	r3, [r7, #4]
900092dc:	685b      	ldr	r3, [r3, #4]
900092de:	461a      	mov	r2, r3
900092e0:	6839      	ldr	r1, [r7, #0]
900092e2:	f000 fa35 	bl	90009750 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
900092e6:	4b07      	ldr	r3, [pc, #28]	; (90009304 <HAL_SDRAM_Init+0x74>)
900092e8:	681b      	ldr	r3, [r3, #0]
900092ea:	4a06      	ldr	r2, [pc, #24]	; (90009304 <HAL_SDRAM_Init+0x74>)
900092ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
900092f0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900092f2:	687b      	ldr	r3, [r7, #4]
900092f4:	2201      	movs	r2, #1
900092f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
900092fa:	2300      	movs	r3, #0
}
900092fc:	4618      	mov	r0, r3
900092fe:	3708      	adds	r7, #8
90009300:	46bd      	mov	sp, r7
90009302:	bd80      	pop	{r7, pc}
90009304:	52004000 	.word	0x52004000

90009308 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
90009308:	b480      	push	{r7}
9000930a:	b083      	sub	sp, #12
9000930c:	af00      	add	r7, sp, #0
9000930e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
90009310:	bf00      	nop
90009312:	370c      	adds	r7, #12
90009314:	46bd      	mov	sp, r7
90009316:	f85d 7b04 	ldr.w	r7, [sp], #4
9000931a:	4770      	bx	lr

9000931c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000931c:	b580      	push	{r7, lr}
9000931e:	b086      	sub	sp, #24
90009320:	af00      	add	r7, sp, #0
90009322:	60f8      	str	r0, [r7, #12]
90009324:	60b9      	str	r1, [r7, #8]
90009326:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
90009328:	68fb      	ldr	r3, [r7, #12]
9000932a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
9000932e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
90009330:	7dfb      	ldrb	r3, [r7, #23]
90009332:	2b02      	cmp	r3, #2
90009334:	d101      	bne.n	9000933a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
90009336:	2302      	movs	r3, #2
90009338:	e021      	b.n	9000937e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000933a:	7dfb      	ldrb	r3, [r7, #23]
9000933c:	2b01      	cmp	r3, #1
9000933e:	d002      	beq.n	90009346 <HAL_SDRAM_SendCommand+0x2a>
90009340:	7dfb      	ldrb	r3, [r7, #23]
90009342:	2b05      	cmp	r3, #5
90009344:	d118      	bne.n	90009378 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
90009346:	68fb      	ldr	r3, [r7, #12]
90009348:	2202      	movs	r2, #2
9000934a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000934e:	68fb      	ldr	r3, [r7, #12]
90009350:	681b      	ldr	r3, [r3, #0]
90009352:	687a      	ldr	r2, [r7, #4]
90009354:	68b9      	ldr	r1, [r7, #8]
90009356:	4618      	mov	r0, r3
90009358:	f000 fa64 	bl	90009824 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000935c:	68bb      	ldr	r3, [r7, #8]
9000935e:	681b      	ldr	r3, [r3, #0]
90009360:	2b02      	cmp	r3, #2
90009362:	d104      	bne.n	9000936e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90009364:	68fb      	ldr	r3, [r7, #12]
90009366:	2205      	movs	r2, #5
90009368:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000936c:	e006      	b.n	9000937c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
9000936e:	68fb      	ldr	r3, [r7, #12]
90009370:	2201      	movs	r2, #1
90009372:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
90009376:	e001      	b.n	9000937c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
90009378:	2301      	movs	r3, #1
9000937a:	e000      	b.n	9000937e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
9000937c:	2300      	movs	r3, #0
}
9000937e:	4618      	mov	r0, r3
90009380:	3718      	adds	r7, #24
90009382:	46bd      	mov	sp, r7
90009384:	bd80      	pop	{r7, pc}

90009386 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
90009386:	b580      	push	{r7, lr}
90009388:	b082      	sub	sp, #8
9000938a:	af00      	add	r7, sp, #0
9000938c:	6078      	str	r0, [r7, #4]
9000938e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
90009390:	687b      	ldr	r3, [r7, #4]
90009392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90009396:	b2db      	uxtb	r3, r3
90009398:	2b02      	cmp	r3, #2
9000939a:	d101      	bne.n	900093a0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
9000939c:	2302      	movs	r3, #2
9000939e:	e016      	b.n	900093ce <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
900093a0:	687b      	ldr	r3, [r7, #4]
900093a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900093a6:	b2db      	uxtb	r3, r3
900093a8:	2b01      	cmp	r3, #1
900093aa:	d10f      	bne.n	900093cc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
900093ac:	687b      	ldr	r3, [r7, #4]
900093ae:	2202      	movs	r2, #2
900093b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
900093b4:	687b      	ldr	r3, [r7, #4]
900093b6:	681b      	ldr	r3, [r3, #0]
900093b8:	6839      	ldr	r1, [r7, #0]
900093ba:	4618      	mov	r0, r3
900093bc:	f000 fa56 	bl	9000986c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
900093c0:	687b      	ldr	r3, [r7, #4]
900093c2:	2201      	movs	r2, #1
900093c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
900093c8:	2300      	movs	r3, #0
900093ca:	e000      	b.n	900093ce <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
900093cc:	2301      	movs	r3, #1
}
900093ce:	4618      	mov	r0, r3
900093d0:	3708      	adds	r7, #8
900093d2:	46bd      	mov	sp, r7
900093d4:	bd80      	pop	{r7, pc}

900093d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
900093d6:	b580      	push	{r7, lr}
900093d8:	b082      	sub	sp, #8
900093da:	af00      	add	r7, sp, #0
900093dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
900093de:	687b      	ldr	r3, [r7, #4]
900093e0:	2b00      	cmp	r3, #0
900093e2:	d101      	bne.n	900093e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
900093e4:	2301      	movs	r3, #1
900093e6:	e049      	b.n	9000947c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
900093e8:	687b      	ldr	r3, [r7, #4]
900093ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
900093ee:	b2db      	uxtb	r3, r3
900093f0:	2b00      	cmp	r3, #0
900093f2:	d106      	bne.n	90009402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
900093f4:	687b      	ldr	r3, [r7, #4]
900093f6:	2200      	movs	r2, #0
900093f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
900093fc:	6878      	ldr	r0, [r7, #4]
900093fe:	f000 f89d 	bl	9000953c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90009402:	687b      	ldr	r3, [r7, #4]
90009404:	2202      	movs	r2, #2
90009406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000940a:	687b      	ldr	r3, [r7, #4]
9000940c:	681a      	ldr	r2, [r3, #0]
9000940e:	687b      	ldr	r3, [r7, #4]
90009410:	3304      	adds	r3, #4
90009412:	4619      	mov	r1, r3
90009414:	4610      	mov	r0, r2
90009416:	f000 f8a5 	bl	90009564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000941a:	687b      	ldr	r3, [r7, #4]
9000941c:	2201      	movs	r2, #1
9000941e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009422:	687b      	ldr	r3, [r7, #4]
90009424:	2201      	movs	r2, #1
90009426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
9000942a:	687b      	ldr	r3, [r7, #4]
9000942c:	2201      	movs	r2, #1
9000942e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
90009432:	687b      	ldr	r3, [r7, #4]
90009434:	2201      	movs	r2, #1
90009436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
9000943a:	687b      	ldr	r3, [r7, #4]
9000943c:	2201      	movs	r2, #1
9000943e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90009442:	687b      	ldr	r3, [r7, #4]
90009444:	2201      	movs	r2, #1
90009446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
9000944a:	687b      	ldr	r3, [r7, #4]
9000944c:	2201      	movs	r2, #1
9000944e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90009452:	687b      	ldr	r3, [r7, #4]
90009454:	2201      	movs	r2, #1
90009456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000945a:	687b      	ldr	r3, [r7, #4]
9000945c:	2201      	movs	r2, #1
9000945e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009462:	687b      	ldr	r3, [r7, #4]
90009464:	2201      	movs	r2, #1
90009466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000946a:	687b      	ldr	r3, [r7, #4]
9000946c:	2201      	movs	r2, #1
9000946e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90009472:	687b      	ldr	r3, [r7, #4]
90009474:	2201      	movs	r2, #1
90009476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
9000947a:	2300      	movs	r3, #0
}
9000947c:	4618      	mov	r0, r3
9000947e:	3708      	adds	r7, #8
90009480:	46bd      	mov	sp, r7
90009482:	bd80      	pop	{r7, pc}

90009484 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
90009484:	b580      	push	{r7, lr}
90009486:	b082      	sub	sp, #8
90009488:	af00      	add	r7, sp, #0
9000948a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
9000948c:	687b      	ldr	r3, [r7, #4]
9000948e:	2202      	movs	r2, #2
90009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
90009494:	687b      	ldr	r3, [r7, #4]
90009496:	681b      	ldr	r3, [r3, #0]
90009498:	6a1a      	ldr	r2, [r3, #32]
9000949a:	f241 1311 	movw	r3, #4369	; 0x1111
9000949e:	4013      	ands	r3, r2
900094a0:	2b00      	cmp	r3, #0
900094a2:	d10f      	bne.n	900094c4 <HAL_TIM_PWM_DeInit+0x40>
900094a4:	687b      	ldr	r3, [r7, #4]
900094a6:	681b      	ldr	r3, [r3, #0]
900094a8:	6a1a      	ldr	r2, [r3, #32]
900094aa:	f240 4344 	movw	r3, #1092	; 0x444
900094ae:	4013      	ands	r3, r2
900094b0:	2b00      	cmp	r3, #0
900094b2:	d107      	bne.n	900094c4 <HAL_TIM_PWM_DeInit+0x40>
900094b4:	687b      	ldr	r3, [r7, #4]
900094b6:	681b      	ldr	r3, [r3, #0]
900094b8:	681a      	ldr	r2, [r3, #0]
900094ba:	687b      	ldr	r3, [r7, #4]
900094bc:	681b      	ldr	r3, [r3, #0]
900094be:	f022 0201 	bic.w	r2, r2, #1
900094c2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
900094c4:	6878      	ldr	r0, [r7, #4]
900094c6:	f000 f843 	bl	90009550 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
900094ca:	687b      	ldr	r3, [r7, #4]
900094cc:	2200      	movs	r2, #0
900094ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
900094d2:	687b      	ldr	r3, [r7, #4]
900094d4:	2200      	movs	r2, #0
900094d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
900094da:	687b      	ldr	r3, [r7, #4]
900094dc:	2200      	movs	r2, #0
900094de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
900094e2:	687b      	ldr	r3, [r7, #4]
900094e4:	2200      	movs	r2, #0
900094e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
900094ea:	687b      	ldr	r3, [r7, #4]
900094ec:	2200      	movs	r2, #0
900094ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
900094f2:	687b      	ldr	r3, [r7, #4]
900094f4:	2200      	movs	r2, #0
900094f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
900094fa:	687b      	ldr	r3, [r7, #4]
900094fc:	2200      	movs	r2, #0
900094fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
90009502:	687b      	ldr	r3, [r7, #4]
90009504:	2200      	movs	r2, #0
90009506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000950a:	687b      	ldr	r3, [r7, #4]
9000950c:	2200      	movs	r2, #0
9000950e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90009512:	687b      	ldr	r3, [r7, #4]
90009514:	2200      	movs	r2, #0
90009516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
9000951a:	687b      	ldr	r3, [r7, #4]
9000951c:	2200      	movs	r2, #0
9000951e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
90009522:	687b      	ldr	r3, [r7, #4]
90009524:	2200      	movs	r2, #0
90009526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
9000952a:	687b      	ldr	r3, [r7, #4]
9000952c:	2200      	movs	r2, #0
9000952e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
90009532:	2300      	movs	r3, #0
}
90009534:	4618      	mov	r0, r3
90009536:	3708      	adds	r7, #8
90009538:	46bd      	mov	sp, r7
9000953a:	bd80      	pop	{r7, pc}

9000953c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
9000953c:	b480      	push	{r7}
9000953e:	b083      	sub	sp, #12
90009540:	af00      	add	r7, sp, #0
90009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
90009544:	bf00      	nop
90009546:	370c      	adds	r7, #12
90009548:	46bd      	mov	sp, r7
9000954a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000954e:	4770      	bx	lr

90009550 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
90009550:	b480      	push	{r7}
90009552:	b083      	sub	sp, #12
90009554:	af00      	add	r7, sp, #0
90009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
90009558:	bf00      	nop
9000955a:	370c      	adds	r7, #12
9000955c:	46bd      	mov	sp, r7
9000955e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009562:	4770      	bx	lr

90009564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
90009564:	b480      	push	{r7}
90009566:	b085      	sub	sp, #20
90009568:	af00      	add	r7, sp, #0
9000956a:	6078      	str	r0, [r7, #4]
9000956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
9000956e:	687b      	ldr	r3, [r7, #4]
90009570:	681b      	ldr	r3, [r3, #0]
90009572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90009574:	687b      	ldr	r3, [r7, #4]
90009576:	4a40      	ldr	r2, [pc, #256]	; (90009678 <TIM_Base_SetConfig+0x114>)
90009578:	4293      	cmp	r3, r2
9000957a:	d013      	beq.n	900095a4 <TIM_Base_SetConfig+0x40>
9000957c:	687b      	ldr	r3, [r7, #4]
9000957e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90009582:	d00f      	beq.n	900095a4 <TIM_Base_SetConfig+0x40>
90009584:	687b      	ldr	r3, [r7, #4]
90009586:	4a3d      	ldr	r2, [pc, #244]	; (9000967c <TIM_Base_SetConfig+0x118>)
90009588:	4293      	cmp	r3, r2
9000958a:	d00b      	beq.n	900095a4 <TIM_Base_SetConfig+0x40>
9000958c:	687b      	ldr	r3, [r7, #4]
9000958e:	4a3c      	ldr	r2, [pc, #240]	; (90009680 <TIM_Base_SetConfig+0x11c>)
90009590:	4293      	cmp	r3, r2
90009592:	d007      	beq.n	900095a4 <TIM_Base_SetConfig+0x40>
90009594:	687b      	ldr	r3, [r7, #4]
90009596:	4a3b      	ldr	r2, [pc, #236]	; (90009684 <TIM_Base_SetConfig+0x120>)
90009598:	4293      	cmp	r3, r2
9000959a:	d003      	beq.n	900095a4 <TIM_Base_SetConfig+0x40>
9000959c:	687b      	ldr	r3, [r7, #4]
9000959e:	4a3a      	ldr	r2, [pc, #232]	; (90009688 <TIM_Base_SetConfig+0x124>)
900095a0:	4293      	cmp	r3, r2
900095a2:	d108      	bne.n	900095b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900095a4:	68fb      	ldr	r3, [r7, #12]
900095a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
900095aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900095ac:	683b      	ldr	r3, [r7, #0]
900095ae:	685b      	ldr	r3, [r3, #4]
900095b0:	68fa      	ldr	r2, [r7, #12]
900095b2:	4313      	orrs	r3, r2
900095b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
900095b6:	687b      	ldr	r3, [r7, #4]
900095b8:	4a2f      	ldr	r2, [pc, #188]	; (90009678 <TIM_Base_SetConfig+0x114>)
900095ba:	4293      	cmp	r3, r2
900095bc:	d01f      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095be:	687b      	ldr	r3, [r7, #4]
900095c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900095c4:	d01b      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095c6:	687b      	ldr	r3, [r7, #4]
900095c8:	4a2c      	ldr	r2, [pc, #176]	; (9000967c <TIM_Base_SetConfig+0x118>)
900095ca:	4293      	cmp	r3, r2
900095cc:	d017      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095ce:	687b      	ldr	r3, [r7, #4]
900095d0:	4a2b      	ldr	r2, [pc, #172]	; (90009680 <TIM_Base_SetConfig+0x11c>)
900095d2:	4293      	cmp	r3, r2
900095d4:	d013      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095d6:	687b      	ldr	r3, [r7, #4]
900095d8:	4a2a      	ldr	r2, [pc, #168]	; (90009684 <TIM_Base_SetConfig+0x120>)
900095da:	4293      	cmp	r3, r2
900095dc:	d00f      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095de:	687b      	ldr	r3, [r7, #4]
900095e0:	4a29      	ldr	r2, [pc, #164]	; (90009688 <TIM_Base_SetConfig+0x124>)
900095e2:	4293      	cmp	r3, r2
900095e4:	d00b      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095e6:	687b      	ldr	r3, [r7, #4]
900095e8:	4a28      	ldr	r2, [pc, #160]	; (9000968c <TIM_Base_SetConfig+0x128>)
900095ea:	4293      	cmp	r3, r2
900095ec:	d007      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095ee:	687b      	ldr	r3, [r7, #4]
900095f0:	4a27      	ldr	r2, [pc, #156]	; (90009690 <TIM_Base_SetConfig+0x12c>)
900095f2:	4293      	cmp	r3, r2
900095f4:	d003      	beq.n	900095fe <TIM_Base_SetConfig+0x9a>
900095f6:	687b      	ldr	r3, [r7, #4]
900095f8:	4a26      	ldr	r2, [pc, #152]	; (90009694 <TIM_Base_SetConfig+0x130>)
900095fa:	4293      	cmp	r3, r2
900095fc:	d108      	bne.n	90009610 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
900095fe:	68fb      	ldr	r3, [r7, #12]
90009600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90009604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90009606:	683b      	ldr	r3, [r7, #0]
90009608:	68db      	ldr	r3, [r3, #12]
9000960a:	68fa      	ldr	r2, [r7, #12]
9000960c:	4313      	orrs	r3, r2
9000960e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90009610:	68fb      	ldr	r3, [r7, #12]
90009612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
90009616:	683b      	ldr	r3, [r7, #0]
90009618:	695b      	ldr	r3, [r3, #20]
9000961a:	4313      	orrs	r3, r2
9000961c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
9000961e:	687b      	ldr	r3, [r7, #4]
90009620:	68fa      	ldr	r2, [r7, #12]
90009622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90009624:	683b      	ldr	r3, [r7, #0]
90009626:	689a      	ldr	r2, [r3, #8]
90009628:	687b      	ldr	r3, [r7, #4]
9000962a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000962c:	683b      	ldr	r3, [r7, #0]
9000962e:	681a      	ldr	r2, [r3, #0]
90009630:	687b      	ldr	r3, [r7, #4]
90009632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90009634:	687b      	ldr	r3, [r7, #4]
90009636:	4a10      	ldr	r2, [pc, #64]	; (90009678 <TIM_Base_SetConfig+0x114>)
90009638:	4293      	cmp	r3, r2
9000963a:	d00f      	beq.n	9000965c <TIM_Base_SetConfig+0xf8>
9000963c:	687b      	ldr	r3, [r7, #4]
9000963e:	4a12      	ldr	r2, [pc, #72]	; (90009688 <TIM_Base_SetConfig+0x124>)
90009640:	4293      	cmp	r3, r2
90009642:	d00b      	beq.n	9000965c <TIM_Base_SetConfig+0xf8>
90009644:	687b      	ldr	r3, [r7, #4]
90009646:	4a11      	ldr	r2, [pc, #68]	; (9000968c <TIM_Base_SetConfig+0x128>)
90009648:	4293      	cmp	r3, r2
9000964a:	d007      	beq.n	9000965c <TIM_Base_SetConfig+0xf8>
9000964c:	687b      	ldr	r3, [r7, #4]
9000964e:	4a10      	ldr	r2, [pc, #64]	; (90009690 <TIM_Base_SetConfig+0x12c>)
90009650:	4293      	cmp	r3, r2
90009652:	d003      	beq.n	9000965c <TIM_Base_SetConfig+0xf8>
90009654:	687b      	ldr	r3, [r7, #4]
90009656:	4a0f      	ldr	r2, [pc, #60]	; (90009694 <TIM_Base_SetConfig+0x130>)
90009658:	4293      	cmp	r3, r2
9000965a:	d103      	bne.n	90009664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000965c:	683b      	ldr	r3, [r7, #0]
9000965e:	691a      	ldr	r2, [r3, #16]
90009660:	687b      	ldr	r3, [r7, #4]
90009662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90009664:	687b      	ldr	r3, [r7, #4]
90009666:	2201      	movs	r2, #1
90009668:	615a      	str	r2, [r3, #20]
}
9000966a:	bf00      	nop
9000966c:	3714      	adds	r7, #20
9000966e:	46bd      	mov	sp, r7
90009670:	f85d 7b04 	ldr.w	r7, [sp], #4
90009674:	4770      	bx	lr
90009676:	bf00      	nop
90009678:	40010000 	.word	0x40010000
9000967c:	40000400 	.word	0x40000400
90009680:	40000800 	.word	0x40000800
90009684:	40000c00 	.word	0x40000c00
90009688:	40010400 	.word	0x40010400
9000968c:	40014000 	.word	0x40014000
90009690:	40014400 	.word	0x40014400
90009694:	40014800 	.word	0x40014800

90009698 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90009698:	b480      	push	{r7}
9000969a:	b083      	sub	sp, #12
9000969c:	af00      	add	r7, sp, #0
9000969e:	6078      	str	r0, [r7, #4]
900096a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
900096a2:	683b      	ldr	r3, [r7, #0]
900096a4:	681b      	ldr	r3, [r3, #0]
900096a6:	2b00      	cmp	r3, #0
900096a8:	d121      	bne.n	900096ee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900096aa:	687b      	ldr	r3, [r7, #4]
900096ac:	681a      	ldr	r2, [r3, #0]
900096ae:	4b27      	ldr	r3, [pc, #156]	; (9000974c <FMC_SDRAM_Init+0xb4>)
900096b0:	4013      	ands	r3, r2
900096b2:	683a      	ldr	r2, [r7, #0]
900096b4:	6851      	ldr	r1, [r2, #4]
900096b6:	683a      	ldr	r2, [r7, #0]
900096b8:	6892      	ldr	r2, [r2, #8]
900096ba:	4311      	orrs	r1, r2
900096bc:	683a      	ldr	r2, [r7, #0]
900096be:	68d2      	ldr	r2, [r2, #12]
900096c0:	4311      	orrs	r1, r2
900096c2:	683a      	ldr	r2, [r7, #0]
900096c4:	6912      	ldr	r2, [r2, #16]
900096c6:	4311      	orrs	r1, r2
900096c8:	683a      	ldr	r2, [r7, #0]
900096ca:	6952      	ldr	r2, [r2, #20]
900096cc:	4311      	orrs	r1, r2
900096ce:	683a      	ldr	r2, [r7, #0]
900096d0:	6992      	ldr	r2, [r2, #24]
900096d2:	4311      	orrs	r1, r2
900096d4:	683a      	ldr	r2, [r7, #0]
900096d6:	69d2      	ldr	r2, [r2, #28]
900096d8:	4311      	orrs	r1, r2
900096da:	683a      	ldr	r2, [r7, #0]
900096dc:	6a12      	ldr	r2, [r2, #32]
900096de:	4311      	orrs	r1, r2
900096e0:	683a      	ldr	r2, [r7, #0]
900096e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
900096e4:	430a      	orrs	r2, r1
900096e6:	431a      	orrs	r2, r3
900096e8:	687b      	ldr	r3, [r7, #4]
900096ea:	601a      	str	r2, [r3, #0]
900096ec:	e026      	b.n	9000973c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900096ee:	687b      	ldr	r3, [r7, #4]
900096f0:	681b      	ldr	r3, [r3, #0]
900096f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
900096f6:	683b      	ldr	r3, [r7, #0]
900096f8:	69d9      	ldr	r1, [r3, #28]
900096fa:	683b      	ldr	r3, [r7, #0]
900096fc:	6a1b      	ldr	r3, [r3, #32]
900096fe:	4319      	orrs	r1, r3
90009700:	683b      	ldr	r3, [r7, #0]
90009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009704:	430b      	orrs	r3, r1
90009706:	431a      	orrs	r2, r3
90009708:	687b      	ldr	r3, [r7, #4]
9000970a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000970c:	687b      	ldr	r3, [r7, #4]
9000970e:	685a      	ldr	r2, [r3, #4]
90009710:	4b0e      	ldr	r3, [pc, #56]	; (9000974c <FMC_SDRAM_Init+0xb4>)
90009712:	4013      	ands	r3, r2
90009714:	683a      	ldr	r2, [r7, #0]
90009716:	6851      	ldr	r1, [r2, #4]
90009718:	683a      	ldr	r2, [r7, #0]
9000971a:	6892      	ldr	r2, [r2, #8]
9000971c:	4311      	orrs	r1, r2
9000971e:	683a      	ldr	r2, [r7, #0]
90009720:	68d2      	ldr	r2, [r2, #12]
90009722:	4311      	orrs	r1, r2
90009724:	683a      	ldr	r2, [r7, #0]
90009726:	6912      	ldr	r2, [r2, #16]
90009728:	4311      	orrs	r1, r2
9000972a:	683a      	ldr	r2, [r7, #0]
9000972c:	6952      	ldr	r2, [r2, #20]
9000972e:	4311      	orrs	r1, r2
90009730:	683a      	ldr	r2, [r7, #0]
90009732:	6992      	ldr	r2, [r2, #24]
90009734:	430a      	orrs	r2, r1
90009736:	431a      	orrs	r2, r3
90009738:	687b      	ldr	r3, [r7, #4]
9000973a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
9000973c:	2300      	movs	r3, #0
}
9000973e:	4618      	mov	r0, r3
90009740:	370c      	adds	r7, #12
90009742:	46bd      	mov	sp, r7
90009744:	f85d 7b04 	ldr.w	r7, [sp], #4
90009748:	4770      	bx	lr
9000974a:	bf00      	nop
9000974c:	ffff8000 	.word	0xffff8000

90009750 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
90009750:	b480      	push	{r7}
90009752:	b085      	sub	sp, #20
90009754:	af00      	add	r7, sp, #0
90009756:	60f8      	str	r0, [r7, #12]
90009758:	60b9      	str	r1, [r7, #8]
9000975a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000975c:	687b      	ldr	r3, [r7, #4]
9000975e:	2b00      	cmp	r3, #0
90009760:	d128      	bne.n	900097b4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90009762:	68fb      	ldr	r3, [r7, #12]
90009764:	689b      	ldr	r3, [r3, #8]
90009766:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
9000976a:	68bb      	ldr	r3, [r7, #8]
9000976c:	681b      	ldr	r3, [r3, #0]
9000976e:	1e59      	subs	r1, r3, #1
90009770:	68bb      	ldr	r3, [r7, #8]
90009772:	685b      	ldr	r3, [r3, #4]
90009774:	3b01      	subs	r3, #1
90009776:	011b      	lsls	r3, r3, #4
90009778:	4319      	orrs	r1, r3
9000977a:	68bb      	ldr	r3, [r7, #8]
9000977c:	689b      	ldr	r3, [r3, #8]
9000977e:	3b01      	subs	r3, #1
90009780:	021b      	lsls	r3, r3, #8
90009782:	4319      	orrs	r1, r3
90009784:	68bb      	ldr	r3, [r7, #8]
90009786:	68db      	ldr	r3, [r3, #12]
90009788:	3b01      	subs	r3, #1
9000978a:	031b      	lsls	r3, r3, #12
9000978c:	4319      	orrs	r1, r3
9000978e:	68bb      	ldr	r3, [r7, #8]
90009790:	691b      	ldr	r3, [r3, #16]
90009792:	3b01      	subs	r3, #1
90009794:	041b      	lsls	r3, r3, #16
90009796:	4319      	orrs	r1, r3
90009798:	68bb      	ldr	r3, [r7, #8]
9000979a:	695b      	ldr	r3, [r3, #20]
9000979c:	3b01      	subs	r3, #1
9000979e:	051b      	lsls	r3, r3, #20
900097a0:	4319      	orrs	r1, r3
900097a2:	68bb      	ldr	r3, [r7, #8]
900097a4:	699b      	ldr	r3, [r3, #24]
900097a6:	3b01      	subs	r3, #1
900097a8:	061b      	lsls	r3, r3, #24
900097aa:	430b      	orrs	r3, r1
900097ac:	431a      	orrs	r2, r3
900097ae:	68fb      	ldr	r3, [r7, #12]
900097b0:	609a      	str	r2, [r3, #8]
900097b2:	e02d      	b.n	90009810 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
900097b4:	68fb      	ldr	r3, [r7, #12]
900097b6:	689a      	ldr	r2, [r3, #8]
900097b8:	4b19      	ldr	r3, [pc, #100]	; (90009820 <FMC_SDRAM_Timing_Init+0xd0>)
900097ba:	4013      	ands	r3, r2
900097bc:	68ba      	ldr	r2, [r7, #8]
900097be:	68d2      	ldr	r2, [r2, #12]
900097c0:	3a01      	subs	r2, #1
900097c2:	0311      	lsls	r1, r2, #12
900097c4:	68ba      	ldr	r2, [r7, #8]
900097c6:	6952      	ldr	r2, [r2, #20]
900097c8:	3a01      	subs	r2, #1
900097ca:	0512      	lsls	r2, r2, #20
900097cc:	430a      	orrs	r2, r1
900097ce:	431a      	orrs	r2, r3
900097d0:	68fb      	ldr	r3, [r7, #12]
900097d2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
900097d4:	68fb      	ldr	r3, [r7, #12]
900097d6:	68db      	ldr	r3, [r3, #12]
900097d8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
900097dc:	68bb      	ldr	r3, [r7, #8]
900097de:	681b      	ldr	r3, [r3, #0]
900097e0:	1e59      	subs	r1, r3, #1
900097e2:	68bb      	ldr	r3, [r7, #8]
900097e4:	685b      	ldr	r3, [r3, #4]
900097e6:	3b01      	subs	r3, #1
900097e8:	011b      	lsls	r3, r3, #4
900097ea:	4319      	orrs	r1, r3
900097ec:	68bb      	ldr	r3, [r7, #8]
900097ee:	689b      	ldr	r3, [r3, #8]
900097f0:	3b01      	subs	r3, #1
900097f2:	021b      	lsls	r3, r3, #8
900097f4:	4319      	orrs	r1, r3
900097f6:	68bb      	ldr	r3, [r7, #8]
900097f8:	691b      	ldr	r3, [r3, #16]
900097fa:	3b01      	subs	r3, #1
900097fc:	041b      	lsls	r3, r3, #16
900097fe:	4319      	orrs	r1, r3
90009800:	68bb      	ldr	r3, [r7, #8]
90009802:	699b      	ldr	r3, [r3, #24]
90009804:	3b01      	subs	r3, #1
90009806:	061b      	lsls	r3, r3, #24
90009808:	430b      	orrs	r3, r1
9000980a:	431a      	orrs	r2, r3
9000980c:	68fb      	ldr	r3, [r7, #12]
9000980e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
90009810:	2300      	movs	r3, #0
}
90009812:	4618      	mov	r0, r3
90009814:	3714      	adds	r7, #20
90009816:	46bd      	mov	sp, r7
90009818:	f85d 7b04 	ldr.w	r7, [sp], #4
9000981c:	4770      	bx	lr
9000981e:	bf00      	nop
90009820:	ff0f0fff 	.word	0xff0f0fff

90009824 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
90009824:	b480      	push	{r7}
90009826:	b085      	sub	sp, #20
90009828:	af00      	add	r7, sp, #0
9000982a:	60f8      	str	r0, [r7, #12]
9000982c:	60b9      	str	r1, [r7, #8]
9000982e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
90009830:	68fb      	ldr	r3, [r7, #12]
90009832:	691a      	ldr	r2, [r3, #16]
90009834:	4b0c      	ldr	r3, [pc, #48]	; (90009868 <FMC_SDRAM_SendCommand+0x44>)
90009836:	4013      	ands	r3, r2
90009838:	68ba      	ldr	r2, [r7, #8]
9000983a:	6811      	ldr	r1, [r2, #0]
9000983c:	68ba      	ldr	r2, [r7, #8]
9000983e:	6852      	ldr	r2, [r2, #4]
90009840:	4311      	orrs	r1, r2
90009842:	68ba      	ldr	r2, [r7, #8]
90009844:	6892      	ldr	r2, [r2, #8]
90009846:	3a01      	subs	r2, #1
90009848:	0152      	lsls	r2, r2, #5
9000984a:	4311      	orrs	r1, r2
9000984c:	68ba      	ldr	r2, [r7, #8]
9000984e:	68d2      	ldr	r2, [r2, #12]
90009850:	0252      	lsls	r2, r2, #9
90009852:	430a      	orrs	r2, r1
90009854:	431a      	orrs	r2, r3
90009856:	68fb      	ldr	r3, [r7, #12]
90009858:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
9000985a:	2300      	movs	r3, #0
}
9000985c:	4618      	mov	r0, r3
9000985e:	3714      	adds	r7, #20
90009860:	46bd      	mov	sp, r7
90009862:	f85d 7b04 	ldr.w	r7, [sp], #4
90009866:	4770      	bx	lr
90009868:	ffc00000 	.word	0xffc00000

9000986c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000986c:	b480      	push	{r7}
9000986e:	b083      	sub	sp, #12
90009870:	af00      	add	r7, sp, #0
90009872:	6078      	str	r0, [r7, #4]
90009874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
90009876:	687b      	ldr	r3, [r7, #4]
90009878:	695a      	ldr	r2, [r3, #20]
9000987a:	4b07      	ldr	r3, [pc, #28]	; (90009898 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
9000987c:	4013      	ands	r3, r2
9000987e:	683a      	ldr	r2, [r7, #0]
90009880:	0052      	lsls	r2, r2, #1
90009882:	431a      	orrs	r2, r3
90009884:	687b      	ldr	r3, [r7, #4]
90009886:	615a      	str	r2, [r3, #20]

  return HAL_OK;
90009888:	2300      	movs	r3, #0
}
9000988a:	4618      	mov	r0, r3
9000988c:	370c      	adds	r7, #12
9000988e:	46bd      	mov	sp, r7
90009890:	f85d 7b04 	ldr.w	r7, [sp], #4
90009894:	4770      	bx	lr
90009896:	bf00      	nop
90009898:	ffffc001 	.word	0xffffc001

9000989c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
9000989c:	b480      	push	{r7}
9000989e:	b083      	sub	sp, #12
900098a0:	af00      	add	r7, sp, #0
900098a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
900098a4:	687b      	ldr	r3, [r7, #4]
900098a6:	689b      	ldr	r3, [r3, #8]
900098a8:	f043 0201 	orr.w	r2, r3, #1
900098ac:	687b      	ldr	r3, [r7, #4]
900098ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
900098b0:	2300      	movs	r3, #0
}
900098b2:	4618      	mov	r0, r3
900098b4:	370c      	adds	r7, #12
900098b6:	46bd      	mov	sp, r7
900098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
900098bc:	4770      	bx	lr

900098be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
900098be:	b480      	push	{r7}
900098c0:	b083      	sub	sp, #12
900098c2:	af00      	add	r7, sp, #0
900098c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
900098c6:	687b      	ldr	r3, [r7, #4]
900098c8:	689b      	ldr	r3, [r3, #8]
900098ca:	f023 0201 	bic.w	r2, r3, #1
900098ce:	687b      	ldr	r3, [r7, #4]
900098d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
900098d2:	2300      	movs	r3, #0
}
900098d4:	4618      	mov	r0, r3
900098d6:	370c      	adds	r7, #12
900098d8:	46bd      	mov	sp, r7
900098da:	f85d 7b04 	ldr.w	r7, [sp], #4
900098de:	4770      	bx	lr

900098e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
900098e0:	b480      	push	{r7}
900098e2:	b085      	sub	sp, #20
900098e4:	af00      	add	r7, sp, #0
900098e6:	6078      	str	r0, [r7, #4]
900098e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
900098ea:	2300      	movs	r3, #0
900098ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
900098ee:	68fb      	ldr	r3, [r7, #12]
900098f0:	3301      	adds	r3, #1
900098f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
900098f4:	68fb      	ldr	r3, [r7, #12]
900098f6:	4a13      	ldr	r2, [pc, #76]	; (90009944 <USB_FlushTxFifo+0x64>)
900098f8:	4293      	cmp	r3, r2
900098fa:	d901      	bls.n	90009900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
900098fc:	2303      	movs	r3, #3
900098fe:	e01b      	b.n	90009938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009900:	687b      	ldr	r3, [r7, #4]
90009902:	691b      	ldr	r3, [r3, #16]
90009904:	2b00      	cmp	r3, #0
90009906:	daf2      	bge.n	900098ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
90009908:	2300      	movs	r3, #0
9000990a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
9000990c:	683b      	ldr	r3, [r7, #0]
9000990e:	019b      	lsls	r3, r3, #6
90009910:	f043 0220 	orr.w	r2, r3, #32
90009914:	687b      	ldr	r3, [r7, #4]
90009916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009918:	68fb      	ldr	r3, [r7, #12]
9000991a:	3301      	adds	r3, #1
9000991c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000991e:	68fb      	ldr	r3, [r7, #12]
90009920:	4a08      	ldr	r2, [pc, #32]	; (90009944 <USB_FlushTxFifo+0x64>)
90009922:	4293      	cmp	r3, r2
90009924:	d901      	bls.n	9000992a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
90009926:	2303      	movs	r3, #3
90009928:	e006      	b.n	90009938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
9000992a:	687b      	ldr	r3, [r7, #4]
9000992c:	691b      	ldr	r3, [r3, #16]
9000992e:	f003 0320 	and.w	r3, r3, #32
90009932:	2b20      	cmp	r3, #32
90009934:	d0f0      	beq.n	90009918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
90009936:	2300      	movs	r3, #0
}
90009938:	4618      	mov	r0, r3
9000993a:	3714      	adds	r7, #20
9000993c:	46bd      	mov	sp, r7
9000993e:	f85d 7b04 	ldr.w	r7, [sp], #4
90009942:	4770      	bx	lr
90009944:	00030d40 	.word	0x00030d40

90009948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
90009948:	b480      	push	{r7}
9000994a:	b085      	sub	sp, #20
9000994c:	af00      	add	r7, sp, #0
9000994e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
90009950:	2300      	movs	r3, #0
90009952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
90009954:	68fb      	ldr	r3, [r7, #12]
90009956:	3301      	adds	r3, #1
90009958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000995a:	68fb      	ldr	r3, [r7, #12]
9000995c:	4a11      	ldr	r2, [pc, #68]	; (900099a4 <USB_FlushRxFifo+0x5c>)
9000995e:	4293      	cmp	r3, r2
90009960:	d901      	bls.n	90009966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
90009962:	2303      	movs	r3, #3
90009964:	e018      	b.n	90009998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
90009966:	687b      	ldr	r3, [r7, #4]
90009968:	691b      	ldr	r3, [r3, #16]
9000996a:	2b00      	cmp	r3, #0
9000996c:	daf2      	bge.n	90009954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
9000996e:	2300      	movs	r3, #0
90009970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
90009972:	687b      	ldr	r3, [r7, #4]
90009974:	2210      	movs	r2, #16
90009976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
90009978:	68fb      	ldr	r3, [r7, #12]
9000997a:	3301      	adds	r3, #1
9000997c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
9000997e:	68fb      	ldr	r3, [r7, #12]
90009980:	4a08      	ldr	r2, [pc, #32]	; (900099a4 <USB_FlushRxFifo+0x5c>)
90009982:	4293      	cmp	r3, r2
90009984:	d901      	bls.n	9000998a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
90009986:	2303      	movs	r3, #3
90009988:	e006      	b.n	90009998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
9000998a:	687b      	ldr	r3, [r7, #4]
9000998c:	691b      	ldr	r3, [r3, #16]
9000998e:	f003 0310 	and.w	r3, r3, #16
90009992:	2b10      	cmp	r3, #16
90009994:	d0f0      	beq.n	90009978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
90009996:	2300      	movs	r3, #0
}
90009998:	4618      	mov	r0, r3
9000999a:	3714      	adds	r7, #20
9000999c:	46bd      	mov	sp, r7
9000999e:	f85d 7b04 	ldr.w	r7, [sp], #4
900099a2:	4770      	bx	lr
900099a4:	00030d40 	.word	0x00030d40

900099a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
900099a8:	b480      	push	{r7}
900099aa:	b08b      	sub	sp, #44	; 0x2c
900099ac:	af00      	add	r7, sp, #0
900099ae:	60f8      	str	r0, [r7, #12]
900099b0:	60b9      	str	r1, [r7, #8]
900099b2:	4613      	mov	r3, r2
900099b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
900099b6:	68fb      	ldr	r3, [r7, #12]
900099b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
900099ba:	68bb      	ldr	r3, [r7, #8]
900099bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
900099be:	88fb      	ldrh	r3, [r7, #6]
900099c0:	089b      	lsrs	r3, r3, #2
900099c2:	b29b      	uxth	r3, r3
900099c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
900099c6:	88fb      	ldrh	r3, [r7, #6]
900099c8:	f003 0303 	and.w	r3, r3, #3
900099cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
900099ce:	2300      	movs	r3, #0
900099d0:	623b      	str	r3, [r7, #32]
900099d2:	e014      	b.n	900099fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
900099d4:	69bb      	ldr	r3, [r7, #24]
900099d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900099da:	681a      	ldr	r2, [r3, #0]
900099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099de:	601a      	str	r2, [r3, #0]
    pDest++;
900099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099e2:	3301      	adds	r3, #1
900099e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
900099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099e8:	3301      	adds	r3, #1
900099ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
900099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099ee:	3301      	adds	r3, #1
900099f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
900099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900099f4:	3301      	adds	r3, #1
900099f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
900099f8:	6a3b      	ldr	r3, [r7, #32]
900099fa:	3301      	adds	r3, #1
900099fc:	623b      	str	r3, [r7, #32]
900099fe:	6a3a      	ldr	r2, [r7, #32]
90009a00:	697b      	ldr	r3, [r7, #20]
90009a02:	429a      	cmp	r2, r3
90009a04:	d3e6      	bcc.n	900099d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
90009a06:	8bfb      	ldrh	r3, [r7, #30]
90009a08:	2b00      	cmp	r3, #0
90009a0a:	d01e      	beq.n	90009a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
90009a0c:	2300      	movs	r3, #0
90009a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
90009a10:	69bb      	ldr	r3, [r7, #24]
90009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90009a16:	461a      	mov	r2, r3
90009a18:	f107 0310 	add.w	r3, r7, #16
90009a1c:	6812      	ldr	r2, [r2, #0]
90009a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
90009a20:	693a      	ldr	r2, [r7, #16]
90009a22:	6a3b      	ldr	r3, [r7, #32]
90009a24:	b2db      	uxtb	r3, r3
90009a26:	00db      	lsls	r3, r3, #3
90009a28:	fa22 f303 	lsr.w	r3, r2, r3
90009a2c:	b2da      	uxtb	r2, r3
90009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a30:	701a      	strb	r2, [r3, #0]
      i++;
90009a32:	6a3b      	ldr	r3, [r7, #32]
90009a34:	3301      	adds	r3, #1
90009a36:	623b      	str	r3, [r7, #32]
      pDest++;
90009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009a3a:	3301      	adds	r3, #1
90009a3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
90009a3e:	8bfb      	ldrh	r3, [r7, #30]
90009a40:	3b01      	subs	r3, #1
90009a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
90009a44:	8bfb      	ldrh	r3, [r7, #30]
90009a46:	2b00      	cmp	r3, #0
90009a48:	d1ea      	bne.n	90009a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
90009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
90009a4c:	4618      	mov	r0, r3
90009a4e:	372c      	adds	r7, #44	; 0x2c
90009a50:	46bd      	mov	sp, r7
90009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a56:	4770      	bx	lr

90009a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
90009a58:	b480      	push	{r7}
90009a5a:	b085      	sub	sp, #20
90009a5c:	af00      	add	r7, sp, #0
90009a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
90009a60:	687b      	ldr	r3, [r7, #4]
90009a62:	695b      	ldr	r3, [r3, #20]
90009a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
90009a66:	687b      	ldr	r3, [r7, #4]
90009a68:	699b      	ldr	r3, [r3, #24]
90009a6a:	68fa      	ldr	r2, [r7, #12]
90009a6c:	4013      	ands	r3, r2
90009a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
90009a70:	68fb      	ldr	r3, [r7, #12]
}
90009a72:	4618      	mov	r0, r3
90009a74:	3714      	adds	r7, #20
90009a76:	46bd      	mov	sp, r7
90009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
90009a7c:	4770      	bx	lr

90009a7e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
90009a7e:	b480      	push	{r7}
90009a80:	b085      	sub	sp, #20
90009a82:	af00      	add	r7, sp, #0
90009a84:	6078      	str	r0, [r7, #4]
90009a86:	460b      	mov	r3, r1
90009a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009a8a:	687b      	ldr	r3, [r7, #4]
90009a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
90009a8e:	78fb      	ldrb	r3, [r7, #3]
90009a90:	015a      	lsls	r2, r3, #5
90009a92:	68fb      	ldr	r3, [r7, #12]
90009a94:	4413      	add	r3, r2
90009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009a9a:	689b      	ldr	r3, [r3, #8]
90009a9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
90009a9e:	78fb      	ldrb	r3, [r7, #3]
90009aa0:	015a      	lsls	r2, r3, #5
90009aa2:	68fb      	ldr	r3, [r7, #12]
90009aa4:	4413      	add	r3, r2
90009aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009aaa:	68db      	ldr	r3, [r3, #12]
90009aac:	68ba      	ldr	r2, [r7, #8]
90009aae:	4013      	ands	r3, r2
90009ab0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
90009ab2:	68bb      	ldr	r3, [r7, #8]
}
90009ab4:	4618      	mov	r0, r3
90009ab6:	3714      	adds	r7, #20
90009ab8:	46bd      	mov	sp, r7
90009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
90009abe:	4770      	bx	lr

90009ac0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
90009ac0:	b480      	push	{r7}
90009ac2:	b083      	sub	sp, #12
90009ac4:	af00      	add	r7, sp, #0
90009ac6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
90009ac8:	687b      	ldr	r3, [r7, #4]
90009aca:	695b      	ldr	r3, [r3, #20]
90009acc:	f003 0301 	and.w	r3, r3, #1
}
90009ad0:	4618      	mov	r0, r3
90009ad2:	370c      	adds	r7, #12
90009ad4:	46bd      	mov	sp, r7
90009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
90009ada:	4770      	bx	lr

90009adc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
90009adc:	b480      	push	{r7}
90009ade:	b085      	sub	sp, #20
90009ae0:	af00      	add	r7, sp, #0
90009ae2:	6078      	str	r0, [r7, #4]
90009ae4:	460b      	mov	r3, r1
90009ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009ae8:	687b      	ldr	r3, [r7, #4]
90009aea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
90009aec:	68fb      	ldr	r3, [r7, #12]
90009aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009af2:	681b      	ldr	r3, [r3, #0]
90009af4:	68fa      	ldr	r2, [r7, #12]
90009af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90009afa:	f023 0303 	bic.w	r3, r3, #3
90009afe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
90009b00:	68fb      	ldr	r3, [r7, #12]
90009b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b06:	681a      	ldr	r2, [r3, #0]
90009b08:	78fb      	ldrb	r3, [r7, #3]
90009b0a:	f003 0303 	and.w	r3, r3, #3
90009b0e:	68f9      	ldr	r1, [r7, #12]
90009b10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
90009b14:	4313      	orrs	r3, r2
90009b16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
90009b18:	78fb      	ldrb	r3, [r7, #3]
90009b1a:	2b01      	cmp	r3, #1
90009b1c:	d107      	bne.n	90009b2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
90009b1e:	68fb      	ldr	r3, [r7, #12]
90009b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b24:	461a      	mov	r2, r3
90009b26:	f64b 3380 	movw	r3, #48000	; 0xbb80
90009b2a:	6053      	str	r3, [r2, #4]
90009b2c:	e00c      	b.n	90009b48 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
90009b2e:	78fb      	ldrb	r3, [r7, #3]
90009b30:	2b02      	cmp	r3, #2
90009b32:	d107      	bne.n	90009b44 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
90009b34:	68fb      	ldr	r3, [r7, #12]
90009b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b3a:	461a      	mov	r2, r3
90009b3c:	f241 7370 	movw	r3, #6000	; 0x1770
90009b40:	6053      	str	r3, [r2, #4]
90009b42:	e001      	b.n	90009b48 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
90009b44:	2301      	movs	r3, #1
90009b46:	e000      	b.n	90009b4a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
90009b48:	2300      	movs	r3, #0
}
90009b4a:	4618      	mov	r0, r3
90009b4c:	3714      	adds	r7, #20
90009b4e:	46bd      	mov	sp, r7
90009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b54:	4770      	bx	lr

90009b56 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
90009b56:	b480      	push	{r7}
90009b58:	b085      	sub	sp, #20
90009b5a:	af00      	add	r7, sp, #0
90009b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009b5e:	687b      	ldr	r3, [r7, #4]
90009b60:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
90009b62:	68fb      	ldr	r3, [r7, #12]
90009b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009b68:	695b      	ldr	r3, [r3, #20]
90009b6a:	b29b      	uxth	r3, r3
}
90009b6c:	4618      	mov	r0, r3
90009b6e:	3714      	adds	r7, #20
90009b70:	46bd      	mov	sp, r7
90009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
90009b76:	4770      	bx	lr

90009b78 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
90009b78:	b480      	push	{r7}
90009b7a:	b089      	sub	sp, #36	; 0x24
90009b7c:	af00      	add	r7, sp, #0
90009b7e:	6078      	str	r0, [r7, #4]
90009b80:	460b      	mov	r3, r1
90009b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009b84:	687b      	ldr	r3, [r7, #4]
90009b86:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
90009b88:	78fb      	ldrb	r3, [r7, #3]
90009b8a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
90009b8c:	2300      	movs	r3, #0
90009b8e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
90009b90:	69bb      	ldr	r3, [r7, #24]
90009b92:	015a      	lsls	r2, r3, #5
90009b94:	69fb      	ldr	r3, [r7, #28]
90009b96:	4413      	add	r3, r2
90009b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009b9c:	681b      	ldr	r3, [r3, #0]
90009b9e:	0c9b      	lsrs	r3, r3, #18
90009ba0:	f003 0303 	and.w	r3, r3, #3
90009ba4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
90009ba6:	69bb      	ldr	r3, [r7, #24]
90009ba8:	015a      	lsls	r2, r3, #5
90009baa:	69fb      	ldr	r3, [r7, #28]
90009bac:	4413      	add	r3, r2
90009bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009bb2:	681b      	ldr	r3, [r3, #0]
90009bb4:	0fdb      	lsrs	r3, r3, #31
90009bb6:	f003 0301 	and.w	r3, r3, #1
90009bba:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
90009bbc:	687b      	ldr	r3, [r7, #4]
90009bbe:	689b      	ldr	r3, [r3, #8]
90009bc0:	f003 0320 	and.w	r3, r3, #32
90009bc4:	2b20      	cmp	r3, #32
90009bc6:	d104      	bne.n	90009bd2 <USB_HC_Halt+0x5a>
90009bc8:	693b      	ldr	r3, [r7, #16]
90009bca:	2b00      	cmp	r3, #0
90009bcc:	d101      	bne.n	90009bd2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
90009bce:	2300      	movs	r3, #0
90009bd0:	e0c8      	b.n	90009d64 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
90009bd2:	697b      	ldr	r3, [r7, #20]
90009bd4:	2b00      	cmp	r3, #0
90009bd6:	d002      	beq.n	90009bde <USB_HC_Halt+0x66>
90009bd8:	697b      	ldr	r3, [r7, #20]
90009bda:	2b02      	cmp	r3, #2
90009bdc:	d163      	bne.n	90009ca6 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009bde:	69bb      	ldr	r3, [r7, #24]
90009be0:	015a      	lsls	r2, r3, #5
90009be2:	69fb      	ldr	r3, [r7, #28]
90009be4:	4413      	add	r3, r2
90009be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009bea:	681b      	ldr	r3, [r3, #0]
90009bec:	69ba      	ldr	r2, [r7, #24]
90009bee:	0151      	lsls	r1, r2, #5
90009bf0:	69fa      	ldr	r2, [r7, #28]
90009bf2:	440a      	add	r2, r1
90009bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009bfc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009bfe:	687b      	ldr	r3, [r7, #4]
90009c00:	689b      	ldr	r3, [r3, #8]
90009c02:	f003 0320 	and.w	r3, r3, #32
90009c06:	2b00      	cmp	r3, #0
90009c08:	f040 80ab 	bne.w	90009d62 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
90009c0c:	687b      	ldr	r3, [r7, #4]
90009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90009c14:	2b00      	cmp	r3, #0
90009c16:	d133      	bne.n	90009c80 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009c18:	69bb      	ldr	r3, [r7, #24]
90009c1a:	015a      	lsls	r2, r3, #5
90009c1c:	69fb      	ldr	r3, [r7, #28]
90009c1e:	4413      	add	r3, r2
90009c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c24:	681b      	ldr	r3, [r3, #0]
90009c26:	69ba      	ldr	r2, [r7, #24]
90009c28:	0151      	lsls	r1, r2, #5
90009c2a:	69fa      	ldr	r2, [r7, #28]
90009c2c:	440a      	add	r2, r1
90009c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009c36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009c38:	69bb      	ldr	r3, [r7, #24]
90009c3a:	015a      	lsls	r2, r3, #5
90009c3c:	69fb      	ldr	r3, [r7, #28]
90009c3e:	4413      	add	r3, r2
90009c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c44:	681b      	ldr	r3, [r3, #0]
90009c46:	69ba      	ldr	r2, [r7, #24]
90009c48:	0151      	lsls	r1, r2, #5
90009c4a:	69fa      	ldr	r2, [r7, #28]
90009c4c:	440a      	add	r2, r1
90009c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009c56:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
90009c58:	68fb      	ldr	r3, [r7, #12]
90009c5a:	3301      	adds	r3, #1
90009c5c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
90009c5e:	68fb      	ldr	r3, [r7, #12]
90009c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009c64:	d81d      	bhi.n	90009ca2 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009c66:	69bb      	ldr	r3, [r7, #24]
90009c68:	015a      	lsls	r2, r3, #5
90009c6a:	69fb      	ldr	r3, [r7, #28]
90009c6c:	4413      	add	r3, r2
90009c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c72:	681b      	ldr	r3, [r3, #0]
90009c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009c7c:	d0ec      	beq.n	90009c58 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009c7e:	e070      	b.n	90009d62 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009c80:	69bb      	ldr	r3, [r7, #24]
90009c82:	015a      	lsls	r2, r3, #5
90009c84:	69fb      	ldr	r3, [r7, #28]
90009c86:	4413      	add	r3, r2
90009c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009c8c:	681b      	ldr	r3, [r3, #0]
90009c8e:	69ba      	ldr	r2, [r7, #24]
90009c90:	0151      	lsls	r1, r2, #5
90009c92:	69fa      	ldr	r2, [r7, #28]
90009c94:	440a      	add	r2, r1
90009c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009c9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009ca0:	e05f      	b.n	90009d62 <USB_HC_Halt+0x1ea>
            break;
90009ca2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
90009ca4:	e05d      	b.n	90009d62 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
90009ca6:	69bb      	ldr	r3, [r7, #24]
90009ca8:	015a      	lsls	r2, r3, #5
90009caa:	69fb      	ldr	r3, [r7, #28]
90009cac:	4413      	add	r3, r2
90009cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009cb2:	681b      	ldr	r3, [r3, #0]
90009cb4:	69ba      	ldr	r2, [r7, #24]
90009cb6:	0151      	lsls	r1, r2, #5
90009cb8:	69fa      	ldr	r2, [r7, #28]
90009cba:	440a      	add	r2, r1
90009cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009cc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
90009cc6:	69fb      	ldr	r3, [r7, #28]
90009cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009ccc:	691b      	ldr	r3, [r3, #16]
90009cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90009cd2:	2b00      	cmp	r3, #0
90009cd4:	d133      	bne.n	90009d3e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
90009cd6:	69bb      	ldr	r3, [r7, #24]
90009cd8:	015a      	lsls	r2, r3, #5
90009cda:	69fb      	ldr	r3, [r7, #28]
90009cdc:	4413      	add	r3, r2
90009cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009ce2:	681b      	ldr	r3, [r3, #0]
90009ce4:	69ba      	ldr	r2, [r7, #24]
90009ce6:	0151      	lsls	r1, r2, #5
90009ce8:	69fa      	ldr	r2, [r7, #28]
90009cea:	440a      	add	r2, r1
90009cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009cf4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009cf6:	69bb      	ldr	r3, [r7, #24]
90009cf8:	015a      	lsls	r2, r3, #5
90009cfa:	69fb      	ldr	r3, [r7, #28]
90009cfc:	4413      	add	r3, r2
90009cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d02:	681b      	ldr	r3, [r3, #0]
90009d04:	69ba      	ldr	r2, [r7, #24]
90009d06:	0151      	lsls	r1, r2, #5
90009d08:	69fa      	ldr	r2, [r7, #28]
90009d0a:	440a      	add	r2, r1
90009d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009d14:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
90009d16:	68fb      	ldr	r3, [r7, #12]
90009d18:	3301      	adds	r3, #1
90009d1a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
90009d1c:	68fb      	ldr	r3, [r7, #12]
90009d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009d22:	d81d      	bhi.n	90009d60 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009d24:	69bb      	ldr	r3, [r7, #24]
90009d26:	015a      	lsls	r2, r3, #5
90009d28:	69fb      	ldr	r3, [r7, #28]
90009d2a:	4413      	add	r3, r2
90009d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d30:	681b      	ldr	r3, [r3, #0]
90009d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009d3a:	d0ec      	beq.n	90009d16 <USB_HC_Halt+0x19e>
90009d3c:	e011      	b.n	90009d62 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
90009d3e:	69bb      	ldr	r3, [r7, #24]
90009d40:	015a      	lsls	r2, r3, #5
90009d42:	69fb      	ldr	r3, [r7, #28]
90009d44:	4413      	add	r3, r2
90009d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009d4a:	681b      	ldr	r3, [r3, #0]
90009d4c:	69ba      	ldr	r2, [r7, #24]
90009d4e:	0151      	lsls	r1, r2, #5
90009d50:	69fa      	ldr	r2, [r7, #28]
90009d52:	440a      	add	r2, r1
90009d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90009d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009d5c:	6013      	str	r3, [r2, #0]
90009d5e:	e000      	b.n	90009d62 <USB_HC_Halt+0x1ea>
          break;
90009d60:	bf00      	nop
    }
  }

  return HAL_OK;
90009d62:	2300      	movs	r3, #0
}
90009d64:	4618      	mov	r0, r3
90009d66:	3724      	adds	r7, #36	; 0x24
90009d68:	46bd      	mov	sp, r7
90009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009d6e:	4770      	bx	lr

90009d70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
90009d70:	b580      	push	{r7, lr}
90009d72:	b088      	sub	sp, #32
90009d74:	af00      	add	r7, sp, #0
90009d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
90009d78:	2300      	movs	r3, #0
90009d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
90009d7c:	687b      	ldr	r3, [r7, #4]
90009d7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
90009d80:	2300      	movs	r3, #0
90009d82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
90009d84:	6878      	ldr	r0, [r7, #4]
90009d86:	f7ff fd9a 	bl	900098be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
90009d8a:	2110      	movs	r1, #16
90009d8c:	6878      	ldr	r0, [r7, #4]
90009d8e:	f7ff fda7 	bl	900098e0 <USB_FlushTxFifo>
90009d92:	4603      	mov	r3, r0
90009d94:	2b00      	cmp	r3, #0
90009d96:	d001      	beq.n	90009d9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
90009d98:	2301      	movs	r3, #1
90009d9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
90009d9c:	6878      	ldr	r0, [r7, #4]
90009d9e:	f7ff fdd3 	bl	90009948 <USB_FlushRxFifo>
90009da2:	4603      	mov	r3, r0
90009da4:	2b00      	cmp	r3, #0
90009da6:	d001      	beq.n	90009dac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
90009da8:	2301      	movs	r3, #1
90009daa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
90009dac:	2300      	movs	r3, #0
90009dae:	61bb      	str	r3, [r7, #24]
90009db0:	e01f      	b.n	90009df2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
90009db2:	69bb      	ldr	r3, [r7, #24]
90009db4:	015a      	lsls	r2, r3, #5
90009db6:	697b      	ldr	r3, [r7, #20]
90009db8:	4413      	add	r3, r2
90009dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009dbe:	681b      	ldr	r3, [r3, #0]
90009dc0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
90009dc2:	693b      	ldr	r3, [r7, #16]
90009dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009dc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
90009dca:	693b      	ldr	r3, [r7, #16]
90009dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90009dd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
90009dd2:	693b      	ldr	r3, [r7, #16]
90009dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90009dd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
90009dda:	69bb      	ldr	r3, [r7, #24]
90009ddc:	015a      	lsls	r2, r3, #5
90009dde:	697b      	ldr	r3, [r7, #20]
90009de0:	4413      	add	r3, r2
90009de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009de6:	461a      	mov	r2, r3
90009de8:	693b      	ldr	r3, [r7, #16]
90009dea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
90009dec:	69bb      	ldr	r3, [r7, #24]
90009dee:	3301      	adds	r3, #1
90009df0:	61bb      	str	r3, [r7, #24]
90009df2:	69bb      	ldr	r3, [r7, #24]
90009df4:	2b0f      	cmp	r3, #15
90009df6:	d9dc      	bls.n	90009db2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
90009df8:	2300      	movs	r3, #0
90009dfa:	61bb      	str	r3, [r7, #24]
90009dfc:	e034      	b.n	90009e68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
90009dfe:	69bb      	ldr	r3, [r7, #24]
90009e00:	015a      	lsls	r2, r3, #5
90009e02:	697b      	ldr	r3, [r7, #20]
90009e04:	4413      	add	r3, r2
90009e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e0a:	681b      	ldr	r3, [r3, #0]
90009e0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
90009e0e:	693b      	ldr	r3, [r7, #16]
90009e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90009e14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
90009e16:	693b      	ldr	r3, [r7, #16]
90009e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
90009e1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
90009e1e:	693b      	ldr	r3, [r7, #16]
90009e20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
90009e24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
90009e26:	69bb      	ldr	r3, [r7, #24]
90009e28:	015a      	lsls	r2, r3, #5
90009e2a:	697b      	ldr	r3, [r7, #20]
90009e2c:	4413      	add	r3, r2
90009e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e32:	461a      	mov	r2, r3
90009e34:	693b      	ldr	r3, [r7, #16]
90009e36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
90009e38:	68fb      	ldr	r3, [r7, #12]
90009e3a:	3301      	adds	r3, #1
90009e3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
90009e3e:	68fb      	ldr	r3, [r7, #12]
90009e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90009e44:	d80c      	bhi.n	90009e60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
90009e46:	69bb      	ldr	r3, [r7, #24]
90009e48:	015a      	lsls	r2, r3, #5
90009e4a:	697b      	ldr	r3, [r7, #20]
90009e4c:	4413      	add	r3, r2
90009e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
90009e52:	681b      	ldr	r3, [r3, #0]
90009e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90009e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90009e5c:	d0ec      	beq.n	90009e38 <USB_StopHost+0xc8>
90009e5e:	e000      	b.n	90009e62 <USB_StopHost+0xf2>
        break;
90009e60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
90009e62:	69bb      	ldr	r3, [r7, #24]
90009e64:	3301      	adds	r3, #1
90009e66:	61bb      	str	r3, [r7, #24]
90009e68:	69bb      	ldr	r3, [r7, #24]
90009e6a:	2b0f      	cmp	r3, #15
90009e6c:	d9c7      	bls.n	90009dfe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
90009e6e:	697b      	ldr	r3, [r7, #20]
90009e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90009e74:	461a      	mov	r2, r3
90009e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90009e7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
90009e7c:	687b      	ldr	r3, [r7, #4]
90009e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90009e82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
90009e84:	6878      	ldr	r0, [r7, #4]
90009e86:	f7ff fd09 	bl	9000989c <USB_EnableGlobalInt>

  return ret;
90009e8a:	7ffb      	ldrb	r3, [r7, #31]
}
90009e8c:	4618      	mov	r0, r3
90009e8e:	3720      	adds	r7, #32
90009e90:	46bd      	mov	sp, r7
90009e92:	bd80      	pop	{r7, pc}

90009e94 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
90009e94:	b580      	push	{r7, lr}
90009e96:	b082      	sub	sp, #8
90009e98:	af00      	add	r7, sp, #0
90009e9a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
90009e9c:	687b      	ldr	r3, [r7, #4]
90009e9e:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
90009ea2:	1c5a      	adds	r2, r3, #1
90009ea4:	687b      	ldr	r3, [r7, #4]
90009ea6:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  USBH_HandleSof(phost);
90009eaa:	6878      	ldr	r0, [r7, #4]
90009eac:	f000 f804 	bl	90009eb8 <USBH_HandleSof>
}
90009eb0:	bf00      	nop
90009eb2:	3708      	adds	r7, #8
90009eb4:	46bd      	mov	sp, r7
90009eb6:	bd80      	pop	{r7, pc}

90009eb8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
90009eb8:	b580      	push	{r7, lr}
90009eba:	b082      	sub	sp, #8
90009ebc:	af00      	add	r7, sp, #0
90009ebe:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
90009ec0:	687b      	ldr	r3, [r7, #4]
90009ec2:	781b      	ldrb	r3, [r3, #0]
90009ec4:	b2db      	uxtb	r3, r3
90009ec6:	2b0b      	cmp	r3, #11
90009ec8:	d10a      	bne.n	90009ee0 <USBH_HandleSof+0x28>
90009eca:	687b      	ldr	r3, [r7, #4]
90009ecc:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
90009ed0:	2b00      	cmp	r3, #0
90009ed2:	d005      	beq.n	90009ee0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
90009ed4:	687b      	ldr	r3, [r7, #4]
90009ed6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
90009eda:	699b      	ldr	r3, [r3, #24]
90009edc:	6878      	ldr	r0, [r7, #4]
90009ede:	4798      	blx	r3
  }
}
90009ee0:	bf00      	nop
90009ee2:	3708      	adds	r7, #8
90009ee4:	46bd      	mov	sp, r7
90009ee6:	bd80      	pop	{r7, pc}

90009ee8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
90009ee8:	b480      	push	{r7}
90009eea:	b083      	sub	sp, #12
90009eec:	af00      	add	r7, sp, #0
90009eee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
90009ef0:	687b      	ldr	r3, [r7, #4]
90009ef2:	2201      	movs	r2, #1
90009ef4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
90009ef8:	bf00      	nop
}
90009efa:	370c      	adds	r7, #12
90009efc:	46bd      	mov	sp, r7
90009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f02:	4770      	bx	lr

90009f04 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
90009f04:	b480      	push	{r7}
90009f06:	b083      	sub	sp, #12
90009f08:	af00      	add	r7, sp, #0
90009f0a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
90009f0c:	687b      	ldr	r3, [r7, #4]
90009f0e:	2200      	movs	r2, #0
90009f10:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
90009f14:	bf00      	nop
}
90009f16:	370c      	adds	r7, #12
90009f18:	46bd      	mov	sp, r7
90009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f1e:	4770      	bx	lr

90009f20 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
90009f20:	b480      	push	{r7}
90009f22:	b083      	sub	sp, #12
90009f24:	af00      	add	r7, sp, #0
90009f26:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
90009f28:	687b      	ldr	r3, [r7, #4]
90009f2a:	2201      	movs	r2, #1
90009f2c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
90009f30:	687b      	ldr	r3, [r7, #4]
90009f32:	2200      	movs	r2, #0
90009f34:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
90009f38:	687b      	ldr	r3, [r7, #4]
90009f3a:	2200      	movs	r2, #0
90009f3c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
90009f40:	2300      	movs	r3, #0
}
90009f42:	4618      	mov	r0, r3
90009f44:	370c      	adds	r7, #12
90009f46:	46bd      	mov	sp, r7
90009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
90009f4c:	4770      	bx	lr

90009f4e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
90009f4e:	b580      	push	{r7, lr}
90009f50:	b082      	sub	sp, #8
90009f52:	af00      	add	r7, sp, #0
90009f54:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
90009f56:	687b      	ldr	r3, [r7, #4]
90009f58:	2201      	movs	r2, #1
90009f5a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
90009f5e:	687b      	ldr	r3, [r7, #4]
90009f60:	2200      	movs	r2, #0
90009f62:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
90009f66:	687b      	ldr	r3, [r7, #4]
90009f68:	2200      	movs	r2, #0
90009f6a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
90009f6e:	6878      	ldr	r0, [r7, #4]
90009f70:	f7f6 fd8c 	bl	90000a8c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
90009f74:	687b      	ldr	r3, [r7, #4]
90009f76:	791b      	ldrb	r3, [r3, #4]
90009f78:	4619      	mov	r1, r3
90009f7a:	6878      	ldr	r0, [r7, #4]
90009f7c:	f000 f80b 	bl	90009f96 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
90009f80:	687b      	ldr	r3, [r7, #4]
90009f82:	795b      	ldrb	r3, [r3, #5]
90009f84:	4619      	mov	r1, r3
90009f86:	6878      	ldr	r0, [r7, #4]
90009f88:	f000 f805 	bl	90009f96 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
90009f8c:	2300      	movs	r3, #0
}
90009f8e:	4618      	mov	r0, r3
90009f90:	3708      	adds	r7, #8
90009f92:	46bd      	mov	sp, r7
90009f94:	bd80      	pop	{r7, pc}

90009f96 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
90009f96:	b480      	push	{r7}
90009f98:	b083      	sub	sp, #12
90009f9a:	af00      	add	r7, sp, #0
90009f9c:	6078      	str	r0, [r7, #4]
90009f9e:	460b      	mov	r3, r1
90009fa0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
90009fa2:	78fb      	ldrb	r3, [r7, #3]
90009fa4:	2b0f      	cmp	r3, #15
90009fa6:	d80f      	bhi.n	90009fc8 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
90009fa8:	78fb      	ldrb	r3, [r7, #3]
90009faa:	687a      	ldr	r2, [r7, #4]
90009fac:	f503 7390 	add.w	r3, r3, #288	; 0x120
90009fb0:	009b      	lsls	r3, r3, #2
90009fb2:	4413      	add	r3, r2
90009fb4:	685a      	ldr	r2, [r3, #4]
90009fb6:	78fb      	ldrb	r3, [r7, #3]
90009fb8:	f3c2 020e 	ubfx	r2, r2, #0, #15
90009fbc:	6879      	ldr	r1, [r7, #4]
90009fbe:	f503 7390 	add.w	r3, r3, #288	; 0x120
90009fc2:	009b      	lsls	r3, r3, #2
90009fc4:	440b      	add	r3, r1
90009fc6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
90009fc8:	2300      	movs	r3, #0
}
90009fca:	4618      	mov	r0, r3
90009fcc:	370c      	adds	r7, #12
90009fce:	46bd      	mov	sp, r7
90009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
90009fd4:	4770      	bx	lr
	...

90009fd8 <sweeperMain>:
int8_t Game_State = 1;

static TS_State_t TS_State;

void sweeperMain()
{
90009fd8:	b580      	push	{r7, lr}
90009fda:	b088      	sub	sp, #32
90009fdc:	af00      	add	r7, sp, #0

  /*##-6- Draw the menu ######################################################*/
  Draw_Menu();
90009fde:	f000 f887 	bl	9000a0f0 <Draw_Menu>

  // define time for random
  time_t t;
  srand((unsigned)time(&t));
90009fe2:	463b      	mov	r3, r7
90009fe4:	4618      	mov	r0, r3
90009fe6:	f001 feb7 	bl	9000bd58 <time>
90009fea:	4603      	mov	r3, r0
90009fec:	4618      	mov	r0, r3
90009fee:	f001 fe17 	bl	9000bc20 <srand>

  for (int i = 0; i < 23; i++)
90009ff2:	2300      	movs	r3, #0
90009ff4:	61fb      	str	r3, [r7, #28]
90009ff6:	e017      	b.n	9000a028 <sweeperMain+0x50>
  {
    for (int j = 0; j < 11; j++)
90009ff8:	2300      	movs	r3, #0
90009ffa:	61bb      	str	r3, [r7, #24]
90009ffc:	e00e      	b.n	9000a01c <sweeperMain+0x44>
    {
      tab[i][j] = 0;
90009ffe:	4937      	ldr	r1, [pc, #220]	; (9000a0dc <sweeperMain+0x104>)
9000a000:	69fa      	ldr	r2, [r7, #28]
9000a002:	4613      	mov	r3, r2
9000a004:	009b      	lsls	r3, r3, #2
9000a006:	4413      	add	r3, r2
9000a008:	005b      	lsls	r3, r3, #1
9000a00a:	4413      	add	r3, r2
9000a00c:	18ca      	adds	r2, r1, r3
9000a00e:	69bb      	ldr	r3, [r7, #24]
9000a010:	4413      	add	r3, r2
9000a012:	2200      	movs	r2, #0
9000a014:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 11; j++)
9000a016:	69bb      	ldr	r3, [r7, #24]
9000a018:	3301      	adds	r3, #1
9000a01a:	61bb      	str	r3, [r7, #24]
9000a01c:	69bb      	ldr	r3, [r7, #24]
9000a01e:	2b0a      	cmp	r3, #10
9000a020:	dded      	ble.n	90009ffe <sweeperMain+0x26>
  for (int i = 0; i < 23; i++)
9000a022:	69fb      	ldr	r3, [r7, #28]
9000a024:	3301      	adds	r3, #1
9000a026:	61fb      	str	r3, [r7, #28]
9000a028:	69fb      	ldr	r3, [r7, #28]
9000a02a:	2b16      	cmp	r3, #22
9000a02c:	dde4      	ble.n	90009ff8 <sweeperMain+0x20>
    }
  }

  int num_mine = Mine_Num;
9000a02e:	4b2c      	ldr	r3, [pc, #176]	; (9000a0e0 <sweeperMain+0x108>)
9000a030:	881b      	ldrh	r3, [r3, #0]
9000a032:	617b      	str	r3, [r7, #20]
  while (num_mine != 0)
9000a034:	e03d      	b.n	9000a0b2 <sweeperMain+0xda>
  {
    int j = rand() % 11;
9000a036:	f001 fe21 	bl	9000bc7c <rand>
9000a03a:	4602      	mov	r2, r0
9000a03c:	4b29      	ldr	r3, [pc, #164]	; (9000a0e4 <sweeperMain+0x10c>)
9000a03e:	fb83 1302 	smull	r1, r3, r3, r2
9000a042:	1059      	asrs	r1, r3, #1
9000a044:	17d3      	asrs	r3, r2, #31
9000a046:	1ac9      	subs	r1, r1, r3
9000a048:	460b      	mov	r3, r1
9000a04a:	009b      	lsls	r3, r3, #2
9000a04c:	440b      	add	r3, r1
9000a04e:	005b      	lsls	r3, r3, #1
9000a050:	440b      	add	r3, r1
9000a052:	1ad3      	subs	r3, r2, r3
9000a054:	613b      	str	r3, [r7, #16]
    int i = rand() % 23;
9000a056:	f001 fe11 	bl	9000bc7c <rand>
9000a05a:	4602      	mov	r2, r0
9000a05c:	4b22      	ldr	r3, [pc, #136]	; (9000a0e8 <sweeperMain+0x110>)
9000a05e:	fb83 1302 	smull	r1, r3, r3, r2
9000a062:	4413      	add	r3, r2
9000a064:	1119      	asrs	r1, r3, #4
9000a066:	17d3      	asrs	r3, r2, #31
9000a068:	1ac9      	subs	r1, r1, r3
9000a06a:	460b      	mov	r3, r1
9000a06c:	005b      	lsls	r3, r3, #1
9000a06e:	440b      	add	r3, r1
9000a070:	00db      	lsls	r3, r3, #3
9000a072:	1a5b      	subs	r3, r3, r1
9000a074:	1ad3      	subs	r3, r2, r3
9000a076:	60fb      	str	r3, [r7, #12]
    if (tab[i][j] == 0)
9000a078:	4918      	ldr	r1, [pc, #96]	; (9000a0dc <sweeperMain+0x104>)
9000a07a:	68fa      	ldr	r2, [r7, #12]
9000a07c:	4613      	mov	r3, r2
9000a07e:	009b      	lsls	r3, r3, #2
9000a080:	4413      	add	r3, r2
9000a082:	005b      	lsls	r3, r3, #1
9000a084:	4413      	add	r3, r2
9000a086:	18ca      	adds	r2, r1, r3
9000a088:	693b      	ldr	r3, [r7, #16]
9000a08a:	4413      	add	r3, r2
9000a08c:	f993 3000 	ldrsb.w	r3, [r3]
9000a090:	2b00      	cmp	r3, #0
9000a092:	d10e      	bne.n	9000a0b2 <sweeperMain+0xda>
    {
      num_mine--;
9000a094:	697b      	ldr	r3, [r7, #20]
9000a096:	3b01      	subs	r3, #1
9000a098:	617b      	str	r3, [r7, #20]
      tab[i][j] = -1;
9000a09a:	4910      	ldr	r1, [pc, #64]	; (9000a0dc <sweeperMain+0x104>)
9000a09c:	68fa      	ldr	r2, [r7, #12]
9000a09e:	4613      	mov	r3, r2
9000a0a0:	009b      	lsls	r3, r3, #2
9000a0a2:	4413      	add	r3, r2
9000a0a4:	005b      	lsls	r3, r3, #1
9000a0a6:	4413      	add	r3, r2
9000a0a8:	18ca      	adds	r2, r1, r3
9000a0aa:	693b      	ldr	r3, [r7, #16]
9000a0ac:	4413      	add	r3, r2
9000a0ae:	22ff      	movs	r2, #255	; 0xff
9000a0b0:	701a      	strb	r2, [r3, #0]
  while (num_mine != 0)
9000a0b2:	697b      	ldr	r3, [r7, #20]
9000a0b4:	2b00      	cmp	r3, #0
9000a0b6:	d1be      	bne.n	9000a036 <sweeperMain+0x5e>
    }
  }

  Set_Numbers();
9000a0b8:	f000 f964 	bl	9000a384 <Set_Numbers>

  while (1)
  {
    /*##-7- Configure the touch screen and Get the position ##################*/
    GetPosition();
9000a0bc:	f000 fc48 	bl	9000a950 <GetPosition>
    if (Game_State == 0)
9000a0c0:	4b0a      	ldr	r3, [pc, #40]	; (9000a0ec <sweeperMain+0x114>)
9000a0c2:	f993 3000 	ldrsb.w	r3, [r3]
9000a0c6:	2b00      	cmp	r3, #0
9000a0c8:	d1f8      	bne.n	9000a0bc <sweeperMain+0xe4>
    {
      Game_State=1;
9000a0ca:	4b08      	ldr	r3, [pc, #32]	; (9000a0ec <sweeperMain+0x114>)
9000a0cc:	2201      	movs	r2, #1
9000a0ce:	701a      	strb	r2, [r3, #0]
      break;
9000a0d0:	bf00      	nop

    }
  }
}
9000a0d2:	bf00      	nop
9000a0d4:	3720      	adds	r7, #32
9000a0d6:	46bd      	mov	sp, r7
9000a0d8:	bd80      	pop	{r7, pc}
9000a0da:	bf00      	nop
9000a0dc:	200011bc 	.word	0x200011bc
9000a0e0:	20000046 	.word	0x20000046
9000a0e4:	2e8ba2e9 	.word	0x2e8ba2e9
9000a0e8:	b21642c9 	.word	0xb21642c9
9000a0ec:	20000048 	.word	0x20000048

9000a0f0 <Draw_Menu>:
 * @brief  Draws the menu.
 * @param  None
 * @retval None
 */
static void Draw_Menu(void)
{
9000a0f0:	b580      	push	{r7, lr}
9000a0f2:	b084      	sub	sp, #16
9000a0f4:	af02      	add	r7, sp, #8
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
9000a0f6:	2000      	movs	r0, #0
9000a0f8:	f001 f8aa 	bl	9000b250 <UTIL_LCD_SetLayer>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a0fc:	489a      	ldr	r0, [pc, #616]	; (9000a368 <Draw_Menu+0x278>)
9000a0fe:	f001 f999 	bl	9000b434 <UTIL_LCD_Clear>

  UTIL_LCD_DrawRect(0, 0, x_size - 2, 2, UTIL_LCD_COLOR_WHITE);
9000a102:	4b9a      	ldr	r3, [pc, #616]	; (9000a36c <Draw_Menu+0x27c>)
9000a104:	681b      	ldr	r3, [r3, #0]
9000a106:	1e9a      	subs	r2, r3, #2
9000a108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a10c:	9300      	str	r3, [sp, #0]
9000a10e:	2302      	movs	r3, #2
9000a110:	2100      	movs	r1, #0
9000a112:	2000      	movs	r0, #0
9000a114:	f001 fa9e 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(0, 0, 2, y_size, UTIL_LCD_COLOR_WHITE);
9000a118:	4b95      	ldr	r3, [pc, #596]	; (9000a370 <Draw_Menu+0x280>)
9000a11a:	681b      	ldr	r3, [r3, #0]
9000a11c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000a120:	9200      	str	r2, [sp, #0]
9000a122:	2202      	movs	r2, #2
9000a124:	2100      	movs	r1, #0
9000a126:	2000      	movs	r0, #0
9000a128:	f001 fa94 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 2, 1, 2, y_size, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a12c:	4b8f      	ldr	r3, [pc, #572]	; (9000a36c <Draw_Menu+0x27c>)
9000a12e:	681b      	ldr	r3, [r3, #0]
9000a130:	1e98      	subs	r0, r3, #2
9000a132:	4b8f      	ldr	r3, [pc, #572]	; (9000a370 <Draw_Menu+0x280>)
9000a134:	681b      	ldr	r3, [r3, #0]
9000a136:	4a8f      	ldr	r2, [pc, #572]	; (9000a374 <Draw_Menu+0x284>)
9000a138:	9200      	str	r2, [sp, #0]
9000a13a:	2202      	movs	r2, #2
9000a13c:	2101      	movs	r1, #1
9000a13e:	f001 fa89 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(1, y_size - 2, x_size, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a142:	4b8b      	ldr	r3, [pc, #556]	; (9000a370 <Draw_Menu+0x280>)
9000a144:	681b      	ldr	r3, [r3, #0]
9000a146:	1e99      	subs	r1, r3, #2
9000a148:	4b88      	ldr	r3, [pc, #544]	; (9000a36c <Draw_Menu+0x27c>)
9000a14a:	681a      	ldr	r2, [r3, #0]
9000a14c:	4b89      	ldr	r3, [pc, #548]	; (9000a374 <Draw_Menu+0x284>)
9000a14e:	9300      	str	r3, [sp, #0]
9000a150:	2302      	movs	r3, #2
9000a152:	2001      	movs	r0, #1
9000a154:	f001 fa7e 	bl	9000b654 <UTIL_LCD_DrawRect>

  UTIL_LCD_DrawRect(8, 6, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a158:	4b84      	ldr	r3, [pc, #528]	; (9000a36c <Draw_Menu+0x27c>)
9000a15a:	681b      	ldr	r3, [r3, #0]
9000a15c:	f1a3 0210 	sub.w	r2, r3, #16
9000a160:	4b84      	ldr	r3, [pc, #528]	; (9000a374 <Draw_Menu+0x284>)
9000a162:	9300      	str	r3, [sp, #0]
9000a164:	2302      	movs	r3, #2
9000a166:	2106      	movs	r1, #6
9000a168:	2008      	movs	r0, #8
9000a16a:	f001 fa73 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 6, 2, 30, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a16e:	4b81      	ldr	r3, [pc, #516]	; (9000a374 <Draw_Menu+0x284>)
9000a170:	9300      	str	r3, [sp, #0]
9000a172:	231e      	movs	r3, #30
9000a174:	2202      	movs	r2, #2
9000a176:	2106      	movs	r1, #6
9000a178:	2008      	movs	r0, #8
9000a17a:	f001 fa6b 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 6, 2, 30, UTIL_LCD_COLOR_WHITE);
9000a17e:	4b7b      	ldr	r3, [pc, #492]	; (9000a36c <Draw_Menu+0x27c>)
9000a180:	681b      	ldr	r3, [r3, #0]
9000a182:	f1a3 000a 	sub.w	r0, r3, #10
9000a186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a18a:	9300      	str	r3, [sp, #0]
9000a18c:	231e      	movs	r3, #30
9000a18e:	2202      	movs	r2, #2
9000a190:	2106      	movs	r1, #6
9000a192:	f001 fa5f 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 35, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
9000a196:	4b75      	ldr	r3, [pc, #468]	; (9000a36c <Draw_Menu+0x27c>)
9000a198:	681b      	ldr	r3, [r3, #0]
9000a19a:	f1a3 0210 	sub.w	r2, r3, #16
9000a19e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a1a2:	9300      	str	r3, [sp, #0]
9000a1a4:	2302      	movs	r3, #2
9000a1a6:	2123      	movs	r1, #35	; 0x23
9000a1a8:	2008      	movs	r0, #8
9000a1aa:	f001 fa53 	bl	9000b654 <UTIL_LCD_DrawRect>

  UTIL_LCD_DrawRect(8, 41, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a1ae:	4b6f      	ldr	r3, [pc, #444]	; (9000a36c <Draw_Menu+0x27c>)
9000a1b0:	681b      	ldr	r3, [r3, #0]
9000a1b2:	f1a3 0210 	sub.w	r2, r3, #16
9000a1b6:	4b6f      	ldr	r3, [pc, #444]	; (9000a374 <Draw_Menu+0x284>)
9000a1b8:	9300      	str	r3, [sp, #0]
9000a1ba:	2302      	movs	r3, #2
9000a1bc:	2129      	movs	r1, #41	; 0x29
9000a1be:	2008      	movs	r0, #8
9000a1c0:	f001 fa48 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 41, 2, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a1c4:	4b6a      	ldr	r3, [pc, #424]	; (9000a370 <Draw_Menu+0x280>)
9000a1c6:	681b      	ldr	r3, [r3, #0]
9000a1c8:	3b32      	subs	r3, #50	; 0x32
9000a1ca:	4a6a      	ldr	r2, [pc, #424]	; (9000a374 <Draw_Menu+0x284>)
9000a1cc:	9200      	str	r2, [sp, #0]
9000a1ce:	2202      	movs	r2, #2
9000a1d0:	2129      	movs	r1, #41	; 0x29
9000a1d2:	2008      	movs	r0, #8
9000a1d4:	f001 fa3e 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 41, 2, y_size - 50, UTIL_LCD_COLOR_WHITE);
9000a1d8:	4b64      	ldr	r3, [pc, #400]	; (9000a36c <Draw_Menu+0x27c>)
9000a1da:	681b      	ldr	r3, [r3, #0]
9000a1dc:	f1a3 000a 	sub.w	r0, r3, #10
9000a1e0:	4b63      	ldr	r3, [pc, #396]	; (9000a370 <Draw_Menu+0x280>)
9000a1e2:	681b      	ldr	r3, [r3, #0]
9000a1e4:	3b32      	subs	r3, #50	; 0x32
9000a1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000a1ea:	9200      	str	r2, [sp, #0]
9000a1ec:	2202      	movs	r2, #2
9000a1ee:	2129      	movs	r1, #41	; 0x29
9000a1f0:	f001 fa30 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, y_size - 9, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
9000a1f4:	4b5e      	ldr	r3, [pc, #376]	; (9000a370 <Draw_Menu+0x280>)
9000a1f6:	681b      	ldr	r3, [r3, #0]
9000a1f8:	f1a3 0109 	sub.w	r1, r3, #9
9000a1fc:	4b5b      	ldr	r3, [pc, #364]	; (9000a36c <Draw_Menu+0x27c>)
9000a1fe:	681b      	ldr	r3, [r3, #0]
9000a200:	f1a3 0210 	sub.w	r2, r3, #16
9000a204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a208:	9300      	str	r3, [sp, #0]
9000a20a:	2302      	movs	r3, #2
9000a20c:	2008      	movs	r0, #8
9000a20e:	f001 fa21 	bl	9000b654 <UTIL_LCD_DrawRect>

  UTIL_LCD_DrawRect(118, 11, 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a212:	4b58      	ldr	r3, [pc, #352]	; (9000a374 <Draw_Menu+0x284>)
9000a214:	9300      	str	r3, [sp, #0]
9000a216:	2312      	movs	r3, #18
9000a218:	2202      	movs	r2, #2
9000a21a:	210b      	movs	r1, #11
9000a21c:	2076      	movs	r0, #118	; 0x76
9000a21e:	f001 fa19 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 29, 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a222:	4b54      	ldr	r3, [pc, #336]	; (9000a374 <Draw_Menu+0x284>)
9000a224:	9300      	str	r3, [sp, #0]
9000a226:	2302      	movs	r3, #2
9000a228:	2214      	movs	r2, #20
9000a22a:	211d      	movs	r1, #29
9000a22c:	2064      	movs	r0, #100	; 0x64
9000a22e:	f001 fa11 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 11, 20, 2, UTIL_LCD_COLOR_WHITE);
9000a232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a236:	9300      	str	r3, [sp, #0]
9000a238:	2302      	movs	r3, #2
9000a23a:	2214      	movs	r2, #20
9000a23c:	210b      	movs	r1, #11
9000a23e:	2064      	movs	r0, #100	; 0x64
9000a240:	f001 fa08 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 11, 2, 20, UTIL_LCD_COLOR_WHITE);
9000a244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a248:	9300      	str	r3, [sp, #0]
9000a24a:	2314      	movs	r3, #20
9000a24c:	2202      	movs	r2, #2
9000a24e:	210b      	movs	r1, #11
9000a250:	2064      	movs	r0, #100	; 0x64
9000a252:	f001 f9ff 	bl	9000b654 <UTIL_LCD_DrawRect>

  // stevilo kvadratkov 23*11

  int16_t x_move = 0, y_move = 0;
9000a256:	2300      	movs	r3, #0
9000a258:	80fb      	strh	r3, [r7, #6]
9000a25a:	2300      	movs	r3, #0
9000a25c:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
9000a25e:	e06b      	b.n	9000a338 <Draw_Menu+0x248>
  {
    while (x_move < 23)
    {
      UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a260:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a264:	4613      	mov	r3, r2
9000a266:	009b      	lsls	r3, r3, #2
9000a268:	4413      	add	r3, r2
9000a26a:	009b      	lsls	r3, r3, #2
9000a26c:	331c      	adds	r3, #28
9000a26e:	4618      	mov	r0, r3
9000a270:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a274:	4613      	mov	r3, r2
9000a276:	009b      	lsls	r3, r3, #2
9000a278:	4413      	add	r3, r2
9000a27a:	009b      	lsls	r3, r3, #2
9000a27c:	332b      	adds	r3, #43	; 0x2b
9000a27e:	4619      	mov	r1, r3
9000a280:	4b3c      	ldr	r3, [pc, #240]	; (9000a374 <Draw_Menu+0x284>)
9000a282:	9300      	str	r3, [sp, #0]
9000a284:	2312      	movs	r3, #18
9000a286:	2202      	movs	r2, #2
9000a288:	f001 f9e4 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a28c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a290:	4613      	mov	r3, r2
9000a292:	009b      	lsls	r3, r3, #2
9000a294:	4413      	add	r3, r2
9000a296:	009b      	lsls	r3, r3, #2
9000a298:	330a      	adds	r3, #10
9000a29a:	4618      	mov	r0, r3
9000a29c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a2a0:	4613      	mov	r3, r2
9000a2a2:	009b      	lsls	r3, r3, #2
9000a2a4:	4413      	add	r3, r2
9000a2a6:	009b      	lsls	r3, r3, #2
9000a2a8:	333d      	adds	r3, #61	; 0x3d
9000a2aa:	4619      	mov	r1, r3
9000a2ac:	4b31      	ldr	r3, [pc, #196]	; (9000a374 <Draw_Menu+0x284>)
9000a2ae:	9300      	str	r3, [sp, #0]
9000a2b0:	2302      	movs	r3, #2
9000a2b2:	2214      	movs	r2, #20
9000a2b4:	f001 f9ce 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_WHITE);
9000a2b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a2bc:	4613      	mov	r3, r2
9000a2be:	009b      	lsls	r3, r3, #2
9000a2c0:	4413      	add	r3, r2
9000a2c2:	009b      	lsls	r3, r3, #2
9000a2c4:	330a      	adds	r3, #10
9000a2c6:	4618      	mov	r0, r3
9000a2c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a2cc:	4613      	mov	r3, r2
9000a2ce:	009b      	lsls	r3, r3, #2
9000a2d0:	4413      	add	r3, r2
9000a2d2:	009b      	lsls	r3, r3, #2
9000a2d4:	332b      	adds	r3, #43	; 0x2b
9000a2d6:	4619      	mov	r1, r3
9000a2d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a2dc:	9300      	str	r3, [sp, #0]
9000a2de:	2302      	movs	r3, #2
9000a2e0:	2214      	movs	r2, #20
9000a2e2:	f001 f9b7 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_WHITE);
9000a2e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
9000a2ea:	4613      	mov	r3, r2
9000a2ec:	009b      	lsls	r3, r3, #2
9000a2ee:	4413      	add	r3, r2
9000a2f0:	009b      	lsls	r3, r3, #2
9000a2f2:	330a      	adds	r3, #10
9000a2f4:	4618      	mov	r0, r3
9000a2f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
9000a2fa:	4613      	mov	r3, r2
9000a2fc:	009b      	lsls	r3, r3, #2
9000a2fe:	4413      	add	r3, r2
9000a300:	009b      	lsls	r3, r3, #2
9000a302:	332b      	adds	r3, #43	; 0x2b
9000a304:	4619      	mov	r1, r3
9000a306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a30a:	9300      	str	r3, [sp, #0]
9000a30c:	2314      	movs	r3, #20
9000a30e:	2202      	movs	r2, #2
9000a310:	f001 f9a0 	bl	9000b654 <UTIL_LCD_DrawRect>
      x_move++;
9000a314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000a318:	b29b      	uxth	r3, r3
9000a31a:	3301      	adds	r3, #1
9000a31c:	b29b      	uxth	r3, r3
9000a31e:	80fb      	strh	r3, [r7, #6]
    while (x_move < 23)
9000a320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000a324:	2b16      	cmp	r3, #22
9000a326:	dd9b      	ble.n	9000a260 <Draw_Menu+0x170>
    }
    x_move = 0;
9000a328:	2300      	movs	r3, #0
9000a32a:	80fb      	strh	r3, [r7, #6]
    y_move++;
9000a32c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
9000a330:	b29b      	uxth	r3, r3
9000a332:	3301      	adds	r3, #1
9000a334:	b29b      	uxth	r3, r3
9000a336:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
9000a338:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
9000a33c:	2b0a      	cmp	r3, #10
9000a33e:	ddef      	ble.n	9000a320 <Draw_Menu+0x230>
  }
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
9000a340:	480d      	ldr	r0, [pc, #52]	; (9000a378 <Draw_Menu+0x288>)
9000a342:	f000 ffa3 	bl	9000b28c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a346:	4808      	ldr	r0, [pc, #32]	; (9000a368 <Draw_Menu+0x278>)
9000a348:	f000 ffb4 	bl	9000b2b4 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font8);
9000a34c:	480b      	ldr	r0, [pc, #44]	; (9000a37c <Draw_Menu+0x28c>)
9000a34e:	f000 ffc5 	bl	9000b2dc <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(20, 20, (uint8_t *)"ZIVO", LEFT_MODE);
9000a352:	2303      	movs	r3, #3
9000a354:	4a0a      	ldr	r2, [pc, #40]	; (9000a380 <Draw_Menu+0x290>)
9000a356:	2114      	movs	r1, #20
9000a358:	2014      	movs	r0, #20
9000a35a:	f001 f8b7 	bl	9000b4cc <UTIL_LCD_DisplayStringAt>
}
9000a35e:	bf00      	nop
9000a360:	3708      	adds	r7, #8
9000a362:	46bd      	mov	sp, r7
9000a364:	bd80      	pop	{r7, pc}
9000a366:	bf00      	nop
9000a368:	ffb9c4ca 	.word	0xffb9c4ca
9000a36c:	200012c4 	.word	0x200012c4
9000a370:	200012c8 	.word	0x200012c8
9000a374:	ff4f5251 	.word	0xff4f5251
9000a378:	ffff0000 	.word	0xffff0000
9000a37c:	2000004c 	.word	0x2000004c
9000a380:	9000cf38 	.word	0x9000cf38

9000a384 <Set_Numbers>:
 * @brief  Sets numbers acording to the mines
 * @param  None
 * @retval None
 */
static void Set_Numbers()
{
9000a384:	b480      	push	{r7}
9000a386:	b083      	sub	sp, #12
9000a388:	af00      	add	r7, sp, #0
  for (int i = 0; i < 11; i++)
9000a38a:	2300      	movs	r3, #0
9000a38c:	607b      	str	r3, [r7, #4]
9000a38e:	e19e      	b.n	9000a6ce <Set_Numbers+0x34a>
  {
    for (int j = 0; j < 23; j++)
9000a390:	2300      	movs	r3, #0
9000a392:	603b      	str	r3, [r7, #0]
9000a394:	e194      	b.n	9000a6c0 <Set_Numbers+0x33c>
    {
      if (tab[j][i] != -1)
9000a396:	49bd      	ldr	r1, [pc, #756]	; (9000a68c <Set_Numbers+0x308>)
9000a398:	683a      	ldr	r2, [r7, #0]
9000a39a:	4613      	mov	r3, r2
9000a39c:	009b      	lsls	r3, r3, #2
9000a39e:	4413      	add	r3, r2
9000a3a0:	005b      	lsls	r3, r3, #1
9000a3a2:	4413      	add	r3, r2
9000a3a4:	18ca      	adds	r2, r1, r3
9000a3a6:	687b      	ldr	r3, [r7, #4]
9000a3a8:	4413      	add	r3, r2
9000a3aa:	f993 3000 	ldrsb.w	r3, [r3]
9000a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a3b2:	f000 8182 	beq.w	9000a6ba <Set_Numbers+0x336>
      {
        if (i > 0)
9000a3b6:	687b      	ldr	r3, [r7, #4]
9000a3b8:	2b00      	cmp	r3, #0
9000a3ba:	f340 808c 	ble.w	9000a4d6 <Set_Numbers+0x152>
        {
          if (tab[j][i - 1] == -1)
9000a3be:	687b      	ldr	r3, [r7, #4]
9000a3c0:	1e59      	subs	r1, r3, #1
9000a3c2:	48b2      	ldr	r0, [pc, #712]	; (9000a68c <Set_Numbers+0x308>)
9000a3c4:	683a      	ldr	r2, [r7, #0]
9000a3c6:	4613      	mov	r3, r2
9000a3c8:	009b      	lsls	r3, r3, #2
9000a3ca:	4413      	add	r3, r2
9000a3cc:	005b      	lsls	r3, r3, #1
9000a3ce:	4413      	add	r3, r2
9000a3d0:	4403      	add	r3, r0
9000a3d2:	440b      	add	r3, r1
9000a3d4:	f993 3000 	ldrsb.w	r3, [r3]
9000a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a3dc:	d11b      	bne.n	9000a416 <Set_Numbers+0x92>
            tab[j][i]++;
9000a3de:	49ab      	ldr	r1, [pc, #684]	; (9000a68c <Set_Numbers+0x308>)
9000a3e0:	683a      	ldr	r2, [r7, #0]
9000a3e2:	4613      	mov	r3, r2
9000a3e4:	009b      	lsls	r3, r3, #2
9000a3e6:	4413      	add	r3, r2
9000a3e8:	005b      	lsls	r3, r3, #1
9000a3ea:	4413      	add	r3, r2
9000a3ec:	18ca      	adds	r2, r1, r3
9000a3ee:	687b      	ldr	r3, [r7, #4]
9000a3f0:	4413      	add	r3, r2
9000a3f2:	f993 3000 	ldrsb.w	r3, [r3]
9000a3f6:	b2db      	uxtb	r3, r3
9000a3f8:	3301      	adds	r3, #1
9000a3fa:	b2db      	uxtb	r3, r3
9000a3fc:	b258      	sxtb	r0, r3
9000a3fe:	49a3      	ldr	r1, [pc, #652]	; (9000a68c <Set_Numbers+0x308>)
9000a400:	683a      	ldr	r2, [r7, #0]
9000a402:	4613      	mov	r3, r2
9000a404:	009b      	lsls	r3, r3, #2
9000a406:	4413      	add	r3, r2
9000a408:	005b      	lsls	r3, r3, #1
9000a40a:	4413      	add	r3, r2
9000a40c:	18ca      	adds	r2, r1, r3
9000a40e:	687b      	ldr	r3, [r7, #4]
9000a410:	4413      	add	r3, r2
9000a412:	4602      	mov	r2, r0
9000a414:	701a      	strb	r2, [r3, #0]
          if (j > 0)
9000a416:	683b      	ldr	r3, [r7, #0]
9000a418:	2b00      	cmp	r3, #0
9000a41a:	dd2c      	ble.n	9000a476 <Set_Numbers+0xf2>
          {
            if (tab[j - 1][i - 1] == -1)
9000a41c:	683b      	ldr	r3, [r7, #0]
9000a41e:	1e5a      	subs	r2, r3, #1
9000a420:	687b      	ldr	r3, [r7, #4]
9000a422:	1e59      	subs	r1, r3, #1
9000a424:	4899      	ldr	r0, [pc, #612]	; (9000a68c <Set_Numbers+0x308>)
9000a426:	4613      	mov	r3, r2
9000a428:	009b      	lsls	r3, r3, #2
9000a42a:	4413      	add	r3, r2
9000a42c:	005b      	lsls	r3, r3, #1
9000a42e:	4413      	add	r3, r2
9000a430:	4403      	add	r3, r0
9000a432:	440b      	add	r3, r1
9000a434:	f993 3000 	ldrsb.w	r3, [r3]
9000a438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a43c:	d11b      	bne.n	9000a476 <Set_Numbers+0xf2>
              tab[j][i]++;
9000a43e:	4993      	ldr	r1, [pc, #588]	; (9000a68c <Set_Numbers+0x308>)
9000a440:	683a      	ldr	r2, [r7, #0]
9000a442:	4613      	mov	r3, r2
9000a444:	009b      	lsls	r3, r3, #2
9000a446:	4413      	add	r3, r2
9000a448:	005b      	lsls	r3, r3, #1
9000a44a:	4413      	add	r3, r2
9000a44c:	18ca      	adds	r2, r1, r3
9000a44e:	687b      	ldr	r3, [r7, #4]
9000a450:	4413      	add	r3, r2
9000a452:	f993 3000 	ldrsb.w	r3, [r3]
9000a456:	b2db      	uxtb	r3, r3
9000a458:	3301      	adds	r3, #1
9000a45a:	b2db      	uxtb	r3, r3
9000a45c:	b258      	sxtb	r0, r3
9000a45e:	498b      	ldr	r1, [pc, #556]	; (9000a68c <Set_Numbers+0x308>)
9000a460:	683a      	ldr	r2, [r7, #0]
9000a462:	4613      	mov	r3, r2
9000a464:	009b      	lsls	r3, r3, #2
9000a466:	4413      	add	r3, r2
9000a468:	005b      	lsls	r3, r3, #1
9000a46a:	4413      	add	r3, r2
9000a46c:	18ca      	adds	r2, r1, r3
9000a46e:	687b      	ldr	r3, [r7, #4]
9000a470:	4413      	add	r3, r2
9000a472:	4602      	mov	r2, r0
9000a474:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
9000a476:	683b      	ldr	r3, [r7, #0]
9000a478:	2b15      	cmp	r3, #21
9000a47a:	dc2c      	bgt.n	9000a4d6 <Set_Numbers+0x152>
          {
            if (tab[j + 1][i - 1] == -1)
9000a47c:	683b      	ldr	r3, [r7, #0]
9000a47e:	1c5a      	adds	r2, r3, #1
9000a480:	687b      	ldr	r3, [r7, #4]
9000a482:	1e59      	subs	r1, r3, #1
9000a484:	4881      	ldr	r0, [pc, #516]	; (9000a68c <Set_Numbers+0x308>)
9000a486:	4613      	mov	r3, r2
9000a488:	009b      	lsls	r3, r3, #2
9000a48a:	4413      	add	r3, r2
9000a48c:	005b      	lsls	r3, r3, #1
9000a48e:	4413      	add	r3, r2
9000a490:	4403      	add	r3, r0
9000a492:	440b      	add	r3, r1
9000a494:	f993 3000 	ldrsb.w	r3, [r3]
9000a498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a49c:	d11b      	bne.n	9000a4d6 <Set_Numbers+0x152>
              tab[j][i]++;
9000a49e:	497b      	ldr	r1, [pc, #492]	; (9000a68c <Set_Numbers+0x308>)
9000a4a0:	683a      	ldr	r2, [r7, #0]
9000a4a2:	4613      	mov	r3, r2
9000a4a4:	009b      	lsls	r3, r3, #2
9000a4a6:	4413      	add	r3, r2
9000a4a8:	005b      	lsls	r3, r3, #1
9000a4aa:	4413      	add	r3, r2
9000a4ac:	18ca      	adds	r2, r1, r3
9000a4ae:	687b      	ldr	r3, [r7, #4]
9000a4b0:	4413      	add	r3, r2
9000a4b2:	f993 3000 	ldrsb.w	r3, [r3]
9000a4b6:	b2db      	uxtb	r3, r3
9000a4b8:	3301      	adds	r3, #1
9000a4ba:	b2db      	uxtb	r3, r3
9000a4bc:	b258      	sxtb	r0, r3
9000a4be:	4973      	ldr	r1, [pc, #460]	; (9000a68c <Set_Numbers+0x308>)
9000a4c0:	683a      	ldr	r2, [r7, #0]
9000a4c2:	4613      	mov	r3, r2
9000a4c4:	009b      	lsls	r3, r3, #2
9000a4c6:	4413      	add	r3, r2
9000a4c8:	005b      	lsls	r3, r3, #1
9000a4ca:	4413      	add	r3, r2
9000a4cc:	18ca      	adds	r2, r1, r3
9000a4ce:	687b      	ldr	r3, [r7, #4]
9000a4d0:	4413      	add	r3, r2
9000a4d2:	4602      	mov	r2, r0
9000a4d4:	701a      	strb	r2, [r3, #0]
          }
        }
        if (tab[j - 1][i] == -1 && j > 0)
9000a4d6:	683b      	ldr	r3, [r7, #0]
9000a4d8:	1e5a      	subs	r2, r3, #1
9000a4da:	496c      	ldr	r1, [pc, #432]	; (9000a68c <Set_Numbers+0x308>)
9000a4dc:	4613      	mov	r3, r2
9000a4de:	009b      	lsls	r3, r3, #2
9000a4e0:	4413      	add	r3, r2
9000a4e2:	005b      	lsls	r3, r3, #1
9000a4e4:	4413      	add	r3, r2
9000a4e6:	18ca      	adds	r2, r1, r3
9000a4e8:	687b      	ldr	r3, [r7, #4]
9000a4ea:	4413      	add	r3, r2
9000a4ec:	f993 3000 	ldrsb.w	r3, [r3]
9000a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a4f4:	d11e      	bne.n	9000a534 <Set_Numbers+0x1b0>
9000a4f6:	683b      	ldr	r3, [r7, #0]
9000a4f8:	2b00      	cmp	r3, #0
9000a4fa:	dd1b      	ble.n	9000a534 <Set_Numbers+0x1b0>
          tab[j][i]++;
9000a4fc:	4963      	ldr	r1, [pc, #396]	; (9000a68c <Set_Numbers+0x308>)
9000a4fe:	683a      	ldr	r2, [r7, #0]
9000a500:	4613      	mov	r3, r2
9000a502:	009b      	lsls	r3, r3, #2
9000a504:	4413      	add	r3, r2
9000a506:	005b      	lsls	r3, r3, #1
9000a508:	4413      	add	r3, r2
9000a50a:	18ca      	adds	r2, r1, r3
9000a50c:	687b      	ldr	r3, [r7, #4]
9000a50e:	4413      	add	r3, r2
9000a510:	f993 3000 	ldrsb.w	r3, [r3]
9000a514:	b2db      	uxtb	r3, r3
9000a516:	3301      	adds	r3, #1
9000a518:	b2db      	uxtb	r3, r3
9000a51a:	b258      	sxtb	r0, r3
9000a51c:	495b      	ldr	r1, [pc, #364]	; (9000a68c <Set_Numbers+0x308>)
9000a51e:	683a      	ldr	r2, [r7, #0]
9000a520:	4613      	mov	r3, r2
9000a522:	009b      	lsls	r3, r3, #2
9000a524:	4413      	add	r3, r2
9000a526:	005b      	lsls	r3, r3, #1
9000a528:	4413      	add	r3, r2
9000a52a:	18ca      	adds	r2, r1, r3
9000a52c:	687b      	ldr	r3, [r7, #4]
9000a52e:	4413      	add	r3, r2
9000a530:	4602      	mov	r2, r0
9000a532:	701a      	strb	r2, [r3, #0]
        if (tab[j + 1][i] == -1 && j < 22)
9000a534:	683b      	ldr	r3, [r7, #0]
9000a536:	1c5a      	adds	r2, r3, #1
9000a538:	4954      	ldr	r1, [pc, #336]	; (9000a68c <Set_Numbers+0x308>)
9000a53a:	4613      	mov	r3, r2
9000a53c:	009b      	lsls	r3, r3, #2
9000a53e:	4413      	add	r3, r2
9000a540:	005b      	lsls	r3, r3, #1
9000a542:	4413      	add	r3, r2
9000a544:	18ca      	adds	r2, r1, r3
9000a546:	687b      	ldr	r3, [r7, #4]
9000a548:	4413      	add	r3, r2
9000a54a:	f993 3000 	ldrsb.w	r3, [r3]
9000a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a552:	d11e      	bne.n	9000a592 <Set_Numbers+0x20e>
9000a554:	683b      	ldr	r3, [r7, #0]
9000a556:	2b15      	cmp	r3, #21
9000a558:	dc1b      	bgt.n	9000a592 <Set_Numbers+0x20e>
          tab[j][i]++;
9000a55a:	494c      	ldr	r1, [pc, #304]	; (9000a68c <Set_Numbers+0x308>)
9000a55c:	683a      	ldr	r2, [r7, #0]
9000a55e:	4613      	mov	r3, r2
9000a560:	009b      	lsls	r3, r3, #2
9000a562:	4413      	add	r3, r2
9000a564:	005b      	lsls	r3, r3, #1
9000a566:	4413      	add	r3, r2
9000a568:	18ca      	adds	r2, r1, r3
9000a56a:	687b      	ldr	r3, [r7, #4]
9000a56c:	4413      	add	r3, r2
9000a56e:	f993 3000 	ldrsb.w	r3, [r3]
9000a572:	b2db      	uxtb	r3, r3
9000a574:	3301      	adds	r3, #1
9000a576:	b2db      	uxtb	r3, r3
9000a578:	b258      	sxtb	r0, r3
9000a57a:	4944      	ldr	r1, [pc, #272]	; (9000a68c <Set_Numbers+0x308>)
9000a57c:	683a      	ldr	r2, [r7, #0]
9000a57e:	4613      	mov	r3, r2
9000a580:	009b      	lsls	r3, r3, #2
9000a582:	4413      	add	r3, r2
9000a584:	005b      	lsls	r3, r3, #1
9000a586:	4413      	add	r3, r2
9000a588:	18ca      	adds	r2, r1, r3
9000a58a:	687b      	ldr	r3, [r7, #4]
9000a58c:	4413      	add	r3, r2
9000a58e:	4602      	mov	r2, r0
9000a590:	701a      	strb	r2, [r3, #0]
        if (i < 10)
9000a592:	687b      	ldr	r3, [r7, #4]
9000a594:	2b09      	cmp	r3, #9
9000a596:	f300 8090 	bgt.w	9000a6ba <Set_Numbers+0x336>
        {
          if (tab[j][i + 1] == -1)
9000a59a:	687b      	ldr	r3, [r7, #4]
9000a59c:	1c59      	adds	r1, r3, #1
9000a59e:	483b      	ldr	r0, [pc, #236]	; (9000a68c <Set_Numbers+0x308>)
9000a5a0:	683a      	ldr	r2, [r7, #0]
9000a5a2:	4613      	mov	r3, r2
9000a5a4:	009b      	lsls	r3, r3, #2
9000a5a6:	4413      	add	r3, r2
9000a5a8:	005b      	lsls	r3, r3, #1
9000a5aa:	4413      	add	r3, r2
9000a5ac:	4403      	add	r3, r0
9000a5ae:	440b      	add	r3, r1
9000a5b0:	f993 3000 	ldrsb.w	r3, [r3]
9000a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a5b8:	d11b      	bne.n	9000a5f2 <Set_Numbers+0x26e>
            tab[j][i]++;
9000a5ba:	4934      	ldr	r1, [pc, #208]	; (9000a68c <Set_Numbers+0x308>)
9000a5bc:	683a      	ldr	r2, [r7, #0]
9000a5be:	4613      	mov	r3, r2
9000a5c0:	009b      	lsls	r3, r3, #2
9000a5c2:	4413      	add	r3, r2
9000a5c4:	005b      	lsls	r3, r3, #1
9000a5c6:	4413      	add	r3, r2
9000a5c8:	18ca      	adds	r2, r1, r3
9000a5ca:	687b      	ldr	r3, [r7, #4]
9000a5cc:	4413      	add	r3, r2
9000a5ce:	f993 3000 	ldrsb.w	r3, [r3]
9000a5d2:	b2db      	uxtb	r3, r3
9000a5d4:	3301      	adds	r3, #1
9000a5d6:	b2db      	uxtb	r3, r3
9000a5d8:	b258      	sxtb	r0, r3
9000a5da:	492c      	ldr	r1, [pc, #176]	; (9000a68c <Set_Numbers+0x308>)
9000a5dc:	683a      	ldr	r2, [r7, #0]
9000a5de:	4613      	mov	r3, r2
9000a5e0:	009b      	lsls	r3, r3, #2
9000a5e2:	4413      	add	r3, r2
9000a5e4:	005b      	lsls	r3, r3, #1
9000a5e6:	4413      	add	r3, r2
9000a5e8:	18ca      	adds	r2, r1, r3
9000a5ea:	687b      	ldr	r3, [r7, #4]
9000a5ec:	4413      	add	r3, r2
9000a5ee:	4602      	mov	r2, r0
9000a5f0:	701a      	strb	r2, [r3, #0]
          if (j > 0)
9000a5f2:	683b      	ldr	r3, [r7, #0]
9000a5f4:	2b00      	cmp	r3, #0
9000a5f6:	dd2c      	ble.n	9000a652 <Set_Numbers+0x2ce>
          {
            if (tab[j - 1][i + 1] == -1)
9000a5f8:	683b      	ldr	r3, [r7, #0]
9000a5fa:	1e5a      	subs	r2, r3, #1
9000a5fc:	687b      	ldr	r3, [r7, #4]
9000a5fe:	1c59      	adds	r1, r3, #1
9000a600:	4822      	ldr	r0, [pc, #136]	; (9000a68c <Set_Numbers+0x308>)
9000a602:	4613      	mov	r3, r2
9000a604:	009b      	lsls	r3, r3, #2
9000a606:	4413      	add	r3, r2
9000a608:	005b      	lsls	r3, r3, #1
9000a60a:	4413      	add	r3, r2
9000a60c:	4403      	add	r3, r0
9000a60e:	440b      	add	r3, r1
9000a610:	f993 3000 	ldrsb.w	r3, [r3]
9000a614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a618:	d11b      	bne.n	9000a652 <Set_Numbers+0x2ce>
              tab[j][i]++;
9000a61a:	491c      	ldr	r1, [pc, #112]	; (9000a68c <Set_Numbers+0x308>)
9000a61c:	683a      	ldr	r2, [r7, #0]
9000a61e:	4613      	mov	r3, r2
9000a620:	009b      	lsls	r3, r3, #2
9000a622:	4413      	add	r3, r2
9000a624:	005b      	lsls	r3, r3, #1
9000a626:	4413      	add	r3, r2
9000a628:	18ca      	adds	r2, r1, r3
9000a62a:	687b      	ldr	r3, [r7, #4]
9000a62c:	4413      	add	r3, r2
9000a62e:	f993 3000 	ldrsb.w	r3, [r3]
9000a632:	b2db      	uxtb	r3, r3
9000a634:	3301      	adds	r3, #1
9000a636:	b2db      	uxtb	r3, r3
9000a638:	b258      	sxtb	r0, r3
9000a63a:	4914      	ldr	r1, [pc, #80]	; (9000a68c <Set_Numbers+0x308>)
9000a63c:	683a      	ldr	r2, [r7, #0]
9000a63e:	4613      	mov	r3, r2
9000a640:	009b      	lsls	r3, r3, #2
9000a642:	4413      	add	r3, r2
9000a644:	005b      	lsls	r3, r3, #1
9000a646:	4413      	add	r3, r2
9000a648:	18ca      	adds	r2, r1, r3
9000a64a:	687b      	ldr	r3, [r7, #4]
9000a64c:	4413      	add	r3, r2
9000a64e:	4602      	mov	r2, r0
9000a650:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
9000a652:	683b      	ldr	r3, [r7, #0]
9000a654:	2b15      	cmp	r3, #21
9000a656:	dc30      	bgt.n	9000a6ba <Set_Numbers+0x336>
          {
            if (tab[j + 1][i + 1] == -1)
9000a658:	683b      	ldr	r3, [r7, #0]
9000a65a:	1c5a      	adds	r2, r3, #1
9000a65c:	687b      	ldr	r3, [r7, #4]
9000a65e:	1c59      	adds	r1, r3, #1
9000a660:	480a      	ldr	r0, [pc, #40]	; (9000a68c <Set_Numbers+0x308>)
9000a662:	4613      	mov	r3, r2
9000a664:	009b      	lsls	r3, r3, #2
9000a666:	4413      	add	r3, r2
9000a668:	005b      	lsls	r3, r3, #1
9000a66a:	4413      	add	r3, r2
9000a66c:	4403      	add	r3, r0
9000a66e:	440b      	add	r3, r1
9000a670:	f993 3000 	ldrsb.w	r3, [r3]
9000a674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a678:	d11f      	bne.n	9000a6ba <Set_Numbers+0x336>
              tab[j][i]++;
9000a67a:	4904      	ldr	r1, [pc, #16]	; (9000a68c <Set_Numbers+0x308>)
9000a67c:	683a      	ldr	r2, [r7, #0]
9000a67e:	4613      	mov	r3, r2
9000a680:	009b      	lsls	r3, r3, #2
9000a682:	4413      	add	r3, r2
9000a684:	005b      	lsls	r3, r3, #1
9000a686:	4413      	add	r3, r2
9000a688:	e002      	b.n	9000a690 <Set_Numbers+0x30c>
9000a68a:	bf00      	nop
9000a68c:	200011bc 	.word	0x200011bc
9000a690:	18ca      	adds	r2, r1, r3
9000a692:	687b      	ldr	r3, [r7, #4]
9000a694:	4413      	add	r3, r2
9000a696:	f993 3000 	ldrsb.w	r3, [r3]
9000a69a:	b2db      	uxtb	r3, r3
9000a69c:	3301      	adds	r3, #1
9000a69e:	b2db      	uxtb	r3, r3
9000a6a0:	b258      	sxtb	r0, r3
9000a6a2:	4910      	ldr	r1, [pc, #64]	; (9000a6e4 <Set_Numbers+0x360>)
9000a6a4:	683a      	ldr	r2, [r7, #0]
9000a6a6:	4613      	mov	r3, r2
9000a6a8:	009b      	lsls	r3, r3, #2
9000a6aa:	4413      	add	r3, r2
9000a6ac:	005b      	lsls	r3, r3, #1
9000a6ae:	4413      	add	r3, r2
9000a6b0:	18ca      	adds	r2, r1, r3
9000a6b2:	687b      	ldr	r3, [r7, #4]
9000a6b4:	4413      	add	r3, r2
9000a6b6:	4602      	mov	r2, r0
9000a6b8:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 23; j++)
9000a6ba:	683b      	ldr	r3, [r7, #0]
9000a6bc:	3301      	adds	r3, #1
9000a6be:	603b      	str	r3, [r7, #0]
9000a6c0:	683b      	ldr	r3, [r7, #0]
9000a6c2:	2b16      	cmp	r3, #22
9000a6c4:	f77f ae67 	ble.w	9000a396 <Set_Numbers+0x12>
  for (int i = 0; i < 11; i++)
9000a6c8:	687b      	ldr	r3, [r7, #4]
9000a6ca:	3301      	adds	r3, #1
9000a6cc:	607b      	str	r3, [r7, #4]
9000a6ce:	687b      	ldr	r3, [r7, #4]
9000a6d0:	2b0a      	cmp	r3, #10
9000a6d2:	f77f ae5d 	ble.w	9000a390 <Set_Numbers+0xc>
          }
        }
      }
    }
  }
}
9000a6d6:	bf00      	nop
9000a6d8:	bf00      	nop
9000a6da:	370c      	adds	r7, #12
9000a6dc:	46bd      	mov	sp, r7
9000a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a6e2:	4770      	bx	lr
9000a6e4:	200011bc 	.word	0x200011bc

9000a6e8 <Bomb_Hit>:
 * @brief  When you hit a bomb/game end
 * @param  None
 * @retval None
 */
static void Bomb_Hit()
{
9000a6e8:	b580      	push	{r7, lr}
9000a6ea:	b084      	sub	sp, #16
9000a6ec:	af02      	add	r7, sp, #8
  Game_State = 0;
9000a6ee:	4b34      	ldr	r3, [pc, #208]	; (9000a7c0 <Bomb_Hit+0xd8>)
9000a6f0:	2200      	movs	r2, #0
9000a6f2:	701a      	strb	r2, [r3, #0]
  UTIL_LCD_DisplayStringAt(200, 20, (uint8_t *)"MRTU", LEFT_MODE);
9000a6f4:	2303      	movs	r3, #3
9000a6f6:	4a33      	ldr	r2, [pc, #204]	; (9000a7c4 <Bomb_Hit+0xdc>)
9000a6f8:	2114      	movs	r1, #20
9000a6fa:	20c8      	movs	r0, #200	; 0xc8
9000a6fc:	f000 fee6 	bl	9000b4cc <UTIL_LCD_DisplayStringAt>
  for (int i = 0; i < 23; i++)
9000a700:	2300      	movs	r3, #0
9000a702:	607b      	str	r3, [r7, #4]
9000a704:	e053      	b.n	9000a7ae <Bomb_Hit+0xc6>
  {
    for (int j = 0; j < 11; j++)
9000a706:	2300      	movs	r3, #0
9000a708:	603b      	str	r3, [r7, #0]
9000a70a:	e04a      	b.n	9000a7a2 <Bomb_Hit+0xba>
    {
      if (tab[i][j] == -1)
9000a70c:	492e      	ldr	r1, [pc, #184]	; (9000a7c8 <Bomb_Hit+0xe0>)
9000a70e:	687a      	ldr	r2, [r7, #4]
9000a710:	4613      	mov	r3, r2
9000a712:	009b      	lsls	r3, r3, #2
9000a714:	4413      	add	r3, r2
9000a716:	005b      	lsls	r3, r3, #1
9000a718:	4413      	add	r3, r2
9000a71a:	18ca      	adds	r2, r1, r3
9000a71c:	683b      	ldr	r3, [r7, #0]
9000a71e:	4413      	add	r3, r2
9000a720:	f993 3000 	ldrsb.w	r3, [r3]
9000a724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000a728:	d114      	bne.n	9000a754 <Bomb_Hit+0x6c>
      {
        UTIL_LCD_DrawRect(10 + (i * 20), 43 + (j * 20), 20, 20, UTIL_LCD_COLOR_RED);
9000a72a:	687a      	ldr	r2, [r7, #4]
9000a72c:	4613      	mov	r3, r2
9000a72e:	009b      	lsls	r3, r3, #2
9000a730:	4413      	add	r3, r2
9000a732:	009b      	lsls	r3, r3, #2
9000a734:	330a      	adds	r3, #10
9000a736:	4618      	mov	r0, r3
9000a738:	683a      	ldr	r2, [r7, #0]
9000a73a:	4613      	mov	r3, r2
9000a73c:	009b      	lsls	r3, r3, #2
9000a73e:	4413      	add	r3, r2
9000a740:	009b      	lsls	r3, r3, #2
9000a742:	332b      	adds	r3, #43	; 0x2b
9000a744:	4619      	mov	r1, r3
9000a746:	4b21      	ldr	r3, [pc, #132]	; (9000a7cc <Bomb_Hit+0xe4>)
9000a748:	9300      	str	r3, [sp, #0]
9000a74a:	2314      	movs	r3, #20
9000a74c:	2214      	movs	r2, #20
9000a74e:	f000 ff81 	bl	9000b654 <UTIL_LCD_DrawRect>
9000a752:	e023      	b.n	9000a79c <Bomb_Hit+0xb4>
      }
      else if (tab[i][j] == -2)
9000a754:	491c      	ldr	r1, [pc, #112]	; (9000a7c8 <Bomb_Hit+0xe0>)
9000a756:	687a      	ldr	r2, [r7, #4]
9000a758:	4613      	mov	r3, r2
9000a75a:	009b      	lsls	r3, r3, #2
9000a75c:	4413      	add	r3, r2
9000a75e:	005b      	lsls	r3, r3, #1
9000a760:	4413      	add	r3, r2
9000a762:	18ca      	adds	r2, r1, r3
9000a764:	683b      	ldr	r3, [r7, #0]
9000a766:	4413      	add	r3, r2
9000a768:	f993 3000 	ldrsb.w	r3, [r3]
9000a76c:	f113 0f02 	cmn.w	r3, #2
9000a770:	d114      	bne.n	9000a79c <Bomb_Hit+0xb4>
      {
        UTIL_LCD_DrawRect(10 + (i * 20), 43 + (j * 20), 20, 20, UTIL_LCD_COLOR_GREEN);
9000a772:	687a      	ldr	r2, [r7, #4]
9000a774:	4613      	mov	r3, r2
9000a776:	009b      	lsls	r3, r3, #2
9000a778:	4413      	add	r3, r2
9000a77a:	009b      	lsls	r3, r3, #2
9000a77c:	330a      	adds	r3, #10
9000a77e:	4618      	mov	r0, r3
9000a780:	683a      	ldr	r2, [r7, #0]
9000a782:	4613      	mov	r3, r2
9000a784:	009b      	lsls	r3, r3, #2
9000a786:	4413      	add	r3, r2
9000a788:	009b      	lsls	r3, r3, #2
9000a78a:	332b      	adds	r3, #43	; 0x2b
9000a78c:	4619      	mov	r1, r3
9000a78e:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
9000a792:	9300      	str	r3, [sp, #0]
9000a794:	2314      	movs	r3, #20
9000a796:	2214      	movs	r2, #20
9000a798:	f000 ff5c 	bl	9000b654 <UTIL_LCD_DrawRect>
    for (int j = 0; j < 11; j++)
9000a79c:	683b      	ldr	r3, [r7, #0]
9000a79e:	3301      	adds	r3, #1
9000a7a0:	603b      	str	r3, [r7, #0]
9000a7a2:	683b      	ldr	r3, [r7, #0]
9000a7a4:	2b0a      	cmp	r3, #10
9000a7a6:	ddb1      	ble.n	9000a70c <Bomb_Hit+0x24>
  for (int i = 0; i < 23; i++)
9000a7a8:	687b      	ldr	r3, [r7, #4]
9000a7aa:	3301      	adds	r3, #1
9000a7ac:	607b      	str	r3, [r7, #4]
9000a7ae:	687b      	ldr	r3, [r7, #4]
9000a7b0:	2b16      	cmp	r3, #22
9000a7b2:	dda8      	ble.n	9000a706 <Bomb_Hit+0x1e>
      }
    }
  }
}
9000a7b4:	bf00      	nop
9000a7b6:	bf00      	nop
9000a7b8:	3708      	adds	r7, #8
9000a7ba:	46bd      	mov	sp, r7
9000a7bc:	bd80      	pop	{r7, pc}
9000a7be:	bf00      	nop
9000a7c0:	20000048 	.word	0x20000048
9000a7c4:	9000cf40 	.word	0x9000cf40
9000a7c8:	200011bc 	.word	0x200011bc
9000a7cc:	ffff0000 	.word	0xffff0000

9000a7d0 <Draw_Cvad>:
 * @brief  Draw the unknown squear
 * @param  None
 * @retval None
 */
static void Draw_Cvad(int8_t x_move, int8_t y_move)
{
9000a7d0:	b590      	push	{r4, r7, lr}
9000a7d2:	b087      	sub	sp, #28
9000a7d4:	af02      	add	r7, sp, #8
9000a7d6:	4603      	mov	r3, r0
9000a7d8:	460a      	mov	r2, r1
9000a7da:	71fb      	strb	r3, [r7, #7]
9000a7dc:	4613      	mov	r3, r2
9000a7de:	71bb      	strb	r3, [r7, #6]

  UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a7e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a7e4:	4613      	mov	r3, r2
9000a7e6:	009b      	lsls	r3, r3, #2
9000a7e8:	4413      	add	r3, r2
9000a7ea:	009b      	lsls	r3, r3, #2
9000a7ec:	331c      	adds	r3, #28
9000a7ee:	4618      	mov	r0, r3
9000a7f0:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a7f4:	4613      	mov	r3, r2
9000a7f6:	009b      	lsls	r3, r3, #2
9000a7f8:	4413      	add	r3, r2
9000a7fa:	009b      	lsls	r3, r3, #2
9000a7fc:	332b      	adds	r3, #43	; 0x2b
9000a7fe:	4619      	mov	r1, r3
9000a800:	4b4f      	ldr	r3, [pc, #316]	; (9000a940 <Draw_Cvad+0x170>)
9000a802:	9300      	str	r3, [sp, #0]
9000a804:	2312      	movs	r3, #18
9000a806:	2202      	movs	r2, #2
9000a808:	f000 ff24 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a80c:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a810:	4613      	mov	r3, r2
9000a812:	009b      	lsls	r3, r3, #2
9000a814:	4413      	add	r3, r2
9000a816:	009b      	lsls	r3, r3, #2
9000a818:	330a      	adds	r3, #10
9000a81a:	4618      	mov	r0, r3
9000a81c:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a820:	4613      	mov	r3, r2
9000a822:	009b      	lsls	r3, r3, #2
9000a824:	4413      	add	r3, r2
9000a826:	009b      	lsls	r3, r3, #2
9000a828:	333d      	adds	r3, #61	; 0x3d
9000a82a:	4619      	mov	r1, r3
9000a82c:	4b44      	ldr	r3, [pc, #272]	; (9000a940 <Draw_Cvad+0x170>)
9000a82e:	9300      	str	r3, [sp, #0]
9000a830:	2302      	movs	r3, #2
9000a832:	2214      	movs	r2, #20
9000a834:	f000 ff0e 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a838:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a83c:	4613      	mov	r3, r2
9000a83e:	009b      	lsls	r3, r3, #2
9000a840:	4413      	add	r3, r2
9000a842:	009b      	lsls	r3, r3, #2
9000a844:	330a      	adds	r3, #10
9000a846:	4618      	mov	r0, r3
9000a848:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a84c:	4613      	mov	r3, r2
9000a84e:	009b      	lsls	r3, r3, #2
9000a850:	4413      	add	r3, r2
9000a852:	009b      	lsls	r3, r3, #2
9000a854:	332b      	adds	r3, #43	; 0x2b
9000a856:	4619      	mov	r1, r3
9000a858:	4b39      	ldr	r3, [pc, #228]	; (9000a940 <Draw_Cvad+0x170>)
9000a85a:	9300      	str	r3, [sp, #0]
9000a85c:	2302      	movs	r3, #2
9000a85e:	2214      	movs	r2, #20
9000a860:	f000 fef8 	bl	9000b654 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
9000a864:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a868:	4613      	mov	r3, r2
9000a86a:	009b      	lsls	r3, r3, #2
9000a86c:	4413      	add	r3, r2
9000a86e:	009b      	lsls	r3, r3, #2
9000a870:	330a      	adds	r3, #10
9000a872:	4618      	mov	r0, r3
9000a874:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a878:	4613      	mov	r3, r2
9000a87a:	009b      	lsls	r3, r3, #2
9000a87c:	4413      	add	r3, r2
9000a87e:	009b      	lsls	r3, r3, #2
9000a880:	332b      	adds	r3, #43	; 0x2b
9000a882:	4619      	mov	r1, r3
9000a884:	4b2e      	ldr	r3, [pc, #184]	; (9000a940 <Draw_Cvad+0x170>)
9000a886:	9300      	str	r3, [sp, #0]
9000a888:	2314      	movs	r3, #20
9000a88a:	2202      	movs	r2, #2
9000a88c:	f000 fee2 	bl	9000b654 <UTIL_LCD_DrawRect>

  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 20, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a890:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a894:	4613      	mov	r3, r2
9000a896:	009b      	lsls	r3, r3, #2
9000a898:	4413      	add	r3, r2
9000a89a:	009b      	lsls	r3, r3, #2
9000a89c:	330a      	adds	r3, #10
9000a89e:	4618      	mov	r0, r3
9000a8a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a8a4:	4613      	mov	r3, r2
9000a8a6:	009b      	lsls	r3, r3, #2
9000a8a8:	4413      	add	r3, r2
9000a8aa:	009b      	lsls	r3, r3, #2
9000a8ac:	332b      	adds	r3, #43	; 0x2b
9000a8ae:	4619      	mov	r1, r3
9000a8b0:	4b24      	ldr	r3, [pc, #144]	; (9000a944 <Draw_Cvad+0x174>)
9000a8b2:	9300      	str	r3, [sp, #0]
9000a8b4:	2314      	movs	r3, #20
9000a8b6:	2214      	movs	r2, #20
9000a8b8:	f000 fecc 	bl	9000b654 <UTIL_LCD_DrawRect>

  if (tab[x_move][y_move] > 0)
9000a8bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a8c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000a8c4:	4820      	ldr	r0, [pc, #128]	; (9000a948 <Draw_Cvad+0x178>)
9000a8c6:	4613      	mov	r3, r2
9000a8c8:	009b      	lsls	r3, r3, #2
9000a8ca:	4413      	add	r3, r2
9000a8cc:	005b      	lsls	r3, r3, #1
9000a8ce:	4413      	add	r3, r2
9000a8d0:	4403      	add	r3, r0
9000a8d2:	440b      	add	r3, r1
9000a8d4:	f993 3000 	ldrsb.w	r3, [r3]
9000a8d8:	2b00      	cmp	r3, #0
9000a8da:	dd2d      	ble.n	9000a938 <Draw_Cvad+0x168>
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
9000a8dc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
9000a8e0:	f000 fcd4 	bl	9000b28c <UTIL_LCD_SetTextColor>
    char st;
    sprintf(st, "%1d", tab[x_move][y_move]);
9000a8e4:	7bfb      	ldrb	r3, [r7, #15]
9000a8e6:	461c      	mov	r4, r3
9000a8e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a8ec:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000a8f0:	4815      	ldr	r0, [pc, #84]	; (9000a948 <Draw_Cvad+0x178>)
9000a8f2:	4613      	mov	r3, r2
9000a8f4:	009b      	lsls	r3, r3, #2
9000a8f6:	4413      	add	r3, r2
9000a8f8:	005b      	lsls	r3, r3, #1
9000a8fa:	4413      	add	r3, r2
9000a8fc:	4403      	add	r3, r0
9000a8fe:	440b      	add	r3, r1
9000a900:	f993 3000 	ldrsb.w	r3, [r3]
9000a904:	461a      	mov	r2, r3
9000a906:	4911      	ldr	r1, [pc, #68]	; (9000a94c <Draw_Cvad+0x17c>)
9000a908:	4620      	mov	r0, r4
9000a90a:	f001 fa05 	bl	9000bd18 <siprintf>
    UTIL_LCD_DisplayStringAt(17 + (x_move * 20), 50 + (y_move * 20), (uint8_t *)st, LEFT_MODE);
9000a90e:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000a912:	4613      	mov	r3, r2
9000a914:	009b      	lsls	r3, r3, #2
9000a916:	4413      	add	r3, r2
9000a918:	009b      	lsls	r3, r3, #2
9000a91a:	3311      	adds	r3, #17
9000a91c:	4618      	mov	r0, r3
9000a91e:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000a922:	4613      	mov	r3, r2
9000a924:	009b      	lsls	r3, r3, #2
9000a926:	4413      	add	r3, r2
9000a928:	009b      	lsls	r3, r3, #2
9000a92a:	3332      	adds	r3, #50	; 0x32
9000a92c:	4619      	mov	r1, r3
9000a92e:	7bfb      	ldrb	r3, [r7, #15]
9000a930:	461a      	mov	r2, r3
9000a932:	2303      	movs	r3, #3
9000a934:	f000 fdca 	bl	9000b4cc <UTIL_LCD_DisplayStringAt>
  }
}
9000a938:	bf00      	nop
9000a93a:	3714      	adds	r7, #20
9000a93c:	46bd      	mov	sp, r7
9000a93e:	bd90      	pop	{r4, r7, pc}
9000a940:	ffb9c4ca 	.word	0xffb9c4ca
9000a944:	ff4f5251 	.word	0xff4f5251
9000a948:	200011bc 	.word	0x200011bc
9000a94c:	9000cf48 	.word	0x9000cf48

9000a950 <GetPosition>:
 * @brief  Configures and gets Touch screen position.
 * @param  None
 * @retval None
 */
static void GetPosition()
{
9000a950:	b580      	push	{r7, lr}
9000a952:	b082      	sub	sp, #8
9000a954:	af02      	add	r7, sp, #8

  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
9000a956:	4996      	ldr	r1, [pc, #600]	; (9000abb0 <GetPosition+0x260>)
9000a958:	2000      	movs	r0, #0
9000a95a:	f7f8 facd 	bl	90002ef8 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
9000a95e:	4b94      	ldr	r3, [pc, #592]	; (9000abb0 <GetPosition+0x260>)
9000a960:	685b      	ldr	r3, [r3, #4]
9000a962:	b29a      	uxth	r2, r3
9000a964:	4b93      	ldr	r3, [pc, #588]	; (9000abb4 <GetPosition+0x264>)
9000a966:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
9000a968:	4b91      	ldr	r3, [pc, #580]	; (9000abb0 <GetPosition+0x260>)
9000a96a:	689b      	ldr	r3, [r3, #8]
9000a96c:	b29a      	uxth	r2, r3
9000a96e:	4b92      	ldr	r3, [pc, #584]	; (9000abb8 <GetPosition+0x268>)
9000a970:	801a      	strh	r2, [r3, #0]

  if (Px == x && Py == y)
9000a972:	4b92      	ldr	r3, [pc, #584]	; (9000abbc <GetPosition+0x26c>)
9000a974:	881a      	ldrh	r2, [r3, #0]
9000a976:	4b8f      	ldr	r3, [pc, #572]	; (9000abb4 <GetPosition+0x264>)
9000a978:	881b      	ldrh	r3, [r3, #0]
9000a97a:	429a      	cmp	r2, r3
9000a97c:	d106      	bne.n	9000a98c <GetPosition+0x3c>
9000a97e:	4b90      	ldr	r3, [pc, #576]	; (9000abc0 <GetPosition+0x270>)
9000a980:	881a      	ldrh	r2, [r3, #0]
9000a982:	4b8d      	ldr	r3, [pc, #564]	; (9000abb8 <GetPosition+0x268>)
9000a984:	881b      	ldrh	r3, [r3, #0]
9000a986:	429a      	cmp	r2, r3
9000a988:	f000 810f 	beq.w	9000abaa <GetPosition+0x25a>
  {
    return;
  }
  Px = x;
9000a98c:	4b89      	ldr	r3, [pc, #548]	; (9000abb4 <GetPosition+0x264>)
9000a98e:	881a      	ldrh	r2, [r3, #0]
9000a990:	4b8a      	ldr	r3, [pc, #552]	; (9000abbc <GetPosition+0x26c>)
9000a992:	801a      	strh	r2, [r3, #0]
  Py = y;
9000a994:	4b88      	ldr	r3, [pc, #544]	; (9000abb8 <GetPosition+0x268>)
9000a996:	881a      	ldrh	r2, [r3, #0]
9000a998:	4b89      	ldr	r3, [pc, #548]	; (9000abc0 <GetPosition+0x270>)
9000a99a:	801a      	strh	r2, [r3, #0]

  if ((x > 90) && (x < 130) && (y > 5) && (y < 35))
9000a99c:	4b85      	ldr	r3, [pc, #532]	; (9000abb4 <GetPosition+0x264>)
9000a99e:	881b      	ldrh	r3, [r3, #0]
9000a9a0:	2b5a      	cmp	r3, #90	; 0x5a
9000a9a2:	d941      	bls.n	9000aa28 <GetPosition+0xd8>
9000a9a4:	4b83      	ldr	r3, [pc, #524]	; (9000abb4 <GetPosition+0x264>)
9000a9a6:	881b      	ldrh	r3, [r3, #0]
9000a9a8:	2b81      	cmp	r3, #129	; 0x81
9000a9aa:	d83d      	bhi.n	9000aa28 <GetPosition+0xd8>
9000a9ac:	4b82      	ldr	r3, [pc, #520]	; (9000abb8 <GetPosition+0x268>)
9000a9ae:	881b      	ldrh	r3, [r3, #0]
9000a9b0:	2b05      	cmp	r3, #5
9000a9b2:	d939      	bls.n	9000aa28 <GetPosition+0xd8>
9000a9b4:	4b80      	ldr	r3, [pc, #512]	; (9000abb8 <GetPosition+0x268>)
9000a9b6:	881b      	ldrh	r3, [r3, #0]
9000a9b8:	2b22      	cmp	r3, #34	; 0x22
9000a9ba:	d835      	bhi.n	9000aa28 <GetPosition+0xd8>
  {
    if (flag == 0)
9000a9bc:	4b81      	ldr	r3, [pc, #516]	; (9000abc4 <GetPosition+0x274>)
9000a9be:	f993 3000 	ldrsb.w	r3, [r3]
9000a9c2:	2b00      	cmp	r3, #0
9000a9c4:	d10b      	bne.n	9000a9de <GetPosition+0x8e>
    {
      UTIL_LCD_DrawRect(100, 11, 20, 20, UTIL_LCD_COLOR_RED);
9000a9c6:	4b80      	ldr	r3, [pc, #512]	; (9000abc8 <GetPosition+0x278>)
9000a9c8:	9300      	str	r3, [sp, #0]
9000a9ca:	2314      	movs	r3, #20
9000a9cc:	2214      	movs	r2, #20
9000a9ce:	210b      	movs	r1, #11
9000a9d0:	2064      	movs	r0, #100	; 0x64
9000a9d2:	f000 fe3f 	bl	9000b654 <UTIL_LCD_DrawRect>
      flag = 1;
9000a9d6:	4b7b      	ldr	r3, [pc, #492]	; (9000abc4 <GetPosition+0x274>)
9000a9d8:	2201      	movs	r2, #1
9000a9da:	701a      	strb	r2, [r3, #0]
9000a9dc:	e024      	b.n	9000aa28 <GetPosition+0xd8>
    }
    else
    {
      flag = 0;
9000a9de:	4b79      	ldr	r3, [pc, #484]	; (9000abc4 <GetPosition+0x274>)
9000a9e0:	2200      	movs	r2, #0
9000a9e2:	701a      	strb	r2, [r3, #0]
      UTIL_LCD_DrawRect(118, 11, 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a9e4:	4b79      	ldr	r3, [pc, #484]	; (9000abcc <GetPosition+0x27c>)
9000a9e6:	9300      	str	r3, [sp, #0]
9000a9e8:	2312      	movs	r3, #18
9000a9ea:	2202      	movs	r2, #2
9000a9ec:	210b      	movs	r1, #11
9000a9ee:	2076      	movs	r0, #118	; 0x76
9000a9f0:	f000 fe30 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 29, 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
9000a9f4:	4b75      	ldr	r3, [pc, #468]	; (9000abcc <GetPosition+0x27c>)
9000a9f6:	9300      	str	r3, [sp, #0]
9000a9f8:	2302      	movs	r3, #2
9000a9fa:	2214      	movs	r2, #20
9000a9fc:	211d      	movs	r1, #29
9000a9fe:	2064      	movs	r0, #100	; 0x64
9000aa00:	f000 fe28 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 11, 20, 2, UTIL_LCD_COLOR_WHITE);
9000aa04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000aa08:	9300      	str	r3, [sp, #0]
9000aa0a:	2302      	movs	r3, #2
9000aa0c:	2214      	movs	r2, #20
9000aa0e:	210b      	movs	r1, #11
9000aa10:	2064      	movs	r0, #100	; 0x64
9000aa12:	f000 fe1f 	bl	9000b654 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 11, 2, 20, UTIL_LCD_COLOR_WHITE);
9000aa16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000aa1a:	9300      	str	r3, [sp, #0]
9000aa1c:	2314      	movs	r3, #20
9000aa1e:	2202      	movs	r2, #2
9000aa20:	210b      	movs	r1, #11
9000aa22:	2064      	movs	r0, #100	; 0x64
9000aa24:	f000 fe16 	bl	9000b654 <UTIL_LCD_DrawRect>
    }
  }

  if ((x > 10) && (x < 470) && (y > 43) && (y < 263))
9000aa28:	4b62      	ldr	r3, [pc, #392]	; (9000abb4 <GetPosition+0x264>)
9000aa2a:	881b      	ldrh	r3, [r3, #0]
9000aa2c:	2b0a      	cmp	r3, #10
9000aa2e:	f240 80bd 	bls.w	9000abac <GetPosition+0x25c>
9000aa32:	4b60      	ldr	r3, [pc, #384]	; (9000abb4 <GetPosition+0x264>)
9000aa34:	881b      	ldrh	r3, [r3, #0]
9000aa36:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
9000aa3a:	f080 80b7 	bcs.w	9000abac <GetPosition+0x25c>
9000aa3e:	4b5e      	ldr	r3, [pc, #376]	; (9000abb8 <GetPosition+0x268>)
9000aa40:	881b      	ldrh	r3, [r3, #0]
9000aa42:	2b2b      	cmp	r3, #43	; 0x2b
9000aa44:	f240 80b2 	bls.w	9000abac <GetPosition+0x25c>
9000aa48:	4b5b      	ldr	r3, [pc, #364]	; (9000abb8 <GetPosition+0x268>)
9000aa4a:	881b      	ldrh	r3, [r3, #0]
9000aa4c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
9000aa50:	f200 80ac 	bhi.w	9000abac <GetPosition+0x25c>
  {
    x = x - 10;
9000aa54:	4b57      	ldr	r3, [pc, #348]	; (9000abb4 <GetPosition+0x264>)
9000aa56:	881b      	ldrh	r3, [r3, #0]
9000aa58:	3b0a      	subs	r3, #10
9000aa5a:	b29a      	uxth	r2, r3
9000aa5c:	4b55      	ldr	r3, [pc, #340]	; (9000abb4 <GetPosition+0x264>)
9000aa5e:	801a      	strh	r2, [r3, #0]
    y = y - 43;
9000aa60:	4b55      	ldr	r3, [pc, #340]	; (9000abb8 <GetPosition+0x268>)
9000aa62:	881b      	ldrh	r3, [r3, #0]
9000aa64:	3b2b      	subs	r3, #43	; 0x2b
9000aa66:	b29a      	uxth	r2, r3
9000aa68:	4b53      	ldr	r3, [pc, #332]	; (9000abb8 <GetPosition+0x268>)
9000aa6a:	801a      	strh	r2, [r3, #0]
    x = x / 20;
9000aa6c:	4b51      	ldr	r3, [pc, #324]	; (9000abb4 <GetPosition+0x264>)
9000aa6e:	881b      	ldrh	r3, [r3, #0]
9000aa70:	4a57      	ldr	r2, [pc, #348]	; (9000abd0 <GetPosition+0x280>)
9000aa72:	fba2 2303 	umull	r2, r3, r2, r3
9000aa76:	091b      	lsrs	r3, r3, #4
9000aa78:	b29a      	uxth	r2, r3
9000aa7a:	4b4e      	ldr	r3, [pc, #312]	; (9000abb4 <GetPosition+0x264>)
9000aa7c:	801a      	strh	r2, [r3, #0]
    y = y / 20;
9000aa7e:	4b4e      	ldr	r3, [pc, #312]	; (9000abb8 <GetPosition+0x268>)
9000aa80:	881b      	ldrh	r3, [r3, #0]
9000aa82:	4a53      	ldr	r2, [pc, #332]	; (9000abd0 <GetPosition+0x280>)
9000aa84:	fba2 2303 	umull	r2, r3, r2, r3
9000aa88:	091b      	lsrs	r3, r3, #4
9000aa8a:	b29a      	uxth	r2, r3
9000aa8c:	4b4a      	ldr	r3, [pc, #296]	; (9000abb8 <GetPosition+0x268>)
9000aa8e:	801a      	strh	r2, [r3, #0]

    if (y >= 0 && y <= 11 && x <= 23 && x >= 0)
9000aa90:	4b49      	ldr	r3, [pc, #292]	; (9000abb8 <GetPosition+0x268>)
9000aa92:	881b      	ldrh	r3, [r3, #0]
9000aa94:	2b0b      	cmp	r3, #11
9000aa96:	f200 8089 	bhi.w	9000abac <GetPosition+0x25c>
9000aa9a:	4b46      	ldr	r3, [pc, #280]	; (9000abb4 <GetPosition+0x264>)
9000aa9c:	881b      	ldrh	r3, [r3, #0]
9000aa9e:	2b17      	cmp	r3, #23
9000aaa0:	f200 8084 	bhi.w	9000abac <GetPosition+0x25c>
    {
      Draw_Cvad(x, y);
9000aaa4:	4b43      	ldr	r3, [pc, #268]	; (9000abb4 <GetPosition+0x264>)
9000aaa6:	881b      	ldrh	r3, [r3, #0]
9000aaa8:	b25b      	sxtb	r3, r3
9000aaaa:	4a43      	ldr	r2, [pc, #268]	; (9000abb8 <GetPosition+0x268>)
9000aaac:	8812      	ldrh	r2, [r2, #0]
9000aaae:	b252      	sxtb	r2, r2
9000aab0:	4611      	mov	r1, r2
9000aab2:	4618      	mov	r0, r3
9000aab4:	f7ff fe8c 	bl	9000a7d0 <Draw_Cvad>
      if (tab[x][y] == 0)
9000aab8:	4b3e      	ldr	r3, [pc, #248]	; (9000abb4 <GetPosition+0x264>)
9000aaba:	881b      	ldrh	r3, [r3, #0]
9000aabc:	461a      	mov	r2, r3
9000aabe:	4b3e      	ldr	r3, [pc, #248]	; (9000abb8 <GetPosition+0x268>)
9000aac0:	881b      	ldrh	r3, [r3, #0]
9000aac2:	4618      	mov	r0, r3
9000aac4:	4943      	ldr	r1, [pc, #268]	; (9000abd4 <GetPosition+0x284>)
9000aac6:	4613      	mov	r3, r2
9000aac8:	009b      	lsls	r3, r3, #2
9000aaca:	4413      	add	r3, r2
9000aacc:	005b      	lsls	r3, r3, #1
9000aace:	4413      	add	r3, r2
9000aad0:	440b      	add	r3, r1
9000aad2:	4403      	add	r3, r0
9000aad4:	f993 3000 	ldrsb.w	r3, [r3]
9000aad8:	2b00      	cmp	r3, #0
9000aada:	d109      	bne.n	9000aaf0 <GetPosition+0x1a0>
      {
        Open_empty(x, y);
9000aadc:	4b35      	ldr	r3, [pc, #212]	; (9000abb4 <GetPosition+0x264>)
9000aade:	881b      	ldrh	r3, [r3, #0]
9000aae0:	b25b      	sxtb	r3, r3
9000aae2:	4a35      	ldr	r2, [pc, #212]	; (9000abb8 <GetPosition+0x268>)
9000aae4:	8812      	ldrh	r2, [r2, #0]
9000aae6:	b252      	sxtb	r2, r2
9000aae8:	4611      	mov	r1, r2
9000aaea:	4618      	mov	r0, r3
9000aaec:	f000 f874 	bl	9000abd8 <Open_empty>
      }

      if (tab[x][y] == -1)
9000aaf0:	4b30      	ldr	r3, [pc, #192]	; (9000abb4 <GetPosition+0x264>)
9000aaf2:	881b      	ldrh	r3, [r3, #0]
9000aaf4:	461a      	mov	r2, r3
9000aaf6:	4b30      	ldr	r3, [pc, #192]	; (9000abb8 <GetPosition+0x268>)
9000aaf8:	881b      	ldrh	r3, [r3, #0]
9000aafa:	4618      	mov	r0, r3
9000aafc:	4935      	ldr	r1, [pc, #212]	; (9000abd4 <GetPosition+0x284>)
9000aafe:	4613      	mov	r3, r2
9000ab00:	009b      	lsls	r3, r3, #2
9000ab02:	4413      	add	r3, r2
9000ab04:	005b      	lsls	r3, r3, #1
9000ab06:	4413      	add	r3, r2
9000ab08:	440b      	add	r3, r1
9000ab0a:	4403      	add	r3, r0
9000ab0c:	f993 3000 	ldrsb.w	r3, [r3]
9000ab10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000ab14:	d14a      	bne.n	9000abac <GetPosition+0x25c>
      {
        if (flag == 1)
9000ab16:	4b2b      	ldr	r3, [pc, #172]	; (9000abc4 <GetPosition+0x274>)
9000ab18:	f993 3000 	ldrsb.w	r3, [r3]
9000ab1c:	2b01      	cmp	r3, #1
9000ab1e:	d129      	bne.n	9000ab74 <GetPosition+0x224>
        {
          UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_GREEN);
9000ab20:	4b24      	ldr	r3, [pc, #144]	; (9000abb4 <GetPosition+0x264>)
9000ab22:	881b      	ldrh	r3, [r3, #0]
9000ab24:	461a      	mov	r2, r3
9000ab26:	4613      	mov	r3, r2
9000ab28:	009b      	lsls	r3, r3, #2
9000ab2a:	4413      	add	r3, r2
9000ab2c:	009b      	lsls	r3, r3, #2
9000ab2e:	330a      	adds	r3, #10
9000ab30:	4618      	mov	r0, r3
9000ab32:	4b21      	ldr	r3, [pc, #132]	; (9000abb8 <GetPosition+0x268>)
9000ab34:	881b      	ldrh	r3, [r3, #0]
9000ab36:	461a      	mov	r2, r3
9000ab38:	4613      	mov	r3, r2
9000ab3a:	009b      	lsls	r3, r3, #2
9000ab3c:	4413      	add	r3, r2
9000ab3e:	009b      	lsls	r3, r3, #2
9000ab40:	332b      	adds	r3, #43	; 0x2b
9000ab42:	4619      	mov	r1, r3
9000ab44:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
9000ab48:	9300      	str	r3, [sp, #0]
9000ab4a:	2314      	movs	r3, #20
9000ab4c:	2214      	movs	r2, #20
9000ab4e:	f000 fd81 	bl	9000b654 <UTIL_LCD_DrawRect>
          tab[x][y] = -2;
9000ab52:	4b18      	ldr	r3, [pc, #96]	; (9000abb4 <GetPosition+0x264>)
9000ab54:	881b      	ldrh	r3, [r3, #0]
9000ab56:	461a      	mov	r2, r3
9000ab58:	4b17      	ldr	r3, [pc, #92]	; (9000abb8 <GetPosition+0x268>)
9000ab5a:	881b      	ldrh	r3, [r3, #0]
9000ab5c:	4618      	mov	r0, r3
9000ab5e:	491d      	ldr	r1, [pc, #116]	; (9000abd4 <GetPosition+0x284>)
9000ab60:	4613      	mov	r3, r2
9000ab62:	009b      	lsls	r3, r3, #2
9000ab64:	4413      	add	r3, r2
9000ab66:	005b      	lsls	r3, r3, #1
9000ab68:	4413      	add	r3, r2
9000ab6a:	440b      	add	r3, r1
9000ab6c:	4403      	add	r3, r0
9000ab6e:	22fe      	movs	r2, #254	; 0xfe
9000ab70:	701a      	strb	r2, [r3, #0]
9000ab72:	e01b      	b.n	9000abac <GetPosition+0x25c>
        }
        else
        {
          UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_RED);
9000ab74:	4b0f      	ldr	r3, [pc, #60]	; (9000abb4 <GetPosition+0x264>)
9000ab76:	881b      	ldrh	r3, [r3, #0]
9000ab78:	461a      	mov	r2, r3
9000ab7a:	4613      	mov	r3, r2
9000ab7c:	009b      	lsls	r3, r3, #2
9000ab7e:	4413      	add	r3, r2
9000ab80:	009b      	lsls	r3, r3, #2
9000ab82:	330a      	adds	r3, #10
9000ab84:	4618      	mov	r0, r3
9000ab86:	4b0c      	ldr	r3, [pc, #48]	; (9000abb8 <GetPosition+0x268>)
9000ab88:	881b      	ldrh	r3, [r3, #0]
9000ab8a:	461a      	mov	r2, r3
9000ab8c:	4613      	mov	r3, r2
9000ab8e:	009b      	lsls	r3, r3, #2
9000ab90:	4413      	add	r3, r2
9000ab92:	009b      	lsls	r3, r3, #2
9000ab94:	332b      	adds	r3, #43	; 0x2b
9000ab96:	4619      	mov	r1, r3
9000ab98:	4b0b      	ldr	r3, [pc, #44]	; (9000abc8 <GetPosition+0x278>)
9000ab9a:	9300      	str	r3, [sp, #0]
9000ab9c:	2314      	movs	r3, #20
9000ab9e:	2214      	movs	r2, #20
9000aba0:	f000 fd58 	bl	9000b654 <UTIL_LCD_DrawRect>
          Bomb_Hit();
9000aba4:	f7ff fda0 	bl	9000a6e8 <Bomb_Hit>
9000aba8:	e000      	b.n	9000abac <GetPosition+0x25c>
    return;
9000abaa:	bf00      	nop
        }
      }
    }
  }
}
9000abac:	46bd      	mov	sp, r7
9000abae:	bd80      	pop	{r7, pc}
9000abb0:	200012cc 	.word	0x200012cc
9000abb4:	200012ba 	.word	0x200012ba
9000abb8:	200012bc 	.word	0x200012bc
9000abbc:	200012be 	.word	0x200012be
9000abc0:	200012c0 	.word	0x200012c0
9000abc4:	200012b9 	.word	0x200012b9
9000abc8:	ffff0000 	.word	0xffff0000
9000abcc:	ff4f5251 	.word	0xff4f5251
9000abd0:	cccccccd 	.word	0xcccccccd
9000abd4:	200011bc 	.word	0x200011bc

9000abd8 <Open_empty>:
 * @brief  Opens empty squears
 * @param  None
 * @retval None
 */
static void Open_empty(int8_t x, int8_t y)
{
9000abd8:	b580      	push	{r7, lr}
9000abda:	b082      	sub	sp, #8
9000abdc:	af00      	add	r7, sp, #0
9000abde:	4603      	mov	r3, r0
9000abe0:	460a      	mov	r2, r1
9000abe2:	71fb      	strb	r3, [r7, #7]
9000abe4:	4613      	mov	r3, r2
9000abe6:	71bb      	strb	r3, [r7, #6]
  Draw_Cvad(x, y);
9000abe8:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000abec:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000abf0:	4611      	mov	r1, r2
9000abf2:	4618      	mov	r0, r3
9000abf4:	f7ff fdec 	bl	9000a7d0 <Draw_Cvad>
  tab[x][y] = -3;
9000abf8:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000abfc:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ac00:	48ba      	ldr	r0, [pc, #744]	; (9000aeec <Open_empty+0x314>)
9000ac02:	4613      	mov	r3, r2
9000ac04:	009b      	lsls	r3, r3, #2
9000ac06:	4413      	add	r3, r2
9000ac08:	005b      	lsls	r3, r3, #1
9000ac0a:	4413      	add	r3, r2
9000ac0c:	4403      	add	r3, r0
9000ac0e:	440b      	add	r3, r1
9000ac10:	22fd      	movs	r2, #253	; 0xfd
9000ac12:	701a      	strb	r2, [r3, #0]
  if (tab[x][y] != -1)
9000ac14:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac18:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ac1c:	48b3      	ldr	r0, [pc, #716]	; (9000aeec <Open_empty+0x314>)
9000ac1e:	4613      	mov	r3, r2
9000ac20:	009b      	lsls	r3, r3, #2
9000ac22:	4413      	add	r3, r2
9000ac24:	005b      	lsls	r3, r3, #1
9000ac26:	4413      	add	r3, r2
9000ac28:	4403      	add	r3, r0
9000ac2a:	440b      	add	r3, r1
9000ac2c:	f993 3000 	ldrsb.w	r3, [r3]
9000ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000ac34:	f000 8168 	beq.w	9000af08 <Open_empty+0x330>
  {
    if (y > 0)
9000ac38:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000ac3c:	2b00      	cmp	r3, #0
9000ac3e:	f340 8084 	ble.w	9000ad4a <Open_empty+0x172>
    {
      if (tab[x][y - 1] == 0)
9000ac42:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ac46:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000ac4a:	1e59      	subs	r1, r3, #1
9000ac4c:	48a7      	ldr	r0, [pc, #668]	; (9000aeec <Open_empty+0x314>)
9000ac4e:	4613      	mov	r3, r2
9000ac50:	009b      	lsls	r3, r3, #2
9000ac52:	4413      	add	r3, r2
9000ac54:	005b      	lsls	r3, r3, #1
9000ac56:	4413      	add	r3, r2
9000ac58:	4403      	add	r3, r0
9000ac5a:	440b      	add	r3, r1
9000ac5c:	f993 3000 	ldrsb.w	r3, [r3]
9000ac60:	2b00      	cmp	r3, #0
9000ac62:	d10a      	bne.n	9000ac7a <Open_empty+0xa2>
        Open_empty(x, y - 1);
9000ac64:	79bb      	ldrb	r3, [r7, #6]
9000ac66:	3b01      	subs	r3, #1
9000ac68:	b2db      	uxtb	r3, r3
9000ac6a:	b25a      	sxtb	r2, r3
9000ac6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ac70:	4611      	mov	r1, r2
9000ac72:	4618      	mov	r0, r3
9000ac74:	f7ff ffb0 	bl	9000abd8 <Open_empty>
9000ac78:	e009      	b.n	9000ac8e <Open_empty+0xb6>
      else
        Draw_Cvad(x, y - 1);
9000ac7a:	79bb      	ldrb	r3, [r7, #6]
9000ac7c:	3b01      	subs	r3, #1
9000ac7e:	b2db      	uxtb	r3, r3
9000ac80:	b25a      	sxtb	r2, r3
9000ac82:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ac86:	4611      	mov	r1, r2
9000ac88:	4618      	mov	r0, r3
9000ac8a:	f7ff fda1 	bl	9000a7d0 <Draw_Cvad>
      if (x > 0)
9000ac8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ac92:	2b00      	cmp	r3, #0
9000ac94:	dd2a      	ble.n	9000acec <Open_empty+0x114>
      {
        if (tab[x - 1][y - 1] == 0)
9000ac96:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ac9a:	1e5a      	subs	r2, r3, #1
9000ac9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000aca0:	1e59      	subs	r1, r3, #1
9000aca2:	4892      	ldr	r0, [pc, #584]	; (9000aeec <Open_empty+0x314>)
9000aca4:	4613      	mov	r3, r2
9000aca6:	009b      	lsls	r3, r3, #2
9000aca8:	4413      	add	r3, r2
9000acaa:	005b      	lsls	r3, r3, #1
9000acac:	4413      	add	r3, r2
9000acae:	4403      	add	r3, r0
9000acb0:	440b      	add	r3, r1
9000acb2:	f993 3000 	ldrsb.w	r3, [r3]
9000acb6:	2b00      	cmp	r3, #0
9000acb8:	d10c      	bne.n	9000acd4 <Open_empty+0xfc>
          Open_empty(x - 1, y - 1);
9000acba:	79fb      	ldrb	r3, [r7, #7]
9000acbc:	3b01      	subs	r3, #1
9000acbe:	b2db      	uxtb	r3, r3
9000acc0:	b25a      	sxtb	r2, r3
9000acc2:	79bb      	ldrb	r3, [r7, #6]
9000acc4:	3b01      	subs	r3, #1
9000acc6:	b2db      	uxtb	r3, r3
9000acc8:	b25b      	sxtb	r3, r3
9000acca:	4619      	mov	r1, r3
9000accc:	4610      	mov	r0, r2
9000acce:	f7ff ff83 	bl	9000abd8 <Open_empty>
9000acd2:	e00b      	b.n	9000acec <Open_empty+0x114>
        else
          Draw_Cvad(x - 1, y - 1);
9000acd4:	79fb      	ldrb	r3, [r7, #7]
9000acd6:	3b01      	subs	r3, #1
9000acd8:	b2db      	uxtb	r3, r3
9000acda:	b25a      	sxtb	r2, r3
9000acdc:	79bb      	ldrb	r3, [r7, #6]
9000acde:	3b01      	subs	r3, #1
9000ace0:	b2db      	uxtb	r3, r3
9000ace2:	b25b      	sxtb	r3, r3
9000ace4:	4619      	mov	r1, r3
9000ace6:	4610      	mov	r0, r2
9000ace8:	f7ff fd72 	bl	9000a7d0 <Draw_Cvad>
      }
      if (x < 22)
9000acec:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000acf0:	2b15      	cmp	r3, #21
9000acf2:	dc2a      	bgt.n	9000ad4a <Open_empty+0x172>
      {
        if (tab[x + 1][y - 1] == 0)
9000acf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000acf8:	1c5a      	adds	r2, r3, #1
9000acfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000acfe:	1e59      	subs	r1, r3, #1
9000ad00:	487a      	ldr	r0, [pc, #488]	; (9000aeec <Open_empty+0x314>)
9000ad02:	4613      	mov	r3, r2
9000ad04:	009b      	lsls	r3, r3, #2
9000ad06:	4413      	add	r3, r2
9000ad08:	005b      	lsls	r3, r3, #1
9000ad0a:	4413      	add	r3, r2
9000ad0c:	4403      	add	r3, r0
9000ad0e:	440b      	add	r3, r1
9000ad10:	f993 3000 	ldrsb.w	r3, [r3]
9000ad14:	2b00      	cmp	r3, #0
9000ad16:	d10c      	bne.n	9000ad32 <Open_empty+0x15a>
          Open_empty(x + 1, y - 1);
9000ad18:	79fb      	ldrb	r3, [r7, #7]
9000ad1a:	3301      	adds	r3, #1
9000ad1c:	b2db      	uxtb	r3, r3
9000ad1e:	b25a      	sxtb	r2, r3
9000ad20:	79bb      	ldrb	r3, [r7, #6]
9000ad22:	3b01      	subs	r3, #1
9000ad24:	b2db      	uxtb	r3, r3
9000ad26:	b25b      	sxtb	r3, r3
9000ad28:	4619      	mov	r1, r3
9000ad2a:	4610      	mov	r0, r2
9000ad2c:	f7ff ff54 	bl	9000abd8 <Open_empty>
9000ad30:	e00b      	b.n	9000ad4a <Open_empty+0x172>
        else
          Draw_Cvad(x + 1, y - 1);
9000ad32:	79fb      	ldrb	r3, [r7, #7]
9000ad34:	3301      	adds	r3, #1
9000ad36:	b2db      	uxtb	r3, r3
9000ad38:	b25a      	sxtb	r2, r3
9000ad3a:	79bb      	ldrb	r3, [r7, #6]
9000ad3c:	3b01      	subs	r3, #1
9000ad3e:	b2db      	uxtb	r3, r3
9000ad40:	b25b      	sxtb	r3, r3
9000ad42:	4619      	mov	r1, r3
9000ad44:	4610      	mov	r0, r2
9000ad46:	f7ff fd43 	bl	9000a7d0 <Draw_Cvad>
      }
    }
    if (tab[x - 1][y] == 0 && x > 0)
9000ad4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ad4e:	1e5a      	subs	r2, r3, #1
9000ad50:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ad54:	4865      	ldr	r0, [pc, #404]	; (9000aeec <Open_empty+0x314>)
9000ad56:	4613      	mov	r3, r2
9000ad58:	009b      	lsls	r3, r3, #2
9000ad5a:	4413      	add	r3, r2
9000ad5c:	005b      	lsls	r3, r3, #1
9000ad5e:	4413      	add	r3, r2
9000ad60:	4403      	add	r3, r0
9000ad62:	440b      	add	r3, r1
9000ad64:	f993 3000 	ldrsb.w	r3, [r3]
9000ad68:	2b00      	cmp	r3, #0
9000ad6a:	d10e      	bne.n	9000ad8a <Open_empty+0x1b2>
9000ad6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ad70:	2b00      	cmp	r3, #0
9000ad72:	dd0a      	ble.n	9000ad8a <Open_empty+0x1b2>
      Open_empty(x - 1, y);
9000ad74:	79fb      	ldrb	r3, [r7, #7]
9000ad76:	3b01      	subs	r3, #1
9000ad78:	b2db      	uxtb	r3, r3
9000ad7a:	b25b      	sxtb	r3, r3
9000ad7c:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ad80:	4611      	mov	r1, r2
9000ad82:	4618      	mov	r0, r3
9000ad84:	f7ff ff28 	bl	9000abd8 <Open_empty>
9000ad88:	e009      	b.n	9000ad9e <Open_empty+0x1c6>
    else
      Draw_Cvad(x - 1, y);
9000ad8a:	79fb      	ldrb	r3, [r7, #7]
9000ad8c:	3b01      	subs	r3, #1
9000ad8e:	b2db      	uxtb	r3, r3
9000ad90:	b25b      	sxtb	r3, r3
9000ad92:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000ad96:	4611      	mov	r1, r2
9000ad98:	4618      	mov	r0, r3
9000ad9a:	f7ff fd19 	bl	9000a7d0 <Draw_Cvad>
    if (tab[x + 1][y] == 0 && x < 22)
9000ad9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ada2:	1c5a      	adds	r2, r3, #1
9000ada4:	f997 1006 	ldrsb.w	r1, [r7, #6]
9000ada8:	4850      	ldr	r0, [pc, #320]	; (9000aeec <Open_empty+0x314>)
9000adaa:	4613      	mov	r3, r2
9000adac:	009b      	lsls	r3, r3, #2
9000adae:	4413      	add	r3, r2
9000adb0:	005b      	lsls	r3, r3, #1
9000adb2:	4413      	add	r3, r2
9000adb4:	4403      	add	r3, r0
9000adb6:	440b      	add	r3, r1
9000adb8:	f993 3000 	ldrsb.w	r3, [r3]
9000adbc:	2b00      	cmp	r3, #0
9000adbe:	d10e      	bne.n	9000adde <Open_empty+0x206>
9000adc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000adc4:	2b15      	cmp	r3, #21
9000adc6:	dc0a      	bgt.n	9000adde <Open_empty+0x206>
      Open_empty(x + 1, y);
9000adc8:	79fb      	ldrb	r3, [r7, #7]
9000adca:	3301      	adds	r3, #1
9000adcc:	b2db      	uxtb	r3, r3
9000adce:	b25b      	sxtb	r3, r3
9000add0:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000add4:	4611      	mov	r1, r2
9000add6:	4618      	mov	r0, r3
9000add8:	f7ff fefe 	bl	9000abd8 <Open_empty>
9000addc:	e009      	b.n	9000adf2 <Open_empty+0x21a>
    else
      Draw_Cvad(x + 1, y);
9000adde:	79fb      	ldrb	r3, [r7, #7]
9000ade0:	3301      	adds	r3, #1
9000ade2:	b2db      	uxtb	r3, r3
9000ade4:	b25b      	sxtb	r3, r3
9000ade6:	f997 2006 	ldrsb.w	r2, [r7, #6]
9000adea:	4611      	mov	r1, r2
9000adec:	4618      	mov	r0, r3
9000adee:	f7ff fcef 	bl	9000a7d0 <Draw_Cvad>
    if (y < 10)
9000adf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000adf6:	2b09      	cmp	r3, #9
9000adf8:	f300 8086 	bgt.w	9000af08 <Open_empty+0x330>
    {
      if (tab[x][y + 1] == 0)
9000adfc:	f997 2007 	ldrsb.w	r2, [r7, #7]
9000ae00:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000ae04:	1c59      	adds	r1, r3, #1
9000ae06:	4839      	ldr	r0, [pc, #228]	; (9000aeec <Open_empty+0x314>)
9000ae08:	4613      	mov	r3, r2
9000ae0a:	009b      	lsls	r3, r3, #2
9000ae0c:	4413      	add	r3, r2
9000ae0e:	005b      	lsls	r3, r3, #1
9000ae10:	4413      	add	r3, r2
9000ae12:	4403      	add	r3, r0
9000ae14:	440b      	add	r3, r1
9000ae16:	f993 3000 	ldrsb.w	r3, [r3]
9000ae1a:	2b00      	cmp	r3, #0
9000ae1c:	d10a      	bne.n	9000ae34 <Open_empty+0x25c>
        Open_empty(x, y + 1);
9000ae1e:	79bb      	ldrb	r3, [r7, #6]
9000ae20:	3301      	adds	r3, #1
9000ae22:	b2db      	uxtb	r3, r3
9000ae24:	b25a      	sxtb	r2, r3
9000ae26:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ae2a:	4611      	mov	r1, r2
9000ae2c:	4618      	mov	r0, r3
9000ae2e:	f7ff fed3 	bl	9000abd8 <Open_empty>
9000ae32:	e009      	b.n	9000ae48 <Open_empty+0x270>
      else
        Draw_Cvad(x, y + 1);
9000ae34:	79bb      	ldrb	r3, [r7, #6]
9000ae36:	3301      	adds	r3, #1
9000ae38:	b2db      	uxtb	r3, r3
9000ae3a:	b25a      	sxtb	r2, r3
9000ae3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ae40:	4611      	mov	r1, r2
9000ae42:	4618      	mov	r0, r3
9000ae44:	f7ff fcc4 	bl	9000a7d0 <Draw_Cvad>
      if (x > 0)
9000ae48:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ae4c:	2b00      	cmp	r3, #0
9000ae4e:	dd2a      	ble.n	9000aea6 <Open_empty+0x2ce>
      {
        if (tab[x - 1][y + 1] == 0)
9000ae50:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000ae54:	1e5a      	subs	r2, r3, #1
9000ae56:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000ae5a:	1c59      	adds	r1, r3, #1
9000ae5c:	4823      	ldr	r0, [pc, #140]	; (9000aeec <Open_empty+0x314>)
9000ae5e:	4613      	mov	r3, r2
9000ae60:	009b      	lsls	r3, r3, #2
9000ae62:	4413      	add	r3, r2
9000ae64:	005b      	lsls	r3, r3, #1
9000ae66:	4413      	add	r3, r2
9000ae68:	4403      	add	r3, r0
9000ae6a:	440b      	add	r3, r1
9000ae6c:	f993 3000 	ldrsb.w	r3, [r3]
9000ae70:	2b00      	cmp	r3, #0
9000ae72:	d10c      	bne.n	9000ae8e <Open_empty+0x2b6>
          Open_empty(x - 1, y + 1);
9000ae74:	79fb      	ldrb	r3, [r7, #7]
9000ae76:	3b01      	subs	r3, #1
9000ae78:	b2db      	uxtb	r3, r3
9000ae7a:	b25a      	sxtb	r2, r3
9000ae7c:	79bb      	ldrb	r3, [r7, #6]
9000ae7e:	3301      	adds	r3, #1
9000ae80:	b2db      	uxtb	r3, r3
9000ae82:	b25b      	sxtb	r3, r3
9000ae84:	4619      	mov	r1, r3
9000ae86:	4610      	mov	r0, r2
9000ae88:	f7ff fea6 	bl	9000abd8 <Open_empty>
9000ae8c:	e00b      	b.n	9000aea6 <Open_empty+0x2ce>
        else
          Draw_Cvad(x - 1, y + 1);
9000ae8e:	79fb      	ldrb	r3, [r7, #7]
9000ae90:	3b01      	subs	r3, #1
9000ae92:	b2db      	uxtb	r3, r3
9000ae94:	b25a      	sxtb	r2, r3
9000ae96:	79bb      	ldrb	r3, [r7, #6]
9000ae98:	3301      	adds	r3, #1
9000ae9a:	b2db      	uxtb	r3, r3
9000ae9c:	b25b      	sxtb	r3, r3
9000ae9e:	4619      	mov	r1, r3
9000aea0:	4610      	mov	r0, r2
9000aea2:	f7ff fc95 	bl	9000a7d0 <Draw_Cvad>
      }
      if (x < 22)
9000aea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000aeaa:	2b15      	cmp	r3, #21
9000aeac:	dc2c      	bgt.n	9000af08 <Open_empty+0x330>
      {
        if (tab[x + 1][y + 1] == 0)
9000aeae:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000aeb2:	1c5a      	adds	r2, r3, #1
9000aeb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
9000aeb8:	1c59      	adds	r1, r3, #1
9000aeba:	480c      	ldr	r0, [pc, #48]	; (9000aeec <Open_empty+0x314>)
9000aebc:	4613      	mov	r3, r2
9000aebe:	009b      	lsls	r3, r3, #2
9000aec0:	4413      	add	r3, r2
9000aec2:	005b      	lsls	r3, r3, #1
9000aec4:	4413      	add	r3, r2
9000aec6:	4403      	add	r3, r0
9000aec8:	440b      	add	r3, r1
9000aeca:	f993 3000 	ldrsb.w	r3, [r3]
9000aece:	2b00      	cmp	r3, #0
9000aed0:	d10e      	bne.n	9000aef0 <Open_empty+0x318>
          Open_empty(x + 1, y + 1);
9000aed2:	79fb      	ldrb	r3, [r7, #7]
9000aed4:	3301      	adds	r3, #1
9000aed6:	b2db      	uxtb	r3, r3
9000aed8:	b25a      	sxtb	r2, r3
9000aeda:	79bb      	ldrb	r3, [r7, #6]
9000aedc:	3301      	adds	r3, #1
9000aede:	b2db      	uxtb	r3, r3
9000aee0:	b25b      	sxtb	r3, r3
9000aee2:	4619      	mov	r1, r3
9000aee4:	4610      	mov	r0, r2
9000aee6:	f7ff fe77 	bl	9000abd8 <Open_empty>
        else
          Draw_Cvad(x + 1, y + 1);
      }
    }
  }
}
9000aeea:	e00d      	b.n	9000af08 <Open_empty+0x330>
9000aeec:	200011bc 	.word	0x200011bc
          Draw_Cvad(x + 1, y + 1);
9000aef0:	79fb      	ldrb	r3, [r7, #7]
9000aef2:	3301      	adds	r3, #1
9000aef4:	b2db      	uxtb	r3, r3
9000aef6:	b25a      	sxtb	r2, r3
9000aef8:	79bb      	ldrb	r3, [r7, #6]
9000aefa:	3301      	adds	r3, #1
9000aefc:	b2db      	uxtb	r3, r3
9000aefe:	b25b      	sxtb	r3, r3
9000af00:	4619      	mov	r1, r3
9000af02:	4610      	mov	r0, r2
9000af04:	f7ff fc64 	bl	9000a7d0 <Draw_Cvad>
}
9000af08:	bf00      	nop
9000af0a:	3708      	adds	r7, #8
9000af0c:	46bd      	mov	sp, r7
9000af0e:	bd80      	pop	{r7, pc}

9000af10 <__io_putchar>:
/**
  * @brief  Redirect the printf to the LCD
  * @retval None
 */
UTIL_LCD_TRACE_PUTCHAR
{
9000af10:	b590      	push	{r4, r7, lr}
9000af12:	b087      	sub	sp, #28
9000af14:	af00      	add	r7, sp, #0
9000af16:	6078      	str	r0, [r7, #4]
  uint32_t x_size;

  BSP_LCD_GetXSize(0, &x_size);
9000af18:	f107 030c 	add.w	r3, r7, #12
9000af1c:	4619      	mov	r1, r3
9000af1e:	2000      	movs	r0, #0
9000af20:	f7f7 f89e 	bl	90002060 <BSP_LCD_GetXSize>

  sFONT *cFont = UTIL_LCD_GetFont();
9000af24:	f000 f9ee 	bl	9000b304 <UTIL_LCD_GetFont>
9000af28:	6138      	str	r0, [r7, #16]
  uint32_t idx;

  if(LcdTrace_Ctx.Lock == DISABLE)
9000af2a:	4b5e      	ldr	r3, [pc, #376]	; (9000b0a4 <__io_putchar+0x194>)
9000af2c:	789b      	ldrb	r3, [r3, #2]
9000af2e:	2b00      	cmp	r3, #0
9000af30:	f040 80b2 	bne.w	9000b098 <__io_putchar+0x188>
  {
    if(LcdTrace_Ctx.ScrollActive == ENABLE)
9000af34:	4b5b      	ldr	r3, [pc, #364]	; (9000b0a4 <__io_putchar+0x194>)
9000af36:	785b      	ldrb	r3, [r3, #1]
9000af38:	2b01      	cmp	r3, #1
9000af3a:	d110      	bne.n	9000af5e <__io_putchar+0x4e>
    {
      LcdTrace_Ctx.CacheBufferYptrBottom = LcdTrace_Ctx.CacheBufferYptrBottomBack;
9000af3c:	4b59      	ldr	r3, [pc, #356]	; (9000b0a4 <__io_putchar+0x194>)
9000af3e:	899a      	ldrh	r2, [r3, #12]
9000af40:	4b58      	ldr	r3, [pc, #352]	; (9000b0a4 <__io_putchar+0x194>)
9000af42:	811a      	strh	r2, [r3, #8]
      LcdTrace_Ctx.CacheBufferYptrTop    = LcdTrace_Ctx.CacheBufferYptrTopBack;
9000af44:	4b57      	ldr	r3, [pc, #348]	; (9000b0a4 <__io_putchar+0x194>)
9000af46:	895a      	ldrh	r2, [r3, #10]
9000af48:	4b56      	ldr	r3, [pc, #344]	; (9000b0a4 <__io_putchar+0x194>)
9000af4a:	80da      	strh	r2, [r3, #6]
      LcdTrace_Ctx.ScrollActive = DISABLE;
9000af4c:	4b55      	ldr	r3, [pc, #340]	; (9000b0a4 <__io_putchar+0x194>)
9000af4e:	2200      	movs	r2, #0
9000af50:	705a      	strb	r2, [r3, #1]
      LcdTrace_Ctx.Scrolled = DISABLE;
9000af52:	4b54      	ldr	r3, [pc, #336]	; (9000b0a4 <__io_putchar+0x194>)
9000af54:	2200      	movs	r2, #0
9000af56:	70da      	strb	r2, [r3, #3]
      LcdTrace_Ctx.ScrollBackStep = 0;
9000af58:	4b52      	ldr	r3, [pc, #328]	; (9000b0a4 <__io_putchar+0x194>)
9000af5a:	2200      	movs	r2, #0
9000af5c:	81da      	strh	r2, [r3, #14]
    }

    if(( LcdTrace_Ctx.CacheBufferXptr < (x_size) /cFont->Width ) &&  ( ch != '\n'))
9000af5e:	4b51      	ldr	r3, [pc, #324]	; (9000b0a4 <__io_putchar+0x194>)
9000af60:	889b      	ldrh	r3, [r3, #4]
9000af62:	4619      	mov	r1, r3
9000af64:	68fb      	ldr	r3, [r7, #12]
9000af66:	693a      	ldr	r2, [r7, #16]
9000af68:	8892      	ldrh	r2, [r2, #4]
9000af6a:	fbb3 f3f2 	udiv	r3, r3, r2
9000af6e:	4299      	cmp	r1, r3
9000af70:	d218      	bcs.n	9000afa4 <__io_putchar+0x94>
9000af72:	687b      	ldr	r3, [r7, #4]
9000af74:	2b0a      	cmp	r3, #10
9000af76:	d015      	beq.n	9000afa4 <__io_putchar+0x94>
    {
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
9000af78:	4b4a      	ldr	r3, [pc, #296]	; (9000b0a4 <__io_putchar+0x194>)
9000af7a:	891b      	ldrh	r3, [r3, #8]
9000af7c:	4619      	mov	r1, r3
9000af7e:	4b49      	ldr	r3, [pc, #292]	; (9000b0a4 <__io_putchar+0x194>)
9000af80:	889b      	ldrh	r3, [r3, #4]
9000af82:	1c5a      	adds	r2, r3, #1
9000af84:	b290      	uxth	r0, r2
9000af86:	4a47      	ldr	r2, [pc, #284]	; (9000b0a4 <__io_putchar+0x194>)
9000af88:	8090      	strh	r0, [r2, #4]
9000af8a:	461c      	mov	r4, r3
9000af8c:	687b      	ldr	r3, [r7, #4]
9000af8e:	b2d8      	uxtb	r0, r3
9000af90:	4a45      	ldr	r2, [pc, #276]	; (9000b0a8 <__io_putchar+0x198>)
9000af92:	460b      	mov	r3, r1
9000af94:	015b      	lsls	r3, r3, #5
9000af96:	440b      	add	r3, r1
9000af98:	009b      	lsls	r3, r3, #2
9000af9a:	4413      	add	r3, r2
9000af9c:	4423      	add	r3, r4
9000af9e:	4602      	mov	r2, r0
9000afa0:	701a      	strb	r2, [r3, #0]
9000afa2:	e079      	b.n	9000b098 <__io_putchar+0x188>
    }
    else
    {
      if(LcdTrace_Ctx.CacheBufferYptrTop >= LcdTrace_Ctx.CacheBufferYptrBottom)
9000afa4:	4b3f      	ldr	r3, [pc, #252]	; (9000b0a4 <__io_putchar+0x194>)
9000afa6:	88da      	ldrh	r2, [r3, #6]
9000afa8:	4b3e      	ldr	r3, [pc, #248]	; (9000b0a4 <__io_putchar+0x194>)
9000afaa:	891b      	ldrh	r3, [r3, #8]
9000afac:	429a      	cmp	r2, r3
9000afae:	d314      	bcc.n	9000afda <__io_putchar+0xca>
      {

        if(LcdTrace_Ctx.CacheBufferYptrInvert == DISABLE)
9000afb0:	4b3c      	ldr	r3, [pc, #240]	; (9000b0a4 <__io_putchar+0x194>)
9000afb2:	781b      	ldrb	r3, [r3, #0]
9000afb4:	2b00      	cmp	r3, #0
9000afb6:	d10d      	bne.n	9000afd4 <__io_putchar+0xc4>
        {
          LcdTrace_Ctx.CacheBufferYptrTop++;
9000afb8:	4b3a      	ldr	r3, [pc, #232]	; (9000b0a4 <__io_putchar+0x194>)
9000afba:	88db      	ldrh	r3, [r3, #6]
9000afbc:	3301      	adds	r3, #1
9000afbe:	b29a      	uxth	r2, r3
9000afc0:	4b38      	ldr	r3, [pc, #224]	; (9000b0a4 <__io_putchar+0x194>)
9000afc2:	80da      	strh	r2, [r3, #6]

          if(LcdTrace_Ctx.CacheBufferYptrTop == LCD_CACHE_DEPTH)
9000afc4:	4b37      	ldr	r3, [pc, #220]	; (9000b0a4 <__io_putchar+0x194>)
9000afc6:	88db      	ldrh	r3, [r3, #6]
9000afc8:	2b77      	cmp	r3, #119	; 0x77
9000afca:	d106      	bne.n	9000afda <__io_putchar+0xca>
          {
            LcdTrace_Ctx.CacheBufferYptrTop = 0;
9000afcc:	4b35      	ldr	r3, [pc, #212]	; (9000b0a4 <__io_putchar+0x194>)
9000afce:	2200      	movs	r2, #0
9000afd0:	80da      	strh	r2, [r3, #6]
9000afd2:	e002      	b.n	9000afda <__io_putchar+0xca>
          }
        }
        else
        {
          LcdTrace_Ctx.CacheBufferYptrInvert = DISABLE;
9000afd4:	4b33      	ldr	r3, [pc, #204]	; (9000b0a4 <__io_putchar+0x194>)
9000afd6:	2200      	movs	r2, #0
9000afd8:	701a      	strb	r2, [r3, #0]
        }
      }

      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
9000afda:	4b32      	ldr	r3, [pc, #200]	; (9000b0a4 <__io_putchar+0x194>)
9000afdc:	889b      	ldrh	r3, [r3, #4]
9000afde:	617b      	str	r3, [r7, #20]
9000afe0:	e015      	b.n	9000b00e <__io_putchar+0xfe>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = ' ';
9000afe2:	4b30      	ldr	r3, [pc, #192]	; (9000b0a4 <__io_putchar+0x194>)
9000afe4:	891b      	ldrh	r3, [r3, #8]
9000afe6:	4619      	mov	r1, r3
9000afe8:	4b2e      	ldr	r3, [pc, #184]	; (9000b0a4 <__io_putchar+0x194>)
9000afea:	889b      	ldrh	r3, [r3, #4]
9000afec:	1c5a      	adds	r2, r3, #1
9000afee:	b290      	uxth	r0, r2
9000aff0:	4a2c      	ldr	r2, [pc, #176]	; (9000b0a4 <__io_putchar+0x194>)
9000aff2:	8090      	strh	r0, [r2, #4]
9000aff4:	4618      	mov	r0, r3
9000aff6:	4a2c      	ldr	r2, [pc, #176]	; (9000b0a8 <__io_putchar+0x198>)
9000aff8:	460b      	mov	r3, r1
9000affa:	015b      	lsls	r3, r3, #5
9000affc:	440b      	add	r3, r1
9000affe:	009b      	lsls	r3, r3, #2
9000b000:	4413      	add	r3, r2
9000b002:	4403      	add	r3, r0
9000b004:	2220      	movs	r2, #32
9000b006:	701a      	strb	r2, [r3, #0]
      for(idx = LcdTrace_Ctx.CacheBufferXptr ; idx < (x_size) /cFont->Width; idx++)
9000b008:	697b      	ldr	r3, [r7, #20]
9000b00a:	3301      	adds	r3, #1
9000b00c:	617b      	str	r3, [r7, #20]
9000b00e:	68fb      	ldr	r3, [r7, #12]
9000b010:	693a      	ldr	r2, [r7, #16]
9000b012:	8892      	ldrh	r2, [r2, #4]
9000b014:	fbb3 f3f2 	udiv	r3, r3, r2
9000b018:	697a      	ldr	r2, [r7, #20]
9000b01a:	429a      	cmp	r2, r3
9000b01c:	d3e1      	bcc.n	9000afe2 <__io_putchar+0xd2>
      }
      LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Color = LcdTrace_Ctx.LineColor;
9000b01e:	4b21      	ldr	r3, [pc, #132]	; (9000b0a4 <__io_putchar+0x194>)
9000b020:	891b      	ldrh	r3, [r3, #8]
9000b022:	4618      	mov	r0, r3
9000b024:	4b1f      	ldr	r3, [pc, #124]	; (9000b0a4 <__io_putchar+0x194>)
9000b026:	691a      	ldr	r2, [r3, #16]
9000b028:	491f      	ldr	r1, [pc, #124]	; (9000b0a8 <__io_putchar+0x198>)
9000b02a:	4603      	mov	r3, r0
9000b02c:	015b      	lsls	r3, r3, #5
9000b02e:	4403      	add	r3, r0
9000b030:	009b      	lsls	r3, r3, #2
9000b032:	440b      	add	r3, r1
9000b034:	3380      	adds	r3, #128	; 0x80
9000b036:	601a      	str	r2, [r3, #0]

      LcdTrace_Ctx.CacheBufferXptr = 0;
9000b038:	4b1a      	ldr	r3, [pc, #104]	; (9000b0a4 <__io_putchar+0x194>)
9000b03a:	2200      	movs	r2, #0
9000b03c:	809a      	strh	r2, [r3, #4]

      UTIL_LCD_TRACE_UpdateDisplay ();
9000b03e:	f000 f835 	bl	9000b0ac <UTIL_LCD_TRACE_UpdateDisplay>

      LcdTrace_Ctx.CacheBufferYptrBottom ++;
9000b042:	4b18      	ldr	r3, [pc, #96]	; (9000b0a4 <__io_putchar+0x194>)
9000b044:	891b      	ldrh	r3, [r3, #8]
9000b046:	3301      	adds	r3, #1
9000b048:	b29a      	uxth	r2, r3
9000b04a:	4b16      	ldr	r3, [pc, #88]	; (9000b0a4 <__io_putchar+0x194>)
9000b04c:	811a      	strh	r2, [r3, #8]

      if (LcdTrace_Ctx.CacheBufferYptrBottom == LCD_CACHE_DEPTH)
9000b04e:	4b15      	ldr	r3, [pc, #84]	; (9000b0a4 <__io_putchar+0x194>)
9000b050:	891b      	ldrh	r3, [r3, #8]
9000b052:	2b77      	cmp	r3, #119	; 0x77
9000b054:	d108      	bne.n	9000b068 <__io_putchar+0x158>
      {
        LcdTrace_Ctx.CacheBufferYptrBottom = 0;
9000b056:	4b13      	ldr	r3, [pc, #76]	; (9000b0a4 <__io_putchar+0x194>)
9000b058:	2200      	movs	r2, #0
9000b05a:	811a      	strh	r2, [r3, #8]
        LcdTrace_Ctx.CacheBufferYptrTop = 1;
9000b05c:	4b11      	ldr	r3, [pc, #68]	; (9000b0a4 <__io_putchar+0x194>)
9000b05e:	2201      	movs	r2, #1
9000b060:	80da      	strh	r2, [r3, #6]
        LcdTrace_Ctx.CacheBufferYptrInvert = ENABLE;
9000b062:	4b10      	ldr	r3, [pc, #64]	; (9000b0a4 <__io_putchar+0x194>)
9000b064:	2201      	movs	r2, #1
9000b066:	701a      	strb	r2, [r3, #0]
      }

      if( ch != '\n')
9000b068:	687b      	ldr	r3, [r7, #4]
9000b06a:	2b0a      	cmp	r3, #10
9000b06c:	d014      	beq.n	9000b098 <__io_putchar+0x188>
      {
        LCD_CacheBuffer[LcdTrace_Ctx.CacheBufferYptrBottom].Line[LcdTrace_Ctx.CacheBufferXptr++] = (uint16_t)ch;
9000b06e:	4b0d      	ldr	r3, [pc, #52]	; (9000b0a4 <__io_putchar+0x194>)
9000b070:	891b      	ldrh	r3, [r3, #8]
9000b072:	4619      	mov	r1, r3
9000b074:	4b0b      	ldr	r3, [pc, #44]	; (9000b0a4 <__io_putchar+0x194>)
9000b076:	889b      	ldrh	r3, [r3, #4]
9000b078:	1c5a      	adds	r2, r3, #1
9000b07a:	b290      	uxth	r0, r2
9000b07c:	4a09      	ldr	r2, [pc, #36]	; (9000b0a4 <__io_putchar+0x194>)
9000b07e:	8090      	strh	r0, [r2, #4]
9000b080:	461c      	mov	r4, r3
9000b082:	687b      	ldr	r3, [r7, #4]
9000b084:	b2d8      	uxtb	r0, r3
9000b086:	4a08      	ldr	r2, [pc, #32]	; (9000b0a8 <__io_putchar+0x198>)
9000b088:	460b      	mov	r3, r1
9000b08a:	015b      	lsls	r3, r3, #5
9000b08c:	440b      	add	r3, r1
9000b08e:	009b      	lsls	r3, r3, #2
9000b090:	4413      	add	r3, r2
9000b092:	4423      	add	r3, r4
9000b094:	4602      	mov	r2, r0
9000b096:	701a      	strb	r2, [r3, #0]
      }

    }
  }
  return ch;
9000b098:	687b      	ldr	r3, [r7, #4]
}
9000b09a:	4618      	mov	r0, r3
9000b09c:	371c      	adds	r7, #28
9000b09e:	46bd      	mov	sp, r7
9000b0a0:	bd90      	pop	{r4, r7, pc}
9000b0a2:	bf00      	nop
9000b0a4:	20005034 	.word	0x20005034
9000b0a8:	200012d8 	.word	0x200012d8

9000b0ac <UTIL_LCD_TRACE_UpdateDisplay>:
/**
  * @brief  Update the text area display
  * @retval None
  */
void UTIL_LCD_TRACE_UpdateDisplay (void)
{
9000b0ac:	b580      	push	{r7, lr}
9000b0ae:	b084      	sub	sp, #16
9000b0b0:	af00      	add	r7, sp, #0
  uint32_t cnt = 0U, length, ptr, index;
9000b0b2:	2300      	movs	r3, #0
9000b0b4:	60fb      	str	r3, [r7, #12]

  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
9000b0b6:	4b38      	ldr	r3, [pc, #224]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0b8:	891b      	ldrh	r3, [r3, #8]
9000b0ba:	2b11      	cmp	r3, #17
9000b0bc:	d827      	bhi.n	9000b10e <UTIL_LCD_TRACE_UpdateDisplay+0x62>
     (LcdTrace_Ctx.CacheBufferYptrBottom  >= LcdTrace_Ctx.CacheBufferYptrTop))
9000b0be:	4b36      	ldr	r3, [pc, #216]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0c0:	891a      	ldrh	r2, [r3, #8]
9000b0c2:	4b35      	ldr	r3, [pc, #212]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0c4:	88db      	ldrh	r3, [r3, #6]
  if((LcdTrace_Ctx.CacheBufferYptrBottom  < (YWINDOW_SIZE -1)) &&
9000b0c6:	429a      	cmp	r2, r3
9000b0c8:	d321      	bcc.n	9000b10e <UTIL_LCD_TRACE_UpdateDisplay+0x62>
  {
    UTIL_LCD_SetTextColor(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Color);
9000b0ca:	4b33      	ldr	r3, [pc, #204]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0cc:	891b      	ldrh	r3, [r3, #8]
9000b0ce:	461a      	mov	r2, r3
9000b0d0:	68fb      	ldr	r3, [r7, #12]
9000b0d2:	441a      	add	r2, r3
9000b0d4:	4931      	ldr	r1, [pc, #196]	; (9000b19c <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000b0d6:	4613      	mov	r3, r2
9000b0d8:	015b      	lsls	r3, r3, #5
9000b0da:	4413      	add	r3, r2
9000b0dc:	009b      	lsls	r3, r3, #2
9000b0de:	440b      	add	r3, r1
9000b0e0:	3380      	adds	r3, #128	; 0x80
9000b0e2:	681b      	ldr	r3, [r3, #0]
9000b0e4:	4618      	mov	r0, r3
9000b0e6:	f000 f8d1 	bl	9000b28c <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
9000b0ea:	4b2b      	ldr	r3, [pc, #172]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0ec:	891b      	ldrh	r3, [r3, #8]
9000b0ee:	1d18      	adds	r0, r3, #4
                           (uint8_t *)(LCD_CacheBuffer[cnt + LcdTrace_Ctx.CacheBufferYptrBottom].Line));
9000b0f0:	4b29      	ldr	r3, [pc, #164]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b0f2:	891b      	ldrh	r3, [r3, #8]
9000b0f4:	461a      	mov	r2, r3
9000b0f6:	68fb      	ldr	r3, [r7, #12]
9000b0f8:	441a      	add	r2, r3
9000b0fa:	4613      	mov	r3, r2
9000b0fc:	015b      	lsls	r3, r3, #5
9000b0fe:	4413      	add	r3, r2
9000b100:	009b      	lsls	r3, r3, #2
9000b102:	4a26      	ldr	r2, [pc, #152]	; (9000b19c <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000b104:	4413      	add	r3, r2
    UTIL_LCD_DisplayStringAtLine ((YWINDOW_MIN + LcdTrace_Ctx.CacheBufferYptrBottom),
9000b106:	4619      	mov	r1, r3
9000b108:	f000 fa8e 	bl	9000b628 <UTIL_LCD_DisplayStringAtLine>
9000b10c:	e040      	b.n	9000b190 <UTIL_LCD_TRACE_UpdateDisplay+0xe4>
  }
  else
  {
    if(LcdTrace_Ctx.CacheBufferYptrBottom < LcdTrace_Ctx.CacheBufferYptrTop)
9000b10e:	4b22      	ldr	r3, [pc, #136]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b110:	891a      	ldrh	r2, [r3, #8]
9000b112:	4b21      	ldr	r3, [pc, #132]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b114:	88db      	ldrh	r3, [r3, #6]
9000b116:	429a      	cmp	r2, r3
9000b118:	d204      	bcs.n	9000b124 <UTIL_LCD_TRACE_UpdateDisplay+0x78>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LcdTrace_Ctx.CacheBufferYptrBottom ;
9000b11a:	4b1f      	ldr	r3, [pc, #124]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b11c:	891b      	ldrh	r3, [r3, #8]
9000b11e:	3377      	adds	r3, #119	; 0x77
9000b120:	60bb      	str	r3, [r7, #8]
9000b122:	e002      	b.n	9000b12a <UTIL_LCD_TRACE_UpdateDisplay+0x7e>
    }
    else
    {
      length = LcdTrace_Ctx.CacheBufferYptrBottom;
9000b124:	4b1c      	ldr	r3, [pc, #112]	; (9000b198 <UTIL_LCD_TRACE_UpdateDisplay+0xec>)
9000b126:	891b      	ldrh	r3, [r3, #8]
9000b128:	60bb      	str	r3, [r7, #8]
    }

    ptr = length - YWINDOW_SIZE + 1;
9000b12a:	68bb      	ldr	r3, [r7, #8]
9000b12c:	3b12      	subs	r3, #18
9000b12e:	607b      	str	r3, [r7, #4]

    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b130:	2300      	movs	r3, #0
9000b132:	60fb      	str	r3, [r7, #12]
9000b134:	e028      	b.n	9000b188 <UTIL_LCD_TRACE_UpdateDisplay+0xdc>
    {
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
9000b136:	68fa      	ldr	r2, [r7, #12]
9000b138:	687b      	ldr	r3, [r7, #4]
9000b13a:	441a      	add	r2, r3
9000b13c:	4b18      	ldr	r3, [pc, #96]	; (9000b1a0 <UTIL_LCD_TRACE_UpdateDisplay+0xf4>)
9000b13e:	fba3 1302 	umull	r1, r3, r3, r2
9000b142:	0959      	lsrs	r1, r3, #5
9000b144:	460b      	mov	r3, r1
9000b146:	00db      	lsls	r3, r3, #3
9000b148:	1a5b      	subs	r3, r3, r1
9000b14a:	0119      	lsls	r1, r3, #4
9000b14c:	440b      	add	r3, r1
9000b14e:	1ad3      	subs	r3, r2, r3
9000b150:	603b      	str	r3, [r7, #0]

      UTIL_LCD_SetTextColor(LCD_CacheBuffer[index].Color);
9000b152:	4912      	ldr	r1, [pc, #72]	; (9000b19c <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000b154:	683a      	ldr	r2, [r7, #0]
9000b156:	4613      	mov	r3, r2
9000b158:	015b      	lsls	r3, r3, #5
9000b15a:	4413      	add	r3, r2
9000b15c:	009b      	lsls	r3, r3, #2
9000b15e:	440b      	add	r3, r1
9000b160:	3380      	adds	r3, #128	; 0x80
9000b162:	681b      	ldr	r3, [r3, #0]
9000b164:	4618      	mov	r0, r3
9000b166:	f000 f891 	bl	9000b28c <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
9000b16a:	68fb      	ldr	r3, [r7, #12]
9000b16c:	1d18      	adds	r0, r3, #4
                             (uint8_t *)(LCD_CacheBuffer[index].Line));
9000b16e:	683a      	ldr	r2, [r7, #0]
9000b170:	4613      	mov	r3, r2
9000b172:	015b      	lsls	r3, r3, #5
9000b174:	4413      	add	r3, r2
9000b176:	009b      	lsls	r3, r3, #2
9000b178:	4a08      	ldr	r2, [pc, #32]	; (9000b19c <UTIL_LCD_TRACE_UpdateDisplay+0xf0>)
9000b17a:	4413      	add	r3, r2
      UTIL_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN),
9000b17c:	4619      	mov	r1, r3
9000b17e:	f000 fa53 	bl	9000b628 <UTIL_LCD_DisplayStringAtLine>
    for (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
9000b182:	68fb      	ldr	r3, [r7, #12]
9000b184:	3301      	adds	r3, #1
9000b186:	60fb      	str	r3, [r7, #12]
9000b188:	68fb      	ldr	r3, [r7, #12]
9000b18a:	2b12      	cmp	r3, #18
9000b18c:	d9d3      	bls.n	9000b136 <UTIL_LCD_TRACE_UpdateDisplay+0x8a>
    }
  }
}
9000b18e:	bf00      	nop
9000b190:	bf00      	nop
9000b192:	3710      	adds	r7, #16
9000b194:	46bd      	mov	sp, r7
9000b196:	bd80      	pop	{r7, pc}
9000b198:	20005034 	.word	0x20005034
9000b19c:	200012d8 	.word	0x200012d8
9000b1a0:	44d72045 	.word	0x44d72045

9000b1a4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
9000b1a4:	b580      	push	{r7, lr}
9000b1a6:	b082      	sub	sp, #8
9000b1a8:	af00      	add	r7, sp, #0
9000b1aa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
9000b1ac:	687b      	ldr	r3, [r7, #4]
9000b1ae:	681b      	ldr	r3, [r3, #0]
9000b1b0:	4a22      	ldr	r2, [pc, #136]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1b2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
9000b1b4:	687b      	ldr	r3, [r7, #4]
9000b1b6:	685b      	ldr	r3, [r3, #4]
9000b1b8:	4a20      	ldr	r2, [pc, #128]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1ba:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
9000b1bc:	687b      	ldr	r3, [r7, #4]
9000b1be:	689b      	ldr	r3, [r3, #8]
9000b1c0:	4a1e      	ldr	r2, [pc, #120]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1c2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
9000b1c4:	687b      	ldr	r3, [r7, #4]
9000b1c6:	68db      	ldr	r3, [r3, #12]
9000b1c8:	4a1c      	ldr	r2, [pc, #112]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1ca:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
9000b1cc:	687b      	ldr	r3, [r7, #4]
9000b1ce:	691b      	ldr	r3, [r3, #16]
9000b1d0:	4a1a      	ldr	r2, [pc, #104]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1d2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
9000b1d4:	687b      	ldr	r3, [r7, #4]
9000b1d6:	695b      	ldr	r3, [r3, #20]
9000b1d8:	4a18      	ldr	r2, [pc, #96]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1da:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
9000b1dc:	687b      	ldr	r3, [r7, #4]
9000b1de:	699b      	ldr	r3, [r3, #24]
9000b1e0:	4a16      	ldr	r2, [pc, #88]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1e2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
9000b1e4:	687b      	ldr	r3, [r7, #4]
9000b1e6:	69db      	ldr	r3, [r3, #28]
9000b1e8:	4a14      	ldr	r2, [pc, #80]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1ea:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
9000b1ec:	687b      	ldr	r3, [r7, #4]
9000b1ee:	6a1b      	ldr	r3, [r3, #32]
9000b1f0:	4a12      	ldr	r2, [pc, #72]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1f2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
9000b1f4:	687b      	ldr	r3, [r7, #4]
9000b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b1f8:	4a10      	ldr	r2, [pc, #64]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b1fa:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
9000b1fc:	687b      	ldr	r3, [r7, #4]
9000b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b200:	4a0e      	ldr	r2, [pc, #56]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b202:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
9000b204:	4b0e      	ldr	r3, [pc, #56]	; (9000b240 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b206:	2200      	movs	r2, #0
9000b208:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
9000b20a:	4b0d      	ldr	r3, [pc, #52]	; (9000b240 <UTIL_LCD_SetFuncDriver+0x9c>)
9000b20c:	2200      	movs	r2, #0
9000b20e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
9000b210:	4b0a      	ldr	r3, [pc, #40]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b212:	69db      	ldr	r3, [r3, #28]
9000b214:	4a0b      	ldr	r2, [pc, #44]	; (9000b244 <UTIL_LCD_SetFuncDriver+0xa0>)
9000b216:	4611      	mov	r1, r2
9000b218:	2000      	movs	r0, #0
9000b21a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
9000b21c:	4b07      	ldr	r3, [pc, #28]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b21e:	6a1b      	ldr	r3, [r3, #32]
9000b220:	4a09      	ldr	r2, [pc, #36]	; (9000b248 <UTIL_LCD_SetFuncDriver+0xa4>)
9000b222:	4611      	mov	r1, r2
9000b224:	2000      	movs	r0, #0
9000b226:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
9000b228:	4b04      	ldr	r3, [pc, #16]	; (9000b23c <UTIL_LCD_SetFuncDriver+0x98>)
9000b22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000b22c:	4a07      	ldr	r2, [pc, #28]	; (9000b24c <UTIL_LCD_SetFuncDriver+0xa8>)
9000b22e:	4611      	mov	r1, r2
9000b230:	2000      	movs	r0, #0
9000b232:	4798      	blx	r3
}
9000b234:	bf00      	nop
9000b236:	3708      	adds	r7, #8
9000b238:	46bd      	mov	sp, r7
9000b23a:	bd80      	pop	{r7, pc}
9000b23c:	2000508c 	.word	0x2000508c
9000b240:	2000504c 	.word	0x2000504c
9000b244:	20005060 	.word	0x20005060
9000b248:	20005064 	.word	0x20005064
9000b24c:	20005068 	.word	0x20005068

9000b250 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
9000b250:	b580      	push	{r7, lr}
9000b252:	b082      	sub	sp, #8
9000b254:	af00      	add	r7, sp, #0
9000b256:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
9000b258:	4b0a      	ldr	r3, [pc, #40]	; (9000b284 <UTIL_LCD_SetLayer+0x34>)
9000b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b25c:	2b00      	cmp	r3, #0
9000b25e:	d00c      	beq.n	9000b27a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
9000b260:	4b08      	ldr	r3, [pc, #32]	; (9000b284 <UTIL_LCD_SetLayer+0x34>)
9000b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000b264:	4a08      	ldr	r2, [pc, #32]	; (9000b288 <UTIL_LCD_SetLayer+0x38>)
9000b266:	6912      	ldr	r2, [r2, #16]
9000b268:	6879      	ldr	r1, [r7, #4]
9000b26a:	4610      	mov	r0, r2
9000b26c:	4798      	blx	r3
9000b26e:	4603      	mov	r3, r0
9000b270:	2b00      	cmp	r3, #0
9000b272:	d102      	bne.n	9000b27a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
9000b274:	4a04      	ldr	r2, [pc, #16]	; (9000b288 <UTIL_LCD_SetLayer+0x38>)
9000b276:	687b      	ldr	r3, [r7, #4]
9000b278:	60d3      	str	r3, [r2, #12]
    }
  }
}
9000b27a:	bf00      	nop
9000b27c:	3708      	adds	r7, #8
9000b27e:	46bd      	mov	sp, r7
9000b280:	bd80      	pop	{r7, pc}
9000b282:	bf00      	nop
9000b284:	2000508c 	.word	0x2000508c
9000b288:	2000504c 	.word	0x2000504c

9000b28c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
9000b28c:	b480      	push	{r7}
9000b28e:	b083      	sub	sp, #12
9000b290:	af00      	add	r7, sp, #0
9000b292:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
9000b294:	4b06      	ldr	r3, [pc, #24]	; (9000b2b0 <UTIL_LCD_SetTextColor+0x24>)
9000b296:	68db      	ldr	r3, [r3, #12]
9000b298:	4a05      	ldr	r2, [pc, #20]	; (9000b2b0 <UTIL_LCD_SetTextColor+0x24>)
9000b29a:	015b      	lsls	r3, r3, #5
9000b29c:	4413      	add	r3, r2
9000b29e:	687a      	ldr	r2, [r7, #4]
9000b2a0:	601a      	str	r2, [r3, #0]
}
9000b2a2:	bf00      	nop
9000b2a4:	370c      	adds	r7, #12
9000b2a6:	46bd      	mov	sp, r7
9000b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2ac:	4770      	bx	lr
9000b2ae:	bf00      	nop
9000b2b0:	2000504c 	.word	0x2000504c

9000b2b4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
9000b2b4:	b480      	push	{r7}
9000b2b6:	b083      	sub	sp, #12
9000b2b8:	af00      	add	r7, sp, #0
9000b2ba:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
9000b2bc:	4b06      	ldr	r3, [pc, #24]	; (9000b2d8 <UTIL_LCD_SetBackColor+0x24>)
9000b2be:	68db      	ldr	r3, [r3, #12]
9000b2c0:	4a05      	ldr	r2, [pc, #20]	; (9000b2d8 <UTIL_LCD_SetBackColor+0x24>)
9000b2c2:	015b      	lsls	r3, r3, #5
9000b2c4:	4413      	add	r3, r2
9000b2c6:	3304      	adds	r3, #4
9000b2c8:	687a      	ldr	r2, [r7, #4]
9000b2ca:	601a      	str	r2, [r3, #0]
}
9000b2cc:	bf00      	nop
9000b2ce:	370c      	adds	r7, #12
9000b2d0:	46bd      	mov	sp, r7
9000b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2d6:	4770      	bx	lr
9000b2d8:	2000504c 	.word	0x2000504c

9000b2dc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
9000b2dc:	b480      	push	{r7}
9000b2de:	b083      	sub	sp, #12
9000b2e0:	af00      	add	r7, sp, #0
9000b2e2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
9000b2e4:	4b06      	ldr	r3, [pc, #24]	; (9000b300 <UTIL_LCD_SetFont+0x24>)
9000b2e6:	68db      	ldr	r3, [r3, #12]
9000b2e8:	4a05      	ldr	r2, [pc, #20]	; (9000b300 <UTIL_LCD_SetFont+0x24>)
9000b2ea:	015b      	lsls	r3, r3, #5
9000b2ec:	4413      	add	r3, r2
9000b2ee:	3308      	adds	r3, #8
9000b2f0:	687a      	ldr	r2, [r7, #4]
9000b2f2:	601a      	str	r2, [r3, #0]
}
9000b2f4:	bf00      	nop
9000b2f6:	370c      	adds	r7, #12
9000b2f8:	46bd      	mov	sp, r7
9000b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b2fe:	4770      	bx	lr
9000b300:	2000504c 	.word	0x2000504c

9000b304 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
9000b304:	b480      	push	{r7}
9000b306:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
9000b308:	4b05      	ldr	r3, [pc, #20]	; (9000b320 <UTIL_LCD_GetFont+0x1c>)
9000b30a:	68db      	ldr	r3, [r3, #12]
9000b30c:	4a04      	ldr	r2, [pc, #16]	; (9000b320 <UTIL_LCD_GetFont+0x1c>)
9000b30e:	015b      	lsls	r3, r3, #5
9000b310:	4413      	add	r3, r2
9000b312:	3308      	adds	r3, #8
9000b314:	681b      	ldr	r3, [r3, #0]
}
9000b316:	4618      	mov	r0, r3
9000b318:	46bd      	mov	sp, r7
9000b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b31e:	4770      	bx	lr
9000b320:	2000504c 	.word	0x2000504c

9000b324 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
9000b324:	b590      	push	{r4, r7, lr}
9000b326:	b087      	sub	sp, #28
9000b328:	af02      	add	r7, sp, #8
9000b32a:	60f8      	str	r0, [r7, #12]
9000b32c:	60b9      	str	r1, [r7, #8]
9000b32e:	607a      	str	r2, [r7, #4]
9000b330:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
9000b332:	4b08      	ldr	r3, [pc, #32]	; (9000b354 <UTIL_LCD_FillRGBRect+0x30>)
9000b334:	685c      	ldr	r4, [r3, #4]
9000b336:	4b08      	ldr	r3, [pc, #32]	; (9000b358 <UTIL_LCD_FillRGBRect+0x34>)
9000b338:	6918      	ldr	r0, [r3, #16]
9000b33a:	6a3b      	ldr	r3, [r7, #32]
9000b33c:	9301      	str	r3, [sp, #4]
9000b33e:	683b      	ldr	r3, [r7, #0]
9000b340:	9300      	str	r3, [sp, #0]
9000b342:	687b      	ldr	r3, [r7, #4]
9000b344:	68ba      	ldr	r2, [r7, #8]
9000b346:	68f9      	ldr	r1, [r7, #12]
9000b348:	47a0      	blx	r4
}
9000b34a:	bf00      	nop
9000b34c:	3714      	adds	r7, #20
9000b34e:	46bd      	mov	sp, r7
9000b350:	bd90      	pop	{r4, r7, pc}
9000b352:	bf00      	nop
9000b354:	2000508c 	.word	0x2000508c
9000b358:	2000504c 	.word	0x2000504c

9000b35c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000b35c:	b590      	push	{r4, r7, lr}
9000b35e:	b087      	sub	sp, #28
9000b360:	af02      	add	r7, sp, #8
9000b362:	60f8      	str	r0, [r7, #12]
9000b364:	60b9      	str	r1, [r7, #8]
9000b366:	607a      	str	r2, [r7, #4]
9000b368:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000b36a:	4b15      	ldr	r3, [pc, #84]	; (9000b3c0 <UTIL_LCD_DrawHLine+0x64>)
9000b36c:	69db      	ldr	r3, [r3, #28]
9000b36e:	2b02      	cmp	r3, #2
9000b370:	d118      	bne.n	9000b3a4 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
9000b372:	4b14      	ldr	r3, [pc, #80]	; (9000b3c4 <UTIL_LCD_DrawHLine+0x68>)
9000b374:	689c      	ldr	r4, [r3, #8]
9000b376:	4b12      	ldr	r3, [pc, #72]	; (9000b3c0 <UTIL_LCD_DrawHLine+0x64>)
9000b378:	6918      	ldr	r0, [r3, #16]
9000b37a:	683b      	ldr	r3, [r7, #0]
9000b37c:	08db      	lsrs	r3, r3, #3
9000b37e:	f003 021f 	and.w	r2, r3, #31
9000b382:	683b      	ldr	r3, [r7, #0]
9000b384:	0a9b      	lsrs	r3, r3, #10
9000b386:	015b      	lsls	r3, r3, #5
9000b388:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000b38c:	431a      	orrs	r2, r3
9000b38e:	683b      	ldr	r3, [r7, #0]
9000b390:	0cdb      	lsrs	r3, r3, #19
9000b392:	02db      	lsls	r3, r3, #11
9000b394:	b29b      	uxth	r3, r3
9000b396:	4313      	orrs	r3, r2
9000b398:	9300      	str	r3, [sp, #0]
9000b39a:	687b      	ldr	r3, [r7, #4]
9000b39c:	68ba      	ldr	r2, [r7, #8]
9000b39e:	68f9      	ldr	r1, [r7, #12]
9000b3a0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
9000b3a2:	e009      	b.n	9000b3b8 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
9000b3a4:	4b07      	ldr	r3, [pc, #28]	; (9000b3c4 <UTIL_LCD_DrawHLine+0x68>)
9000b3a6:	689c      	ldr	r4, [r3, #8]
9000b3a8:	4b05      	ldr	r3, [pc, #20]	; (9000b3c0 <UTIL_LCD_DrawHLine+0x64>)
9000b3aa:	6918      	ldr	r0, [r3, #16]
9000b3ac:	683b      	ldr	r3, [r7, #0]
9000b3ae:	9300      	str	r3, [sp, #0]
9000b3b0:	687b      	ldr	r3, [r7, #4]
9000b3b2:	68ba      	ldr	r2, [r7, #8]
9000b3b4:	68f9      	ldr	r1, [r7, #12]
9000b3b6:	47a0      	blx	r4
}
9000b3b8:	bf00      	nop
9000b3ba:	3714      	adds	r7, #20
9000b3bc:	46bd      	mov	sp, r7
9000b3be:	bd90      	pop	{r4, r7, pc}
9000b3c0:	2000504c 	.word	0x2000504c
9000b3c4:	2000508c 	.word	0x2000508c

9000b3c8 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
9000b3c8:	b590      	push	{r4, r7, lr}
9000b3ca:	b087      	sub	sp, #28
9000b3cc:	af02      	add	r7, sp, #8
9000b3ce:	60f8      	str	r0, [r7, #12]
9000b3d0:	60b9      	str	r1, [r7, #8]
9000b3d2:	607a      	str	r2, [r7, #4]
9000b3d4:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000b3d6:	4b15      	ldr	r3, [pc, #84]	; (9000b42c <UTIL_LCD_DrawVLine+0x64>)
9000b3d8:	69db      	ldr	r3, [r3, #28]
9000b3da:	2b02      	cmp	r3, #2
9000b3dc:	d118      	bne.n	9000b410 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
9000b3de:	4b14      	ldr	r3, [pc, #80]	; (9000b430 <UTIL_LCD_DrawVLine+0x68>)
9000b3e0:	68dc      	ldr	r4, [r3, #12]
9000b3e2:	4b12      	ldr	r3, [pc, #72]	; (9000b42c <UTIL_LCD_DrawVLine+0x64>)
9000b3e4:	6918      	ldr	r0, [r3, #16]
9000b3e6:	683b      	ldr	r3, [r7, #0]
9000b3e8:	08db      	lsrs	r3, r3, #3
9000b3ea:	f003 021f 	and.w	r2, r3, #31
9000b3ee:	683b      	ldr	r3, [r7, #0]
9000b3f0:	0a9b      	lsrs	r3, r3, #10
9000b3f2:	015b      	lsls	r3, r3, #5
9000b3f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000b3f8:	431a      	orrs	r2, r3
9000b3fa:	683b      	ldr	r3, [r7, #0]
9000b3fc:	0cdb      	lsrs	r3, r3, #19
9000b3fe:	02db      	lsls	r3, r3, #11
9000b400:	b29b      	uxth	r3, r3
9000b402:	4313      	orrs	r3, r2
9000b404:	9300      	str	r3, [sp, #0]
9000b406:	687b      	ldr	r3, [r7, #4]
9000b408:	68ba      	ldr	r2, [r7, #8]
9000b40a:	68f9      	ldr	r1, [r7, #12]
9000b40c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
9000b40e:	e009      	b.n	9000b424 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
9000b410:	4b07      	ldr	r3, [pc, #28]	; (9000b430 <UTIL_LCD_DrawVLine+0x68>)
9000b412:	68dc      	ldr	r4, [r3, #12]
9000b414:	4b05      	ldr	r3, [pc, #20]	; (9000b42c <UTIL_LCD_DrawVLine+0x64>)
9000b416:	6918      	ldr	r0, [r3, #16]
9000b418:	683b      	ldr	r3, [r7, #0]
9000b41a:	9300      	str	r3, [sp, #0]
9000b41c:	687b      	ldr	r3, [r7, #4]
9000b41e:	68ba      	ldr	r2, [r7, #8]
9000b420:	68f9      	ldr	r1, [r7, #12]
9000b422:	47a0      	blx	r4
}
9000b424:	bf00      	nop
9000b426:	3714      	adds	r7, #20
9000b428:	46bd      	mov	sp, r7
9000b42a:	bd90      	pop	{r4, r7, pc}
9000b42c:	2000504c 	.word	0x2000504c
9000b430:	2000508c 	.word	0x2000508c

9000b434 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
9000b434:	b580      	push	{r7, lr}
9000b436:	b084      	sub	sp, #16
9000b438:	af02      	add	r7, sp, #8
9000b43a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
9000b43c:	4b07      	ldr	r3, [pc, #28]	; (9000b45c <UTIL_LCD_Clear+0x28>)
9000b43e:	695a      	ldr	r2, [r3, #20]
9000b440:	4b06      	ldr	r3, [pc, #24]	; (9000b45c <UTIL_LCD_Clear+0x28>)
9000b442:	6999      	ldr	r1, [r3, #24]
9000b444:	687b      	ldr	r3, [r7, #4]
9000b446:	9300      	str	r3, [sp, #0]
9000b448:	460b      	mov	r3, r1
9000b44a:	2100      	movs	r1, #0
9000b44c:	2000      	movs	r0, #0
9000b44e:	f000 f92b 	bl	9000b6a8 <UTIL_LCD_FillRect>
}
9000b452:	bf00      	nop
9000b454:	3708      	adds	r7, #8
9000b456:	46bd      	mov	sp, r7
9000b458:	bd80      	pop	{r7, pc}
9000b45a:	bf00      	nop
9000b45c:	2000504c 	.word	0x2000504c

9000b460 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
9000b460:	b580      	push	{r7, lr}
9000b462:	b084      	sub	sp, #16
9000b464:	af00      	add	r7, sp, #0
9000b466:	60f8      	str	r0, [r7, #12]
9000b468:	60b9      	str	r1, [r7, #8]
9000b46a:	4613      	mov	r3, r2
9000b46c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b46e:	4b16      	ldr	r3, [pc, #88]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b470:	68db      	ldr	r3, [r3, #12]
9000b472:	4a15      	ldr	r2, [pc, #84]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b474:	015b      	lsls	r3, r3, #5
9000b476:	4413      	add	r3, r2
9000b478:	3308      	adds	r3, #8
9000b47a:	681b      	ldr	r3, [r3, #0]
9000b47c:	681a      	ldr	r2, [r3, #0]
9000b47e:	79fb      	ldrb	r3, [r7, #7]
9000b480:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b482:	4911      	ldr	r1, [pc, #68]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b484:	68c9      	ldr	r1, [r1, #12]
9000b486:	4810      	ldr	r0, [pc, #64]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b488:	0149      	lsls	r1, r1, #5
9000b48a:	4401      	add	r1, r0
9000b48c:	3108      	adds	r1, #8
9000b48e:	6809      	ldr	r1, [r1, #0]
9000b490:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b492:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
9000b496:	4b0c      	ldr	r3, [pc, #48]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b498:	68db      	ldr	r3, [r3, #12]
9000b49a:	480b      	ldr	r0, [pc, #44]	; (9000b4c8 <UTIL_LCD_DisplayChar+0x68>)
9000b49c:	015b      	lsls	r3, r3, #5
9000b49e:	4403      	add	r3, r0
9000b4a0:	3308      	adds	r3, #8
9000b4a2:	681b      	ldr	r3, [r3, #0]
9000b4a4:	889b      	ldrh	r3, [r3, #4]
9000b4a6:	3307      	adds	r3, #7
9000b4a8:	2b00      	cmp	r3, #0
9000b4aa:	da00      	bge.n	9000b4ae <UTIL_LCD_DisplayChar+0x4e>
9000b4ac:	3307      	adds	r3, #7
9000b4ae:	10db      	asrs	r3, r3, #3
9000b4b0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
9000b4b4:	4413      	add	r3, r2
9000b4b6:	461a      	mov	r2, r3
9000b4b8:	68b9      	ldr	r1, [r7, #8]
9000b4ba:	68f8      	ldr	r0, [r7, #12]
9000b4bc:	f000 f92e 	bl	9000b71c <DrawChar>
}
9000b4c0:	bf00      	nop
9000b4c2:	3710      	adds	r7, #16
9000b4c4:	46bd      	mov	sp, r7
9000b4c6:	bd80      	pop	{r7, pc}
9000b4c8:	2000504c 	.word	0x2000504c

9000b4cc <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
9000b4cc:	b580      	push	{r7, lr}
9000b4ce:	b08a      	sub	sp, #40	; 0x28
9000b4d0:	af00      	add	r7, sp, #0
9000b4d2:	60f8      	str	r0, [r7, #12]
9000b4d4:	60b9      	str	r1, [r7, #8]
9000b4d6:	607a      	str	r2, [r7, #4]
9000b4d8:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
9000b4da:	2301      	movs	r3, #1
9000b4dc:	627b      	str	r3, [r7, #36]	; 0x24
9000b4de:	2300      	movs	r3, #0
9000b4e0:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
9000b4e2:	2300      	movs	r3, #0
9000b4e4:	61fb      	str	r3, [r7, #28]
9000b4e6:	2300      	movs	r3, #0
9000b4e8:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
9000b4ea:	687b      	ldr	r3, [r7, #4]
9000b4ec:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
9000b4ee:	e002      	b.n	9000b4f6 <UTIL_LCD_DisplayStringAt+0x2a>
9000b4f0:	69fb      	ldr	r3, [r7, #28]
9000b4f2:	3301      	adds	r3, #1
9000b4f4:	61fb      	str	r3, [r7, #28]
9000b4f6:	69bb      	ldr	r3, [r7, #24]
9000b4f8:	1c5a      	adds	r2, r3, #1
9000b4fa:	61ba      	str	r2, [r7, #24]
9000b4fc:	781b      	ldrb	r3, [r3, #0]
9000b4fe:	2b00      	cmp	r3, #0
9000b500:	d1f6      	bne.n	9000b4f0 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b502:	4b48      	ldr	r3, [pc, #288]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b504:	695b      	ldr	r3, [r3, #20]
9000b506:	4a47      	ldr	r2, [pc, #284]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b508:	68d2      	ldr	r2, [r2, #12]
9000b50a:	4946      	ldr	r1, [pc, #280]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b50c:	0152      	lsls	r2, r2, #5
9000b50e:	440a      	add	r2, r1
9000b510:	3208      	adds	r2, #8
9000b512:	6812      	ldr	r2, [r2, #0]
9000b514:	8892      	ldrh	r2, [r2, #4]
9000b516:	fbb3 f3f2 	udiv	r3, r3, r2
9000b51a:	617b      	str	r3, [r7, #20]

  switch (Mode)
9000b51c:	78fb      	ldrb	r3, [r7, #3]
9000b51e:	2b03      	cmp	r3, #3
9000b520:	d018      	beq.n	9000b554 <UTIL_LCD_DisplayStringAt+0x88>
9000b522:	2b03      	cmp	r3, #3
9000b524:	dc2a      	bgt.n	9000b57c <UTIL_LCD_DisplayStringAt+0xb0>
9000b526:	2b01      	cmp	r3, #1
9000b528:	d002      	beq.n	9000b530 <UTIL_LCD_DisplayStringAt+0x64>
9000b52a:	2b02      	cmp	r3, #2
9000b52c:	d015      	beq.n	9000b55a <UTIL_LCD_DisplayStringAt+0x8e>
9000b52e:	e025      	b.n	9000b57c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
9000b530:	697a      	ldr	r2, [r7, #20]
9000b532:	69fb      	ldr	r3, [r7, #28]
9000b534:	1ad3      	subs	r3, r2, r3
9000b536:	4a3b      	ldr	r2, [pc, #236]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b538:	68d2      	ldr	r2, [r2, #12]
9000b53a:	493a      	ldr	r1, [pc, #232]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b53c:	0152      	lsls	r2, r2, #5
9000b53e:	440a      	add	r2, r1
9000b540:	3208      	adds	r2, #8
9000b542:	6812      	ldr	r2, [r2, #0]
9000b544:	8892      	ldrh	r2, [r2, #4]
9000b546:	fb02 f303 	mul.w	r3, r2, r3
9000b54a:	085b      	lsrs	r3, r3, #1
9000b54c:	68fa      	ldr	r2, [r7, #12]
9000b54e:	4413      	add	r3, r2
9000b550:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000b552:	e016      	b.n	9000b582 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
9000b554:	68fb      	ldr	r3, [r7, #12]
9000b556:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000b558:	e013      	b.n	9000b582 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
9000b55a:	697a      	ldr	r2, [r7, #20]
9000b55c:	69fb      	ldr	r3, [r7, #28]
9000b55e:	1ad3      	subs	r3, r2, r3
9000b560:	4a30      	ldr	r2, [pc, #192]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b562:	68d2      	ldr	r2, [r2, #12]
9000b564:	492f      	ldr	r1, [pc, #188]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b566:	0152      	lsls	r2, r2, #5
9000b568:	440a      	add	r2, r1
9000b56a:	3208      	adds	r2, #8
9000b56c:	6812      	ldr	r2, [r2, #0]
9000b56e:	8892      	ldrh	r2, [r2, #4]
9000b570:	fb03 f202 	mul.w	r2, r3, r2
9000b574:	68fb      	ldr	r3, [r7, #12]
9000b576:	1ad3      	subs	r3, r2, r3
9000b578:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000b57a:	e002      	b.n	9000b582 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
9000b57c:	68fb      	ldr	r3, [r7, #12]
9000b57e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
9000b580:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
9000b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b584:	2b00      	cmp	r3, #0
9000b586:	d003      	beq.n	9000b590 <UTIL_LCD_DisplayStringAt+0xc4>
9000b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b58a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000b58e:	d31b      	bcc.n	9000b5c8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
9000b590:	2301      	movs	r3, #1
9000b592:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b594:	e018      	b.n	9000b5c8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
9000b596:	687b      	ldr	r3, [r7, #4]
9000b598:	781b      	ldrb	r3, [r3, #0]
9000b59a:	461a      	mov	r2, r3
9000b59c:	68b9      	ldr	r1, [r7, #8]
9000b59e:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000b5a0:	f7ff ff5e 	bl	9000b460 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
9000b5a4:	4b1f      	ldr	r3, [pc, #124]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5a6:	68db      	ldr	r3, [r3, #12]
9000b5a8:	4a1e      	ldr	r2, [pc, #120]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5aa:	015b      	lsls	r3, r3, #5
9000b5ac:	4413      	add	r3, r2
9000b5ae:	3308      	adds	r3, #8
9000b5b0:	681b      	ldr	r3, [r3, #0]
9000b5b2:	889b      	ldrh	r3, [r3, #4]
9000b5b4:	461a      	mov	r2, r3
9000b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b5b8:	4413      	add	r3, r2
9000b5ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
9000b5bc:	687b      	ldr	r3, [r7, #4]
9000b5be:	3301      	adds	r3, #1
9000b5c0:	607b      	str	r3, [r7, #4]
    i++;
9000b5c2:	6a3b      	ldr	r3, [r7, #32]
9000b5c4:	3301      	adds	r3, #1
9000b5c6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
9000b5c8:	687b      	ldr	r3, [r7, #4]
9000b5ca:	781b      	ldrb	r3, [r3, #0]
9000b5cc:	2b00      	cmp	r3, #0
9000b5ce:	bf14      	ite	ne
9000b5d0:	2301      	movne	r3, #1
9000b5d2:	2300      	moveq	r3, #0
9000b5d4:	b2da      	uxtb	r2, r3
9000b5d6:	4b13      	ldr	r3, [pc, #76]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5d8:	6959      	ldr	r1, [r3, #20]
9000b5da:	4b12      	ldr	r3, [pc, #72]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5dc:	68db      	ldr	r3, [r3, #12]
9000b5de:	4811      	ldr	r0, [pc, #68]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5e0:	015b      	lsls	r3, r3, #5
9000b5e2:	4403      	add	r3, r0
9000b5e4:	3308      	adds	r3, #8
9000b5e6:	681b      	ldr	r3, [r3, #0]
9000b5e8:	889b      	ldrh	r3, [r3, #4]
9000b5ea:	4618      	mov	r0, r3
9000b5ec:	6a3b      	ldr	r3, [r7, #32]
9000b5ee:	fb00 f303 	mul.w	r3, r0, r3
9000b5f2:	1acb      	subs	r3, r1, r3
9000b5f4:	b29b      	uxth	r3, r3
9000b5f6:	490b      	ldr	r1, [pc, #44]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5f8:	68c9      	ldr	r1, [r1, #12]
9000b5fa:	480a      	ldr	r0, [pc, #40]	; (9000b624 <UTIL_LCD_DisplayStringAt+0x158>)
9000b5fc:	0149      	lsls	r1, r1, #5
9000b5fe:	4401      	add	r1, r0
9000b600:	3108      	adds	r1, #8
9000b602:	6809      	ldr	r1, [r1, #0]
9000b604:	8889      	ldrh	r1, [r1, #4]
9000b606:	428b      	cmp	r3, r1
9000b608:	bf2c      	ite	cs
9000b60a:	2301      	movcs	r3, #1
9000b60c:	2300      	movcc	r3, #0
9000b60e:	b2db      	uxtb	r3, r3
9000b610:	4013      	ands	r3, r2
9000b612:	b2db      	uxtb	r3, r3
9000b614:	2b00      	cmp	r3, #0
9000b616:	d1be      	bne.n	9000b596 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
9000b618:	bf00      	nop
9000b61a:	bf00      	nop
9000b61c:	3728      	adds	r7, #40	; 0x28
9000b61e:	46bd      	mov	sp, r7
9000b620:	bd80      	pop	{r7, pc}
9000b622:	bf00      	nop
9000b624:	2000504c 	.word	0x2000504c

9000b628 <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
9000b628:	b580      	push	{r7, lr}
9000b62a:	b082      	sub	sp, #8
9000b62c:	af00      	add	r7, sp, #0
9000b62e:	6078      	str	r0, [r7, #4]
9000b630:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
9000b632:	f7ff fe67 	bl	9000b304 <UTIL_LCD_GetFont>
9000b636:	4603      	mov	r3, r0
9000b638:	88db      	ldrh	r3, [r3, #6]
9000b63a:	461a      	mov	r2, r3
9000b63c:	687b      	ldr	r3, [r7, #4]
9000b63e:	fb03 f102 	mul.w	r1, r3, r2
9000b642:	2303      	movs	r3, #3
9000b644:	683a      	ldr	r2, [r7, #0]
9000b646:	2000      	movs	r0, #0
9000b648:	f7ff ff40 	bl	9000b4cc <UTIL_LCD_DisplayStringAt>
}
9000b64c:	bf00      	nop
9000b64e:	3708      	adds	r7, #8
9000b650:	46bd      	mov	sp, r7
9000b652:	bd80      	pop	{r7, pc}

9000b654 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000b654:	b580      	push	{r7, lr}
9000b656:	b084      	sub	sp, #16
9000b658:	af00      	add	r7, sp, #0
9000b65a:	60f8      	str	r0, [r7, #12]
9000b65c:	60b9      	str	r1, [r7, #8]
9000b65e:	607a      	str	r2, [r7, #4]
9000b660:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
9000b662:	69bb      	ldr	r3, [r7, #24]
9000b664:	687a      	ldr	r2, [r7, #4]
9000b666:	68b9      	ldr	r1, [r7, #8]
9000b668:	68f8      	ldr	r0, [r7, #12]
9000b66a:	f7ff fe77 	bl	9000b35c <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
9000b66e:	68ba      	ldr	r2, [r7, #8]
9000b670:	683b      	ldr	r3, [r7, #0]
9000b672:	4413      	add	r3, r2
9000b674:	1e59      	subs	r1, r3, #1
9000b676:	69bb      	ldr	r3, [r7, #24]
9000b678:	687a      	ldr	r2, [r7, #4]
9000b67a:	68f8      	ldr	r0, [r7, #12]
9000b67c:	f7ff fe6e 	bl	9000b35c <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
9000b680:	69bb      	ldr	r3, [r7, #24]
9000b682:	683a      	ldr	r2, [r7, #0]
9000b684:	68b9      	ldr	r1, [r7, #8]
9000b686:	68f8      	ldr	r0, [r7, #12]
9000b688:	f7ff fe9e 	bl	9000b3c8 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
9000b68c:	68fa      	ldr	r2, [r7, #12]
9000b68e:	687b      	ldr	r3, [r7, #4]
9000b690:	4413      	add	r3, r2
9000b692:	1e58      	subs	r0, r3, #1
9000b694:	69bb      	ldr	r3, [r7, #24]
9000b696:	683a      	ldr	r2, [r7, #0]
9000b698:	68b9      	ldr	r1, [r7, #8]
9000b69a:	f7ff fe95 	bl	9000b3c8 <UTIL_LCD_DrawVLine>
}
9000b69e:	bf00      	nop
9000b6a0:	3710      	adds	r7, #16
9000b6a2:	46bd      	mov	sp, r7
9000b6a4:	bd80      	pop	{r7, pc}
	...

9000b6a8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
9000b6a8:	b590      	push	{r4, r7, lr}
9000b6aa:	b087      	sub	sp, #28
9000b6ac:	af02      	add	r7, sp, #8
9000b6ae:	60f8      	str	r0, [r7, #12]
9000b6b0:	60b9      	str	r1, [r7, #8]
9000b6b2:	607a      	str	r2, [r7, #4]
9000b6b4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000b6b6:	4b17      	ldr	r3, [pc, #92]	; (9000b714 <UTIL_LCD_FillRect+0x6c>)
9000b6b8:	69db      	ldr	r3, [r3, #28]
9000b6ba:	2b02      	cmp	r3, #2
9000b6bc:	d11a      	bne.n	9000b6f4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
9000b6be:	4b16      	ldr	r3, [pc, #88]	; (9000b718 <UTIL_LCD_FillRect+0x70>)
9000b6c0:	691c      	ldr	r4, [r3, #16]
9000b6c2:	4b14      	ldr	r3, [pc, #80]	; (9000b714 <UTIL_LCD_FillRect+0x6c>)
9000b6c4:	6918      	ldr	r0, [r3, #16]
9000b6c6:	6a3b      	ldr	r3, [r7, #32]
9000b6c8:	08db      	lsrs	r3, r3, #3
9000b6ca:	f003 021f 	and.w	r2, r3, #31
9000b6ce:	6a3b      	ldr	r3, [r7, #32]
9000b6d0:	0a9b      	lsrs	r3, r3, #10
9000b6d2:	015b      	lsls	r3, r3, #5
9000b6d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000b6d8:	431a      	orrs	r2, r3
9000b6da:	6a3b      	ldr	r3, [r7, #32]
9000b6dc:	0cdb      	lsrs	r3, r3, #19
9000b6de:	02db      	lsls	r3, r3, #11
9000b6e0:	b29b      	uxth	r3, r3
9000b6e2:	4313      	orrs	r3, r2
9000b6e4:	9301      	str	r3, [sp, #4]
9000b6e6:	683b      	ldr	r3, [r7, #0]
9000b6e8:	9300      	str	r3, [sp, #0]
9000b6ea:	687b      	ldr	r3, [r7, #4]
9000b6ec:	68ba      	ldr	r2, [r7, #8]
9000b6ee:	68f9      	ldr	r1, [r7, #12]
9000b6f0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
9000b6f2:	e00b      	b.n	9000b70c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
9000b6f4:	4b08      	ldr	r3, [pc, #32]	; (9000b718 <UTIL_LCD_FillRect+0x70>)
9000b6f6:	691c      	ldr	r4, [r3, #16]
9000b6f8:	4b06      	ldr	r3, [pc, #24]	; (9000b714 <UTIL_LCD_FillRect+0x6c>)
9000b6fa:	6918      	ldr	r0, [r3, #16]
9000b6fc:	6a3b      	ldr	r3, [r7, #32]
9000b6fe:	9301      	str	r3, [sp, #4]
9000b700:	683b      	ldr	r3, [r7, #0]
9000b702:	9300      	str	r3, [sp, #0]
9000b704:	687b      	ldr	r3, [r7, #4]
9000b706:	68ba      	ldr	r2, [r7, #8]
9000b708:	68f9      	ldr	r1, [r7, #12]
9000b70a:	47a0      	blx	r4
}
9000b70c:	bf00      	nop
9000b70e:	3714      	adds	r7, #20
9000b710:	46bd      	mov	sp, r7
9000b712:	bd90      	pop	{r4, r7, pc}
9000b714:	2000504c 	.word	0x2000504c
9000b718:	2000508c 	.word	0x2000508c

9000b71c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
9000b71c:	b580      	push	{r7, lr}
9000b71e:	b0b2      	sub	sp, #200	; 0xc8
9000b720:	af02      	add	r7, sp, #8
9000b722:	60f8      	str	r0, [r7, #12]
9000b724:	60b9      	str	r1, [r7, #8]
9000b726:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
9000b728:	2300      	movs	r3, #0
9000b72a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000b72e:	2300      	movs	r3, #0
9000b730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
9000b734:	4ba5      	ldr	r3, [pc, #660]	; (9000b9cc <DrawChar+0x2b0>)
9000b736:	68db      	ldr	r3, [r3, #12]
9000b738:	4aa4      	ldr	r2, [pc, #656]	; (9000b9cc <DrawChar+0x2b0>)
9000b73a:	015b      	lsls	r3, r3, #5
9000b73c:	4413      	add	r3, r2
9000b73e:	3308      	adds	r3, #8
9000b740:	681b      	ldr	r3, [r3, #0]
9000b742:	88db      	ldrh	r3, [r3, #6]
9000b744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
9000b748:	4ba0      	ldr	r3, [pc, #640]	; (9000b9cc <DrawChar+0x2b0>)
9000b74a:	68db      	ldr	r3, [r3, #12]
9000b74c:	4a9f      	ldr	r2, [pc, #636]	; (9000b9cc <DrawChar+0x2b0>)
9000b74e:	015b      	lsls	r3, r3, #5
9000b750:	4413      	add	r3, r2
9000b752:	3308      	adds	r3, #8
9000b754:	681b      	ldr	r3, [r3, #0]
9000b756:	889b      	ldrh	r3, [r3, #4]
9000b758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
9000b75c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b760:	3307      	adds	r3, #7
9000b762:	f023 0207 	bic.w	r2, r3, #7
9000b766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b76a:	1ad3      	subs	r3, r2, r3
9000b76c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
9000b770:	2300      	movs	r3, #0
9000b772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000b776:	e11c      	b.n	9000b9b2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
9000b778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b77c:	3307      	adds	r3, #7
9000b77e:	08db      	lsrs	r3, r3, #3
9000b780:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000b784:	fb02 f303 	mul.w	r3, r2, r3
9000b788:	687a      	ldr	r2, [r7, #4]
9000b78a:	4413      	add	r3, r2
9000b78c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
9000b790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b794:	3307      	adds	r3, #7
9000b796:	08db      	lsrs	r3, r3, #3
9000b798:	2b01      	cmp	r3, #1
9000b79a:	d002      	beq.n	9000b7a2 <DrawChar+0x86>
9000b79c:	2b02      	cmp	r3, #2
9000b79e:	d006      	beq.n	9000b7ae <DrawChar+0x92>
9000b7a0:	e011      	b.n	9000b7c6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
9000b7a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000b7a6:	781b      	ldrb	r3, [r3, #0]
9000b7a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000b7ac:	e01d      	b.n	9000b7ea <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
9000b7ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000b7b2:	781b      	ldrb	r3, [r3, #0]
9000b7b4:	021b      	lsls	r3, r3, #8
9000b7b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
9000b7ba:	3201      	adds	r2, #1
9000b7bc:	7812      	ldrb	r2, [r2, #0]
9000b7be:	4313      	orrs	r3, r2
9000b7c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000b7c4:	e011      	b.n	9000b7ea <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
9000b7c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000b7ca:	781b      	ldrb	r3, [r3, #0]
9000b7cc:	041a      	lsls	r2, r3, #16
9000b7ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
9000b7d2:	3301      	adds	r3, #1
9000b7d4:	781b      	ldrb	r3, [r3, #0]
9000b7d6:	021b      	lsls	r3, r3, #8
9000b7d8:	4313      	orrs	r3, r2
9000b7da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
9000b7de:	3202      	adds	r2, #2
9000b7e0:	7812      	ldrb	r2, [r2, #0]
9000b7e2:	4313      	orrs	r3, r2
9000b7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
9000b7e8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
9000b7ea:	4b78      	ldr	r3, [pc, #480]	; (9000b9cc <DrawChar+0x2b0>)
9000b7ec:	68db      	ldr	r3, [r3, #12]
9000b7ee:	4a77      	ldr	r2, [pc, #476]	; (9000b9cc <DrawChar+0x2b0>)
9000b7f0:	015b      	lsls	r3, r3, #5
9000b7f2:	4413      	add	r3, r2
9000b7f4:	331c      	adds	r3, #28
9000b7f6:	681b      	ldr	r3, [r3, #0]
9000b7f8:	2b02      	cmp	r3, #2
9000b7fa:	f040 808c 	bne.w	9000b916 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
9000b7fe:	2300      	movs	r3, #0
9000b800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000b804:	e074      	b.n	9000b8f0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
9000b806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
9000b80a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b80e:	1ad2      	subs	r2, r2, r3
9000b810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
9000b814:	4413      	add	r3, r2
9000b816:	3b01      	subs	r3, #1
9000b818:	2201      	movs	r2, #1
9000b81a:	fa02 f303 	lsl.w	r3, r2, r3
9000b81e:	461a      	mov	r2, r3
9000b820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
9000b824:	4013      	ands	r3, r2
9000b826:	2b00      	cmp	r3, #0
9000b828:	d02d      	beq.n	9000b886 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
9000b82a:	4b68      	ldr	r3, [pc, #416]	; (9000b9cc <DrawChar+0x2b0>)
9000b82c:	68db      	ldr	r3, [r3, #12]
9000b82e:	4a67      	ldr	r2, [pc, #412]	; (9000b9cc <DrawChar+0x2b0>)
9000b830:	015b      	lsls	r3, r3, #5
9000b832:	4413      	add	r3, r2
9000b834:	681b      	ldr	r3, [r3, #0]
9000b836:	08db      	lsrs	r3, r3, #3
9000b838:	b29b      	uxth	r3, r3
9000b83a:	f003 031f 	and.w	r3, r3, #31
9000b83e:	b29a      	uxth	r2, r3
9000b840:	4b62      	ldr	r3, [pc, #392]	; (9000b9cc <DrawChar+0x2b0>)
9000b842:	68db      	ldr	r3, [r3, #12]
9000b844:	4961      	ldr	r1, [pc, #388]	; (9000b9cc <DrawChar+0x2b0>)
9000b846:	015b      	lsls	r3, r3, #5
9000b848:	440b      	add	r3, r1
9000b84a:	681b      	ldr	r3, [r3, #0]
9000b84c:	0a9b      	lsrs	r3, r3, #10
9000b84e:	b29b      	uxth	r3, r3
9000b850:	015b      	lsls	r3, r3, #5
9000b852:	b29b      	uxth	r3, r3
9000b854:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000b858:	b29b      	uxth	r3, r3
9000b85a:	4313      	orrs	r3, r2
9000b85c:	b29a      	uxth	r2, r3
9000b85e:	4b5b      	ldr	r3, [pc, #364]	; (9000b9cc <DrawChar+0x2b0>)
9000b860:	68db      	ldr	r3, [r3, #12]
9000b862:	495a      	ldr	r1, [pc, #360]	; (9000b9cc <DrawChar+0x2b0>)
9000b864:	015b      	lsls	r3, r3, #5
9000b866:	440b      	add	r3, r1
9000b868:	681b      	ldr	r3, [r3, #0]
9000b86a:	0cdb      	lsrs	r3, r3, #19
9000b86c:	b29b      	uxth	r3, r3
9000b86e:	02db      	lsls	r3, r3, #11
9000b870:	b29b      	uxth	r3, r3
9000b872:	4313      	orrs	r3, r2
9000b874:	b29a      	uxth	r2, r3
9000b876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b87a:	005b      	lsls	r3, r3, #1
9000b87c:	33c0      	adds	r3, #192	; 0xc0
9000b87e:	443b      	add	r3, r7
9000b880:	f823 2c4c 	strh.w	r2, [r3, #-76]
9000b884:	e02f      	b.n	9000b8e6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
9000b886:	4b51      	ldr	r3, [pc, #324]	; (9000b9cc <DrawChar+0x2b0>)
9000b888:	68db      	ldr	r3, [r3, #12]
9000b88a:	4a50      	ldr	r2, [pc, #320]	; (9000b9cc <DrawChar+0x2b0>)
9000b88c:	015b      	lsls	r3, r3, #5
9000b88e:	4413      	add	r3, r2
9000b890:	3304      	adds	r3, #4
9000b892:	681b      	ldr	r3, [r3, #0]
9000b894:	08db      	lsrs	r3, r3, #3
9000b896:	b29b      	uxth	r3, r3
9000b898:	f003 031f 	and.w	r3, r3, #31
9000b89c:	b29a      	uxth	r2, r3
9000b89e:	4b4b      	ldr	r3, [pc, #300]	; (9000b9cc <DrawChar+0x2b0>)
9000b8a0:	68db      	ldr	r3, [r3, #12]
9000b8a2:	494a      	ldr	r1, [pc, #296]	; (9000b9cc <DrawChar+0x2b0>)
9000b8a4:	015b      	lsls	r3, r3, #5
9000b8a6:	440b      	add	r3, r1
9000b8a8:	3304      	adds	r3, #4
9000b8aa:	681b      	ldr	r3, [r3, #0]
9000b8ac:	0a9b      	lsrs	r3, r3, #10
9000b8ae:	b29b      	uxth	r3, r3
9000b8b0:	015b      	lsls	r3, r3, #5
9000b8b2:	b29b      	uxth	r3, r3
9000b8b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9000b8b8:	b29b      	uxth	r3, r3
9000b8ba:	4313      	orrs	r3, r2
9000b8bc:	b29a      	uxth	r2, r3
9000b8be:	4b43      	ldr	r3, [pc, #268]	; (9000b9cc <DrawChar+0x2b0>)
9000b8c0:	68db      	ldr	r3, [r3, #12]
9000b8c2:	4942      	ldr	r1, [pc, #264]	; (9000b9cc <DrawChar+0x2b0>)
9000b8c4:	015b      	lsls	r3, r3, #5
9000b8c6:	440b      	add	r3, r1
9000b8c8:	3304      	adds	r3, #4
9000b8ca:	681b      	ldr	r3, [r3, #0]
9000b8cc:	0cdb      	lsrs	r3, r3, #19
9000b8ce:	b29b      	uxth	r3, r3
9000b8d0:	02db      	lsls	r3, r3, #11
9000b8d2:	b29b      	uxth	r3, r3
9000b8d4:	4313      	orrs	r3, r2
9000b8d6:	b29a      	uxth	r2, r3
9000b8d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b8dc:	005b      	lsls	r3, r3, #1
9000b8de:	33c0      	adds	r3, #192	; 0xc0
9000b8e0:	443b      	add	r3, r7
9000b8e2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
9000b8e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b8ea:	3301      	adds	r3, #1
9000b8ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000b8f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
9000b8f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b8f8:	429a      	cmp	r2, r3
9000b8fa:	d384      	bcc.n	9000b806 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
9000b8fc:	68b9      	ldr	r1, [r7, #8]
9000b8fe:	1c4b      	adds	r3, r1, #1
9000b900:	60bb      	str	r3, [r7, #8]
9000b902:	f107 0274 	add.w	r2, r7, #116	; 0x74
9000b906:	2301      	movs	r3, #1
9000b908:	9300      	str	r3, [sp, #0]
9000b90a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b90e:	68f8      	ldr	r0, [r7, #12]
9000b910:	f7ff fd08 	bl	9000b324 <UTIL_LCD_FillRGBRect>
9000b914:	e048      	b.n	9000b9a8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
9000b916:	2300      	movs	r3, #0
9000b918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000b91c:	e032      	b.n	9000b984 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
9000b91e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
9000b922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b926:	1ad2      	subs	r2, r2, r3
9000b928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
9000b92c:	4413      	add	r3, r2
9000b92e:	3b01      	subs	r3, #1
9000b930:	2201      	movs	r2, #1
9000b932:	fa02 f303 	lsl.w	r3, r2, r3
9000b936:	461a      	mov	r2, r3
9000b938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
9000b93c:	4013      	ands	r3, r2
9000b93e:	2b00      	cmp	r3, #0
9000b940:	d00d      	beq.n	9000b95e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
9000b942:	4b22      	ldr	r3, [pc, #136]	; (9000b9cc <DrawChar+0x2b0>)
9000b944:	68db      	ldr	r3, [r3, #12]
9000b946:	4a21      	ldr	r2, [pc, #132]	; (9000b9cc <DrawChar+0x2b0>)
9000b948:	015b      	lsls	r3, r3, #5
9000b94a:	4413      	add	r3, r2
9000b94c:	681a      	ldr	r2, [r3, #0]
9000b94e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b952:	009b      	lsls	r3, r3, #2
9000b954:	33c0      	adds	r3, #192	; 0xc0
9000b956:	443b      	add	r3, r7
9000b958:	f843 2cac 	str.w	r2, [r3, #-172]
9000b95c:	e00d      	b.n	9000b97a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
9000b95e:	4b1b      	ldr	r3, [pc, #108]	; (9000b9cc <DrawChar+0x2b0>)
9000b960:	68db      	ldr	r3, [r3, #12]
9000b962:	4a1a      	ldr	r2, [pc, #104]	; (9000b9cc <DrawChar+0x2b0>)
9000b964:	015b      	lsls	r3, r3, #5
9000b966:	4413      	add	r3, r2
9000b968:	3304      	adds	r3, #4
9000b96a:	681a      	ldr	r2, [r3, #0]
9000b96c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b970:	009b      	lsls	r3, r3, #2
9000b972:	33c0      	adds	r3, #192	; 0xc0
9000b974:	443b      	add	r3, r7
9000b976:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
9000b97a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
9000b97e:	3301      	adds	r3, #1
9000b980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
9000b984:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
9000b988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b98c:	429a      	cmp	r2, r3
9000b98e:	d3c6      	bcc.n	9000b91e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
9000b990:	68b9      	ldr	r1, [r7, #8]
9000b992:	1c4b      	adds	r3, r1, #1
9000b994:	60bb      	str	r3, [r7, #8]
9000b996:	f107 0214 	add.w	r2, r7, #20
9000b99a:	2301      	movs	r3, #1
9000b99c:	9300      	str	r3, [sp, #0]
9000b99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
9000b9a2:	68f8      	ldr	r0, [r7, #12]
9000b9a4:	f7ff fcbe 	bl	9000b324 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
9000b9a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
9000b9ac:	3301      	adds	r3, #1
9000b9ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
9000b9b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
9000b9b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
9000b9ba:	429a      	cmp	r2, r3
9000b9bc:	f4ff aedc 	bcc.w	9000b778 <DrawChar+0x5c>
    }
  }
}
9000b9c0:	bf00      	nop
9000b9c2:	bf00      	nop
9000b9c4:	37c0      	adds	r7, #192	; 0xc0
9000b9c6:	46bd      	mov	sp, r7
9000b9c8:	bd80      	pop	{r7, pc}
9000b9ca:	bf00      	nop
9000b9cc:	2000504c 	.word	0x2000504c

9000b9d0 <__errno>:
9000b9d0:	4b01      	ldr	r3, [pc, #4]	; (9000b9d8 <__errno+0x8>)
9000b9d2:	6818      	ldr	r0, [r3, #0]
9000b9d4:	4770      	bx	lr
9000b9d6:	bf00      	nop
9000b9d8:	20000054 	.word	0x20000054

9000b9dc <__libc_init_array>:
9000b9dc:	b570      	push	{r4, r5, r6, lr}
9000b9de:	4d0d      	ldr	r5, [pc, #52]	; (9000ba14 <__libc_init_array+0x38>)
9000b9e0:	4c0d      	ldr	r4, [pc, #52]	; (9000ba18 <__libc_init_array+0x3c>)
9000b9e2:	1b64      	subs	r4, r4, r5
9000b9e4:	10a4      	asrs	r4, r4, #2
9000b9e6:	2600      	movs	r6, #0
9000b9e8:	42a6      	cmp	r6, r4
9000b9ea:	d109      	bne.n	9000ba00 <__libc_init_array+0x24>
9000b9ec:	4d0b      	ldr	r5, [pc, #44]	; (9000ba1c <__libc_init_array+0x40>)
9000b9ee:	4c0c      	ldr	r4, [pc, #48]	; (9000ba20 <__libc_init_array+0x44>)
9000b9f0:	f001 fa96 	bl	9000cf20 <_init>
9000b9f4:	1b64      	subs	r4, r4, r5
9000b9f6:	10a4      	asrs	r4, r4, #2
9000b9f8:	2600      	movs	r6, #0
9000b9fa:	42a6      	cmp	r6, r4
9000b9fc:	d105      	bne.n	9000ba0a <__libc_init_array+0x2e>
9000b9fe:	bd70      	pop	{r4, r5, r6, pc}
9000ba00:	f855 3b04 	ldr.w	r3, [r5], #4
9000ba04:	4798      	blx	r3
9000ba06:	3601      	adds	r6, #1
9000ba08:	e7ee      	b.n	9000b9e8 <__libc_init_array+0xc>
9000ba0a:	f855 3b04 	ldr.w	r3, [r5], #4
9000ba0e:	4798      	blx	r3
9000ba10:	3601      	adds	r6, #1
9000ba12:	e7f2      	b.n	9000b9fa <__libc_init_array+0x1e>
9000ba14:	9000d454 	.word	0x9000d454
9000ba18:	9000d454 	.word	0x9000d454
9000ba1c:	9000d454 	.word	0x9000d454
9000ba20:	9000d458 	.word	0x9000d458

9000ba24 <malloc>:
9000ba24:	4b02      	ldr	r3, [pc, #8]	; (9000ba30 <malloc+0xc>)
9000ba26:	4601      	mov	r1, r0
9000ba28:	6818      	ldr	r0, [r3, #0]
9000ba2a:	f000 b885 	b.w	9000bb38 <_malloc_r>
9000ba2e:	bf00      	nop
9000ba30:	20000054 	.word	0x20000054

9000ba34 <memcpy>:
9000ba34:	440a      	add	r2, r1
9000ba36:	4291      	cmp	r1, r2
9000ba38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
9000ba3c:	d100      	bne.n	9000ba40 <memcpy+0xc>
9000ba3e:	4770      	bx	lr
9000ba40:	b510      	push	{r4, lr}
9000ba42:	f811 4b01 	ldrb.w	r4, [r1], #1
9000ba46:	f803 4f01 	strb.w	r4, [r3, #1]!
9000ba4a:	4291      	cmp	r1, r2
9000ba4c:	d1f9      	bne.n	9000ba42 <memcpy+0xe>
9000ba4e:	bd10      	pop	{r4, pc}

9000ba50 <memset>:
9000ba50:	4402      	add	r2, r0
9000ba52:	4603      	mov	r3, r0
9000ba54:	4293      	cmp	r3, r2
9000ba56:	d100      	bne.n	9000ba5a <memset+0xa>
9000ba58:	4770      	bx	lr
9000ba5a:	f803 1b01 	strb.w	r1, [r3], #1
9000ba5e:	e7f9      	b.n	9000ba54 <memset+0x4>

9000ba60 <_free_r>:
9000ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000ba62:	2900      	cmp	r1, #0
9000ba64:	d044      	beq.n	9000baf0 <_free_r+0x90>
9000ba66:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000ba6a:	9001      	str	r0, [sp, #4]
9000ba6c:	2b00      	cmp	r3, #0
9000ba6e:	f1a1 0404 	sub.w	r4, r1, #4
9000ba72:	bfb8      	it	lt
9000ba74:	18e4      	addlt	r4, r4, r3
9000ba76:	f000 f9cb 	bl	9000be10 <__malloc_lock>
9000ba7a:	4a1e      	ldr	r2, [pc, #120]	; (9000baf4 <_free_r+0x94>)
9000ba7c:	9801      	ldr	r0, [sp, #4]
9000ba7e:	6813      	ldr	r3, [r2, #0]
9000ba80:	b933      	cbnz	r3, 9000ba90 <_free_r+0x30>
9000ba82:	6063      	str	r3, [r4, #4]
9000ba84:	6014      	str	r4, [r2, #0]
9000ba86:	b003      	add	sp, #12
9000ba88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
9000ba8c:	f000 b9c6 	b.w	9000be1c <__malloc_unlock>
9000ba90:	42a3      	cmp	r3, r4
9000ba92:	d908      	bls.n	9000baa6 <_free_r+0x46>
9000ba94:	6825      	ldr	r5, [r4, #0]
9000ba96:	1961      	adds	r1, r4, r5
9000ba98:	428b      	cmp	r3, r1
9000ba9a:	bf01      	itttt	eq
9000ba9c:	6819      	ldreq	r1, [r3, #0]
9000ba9e:	685b      	ldreq	r3, [r3, #4]
9000baa0:	1949      	addeq	r1, r1, r5
9000baa2:	6021      	streq	r1, [r4, #0]
9000baa4:	e7ed      	b.n	9000ba82 <_free_r+0x22>
9000baa6:	461a      	mov	r2, r3
9000baa8:	685b      	ldr	r3, [r3, #4]
9000baaa:	b10b      	cbz	r3, 9000bab0 <_free_r+0x50>
9000baac:	42a3      	cmp	r3, r4
9000baae:	d9fa      	bls.n	9000baa6 <_free_r+0x46>
9000bab0:	6811      	ldr	r1, [r2, #0]
9000bab2:	1855      	adds	r5, r2, r1
9000bab4:	42a5      	cmp	r5, r4
9000bab6:	d10b      	bne.n	9000bad0 <_free_r+0x70>
9000bab8:	6824      	ldr	r4, [r4, #0]
9000baba:	4421      	add	r1, r4
9000babc:	1854      	adds	r4, r2, r1
9000babe:	42a3      	cmp	r3, r4
9000bac0:	6011      	str	r1, [r2, #0]
9000bac2:	d1e0      	bne.n	9000ba86 <_free_r+0x26>
9000bac4:	681c      	ldr	r4, [r3, #0]
9000bac6:	685b      	ldr	r3, [r3, #4]
9000bac8:	6053      	str	r3, [r2, #4]
9000baca:	4421      	add	r1, r4
9000bacc:	6011      	str	r1, [r2, #0]
9000bace:	e7da      	b.n	9000ba86 <_free_r+0x26>
9000bad0:	d902      	bls.n	9000bad8 <_free_r+0x78>
9000bad2:	230c      	movs	r3, #12
9000bad4:	6003      	str	r3, [r0, #0]
9000bad6:	e7d6      	b.n	9000ba86 <_free_r+0x26>
9000bad8:	6825      	ldr	r5, [r4, #0]
9000bada:	1961      	adds	r1, r4, r5
9000badc:	428b      	cmp	r3, r1
9000bade:	bf04      	itt	eq
9000bae0:	6819      	ldreq	r1, [r3, #0]
9000bae2:	685b      	ldreq	r3, [r3, #4]
9000bae4:	6063      	str	r3, [r4, #4]
9000bae6:	bf04      	itt	eq
9000bae8:	1949      	addeq	r1, r1, r5
9000baea:	6021      	streq	r1, [r4, #0]
9000baec:	6054      	str	r4, [r2, #4]
9000baee:	e7ca      	b.n	9000ba86 <_free_r+0x26>
9000baf0:	b003      	add	sp, #12
9000baf2:	bd30      	pop	{r4, r5, pc}
9000baf4:	200050b8 	.word	0x200050b8

9000baf8 <sbrk_aligned>:
9000baf8:	b570      	push	{r4, r5, r6, lr}
9000bafa:	4e0e      	ldr	r6, [pc, #56]	; (9000bb34 <sbrk_aligned+0x3c>)
9000bafc:	460c      	mov	r4, r1
9000bafe:	6831      	ldr	r1, [r6, #0]
9000bb00:	4605      	mov	r5, r0
9000bb02:	b911      	cbnz	r1, 9000bb0a <sbrk_aligned+0x12>
9000bb04:	f000 f8f8 	bl	9000bcf8 <_sbrk_r>
9000bb08:	6030      	str	r0, [r6, #0]
9000bb0a:	4621      	mov	r1, r4
9000bb0c:	4628      	mov	r0, r5
9000bb0e:	f000 f8f3 	bl	9000bcf8 <_sbrk_r>
9000bb12:	1c43      	adds	r3, r0, #1
9000bb14:	d00a      	beq.n	9000bb2c <sbrk_aligned+0x34>
9000bb16:	1cc4      	adds	r4, r0, #3
9000bb18:	f024 0403 	bic.w	r4, r4, #3
9000bb1c:	42a0      	cmp	r0, r4
9000bb1e:	d007      	beq.n	9000bb30 <sbrk_aligned+0x38>
9000bb20:	1a21      	subs	r1, r4, r0
9000bb22:	4628      	mov	r0, r5
9000bb24:	f000 f8e8 	bl	9000bcf8 <_sbrk_r>
9000bb28:	3001      	adds	r0, #1
9000bb2a:	d101      	bne.n	9000bb30 <sbrk_aligned+0x38>
9000bb2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
9000bb30:	4620      	mov	r0, r4
9000bb32:	bd70      	pop	{r4, r5, r6, pc}
9000bb34:	200050bc 	.word	0x200050bc

9000bb38 <_malloc_r>:
9000bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000bb3c:	1ccd      	adds	r5, r1, #3
9000bb3e:	f025 0503 	bic.w	r5, r5, #3
9000bb42:	3508      	adds	r5, #8
9000bb44:	2d0c      	cmp	r5, #12
9000bb46:	bf38      	it	cc
9000bb48:	250c      	movcc	r5, #12
9000bb4a:	2d00      	cmp	r5, #0
9000bb4c:	4607      	mov	r7, r0
9000bb4e:	db01      	blt.n	9000bb54 <_malloc_r+0x1c>
9000bb50:	42a9      	cmp	r1, r5
9000bb52:	d905      	bls.n	9000bb60 <_malloc_r+0x28>
9000bb54:	230c      	movs	r3, #12
9000bb56:	603b      	str	r3, [r7, #0]
9000bb58:	2600      	movs	r6, #0
9000bb5a:	4630      	mov	r0, r6
9000bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000bb60:	4e2e      	ldr	r6, [pc, #184]	; (9000bc1c <_malloc_r+0xe4>)
9000bb62:	f000 f955 	bl	9000be10 <__malloc_lock>
9000bb66:	6833      	ldr	r3, [r6, #0]
9000bb68:	461c      	mov	r4, r3
9000bb6a:	bb34      	cbnz	r4, 9000bbba <_malloc_r+0x82>
9000bb6c:	4629      	mov	r1, r5
9000bb6e:	4638      	mov	r0, r7
9000bb70:	f7ff ffc2 	bl	9000baf8 <sbrk_aligned>
9000bb74:	1c43      	adds	r3, r0, #1
9000bb76:	4604      	mov	r4, r0
9000bb78:	d14d      	bne.n	9000bc16 <_malloc_r+0xde>
9000bb7a:	6834      	ldr	r4, [r6, #0]
9000bb7c:	4626      	mov	r6, r4
9000bb7e:	2e00      	cmp	r6, #0
9000bb80:	d140      	bne.n	9000bc04 <_malloc_r+0xcc>
9000bb82:	6823      	ldr	r3, [r4, #0]
9000bb84:	4631      	mov	r1, r6
9000bb86:	4638      	mov	r0, r7
9000bb88:	eb04 0803 	add.w	r8, r4, r3
9000bb8c:	f000 f8b4 	bl	9000bcf8 <_sbrk_r>
9000bb90:	4580      	cmp	r8, r0
9000bb92:	d13a      	bne.n	9000bc0a <_malloc_r+0xd2>
9000bb94:	6821      	ldr	r1, [r4, #0]
9000bb96:	3503      	adds	r5, #3
9000bb98:	1a6d      	subs	r5, r5, r1
9000bb9a:	f025 0503 	bic.w	r5, r5, #3
9000bb9e:	3508      	adds	r5, #8
9000bba0:	2d0c      	cmp	r5, #12
9000bba2:	bf38      	it	cc
9000bba4:	250c      	movcc	r5, #12
9000bba6:	4629      	mov	r1, r5
9000bba8:	4638      	mov	r0, r7
9000bbaa:	f7ff ffa5 	bl	9000baf8 <sbrk_aligned>
9000bbae:	3001      	adds	r0, #1
9000bbb0:	d02b      	beq.n	9000bc0a <_malloc_r+0xd2>
9000bbb2:	6823      	ldr	r3, [r4, #0]
9000bbb4:	442b      	add	r3, r5
9000bbb6:	6023      	str	r3, [r4, #0]
9000bbb8:	e00e      	b.n	9000bbd8 <_malloc_r+0xa0>
9000bbba:	6822      	ldr	r2, [r4, #0]
9000bbbc:	1b52      	subs	r2, r2, r5
9000bbbe:	d41e      	bmi.n	9000bbfe <_malloc_r+0xc6>
9000bbc0:	2a0b      	cmp	r2, #11
9000bbc2:	d916      	bls.n	9000bbf2 <_malloc_r+0xba>
9000bbc4:	1961      	adds	r1, r4, r5
9000bbc6:	42a3      	cmp	r3, r4
9000bbc8:	6025      	str	r5, [r4, #0]
9000bbca:	bf18      	it	ne
9000bbcc:	6059      	strne	r1, [r3, #4]
9000bbce:	6863      	ldr	r3, [r4, #4]
9000bbd0:	bf08      	it	eq
9000bbd2:	6031      	streq	r1, [r6, #0]
9000bbd4:	5162      	str	r2, [r4, r5]
9000bbd6:	604b      	str	r3, [r1, #4]
9000bbd8:	4638      	mov	r0, r7
9000bbda:	f104 060b 	add.w	r6, r4, #11
9000bbde:	f000 f91d 	bl	9000be1c <__malloc_unlock>
9000bbe2:	f026 0607 	bic.w	r6, r6, #7
9000bbe6:	1d23      	adds	r3, r4, #4
9000bbe8:	1af2      	subs	r2, r6, r3
9000bbea:	d0b6      	beq.n	9000bb5a <_malloc_r+0x22>
9000bbec:	1b9b      	subs	r3, r3, r6
9000bbee:	50a3      	str	r3, [r4, r2]
9000bbf0:	e7b3      	b.n	9000bb5a <_malloc_r+0x22>
9000bbf2:	6862      	ldr	r2, [r4, #4]
9000bbf4:	42a3      	cmp	r3, r4
9000bbf6:	bf0c      	ite	eq
9000bbf8:	6032      	streq	r2, [r6, #0]
9000bbfa:	605a      	strne	r2, [r3, #4]
9000bbfc:	e7ec      	b.n	9000bbd8 <_malloc_r+0xa0>
9000bbfe:	4623      	mov	r3, r4
9000bc00:	6864      	ldr	r4, [r4, #4]
9000bc02:	e7b2      	b.n	9000bb6a <_malloc_r+0x32>
9000bc04:	4634      	mov	r4, r6
9000bc06:	6876      	ldr	r6, [r6, #4]
9000bc08:	e7b9      	b.n	9000bb7e <_malloc_r+0x46>
9000bc0a:	230c      	movs	r3, #12
9000bc0c:	603b      	str	r3, [r7, #0]
9000bc0e:	4638      	mov	r0, r7
9000bc10:	f000 f904 	bl	9000be1c <__malloc_unlock>
9000bc14:	e7a1      	b.n	9000bb5a <_malloc_r+0x22>
9000bc16:	6025      	str	r5, [r4, #0]
9000bc18:	e7de      	b.n	9000bbd8 <_malloc_r+0xa0>
9000bc1a:	bf00      	nop
9000bc1c:	200050b8 	.word	0x200050b8

9000bc20 <srand>:
9000bc20:	b538      	push	{r3, r4, r5, lr}
9000bc22:	4b10      	ldr	r3, [pc, #64]	; (9000bc64 <srand+0x44>)
9000bc24:	681d      	ldr	r5, [r3, #0]
9000bc26:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000bc28:	4604      	mov	r4, r0
9000bc2a:	b9b3      	cbnz	r3, 9000bc5a <srand+0x3a>
9000bc2c:	2018      	movs	r0, #24
9000bc2e:	f7ff fef9 	bl	9000ba24 <malloc>
9000bc32:	4602      	mov	r2, r0
9000bc34:	63a8      	str	r0, [r5, #56]	; 0x38
9000bc36:	b920      	cbnz	r0, 9000bc42 <srand+0x22>
9000bc38:	4b0b      	ldr	r3, [pc, #44]	; (9000bc68 <srand+0x48>)
9000bc3a:	480c      	ldr	r0, [pc, #48]	; (9000bc6c <srand+0x4c>)
9000bc3c:	2142      	movs	r1, #66	; 0x42
9000bc3e:	f000 f8a5 	bl	9000bd8c <__assert_func>
9000bc42:	490b      	ldr	r1, [pc, #44]	; (9000bc70 <srand+0x50>)
9000bc44:	4b0b      	ldr	r3, [pc, #44]	; (9000bc74 <srand+0x54>)
9000bc46:	e9c0 1300 	strd	r1, r3, [r0]
9000bc4a:	4b0b      	ldr	r3, [pc, #44]	; (9000bc78 <srand+0x58>)
9000bc4c:	6083      	str	r3, [r0, #8]
9000bc4e:	230b      	movs	r3, #11
9000bc50:	8183      	strh	r3, [r0, #12]
9000bc52:	2100      	movs	r1, #0
9000bc54:	2001      	movs	r0, #1
9000bc56:	e9c2 0104 	strd	r0, r1, [r2, #16]
9000bc5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000bc5c:	2200      	movs	r2, #0
9000bc5e:	611c      	str	r4, [r3, #16]
9000bc60:	615a      	str	r2, [r3, #20]
9000bc62:	bd38      	pop	{r3, r4, r5, pc}
9000bc64:	20000054 	.word	0x20000054
9000bc68:	9000d310 	.word	0x9000d310
9000bc6c:	9000d327 	.word	0x9000d327
9000bc70:	abcd330e 	.word	0xabcd330e
9000bc74:	e66d1234 	.word	0xe66d1234
9000bc78:	0005deec 	.word	0x0005deec

9000bc7c <rand>:
9000bc7c:	4b16      	ldr	r3, [pc, #88]	; (9000bcd8 <rand+0x5c>)
9000bc7e:	b510      	push	{r4, lr}
9000bc80:	681c      	ldr	r4, [r3, #0]
9000bc82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000bc84:	b9b3      	cbnz	r3, 9000bcb4 <rand+0x38>
9000bc86:	2018      	movs	r0, #24
9000bc88:	f7ff fecc 	bl	9000ba24 <malloc>
9000bc8c:	63a0      	str	r0, [r4, #56]	; 0x38
9000bc8e:	b928      	cbnz	r0, 9000bc9c <rand+0x20>
9000bc90:	4602      	mov	r2, r0
9000bc92:	4b12      	ldr	r3, [pc, #72]	; (9000bcdc <rand+0x60>)
9000bc94:	4812      	ldr	r0, [pc, #72]	; (9000bce0 <rand+0x64>)
9000bc96:	214e      	movs	r1, #78	; 0x4e
9000bc98:	f000 f878 	bl	9000bd8c <__assert_func>
9000bc9c:	4a11      	ldr	r2, [pc, #68]	; (9000bce4 <rand+0x68>)
9000bc9e:	4b12      	ldr	r3, [pc, #72]	; (9000bce8 <rand+0x6c>)
9000bca0:	e9c0 2300 	strd	r2, r3, [r0]
9000bca4:	4b11      	ldr	r3, [pc, #68]	; (9000bcec <rand+0x70>)
9000bca6:	6083      	str	r3, [r0, #8]
9000bca8:	230b      	movs	r3, #11
9000bcaa:	8183      	strh	r3, [r0, #12]
9000bcac:	2201      	movs	r2, #1
9000bcae:	2300      	movs	r3, #0
9000bcb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
9000bcb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
9000bcb6:	4a0e      	ldr	r2, [pc, #56]	; (9000bcf0 <rand+0x74>)
9000bcb8:	6920      	ldr	r0, [r4, #16]
9000bcba:	6963      	ldr	r3, [r4, #20]
9000bcbc:	490d      	ldr	r1, [pc, #52]	; (9000bcf4 <rand+0x78>)
9000bcbe:	4342      	muls	r2, r0
9000bcc0:	fb01 2203 	mla	r2, r1, r3, r2
9000bcc4:	fba0 0101 	umull	r0, r1, r0, r1
9000bcc8:	1c43      	adds	r3, r0, #1
9000bcca:	eb42 0001 	adc.w	r0, r2, r1
9000bcce:	e9c4 3004 	strd	r3, r0, [r4, #16]
9000bcd2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000bcd6:	bd10      	pop	{r4, pc}
9000bcd8:	20000054 	.word	0x20000054
9000bcdc:	9000d310 	.word	0x9000d310
9000bce0:	9000d327 	.word	0x9000d327
9000bce4:	abcd330e 	.word	0xabcd330e
9000bce8:	e66d1234 	.word	0xe66d1234
9000bcec:	0005deec 	.word	0x0005deec
9000bcf0:	5851f42d 	.word	0x5851f42d
9000bcf4:	4c957f2d 	.word	0x4c957f2d

9000bcf8 <_sbrk_r>:
9000bcf8:	b538      	push	{r3, r4, r5, lr}
9000bcfa:	4d06      	ldr	r5, [pc, #24]	; (9000bd14 <_sbrk_r+0x1c>)
9000bcfc:	2300      	movs	r3, #0
9000bcfe:	4604      	mov	r4, r0
9000bd00:	4608      	mov	r0, r1
9000bd02:	602b      	str	r3, [r5, #0]
9000bd04:	f7f4 fe38 	bl	90000978 <_sbrk>
9000bd08:	1c43      	adds	r3, r0, #1
9000bd0a:	d102      	bne.n	9000bd12 <_sbrk_r+0x1a>
9000bd0c:	682b      	ldr	r3, [r5, #0]
9000bd0e:	b103      	cbz	r3, 9000bd12 <_sbrk_r+0x1a>
9000bd10:	6023      	str	r3, [r4, #0]
9000bd12:	bd38      	pop	{r3, r4, r5, pc}
9000bd14:	200050c0 	.word	0x200050c0

9000bd18 <siprintf>:
9000bd18:	b40e      	push	{r1, r2, r3}
9000bd1a:	b500      	push	{lr}
9000bd1c:	b09c      	sub	sp, #112	; 0x70
9000bd1e:	ab1d      	add	r3, sp, #116	; 0x74
9000bd20:	9002      	str	r0, [sp, #8]
9000bd22:	9006      	str	r0, [sp, #24]
9000bd24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
9000bd28:	4809      	ldr	r0, [pc, #36]	; (9000bd50 <siprintf+0x38>)
9000bd2a:	9107      	str	r1, [sp, #28]
9000bd2c:	9104      	str	r1, [sp, #16]
9000bd2e:	4909      	ldr	r1, [pc, #36]	; (9000bd54 <siprintf+0x3c>)
9000bd30:	f853 2b04 	ldr.w	r2, [r3], #4
9000bd34:	9105      	str	r1, [sp, #20]
9000bd36:	6800      	ldr	r0, [r0, #0]
9000bd38:	9301      	str	r3, [sp, #4]
9000bd3a:	a902      	add	r1, sp, #8
9000bd3c:	f000 f8d0 	bl	9000bee0 <_svfiprintf_r>
9000bd40:	9b02      	ldr	r3, [sp, #8]
9000bd42:	2200      	movs	r2, #0
9000bd44:	701a      	strb	r2, [r3, #0]
9000bd46:	b01c      	add	sp, #112	; 0x70
9000bd48:	f85d eb04 	ldr.w	lr, [sp], #4
9000bd4c:	b003      	add	sp, #12
9000bd4e:	4770      	bx	lr
9000bd50:	20000054 	.word	0x20000054
9000bd54:	ffff0208 	.word	0xffff0208

9000bd58 <time>:
9000bd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000bd5a:	4b0b      	ldr	r3, [pc, #44]	; (9000bd88 <time+0x30>)
9000bd5c:	2200      	movs	r2, #0
9000bd5e:	4669      	mov	r1, sp
9000bd60:	4604      	mov	r4, r0
9000bd62:	6818      	ldr	r0, [r3, #0]
9000bd64:	f000 f842 	bl	9000bdec <_gettimeofday_r>
9000bd68:	2800      	cmp	r0, #0
9000bd6a:	bfbe      	ittt	lt
9000bd6c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
9000bd70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000bd74:	e9cd 2300 	strdlt	r2, r3, [sp]
9000bd78:	e9dd 0100 	ldrd	r0, r1, [sp]
9000bd7c:	b10c      	cbz	r4, 9000bd82 <time+0x2a>
9000bd7e:	e9c4 0100 	strd	r0, r1, [r4]
9000bd82:	b004      	add	sp, #16
9000bd84:	bd10      	pop	{r4, pc}
9000bd86:	bf00      	nop
9000bd88:	20000054 	.word	0x20000054

9000bd8c <__assert_func>:
9000bd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000bd8e:	4614      	mov	r4, r2
9000bd90:	461a      	mov	r2, r3
9000bd92:	4b09      	ldr	r3, [pc, #36]	; (9000bdb8 <__assert_func+0x2c>)
9000bd94:	681b      	ldr	r3, [r3, #0]
9000bd96:	4605      	mov	r5, r0
9000bd98:	68d8      	ldr	r0, [r3, #12]
9000bd9a:	b14c      	cbz	r4, 9000bdb0 <__assert_func+0x24>
9000bd9c:	4b07      	ldr	r3, [pc, #28]	; (9000bdbc <__assert_func+0x30>)
9000bd9e:	9100      	str	r1, [sp, #0]
9000bda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
9000bda4:	4906      	ldr	r1, [pc, #24]	; (9000bdc0 <__assert_func+0x34>)
9000bda6:	462b      	mov	r3, r5
9000bda8:	f000 f80e 	bl	9000bdc8 <fiprintf>
9000bdac:	f000 fd46 	bl	9000c83c <abort>
9000bdb0:	4b04      	ldr	r3, [pc, #16]	; (9000bdc4 <__assert_func+0x38>)
9000bdb2:	461c      	mov	r4, r3
9000bdb4:	e7f3      	b.n	9000bd9e <__assert_func+0x12>
9000bdb6:	bf00      	nop
9000bdb8:	20000054 	.word	0x20000054
9000bdbc:	9000d382 	.word	0x9000d382
9000bdc0:	9000d38f 	.word	0x9000d38f
9000bdc4:	9000d3bd 	.word	0x9000d3bd

9000bdc8 <fiprintf>:
9000bdc8:	b40e      	push	{r1, r2, r3}
9000bdca:	b503      	push	{r0, r1, lr}
9000bdcc:	4601      	mov	r1, r0
9000bdce:	ab03      	add	r3, sp, #12
9000bdd0:	4805      	ldr	r0, [pc, #20]	; (9000bde8 <fiprintf+0x20>)
9000bdd2:	f853 2b04 	ldr.w	r2, [r3], #4
9000bdd6:	6800      	ldr	r0, [r0, #0]
9000bdd8:	9301      	str	r3, [sp, #4]
9000bdda:	f000 f9ab 	bl	9000c134 <_vfiprintf_r>
9000bdde:	b002      	add	sp, #8
9000bde0:	f85d eb04 	ldr.w	lr, [sp], #4
9000bde4:	b003      	add	sp, #12
9000bde6:	4770      	bx	lr
9000bde8:	20000054 	.word	0x20000054

9000bdec <_gettimeofday_r>:
9000bdec:	b538      	push	{r3, r4, r5, lr}
9000bdee:	4d07      	ldr	r5, [pc, #28]	; (9000be0c <_gettimeofday_r+0x20>)
9000bdf0:	2300      	movs	r3, #0
9000bdf2:	4604      	mov	r4, r0
9000bdf4:	4608      	mov	r0, r1
9000bdf6:	4611      	mov	r1, r2
9000bdf8:	602b      	str	r3, [r5, #0]
9000bdfa:	f001 f889 	bl	9000cf10 <_gettimeofday>
9000bdfe:	1c43      	adds	r3, r0, #1
9000be00:	d102      	bne.n	9000be08 <_gettimeofday_r+0x1c>
9000be02:	682b      	ldr	r3, [r5, #0]
9000be04:	b103      	cbz	r3, 9000be08 <_gettimeofday_r+0x1c>
9000be06:	6023      	str	r3, [r4, #0]
9000be08:	bd38      	pop	{r3, r4, r5, pc}
9000be0a:	bf00      	nop
9000be0c:	200050c0 	.word	0x200050c0

9000be10 <__malloc_lock>:
9000be10:	4801      	ldr	r0, [pc, #4]	; (9000be18 <__malloc_lock+0x8>)
9000be12:	f000 bed3 	b.w	9000cbbc <__retarget_lock_acquire_recursive>
9000be16:	bf00      	nop
9000be18:	200050c4 	.word	0x200050c4

9000be1c <__malloc_unlock>:
9000be1c:	4801      	ldr	r0, [pc, #4]	; (9000be24 <__malloc_unlock+0x8>)
9000be1e:	f000 bece 	b.w	9000cbbe <__retarget_lock_release_recursive>
9000be22:	bf00      	nop
9000be24:	200050c4 	.word	0x200050c4

9000be28 <__ssputs_r>:
9000be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000be2c:	688e      	ldr	r6, [r1, #8]
9000be2e:	429e      	cmp	r6, r3
9000be30:	4682      	mov	sl, r0
9000be32:	460c      	mov	r4, r1
9000be34:	4690      	mov	r8, r2
9000be36:	461f      	mov	r7, r3
9000be38:	d838      	bhi.n	9000beac <__ssputs_r+0x84>
9000be3a:	898a      	ldrh	r2, [r1, #12]
9000be3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
9000be40:	d032      	beq.n	9000bea8 <__ssputs_r+0x80>
9000be42:	6825      	ldr	r5, [r4, #0]
9000be44:	6909      	ldr	r1, [r1, #16]
9000be46:	eba5 0901 	sub.w	r9, r5, r1
9000be4a:	6965      	ldr	r5, [r4, #20]
9000be4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9000be50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
9000be54:	3301      	adds	r3, #1
9000be56:	444b      	add	r3, r9
9000be58:	106d      	asrs	r5, r5, #1
9000be5a:	429d      	cmp	r5, r3
9000be5c:	bf38      	it	cc
9000be5e:	461d      	movcc	r5, r3
9000be60:	0553      	lsls	r3, r2, #21
9000be62:	d531      	bpl.n	9000bec8 <__ssputs_r+0xa0>
9000be64:	4629      	mov	r1, r5
9000be66:	f7ff fe67 	bl	9000bb38 <_malloc_r>
9000be6a:	4606      	mov	r6, r0
9000be6c:	b950      	cbnz	r0, 9000be84 <__ssputs_r+0x5c>
9000be6e:	230c      	movs	r3, #12
9000be70:	f8ca 3000 	str.w	r3, [sl]
9000be74:	89a3      	ldrh	r3, [r4, #12]
9000be76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000be7a:	81a3      	strh	r3, [r4, #12]
9000be7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000be80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000be84:	6921      	ldr	r1, [r4, #16]
9000be86:	464a      	mov	r2, r9
9000be88:	f7ff fdd4 	bl	9000ba34 <memcpy>
9000be8c:	89a3      	ldrh	r3, [r4, #12]
9000be8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
9000be92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000be96:	81a3      	strh	r3, [r4, #12]
9000be98:	6126      	str	r6, [r4, #16]
9000be9a:	6165      	str	r5, [r4, #20]
9000be9c:	444e      	add	r6, r9
9000be9e:	eba5 0509 	sub.w	r5, r5, r9
9000bea2:	6026      	str	r6, [r4, #0]
9000bea4:	60a5      	str	r5, [r4, #8]
9000bea6:	463e      	mov	r6, r7
9000bea8:	42be      	cmp	r6, r7
9000beaa:	d900      	bls.n	9000beae <__ssputs_r+0x86>
9000beac:	463e      	mov	r6, r7
9000beae:	6820      	ldr	r0, [r4, #0]
9000beb0:	4632      	mov	r2, r6
9000beb2:	4641      	mov	r1, r8
9000beb4:	f000 feea 	bl	9000cc8c <memmove>
9000beb8:	68a3      	ldr	r3, [r4, #8]
9000beba:	1b9b      	subs	r3, r3, r6
9000bebc:	60a3      	str	r3, [r4, #8]
9000bebe:	6823      	ldr	r3, [r4, #0]
9000bec0:	4433      	add	r3, r6
9000bec2:	6023      	str	r3, [r4, #0]
9000bec4:	2000      	movs	r0, #0
9000bec6:	e7db      	b.n	9000be80 <__ssputs_r+0x58>
9000bec8:	462a      	mov	r2, r5
9000beca:	f000 fef9 	bl	9000ccc0 <_realloc_r>
9000bece:	4606      	mov	r6, r0
9000bed0:	2800      	cmp	r0, #0
9000bed2:	d1e1      	bne.n	9000be98 <__ssputs_r+0x70>
9000bed4:	6921      	ldr	r1, [r4, #16]
9000bed6:	4650      	mov	r0, sl
9000bed8:	f7ff fdc2 	bl	9000ba60 <_free_r>
9000bedc:	e7c7      	b.n	9000be6e <__ssputs_r+0x46>
	...

9000bee0 <_svfiprintf_r>:
9000bee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000bee4:	4698      	mov	r8, r3
9000bee6:	898b      	ldrh	r3, [r1, #12]
9000bee8:	061b      	lsls	r3, r3, #24
9000beea:	b09d      	sub	sp, #116	; 0x74
9000beec:	4607      	mov	r7, r0
9000beee:	460d      	mov	r5, r1
9000bef0:	4614      	mov	r4, r2
9000bef2:	d50e      	bpl.n	9000bf12 <_svfiprintf_r+0x32>
9000bef4:	690b      	ldr	r3, [r1, #16]
9000bef6:	b963      	cbnz	r3, 9000bf12 <_svfiprintf_r+0x32>
9000bef8:	2140      	movs	r1, #64	; 0x40
9000befa:	f7ff fe1d 	bl	9000bb38 <_malloc_r>
9000befe:	6028      	str	r0, [r5, #0]
9000bf00:	6128      	str	r0, [r5, #16]
9000bf02:	b920      	cbnz	r0, 9000bf0e <_svfiprintf_r+0x2e>
9000bf04:	230c      	movs	r3, #12
9000bf06:	603b      	str	r3, [r7, #0]
9000bf08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000bf0c:	e0d1      	b.n	9000c0b2 <_svfiprintf_r+0x1d2>
9000bf0e:	2340      	movs	r3, #64	; 0x40
9000bf10:	616b      	str	r3, [r5, #20]
9000bf12:	2300      	movs	r3, #0
9000bf14:	9309      	str	r3, [sp, #36]	; 0x24
9000bf16:	2320      	movs	r3, #32
9000bf18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000bf1c:	f8cd 800c 	str.w	r8, [sp, #12]
9000bf20:	2330      	movs	r3, #48	; 0x30
9000bf22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 9000c0cc <_svfiprintf_r+0x1ec>
9000bf26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000bf2a:	f04f 0901 	mov.w	r9, #1
9000bf2e:	4623      	mov	r3, r4
9000bf30:	469a      	mov	sl, r3
9000bf32:	f813 2b01 	ldrb.w	r2, [r3], #1
9000bf36:	b10a      	cbz	r2, 9000bf3c <_svfiprintf_r+0x5c>
9000bf38:	2a25      	cmp	r2, #37	; 0x25
9000bf3a:	d1f9      	bne.n	9000bf30 <_svfiprintf_r+0x50>
9000bf3c:	ebba 0b04 	subs.w	fp, sl, r4
9000bf40:	d00b      	beq.n	9000bf5a <_svfiprintf_r+0x7a>
9000bf42:	465b      	mov	r3, fp
9000bf44:	4622      	mov	r2, r4
9000bf46:	4629      	mov	r1, r5
9000bf48:	4638      	mov	r0, r7
9000bf4a:	f7ff ff6d 	bl	9000be28 <__ssputs_r>
9000bf4e:	3001      	adds	r0, #1
9000bf50:	f000 80aa 	beq.w	9000c0a8 <_svfiprintf_r+0x1c8>
9000bf54:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000bf56:	445a      	add	r2, fp
9000bf58:	9209      	str	r2, [sp, #36]	; 0x24
9000bf5a:	f89a 3000 	ldrb.w	r3, [sl]
9000bf5e:	2b00      	cmp	r3, #0
9000bf60:	f000 80a2 	beq.w	9000c0a8 <_svfiprintf_r+0x1c8>
9000bf64:	2300      	movs	r3, #0
9000bf66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000bf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000bf6e:	f10a 0a01 	add.w	sl, sl, #1
9000bf72:	9304      	str	r3, [sp, #16]
9000bf74:	9307      	str	r3, [sp, #28]
9000bf76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000bf7a:	931a      	str	r3, [sp, #104]	; 0x68
9000bf7c:	4654      	mov	r4, sl
9000bf7e:	2205      	movs	r2, #5
9000bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
9000bf84:	4851      	ldr	r0, [pc, #324]	; (9000c0cc <_svfiprintf_r+0x1ec>)
9000bf86:	f7f4 f9ab 	bl	900002e0 <memchr>
9000bf8a:	9a04      	ldr	r2, [sp, #16]
9000bf8c:	b9d8      	cbnz	r0, 9000bfc6 <_svfiprintf_r+0xe6>
9000bf8e:	06d0      	lsls	r0, r2, #27
9000bf90:	bf44      	itt	mi
9000bf92:	2320      	movmi	r3, #32
9000bf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bf98:	0711      	lsls	r1, r2, #28
9000bf9a:	bf44      	itt	mi
9000bf9c:	232b      	movmi	r3, #43	; 0x2b
9000bf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000bfa2:	f89a 3000 	ldrb.w	r3, [sl]
9000bfa6:	2b2a      	cmp	r3, #42	; 0x2a
9000bfa8:	d015      	beq.n	9000bfd6 <_svfiprintf_r+0xf6>
9000bfaa:	9a07      	ldr	r2, [sp, #28]
9000bfac:	4654      	mov	r4, sl
9000bfae:	2000      	movs	r0, #0
9000bfb0:	f04f 0c0a 	mov.w	ip, #10
9000bfb4:	4621      	mov	r1, r4
9000bfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
9000bfba:	3b30      	subs	r3, #48	; 0x30
9000bfbc:	2b09      	cmp	r3, #9
9000bfbe:	d94e      	bls.n	9000c05e <_svfiprintf_r+0x17e>
9000bfc0:	b1b0      	cbz	r0, 9000bff0 <_svfiprintf_r+0x110>
9000bfc2:	9207      	str	r2, [sp, #28]
9000bfc4:	e014      	b.n	9000bff0 <_svfiprintf_r+0x110>
9000bfc6:	eba0 0308 	sub.w	r3, r0, r8
9000bfca:	fa09 f303 	lsl.w	r3, r9, r3
9000bfce:	4313      	orrs	r3, r2
9000bfd0:	9304      	str	r3, [sp, #16]
9000bfd2:	46a2      	mov	sl, r4
9000bfd4:	e7d2      	b.n	9000bf7c <_svfiprintf_r+0x9c>
9000bfd6:	9b03      	ldr	r3, [sp, #12]
9000bfd8:	1d19      	adds	r1, r3, #4
9000bfda:	681b      	ldr	r3, [r3, #0]
9000bfdc:	9103      	str	r1, [sp, #12]
9000bfde:	2b00      	cmp	r3, #0
9000bfe0:	bfbb      	ittet	lt
9000bfe2:	425b      	neglt	r3, r3
9000bfe4:	f042 0202 	orrlt.w	r2, r2, #2
9000bfe8:	9307      	strge	r3, [sp, #28]
9000bfea:	9307      	strlt	r3, [sp, #28]
9000bfec:	bfb8      	it	lt
9000bfee:	9204      	strlt	r2, [sp, #16]
9000bff0:	7823      	ldrb	r3, [r4, #0]
9000bff2:	2b2e      	cmp	r3, #46	; 0x2e
9000bff4:	d10c      	bne.n	9000c010 <_svfiprintf_r+0x130>
9000bff6:	7863      	ldrb	r3, [r4, #1]
9000bff8:	2b2a      	cmp	r3, #42	; 0x2a
9000bffa:	d135      	bne.n	9000c068 <_svfiprintf_r+0x188>
9000bffc:	9b03      	ldr	r3, [sp, #12]
9000bffe:	1d1a      	adds	r2, r3, #4
9000c000:	681b      	ldr	r3, [r3, #0]
9000c002:	9203      	str	r2, [sp, #12]
9000c004:	2b00      	cmp	r3, #0
9000c006:	bfb8      	it	lt
9000c008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000c00c:	3402      	adds	r4, #2
9000c00e:	9305      	str	r3, [sp, #20]
9000c010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9000c0dc <_svfiprintf_r+0x1fc>
9000c014:	7821      	ldrb	r1, [r4, #0]
9000c016:	2203      	movs	r2, #3
9000c018:	4650      	mov	r0, sl
9000c01a:	f7f4 f961 	bl	900002e0 <memchr>
9000c01e:	b140      	cbz	r0, 9000c032 <_svfiprintf_r+0x152>
9000c020:	2340      	movs	r3, #64	; 0x40
9000c022:	eba0 000a 	sub.w	r0, r0, sl
9000c026:	fa03 f000 	lsl.w	r0, r3, r0
9000c02a:	9b04      	ldr	r3, [sp, #16]
9000c02c:	4303      	orrs	r3, r0
9000c02e:	3401      	adds	r4, #1
9000c030:	9304      	str	r3, [sp, #16]
9000c032:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c036:	4826      	ldr	r0, [pc, #152]	; (9000c0d0 <_svfiprintf_r+0x1f0>)
9000c038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000c03c:	2206      	movs	r2, #6
9000c03e:	f7f4 f94f 	bl	900002e0 <memchr>
9000c042:	2800      	cmp	r0, #0
9000c044:	d038      	beq.n	9000c0b8 <_svfiprintf_r+0x1d8>
9000c046:	4b23      	ldr	r3, [pc, #140]	; (9000c0d4 <_svfiprintf_r+0x1f4>)
9000c048:	bb1b      	cbnz	r3, 9000c092 <_svfiprintf_r+0x1b2>
9000c04a:	9b03      	ldr	r3, [sp, #12]
9000c04c:	3307      	adds	r3, #7
9000c04e:	f023 0307 	bic.w	r3, r3, #7
9000c052:	3308      	adds	r3, #8
9000c054:	9303      	str	r3, [sp, #12]
9000c056:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000c058:	4433      	add	r3, r6
9000c05a:	9309      	str	r3, [sp, #36]	; 0x24
9000c05c:	e767      	b.n	9000bf2e <_svfiprintf_r+0x4e>
9000c05e:	fb0c 3202 	mla	r2, ip, r2, r3
9000c062:	460c      	mov	r4, r1
9000c064:	2001      	movs	r0, #1
9000c066:	e7a5      	b.n	9000bfb4 <_svfiprintf_r+0xd4>
9000c068:	2300      	movs	r3, #0
9000c06a:	3401      	adds	r4, #1
9000c06c:	9305      	str	r3, [sp, #20]
9000c06e:	4619      	mov	r1, r3
9000c070:	f04f 0c0a 	mov.w	ip, #10
9000c074:	4620      	mov	r0, r4
9000c076:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c07a:	3a30      	subs	r2, #48	; 0x30
9000c07c:	2a09      	cmp	r2, #9
9000c07e:	d903      	bls.n	9000c088 <_svfiprintf_r+0x1a8>
9000c080:	2b00      	cmp	r3, #0
9000c082:	d0c5      	beq.n	9000c010 <_svfiprintf_r+0x130>
9000c084:	9105      	str	r1, [sp, #20]
9000c086:	e7c3      	b.n	9000c010 <_svfiprintf_r+0x130>
9000c088:	fb0c 2101 	mla	r1, ip, r1, r2
9000c08c:	4604      	mov	r4, r0
9000c08e:	2301      	movs	r3, #1
9000c090:	e7f0      	b.n	9000c074 <_svfiprintf_r+0x194>
9000c092:	ab03      	add	r3, sp, #12
9000c094:	9300      	str	r3, [sp, #0]
9000c096:	462a      	mov	r2, r5
9000c098:	4b0f      	ldr	r3, [pc, #60]	; (9000c0d8 <_svfiprintf_r+0x1f8>)
9000c09a:	a904      	add	r1, sp, #16
9000c09c:	4638      	mov	r0, r7
9000c09e:	f3af 8000 	nop.w
9000c0a2:	1c42      	adds	r2, r0, #1
9000c0a4:	4606      	mov	r6, r0
9000c0a6:	d1d6      	bne.n	9000c056 <_svfiprintf_r+0x176>
9000c0a8:	89ab      	ldrh	r3, [r5, #12]
9000c0aa:	065b      	lsls	r3, r3, #25
9000c0ac:	f53f af2c 	bmi.w	9000bf08 <_svfiprintf_r+0x28>
9000c0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
9000c0b2:	b01d      	add	sp, #116	; 0x74
9000c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c0b8:	ab03      	add	r3, sp, #12
9000c0ba:	9300      	str	r3, [sp, #0]
9000c0bc:	462a      	mov	r2, r5
9000c0be:	4b06      	ldr	r3, [pc, #24]	; (9000c0d8 <_svfiprintf_r+0x1f8>)
9000c0c0:	a904      	add	r1, sp, #16
9000c0c2:	4638      	mov	r0, r7
9000c0c4:	f000 f9d4 	bl	9000c470 <_printf_i>
9000c0c8:	e7eb      	b.n	9000c0a2 <_svfiprintf_r+0x1c2>
9000c0ca:	bf00      	nop
9000c0cc:	9000d3be 	.word	0x9000d3be
9000c0d0:	9000d3c8 	.word	0x9000d3c8
9000c0d4:	00000000 	.word	0x00000000
9000c0d8:	9000be29 	.word	0x9000be29
9000c0dc:	9000d3c4 	.word	0x9000d3c4

9000c0e0 <__sfputc_r>:
9000c0e0:	6893      	ldr	r3, [r2, #8]
9000c0e2:	3b01      	subs	r3, #1
9000c0e4:	2b00      	cmp	r3, #0
9000c0e6:	b410      	push	{r4}
9000c0e8:	6093      	str	r3, [r2, #8]
9000c0ea:	da08      	bge.n	9000c0fe <__sfputc_r+0x1e>
9000c0ec:	6994      	ldr	r4, [r2, #24]
9000c0ee:	42a3      	cmp	r3, r4
9000c0f0:	db01      	blt.n	9000c0f6 <__sfputc_r+0x16>
9000c0f2:	290a      	cmp	r1, #10
9000c0f4:	d103      	bne.n	9000c0fe <__sfputc_r+0x1e>
9000c0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c0fa:	f000 badf 	b.w	9000c6bc <__swbuf_r>
9000c0fe:	6813      	ldr	r3, [r2, #0]
9000c100:	1c58      	adds	r0, r3, #1
9000c102:	6010      	str	r0, [r2, #0]
9000c104:	7019      	strb	r1, [r3, #0]
9000c106:	4608      	mov	r0, r1
9000c108:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c10c:	4770      	bx	lr

9000c10e <__sfputs_r>:
9000c10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c110:	4606      	mov	r6, r0
9000c112:	460f      	mov	r7, r1
9000c114:	4614      	mov	r4, r2
9000c116:	18d5      	adds	r5, r2, r3
9000c118:	42ac      	cmp	r4, r5
9000c11a:	d101      	bne.n	9000c120 <__sfputs_r+0x12>
9000c11c:	2000      	movs	r0, #0
9000c11e:	e007      	b.n	9000c130 <__sfputs_r+0x22>
9000c120:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c124:	463a      	mov	r2, r7
9000c126:	4630      	mov	r0, r6
9000c128:	f7ff ffda 	bl	9000c0e0 <__sfputc_r>
9000c12c:	1c43      	adds	r3, r0, #1
9000c12e:	d1f3      	bne.n	9000c118 <__sfputs_r+0xa>
9000c130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000c134 <_vfiprintf_r>:
9000c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c138:	460d      	mov	r5, r1
9000c13a:	b09d      	sub	sp, #116	; 0x74
9000c13c:	4614      	mov	r4, r2
9000c13e:	4698      	mov	r8, r3
9000c140:	4606      	mov	r6, r0
9000c142:	b118      	cbz	r0, 9000c14c <_vfiprintf_r+0x18>
9000c144:	6983      	ldr	r3, [r0, #24]
9000c146:	b90b      	cbnz	r3, 9000c14c <_vfiprintf_r+0x18>
9000c148:	f000 fc9a 	bl	9000ca80 <__sinit>
9000c14c:	4b89      	ldr	r3, [pc, #548]	; (9000c374 <_vfiprintf_r+0x240>)
9000c14e:	429d      	cmp	r5, r3
9000c150:	d11b      	bne.n	9000c18a <_vfiprintf_r+0x56>
9000c152:	6875      	ldr	r5, [r6, #4]
9000c154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c156:	07d9      	lsls	r1, r3, #31
9000c158:	d405      	bmi.n	9000c166 <_vfiprintf_r+0x32>
9000c15a:	89ab      	ldrh	r3, [r5, #12]
9000c15c:	059a      	lsls	r2, r3, #22
9000c15e:	d402      	bmi.n	9000c166 <_vfiprintf_r+0x32>
9000c160:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c162:	f000 fd2b 	bl	9000cbbc <__retarget_lock_acquire_recursive>
9000c166:	89ab      	ldrh	r3, [r5, #12]
9000c168:	071b      	lsls	r3, r3, #28
9000c16a:	d501      	bpl.n	9000c170 <_vfiprintf_r+0x3c>
9000c16c:	692b      	ldr	r3, [r5, #16]
9000c16e:	b9eb      	cbnz	r3, 9000c1ac <_vfiprintf_r+0x78>
9000c170:	4629      	mov	r1, r5
9000c172:	4630      	mov	r0, r6
9000c174:	f000 faf4 	bl	9000c760 <__swsetup_r>
9000c178:	b1c0      	cbz	r0, 9000c1ac <_vfiprintf_r+0x78>
9000c17a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c17c:	07dc      	lsls	r4, r3, #31
9000c17e:	d50e      	bpl.n	9000c19e <_vfiprintf_r+0x6a>
9000c180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000c184:	b01d      	add	sp, #116	; 0x74
9000c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000c18a:	4b7b      	ldr	r3, [pc, #492]	; (9000c378 <_vfiprintf_r+0x244>)
9000c18c:	429d      	cmp	r5, r3
9000c18e:	d101      	bne.n	9000c194 <_vfiprintf_r+0x60>
9000c190:	68b5      	ldr	r5, [r6, #8]
9000c192:	e7df      	b.n	9000c154 <_vfiprintf_r+0x20>
9000c194:	4b79      	ldr	r3, [pc, #484]	; (9000c37c <_vfiprintf_r+0x248>)
9000c196:	429d      	cmp	r5, r3
9000c198:	bf08      	it	eq
9000c19a:	68f5      	ldreq	r5, [r6, #12]
9000c19c:	e7da      	b.n	9000c154 <_vfiprintf_r+0x20>
9000c19e:	89ab      	ldrh	r3, [r5, #12]
9000c1a0:	0598      	lsls	r0, r3, #22
9000c1a2:	d4ed      	bmi.n	9000c180 <_vfiprintf_r+0x4c>
9000c1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c1a6:	f000 fd0a 	bl	9000cbbe <__retarget_lock_release_recursive>
9000c1aa:	e7e9      	b.n	9000c180 <_vfiprintf_r+0x4c>
9000c1ac:	2300      	movs	r3, #0
9000c1ae:	9309      	str	r3, [sp, #36]	; 0x24
9000c1b0:	2320      	movs	r3, #32
9000c1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9000c1b6:	f8cd 800c 	str.w	r8, [sp, #12]
9000c1ba:	2330      	movs	r3, #48	; 0x30
9000c1bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 9000c380 <_vfiprintf_r+0x24c>
9000c1c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9000c1c4:	f04f 0901 	mov.w	r9, #1
9000c1c8:	4623      	mov	r3, r4
9000c1ca:	469a      	mov	sl, r3
9000c1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
9000c1d0:	b10a      	cbz	r2, 9000c1d6 <_vfiprintf_r+0xa2>
9000c1d2:	2a25      	cmp	r2, #37	; 0x25
9000c1d4:	d1f9      	bne.n	9000c1ca <_vfiprintf_r+0x96>
9000c1d6:	ebba 0b04 	subs.w	fp, sl, r4
9000c1da:	d00b      	beq.n	9000c1f4 <_vfiprintf_r+0xc0>
9000c1dc:	465b      	mov	r3, fp
9000c1de:	4622      	mov	r2, r4
9000c1e0:	4629      	mov	r1, r5
9000c1e2:	4630      	mov	r0, r6
9000c1e4:	f7ff ff93 	bl	9000c10e <__sfputs_r>
9000c1e8:	3001      	adds	r0, #1
9000c1ea:	f000 80aa 	beq.w	9000c342 <_vfiprintf_r+0x20e>
9000c1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000c1f0:	445a      	add	r2, fp
9000c1f2:	9209      	str	r2, [sp, #36]	; 0x24
9000c1f4:	f89a 3000 	ldrb.w	r3, [sl]
9000c1f8:	2b00      	cmp	r3, #0
9000c1fa:	f000 80a2 	beq.w	9000c342 <_vfiprintf_r+0x20e>
9000c1fe:	2300      	movs	r3, #0
9000c200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000c204:	e9cd 2305 	strd	r2, r3, [sp, #20]
9000c208:	f10a 0a01 	add.w	sl, sl, #1
9000c20c:	9304      	str	r3, [sp, #16]
9000c20e:	9307      	str	r3, [sp, #28]
9000c210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9000c214:	931a      	str	r3, [sp, #104]	; 0x68
9000c216:	4654      	mov	r4, sl
9000c218:	2205      	movs	r2, #5
9000c21a:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c21e:	4858      	ldr	r0, [pc, #352]	; (9000c380 <_vfiprintf_r+0x24c>)
9000c220:	f7f4 f85e 	bl	900002e0 <memchr>
9000c224:	9a04      	ldr	r2, [sp, #16]
9000c226:	b9d8      	cbnz	r0, 9000c260 <_vfiprintf_r+0x12c>
9000c228:	06d1      	lsls	r1, r2, #27
9000c22a:	bf44      	itt	mi
9000c22c:	2320      	movmi	r3, #32
9000c22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c232:	0713      	lsls	r3, r2, #28
9000c234:	bf44      	itt	mi
9000c236:	232b      	movmi	r3, #43	; 0x2b
9000c238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9000c23c:	f89a 3000 	ldrb.w	r3, [sl]
9000c240:	2b2a      	cmp	r3, #42	; 0x2a
9000c242:	d015      	beq.n	9000c270 <_vfiprintf_r+0x13c>
9000c244:	9a07      	ldr	r2, [sp, #28]
9000c246:	4654      	mov	r4, sl
9000c248:	2000      	movs	r0, #0
9000c24a:	f04f 0c0a 	mov.w	ip, #10
9000c24e:	4621      	mov	r1, r4
9000c250:	f811 3b01 	ldrb.w	r3, [r1], #1
9000c254:	3b30      	subs	r3, #48	; 0x30
9000c256:	2b09      	cmp	r3, #9
9000c258:	d94e      	bls.n	9000c2f8 <_vfiprintf_r+0x1c4>
9000c25a:	b1b0      	cbz	r0, 9000c28a <_vfiprintf_r+0x156>
9000c25c:	9207      	str	r2, [sp, #28]
9000c25e:	e014      	b.n	9000c28a <_vfiprintf_r+0x156>
9000c260:	eba0 0308 	sub.w	r3, r0, r8
9000c264:	fa09 f303 	lsl.w	r3, r9, r3
9000c268:	4313      	orrs	r3, r2
9000c26a:	9304      	str	r3, [sp, #16]
9000c26c:	46a2      	mov	sl, r4
9000c26e:	e7d2      	b.n	9000c216 <_vfiprintf_r+0xe2>
9000c270:	9b03      	ldr	r3, [sp, #12]
9000c272:	1d19      	adds	r1, r3, #4
9000c274:	681b      	ldr	r3, [r3, #0]
9000c276:	9103      	str	r1, [sp, #12]
9000c278:	2b00      	cmp	r3, #0
9000c27a:	bfbb      	ittet	lt
9000c27c:	425b      	neglt	r3, r3
9000c27e:	f042 0202 	orrlt.w	r2, r2, #2
9000c282:	9307      	strge	r3, [sp, #28]
9000c284:	9307      	strlt	r3, [sp, #28]
9000c286:	bfb8      	it	lt
9000c288:	9204      	strlt	r2, [sp, #16]
9000c28a:	7823      	ldrb	r3, [r4, #0]
9000c28c:	2b2e      	cmp	r3, #46	; 0x2e
9000c28e:	d10c      	bne.n	9000c2aa <_vfiprintf_r+0x176>
9000c290:	7863      	ldrb	r3, [r4, #1]
9000c292:	2b2a      	cmp	r3, #42	; 0x2a
9000c294:	d135      	bne.n	9000c302 <_vfiprintf_r+0x1ce>
9000c296:	9b03      	ldr	r3, [sp, #12]
9000c298:	1d1a      	adds	r2, r3, #4
9000c29a:	681b      	ldr	r3, [r3, #0]
9000c29c:	9203      	str	r2, [sp, #12]
9000c29e:	2b00      	cmp	r3, #0
9000c2a0:	bfb8      	it	lt
9000c2a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
9000c2a6:	3402      	adds	r4, #2
9000c2a8:	9305      	str	r3, [sp, #20]
9000c2aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 9000c390 <_vfiprintf_r+0x25c>
9000c2ae:	7821      	ldrb	r1, [r4, #0]
9000c2b0:	2203      	movs	r2, #3
9000c2b2:	4650      	mov	r0, sl
9000c2b4:	f7f4 f814 	bl	900002e0 <memchr>
9000c2b8:	b140      	cbz	r0, 9000c2cc <_vfiprintf_r+0x198>
9000c2ba:	2340      	movs	r3, #64	; 0x40
9000c2bc:	eba0 000a 	sub.w	r0, r0, sl
9000c2c0:	fa03 f000 	lsl.w	r0, r3, r0
9000c2c4:	9b04      	ldr	r3, [sp, #16]
9000c2c6:	4303      	orrs	r3, r0
9000c2c8:	3401      	adds	r4, #1
9000c2ca:	9304      	str	r3, [sp, #16]
9000c2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
9000c2d0:	482c      	ldr	r0, [pc, #176]	; (9000c384 <_vfiprintf_r+0x250>)
9000c2d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9000c2d6:	2206      	movs	r2, #6
9000c2d8:	f7f4 f802 	bl	900002e0 <memchr>
9000c2dc:	2800      	cmp	r0, #0
9000c2de:	d03f      	beq.n	9000c360 <_vfiprintf_r+0x22c>
9000c2e0:	4b29      	ldr	r3, [pc, #164]	; (9000c388 <_vfiprintf_r+0x254>)
9000c2e2:	bb1b      	cbnz	r3, 9000c32c <_vfiprintf_r+0x1f8>
9000c2e4:	9b03      	ldr	r3, [sp, #12]
9000c2e6:	3307      	adds	r3, #7
9000c2e8:	f023 0307 	bic.w	r3, r3, #7
9000c2ec:	3308      	adds	r3, #8
9000c2ee:	9303      	str	r3, [sp, #12]
9000c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000c2f2:	443b      	add	r3, r7
9000c2f4:	9309      	str	r3, [sp, #36]	; 0x24
9000c2f6:	e767      	b.n	9000c1c8 <_vfiprintf_r+0x94>
9000c2f8:	fb0c 3202 	mla	r2, ip, r2, r3
9000c2fc:	460c      	mov	r4, r1
9000c2fe:	2001      	movs	r0, #1
9000c300:	e7a5      	b.n	9000c24e <_vfiprintf_r+0x11a>
9000c302:	2300      	movs	r3, #0
9000c304:	3401      	adds	r4, #1
9000c306:	9305      	str	r3, [sp, #20]
9000c308:	4619      	mov	r1, r3
9000c30a:	f04f 0c0a 	mov.w	ip, #10
9000c30e:	4620      	mov	r0, r4
9000c310:	f810 2b01 	ldrb.w	r2, [r0], #1
9000c314:	3a30      	subs	r2, #48	; 0x30
9000c316:	2a09      	cmp	r2, #9
9000c318:	d903      	bls.n	9000c322 <_vfiprintf_r+0x1ee>
9000c31a:	2b00      	cmp	r3, #0
9000c31c:	d0c5      	beq.n	9000c2aa <_vfiprintf_r+0x176>
9000c31e:	9105      	str	r1, [sp, #20]
9000c320:	e7c3      	b.n	9000c2aa <_vfiprintf_r+0x176>
9000c322:	fb0c 2101 	mla	r1, ip, r1, r2
9000c326:	4604      	mov	r4, r0
9000c328:	2301      	movs	r3, #1
9000c32a:	e7f0      	b.n	9000c30e <_vfiprintf_r+0x1da>
9000c32c:	ab03      	add	r3, sp, #12
9000c32e:	9300      	str	r3, [sp, #0]
9000c330:	462a      	mov	r2, r5
9000c332:	4b16      	ldr	r3, [pc, #88]	; (9000c38c <_vfiprintf_r+0x258>)
9000c334:	a904      	add	r1, sp, #16
9000c336:	4630      	mov	r0, r6
9000c338:	f3af 8000 	nop.w
9000c33c:	4607      	mov	r7, r0
9000c33e:	1c78      	adds	r0, r7, #1
9000c340:	d1d6      	bne.n	9000c2f0 <_vfiprintf_r+0x1bc>
9000c342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9000c344:	07d9      	lsls	r1, r3, #31
9000c346:	d405      	bmi.n	9000c354 <_vfiprintf_r+0x220>
9000c348:	89ab      	ldrh	r3, [r5, #12]
9000c34a:	059a      	lsls	r2, r3, #22
9000c34c:	d402      	bmi.n	9000c354 <_vfiprintf_r+0x220>
9000c34e:	6da8      	ldr	r0, [r5, #88]	; 0x58
9000c350:	f000 fc35 	bl	9000cbbe <__retarget_lock_release_recursive>
9000c354:	89ab      	ldrh	r3, [r5, #12]
9000c356:	065b      	lsls	r3, r3, #25
9000c358:	f53f af12 	bmi.w	9000c180 <_vfiprintf_r+0x4c>
9000c35c:	9809      	ldr	r0, [sp, #36]	; 0x24
9000c35e:	e711      	b.n	9000c184 <_vfiprintf_r+0x50>
9000c360:	ab03      	add	r3, sp, #12
9000c362:	9300      	str	r3, [sp, #0]
9000c364:	462a      	mov	r2, r5
9000c366:	4b09      	ldr	r3, [pc, #36]	; (9000c38c <_vfiprintf_r+0x258>)
9000c368:	a904      	add	r1, sp, #16
9000c36a:	4630      	mov	r0, r6
9000c36c:	f000 f880 	bl	9000c470 <_printf_i>
9000c370:	e7e4      	b.n	9000c33c <_vfiprintf_r+0x208>
9000c372:	bf00      	nop
9000c374:	9000d414 	.word	0x9000d414
9000c378:	9000d434 	.word	0x9000d434
9000c37c:	9000d3f4 	.word	0x9000d3f4
9000c380:	9000d3be 	.word	0x9000d3be
9000c384:	9000d3c8 	.word	0x9000d3c8
9000c388:	00000000 	.word	0x00000000
9000c38c:	9000c10f 	.word	0x9000c10f
9000c390:	9000d3c4 	.word	0x9000d3c4

9000c394 <_printf_common>:
9000c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c398:	4616      	mov	r6, r2
9000c39a:	4699      	mov	r9, r3
9000c39c:	688a      	ldr	r2, [r1, #8]
9000c39e:	690b      	ldr	r3, [r1, #16]
9000c3a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
9000c3a4:	4293      	cmp	r3, r2
9000c3a6:	bfb8      	it	lt
9000c3a8:	4613      	movlt	r3, r2
9000c3aa:	6033      	str	r3, [r6, #0]
9000c3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
9000c3b0:	4607      	mov	r7, r0
9000c3b2:	460c      	mov	r4, r1
9000c3b4:	b10a      	cbz	r2, 9000c3ba <_printf_common+0x26>
9000c3b6:	3301      	adds	r3, #1
9000c3b8:	6033      	str	r3, [r6, #0]
9000c3ba:	6823      	ldr	r3, [r4, #0]
9000c3bc:	0699      	lsls	r1, r3, #26
9000c3be:	bf42      	ittt	mi
9000c3c0:	6833      	ldrmi	r3, [r6, #0]
9000c3c2:	3302      	addmi	r3, #2
9000c3c4:	6033      	strmi	r3, [r6, #0]
9000c3c6:	6825      	ldr	r5, [r4, #0]
9000c3c8:	f015 0506 	ands.w	r5, r5, #6
9000c3cc:	d106      	bne.n	9000c3dc <_printf_common+0x48>
9000c3ce:	f104 0a19 	add.w	sl, r4, #25
9000c3d2:	68e3      	ldr	r3, [r4, #12]
9000c3d4:	6832      	ldr	r2, [r6, #0]
9000c3d6:	1a9b      	subs	r3, r3, r2
9000c3d8:	42ab      	cmp	r3, r5
9000c3da:	dc26      	bgt.n	9000c42a <_printf_common+0x96>
9000c3dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9000c3e0:	1e13      	subs	r3, r2, #0
9000c3e2:	6822      	ldr	r2, [r4, #0]
9000c3e4:	bf18      	it	ne
9000c3e6:	2301      	movne	r3, #1
9000c3e8:	0692      	lsls	r2, r2, #26
9000c3ea:	d42b      	bmi.n	9000c444 <_printf_common+0xb0>
9000c3ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
9000c3f0:	4649      	mov	r1, r9
9000c3f2:	4638      	mov	r0, r7
9000c3f4:	47c0      	blx	r8
9000c3f6:	3001      	adds	r0, #1
9000c3f8:	d01e      	beq.n	9000c438 <_printf_common+0xa4>
9000c3fa:	6823      	ldr	r3, [r4, #0]
9000c3fc:	68e5      	ldr	r5, [r4, #12]
9000c3fe:	6832      	ldr	r2, [r6, #0]
9000c400:	f003 0306 	and.w	r3, r3, #6
9000c404:	2b04      	cmp	r3, #4
9000c406:	bf08      	it	eq
9000c408:	1aad      	subeq	r5, r5, r2
9000c40a:	68a3      	ldr	r3, [r4, #8]
9000c40c:	6922      	ldr	r2, [r4, #16]
9000c40e:	bf0c      	ite	eq
9000c410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9000c414:	2500      	movne	r5, #0
9000c416:	4293      	cmp	r3, r2
9000c418:	bfc4      	itt	gt
9000c41a:	1a9b      	subgt	r3, r3, r2
9000c41c:	18ed      	addgt	r5, r5, r3
9000c41e:	2600      	movs	r6, #0
9000c420:	341a      	adds	r4, #26
9000c422:	42b5      	cmp	r5, r6
9000c424:	d11a      	bne.n	9000c45c <_printf_common+0xc8>
9000c426:	2000      	movs	r0, #0
9000c428:	e008      	b.n	9000c43c <_printf_common+0xa8>
9000c42a:	2301      	movs	r3, #1
9000c42c:	4652      	mov	r2, sl
9000c42e:	4649      	mov	r1, r9
9000c430:	4638      	mov	r0, r7
9000c432:	47c0      	blx	r8
9000c434:	3001      	adds	r0, #1
9000c436:	d103      	bne.n	9000c440 <_printf_common+0xac>
9000c438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c440:	3501      	adds	r5, #1
9000c442:	e7c6      	b.n	9000c3d2 <_printf_common+0x3e>
9000c444:	18e1      	adds	r1, r4, r3
9000c446:	1c5a      	adds	r2, r3, #1
9000c448:	2030      	movs	r0, #48	; 0x30
9000c44a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9000c44e:	4422      	add	r2, r4
9000c450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9000c454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9000c458:	3302      	adds	r3, #2
9000c45a:	e7c7      	b.n	9000c3ec <_printf_common+0x58>
9000c45c:	2301      	movs	r3, #1
9000c45e:	4622      	mov	r2, r4
9000c460:	4649      	mov	r1, r9
9000c462:	4638      	mov	r0, r7
9000c464:	47c0      	blx	r8
9000c466:	3001      	adds	r0, #1
9000c468:	d0e6      	beq.n	9000c438 <_printf_common+0xa4>
9000c46a:	3601      	adds	r6, #1
9000c46c:	e7d9      	b.n	9000c422 <_printf_common+0x8e>
	...

9000c470 <_printf_i>:
9000c470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000c474:	7e0f      	ldrb	r7, [r1, #24]
9000c476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000c478:	2f78      	cmp	r7, #120	; 0x78
9000c47a:	4691      	mov	r9, r2
9000c47c:	4680      	mov	r8, r0
9000c47e:	460c      	mov	r4, r1
9000c480:	469a      	mov	sl, r3
9000c482:	f101 0243 	add.w	r2, r1, #67	; 0x43
9000c486:	d807      	bhi.n	9000c498 <_printf_i+0x28>
9000c488:	2f62      	cmp	r7, #98	; 0x62
9000c48a:	d80a      	bhi.n	9000c4a2 <_printf_i+0x32>
9000c48c:	2f00      	cmp	r7, #0
9000c48e:	f000 80d8 	beq.w	9000c642 <_printf_i+0x1d2>
9000c492:	2f58      	cmp	r7, #88	; 0x58
9000c494:	f000 80a3 	beq.w	9000c5de <_printf_i+0x16e>
9000c498:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c49c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
9000c4a0:	e03a      	b.n	9000c518 <_printf_i+0xa8>
9000c4a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9000c4a6:	2b15      	cmp	r3, #21
9000c4a8:	d8f6      	bhi.n	9000c498 <_printf_i+0x28>
9000c4aa:	a101      	add	r1, pc, #4	; (adr r1, 9000c4b0 <_printf_i+0x40>)
9000c4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
9000c4b0:	9000c509 	.word	0x9000c509
9000c4b4:	9000c51d 	.word	0x9000c51d
9000c4b8:	9000c499 	.word	0x9000c499
9000c4bc:	9000c499 	.word	0x9000c499
9000c4c0:	9000c499 	.word	0x9000c499
9000c4c4:	9000c499 	.word	0x9000c499
9000c4c8:	9000c51d 	.word	0x9000c51d
9000c4cc:	9000c499 	.word	0x9000c499
9000c4d0:	9000c499 	.word	0x9000c499
9000c4d4:	9000c499 	.word	0x9000c499
9000c4d8:	9000c499 	.word	0x9000c499
9000c4dc:	9000c629 	.word	0x9000c629
9000c4e0:	9000c54d 	.word	0x9000c54d
9000c4e4:	9000c60b 	.word	0x9000c60b
9000c4e8:	9000c499 	.word	0x9000c499
9000c4ec:	9000c499 	.word	0x9000c499
9000c4f0:	9000c64b 	.word	0x9000c64b
9000c4f4:	9000c499 	.word	0x9000c499
9000c4f8:	9000c54d 	.word	0x9000c54d
9000c4fc:	9000c499 	.word	0x9000c499
9000c500:	9000c499 	.word	0x9000c499
9000c504:	9000c613 	.word	0x9000c613
9000c508:	682b      	ldr	r3, [r5, #0]
9000c50a:	1d1a      	adds	r2, r3, #4
9000c50c:	681b      	ldr	r3, [r3, #0]
9000c50e:	602a      	str	r2, [r5, #0]
9000c510:	f104 0542 	add.w	r5, r4, #66	; 0x42
9000c514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000c518:	2301      	movs	r3, #1
9000c51a:	e0a3      	b.n	9000c664 <_printf_i+0x1f4>
9000c51c:	6820      	ldr	r0, [r4, #0]
9000c51e:	6829      	ldr	r1, [r5, #0]
9000c520:	0606      	lsls	r6, r0, #24
9000c522:	f101 0304 	add.w	r3, r1, #4
9000c526:	d50a      	bpl.n	9000c53e <_printf_i+0xce>
9000c528:	680e      	ldr	r6, [r1, #0]
9000c52a:	602b      	str	r3, [r5, #0]
9000c52c:	2e00      	cmp	r6, #0
9000c52e:	da03      	bge.n	9000c538 <_printf_i+0xc8>
9000c530:	232d      	movs	r3, #45	; 0x2d
9000c532:	4276      	negs	r6, r6
9000c534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c538:	485e      	ldr	r0, [pc, #376]	; (9000c6b4 <_printf_i+0x244>)
9000c53a:	230a      	movs	r3, #10
9000c53c:	e019      	b.n	9000c572 <_printf_i+0x102>
9000c53e:	680e      	ldr	r6, [r1, #0]
9000c540:	602b      	str	r3, [r5, #0]
9000c542:	f010 0f40 	tst.w	r0, #64	; 0x40
9000c546:	bf18      	it	ne
9000c548:	b236      	sxthne	r6, r6
9000c54a:	e7ef      	b.n	9000c52c <_printf_i+0xbc>
9000c54c:	682b      	ldr	r3, [r5, #0]
9000c54e:	6820      	ldr	r0, [r4, #0]
9000c550:	1d19      	adds	r1, r3, #4
9000c552:	6029      	str	r1, [r5, #0]
9000c554:	0601      	lsls	r1, r0, #24
9000c556:	d501      	bpl.n	9000c55c <_printf_i+0xec>
9000c558:	681e      	ldr	r6, [r3, #0]
9000c55a:	e002      	b.n	9000c562 <_printf_i+0xf2>
9000c55c:	0646      	lsls	r6, r0, #25
9000c55e:	d5fb      	bpl.n	9000c558 <_printf_i+0xe8>
9000c560:	881e      	ldrh	r6, [r3, #0]
9000c562:	4854      	ldr	r0, [pc, #336]	; (9000c6b4 <_printf_i+0x244>)
9000c564:	2f6f      	cmp	r7, #111	; 0x6f
9000c566:	bf0c      	ite	eq
9000c568:	2308      	moveq	r3, #8
9000c56a:	230a      	movne	r3, #10
9000c56c:	2100      	movs	r1, #0
9000c56e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9000c572:	6865      	ldr	r5, [r4, #4]
9000c574:	60a5      	str	r5, [r4, #8]
9000c576:	2d00      	cmp	r5, #0
9000c578:	bfa2      	ittt	ge
9000c57a:	6821      	ldrge	r1, [r4, #0]
9000c57c:	f021 0104 	bicge.w	r1, r1, #4
9000c580:	6021      	strge	r1, [r4, #0]
9000c582:	b90e      	cbnz	r6, 9000c588 <_printf_i+0x118>
9000c584:	2d00      	cmp	r5, #0
9000c586:	d04d      	beq.n	9000c624 <_printf_i+0x1b4>
9000c588:	4615      	mov	r5, r2
9000c58a:	fbb6 f1f3 	udiv	r1, r6, r3
9000c58e:	fb03 6711 	mls	r7, r3, r1, r6
9000c592:	5dc7      	ldrb	r7, [r0, r7]
9000c594:	f805 7d01 	strb.w	r7, [r5, #-1]!
9000c598:	4637      	mov	r7, r6
9000c59a:	42bb      	cmp	r3, r7
9000c59c:	460e      	mov	r6, r1
9000c59e:	d9f4      	bls.n	9000c58a <_printf_i+0x11a>
9000c5a0:	2b08      	cmp	r3, #8
9000c5a2:	d10b      	bne.n	9000c5bc <_printf_i+0x14c>
9000c5a4:	6823      	ldr	r3, [r4, #0]
9000c5a6:	07de      	lsls	r6, r3, #31
9000c5a8:	d508      	bpl.n	9000c5bc <_printf_i+0x14c>
9000c5aa:	6923      	ldr	r3, [r4, #16]
9000c5ac:	6861      	ldr	r1, [r4, #4]
9000c5ae:	4299      	cmp	r1, r3
9000c5b0:	bfde      	ittt	le
9000c5b2:	2330      	movle	r3, #48	; 0x30
9000c5b4:	f805 3c01 	strble.w	r3, [r5, #-1]
9000c5b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
9000c5bc:	1b52      	subs	r2, r2, r5
9000c5be:	6122      	str	r2, [r4, #16]
9000c5c0:	f8cd a000 	str.w	sl, [sp]
9000c5c4:	464b      	mov	r3, r9
9000c5c6:	aa03      	add	r2, sp, #12
9000c5c8:	4621      	mov	r1, r4
9000c5ca:	4640      	mov	r0, r8
9000c5cc:	f7ff fee2 	bl	9000c394 <_printf_common>
9000c5d0:	3001      	adds	r0, #1
9000c5d2:	d14c      	bne.n	9000c66e <_printf_i+0x1fe>
9000c5d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000c5d8:	b004      	add	sp, #16
9000c5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000c5de:	4835      	ldr	r0, [pc, #212]	; (9000c6b4 <_printf_i+0x244>)
9000c5e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
9000c5e4:	6829      	ldr	r1, [r5, #0]
9000c5e6:	6823      	ldr	r3, [r4, #0]
9000c5e8:	f851 6b04 	ldr.w	r6, [r1], #4
9000c5ec:	6029      	str	r1, [r5, #0]
9000c5ee:	061d      	lsls	r5, r3, #24
9000c5f0:	d514      	bpl.n	9000c61c <_printf_i+0x1ac>
9000c5f2:	07df      	lsls	r7, r3, #31
9000c5f4:	bf44      	itt	mi
9000c5f6:	f043 0320 	orrmi.w	r3, r3, #32
9000c5fa:	6023      	strmi	r3, [r4, #0]
9000c5fc:	b91e      	cbnz	r6, 9000c606 <_printf_i+0x196>
9000c5fe:	6823      	ldr	r3, [r4, #0]
9000c600:	f023 0320 	bic.w	r3, r3, #32
9000c604:	6023      	str	r3, [r4, #0]
9000c606:	2310      	movs	r3, #16
9000c608:	e7b0      	b.n	9000c56c <_printf_i+0xfc>
9000c60a:	6823      	ldr	r3, [r4, #0]
9000c60c:	f043 0320 	orr.w	r3, r3, #32
9000c610:	6023      	str	r3, [r4, #0]
9000c612:	2378      	movs	r3, #120	; 0x78
9000c614:	4828      	ldr	r0, [pc, #160]	; (9000c6b8 <_printf_i+0x248>)
9000c616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000c61a:	e7e3      	b.n	9000c5e4 <_printf_i+0x174>
9000c61c:	0659      	lsls	r1, r3, #25
9000c61e:	bf48      	it	mi
9000c620:	b2b6      	uxthmi	r6, r6
9000c622:	e7e6      	b.n	9000c5f2 <_printf_i+0x182>
9000c624:	4615      	mov	r5, r2
9000c626:	e7bb      	b.n	9000c5a0 <_printf_i+0x130>
9000c628:	682b      	ldr	r3, [r5, #0]
9000c62a:	6826      	ldr	r6, [r4, #0]
9000c62c:	6961      	ldr	r1, [r4, #20]
9000c62e:	1d18      	adds	r0, r3, #4
9000c630:	6028      	str	r0, [r5, #0]
9000c632:	0635      	lsls	r5, r6, #24
9000c634:	681b      	ldr	r3, [r3, #0]
9000c636:	d501      	bpl.n	9000c63c <_printf_i+0x1cc>
9000c638:	6019      	str	r1, [r3, #0]
9000c63a:	e002      	b.n	9000c642 <_printf_i+0x1d2>
9000c63c:	0670      	lsls	r0, r6, #25
9000c63e:	d5fb      	bpl.n	9000c638 <_printf_i+0x1c8>
9000c640:	8019      	strh	r1, [r3, #0]
9000c642:	2300      	movs	r3, #0
9000c644:	6123      	str	r3, [r4, #16]
9000c646:	4615      	mov	r5, r2
9000c648:	e7ba      	b.n	9000c5c0 <_printf_i+0x150>
9000c64a:	682b      	ldr	r3, [r5, #0]
9000c64c:	1d1a      	adds	r2, r3, #4
9000c64e:	602a      	str	r2, [r5, #0]
9000c650:	681d      	ldr	r5, [r3, #0]
9000c652:	6862      	ldr	r2, [r4, #4]
9000c654:	2100      	movs	r1, #0
9000c656:	4628      	mov	r0, r5
9000c658:	f7f3 fe42 	bl	900002e0 <memchr>
9000c65c:	b108      	cbz	r0, 9000c662 <_printf_i+0x1f2>
9000c65e:	1b40      	subs	r0, r0, r5
9000c660:	6060      	str	r0, [r4, #4]
9000c662:	6863      	ldr	r3, [r4, #4]
9000c664:	6123      	str	r3, [r4, #16]
9000c666:	2300      	movs	r3, #0
9000c668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9000c66c:	e7a8      	b.n	9000c5c0 <_printf_i+0x150>
9000c66e:	6923      	ldr	r3, [r4, #16]
9000c670:	462a      	mov	r2, r5
9000c672:	4649      	mov	r1, r9
9000c674:	4640      	mov	r0, r8
9000c676:	47d0      	blx	sl
9000c678:	3001      	adds	r0, #1
9000c67a:	d0ab      	beq.n	9000c5d4 <_printf_i+0x164>
9000c67c:	6823      	ldr	r3, [r4, #0]
9000c67e:	079b      	lsls	r3, r3, #30
9000c680:	d413      	bmi.n	9000c6aa <_printf_i+0x23a>
9000c682:	68e0      	ldr	r0, [r4, #12]
9000c684:	9b03      	ldr	r3, [sp, #12]
9000c686:	4298      	cmp	r0, r3
9000c688:	bfb8      	it	lt
9000c68a:	4618      	movlt	r0, r3
9000c68c:	e7a4      	b.n	9000c5d8 <_printf_i+0x168>
9000c68e:	2301      	movs	r3, #1
9000c690:	4632      	mov	r2, r6
9000c692:	4649      	mov	r1, r9
9000c694:	4640      	mov	r0, r8
9000c696:	47d0      	blx	sl
9000c698:	3001      	adds	r0, #1
9000c69a:	d09b      	beq.n	9000c5d4 <_printf_i+0x164>
9000c69c:	3501      	adds	r5, #1
9000c69e:	68e3      	ldr	r3, [r4, #12]
9000c6a0:	9903      	ldr	r1, [sp, #12]
9000c6a2:	1a5b      	subs	r3, r3, r1
9000c6a4:	42ab      	cmp	r3, r5
9000c6a6:	dcf2      	bgt.n	9000c68e <_printf_i+0x21e>
9000c6a8:	e7eb      	b.n	9000c682 <_printf_i+0x212>
9000c6aa:	2500      	movs	r5, #0
9000c6ac:	f104 0619 	add.w	r6, r4, #25
9000c6b0:	e7f5      	b.n	9000c69e <_printf_i+0x22e>
9000c6b2:	bf00      	nop
9000c6b4:	9000d3cf 	.word	0x9000d3cf
9000c6b8:	9000d3e0 	.word	0x9000d3e0

9000c6bc <__swbuf_r>:
9000c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000c6be:	460e      	mov	r6, r1
9000c6c0:	4614      	mov	r4, r2
9000c6c2:	4605      	mov	r5, r0
9000c6c4:	b118      	cbz	r0, 9000c6ce <__swbuf_r+0x12>
9000c6c6:	6983      	ldr	r3, [r0, #24]
9000c6c8:	b90b      	cbnz	r3, 9000c6ce <__swbuf_r+0x12>
9000c6ca:	f000 f9d9 	bl	9000ca80 <__sinit>
9000c6ce:	4b21      	ldr	r3, [pc, #132]	; (9000c754 <__swbuf_r+0x98>)
9000c6d0:	429c      	cmp	r4, r3
9000c6d2:	d12b      	bne.n	9000c72c <__swbuf_r+0x70>
9000c6d4:	686c      	ldr	r4, [r5, #4]
9000c6d6:	69a3      	ldr	r3, [r4, #24]
9000c6d8:	60a3      	str	r3, [r4, #8]
9000c6da:	89a3      	ldrh	r3, [r4, #12]
9000c6dc:	071a      	lsls	r2, r3, #28
9000c6de:	d52f      	bpl.n	9000c740 <__swbuf_r+0x84>
9000c6e0:	6923      	ldr	r3, [r4, #16]
9000c6e2:	b36b      	cbz	r3, 9000c740 <__swbuf_r+0x84>
9000c6e4:	6923      	ldr	r3, [r4, #16]
9000c6e6:	6820      	ldr	r0, [r4, #0]
9000c6e8:	1ac0      	subs	r0, r0, r3
9000c6ea:	6963      	ldr	r3, [r4, #20]
9000c6ec:	b2f6      	uxtb	r6, r6
9000c6ee:	4283      	cmp	r3, r0
9000c6f0:	4637      	mov	r7, r6
9000c6f2:	dc04      	bgt.n	9000c6fe <__swbuf_r+0x42>
9000c6f4:	4621      	mov	r1, r4
9000c6f6:	4628      	mov	r0, r5
9000c6f8:	f000 f92e 	bl	9000c958 <_fflush_r>
9000c6fc:	bb30      	cbnz	r0, 9000c74c <__swbuf_r+0x90>
9000c6fe:	68a3      	ldr	r3, [r4, #8]
9000c700:	3b01      	subs	r3, #1
9000c702:	60a3      	str	r3, [r4, #8]
9000c704:	6823      	ldr	r3, [r4, #0]
9000c706:	1c5a      	adds	r2, r3, #1
9000c708:	6022      	str	r2, [r4, #0]
9000c70a:	701e      	strb	r6, [r3, #0]
9000c70c:	6963      	ldr	r3, [r4, #20]
9000c70e:	3001      	adds	r0, #1
9000c710:	4283      	cmp	r3, r0
9000c712:	d004      	beq.n	9000c71e <__swbuf_r+0x62>
9000c714:	89a3      	ldrh	r3, [r4, #12]
9000c716:	07db      	lsls	r3, r3, #31
9000c718:	d506      	bpl.n	9000c728 <__swbuf_r+0x6c>
9000c71a:	2e0a      	cmp	r6, #10
9000c71c:	d104      	bne.n	9000c728 <__swbuf_r+0x6c>
9000c71e:	4621      	mov	r1, r4
9000c720:	4628      	mov	r0, r5
9000c722:	f000 f919 	bl	9000c958 <_fflush_r>
9000c726:	b988      	cbnz	r0, 9000c74c <__swbuf_r+0x90>
9000c728:	4638      	mov	r0, r7
9000c72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c72c:	4b0a      	ldr	r3, [pc, #40]	; (9000c758 <__swbuf_r+0x9c>)
9000c72e:	429c      	cmp	r4, r3
9000c730:	d101      	bne.n	9000c736 <__swbuf_r+0x7a>
9000c732:	68ac      	ldr	r4, [r5, #8]
9000c734:	e7cf      	b.n	9000c6d6 <__swbuf_r+0x1a>
9000c736:	4b09      	ldr	r3, [pc, #36]	; (9000c75c <__swbuf_r+0xa0>)
9000c738:	429c      	cmp	r4, r3
9000c73a:	bf08      	it	eq
9000c73c:	68ec      	ldreq	r4, [r5, #12]
9000c73e:	e7ca      	b.n	9000c6d6 <__swbuf_r+0x1a>
9000c740:	4621      	mov	r1, r4
9000c742:	4628      	mov	r0, r5
9000c744:	f000 f80c 	bl	9000c760 <__swsetup_r>
9000c748:	2800      	cmp	r0, #0
9000c74a:	d0cb      	beq.n	9000c6e4 <__swbuf_r+0x28>
9000c74c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
9000c750:	e7ea      	b.n	9000c728 <__swbuf_r+0x6c>
9000c752:	bf00      	nop
9000c754:	9000d414 	.word	0x9000d414
9000c758:	9000d434 	.word	0x9000d434
9000c75c:	9000d3f4 	.word	0x9000d3f4

9000c760 <__swsetup_r>:
9000c760:	4b32      	ldr	r3, [pc, #200]	; (9000c82c <__swsetup_r+0xcc>)
9000c762:	b570      	push	{r4, r5, r6, lr}
9000c764:	681d      	ldr	r5, [r3, #0]
9000c766:	4606      	mov	r6, r0
9000c768:	460c      	mov	r4, r1
9000c76a:	b125      	cbz	r5, 9000c776 <__swsetup_r+0x16>
9000c76c:	69ab      	ldr	r3, [r5, #24]
9000c76e:	b913      	cbnz	r3, 9000c776 <__swsetup_r+0x16>
9000c770:	4628      	mov	r0, r5
9000c772:	f000 f985 	bl	9000ca80 <__sinit>
9000c776:	4b2e      	ldr	r3, [pc, #184]	; (9000c830 <__swsetup_r+0xd0>)
9000c778:	429c      	cmp	r4, r3
9000c77a:	d10f      	bne.n	9000c79c <__swsetup_r+0x3c>
9000c77c:	686c      	ldr	r4, [r5, #4]
9000c77e:	89a3      	ldrh	r3, [r4, #12]
9000c780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000c784:	0719      	lsls	r1, r3, #28
9000c786:	d42c      	bmi.n	9000c7e2 <__swsetup_r+0x82>
9000c788:	06dd      	lsls	r5, r3, #27
9000c78a:	d411      	bmi.n	9000c7b0 <__swsetup_r+0x50>
9000c78c:	2309      	movs	r3, #9
9000c78e:	6033      	str	r3, [r6, #0]
9000c790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000c794:	81a3      	strh	r3, [r4, #12]
9000c796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000c79a:	e03e      	b.n	9000c81a <__swsetup_r+0xba>
9000c79c:	4b25      	ldr	r3, [pc, #148]	; (9000c834 <__swsetup_r+0xd4>)
9000c79e:	429c      	cmp	r4, r3
9000c7a0:	d101      	bne.n	9000c7a6 <__swsetup_r+0x46>
9000c7a2:	68ac      	ldr	r4, [r5, #8]
9000c7a4:	e7eb      	b.n	9000c77e <__swsetup_r+0x1e>
9000c7a6:	4b24      	ldr	r3, [pc, #144]	; (9000c838 <__swsetup_r+0xd8>)
9000c7a8:	429c      	cmp	r4, r3
9000c7aa:	bf08      	it	eq
9000c7ac:	68ec      	ldreq	r4, [r5, #12]
9000c7ae:	e7e6      	b.n	9000c77e <__swsetup_r+0x1e>
9000c7b0:	0758      	lsls	r0, r3, #29
9000c7b2:	d512      	bpl.n	9000c7da <__swsetup_r+0x7a>
9000c7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000c7b6:	b141      	cbz	r1, 9000c7ca <__swsetup_r+0x6a>
9000c7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000c7bc:	4299      	cmp	r1, r3
9000c7be:	d002      	beq.n	9000c7c6 <__swsetup_r+0x66>
9000c7c0:	4630      	mov	r0, r6
9000c7c2:	f7ff f94d 	bl	9000ba60 <_free_r>
9000c7c6:	2300      	movs	r3, #0
9000c7c8:	6363      	str	r3, [r4, #52]	; 0x34
9000c7ca:	89a3      	ldrh	r3, [r4, #12]
9000c7cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
9000c7d0:	81a3      	strh	r3, [r4, #12]
9000c7d2:	2300      	movs	r3, #0
9000c7d4:	6063      	str	r3, [r4, #4]
9000c7d6:	6923      	ldr	r3, [r4, #16]
9000c7d8:	6023      	str	r3, [r4, #0]
9000c7da:	89a3      	ldrh	r3, [r4, #12]
9000c7dc:	f043 0308 	orr.w	r3, r3, #8
9000c7e0:	81a3      	strh	r3, [r4, #12]
9000c7e2:	6923      	ldr	r3, [r4, #16]
9000c7e4:	b94b      	cbnz	r3, 9000c7fa <__swsetup_r+0x9a>
9000c7e6:	89a3      	ldrh	r3, [r4, #12]
9000c7e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
9000c7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000c7f0:	d003      	beq.n	9000c7fa <__swsetup_r+0x9a>
9000c7f2:	4621      	mov	r1, r4
9000c7f4:	4630      	mov	r0, r6
9000c7f6:	f000 fa09 	bl	9000cc0c <__smakebuf_r>
9000c7fa:	89a0      	ldrh	r0, [r4, #12]
9000c7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000c800:	f010 0301 	ands.w	r3, r0, #1
9000c804:	d00a      	beq.n	9000c81c <__swsetup_r+0xbc>
9000c806:	2300      	movs	r3, #0
9000c808:	60a3      	str	r3, [r4, #8]
9000c80a:	6963      	ldr	r3, [r4, #20]
9000c80c:	425b      	negs	r3, r3
9000c80e:	61a3      	str	r3, [r4, #24]
9000c810:	6923      	ldr	r3, [r4, #16]
9000c812:	b943      	cbnz	r3, 9000c826 <__swsetup_r+0xc6>
9000c814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
9000c818:	d1ba      	bne.n	9000c790 <__swsetup_r+0x30>
9000c81a:	bd70      	pop	{r4, r5, r6, pc}
9000c81c:	0781      	lsls	r1, r0, #30
9000c81e:	bf58      	it	pl
9000c820:	6963      	ldrpl	r3, [r4, #20]
9000c822:	60a3      	str	r3, [r4, #8]
9000c824:	e7f4      	b.n	9000c810 <__swsetup_r+0xb0>
9000c826:	2000      	movs	r0, #0
9000c828:	e7f7      	b.n	9000c81a <__swsetup_r+0xba>
9000c82a:	bf00      	nop
9000c82c:	20000054 	.word	0x20000054
9000c830:	9000d414 	.word	0x9000d414
9000c834:	9000d434 	.word	0x9000d434
9000c838:	9000d3f4 	.word	0x9000d3f4

9000c83c <abort>:
9000c83c:	b508      	push	{r3, lr}
9000c83e:	2006      	movs	r0, #6
9000c840:	f000 fa96 	bl	9000cd70 <raise>
9000c844:	2001      	movs	r0, #1
9000c846:	f7f4 f81f 	bl	90000888 <_exit>
	...

9000c84c <__sflush_r>:
9000c84c:	898a      	ldrh	r2, [r1, #12]
9000c84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000c852:	4605      	mov	r5, r0
9000c854:	0710      	lsls	r0, r2, #28
9000c856:	460c      	mov	r4, r1
9000c858:	d458      	bmi.n	9000c90c <__sflush_r+0xc0>
9000c85a:	684b      	ldr	r3, [r1, #4]
9000c85c:	2b00      	cmp	r3, #0
9000c85e:	dc05      	bgt.n	9000c86c <__sflush_r+0x20>
9000c860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000c862:	2b00      	cmp	r3, #0
9000c864:	dc02      	bgt.n	9000c86c <__sflush_r+0x20>
9000c866:	2000      	movs	r0, #0
9000c868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000c86c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c86e:	2e00      	cmp	r6, #0
9000c870:	d0f9      	beq.n	9000c866 <__sflush_r+0x1a>
9000c872:	2300      	movs	r3, #0
9000c874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
9000c878:	682f      	ldr	r7, [r5, #0]
9000c87a:	602b      	str	r3, [r5, #0]
9000c87c:	d032      	beq.n	9000c8e4 <__sflush_r+0x98>
9000c87e:	6d60      	ldr	r0, [r4, #84]	; 0x54
9000c880:	89a3      	ldrh	r3, [r4, #12]
9000c882:	075a      	lsls	r2, r3, #29
9000c884:	d505      	bpl.n	9000c892 <__sflush_r+0x46>
9000c886:	6863      	ldr	r3, [r4, #4]
9000c888:	1ac0      	subs	r0, r0, r3
9000c88a:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000c88c:	b10b      	cbz	r3, 9000c892 <__sflush_r+0x46>
9000c88e:	6c23      	ldr	r3, [r4, #64]	; 0x40
9000c890:	1ac0      	subs	r0, r0, r3
9000c892:	2300      	movs	r3, #0
9000c894:	4602      	mov	r2, r0
9000c896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c898:	6a21      	ldr	r1, [r4, #32]
9000c89a:	4628      	mov	r0, r5
9000c89c:	47b0      	blx	r6
9000c89e:	1c43      	adds	r3, r0, #1
9000c8a0:	89a3      	ldrh	r3, [r4, #12]
9000c8a2:	d106      	bne.n	9000c8b2 <__sflush_r+0x66>
9000c8a4:	6829      	ldr	r1, [r5, #0]
9000c8a6:	291d      	cmp	r1, #29
9000c8a8:	d82c      	bhi.n	9000c904 <__sflush_r+0xb8>
9000c8aa:	4a2a      	ldr	r2, [pc, #168]	; (9000c954 <__sflush_r+0x108>)
9000c8ac:	40ca      	lsrs	r2, r1
9000c8ae:	07d6      	lsls	r6, r2, #31
9000c8b0:	d528      	bpl.n	9000c904 <__sflush_r+0xb8>
9000c8b2:	2200      	movs	r2, #0
9000c8b4:	6062      	str	r2, [r4, #4]
9000c8b6:	04d9      	lsls	r1, r3, #19
9000c8b8:	6922      	ldr	r2, [r4, #16]
9000c8ba:	6022      	str	r2, [r4, #0]
9000c8bc:	d504      	bpl.n	9000c8c8 <__sflush_r+0x7c>
9000c8be:	1c42      	adds	r2, r0, #1
9000c8c0:	d101      	bne.n	9000c8c6 <__sflush_r+0x7a>
9000c8c2:	682b      	ldr	r3, [r5, #0]
9000c8c4:	b903      	cbnz	r3, 9000c8c8 <__sflush_r+0x7c>
9000c8c6:	6560      	str	r0, [r4, #84]	; 0x54
9000c8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000c8ca:	602f      	str	r7, [r5, #0]
9000c8cc:	2900      	cmp	r1, #0
9000c8ce:	d0ca      	beq.n	9000c866 <__sflush_r+0x1a>
9000c8d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000c8d4:	4299      	cmp	r1, r3
9000c8d6:	d002      	beq.n	9000c8de <__sflush_r+0x92>
9000c8d8:	4628      	mov	r0, r5
9000c8da:	f7ff f8c1 	bl	9000ba60 <_free_r>
9000c8de:	2000      	movs	r0, #0
9000c8e0:	6360      	str	r0, [r4, #52]	; 0x34
9000c8e2:	e7c1      	b.n	9000c868 <__sflush_r+0x1c>
9000c8e4:	6a21      	ldr	r1, [r4, #32]
9000c8e6:	2301      	movs	r3, #1
9000c8e8:	4628      	mov	r0, r5
9000c8ea:	47b0      	blx	r6
9000c8ec:	1c41      	adds	r1, r0, #1
9000c8ee:	d1c7      	bne.n	9000c880 <__sflush_r+0x34>
9000c8f0:	682b      	ldr	r3, [r5, #0]
9000c8f2:	2b00      	cmp	r3, #0
9000c8f4:	d0c4      	beq.n	9000c880 <__sflush_r+0x34>
9000c8f6:	2b1d      	cmp	r3, #29
9000c8f8:	d001      	beq.n	9000c8fe <__sflush_r+0xb2>
9000c8fa:	2b16      	cmp	r3, #22
9000c8fc:	d101      	bne.n	9000c902 <__sflush_r+0xb6>
9000c8fe:	602f      	str	r7, [r5, #0]
9000c900:	e7b1      	b.n	9000c866 <__sflush_r+0x1a>
9000c902:	89a3      	ldrh	r3, [r4, #12]
9000c904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c908:	81a3      	strh	r3, [r4, #12]
9000c90a:	e7ad      	b.n	9000c868 <__sflush_r+0x1c>
9000c90c:	690f      	ldr	r7, [r1, #16]
9000c90e:	2f00      	cmp	r7, #0
9000c910:	d0a9      	beq.n	9000c866 <__sflush_r+0x1a>
9000c912:	0793      	lsls	r3, r2, #30
9000c914:	680e      	ldr	r6, [r1, #0]
9000c916:	bf08      	it	eq
9000c918:	694b      	ldreq	r3, [r1, #20]
9000c91a:	600f      	str	r7, [r1, #0]
9000c91c:	bf18      	it	ne
9000c91e:	2300      	movne	r3, #0
9000c920:	eba6 0807 	sub.w	r8, r6, r7
9000c924:	608b      	str	r3, [r1, #8]
9000c926:	f1b8 0f00 	cmp.w	r8, #0
9000c92a:	dd9c      	ble.n	9000c866 <__sflush_r+0x1a>
9000c92c:	6a21      	ldr	r1, [r4, #32]
9000c92e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9000c930:	4643      	mov	r3, r8
9000c932:	463a      	mov	r2, r7
9000c934:	4628      	mov	r0, r5
9000c936:	47b0      	blx	r6
9000c938:	2800      	cmp	r0, #0
9000c93a:	dc06      	bgt.n	9000c94a <__sflush_r+0xfe>
9000c93c:	89a3      	ldrh	r3, [r4, #12]
9000c93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9000c942:	81a3      	strh	r3, [r4, #12]
9000c944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000c948:	e78e      	b.n	9000c868 <__sflush_r+0x1c>
9000c94a:	4407      	add	r7, r0
9000c94c:	eba8 0800 	sub.w	r8, r8, r0
9000c950:	e7e9      	b.n	9000c926 <__sflush_r+0xda>
9000c952:	bf00      	nop
9000c954:	20400001 	.word	0x20400001

9000c958 <_fflush_r>:
9000c958:	b538      	push	{r3, r4, r5, lr}
9000c95a:	690b      	ldr	r3, [r1, #16]
9000c95c:	4605      	mov	r5, r0
9000c95e:	460c      	mov	r4, r1
9000c960:	b913      	cbnz	r3, 9000c968 <_fflush_r+0x10>
9000c962:	2500      	movs	r5, #0
9000c964:	4628      	mov	r0, r5
9000c966:	bd38      	pop	{r3, r4, r5, pc}
9000c968:	b118      	cbz	r0, 9000c972 <_fflush_r+0x1a>
9000c96a:	6983      	ldr	r3, [r0, #24]
9000c96c:	b90b      	cbnz	r3, 9000c972 <_fflush_r+0x1a>
9000c96e:	f000 f887 	bl	9000ca80 <__sinit>
9000c972:	4b14      	ldr	r3, [pc, #80]	; (9000c9c4 <_fflush_r+0x6c>)
9000c974:	429c      	cmp	r4, r3
9000c976:	d11b      	bne.n	9000c9b0 <_fflush_r+0x58>
9000c978:	686c      	ldr	r4, [r5, #4]
9000c97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000c97e:	2b00      	cmp	r3, #0
9000c980:	d0ef      	beq.n	9000c962 <_fflush_r+0xa>
9000c982:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000c984:	07d0      	lsls	r0, r2, #31
9000c986:	d404      	bmi.n	9000c992 <_fflush_r+0x3a>
9000c988:	0599      	lsls	r1, r3, #22
9000c98a:	d402      	bmi.n	9000c992 <_fflush_r+0x3a>
9000c98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c98e:	f000 f915 	bl	9000cbbc <__retarget_lock_acquire_recursive>
9000c992:	4628      	mov	r0, r5
9000c994:	4621      	mov	r1, r4
9000c996:	f7ff ff59 	bl	9000c84c <__sflush_r>
9000c99a:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000c99c:	07da      	lsls	r2, r3, #31
9000c99e:	4605      	mov	r5, r0
9000c9a0:	d4e0      	bmi.n	9000c964 <_fflush_r+0xc>
9000c9a2:	89a3      	ldrh	r3, [r4, #12]
9000c9a4:	059b      	lsls	r3, r3, #22
9000c9a6:	d4dd      	bmi.n	9000c964 <_fflush_r+0xc>
9000c9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c9aa:	f000 f908 	bl	9000cbbe <__retarget_lock_release_recursive>
9000c9ae:	e7d9      	b.n	9000c964 <_fflush_r+0xc>
9000c9b0:	4b05      	ldr	r3, [pc, #20]	; (9000c9c8 <_fflush_r+0x70>)
9000c9b2:	429c      	cmp	r4, r3
9000c9b4:	d101      	bne.n	9000c9ba <_fflush_r+0x62>
9000c9b6:	68ac      	ldr	r4, [r5, #8]
9000c9b8:	e7df      	b.n	9000c97a <_fflush_r+0x22>
9000c9ba:	4b04      	ldr	r3, [pc, #16]	; (9000c9cc <_fflush_r+0x74>)
9000c9bc:	429c      	cmp	r4, r3
9000c9be:	bf08      	it	eq
9000c9c0:	68ec      	ldreq	r4, [r5, #12]
9000c9c2:	e7da      	b.n	9000c97a <_fflush_r+0x22>
9000c9c4:	9000d414 	.word	0x9000d414
9000c9c8:	9000d434 	.word	0x9000d434
9000c9cc:	9000d3f4 	.word	0x9000d3f4

9000c9d0 <std>:
9000c9d0:	2300      	movs	r3, #0
9000c9d2:	b510      	push	{r4, lr}
9000c9d4:	4604      	mov	r4, r0
9000c9d6:	e9c0 3300 	strd	r3, r3, [r0]
9000c9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
9000c9de:	6083      	str	r3, [r0, #8]
9000c9e0:	8181      	strh	r1, [r0, #12]
9000c9e2:	6643      	str	r3, [r0, #100]	; 0x64
9000c9e4:	81c2      	strh	r2, [r0, #14]
9000c9e6:	6183      	str	r3, [r0, #24]
9000c9e8:	4619      	mov	r1, r3
9000c9ea:	2208      	movs	r2, #8
9000c9ec:	305c      	adds	r0, #92	; 0x5c
9000c9ee:	f7ff f82f 	bl	9000ba50 <memset>
9000c9f2:	4b05      	ldr	r3, [pc, #20]	; (9000ca08 <std+0x38>)
9000c9f4:	6263      	str	r3, [r4, #36]	; 0x24
9000c9f6:	4b05      	ldr	r3, [pc, #20]	; (9000ca0c <std+0x3c>)
9000c9f8:	62a3      	str	r3, [r4, #40]	; 0x28
9000c9fa:	4b05      	ldr	r3, [pc, #20]	; (9000ca10 <std+0x40>)
9000c9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
9000c9fe:	4b05      	ldr	r3, [pc, #20]	; (9000ca14 <std+0x44>)
9000ca00:	6224      	str	r4, [r4, #32]
9000ca02:	6323      	str	r3, [r4, #48]	; 0x30
9000ca04:	bd10      	pop	{r4, pc}
9000ca06:	bf00      	nop
9000ca08:	9000cda9 	.word	0x9000cda9
9000ca0c:	9000cdcb 	.word	0x9000cdcb
9000ca10:	9000ce03 	.word	0x9000ce03
9000ca14:	9000ce27 	.word	0x9000ce27

9000ca18 <_cleanup_r>:
9000ca18:	4901      	ldr	r1, [pc, #4]	; (9000ca20 <_cleanup_r+0x8>)
9000ca1a:	f000 b8af 	b.w	9000cb7c <_fwalk_reent>
9000ca1e:	bf00      	nop
9000ca20:	9000c959 	.word	0x9000c959

9000ca24 <__sfmoreglue>:
9000ca24:	b570      	push	{r4, r5, r6, lr}
9000ca26:	2268      	movs	r2, #104	; 0x68
9000ca28:	1e4d      	subs	r5, r1, #1
9000ca2a:	4355      	muls	r5, r2
9000ca2c:	460e      	mov	r6, r1
9000ca2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
9000ca32:	f7ff f881 	bl	9000bb38 <_malloc_r>
9000ca36:	4604      	mov	r4, r0
9000ca38:	b140      	cbz	r0, 9000ca4c <__sfmoreglue+0x28>
9000ca3a:	2100      	movs	r1, #0
9000ca3c:	e9c0 1600 	strd	r1, r6, [r0]
9000ca40:	300c      	adds	r0, #12
9000ca42:	60a0      	str	r0, [r4, #8]
9000ca44:	f105 0268 	add.w	r2, r5, #104	; 0x68
9000ca48:	f7ff f802 	bl	9000ba50 <memset>
9000ca4c:	4620      	mov	r0, r4
9000ca4e:	bd70      	pop	{r4, r5, r6, pc}

9000ca50 <__sfp_lock_acquire>:
9000ca50:	4801      	ldr	r0, [pc, #4]	; (9000ca58 <__sfp_lock_acquire+0x8>)
9000ca52:	f000 b8b3 	b.w	9000cbbc <__retarget_lock_acquire_recursive>
9000ca56:	bf00      	nop
9000ca58:	200050c5 	.word	0x200050c5

9000ca5c <__sfp_lock_release>:
9000ca5c:	4801      	ldr	r0, [pc, #4]	; (9000ca64 <__sfp_lock_release+0x8>)
9000ca5e:	f000 b8ae 	b.w	9000cbbe <__retarget_lock_release_recursive>
9000ca62:	bf00      	nop
9000ca64:	200050c5 	.word	0x200050c5

9000ca68 <__sinit_lock_acquire>:
9000ca68:	4801      	ldr	r0, [pc, #4]	; (9000ca70 <__sinit_lock_acquire+0x8>)
9000ca6a:	f000 b8a7 	b.w	9000cbbc <__retarget_lock_acquire_recursive>
9000ca6e:	bf00      	nop
9000ca70:	200050c6 	.word	0x200050c6

9000ca74 <__sinit_lock_release>:
9000ca74:	4801      	ldr	r0, [pc, #4]	; (9000ca7c <__sinit_lock_release+0x8>)
9000ca76:	f000 b8a2 	b.w	9000cbbe <__retarget_lock_release_recursive>
9000ca7a:	bf00      	nop
9000ca7c:	200050c6 	.word	0x200050c6

9000ca80 <__sinit>:
9000ca80:	b510      	push	{r4, lr}
9000ca82:	4604      	mov	r4, r0
9000ca84:	f7ff fff0 	bl	9000ca68 <__sinit_lock_acquire>
9000ca88:	69a3      	ldr	r3, [r4, #24]
9000ca8a:	b11b      	cbz	r3, 9000ca94 <__sinit+0x14>
9000ca8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000ca90:	f7ff bff0 	b.w	9000ca74 <__sinit_lock_release>
9000ca94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
9000ca98:	6523      	str	r3, [r4, #80]	; 0x50
9000ca9a:	4b13      	ldr	r3, [pc, #76]	; (9000cae8 <__sinit+0x68>)
9000ca9c:	4a13      	ldr	r2, [pc, #76]	; (9000caec <__sinit+0x6c>)
9000ca9e:	681b      	ldr	r3, [r3, #0]
9000caa0:	62a2      	str	r2, [r4, #40]	; 0x28
9000caa2:	42a3      	cmp	r3, r4
9000caa4:	bf04      	itt	eq
9000caa6:	2301      	moveq	r3, #1
9000caa8:	61a3      	streq	r3, [r4, #24]
9000caaa:	4620      	mov	r0, r4
9000caac:	f000 f820 	bl	9000caf0 <__sfp>
9000cab0:	6060      	str	r0, [r4, #4]
9000cab2:	4620      	mov	r0, r4
9000cab4:	f000 f81c 	bl	9000caf0 <__sfp>
9000cab8:	60a0      	str	r0, [r4, #8]
9000caba:	4620      	mov	r0, r4
9000cabc:	f000 f818 	bl	9000caf0 <__sfp>
9000cac0:	2200      	movs	r2, #0
9000cac2:	60e0      	str	r0, [r4, #12]
9000cac4:	2104      	movs	r1, #4
9000cac6:	6860      	ldr	r0, [r4, #4]
9000cac8:	f7ff ff82 	bl	9000c9d0 <std>
9000cacc:	68a0      	ldr	r0, [r4, #8]
9000cace:	2201      	movs	r2, #1
9000cad0:	2109      	movs	r1, #9
9000cad2:	f7ff ff7d 	bl	9000c9d0 <std>
9000cad6:	68e0      	ldr	r0, [r4, #12]
9000cad8:	2202      	movs	r2, #2
9000cada:	2112      	movs	r1, #18
9000cadc:	f7ff ff78 	bl	9000c9d0 <std>
9000cae0:	2301      	movs	r3, #1
9000cae2:	61a3      	str	r3, [r4, #24]
9000cae4:	e7d2      	b.n	9000ca8c <__sinit+0xc>
9000cae6:	bf00      	nop
9000cae8:	9000d30c 	.word	0x9000d30c
9000caec:	9000ca19 	.word	0x9000ca19

9000caf0 <__sfp>:
9000caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000caf2:	4607      	mov	r7, r0
9000caf4:	f7ff ffac 	bl	9000ca50 <__sfp_lock_acquire>
9000caf8:	4b1e      	ldr	r3, [pc, #120]	; (9000cb74 <__sfp+0x84>)
9000cafa:	681e      	ldr	r6, [r3, #0]
9000cafc:	69b3      	ldr	r3, [r6, #24]
9000cafe:	b913      	cbnz	r3, 9000cb06 <__sfp+0x16>
9000cb00:	4630      	mov	r0, r6
9000cb02:	f7ff ffbd 	bl	9000ca80 <__sinit>
9000cb06:	3648      	adds	r6, #72	; 0x48
9000cb08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
9000cb0c:	3b01      	subs	r3, #1
9000cb0e:	d503      	bpl.n	9000cb18 <__sfp+0x28>
9000cb10:	6833      	ldr	r3, [r6, #0]
9000cb12:	b30b      	cbz	r3, 9000cb58 <__sfp+0x68>
9000cb14:	6836      	ldr	r6, [r6, #0]
9000cb16:	e7f7      	b.n	9000cb08 <__sfp+0x18>
9000cb18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
9000cb1c:	b9d5      	cbnz	r5, 9000cb54 <__sfp+0x64>
9000cb1e:	4b16      	ldr	r3, [pc, #88]	; (9000cb78 <__sfp+0x88>)
9000cb20:	60e3      	str	r3, [r4, #12]
9000cb22:	f104 0058 	add.w	r0, r4, #88	; 0x58
9000cb26:	6665      	str	r5, [r4, #100]	; 0x64
9000cb28:	f000 f847 	bl	9000cbba <__retarget_lock_init_recursive>
9000cb2c:	f7ff ff96 	bl	9000ca5c <__sfp_lock_release>
9000cb30:	e9c4 5501 	strd	r5, r5, [r4, #4]
9000cb34:	e9c4 5504 	strd	r5, r5, [r4, #16]
9000cb38:	6025      	str	r5, [r4, #0]
9000cb3a:	61a5      	str	r5, [r4, #24]
9000cb3c:	2208      	movs	r2, #8
9000cb3e:	4629      	mov	r1, r5
9000cb40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
9000cb44:	f7fe ff84 	bl	9000ba50 <memset>
9000cb48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
9000cb4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
9000cb50:	4620      	mov	r0, r4
9000cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000cb54:	3468      	adds	r4, #104	; 0x68
9000cb56:	e7d9      	b.n	9000cb0c <__sfp+0x1c>
9000cb58:	2104      	movs	r1, #4
9000cb5a:	4638      	mov	r0, r7
9000cb5c:	f7ff ff62 	bl	9000ca24 <__sfmoreglue>
9000cb60:	4604      	mov	r4, r0
9000cb62:	6030      	str	r0, [r6, #0]
9000cb64:	2800      	cmp	r0, #0
9000cb66:	d1d5      	bne.n	9000cb14 <__sfp+0x24>
9000cb68:	f7ff ff78 	bl	9000ca5c <__sfp_lock_release>
9000cb6c:	230c      	movs	r3, #12
9000cb6e:	603b      	str	r3, [r7, #0]
9000cb70:	e7ee      	b.n	9000cb50 <__sfp+0x60>
9000cb72:	bf00      	nop
9000cb74:	9000d30c 	.word	0x9000d30c
9000cb78:	ffff0001 	.word	0xffff0001

9000cb7c <_fwalk_reent>:
9000cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000cb80:	4606      	mov	r6, r0
9000cb82:	4688      	mov	r8, r1
9000cb84:	f100 0448 	add.w	r4, r0, #72	; 0x48
9000cb88:	2700      	movs	r7, #0
9000cb8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
9000cb8e:	f1b9 0901 	subs.w	r9, r9, #1
9000cb92:	d505      	bpl.n	9000cba0 <_fwalk_reent+0x24>
9000cb94:	6824      	ldr	r4, [r4, #0]
9000cb96:	2c00      	cmp	r4, #0
9000cb98:	d1f7      	bne.n	9000cb8a <_fwalk_reent+0xe>
9000cb9a:	4638      	mov	r0, r7
9000cb9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000cba0:	89ab      	ldrh	r3, [r5, #12]
9000cba2:	2b01      	cmp	r3, #1
9000cba4:	d907      	bls.n	9000cbb6 <_fwalk_reent+0x3a>
9000cba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
9000cbaa:	3301      	adds	r3, #1
9000cbac:	d003      	beq.n	9000cbb6 <_fwalk_reent+0x3a>
9000cbae:	4629      	mov	r1, r5
9000cbb0:	4630      	mov	r0, r6
9000cbb2:	47c0      	blx	r8
9000cbb4:	4307      	orrs	r7, r0
9000cbb6:	3568      	adds	r5, #104	; 0x68
9000cbb8:	e7e9      	b.n	9000cb8e <_fwalk_reent+0x12>

9000cbba <__retarget_lock_init_recursive>:
9000cbba:	4770      	bx	lr

9000cbbc <__retarget_lock_acquire_recursive>:
9000cbbc:	4770      	bx	lr

9000cbbe <__retarget_lock_release_recursive>:
9000cbbe:	4770      	bx	lr

9000cbc0 <__swhatbuf_r>:
9000cbc0:	b570      	push	{r4, r5, r6, lr}
9000cbc2:	460e      	mov	r6, r1
9000cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cbc8:	2900      	cmp	r1, #0
9000cbca:	b096      	sub	sp, #88	; 0x58
9000cbcc:	4614      	mov	r4, r2
9000cbce:	461d      	mov	r5, r3
9000cbd0:	da08      	bge.n	9000cbe4 <__swhatbuf_r+0x24>
9000cbd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
9000cbd6:	2200      	movs	r2, #0
9000cbd8:	602a      	str	r2, [r5, #0]
9000cbda:	061a      	lsls	r2, r3, #24
9000cbdc:	d410      	bmi.n	9000cc00 <__swhatbuf_r+0x40>
9000cbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000cbe2:	e00e      	b.n	9000cc02 <__swhatbuf_r+0x42>
9000cbe4:	466a      	mov	r2, sp
9000cbe6:	f000 f945 	bl	9000ce74 <_fstat_r>
9000cbea:	2800      	cmp	r0, #0
9000cbec:	dbf1      	blt.n	9000cbd2 <__swhatbuf_r+0x12>
9000cbee:	9a01      	ldr	r2, [sp, #4]
9000cbf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9000cbf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
9000cbf8:	425a      	negs	r2, r3
9000cbfa:	415a      	adcs	r2, r3
9000cbfc:	602a      	str	r2, [r5, #0]
9000cbfe:	e7ee      	b.n	9000cbde <__swhatbuf_r+0x1e>
9000cc00:	2340      	movs	r3, #64	; 0x40
9000cc02:	2000      	movs	r0, #0
9000cc04:	6023      	str	r3, [r4, #0]
9000cc06:	b016      	add	sp, #88	; 0x58
9000cc08:	bd70      	pop	{r4, r5, r6, pc}
	...

9000cc0c <__smakebuf_r>:
9000cc0c:	898b      	ldrh	r3, [r1, #12]
9000cc0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000cc10:	079d      	lsls	r5, r3, #30
9000cc12:	4606      	mov	r6, r0
9000cc14:	460c      	mov	r4, r1
9000cc16:	d507      	bpl.n	9000cc28 <__smakebuf_r+0x1c>
9000cc18:	f104 0347 	add.w	r3, r4, #71	; 0x47
9000cc1c:	6023      	str	r3, [r4, #0]
9000cc1e:	6123      	str	r3, [r4, #16]
9000cc20:	2301      	movs	r3, #1
9000cc22:	6163      	str	r3, [r4, #20]
9000cc24:	b002      	add	sp, #8
9000cc26:	bd70      	pop	{r4, r5, r6, pc}
9000cc28:	ab01      	add	r3, sp, #4
9000cc2a:	466a      	mov	r2, sp
9000cc2c:	f7ff ffc8 	bl	9000cbc0 <__swhatbuf_r>
9000cc30:	9900      	ldr	r1, [sp, #0]
9000cc32:	4605      	mov	r5, r0
9000cc34:	4630      	mov	r0, r6
9000cc36:	f7fe ff7f 	bl	9000bb38 <_malloc_r>
9000cc3a:	b948      	cbnz	r0, 9000cc50 <__smakebuf_r+0x44>
9000cc3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9000cc40:	059a      	lsls	r2, r3, #22
9000cc42:	d4ef      	bmi.n	9000cc24 <__smakebuf_r+0x18>
9000cc44:	f023 0303 	bic.w	r3, r3, #3
9000cc48:	f043 0302 	orr.w	r3, r3, #2
9000cc4c:	81a3      	strh	r3, [r4, #12]
9000cc4e:	e7e3      	b.n	9000cc18 <__smakebuf_r+0xc>
9000cc50:	4b0d      	ldr	r3, [pc, #52]	; (9000cc88 <__smakebuf_r+0x7c>)
9000cc52:	62b3      	str	r3, [r6, #40]	; 0x28
9000cc54:	89a3      	ldrh	r3, [r4, #12]
9000cc56:	6020      	str	r0, [r4, #0]
9000cc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000cc5c:	81a3      	strh	r3, [r4, #12]
9000cc5e:	9b00      	ldr	r3, [sp, #0]
9000cc60:	6163      	str	r3, [r4, #20]
9000cc62:	9b01      	ldr	r3, [sp, #4]
9000cc64:	6120      	str	r0, [r4, #16]
9000cc66:	b15b      	cbz	r3, 9000cc80 <__smakebuf_r+0x74>
9000cc68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cc6c:	4630      	mov	r0, r6
9000cc6e:	f000 f913 	bl	9000ce98 <_isatty_r>
9000cc72:	b128      	cbz	r0, 9000cc80 <__smakebuf_r+0x74>
9000cc74:	89a3      	ldrh	r3, [r4, #12]
9000cc76:	f023 0303 	bic.w	r3, r3, #3
9000cc7a:	f043 0301 	orr.w	r3, r3, #1
9000cc7e:	81a3      	strh	r3, [r4, #12]
9000cc80:	89a0      	ldrh	r0, [r4, #12]
9000cc82:	4305      	orrs	r5, r0
9000cc84:	81a5      	strh	r5, [r4, #12]
9000cc86:	e7cd      	b.n	9000cc24 <__smakebuf_r+0x18>
9000cc88:	9000ca19 	.word	0x9000ca19

9000cc8c <memmove>:
9000cc8c:	4288      	cmp	r0, r1
9000cc8e:	b510      	push	{r4, lr}
9000cc90:	eb01 0402 	add.w	r4, r1, r2
9000cc94:	d902      	bls.n	9000cc9c <memmove+0x10>
9000cc96:	4284      	cmp	r4, r0
9000cc98:	4623      	mov	r3, r4
9000cc9a:	d807      	bhi.n	9000ccac <memmove+0x20>
9000cc9c:	1e43      	subs	r3, r0, #1
9000cc9e:	42a1      	cmp	r1, r4
9000cca0:	d008      	beq.n	9000ccb4 <memmove+0x28>
9000cca2:	f811 2b01 	ldrb.w	r2, [r1], #1
9000cca6:	f803 2f01 	strb.w	r2, [r3, #1]!
9000ccaa:	e7f8      	b.n	9000cc9e <memmove+0x12>
9000ccac:	4402      	add	r2, r0
9000ccae:	4601      	mov	r1, r0
9000ccb0:	428a      	cmp	r2, r1
9000ccb2:	d100      	bne.n	9000ccb6 <memmove+0x2a>
9000ccb4:	bd10      	pop	{r4, pc}
9000ccb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
9000ccba:	f802 4d01 	strb.w	r4, [r2, #-1]!
9000ccbe:	e7f7      	b.n	9000ccb0 <memmove+0x24>

9000ccc0 <_realloc_r>:
9000ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ccc4:	4680      	mov	r8, r0
9000ccc6:	4614      	mov	r4, r2
9000ccc8:	460e      	mov	r6, r1
9000ccca:	b921      	cbnz	r1, 9000ccd6 <_realloc_r+0x16>
9000cccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000ccd0:	4611      	mov	r1, r2
9000ccd2:	f7fe bf31 	b.w	9000bb38 <_malloc_r>
9000ccd6:	b92a      	cbnz	r2, 9000cce4 <_realloc_r+0x24>
9000ccd8:	f7fe fec2 	bl	9000ba60 <_free_r>
9000ccdc:	4625      	mov	r5, r4
9000ccde:	4628      	mov	r0, r5
9000cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cce4:	f000 f8fa 	bl	9000cedc <_malloc_usable_size_r>
9000cce8:	4284      	cmp	r4, r0
9000ccea:	4607      	mov	r7, r0
9000ccec:	d802      	bhi.n	9000ccf4 <_realloc_r+0x34>
9000ccee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
9000ccf2:	d812      	bhi.n	9000cd1a <_realloc_r+0x5a>
9000ccf4:	4621      	mov	r1, r4
9000ccf6:	4640      	mov	r0, r8
9000ccf8:	f7fe ff1e 	bl	9000bb38 <_malloc_r>
9000ccfc:	4605      	mov	r5, r0
9000ccfe:	2800      	cmp	r0, #0
9000cd00:	d0ed      	beq.n	9000ccde <_realloc_r+0x1e>
9000cd02:	42bc      	cmp	r4, r7
9000cd04:	4622      	mov	r2, r4
9000cd06:	4631      	mov	r1, r6
9000cd08:	bf28      	it	cs
9000cd0a:	463a      	movcs	r2, r7
9000cd0c:	f7fe fe92 	bl	9000ba34 <memcpy>
9000cd10:	4631      	mov	r1, r6
9000cd12:	4640      	mov	r0, r8
9000cd14:	f7fe fea4 	bl	9000ba60 <_free_r>
9000cd18:	e7e1      	b.n	9000ccde <_realloc_r+0x1e>
9000cd1a:	4635      	mov	r5, r6
9000cd1c:	e7df      	b.n	9000ccde <_realloc_r+0x1e>

9000cd1e <_raise_r>:
9000cd1e:	291f      	cmp	r1, #31
9000cd20:	b538      	push	{r3, r4, r5, lr}
9000cd22:	4604      	mov	r4, r0
9000cd24:	460d      	mov	r5, r1
9000cd26:	d904      	bls.n	9000cd32 <_raise_r+0x14>
9000cd28:	2316      	movs	r3, #22
9000cd2a:	6003      	str	r3, [r0, #0]
9000cd2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000cd30:	bd38      	pop	{r3, r4, r5, pc}
9000cd32:	6c42      	ldr	r2, [r0, #68]	; 0x44
9000cd34:	b112      	cbz	r2, 9000cd3c <_raise_r+0x1e>
9000cd36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9000cd3a:	b94b      	cbnz	r3, 9000cd50 <_raise_r+0x32>
9000cd3c:	4620      	mov	r0, r4
9000cd3e:	f000 f831 	bl	9000cda4 <_getpid_r>
9000cd42:	462a      	mov	r2, r5
9000cd44:	4601      	mov	r1, r0
9000cd46:	4620      	mov	r0, r4
9000cd48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000cd4c:	f000 b818 	b.w	9000cd80 <_kill_r>
9000cd50:	2b01      	cmp	r3, #1
9000cd52:	d00a      	beq.n	9000cd6a <_raise_r+0x4c>
9000cd54:	1c59      	adds	r1, r3, #1
9000cd56:	d103      	bne.n	9000cd60 <_raise_r+0x42>
9000cd58:	2316      	movs	r3, #22
9000cd5a:	6003      	str	r3, [r0, #0]
9000cd5c:	2001      	movs	r0, #1
9000cd5e:	e7e7      	b.n	9000cd30 <_raise_r+0x12>
9000cd60:	2400      	movs	r4, #0
9000cd62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
9000cd66:	4628      	mov	r0, r5
9000cd68:	4798      	blx	r3
9000cd6a:	2000      	movs	r0, #0
9000cd6c:	e7e0      	b.n	9000cd30 <_raise_r+0x12>
	...

9000cd70 <raise>:
9000cd70:	4b02      	ldr	r3, [pc, #8]	; (9000cd7c <raise+0xc>)
9000cd72:	4601      	mov	r1, r0
9000cd74:	6818      	ldr	r0, [r3, #0]
9000cd76:	f7ff bfd2 	b.w	9000cd1e <_raise_r>
9000cd7a:	bf00      	nop
9000cd7c:	20000054 	.word	0x20000054

9000cd80 <_kill_r>:
9000cd80:	b538      	push	{r3, r4, r5, lr}
9000cd82:	4d07      	ldr	r5, [pc, #28]	; (9000cda0 <_kill_r+0x20>)
9000cd84:	2300      	movs	r3, #0
9000cd86:	4604      	mov	r4, r0
9000cd88:	4608      	mov	r0, r1
9000cd8a:	4611      	mov	r1, r2
9000cd8c:	602b      	str	r3, [r5, #0]
9000cd8e:	f7f3 fd6b 	bl	90000868 <_kill>
9000cd92:	1c43      	adds	r3, r0, #1
9000cd94:	d102      	bne.n	9000cd9c <_kill_r+0x1c>
9000cd96:	682b      	ldr	r3, [r5, #0]
9000cd98:	b103      	cbz	r3, 9000cd9c <_kill_r+0x1c>
9000cd9a:	6023      	str	r3, [r4, #0]
9000cd9c:	bd38      	pop	{r3, r4, r5, pc}
9000cd9e:	bf00      	nop
9000cda0:	200050c0 	.word	0x200050c0

9000cda4 <_getpid_r>:
9000cda4:	f7f3 bd58 	b.w	90000858 <_getpid>

9000cda8 <__sread>:
9000cda8:	b510      	push	{r4, lr}
9000cdaa:	460c      	mov	r4, r1
9000cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cdb0:	f000 f89c 	bl	9000ceec <_read_r>
9000cdb4:	2800      	cmp	r0, #0
9000cdb6:	bfab      	itete	ge
9000cdb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000cdba:	89a3      	ldrhlt	r3, [r4, #12]
9000cdbc:	181b      	addge	r3, r3, r0
9000cdbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000cdc2:	bfac      	ite	ge
9000cdc4:	6563      	strge	r3, [r4, #84]	; 0x54
9000cdc6:	81a3      	strhlt	r3, [r4, #12]
9000cdc8:	bd10      	pop	{r4, pc}

9000cdca <__swrite>:
9000cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000cdce:	461f      	mov	r7, r3
9000cdd0:	898b      	ldrh	r3, [r1, #12]
9000cdd2:	05db      	lsls	r3, r3, #23
9000cdd4:	4605      	mov	r5, r0
9000cdd6:	460c      	mov	r4, r1
9000cdd8:	4616      	mov	r6, r2
9000cdda:	d505      	bpl.n	9000cde8 <__swrite+0x1e>
9000cddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000cde0:	2302      	movs	r3, #2
9000cde2:	2200      	movs	r2, #0
9000cde4:	f000 f868 	bl	9000ceb8 <_lseek_r>
9000cde8:	89a3      	ldrh	r3, [r4, #12]
9000cdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000cdee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000cdf2:	81a3      	strh	r3, [r4, #12]
9000cdf4:	4632      	mov	r2, r6
9000cdf6:	463b      	mov	r3, r7
9000cdf8:	4628      	mov	r0, r5
9000cdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000cdfe:	f000 b817 	b.w	9000ce30 <_write_r>

9000ce02 <__sseek>:
9000ce02:	b510      	push	{r4, lr}
9000ce04:	460c      	mov	r4, r1
9000ce06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ce0a:	f000 f855 	bl	9000ceb8 <_lseek_r>
9000ce0e:	1c43      	adds	r3, r0, #1
9000ce10:	89a3      	ldrh	r3, [r4, #12]
9000ce12:	bf15      	itete	ne
9000ce14:	6560      	strne	r0, [r4, #84]	; 0x54
9000ce16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000ce1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000ce1e:	81a3      	strheq	r3, [r4, #12]
9000ce20:	bf18      	it	ne
9000ce22:	81a3      	strhne	r3, [r4, #12]
9000ce24:	bd10      	pop	{r4, pc}

9000ce26 <__sclose>:
9000ce26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000ce2a:	f000 b813 	b.w	9000ce54 <_close_r>
	...

9000ce30 <_write_r>:
9000ce30:	b538      	push	{r3, r4, r5, lr}
9000ce32:	4d07      	ldr	r5, [pc, #28]	; (9000ce50 <_write_r+0x20>)
9000ce34:	4604      	mov	r4, r0
9000ce36:	4608      	mov	r0, r1
9000ce38:	4611      	mov	r1, r2
9000ce3a:	2200      	movs	r2, #0
9000ce3c:	602a      	str	r2, [r5, #0]
9000ce3e:	461a      	mov	r2, r3
9000ce40:	f7f3 fd49 	bl	900008d6 <_write>
9000ce44:	1c43      	adds	r3, r0, #1
9000ce46:	d102      	bne.n	9000ce4e <_write_r+0x1e>
9000ce48:	682b      	ldr	r3, [r5, #0]
9000ce4a:	b103      	cbz	r3, 9000ce4e <_write_r+0x1e>
9000ce4c:	6023      	str	r3, [r4, #0]
9000ce4e:	bd38      	pop	{r3, r4, r5, pc}
9000ce50:	200050c0 	.word	0x200050c0

9000ce54 <_close_r>:
9000ce54:	b538      	push	{r3, r4, r5, lr}
9000ce56:	4d06      	ldr	r5, [pc, #24]	; (9000ce70 <_close_r+0x1c>)
9000ce58:	2300      	movs	r3, #0
9000ce5a:	4604      	mov	r4, r0
9000ce5c:	4608      	mov	r0, r1
9000ce5e:	602b      	str	r3, [r5, #0]
9000ce60:	f7f3 fd55 	bl	9000090e <_close>
9000ce64:	1c43      	adds	r3, r0, #1
9000ce66:	d102      	bne.n	9000ce6e <_close_r+0x1a>
9000ce68:	682b      	ldr	r3, [r5, #0]
9000ce6a:	b103      	cbz	r3, 9000ce6e <_close_r+0x1a>
9000ce6c:	6023      	str	r3, [r4, #0]
9000ce6e:	bd38      	pop	{r3, r4, r5, pc}
9000ce70:	200050c0 	.word	0x200050c0

9000ce74 <_fstat_r>:
9000ce74:	b538      	push	{r3, r4, r5, lr}
9000ce76:	4d07      	ldr	r5, [pc, #28]	; (9000ce94 <_fstat_r+0x20>)
9000ce78:	2300      	movs	r3, #0
9000ce7a:	4604      	mov	r4, r0
9000ce7c:	4608      	mov	r0, r1
9000ce7e:	4611      	mov	r1, r2
9000ce80:	602b      	str	r3, [r5, #0]
9000ce82:	f7f3 fd50 	bl	90000926 <_fstat>
9000ce86:	1c43      	adds	r3, r0, #1
9000ce88:	d102      	bne.n	9000ce90 <_fstat_r+0x1c>
9000ce8a:	682b      	ldr	r3, [r5, #0]
9000ce8c:	b103      	cbz	r3, 9000ce90 <_fstat_r+0x1c>
9000ce8e:	6023      	str	r3, [r4, #0]
9000ce90:	bd38      	pop	{r3, r4, r5, pc}
9000ce92:	bf00      	nop
9000ce94:	200050c0 	.word	0x200050c0

9000ce98 <_isatty_r>:
9000ce98:	b538      	push	{r3, r4, r5, lr}
9000ce9a:	4d06      	ldr	r5, [pc, #24]	; (9000ceb4 <_isatty_r+0x1c>)
9000ce9c:	2300      	movs	r3, #0
9000ce9e:	4604      	mov	r4, r0
9000cea0:	4608      	mov	r0, r1
9000cea2:	602b      	str	r3, [r5, #0]
9000cea4:	f7f3 fd4f 	bl	90000946 <_isatty>
9000cea8:	1c43      	adds	r3, r0, #1
9000ceaa:	d102      	bne.n	9000ceb2 <_isatty_r+0x1a>
9000ceac:	682b      	ldr	r3, [r5, #0]
9000ceae:	b103      	cbz	r3, 9000ceb2 <_isatty_r+0x1a>
9000ceb0:	6023      	str	r3, [r4, #0]
9000ceb2:	bd38      	pop	{r3, r4, r5, pc}
9000ceb4:	200050c0 	.word	0x200050c0

9000ceb8 <_lseek_r>:
9000ceb8:	b538      	push	{r3, r4, r5, lr}
9000ceba:	4d07      	ldr	r5, [pc, #28]	; (9000ced8 <_lseek_r+0x20>)
9000cebc:	4604      	mov	r4, r0
9000cebe:	4608      	mov	r0, r1
9000cec0:	4611      	mov	r1, r2
9000cec2:	2200      	movs	r2, #0
9000cec4:	602a      	str	r2, [r5, #0]
9000cec6:	461a      	mov	r2, r3
9000cec8:	f7f3 fd48 	bl	9000095c <_lseek>
9000cecc:	1c43      	adds	r3, r0, #1
9000cece:	d102      	bne.n	9000ced6 <_lseek_r+0x1e>
9000ced0:	682b      	ldr	r3, [r5, #0]
9000ced2:	b103      	cbz	r3, 9000ced6 <_lseek_r+0x1e>
9000ced4:	6023      	str	r3, [r4, #0]
9000ced6:	bd38      	pop	{r3, r4, r5, pc}
9000ced8:	200050c0 	.word	0x200050c0

9000cedc <_malloc_usable_size_r>:
9000cedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000cee0:	1f18      	subs	r0, r3, #4
9000cee2:	2b00      	cmp	r3, #0
9000cee4:	bfbc      	itt	lt
9000cee6:	580b      	ldrlt	r3, [r1, r0]
9000cee8:	18c0      	addlt	r0, r0, r3
9000ceea:	4770      	bx	lr

9000ceec <_read_r>:
9000ceec:	b538      	push	{r3, r4, r5, lr}
9000ceee:	4d07      	ldr	r5, [pc, #28]	; (9000cf0c <_read_r+0x20>)
9000cef0:	4604      	mov	r4, r0
9000cef2:	4608      	mov	r0, r1
9000cef4:	4611      	mov	r1, r2
9000cef6:	2200      	movs	r2, #0
9000cef8:	602a      	str	r2, [r5, #0]
9000cefa:	461a      	mov	r2, r3
9000cefc:	f7f3 fcce 	bl	9000089c <_read>
9000cf00:	1c43      	adds	r3, r0, #1
9000cf02:	d102      	bne.n	9000cf0a <_read_r+0x1e>
9000cf04:	682b      	ldr	r3, [r5, #0]
9000cf06:	b103      	cbz	r3, 9000cf0a <_read_r+0x1e>
9000cf08:	6023      	str	r3, [r4, #0]
9000cf0a:	bd38      	pop	{r3, r4, r5, pc}
9000cf0c:	200050c0 	.word	0x200050c0

9000cf10 <_gettimeofday>:
9000cf10:	4b02      	ldr	r3, [pc, #8]	; (9000cf1c <_gettimeofday+0xc>)
9000cf12:	2258      	movs	r2, #88	; 0x58
9000cf14:	601a      	str	r2, [r3, #0]
9000cf16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000cf1a:	4770      	bx	lr
9000cf1c:	200050c0 	.word	0x200050c0

9000cf20 <_init>:
9000cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cf22:	bf00      	nop
9000cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cf26:	bc08      	pop	{r3}
9000cf28:	469e      	mov	lr, r3
9000cf2a:	4770      	bx	lr

9000cf2c <_fini>:
9000cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000cf2e:	bf00      	nop
9000cf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000cf32:	bc08      	pop	{r3}
9000cf34:	469e      	mov	lr, r3
9000cf36:	4770      	bx	lr
