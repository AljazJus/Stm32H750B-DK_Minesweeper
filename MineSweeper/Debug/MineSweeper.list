
MineSweeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028b8  0800f1f8  0800f1f8  0001f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011ab0  08011ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011ab4  08011ab4  00021ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  24000000  08011ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001588  240000c0  08011b78  000300c0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001648  08011b78  00031648  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00034600  00000000  00000000  000300ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005ccb  00000000  00000000  000646ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002660  00000000  00000000  0006a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002438  00000000  00000000  0006ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000a1a4  00000000  00000000  0006ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000353fd  00000000  00000000  00078ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a8ebe  00000000  00000000  000ae3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002572b7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000af08  00000000  00000000  00257308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         00000024  00000000  00000000  00262210  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000004e  00000000  00000000  00262234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f1e0 	.word	0x0800f1e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	0800f1e0 	.word	0x0800f1e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	  /* Enable the CPU Cache */
	  CPU_CACHE_Enable();
 8000386:	f000 f8dd 	bl	8000544 <CPU_CACHE_Enable>
	  /* STM32H7xx HAL library initialization:
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 4
	       - Low Level Initialization
	     */
	  HAL_Init();
 800038a:	f003 fdb5 	bl	8003ef8 <HAL_Init>

	  /* Configure the system clock to 400 MHz */
	  SystemClock_Config();
 800038e:	f000 f843 	bl	8000418 <SystemClock_Config>

	  /* Configure LED1 */
	  BSP_LED_Init(LED1);
 8000392:	2000      	movs	r0, #0
 8000394:	f001 fdea 	bl	8001f6c <BSP_LED_Init>

	  /*##-1- LCD Initialization #################################################*/
	  /* Initialize the LCD */
	  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000398:	2101      	movs	r1, #1
 800039a:	2000      	movs	r0, #0
 800039c:	f002 faf6 	bl	800298c <BSP_LCD_Init>
	  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x90>)
 80003a2:	f000 f9f3 	bl	800078c <UTIL_LCD_SetFuncDriver>

	  /* Set Foreground Layer */
	  UTIL_LCD_SetLayer(0);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fa46 	bl	8000838 <UTIL_LCD_SetLayer>

	  /* Clear the LCD Background layer */
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80003ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003b0:	f000 fb58 	bl	8000a64 <UTIL_LCD_Clear>
	  uint32_t x_sizee, y_sizee;

	  BSP_LCD_GetXSize(0, &x_sizee);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	2000      	movs	r0, #0
 80003ba:	f002 fcc3 	bl	8002d44 <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_sizee);
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f002 fcdc 	bl	8002d80 <BSP_LCD_GetYSize>
	  hTSs->Width = x_sizee;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <main+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
	  hTSs->Height = y_sizee;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0x94>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	605a      	str	r2, [r3, #4]
	  hTSs->Orientation = TS_SWAP_XY;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <main+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2208      	movs	r2, #8
 80003de:	609a      	str	r2, [r3, #8]
	  hTSs->Accuracy = 5;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <main+0x94>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2205      	movs	r2, #5
 80003e6:	60da      	str	r2, [r3, #12]
	  /* Touchscreen initialization */
	  BSP_TS_Init(0, hTSs);
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <main+0x94>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	2000      	movs	r0, #0
 80003f0:	f003 fb64 	bl	8003abc <BSP_TS_Init>

	  srand(time(NULL));   // Initialization, should only be called once.
 80003f4:	2000      	movs	r0, #0
 80003f6:	f00d fd17 	bl	800de28 <time>
 80003fa:	4602      	mov	r2, r0
 80003fc:	460b      	mov	r3, r1
 80003fe:	4610      	mov	r0, r2
 8000400:	4619      	mov	r1, r3
 8000402:	f00d fc85 	bl	800dd10 <srand>
	  HAL_IncTick();
 8000406:	f003 fde9 	bl	8003fdc <HAL_IncTick>

	  /* Infinite loop */
	  while (1)
	  {
	    sweeperMain();
 800040a:	f00b fda7 	bl	800bf5c <sweeperMain>
 800040e:	e7fc      	b.n	800040a <main+0x8a>
 8000410:	0801193c 	.word	0x0801193c
 8000414:	240001bc 	.word	0x240001bc

08000418 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09e      	sub	sp, #120	; 0x78
 800041c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800041e:	2300      	movs	r3, #0
 8000420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 fd3b 	bl	8007ea0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	4b42      	ldr	r3, [pc, #264]	; (8000538 <SystemClock_Config+0x120>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	4a41      	ldr	r2, [pc, #260]	; (8000538 <SystemClock_Config+0x120>)
 8000434:	f023 0301 	bic.w	r3, r3, #1
 8000438:	62d3      	str	r3, [r2, #44]	; 0x2c
 800043a:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <SystemClock_Config+0x120>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <SystemClock_Config+0x124>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a3c      	ldr	r2, [pc, #240]	; (800053c <SystemClock_Config+0x124>)
 800044a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <SystemClock_Config+0x124>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <SystemClock_Config+0x124>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	2302      	movs	r3, #2
 8000484:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800049a:	2304      	movs	r3, #4
 800049c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049e:	2300      	movs	r3, #0
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004a2:	2308      	movs	r3, #8
 80004a4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f007 fd32 	bl	8007f14 <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004be:	f000 f8af 	bl	8000620 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80004c2:	233f      	movs	r3, #63	; 0x3f
 80004c4:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c6:	2303      	movs	r3, #3
 80004c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ce:	2308      	movs	r3, #8
 80004d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d2:	2340      	movs	r3, #64	; 0x40
 80004d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d6:	2340      	movs	r3, #64	; 0x40
 80004d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004e8:	2104      	movs	r1, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f008 f96c 	bl	80087c8 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004fe:	f000 f88f 	bl	8000620 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <SystemClock_Config+0x128>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <SystemClock_Config+0x128>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <SystemClock_Config+0x128>)
 8000510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <SystemClock_Config+0x128>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SystemClock_Config+0x128>)
 8000520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 800052c:	f003 fd82 	bl	8004034 <HAL_EnableCompensationCell>
}
 8000530:	bf00      	nop
 8000532:	3778      	adds	r7, #120	; 0x78
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	58000400 	.word	0x58000400
 800053c:	58024800 	.word	0x58024800
 8000540:	58024400 	.word	0x58024400

08000544 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11b      	bne.n	800058e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
}
 8000574:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000582:	f3bf 8f4f 	dsb	sy
}
 8000586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000588:	f3bf 8f6f 	isb	sy
}
 800058c:	e000      	b.n	8000590 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800058e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000598:	2b00      	cmp	r3, #0
 800059a:	d138      	bne.n	800060e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	0b5b      	lsrs	r3, r3, #13
 80005b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ba:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005c4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	015a      	lsls	r2, r3, #5
 80005ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005d4:	4911      	ldr	r1, [pc, #68]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1ef      	bne.n	80005c6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e5      	bne.n	80005bc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
}
 800060c:	e000      	b.n	8000610 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800060e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 fcfd 	bl	8002028 <BSP_LED_On>
  while (1)
 800062e:	e7fe      	b.n	800062e <Error_Handler+0xe>

08000630 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db04      	blt.n	8000648 <_isatty+0x18>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b02      	cmp	r3, #2
 8000642:	dc01      	bgt.n	8000648 <_isatty+0x18>
    return 1;
 8000644:	2301      	movs	r3, #1
 8000646:	e005      	b.n	8000654 <_isatty+0x24>

  errno = EBADF;
 8000648:	f00d fb22 	bl	800dc90 <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	2209      	movs	r2, #9
 8000650:	601a      	str	r2, [r3, #0]
  return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_close>:

int _close(int fd) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db04      	blt.n	8000674 <_close+0x18>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc01      	bgt.n	8000674 <_close+0x18>
    return 0;
 8000670:	2300      	movs	r3, #0
 8000672:	e006      	b.n	8000682 <_close+0x26>

  errno = EBADF;
 8000674:	f00d fb0c 	bl	800dc90 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	2209      	movs	r2, #9
 800067c:	601a      	str	r2, [r3, #0]
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000696:	f00d fafb 	bl	800dc90 <__errno>
 800069a:	4603      	mov	r3, r0
 800069c:	2209      	movs	r2, #9
 800069e:	601a      	str	r2, [r3, #0]
  return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_fstat>:



int _fstat(int fd, struct stat* st) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db08      	blt.n	80006ce <_fstat+0x22>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	dc05      	bgt.n	80006ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c8:	605a      	str	r2, [r3, #4]
    return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e005      	b.n	80006da <_fstat+0x2e>
  }

  errno = EBADF;
 80006ce:	f00d fadf 	bl	800dc90 <__errno>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2209      	movs	r2, #9
 80006d6:	601a      	str	r2, [r3, #0]
  return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_read>:


int _read(int fd, char* ptr, int len) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d110      	bne.n	8000718 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_read+0x4c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fe:	2201      	movs	r2, #1
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	f00a fb47 	bl	800ad94 <HAL_UART_Receive>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <_read+0x30>
      return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e008      	b.n	8000726 <_read+0x42>
    else
      return EIO;
 8000714:	2305      	movs	r3, #5
 8000716:	e006      	b.n	8000726 <_read+0x42>
  }
  errno = EBADF;
 8000718:	f00d faba 	bl	800dc90 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	2209      	movs	r2, #9
 8000720:	601a      	str	r2, [r3, #0]
  return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	240001c0 	.word	0x240001c0

08000734 <_write>:

int _write(int fd, char* ptr, int len) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d002      	beq.n	800074c <_write+0x18>
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d111      	bne.n	8000770 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <_write+0x54>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f00a fa8d 	bl	800ac78 <HAL_UART_Transmit>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <_write+0x38>
      return len;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	e008      	b.n	800077e <_write+0x4a>
    else
      return EIO;
 800076c:	2305      	movs	r3, #5
 800076e:	e006      	b.n	800077e <_write+0x4a>
  }
  errno = EBADF;
 8000770:	f00d fa8e 	bl	800dc90 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	2209      	movs	r2, #9
 8000778:	601a      	str	r2, [r3, #0]
  return -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240001c0 	.word	0x240001c0

0800078c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 800079a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007a2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007aa:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007b2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ba:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007c2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ca:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007d2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007da:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007e2:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ea:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <UTIL_LCD_SetFuncDriver+0xa0>)
 80007fe:	4611      	mov	r1, r2
 8000800:	2000      	movs	r0, #0
 8000802:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <UTIL_LCD_SetFuncDriver+0xa4>)
 800080a:	4611      	mov	r1, r2
 800080c:	2000      	movs	r0, #0
 800080e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000816:	4611      	mov	r1, r2
 8000818:	2000      	movs	r0, #0
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	24000204 	.word	0x24000204
 8000828:	240001c4 	.word	0x240001c4
 800082c:	240001d8 	.word	0x240001d8
 8000830:	240001dc 	.word	0x240001dc
 8000834:	240001e0 	.word	0x240001e0

08000838 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800084e:	6912      	ldr	r2, [r2, #16]
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4610      	mov	r0, r2
 8000854:	4798      	blx	r3
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000204 	.word	0x24000204
 8000870:	240001c4 	.word	0x240001c4

08000874 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <UTIL_LCD_SetTextColor+0x24>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <UTIL_LCD_SetTextColor+0x24>)
 8000882:	015b      	lsls	r3, r3, #5
 8000884:	4413      	add	r3, r2
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	240001c4 	.word	0x240001c4

0800089c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <UTIL_LCD_SetBackColor+0x24>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <UTIL_LCD_SetBackColor+0x24>)
 80008aa:	015b      	lsls	r3, r3, #5
 80008ac:	4413      	add	r3, r2
 80008ae:	3304      	adds	r3, #4
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	240001c4 	.word	0x240001c4

080008c4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <UTIL_LCD_SetFont+0x24>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <UTIL_LCD_SetFont+0x24>)
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	4413      	add	r3, r2
 80008d6:	3308      	adds	r3, #8
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	240001c4 	.word	0x240001c4

080008ec <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <UTIL_LCD_FillRGBRect+0x30>)
 80008fc:	685c      	ldr	r4, [r3, #4]
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <UTIL_LCD_FillRGBRect+0x34>)
 8000900:	6918      	ldr	r0, [r3, #16]
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	68f9      	ldr	r1, [r7, #12]
 8000910:	47a0      	blx	r4
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	bf00      	nop
 800091c:	24000204 	.word	0x24000204
 8000920:	240001c4 	.word	0x240001c4

08000924 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b087      	sub	sp, #28
 8000928:	af02      	add	r7, sp, #8
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <UTIL_LCD_DrawHLine+0x64>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d118      	bne.n	800096c <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <UTIL_LCD_DrawHLine+0x68>)
 800093c:	689c      	ldr	r4, [r3, #8]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <UTIL_LCD_DrawHLine+0x64>)
 8000940:	6918      	ldr	r0, [r3, #16]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f003 021f 	and.w	r2, r3, #31
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	0a9b      	lsrs	r3, r3, #10
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000954:	431a      	orrs	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	0cdb      	lsrs	r3, r3, #19
 800095a:	02db      	lsls	r3, r3, #11
 800095c:	b29b      	uxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	68f9      	ldr	r1, [r7, #12]
 8000968:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800096a:	e009      	b.n	8000980 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <UTIL_LCD_DrawHLine+0x68>)
 800096e:	689c      	ldr	r4, [r3, #8]
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <UTIL_LCD_DrawHLine+0x64>)
 8000972:	6918      	ldr	r0, [r3, #16]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	47a0      	blx	r4
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	240001c4 	.word	0x240001c4
 800098c:	24000204 	.word	0x24000204

08000990 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <UTIL_LCD_DrawVLine+0x64>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d118      	bne.n	80009d8 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <UTIL_LCD_DrawVLine+0x68>)
 80009a8:	68dc      	ldr	r4, [r3, #12]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <UTIL_LCD_DrawVLine+0x64>)
 80009ac:	6918      	ldr	r0, [r3, #16]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	f003 021f 	and.w	r2, r3, #31
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	0a9b      	lsrs	r3, r3, #10
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80009c0:	431a      	orrs	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	0cdb      	lsrs	r3, r3, #19
 80009c6:	02db      	lsls	r3, r3, #11
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80009d6:	e009      	b.n	80009ec <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <UTIL_LCD_DrawVLine+0x68>)
 80009da:	68dc      	ldr	r4, [r3, #12]
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <UTIL_LCD_DrawVLine+0x64>)
 80009de:	6918      	ldr	r0, [r3, #16]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	68f9      	ldr	r1, [r7, #12]
 80009ea:	47a0      	blx	r4
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	240001c4 	.word	0x240001c4
 80009f8:	24000204 	.word	0x24000204

080009fc <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 80009fc:	b5b0      	push	{r4, r5, r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	603a      	str	r2, [r7, #0]
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <UTIL_LCD_SetPixel+0x60>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d117      	bne.n	8000a44 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <UTIL_LCD_SetPixel+0x64>)
 8000a16:	699c      	ldr	r4, [r3, #24]
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <UTIL_LCD_SetPixel+0x60>)
 8000a1a:	6918      	ldr	r0, [r3, #16]
 8000a1c:	88f9      	ldrh	r1, [r7, #6]
 8000a1e:	88bd      	ldrh	r5, [r7, #4]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	0a9b      	lsrs	r3, r3, #10
 8000a2c:	015b      	lsls	r3, r3, #5
 8000a2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000a32:	431a      	orrs	r2, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	0cdb      	lsrs	r3, r3, #19
 8000a38:	02db      	lsls	r3, r3, #11
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	462a      	mov	r2, r5
 8000a40:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 8000a42:	e007      	b.n	8000a54 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <UTIL_LCD_SetPixel+0x64>)
 8000a46:	699c      	ldr	r4, [r3, #24]
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <UTIL_LCD_SetPixel+0x60>)
 8000a4a:	6918      	ldr	r0, [r3, #16]
 8000a4c:	88f9      	ldrh	r1, [r7, #6]
 8000a4e:	88ba      	ldrh	r2, [r7, #4]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	47a0      	blx	r4
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5c:	240001c4 	.word	0x240001c4
 8000a60:	24000204 	.word	0x24000204

08000a64 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <UTIL_LCD_Clear+0x28>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <UTIL_LCD_Clear+0x28>)
 8000a72:	6999      	ldr	r1, [r3, #24]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fa1f 	bl	8000ec0 <UTIL_LCD_FillRect>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240001c4 	.word	0x240001c4

08000a90 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3308      	adds	r3, #8
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000ab2:	4911      	ldr	r1, [pc, #68]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000ab4:	68c9      	ldr	r1, [r1, #12]
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000ab8:	0149      	lsls	r1, r1, #5
 8000aba:	4401      	add	r1, r0
 8000abc:	3108      	adds	r1, #8
 8000abe:	6809      	ldr	r1, [r1, #0]
 8000ac0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000ac2:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <UTIL_LCD_DisplayChar+0x68>)
 8000acc:	015b      	lsls	r3, r3, #5
 8000ace:	4403      	add	r3, r0
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	889b      	ldrh	r3, [r3, #4]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da00      	bge.n	8000ade <UTIL_LCD_DisplayChar+0x4e>
 8000adc:	3307      	adds	r3, #7
 8000ade:	10db      	asrs	r3, r3, #3
 8000ae0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000ae4:	4413      	add	r3, r2
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f000 face 	bl	800108c <DrawChar>
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	240001c4 	.word	0x240001c4

08000afc <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000b1e:	e002      	b.n	8000b26 <UTIL_LCD_DisplayStringAt+0x2a>
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	3301      	adds	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	61ba      	str	r2, [r7, #24]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f6      	bne.n	8000b20 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000b32:	4b48      	ldr	r3, [pc, #288]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a47      	ldr	r2, [pc, #284]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b38:	68d2      	ldr	r2, [r2, #12]
 8000b3a:	4946      	ldr	r1, [pc, #280]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b3c:	0152      	lsls	r2, r2, #5
 8000b3e:	440a      	add	r2, r1
 8000b40:	3208      	adds	r2, #8
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	8892      	ldrh	r2, [r2, #4]
 8000b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b4a:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d018      	beq.n	8000b84 <UTIL_LCD_DisplayStringAt+0x88>
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	dc2a      	bgt.n	8000bac <UTIL_LCD_DisplayStringAt+0xb0>
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d002      	beq.n	8000b60 <UTIL_LCD_DisplayStringAt+0x64>
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d015      	beq.n	8000b8a <UTIL_LCD_DisplayStringAt+0x8e>
 8000b5e:	e025      	b.n	8000bac <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b68:	68d2      	ldr	r2, [r2, #12]
 8000b6a:	493a      	ldr	r1, [pc, #232]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b6c:	0152      	lsls	r2, r2, #5
 8000b6e:	440a      	add	r2, r1
 8000b70:	3208      	adds	r2, #8
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	8892      	ldrh	r2, [r2, #4]
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	085b      	lsrs	r3, r3, #1
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000b82:	e016      	b.n	8000bb2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000b88:	e013      	b.n	8000bb2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b92:	68d2      	ldr	r2, [r2, #12]
 8000b94:	492f      	ldr	r1, [pc, #188]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000b96:	0152      	lsls	r2, r2, #5
 8000b98:	440a      	add	r2, r1
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	8892      	ldrh	r2, [r2, #4]
 8000ba0:	fb03 f202 	mul.w	r2, r3, r2
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000baa:	e002      	b.n	8000bb2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000bb0:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <UTIL_LCD_DisplayStringAt+0xc4>
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bbe:	d31b      	bcc.n	8000bf8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8000bc4:	e018      	b.n	8000bf8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bd0:	f7ff ff5e 	bl	8000a90 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	4413      	add	r3, r2
 8000bde:	3308      	adds	r3, #8
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	461a      	mov	r2, r3
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	4413      	add	r3, r2
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
    i++;
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000c08:	6959      	ldr	r1, [r3, #20]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000c10:	015b      	lsls	r3, r3, #5
 8000c12:	4403      	add	r3, r0
 8000c14:	3308      	adds	r3, #8
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	fb00 f303 	mul.w	r3, r0, r3
 8000c22:	1acb      	subs	r3, r1, r3
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	490b      	ldr	r1, [pc, #44]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000c28:	68c9      	ldr	r1, [r1, #12]
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <UTIL_LCD_DisplayStringAt+0x158>)
 8000c2c:	0149      	lsls	r1, r1, #5
 8000c2e:	4401      	add	r1, r0
 8000c30:	3108      	adds	r1, #8
 8000c32:	6809      	ldr	r1, [r1, #0]
 8000c34:	8889      	ldrh	r1, [r1, #4]
 8000c36:	428b      	cmp	r3, r1
 8000c38:	bf2c      	ite	cs
 8000c3a:	2301      	movcs	r3, #1
 8000c3c:	2300      	movcc	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4013      	ands	r3, r2
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1be      	bne.n	8000bc6 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240001c4 	.word	0x240001c4

08000c58 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff fe59 	bl	8000924 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	1e59      	subs	r1, r3, #1
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fe50 	bl	8000924 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fe80 	bl	8000990 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	1e58      	subs	r0, r3, #1
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	f7ff fe77 	bl	8000990 <UTIL_LCD_DrawVLine>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	f1c3 0303 	rsb	r3, r3, #3
 8000cc2:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8000ccc:	e0eb      	b.n	8000ea6 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	1ad2      	subs	r2, r2, r3
 8000cd4:	4b79      	ldr	r3, [pc, #484]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d22d      	bcs.n	8000d38 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	441a      	add	r2, r3
 8000ce2:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d20f      	bcs.n	8000d0a <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b298      	uxth	r0, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fe79 	bl	80009fc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d20f      	bcs.n	8000d38 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b298      	uxth	r0, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fe62 	bl	80009fc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d22d      	bcs.n	8000da2 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d20f      	bcs.n	8000d74 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f7ff fe44 	bl	80009fc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	1ad2      	subs	r2, r2, r3
 8000d7a:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d20f      	bcs.n	8000da2 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f7ff fe2d 	bl	80009fc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	441a      	add	r2, r3
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d22d      	bcs.n	8000e0c <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	441a      	add	r2, r3
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d20f      	bcs.n	8000dde <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff fe0f 	bl	80009fc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d20f      	bcs.n	8000e0c <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	b298      	uxth	r0, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fdf8 	bl	80009fc <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	441a      	add	r2, r3
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d22d      	bcs.n	8000e76 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	441a      	add	r2, r3
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d20f      	bcs.n	8000e48 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b298      	uxth	r0, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fdda 	bl	80009fc <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <UTIL_LCD_DrawCircle+0x210>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d20f      	bcs.n	8000e76 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b298      	uxth	r0, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fdc3 	bl	80009fc <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da06      	bge.n	8000e8a <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	009a      	lsls	r2, r3, #2
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	4413      	add	r3, r2
 8000e84:	3306      	adds	r3, #6
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	e00a      	b.n	8000ea0 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	330a      	adds	r3, #10
 8000e98:	61fb      	str	r3, [r7, #28]
      current_y--;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	f67f af0f 	bls.w	8000cce <UTIL_LCD_DrawCircle+0x22>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240001c4 	.word	0x240001c4

08000ec0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <UTIL_LCD_FillRect+0x6c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d11a      	bne.n	8000f0c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <UTIL_LCD_FillRect+0x70>)
 8000ed8:	691c      	ldr	r4, [r3, #16]
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <UTIL_LCD_FillRect+0x6c>)
 8000edc:	6918      	ldr	r0, [r3, #16]
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	f003 021f 	and.w	r2, r3, #31
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	0a9b      	lsrs	r3, r3, #10
 8000eea:	015b      	lsls	r3, r3, #5
 8000eec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	0cdb      	lsrs	r3, r3, #19
 8000ef6:	02db      	lsls	r3, r3, #11
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	68f9      	ldr	r1, [r7, #12]
 8000f08:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8000f0a:	e00b      	b.n	8000f24 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <UTIL_LCD_FillRect+0x70>)
 8000f0e:	691c      	ldr	r4, [r3, #16]
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <UTIL_LCD_FillRect+0x6c>)
 8000f12:	6918      	ldr	r0, [r3, #16]
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	68f9      	ldr	r1, [r7, #12]
 8000f22:	47a0      	blx	r4
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	240001c4 	.word	0x240001c4
 8000f30:	24000204 	.word	0x24000204

08000f34 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	f1c3 0303 	rsb	r3, r3, #3
 8000f4a:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8000f54:	e08b      	b.n	800106e <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d036      	beq.n	8000fca <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d31c      	bcc.n	8000f9e <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005a      	lsls	r2, r3, #1
 8000f6e:	68f9      	ldr	r1, [r7, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	441a      	add	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	4601      	mov	r1, r0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fcd2 	bl	8000924 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	1ad0      	subs	r0, r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005a      	lsls	r2, r3, #1
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	1acb      	subs	r3, r1, r3
 8000f90:	441a      	add	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4601      	mov	r1, r0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fcc4 	bl	8000924 <UTIL_LCD_DrawHLine>
 8000f9c:	e015      	b.n	8000fca <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	1ad0      	subs	r0, r2, r3
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	18d1      	adds	r1, r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005a      	lsls	r2, r3, #1
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f7ff fcb8 	bl	8000924 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	1ad0      	subs	r0, r2, r3
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad1      	subs	r1, r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005a      	lsls	r2, r3, #1
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f7ff fcad 	bl	8000924 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d036      	beq.n	800103e <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d31c      	bcc.n	8001012 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	1ad0      	subs	r0, r2, r3
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	005a      	lsls	r2, r3, #1
 8000fe2:	68f9      	ldr	r1, [r7, #12]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	1acb      	subs	r3, r1, r3
 8000fe8:	441a      	add	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4601      	mov	r1, r0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fc98 	bl	8000924 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	18d0      	adds	r0, r2, r3
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	005a      	lsls	r2, r3, #1
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	1acb      	subs	r3, r1, r3
 8001004:	441a      	add	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4601      	mov	r1, r0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fc8a 	bl	8000924 <UTIL_LCD_DrawHLine>
 8001010:	e015      	b.n	800103e <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	1ad0      	subs	r0, r2, r3
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	1ad1      	subs	r1, r2, r3
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	005a      	lsls	r2, r3, #1
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f7ff fc7e 	bl	8000924 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad0      	subs	r0, r2, r3
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	18d1      	adds	r1, r2, r3
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	005a      	lsls	r2, r3, #1
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f7ff fc73 	bl	8000924 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da06      	bge.n	8001052 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	009a      	lsls	r2, r3, #2
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	4413      	add	r3, r2
 800104c:	3306      	adds	r3, #6
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e00a      	b.n	8001068 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	009a      	lsls	r2, r3, #2
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	330a      	adds	r3, #10
 8001060:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3b01      	subs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	3301      	adds	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	429a      	cmp	r2, r3
 8001074:	f67f af6f 	bls.w	8000f56 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fe14 	bl	8000cac <UTIL_LCD_DrawCircle>
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b2      	sub	sp, #200	; 0xc8
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80010a4:	4ba5      	ldr	r3, [pc, #660]	; (800133c <DrawChar+0x2b0>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4aa4      	ldr	r2, [pc, #656]	; (800133c <DrawChar+0x2b0>)
 80010aa:	015b      	lsls	r3, r3, #5
 80010ac:	4413      	add	r3, r2
 80010ae:	3308      	adds	r3, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	88db      	ldrh	r3, [r3, #6]
 80010b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80010b8:	4ba0      	ldr	r3, [pc, #640]	; (800133c <DrawChar+0x2b0>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4a9f      	ldr	r2, [pc, #636]	; (800133c <DrawChar+0x2b0>)
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	4413      	add	r3, r2
 80010c2:	3308      	adds	r3, #8
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80010cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010d0:	3307      	adds	r3, #7
 80010d2:	f023 0207 	bic.w	r2, r3, #7
 80010d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80010e6:	e11c      	b.n	8001322 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80010e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010ec:	3307      	adds	r3, #7
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8001100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001104:	3307      	adds	r3, #7
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d002      	beq.n	8001112 <DrawChar+0x86>
 800110c:	2b02      	cmp	r3, #2
 800110e:	d006      	beq.n	800111e <DrawChar+0x92>
 8001110:	e011      	b.n	8001136 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800111c:	e01d      	b.n	800115a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800111e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800112a:	3201      	adds	r2, #1
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001134:	e011      	b.n	800115a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001142:	3301      	adds	r3, #1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800114e:	3202      	adds	r2, #2
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	4313      	orrs	r3, r2
 8001154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001158:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800115a:	4b78      	ldr	r3, [pc, #480]	; (800133c <DrawChar+0x2b0>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a77      	ldr	r2, [pc, #476]	; (800133c <DrawChar+0x2b0>)
 8001160:	015b      	lsls	r3, r3, #5
 8001162:	4413      	add	r3, r2
 8001164:	331c      	adds	r3, #28
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b02      	cmp	r3, #2
 800116a:	f040 808c 	bne.w	8001286 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001174:	e074      	b.n	8001260 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001176:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800117a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001184:	4413      	add	r3, r2
 8001186:	3b01      	subs	r3, #1
 8001188:	2201      	movs	r2, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	461a      	mov	r2, r3
 8001190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d02d      	beq.n	80011f6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800119a:	4b68      	ldr	r3, [pc, #416]	; (800133c <DrawChar+0x2b0>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	4a67      	ldr	r2, [pc, #412]	; (800133c <DrawChar+0x2b0>)
 80011a0:	015b      	lsls	r3, r3, #5
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b62      	ldr	r3, [pc, #392]	; (800133c <DrawChar+0x2b0>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4961      	ldr	r1, [pc, #388]	; (800133c <DrawChar+0x2b0>)
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	440b      	add	r3, r1
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	0a9b      	lsrs	r3, r3, #10
 80011be:	b29b      	uxth	r3, r3
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <DrawChar+0x2b0>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	495a      	ldr	r1, [pc, #360]	; (800133c <DrawChar+0x2b0>)
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	440b      	add	r3, r1
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0cdb      	lsrs	r3, r3, #19
 80011dc:	b29b      	uxth	r3, r3
 80011de:	02db      	lsls	r3, r3, #11
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	33c0      	adds	r3, #192	; 0xc0
 80011ee:	443b      	add	r3, r7
 80011f0:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80011f4:	e02f      	b.n	8001256 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <DrawChar+0x2b0>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4a50      	ldr	r2, [pc, #320]	; (800133c <DrawChar+0x2b0>)
 80011fc:	015b      	lsls	r3, r3, #5
 80011fe:	4413      	add	r3, r2
 8001200:	3304      	adds	r3, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	b29b      	uxth	r3, r3
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <DrawChar+0x2b0>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	494a      	ldr	r1, [pc, #296]	; (800133c <DrawChar+0x2b0>)
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0a9b      	lsrs	r3, r3, #10
 800121e:	b29b      	uxth	r3, r3
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	b29b      	uxth	r3, r3
 8001224:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001228:	b29b      	uxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <DrawChar+0x2b0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4942      	ldr	r1, [pc, #264]	; (800133c <DrawChar+0x2b0>)
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	440b      	add	r3, r1
 8001238:	3304      	adds	r3, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0cdb      	lsrs	r3, r3, #19
 800123e:	b29b      	uxth	r3, r3
 8001240:	02db      	lsls	r3, r3, #11
 8001242:	b29b      	uxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	33c0      	adds	r3, #192	; 0xc0
 8001250:	443b      	add	r3, r7
 8001252:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800125a:	3301      	adds	r3, #1
 800125c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001260:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001268:	429a      	cmp	r2, r3
 800126a:	d384      	bcc.n	8001176 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	1c4b      	adds	r3, r1, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001276:	2301      	movs	r3, #1
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fb34 	bl	80008ec <UTIL_LCD_FillRGBRect>
 8001284:	e048      	b.n	8001318 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800128c:	e032      	b.n	80012f4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800128e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001296:	1ad2      	subs	r2, r2, r3
 8001298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800129c:	4413      	add	r3, r2
 800129e:	3b01      	subs	r3, #1
 80012a0:	2201      	movs	r2, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00d      	beq.n	80012ce <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <DrawChar+0x2b0>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <DrawChar+0x2b0>)
 80012b8:	015b      	lsls	r3, r3, #5
 80012ba:	4413      	add	r3, r2
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	33c0      	adds	r3, #192	; 0xc0
 80012c6:	443b      	add	r3, r7
 80012c8:	f843 2cac 	str.w	r2, [r3, #-172]
 80012cc:	e00d      	b.n	80012ea <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <DrawChar+0x2b0>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <DrawChar+0x2b0>)
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	33c0      	adds	r3, #192	; 0xc0
 80012e4:	443b      	add	r3, r7
 80012e6:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80012ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3c6      	bcc.n	800128e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	1c4b      	adds	r3, r1, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	f107 0214 	add.w	r2, r7, #20
 800130a:	2301      	movs	r3, #1
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff faea 	bl	80008ec <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800131c:	3301      	adds	r3, #1
 800131e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800132a:	429a      	cmp	r2, r3
 800132c:	f4ff aedc 	bcc.w	80010e8 <DrawChar+0x5c>
    }
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	37c0      	adds	r7, #192	; 0xc0
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	240001c4 	.word	0x240001c4

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_MspInit+0x74>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_MspInit+0x74>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_MspInit+0x74>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	210f      	movs	r1, #15
 8001368:	f06f 0001 	mvn.w	r0, #1
 800136c:	f002 ff4d 	bl	800420a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_MspInit+0x74>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_MspInit+0x74>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x74>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800138e:	2308      	movs	r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <HAL_MspInit+0x78>)
 80013a6:	f004 fef9 	bl	800619c <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58021000 	.word	0x58021000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f002 fdf6 	bl	8003fdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013f0:	f00a fd28 	bl	800be44 <xTaskGetSchedulerState>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013fa:	f00a fd8d 	bl	800bf18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}

08001402 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 fe2c 	bl	8002064 <BSP_PB_IRQHandler>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM3_IRQHandler+0x10>)
 8001416:	f009 fa25 	bl	800a864 <HAL_TIM_IRQHandler>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000170 	.word	0x24000170

08001424 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <USART3_IRQHandler+0x10>)
 800142a:	f009 fd7b 	bl	800af24 <HAL_UART_IRQHandler>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	240000dc 	.word	0x240000dc

08001438 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fe23 	bl	8002088 <BSP_AUDIO_OUT_IRQHandler>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <DMA2_Stream4_IRQHandler+0x14>)
 800144e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fc72 	bl	8004d3c <HAL_DMA_IRQHandler>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	240002e4 	.word	0x240002e4

08001460 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001464:	2130      	movs	r1, #48	; 0x30
 8001466:	2001      	movs	r0, #1
 8001468:	f000 fe22 	bl	80020b0 <BSP_AUDIO_IN_IRQHandler>

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001474:	2000      	movs	r0, #0
 8001476:	f002 fa0d 	bl	8003894 <BSP_SDRAM_IRQHandler>

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}

0800147e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  return 1;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_kill>:

int _kill(int pid, int sig)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001498:	f00c fbfa 	bl	800dc90 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	2216      	movs	r2, #22
 80014a0:	601a      	str	r2, [r3, #0]
  return -1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_exit>:

void _exit (int status)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffe7 	bl	800148e <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c0:	e7fe      	b.n	80014c0 <_exit+0x12>
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f00c fbcc 	bl	800dc90 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24080000 	.word	0x24080000
 8001524:	00000400 	.word	0x00000400
 8001528:	24000230 	.word	0x24000230
 800152c:	24001648 	.word	0x24001648

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <SystemInit+0xe4>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a36      	ldr	r2, [pc, #216]	; (8001614 <SystemInit+0xe4>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <SystemInit+0xe8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	d807      	bhi.n	8001560 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <SystemInit+0xe8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 030f 	bic.w	r3, r3, #15
 8001558:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <SystemInit+0xe8>)
 800155a:	f043 0307 	orr.w	r3, r3, #7
 800155e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <SystemInit+0xec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2d      	ldr	r2, [pc, #180]	; (800161c <SystemInit+0xec>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <SystemInit+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <SystemInit+0xec>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4929      	ldr	r1, [pc, #164]	; (800161c <SystemInit+0xec>)
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <SystemInit+0xf0>)
 800157a:	4013      	ands	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <SystemInit+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <SystemInit+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 030f 	bic.w	r3, r3, #15
 8001592:	4a21      	ldr	r2, [pc, #132]	; (8001618 <SystemInit+0xe8>)
 8001594:	f043 0307 	orr.w	r3, r3, #7
 8001598:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <SystemInit+0xec>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <SystemInit+0xec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <SystemInit+0xec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <SystemInit+0xec>)
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <SystemInit+0xf4>)
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <SystemInit+0xec>)
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <SystemInit+0xf8>)
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <SystemInit+0xec>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <SystemInit+0xfc>)
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <SystemInit+0xec>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <SystemInit+0xec>)
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <SystemInit+0xfc>)
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <SystemInit+0xec>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <SystemInit+0xec>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <SystemInit+0xfc>)
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <SystemInit+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <SystemInit+0xec>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <SystemInit+0xec>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <SystemInit+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <SystemInit+0x100>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <SystemInit+0x104>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015fa:	d202      	bcs.n	8001602 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <SystemInit+0x108>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <SystemInit+0x10c>)
 8001604:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001608:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	52002000 	.word	0x52002000
 800161c:	58024400 	.word	0x58024400
 8001620:	eaf6ed7f 	.word	0xeaf6ed7f
 8001624:	02020200 	.word	0x02020200
 8001628:	01ff0000 	.word	0x01ff0000
 800162c:	01010280 	.word	0x01010280
 8001630:	5c001000 	.word	0x5c001000
 8001634:	ffff0000 	.word	0xffff0000
 8001638:	51008108 	.word	0x51008108
 800163c:	52004000 	.word	0x52004000

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001644:	f7ff ff74 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	; (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f00c fb15 	bl	800dc9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7fe fe85 	bl	8000380 <main>
  bx  lr
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800167c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001680:	240000c0 	.word	0x240000c0
  ldr r2, =_sidata
 8001684:	08011ab8 	.word	0x08011ab8
  ldr r2, =_sbss
 8001688:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 800168c:	24001648 	.word	0x24001648

08001690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e02c      	b.n	8001706 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	891a      	ldrh	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <FT5336_RegisterBusIO+0x7c>)
 80016e0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <FT5336_RegisterBusIO+0x80>)
 80016e6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4798      	blx	r3
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	e002      	b.n	8001706 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001704:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08001b0d 	.word	0x08001b0d
 8001714:	08001b41 	.word	0x08001b41

08001718 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2205      	movs	r2, #5
 8001732:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800173a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001742:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f987 	bl	8001a82 <FT5336_DisableIT>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d103      	bne.n	80017b8 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f103 0218 	add.w	r2, r3, #24
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f000 fa25 	bl	8001c2e <ft5336_radian_value>
 80017e4:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f103 0218 	add.w	r2, r3, #24
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	4610      	mov	r0, r2
 80017f6:	f000 fa2b 	bl	8001c50 <ft5336_offset_left_right>
 80017fa:	4602      	mov	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 0218 	add.w	r2, r3, #24
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f000 fa2e 	bl	8001c72 <ft5336_offset_up_down>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f103 0218 	add.w	r2, r3, #24
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f000 fa31 	bl	8001c94 <ft5336_disatnce_left_right>
 8001832:	4602      	mov	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 0218 	add.w	r2, r3, #24
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f000 fa34 	bl	8001cb6 <ft5336_distance_up_down>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f103 0218 	add.w	r2, r3, #24
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 fa37 	bl	8001cd8 <ft5336_distance_zoom>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3318      	adds	r3, #24
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fa3f 	bl	8001d1c <ft5336_chip_id>
 800189e:	4603      	mov	r3, r0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f908 	bl	8001acc <FT5336_DetectTouch>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f103 0018 	add.w	r0, r3, #24
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	2304      	movs	r3, #4
 80018d0:	2103      	movs	r1, #3
 80018d2:	f000 f94f 	bl	8001b74 <ft5336_read_reg>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00f      	b.n	8001904 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80018e4:	7a3b      	ldrb	r3, [r7, #8]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018ec:	7a7a      	ldrb	r2, [r7, #9]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018fc:	7afa      	ldrb	r2, [r7, #11]
 80018fe:	431a      	orrs	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b08c      	sub	sp, #48	; 0x30
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f8d5 	bl	8001acc <FT5336_DetectTouch>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f103 0018 	add.w	r0, r3, #24
 8001930:	f107 0208 	add.w	r2, r7, #8
 8001934:	231e      	movs	r3, #30
 8001936:	2103      	movs	r1, #3
 8001938:	f000 f91c 	bl	8001b74 <ft5336_read_reg>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001948:	e077      	b.n	8001a3a <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
 800194e:	e071      	b.n	8001a34 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	3330      	adds	r3, #48	; 0x30
 800195c:	443b      	add	r3, r7
 800195e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	3301      	adds	r3, #1
 8001974:	3330      	adds	r3, #48	; 0x30
 8001976:	443b      	add	r3, r7
 8001978:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800197c:	ea41 0203 	orr.w	r2, r1, r3
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	3302      	adds	r3, #2
 8001996:	3330      	adds	r3, #48	; 0x30
 8001998:	443b      	add	r3, r7
 800199a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80019a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	3303      	adds	r3, #3
 80019b0:	3330      	adds	r3, #48	; 0x30
 80019b2:	443b      	add	r3, r7
 80019b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b8:	4319      	orrs	r1, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	3206      	adds	r2, #6
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80019c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	3330      	adds	r3, #48	; 0x30
 80019d0:	443b      	add	r3, r7
 80019d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d6:	099b      	lsrs	r3, r3, #6
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e0:	3210      	adds	r2, #16
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80019e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	3304      	adds	r3, #4
 80019f2:	3330      	adds	r3, #48	; 0x30
 80019f4:	443b      	add	r3, r7
 80019f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019fa:	4619      	mov	r1, r3
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	330a      	adds	r3, #10
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8001a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	3305      	adds	r3, #5
 8001a14:	3330      	adds	r3, #48	; 0x30
 8001a16:	443b      	add	r3, r7
 8001a18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	3314      	adds	r3, #20
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	3301      	adds	r3, #1
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d98a      	bls.n	8001950 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3730      	adds	r7, #48	; 0x30
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3318      	adds	r3, #24
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f8bb 	bl	8001bd0 <ft5336_gest_id>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3318      	adds	r3, #24
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f941 	bl	8001cfa <ft5336_g_mode>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f932 	bl	8001cfa <ft5336_g_mode>
 8001a96:	4603      	mov	r3, r0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3318      	adds	r3, #24
 8001ad8:	f107 020b 	add.w	r2, r7, #11
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f886 	bl	8001bf0 <ft5336_td_status>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e007      	b.n	8001b02 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d902      	bls.n	8001afe <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e001      	b.n	8001b02 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	72fb      	strb	r3, [r7, #11]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	691c      	ldr	r4, [r3, #16]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	8918      	ldrh	r0, [r3, #8]
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	893b      	ldrh	r3, [r7, #8]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	47a0      	blx	r4
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}

08001b40 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	72fb      	strb	r3, [r7, #11]
 8001b50:	4613      	mov	r3, r2
 8001b52:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	68dc      	ldr	r4, [r3, #12]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	8918      	ldrh	r0, [r3, #8]
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	47a0      	blx	r4
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	72fb      	strb	r3, [r7, #11]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685c      	ldr	r4, [r3, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6898      	ldr	r0, [r3, #8]
 8001b90:	893b      	ldrh	r3, [r7, #8]
 8001b92:	7af9      	ldrb	r1, [r7, #11]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	47a0      	blx	r4
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}

08001ba2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	461a      	mov	r2, r3
 8001bae:	460b      	mov	r3, r1
 8001bb0:	72fb      	strb	r3, [r7, #11]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681c      	ldr	r4, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6898      	ldr	r0, [r3, #8]
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	7af9      	ldrb	r1, [r7, #11]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	47a0      	blx	r4
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8001bda:	2301      	movs	r3, #1
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffc7 	bl	8001b74 <ft5336_read_reg>
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	2102      	movs	r1, #2
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffb7 	bl	8001b74 <ft5336_read_reg>
 8001c06:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8001c3a:	1cfa      	adds	r2, r7, #3
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	2191      	movs	r1, #145	; 0x91
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ffae 	bl	8001ba2 <ft5336_write_reg>
 8001c46:	4603      	mov	r3, r0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8001c5c:	1cfa      	adds	r2, r7, #3
 8001c5e:	2301      	movs	r3, #1
 8001c60:	2192      	movs	r1, #146	; 0x92
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff9d 	bl	8001ba2 <ft5336_write_reg>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8001c7e:	1cfa      	adds	r2, r7, #3
 8001c80:	2301      	movs	r3, #1
 8001c82:	2193      	movs	r1, #147	; 0x93
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff8c 	bl	8001ba2 <ft5336_write_reg>
 8001c8a:	4603      	mov	r3, r0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8001ca0:	1cfa      	adds	r2, r7, #3
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2194      	movs	r1, #148	; 0x94
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff7b 	bl	8001ba2 <ft5336_write_reg>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8001cc2:	1cfa      	adds	r2, r7, #3
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2195      	movs	r1, #149	; 0x95
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff6a 	bl	8001ba2 <ft5336_write_reg>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8001ce4:	1cfa      	adds	r2, r7, #3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2196      	movs	r1, #150	; 0x96
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff59 	bl	8001ba2 <ft5336_write_reg>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8001d06:	1cfa      	adds	r2, r7, #3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	21a4      	movs	r1, #164	; 0xa4
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff48 	bl	8001ba2 <ft5336_write_reg>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001d26:	2301      	movs	r3, #1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	21a8      	movs	r1, #168	; 0xa8
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff21 	bl	8001b74 <ft5336_read_reg>
 8001d32:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d62:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f832 	bl	8001dd4 <MT48LC4M32B2_ClockEnable>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d128      	bne.n	8001dc8 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 f8e2 	bl	8001f40 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f84a 	bl	8001e1c <MT48LC4M32B2_Precharge>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11c      	bne.n	8001dc8 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f897 	bl	8001ecc <MT48LC4M32B2_RefreshMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d111      	bne.n	8001dc8 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f85c 	bl	8001e64 <MT48LC4M32B2_ModeRegConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8ad 	bl	8001f18 <MT48LC4M32B2_RefreshRate>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MT48LC4M32B2_ClockEnable+0x44>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <MT48LC4M32B2_ClockEnable+0x44>)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MT48LC4M32B2_ClockEnable+0x44>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MT48LC4M32B2_ClockEnable+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfa:	4907      	ldr	r1, [pc, #28]	; (8001e18 <MT48LC4M32B2_ClockEnable+0x44>)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f008 fc0d 	bl	800a61c <HAL_SDRAM_SendCommand>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0c:	e000      	b.n	8001e10 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001e0e:	2300      	movs	r3, #0
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	24000234 	.word	0x24000234

08001e1c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MT48LC4M32B2_Precharge+0x44>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <MT48LC4M32B2_Precharge+0x44>)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MT48LC4M32B2_Precharge+0x44>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MT48LC4M32B2_Precharge+0x44>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e42:	4907      	ldr	r1, [pc, #28]	; (8001e60 <MT48LC4M32B2_Precharge+0x44>)
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f008 fbe9 	bl	800a61c <HAL_SDRAM_SendCommand>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e54:	e000      	b.n	8001e58 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001e56:	2300      	movs	r3, #0
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	24000234 	.word	0x24000234

08001e64 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001e76:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001e7c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001e82:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001e8e:	2204      	movs	r2, #4
 8001e90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001e98:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eaa:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f008 fbb5 	bl	800a61c <HAL_SDRAM_SendCommand>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ebc:	e000      	b.n	8001ec0 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001ebe:	2300      	movs	r3, #0
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	24000234 	.word	0x24000234

08001ecc <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <MT48LC4M32B2_RefreshMode+0x48>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <MT48LC4M32B2_RefreshMode+0x48>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MT48LC4M32B2_RefreshMode+0x48>)
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <MT48LC4M32B2_RefreshMode+0x48>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <MT48LC4M32B2_RefreshMode+0x48>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f008 fb90 	bl	800a61c <HAL_SDRAM_SendCommand>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f06:	e000      	b.n	8001f0a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001f08:	2300      	movs	r3, #0
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000234 	.word	0x24000234

08001f18 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f008 fbae 	bl	800a686 <HAL_SDRAM_ProgramRefreshRate>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f34:	e000      	b.n	8001f38 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001f36:	2300      	movs	r3, #0
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001f48:	f002 f85c 	bl	8004004 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001f4e:	bf00      	nop
 8001f50:	f002 f858 	bl	8004004 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <BSP_LED_Init+0xb0>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a25      	ldr	r2, [pc, #148]	; (800201c <BSP_LED_Init+0xb0>)
 8001f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <BSP_LED_Init+0xb0>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	e015      	b.n	8001fcc <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10f      	bne.n	8001fc6 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <BSP_LED_Init+0xb0>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <BSP_LED_Init+0xb0>)
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <BSP_LED_Init+0xb0>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	e002      	b.n	8001fcc <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fc6:	f06f 0301 	mvn.w	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <BSP_LED_Init+0xb4>)
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <BSP_LED_Init+0xb8>)
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	f107 0210 	add.w	r2, r7, #16
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f8d3 	bl	800619c <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <BSP_LED_Init+0xb8>)
 8001ffa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <BSP_LED_Init+0xb4>)
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	b29b      	uxth	r3, r3
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	f004 fb80 	bl	8006710 <HAL_GPIO_WritePin>
  return ret;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8002012:	4618      	mov	r0, r3
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	58024400 	.word	0x58024400
 8002020:	080118b0 	.word	0x080118b0
 8002024:	24000048 	.word	0x24000048

08002028 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <BSP_LED_On+0x34>)
 800203a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <BSP_LED_On+0x38>)
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	b29b      	uxth	r3, r3
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f004 fb60 	bl	8006710 <HAL_GPIO_WritePin>
  return ret;
 8002050:	68fb      	ldr	r3, [r7, #12]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	24000048 	.word	0x24000048
 8002060:	080118b0 	.word	0x080118b0

08002064 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <BSP_PB_IRQHandler+0x20>)
 8002074:	4413      	add	r3, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f860 	bl	800613c <HAL_EXTI_IRQHandler>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	24000244 	.word	0x24000244

08002088 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8002098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fe4d 	bl	8004d3c <HAL_DMA_IRQHandler>
  }
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2400024c 	.word	0x2400024c

080020b0 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b30      	cmp	r3, #48	; 0x30
 80020be:	d002      	beq.n	80020c6 <BSP_AUDIO_IN_IRQHandler+0x16>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fe35 	bl	8004d3c <HAL_DMA_IRQHandler>
  }

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	240002e4 	.word	0x240002e4

080020e0 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <BSP_I2C4_Init+0x64>)
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <BSP_I2C4_Init+0x68>)
 80020ee:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <BSP_I2C4_Init+0x6c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d11f      	bne.n	8002138 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <BSP_I2C4_Init+0x6c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <BSP_I2C4_Init+0x6c>)
 8002100:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002102:	4810      	ldr	r0, [pc, #64]	; (8002144 <BSP_I2C4_Init+0x64>)
 8002104:	f004 fe20 	bl	8006d48 <HAL_I2C_GetState>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800210e:	480d      	ldr	r0, [pc, #52]	; (8002144 <BSP_I2C4_Init+0x64>)
 8002110:	f000 fb60 	bl	80027d4 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002114:	f006 feb8 	bl	8008e88 <HAL_RCC_GetPCLK2Freq>
 8002118:	4603      	mov	r3, r0
 800211a:	490d      	ldr	r1, [pc, #52]	; (8002150 <BSP_I2C4_Init+0x70>)
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f8e3 	bl	80022e8 <I2C_GetTiming>
 8002122:	4603      	mov	r3, r0
 8002124:	4619      	mov	r1, r3
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <BSP_I2C4_Init+0x64>)
 8002128:	f000 f838 	bl	800219c <MX_I2C4_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002132:	f06f 0307 	mvn.w	r3, #7
 8002136:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	24000d84 	.word	0x24000d84
 8002148:	58001c00 	.word	0x58001c00
 800214c:	2400037c 	.word	0x2400037c
 8002150:	000186a0 	.word	0x000186a0

08002154 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <BSP_I2C4_DeInit+0x40>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <BSP_I2C4_DeInit+0x40>)
 8002166:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <BSP_I2C4_DeInit+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10b      	bne.n	8002188 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002170:	4809      	ldr	r0, [pc, #36]	; (8002198 <BSP_I2C4_DeInit+0x44>)
 8002172:	f000 fb9b 	bl	80028ac <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002176:	4808      	ldr	r0, [pc, #32]	; (8002198 <BSP_I2C4_DeInit+0x44>)
 8002178:	f004 fb74 	bl	8006864 <HAL_I2C_DeInit>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002182:	f06f 0307 	mvn.w	r3, #7
 8002186:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2400037c 	.word	0x2400037c
 8002198:	24000d84 	.word	0x24000d84

0800219c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 fab2 	bl	8006744 <HAL_I2C_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e014      	b.n	8002216 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 f87a 	bl	80072ec <HAL_I2CEx_ConfigAnalogFilter>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e008      	b.n	8002216 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002204:	2100      	movs	r1, #0
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f005 f8bb 	bl	8007382 <HAL_I2CEx_ConfigDigitalFilter>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af02      	add	r7, sp, #8
 8002226:	60ba      	str	r2, [r7, #8]
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	81fb      	strh	r3, [r7, #14]
 800222e:	460b      	mov	r3, r1
 8002230:	81bb      	strh	r3, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002236:	89b9      	ldrh	r1, [r7, #12]
 8002238:	89f8      	ldrh	r0, [r7, #14]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2201      	movs	r2, #1
 8002242:	f000 fb57 	bl	80028f4 <I2C4_WriteReg>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e00c      	b.n	800226c <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <BSP_I2C4_WriteReg+0x58>)
 8002254:	f004 fd86 	bl	8006d64 <HAL_I2C_GetError>
 8002258:	4603      	mov	r3, r0
 800225a:	2b04      	cmp	r3, #4
 800225c:	d103      	bne.n	8002266 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800225e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e002      	b.n	800226c <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002266:	f06f 0303 	mvn.w	r3, #3
 800226a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800226c:	697b      	ldr	r3, [r7, #20]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24000d84 	.word	0x24000d84

0800227c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60ba      	str	r2, [r7, #8]
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	81fb      	strh	r3, [r7, #14]
 800228a:	460b      	mov	r3, r1
 800228c:	81bb      	strh	r3, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002292:	89b9      	ldrh	r1, [r7, #12]
 8002294:	89f8      	ldrh	r0, [r7, #14]
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2201      	movs	r2, #1
 800229e:	f000 fb4f 	bl	8002940 <I2C4_ReadReg>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e00c      	b.n	80022c8 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80022ae:	4809      	ldr	r0, [pc, #36]	; (80022d4 <BSP_I2C4_ReadReg+0x58>)
 80022b0:	f004 fd58 	bl	8006d64 <HAL_I2C_GetError>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d103      	bne.n	80022c2 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80022ba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e002      	b.n	80022c8 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80022c2:	f06f 0303 	mvn.w	r3, #3
 80022c6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80022c8:	697b      	ldr	r3, [r7, #20]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	24000d84 	.word	0x24000d84

080022d8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80022dc:	f001 fe92 	bl	8004004 <HAL_GetTick>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d06b      	beq.n	80023d4 <I2C_GetTiming+0xec>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d068      	beq.n	80023d4 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e060      	b.n	80023ca <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002308:	4a35      	ldr	r2, [pc, #212]	; (80023e0 <I2C_GetTiming+0xf8>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d352      	bcc.n	80023c4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800231e:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <I2C_GetTiming+0xf8>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3308      	adds	r3, #8
 800232c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d847      	bhi.n	80023c4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002334:	6939      	ldr	r1, [r7, #16]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f856 	bl	80023e8 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f940 	bl	80025c4 <I2C_Compute_SCLL_SCLH>
 8002344:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b7f      	cmp	r3, #127	; 0x7f
 800234a:	d842      	bhi.n	80023d2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800234c:	4925      	ldr	r1, [pc, #148]	; (80023e4 <I2C_GetTiming+0xfc>)
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800235e:	4821      	ldr	r0, [pc, #132]	; (80023e4 <I2C_GetTiming+0xfc>)
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4403      	add	r3, r0
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	051b      	lsls	r3, r3, #20
 8002372:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002376:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002378:	481a      	ldr	r0, [pc, #104]	; (80023e4 <I2C_GetTiming+0xfc>)
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4403      	add	r3, r0
 8002386:	3308      	adds	r3, #8
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002390:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <I2C_GetTiming+0xfc>)
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	330c      	adds	r3, #12
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80023a8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <I2C_GetTiming+0xfc>)
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4403      	add	r3, r0
 80023b8:	3310      	adds	r3, #16
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80023be:	430b      	orrs	r3, r1
 80023c0:	617b      	str	r3, [r7, #20]
        }
        break;
 80023c2:	e006      	b.n	80023d2 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	3301      	adds	r3, #1
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d99b      	bls.n	8002308 <I2C_GetTiming+0x20>
 80023d0:	e000      	b.n	80023d4 <I2C_GetTiming+0xec>
        break;
 80023d2:	bf00      	nop
      }
    }
  }

  return ret;
 80023d4:	697b      	ldr	r3, [r7, #20]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	080118b8 	.word	0x080118b8
 80023e4:	24000380 	.word	0x24000380

080023e8 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b08f      	sub	sp, #60	; 0x3c
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80023f2:	2310      	movs	r3, #16
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	085a      	lsrs	r2, r3, #1
 80023fa:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80023fc:	4413      	add	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	fbb3 f3f2 	udiv	r3, r3, r2
 8002404:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002406:	2332      	movs	r3, #50	; 0x32
 8002408:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800240a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800240e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002410:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3324      	adds	r3, #36	; 0x24
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	330c      	adds	r3, #12
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002434:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002436:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002438:	495f      	ldr	r1, [pc, #380]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	202c      	movs	r0, #44	; 0x2c
 800243e:	fb00 f303 	mul.w	r3, r0, r3
 8002442:	440b      	add	r3, r1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3303      	adds	r3, #3
 800244a:	69f9      	ldr	r1, [r7, #28]
 800244c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3310      	adds	r3, #16
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3320      	adds	r3, #32
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002478:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800247a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800247c:	494e      	ldr	r1, [pc, #312]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	202c      	movs	r0, #44	; 0x2c
 8002482:	fb00 f303 	mul.w	r3, r0, r3
 8002486:	440b      	add	r3, r1
 8002488:	3328      	adds	r3, #40	; 0x28
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3304      	adds	r3, #4
 800248e:	69f9      	ldr	r1, [r7, #28]
 8002490:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002498:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3320      	adds	r3, #32
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3314      	adds	r3, #20
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4403      	add	r3, r0
 80024bc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	dc01      	bgt.n	80024c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dc01      	bgt.n	80024d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	e062      	b.n	800259e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e059      	b.n	8002592 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	3301      	adds	r3, #1
 80024e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e4:	3201      	adds	r2, #1
 80024e6:	fb03 f202 	mul.w	r2, r3, r2
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d348      	bcc.n	800258c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	e042      	b.n	8002586 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	3301      	adds	r3, #1
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	fb03 f202 	mul.w	r2, r3, r2
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d332      	bcc.n	8002580 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d82e      	bhi.n	8002580 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	429a      	cmp	r2, r3
 8002528:	d02a      	beq.n	8002580 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4924      	ldr	r1, [pc, #144]	; (80025c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	491f      	ldr	r1, [pc, #124]	; (80025c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3304      	adds	r3, #4
 8002550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002552:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4919      	ldr	r1, [pc, #100]	; (80025c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3308      	adds	r3, #8
 8002566:	6a3a      	ldr	r2, [r7, #32]
 8002568:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002576:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b7f      	cmp	r3, #127	; 0x7f
 800257e:	d812      	bhi.n	80025a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	3301      	adds	r3, #1
 8002584:	623b      	str	r3, [r7, #32]
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d9b9      	bls.n	8002500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3301      	adds	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d9a2      	bls.n	80024de <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	3301      	adds	r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d999      	bls.n	80024d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80025a4:	e000      	b.n	80025a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80025a6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80025a8:	373c      	adds	r7, #60	; 0x3c
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	3b9aca00 	.word	0x3b9aca00
 80025b8:	080118b8 	.word	0x080118b8
 80025bc:	24000d80 	.word	0x24000d80
 80025c0:	24000380 	.word	0x24000380

080025c4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b093      	sub	sp, #76	; 0x4c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	085a      	lsrs	r2, r3, #1
 80025d8:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <I2C_Compute_SCLL_SCLH+0x200>)
 80025da:	4413      	add	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80025e4:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	085a      	lsrs	r2, r3, #1
 80025f4:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <I2C_Compute_SCLL_SCLH+0x200>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4973      	ldr	r1, [pc, #460]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	202c      	movs	r0, #44	; 0x2c
 80025fe:	fb00 f202 	mul.w	r2, r0, r2
 8002602:	440a      	add	r2, r1
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	fbb3 f3f2 	udiv	r3, r3, r2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800260c:	2332      	movs	r3, #50	; 0x32
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002610:	4a6d      	ldr	r2, [pc, #436]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3328      	adds	r3, #40	; 0x28
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a62      	ldr	r2, [pc, #392]	; (80027c4 <I2C_Compute_SCLL_SCLH+0x200>)
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002640:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3308      	adds	r3, #8
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <I2C_Compute_SCLL_SCLH+0x200>)
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800265c:	2300      	movs	r3, #0
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
 8002660:	e0a3      	b.n	80027aa <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002662:	495a      	ldr	r1, [pc, #360]	; (80027cc <I2C_Compute_SCLL_SCLH+0x208>)
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002680:	e08c      	b.n	800279c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	441a      	add	r2, r3
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	3301      	adds	r3, #1
 800268c:	6979      	ldr	r1, [r7, #20]
 800268e:	fb03 f101 	mul.w	r1, r3, r1
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	4413      	add	r3, r2
 800269a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800269c:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3318      	adds	r3, #24
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d971      	bls.n	8002796 <I2C_Compute_SCLL_SCLH+0x1d2>
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d268      	bcs.n	8002796 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c8:	e062      	b.n	8002790 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	441a      	add	r2, r3
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	3301      	adds	r3, #1
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	fb03 f101 	mul.w	r1, r3, r1
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	440b      	add	r3, r1
 80026e0:	4413      	add	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	441a      	add	r2, r3
 80026ea:	4937      	ldr	r1, [pc, #220]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	440b      	add	r3, r1
 80026f6:	3320      	adds	r3, #32
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	441a      	add	r2, r3
 80026fc:	4932      	ldr	r1, [pc, #200]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	202c      	movs	r0, #44	; 0x2c
 8002702:	fb00 f303 	mul.w	r3, r0, r3
 8002706:	440b      	add	r3, r1
 8002708:	3324      	adds	r3, #36	; 0x24
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4413      	add	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	429a      	cmp	r2, r3
 8002716:	d338      	bcc.n	800278a <I2C_Compute_SCLL_SCLH+0x1c6>
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	429a      	cmp	r2, r3
 800271e:	d834      	bhi.n	800278a <I2C_Compute_SCLL_SCLH+0x1c6>
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <I2C_Compute_SCLL_SCLH+0x204>)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	331c      	adds	r3, #28
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	429a      	cmp	r2, r3
 8002734:	d329      	bcc.n	800278a <I2C_Compute_SCLL_SCLH+0x1c6>
 8002736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	429a      	cmp	r2, r3
 800273c:	d225      	bcs.n	800278a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2b00      	cmp	r3, #0
 800274a:	da02      	bge.n	8002752 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	425b      	negs	r3, r3
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002756:	429a      	cmp	r2, r3
 8002758:	d917      	bls.n	800278a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800275e:	491b      	ldr	r1, [pc, #108]	; (80027cc <I2C_Compute_SCLL_SCLH+0x208>)
 8002760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3310      	adds	r3, #16
 800276e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002770:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002772:	4916      	ldr	r1, [pc, #88]	; (80027cc <I2C_Compute_SCLL_SCLH+0x208>)
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	330c      	adds	r3, #12
 8002782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002784:	601a      	str	r2, [r3, #0]
              ret = count;
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	3301      	adds	r3, #1
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	2bff      	cmp	r3, #255	; 0xff
 8002794:	d999      	bls.n	80026ca <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002798:	3301      	adds	r3, #1
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	f67f af6f 	bls.w	8002682 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	3301      	adds	r3, #1
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <I2C_Compute_SCLL_SCLH+0x20c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f4ff af56 	bcc.w	8002662 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80027b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	374c      	adds	r7, #76	; 0x4c
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	3b9aca00 	.word	0x3b9aca00
 80027c8:	080118b8 	.word	0x080118b8
 80027cc:	24000380 	.word	0x24000380
 80027d0:	24000d80 	.word	0x24000d80

080027d4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <I2C4_MspInit+0xd0>)
 80027de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e2:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <I2C4_MspInit+0xd0>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <I2C4_MspInit+0xd0>)
 80027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <I2C4_MspInit+0xd0>)
 80027fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <I2C4_MspInit+0xd0>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <I2C4_MspInit+0xd0>)
 800280c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800281e:	2312      	movs	r3, #18
 8002820:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002826:	2302      	movs	r3, #2
 8002828:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800282a:	2304      	movs	r3, #4
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	481c      	ldr	r0, [pc, #112]	; (80028a8 <I2C4_MspInit+0xd4>)
 8002836:	f003 fcb1 	bl	800619c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002848:	2302      	movs	r3, #2
 800284a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800284c:	2304      	movs	r3, #4
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4814      	ldr	r0, [pc, #80]	; (80028a8 <I2C4_MspInit+0xd4>)
 8002858:	f003 fca0 	bl	800619c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <I2C4_MspInit+0xd0>)
 800285e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <I2C4_MspInit+0xd0>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002868:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <I2C4_MspInit+0xd0>)
 800286e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <I2C4_MspInit+0xd0>)
 800287c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002880:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <I2C4_MspInit+0xd0>)
 8002882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002886:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <I2C4_MspInit+0xd0>)
 800288c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <I2C4_MspInit+0xd0>)
 8002892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002896:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58020c00 	.word	0x58020c00

080028ac <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4619      	mov	r1, r3
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <I2C4_MspDeInit+0x40>)
 80028c0:	f003 fe1c 	bl	80064fc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80028c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4807      	ldr	r0, [pc, #28]	; (80028ec <I2C4_MspDeInit+0x40>)
 80028d0:	f003 fe14 	bl	80064fc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <I2C4_MspDeInit+0x44>)
 80028d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <I2C4_MspDeInit+0x44>)
 80028dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58020c00 	.word	0x58020c00
 80028f0:	58024400 	.word	0x58024400

080028f4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	4603      	mov	r3, r0
 80028fe:	81fb      	strh	r3, [r7, #14]
 8002900:	460b      	mov	r3, r1
 8002902:	81bb      	strh	r3, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002908:	8978      	ldrh	r0, [r7, #10]
 800290a:	89ba      	ldrh	r2, [r7, #12]
 800290c:	89f9      	ldrh	r1, [r7, #14]
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	8b3b      	ldrh	r3, [r7, #24]
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4603      	mov	r3, r0
 800291e:	4807      	ldr	r0, [pc, #28]	; (800293c <I2C4_WriteReg+0x48>)
 8002920:	f003 ffe4 	bl	80068ec <HAL_I2C_Mem_Write>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800292a:	2300      	movs	r3, #0
 800292c:	e001      	b.n	8002932 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800292e:	f06f 0307 	mvn.w	r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	24000d84 	.word	0x24000d84

08002940 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af04      	add	r7, sp, #16
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	4603      	mov	r3, r0
 800294a:	81fb      	strh	r3, [r7, #14]
 800294c:	460b      	mov	r3, r1
 800294e:	81bb      	strh	r3, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002954:	8978      	ldrh	r0, [r7, #10]
 8002956:	89ba      	ldrh	r2, [r7, #12]
 8002958:	89f9      	ldrh	r1, [r7, #14]
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	8b3b      	ldrh	r3, [r7, #24]
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	4603      	mov	r3, r0
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <I2C4_ReadReg+0x48>)
 800296c:	f004 f8d2 	bl	8006b14 <HAL_I2C_Mem_Read>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	e001      	b.n	800297e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800297a:	f06f 0307 	mvn.w	r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	24000d84 	.word	0x24000d84

0800298c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002996:	f44f 7388 	mov.w	r3, #272	; 0x110
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029a0:	2200      	movs	r2, #0
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f805 	bl	80029b4 <BSP_LCD_InitEx>
 80029aa:	4603      	mov	r3, r0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	; 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d808      	bhi.n	80029e2 <BSP_LCD_InitEx+0x2e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <BSP_LCD_InitEx+0x2e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d006      	beq.n	80029ea <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029e2:	f06f 0301 	mvn.w	r3, #1
 80029e6:	677b      	str	r3, [r7, #116]	; 0x74
 80029e8:	e0a8      	b.n	8002b3c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d109      	bne.n	8002a04 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80029f0:	2302      	movs	r3, #2
 80029f2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4413      	add	r3, r2
 80029fc:	3310      	adds	r3, #16
 80029fe:	2202      	movs	r2, #2
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e008      	b.n	8002a16 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a04:	2300      	movs	r3, #0
 8002a06:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	4413      	add	r3, r2
 8002a10:	3310      	adds	r3, #16
 8002a12:	2204      	movs	r2, #4
 8002a14:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002a16:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	4413      	add	r3, r2
 8002a1e:	330c      	adds	r3, #12
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002a24:	4a48      	ldr	r2, [pc, #288]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015b      	lsls	r3, r3, #5
 8002a2a:	4413      	add	r3, r2
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8002a30:	4a45      	ldr	r2, [pc, #276]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015b      	lsls	r3, r3, #5
 8002a36:	4413      	add	r3, r2
 8002a38:	3304      	adds	r3, #4
 8002a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002a40:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <BSP_LCD_InitEx+0x198>)
 8002a42:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <BSP_LCD_InitEx+0x19c>)
 8002a44:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <BSP_LCD_InitEx+0x1a0>)
 8002a48:	4a43      	ldr	r2, [pc, #268]	; (8002b58 <BSP_LCD_InitEx+0x1a4>)
 8002a4a:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002a4c:	483f      	ldr	r0, [pc, #252]	; (8002b4c <BSP_LCD_InitEx+0x198>)
 8002a4e:	f000 fd1b 	bl	8003488 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002a52:	4840      	ldr	r0, [pc, #256]	; (8002b54 <BSP_LCD_InitEx+0x1a0>)
 8002a54:	f000 fde4 	bl	8003620 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <BSP_LCD_InitEx+0x1a8>)
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002a5c:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <BSP_LCD_InitEx+0x1ac>)
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002a60:	2370      	movs	r3, #112	; 0x70
 8002a62:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002a64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fe10 	bl	8001694 <FT5336_RegisterBusIO>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	da03      	bge.n	8002a82 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a7a:	f06f 0304 	mvn.w	r3, #4
 8002a7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a80:	e02b      	b.n	8002ada <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002a82:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002a86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fefb 	bl	8001888 <FT5336_ReadID>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da03      	bge.n	8002aa0 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a98:	f06f 0304 	mvn.w	r3, #4
 8002a9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002a9e:	e01c      	b.n	8002ada <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa2:	2b51      	cmp	r3, #81	; 0x51
 8002aa4:	d003      	beq.n	8002aae <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002aa6:	f06f 0306 	mvn.w	r3, #6
 8002aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8002aac:	e015      	b.n	8002ada <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8002aae:	4827      	ldr	r0, [pc, #156]	; (8002b4c <BSP_LCD_InitEx+0x198>)
 8002ab0:	f000 f8e8 	bl	8002c84 <MX_LTDC_ClockConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002aba:	f06f 0303 	mvn.w	r3, #3
 8002abe:	677b      	str	r3, [r7, #116]	; 0x74
 8002ac0:	e00b      	b.n	8002ada <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4820      	ldr	r0, [pc, #128]	; (8002b4c <BSP_LCD_InitEx+0x198>)
 8002aca:	f000 f84d 	bl	8002b68 <MX_LTDC_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002ad4:	f06f 0303 	mvn.w	r3, #3
 8002ad8:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8002ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d12d      	bne.n	8002b3c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f000 fe2f 	bl	8003744 <BSP_SDRAM_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002aec:	f06f 0303 	mvn.w	r3, #3
 8002af0:	e025      	b.n	8002b3e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8002afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b02:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002b08:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	461a      	mov	r2, r3
 8002b14:	2100      	movs	r1, #0
 8002b16:	480d      	ldr	r0, [pc, #52]	; (8002b4c <BSP_LCD_InitEx+0x198>)
 8002b18:	f000 f872 	bl	8002c00 <MX_LTDC_ConfigLayer>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002b22:	f06f 0303 	mvn.w	r3, #3
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002b28:	480e      	ldr	r0, [pc, #56]	; (8002b64 <BSP_LCD_InitEx+0x1b0>)
 8002b2a:	f000 fde1 	bl	80036f0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002b2e:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <BSP_LCD_InitEx+0x194>)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015b      	lsls	r3, r3, #5
 8002b34:	4413      	add	r3, r2
 8002b36:	3318      	adds	r3, #24
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3778      	adds	r7, #120	; 0x78
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	24000f34 	.word	0x24000f34
 8002b4c:	24000e8c 	.word	0x24000e8c
 8002b50:	50001000 	.word	0x50001000
 8002b54:	24000e24 	.word	0x24000e24
 8002b58:	52001000 	.word	0x52001000
 8002b5c:	080020e1 	.word	0x080020e1
 8002b60:	0800227d 	.word	0x0800227d
 8002b64:	24000dd8 	.word	0x24000dd8

08002b68 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <MX_LTDC_Init+0x94>)
 8002b78:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2228      	movs	r2, #40	; 0x28
 8002b96:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	222a      	movs	r2, #42	; 0x2a
 8002b9c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2209      	movs	r2, #9
 8002bb6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	220b      	movs	r2, #11
 8002bbc:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f103 020b 	add.w	r2, r3, #11
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 020d 	add.w	r2, r3, #13
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f004 fc16 	bl	800741c <HAL_LTDC_Init>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	50001000 	.word	0x50001000

08002c00 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b092      	sub	sp, #72	; 0x48
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8002c2a:	23ff      	movs	r3, #255	; 0xff
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4619      	mov	r1, r3
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f004 fcab 	bl	80075d0 <HAL_LTDC_ConfigLayer>
 8002c7a:	4603      	mov	r3, r0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3748      	adds	r7, #72	; 0x48
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0b2      	sub	sp, #200	; 0xc8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002c8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002c98:	2305      	movs	r3, #5
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002c9c:	23a0      	movs	r3, #160	; 0xa0
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002ca8:	2353      	movs	r3, #83	; 0x53
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f006 f8fb 	bl	8008eb4 <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	37c8      	adds	r7, #200	; 0xc8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002cdc:	f06f 0301 	mvn.w	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	e007      	b.n	8002cf4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <BSP_LCD_GetPixelFormat+0x3c>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	015b      	lsls	r3, r3, #5
 8002cea:	4413      	add	r3, r2
 8002cec:	330c      	adds	r3, #12
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	24000f34 	.word	0x24000f34

08002d08 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d1c:	f06f 0301 	mvn.w	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e006      	b.n	8002d32 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <BSP_LCD_SetActiveLayer+0x38>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	015b      	lsls	r3, r3, #5
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	24000f34 	.word	0x24000f34

08002d44 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d58:	f06f 0301 	mvn.w	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e006      	b.n	8002d6e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <BSP_LCD_GetXSize+0x38>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	4413      	add	r3, r2
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	24000f34 	.word	0x24000f34

08002d80 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d94:	f06f 0301 	mvn.w	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e007      	b.n	8002dac <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <BSP_LCD_GetYSize+0x3c>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	015b      	lsls	r3, r3, #5
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	24000f34 	.word	0x24000f34

08002dc0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	; 0x38
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	330a      	adds	r3, #10
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	330b      	adds	r3, #11
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	441a      	add	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	041b      	lsls	r3, r3, #16
 8002dec:	441a      	add	r2, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	330d      	adds	r3, #13
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4413      	add	r3, r2
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	3312      	adds	r3, #18
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	3313      	adds	r3, #19
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	441a      	add	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	441a      	add	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3315      	adds	r3, #21
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4413      	add	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3316      	adds	r3, #22
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3317      	adds	r3, #23
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	441a      	add	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3318      	adds	r3, #24
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	441a      	add	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3319      	adds	r3, #25
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	331c      	adds	r3, #28
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	331d      	adds	r3, #29
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	4413      	add	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002e5e:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <BSP_LCD_DrawBitmap+0x17c>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	4413      	add	r3, r2
 8002e66:	3308      	adds	r3, #8
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <BSP_LCD_DrawBitmap+0x180>)
 8002e6c:	2134      	movs	r1, #52	; 0x34
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	335c      	adds	r3, #92	; 0x5c
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4930      	ldr	r1, [pc, #192]	; (8002f3c <BSP_LCD_DrawBitmap+0x17c>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015b      	lsls	r3, r3, #5
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	fb03 f101 	mul.w	r1, r3, r1
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	440b      	add	r3, r1
 8002e8c:	482b      	ldr	r0, [pc, #172]	; (8002f3c <BSP_LCD_DrawBitmap+0x17c>)
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	0149      	lsls	r1, r1, #5
 8002e92:	4401      	add	r1, r0
 8002e94:	3110      	adds	r1, #16
 8002e96:	6809      	ldr	r1, [r1, #0]
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	3b20      	subs	r3, #32
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	d802      	bhi.n	8002eae <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002eac:	e008      	b.n	8002ec0 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3b10      	subs	r3, #16
 8002eb2:	2b07      	cmp	r3, #7
 8002eb4:	d802      	bhi.n	8002ebc <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	e001      	b.n	8002ec0 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	08d2      	lsrs	r2, r2, #3
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	4413      	add	r3, r2
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	e023      	b.n	8002f2a <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa77 	bl	80033e0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <BSP_LCD_DrawBitmap+0x17c>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	4413      	add	r3, r2
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	490f      	ldr	r1, [pc, #60]	; (8002f3c <BSP_LCD_DrawBitmap+0x17c>)
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	0152      	lsls	r2, r2, #5
 8002f02:	440a      	add	r2, r1
 8002f04:	3210      	adds	r2, #16
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f0e:	4413      	add	r3, r2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	4413      	add	r3, r2
 8002f22:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	3301      	adds	r3, #1
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3d7      	bcc.n	8002ee2 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002f32:	69fb      	ldr	r3, [r7, #28]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	24000f34 	.word	0x24000f34
 8002f40:	24000e8c 	.word	0x24000e8c

08002f44 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e032      	b.n	8002fc2 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e028      	b.n	8002fb4 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	431a      	orrs	r2, r3
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	3303      	adds	r3, #3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	18d1      	adds	r1, r2, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	441a      	add	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f95e 	bl	8003258 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <BSP_LCD_FillRGBRect+0x90>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4413      	add	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3d2      	bcc.n	8002f62 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3c8      	bcc.n	8002f5c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	24000f34 	.word	0x24000f34

08002fd8 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <BSP_LCD_DrawHLine+0x94>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015b      	lsls	r3, r3, #5
 8002fec:	4413      	add	r3, r2
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <BSP_LCD_DrawHLine+0x98>)
 8002ff4:	2134      	movs	r1, #52	; 0x34
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	335c      	adds	r3, #92	; 0x5c
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	491a      	ldr	r1, [pc, #104]	; (800306c <BSP_LCD_DrawHLine+0x94>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	440b      	add	r3, r1
 8003008:	3310      	adds	r3, #16
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4817      	ldr	r0, [pc, #92]	; (800306c <BSP_LCD_DrawHLine+0x94>)
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	0149      	lsls	r1, r1, #5
 8003012:	4401      	add	r1, r0
 8003014:	6809      	ldr	r1, [r1, #0]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	fb01 f000 	mul.w	r0, r1, r0
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4401      	add	r1, r0
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	441a      	add	r2, r3
 800302e:	490f      	ldr	r1, [pc, #60]	; (800306c <BSP_LCD_DrawHLine+0x94>)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	440b      	add	r3, r1
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d907      	bls.n	800304c <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <BSP_LCD_DrawHLine+0x94>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	4413      	add	r3, r2
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2301      	movs	r3, #1
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f956 	bl	800330c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	24000f34 	.word	0x24000f34
 8003070:	24000e8c 	.word	0x24000e8c

08003074 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8003082:	4a24      	ldr	r2, [pc, #144]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4413      	add	r3, r2
 800308a:	3308      	adds	r3, #8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <BSP_LCD_DrawVLine+0xa4>)
 8003090:	2134      	movs	r1, #52	; 0x34
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	335c      	adds	r3, #92	; 0x5c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	491d      	ldr	r1, [pc, #116]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015b      	lsls	r3, r3, #5
 80030a2:	440b      	add	r3, r1
 80030a4:	3310      	adds	r3, #16
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	481a      	ldr	r0, [pc, #104]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	0149      	lsls	r1, r1, #5
 80030ae:	4401      	add	r1, r0
 80030b0:	6809      	ldr	r1, [r1, #0]
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	fb01 f000 	mul.w	r0, r1, r0
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4401      	add	r1, r0
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	441a      	add	r2, r3
 80030ca:	4912      	ldr	r1, [pc, #72]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	440b      	add	r3, r1
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d908      	bls.n	80030ec <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	015b      	lsls	r3, r3, #5
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <BSP_LCD_DrawVLine+0xa0>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015b      	lsls	r3, r3, #5
 80030f4:	4413      	add	r3, r2
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	9201      	str	r2, [sp, #4]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f901 	bl	800330c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	24000f34 	.word	0x24000f34
 8003118:	24000e8c 	.word	0x24000e8c

0800311c <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <BSP_LCD_FillRect+0x7c>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	4413      	add	r3, r2
 8003132:	3308      	adds	r3, #8
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <BSP_LCD_FillRect+0x80>)
 8003138:	2134      	movs	r1, #52	; 0x34
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	335c      	adds	r3, #92	; 0x5c
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4914      	ldr	r1, [pc, #80]	; (8003198 <BSP_LCD_FillRect+0x7c>)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015b      	lsls	r3, r3, #5
 800314a:	440b      	add	r3, r1
 800314c:	3310      	adds	r3, #16
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4811      	ldr	r0, [pc, #68]	; (8003198 <BSP_LCD_FillRect+0x7c>)
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	0149      	lsls	r1, r1, #5
 8003156:	4401      	add	r1, r0
 8003158:	6809      	ldr	r1, [r1, #0]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	fb01 f000 	mul.w	r0, r1, r0
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4401      	add	r1, r0
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <BSP_LCD_FillRect+0x7c>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	4413      	add	r3, r2
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8c0 	bl	800330c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	24000f34 	.word	0x24000f34
 800319c:	24000e8c 	.word	0x24000e8c

080031a0 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80031ae:	4a28      	ldr	r2, [pc, #160]	; (8003250 <BSP_LCD_ReadPixel+0xb0>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	015b      	lsls	r3, r3, #5
 80031b4:	4413      	add	r3, r2
 80031b6:	3308      	adds	r3, #8
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <BSP_LCD_ReadPixel+0xb4>)
 80031bc:	2134      	movs	r1, #52	; 0x34
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3348      	adds	r3, #72	; 0x48
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11c      	bne.n	8003206 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <BSP_LCD_ReadPixel+0xb0>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015b      	lsls	r3, r3, #5
 80031d2:	4413      	add	r3, r2
 80031d4:	3308      	adds	r3, #8
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <BSP_LCD_ReadPixel+0xb4>)
 80031da:	2134      	movs	r1, #52	; 0x34
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	335c      	adds	r3, #92	; 0x5c
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	491a      	ldr	r1, [pc, #104]	; (8003250 <BSP_LCD_ReadPixel+0xb0>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	440b      	add	r3, r1
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	fb03 f101 	mul.w	r1, r3, r1
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	440b      	add	r3, r1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e01d      	b.n	8003242 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <BSP_LCD_ReadPixel+0xb0>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	015b      	lsls	r3, r3, #5
 800320c:	4413      	add	r3, r2
 800320e:	3308      	adds	r3, #8
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <BSP_LCD_ReadPixel+0xb4>)
 8003214:	2134      	movs	r1, #52	; 0x34
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	490b      	ldr	r1, [pc, #44]	; (8003250 <BSP_LCD_ReadPixel+0xb0>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015b      	lsls	r3, r3, #5
 8003226:	440b      	add	r3, r1
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	fb03 f101 	mul.w	r1, r3, r1
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	440b      	add	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	24000f34 	.word	0x24000f34
 8003254:	24000e8c 	.word	0x24000e8c

08003258 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003266:	4a27      	ldr	r2, [pc, #156]	; (8003304 <BSP_LCD_WritePixel+0xac>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	4413      	add	r3, r2
 800326e:	3308      	adds	r3, #8
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a25      	ldr	r2, [pc, #148]	; (8003308 <BSP_LCD_WritePixel+0xb0>)
 8003274:	2134      	movs	r1, #52	; 0x34
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3348      	adds	r3, #72	; 0x48
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11c      	bne.n	80032be <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <BSP_LCD_WritePixel+0xac>)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015b      	lsls	r3, r3, #5
 800328a:	4413      	add	r3, r2
 800328c:	3308      	adds	r3, #8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <BSP_LCD_WritePixel+0xb0>)
 8003292:	2134      	movs	r1, #52	; 0x34
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4919      	ldr	r1, [pc, #100]	; (8003304 <BSP_LCD_WritePixel+0xac>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015b      	lsls	r3, r3, #5
 80032a4:	440b      	add	r3, r1
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	fb03 f101 	mul.w	r1, r3, r1
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	440b      	add	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	461a      	mov	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e01b      	b.n	80032f6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <BSP_LCD_WritePixel+0xac>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	4413      	add	r3, r2
 80032c6:	3308      	adds	r3, #8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <BSP_LCD_WritePixel+0xb0>)
 80032cc:	2134      	movs	r1, #52	; 0x34
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	335c      	adds	r3, #92	; 0x5c
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	490a      	ldr	r1, [pc, #40]	; (8003304 <BSP_LCD_WritePixel+0xac>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015b      	lsls	r3, r3, #5
 80032de:	440b      	add	r3, r1
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	fb03 f101 	mul.w	r1, r3, r1
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	440b      	add	r3, r1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b292      	uxth	r2, r2
 80032f4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	24000f34 	.word	0x24000f34
 8003308:	24000e8c 	.word	0x24000e8c

0800330c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <LL_FillBuffer+0xc8>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	4413      	add	r3, r2
 8003326:	330c      	adds	r3, #12
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d129      	bne.n	8003382 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800332e:	2302      	movs	r3, #2
 8003330:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	0adb      	lsrs	r3, r3, #11
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	3317      	adds	r3, #23
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	0419      	lsls	r1, r3, #16
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003352:	4613      	mov	r3, r2
 8003354:	01db      	lsls	r3, r3, #7
 8003356:	4413      	add	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	3321      	adds	r3, #33	; 0x21
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4319      	orrs	r1, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4413      	add	r3, r2
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	3317      	adds	r3, #23
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	430b      	orrs	r3, r1
 800337a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337e:	613b      	str	r3, [r7, #16]
    break;
 8003380:	e002      	b.n	8003388 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
    break;
 8003386:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <LL_FillBuffer+0xcc>)
 800338a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800338e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003390:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <LL_FillBuffer+0xcc>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <LL_FillBuffer+0xcc>)
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <LL_FillBuffer+0xcc>)
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <LL_FillBuffer+0xd0>)
 80033a0:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80033a2:	480d      	ldr	r0, [pc, #52]	; (80033d8 <LL_FillBuffer+0xcc>)
 80033a4:	f002 fbf4 	bl	8005b90 <HAL_DMA2D_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10e      	bne.n	80033cc <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6939      	ldr	r1, [r7, #16]
 80033b8:	4807      	ldr	r0, [pc, #28]	; (80033d8 <LL_FillBuffer+0xcc>)
 80033ba:	f002 fc57 	bl	8005c6c <HAL_DMA2D_Start>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80033c4:	2132      	movs	r1, #50	; 0x32
 80033c6:	4804      	ldr	r0, [pc, #16]	; (80033d8 <LL_FillBuffer+0xcc>)
 80033c8:	f002 fc7b 	bl	8005cc2 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	24000f34 	.word	0x24000f34
 80033d8:	24000e24 	.word	0x24000e24
 80033dc:	52001000 	.word	0x52001000

080033e0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <LL_ConvertLineToRGB+0x9c>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015b      	lsls	r3, r3, #5
 80033f4:	4413      	add	r3, r2
 80033f6:	330c      	adds	r3, #12
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d102      	bne.n	8003404 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80033fe:	2302      	movs	r3, #2
 8003400:	617b      	str	r3, [r7, #20]
    break;
 8003402:	e002      	b.n	800340a <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
    break;
 8003408:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 800340c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003410:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003412:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003420:	2200      	movs	r2, #0
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <LL_ConvertLineToRGB+0xa4>)
 800343a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800343c:	4810      	ldr	r0, [pc, #64]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 800343e:	f002 fba7 	bl	8005b90 <HAL_DMA2D_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d115      	bne.n	8003474 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003448:	2101      	movs	r1, #1
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 800344c:	f002 fd22 	bl	8005e94 <HAL_DMA2D_ConfigLayer>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10e      	bne.n	8003474 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	2301      	movs	r3, #1
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	4807      	ldr	r0, [pc, #28]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003462:	f002 fc03 	bl	8005c6c <HAL_DMA2D_Start>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d103      	bne.n	8003474 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800346c:	2132      	movs	r1, #50	; 0x32
 800346e:	4804      	ldr	r0, [pc, #16]	; (8003480 <LL_ConvertLineToRGB+0xa0>)
 8003470:	f002 fc27 	bl	8005cc2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	24000f34 	.word	0x24000f34
 8003480:	24000e24 	.word	0x24000e24
 8003484:	52001000 	.word	0x52001000

08003488 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <LTDC_MspInit+0x17c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f040 80b0 	bne.w	80035fc <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <LTDC_MspInit+0x180>)
 800349e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034a2:	4a59      	ldr	r2, [pc, #356]	; (8003608 <LTDC_MspInit+0x180>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <LTDC_MspInit+0x180>)
 80034ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034ba:	4b53      	ldr	r3, [pc, #332]	; (8003608 <LTDC_MspInit+0x180>)
 80034bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c0:	4a51      	ldr	r2, [pc, #324]	; (8003608 <LTDC_MspInit+0x180>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ca:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <LTDC_MspInit+0x180>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80034d8:	4b4b      	ldr	r3, [pc, #300]	; (8003608 <LTDC_MspInit+0x180>)
 80034da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034de:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <LTDC_MspInit+0x180>)
 80034e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <LTDC_MspInit+0x180>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80034f6:	4b44      	ldr	r3, [pc, #272]	; (8003608 <LTDC_MspInit+0x180>)
 80034f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fc:	4a42      	ldr	r2, [pc, #264]	; (8003608 <LTDC_MspInit+0x180>)
 80034fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <LTDC_MspInit+0x180>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <LTDC_MspInit+0x180>)
 8003516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351a:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <LTDC_MspInit+0x180>)
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003524:	4b38      	ldr	r3, [pc, #224]	; (8003608 <LTDC_MspInit+0x180>)
 8003526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <LTDC_MspInit+0x180>)
 8003534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003538:	4a33      	ldr	r2, [pc, #204]	; (8003608 <LTDC_MspInit+0x180>)
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <LTDC_MspInit+0x180>)
 8003544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003550:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800355e:	2302      	movs	r3, #2
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003562:	230e      	movs	r3, #14
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356a:	4619      	mov	r1, r3
 800356c:	4827      	ldr	r0, [pc, #156]	; (800360c <LTDC_MspInit+0x184>)
 800356e:	f002 fe15 	bl	800619c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8003572:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003578:	230e      	movs	r3, #14
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800357c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	4823      	ldr	r0, [pc, #140]	; (8003610 <LTDC_MspInit+0x188>)
 8003584:	f002 fe0a 	bl	800619c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003588:	23ff      	movs	r3, #255	; 0xff
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800358c:	230e      	movs	r3, #14
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	481f      	ldr	r0, [pc, #124]	; (8003614 <LTDC_MspInit+0x18c>)
 8003598:	f002 fe00 	bl	800619c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800359c:	f240 2302 	movw	r3, #514	; 0x202
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80035aa:	2302      	movs	r3, #2
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035ae:	230e      	movs	r3, #14
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	4817      	ldr	r0, [pc, #92]	; (8003618 <LTDC_MspInit+0x190>)
 80035ba:	f002 fdef 	bl	800619c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035c2:	2301      	movs	r3, #1
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80035c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ca:	4619      	mov	r1, r3
 80035cc:	4813      	ldr	r0, [pc, #76]	; (800361c <LTDC_MspInit+0x194>)
 80035ce:	f002 fde5 	bl	800619c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80035d2:	2201      	movs	r2, #1
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	4811      	ldr	r0, [pc, #68]	; (800361c <LTDC_MspInit+0x194>)
 80035d8:	f003 f89a 	bl	8006710 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <LTDC_MspInit+0x180>)
 80035de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <LTDC_MspInit+0x180>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <LTDC_MspInit+0x180>)
 80035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <LTDC_MspInit+0x180>)
 80035f4:	f023 0308 	bic.w	r3, r3, #8
 80035f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80035fc:	bf00      	nop
 80035fe:	3738      	adds	r7, #56	; 0x38
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	50001000 	.word	0x50001000
 8003608:	58024400 	.word	0x58024400
 800360c:	58022000 	.word	0x58022000
 8003610:	58022400 	.word	0x58022400
 8003614:	58022800 	.word	0x58022800
 8003618:	58021c00 	.word	0x58021c00
 800361c:	58020c00 	.word	0x58020c00

08003620 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <DMA2D_MspInit+0x54>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d11a      	bne.n	8003668 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <DMA2D_MspInit+0x58>)
 8003634:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <DMA2D_MspInit+0x58>)
 800363a:	f043 0310 	orr.w	r3, r3, #16
 800363e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <DMA2D_MspInit+0x58>)
 8003644:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <DMA2D_MspInit+0x58>)
 8003652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003654:	4a08      	ldr	r2, [pc, #32]	; (8003678 <DMA2D_MspInit+0x58>)
 8003656:	f043 0310 	orr.w	r3, r3, #16
 800365a:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <DMA2D_MspInit+0x58>)
 800365e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003660:	4a05      	ldr	r2, [pc, #20]	; (8003678 <DMA2D_MspInit+0x58>)
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	52001000 	.word	0x52001000
 8003678:	58024400 	.word	0x58024400

0800367c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 8003686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368a:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 800368c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 8003696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 80036a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <TIMx_PWM_MspInit+0x6c>)
 80036b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80036c8:	2301      	movs	r3, #1
 80036ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 80036cc:	2303      	movs	r3, #3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4619      	mov	r1, r3
 80036da:	4804      	ldr	r0, [pc, #16]	; (80036ec <TIMx_PWM_MspInit+0x70>)
 80036dc:	f002 fd5e 	bl	800619c <HAL_GPIO_Init>
}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	58024400 	.word	0x58024400
 80036ec:	58022800 	.word	0x58022800

080036f0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <TIMx_PWM_Init+0x50>)
 80036fc:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f007 f840 	bl	800a784 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffb9 	bl	800367c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003716:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f006 ffd0 	bl	800a6d6 <HAL_TIM_PWM_Init>
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40010400 	.word	0x40010400

08003744 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003756:	f06f 0301 	mvn.w	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e044      	b.n	80037e8 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2234      	movs	r2, #52	; 0x34
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <BSP_SDRAM_Init+0xb0>)
 8003768:	4413      	add	r3, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f8a8 	bl	80038c0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2234      	movs	r2, #52	; 0x34
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <BSP_SDRAM_Init+0xb0>)
 800377a:	4413      	add	r3, r2
 800377c:	2210      	movs	r2, #16
 800377e:	2104      	movs	r1, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f83b 	bl	80037fc <MX_SDRAM_BANK2_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e029      	b.n	80037e8 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 8003796:	2208      	movs	r2, #8
 8003798:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800379a:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 800379c:	2203      	movs	r2, #3
 800379e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037a2:	f240 6203 	movw	r2, #1539	; 0x603
 80037a6:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037b6:	2230      	movs	r2, #48	; 0x30
 80037b8:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c6:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2234      	movs	r2, #52	; 0x34
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <BSP_SDRAM_Init+0xb0>)
 80037d2:	4413      	add	r3, r2
 80037d4:	4908      	ldr	r1, [pc, #32]	; (80037f8 <BSP_SDRAM_Init+0xb4>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fabc 	bl	8001d54 <MT48LC4M32B2_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80037e2:	f06f 0304 	mvn.w	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80037e8:	68fb      	ldr	r3, [r7, #12]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	24000f54 	.word	0x24000f54
 80037f8:	24000f88 	.word	0x24000f88

080037fc <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	; 0x30
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <MX_SDRAM_BANK2_Init+0x90>)
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <MX_SDRAM_BANK2_Init+0x94>)
 800380c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <MX_SDRAM_BANK2_Init+0x90>)
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003832:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003850:	2302      	movs	r3, #2
 8003852:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003854:	2307      	movs	r3, #7
 8003856:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003858:	2304      	movs	r3, #4
 800385a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800385c:	2307      	movs	r3, #7
 800385e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003860:	2302      	movs	r3, #2
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003864:	2302      	movs	r3, #2
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003868:	2302      	movs	r3, #2
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4619      	mov	r1, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f006 fe8c 	bl	800a590 <HAL_SDRAM_Init>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	; 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	24000f54 	.word	0x24000f54
 8003890:	52004140 	.word	0x52004140

08003894 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 800389c:	4a07      	ldr	r2, [pc, #28]	; (80038bc <BSP_SDRAM_IRQHandler+0x28>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2134      	movs	r1, #52	; 0x34
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3330      	adds	r3, #48	; 0x30
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f004 f90b 	bl	8007ac8 <HAL_MDMA_IRQHandler>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	24000f54 	.word	0x24000f54

080038c0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08e      	sub	sp, #56	; 0x38
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038c8:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038ce:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038ec:	4a6a      	ldr	r2, [pc, #424]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80038f6:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 80038f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003904:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	4a63      	ldr	r2, [pc, #396]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 800390c:	f043 0308 	orr.w	r3, r3, #8
 8003910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003914:	4b60      	ldr	r3, [pc, #384]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003928:	4a5b      	ldr	r2, [pc, #364]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003940:	4b55      	ldr	r3, [pc, #340]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003946:	4a54      	ldr	r2, [pc, #336]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003948:	f043 0320 	orr.w	r3, r3, #32
 800394c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800395e:	4b4e      	ldr	r3, [pc, #312]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <SDRAM_MspInit+0x1d8>)
 800398e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800399a:	2302      	movs	r3, #2
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800399e:	2301      	movs	r3, #1
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a2:	2303      	movs	r3, #3
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80039a6:	230c      	movs	r3, #12
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80039aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80039b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b4:	4619      	mov	r1, r3
 80039b6:	4839      	ldr	r0, [pc, #228]	; (8003a9c <SDRAM_MspInit+0x1dc>)
 80039b8:	f002 fbf0 	bl	800619c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80039bc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	4835      	ldr	r0, [pc, #212]	; (8003aa0 <SDRAM_MspInit+0x1e0>)
 80039ca:	f002 fbe7 	bl	800619c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80039ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80039d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d8:	4619      	mov	r1, r3
 80039da:	4832      	ldr	r0, [pc, #200]	; (8003aa4 <SDRAM_MspInit+0x1e4>)
 80039dc:	f002 fbde 	bl	800619c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80039e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ea:	4619      	mov	r1, r3
 80039ec:	482e      	ldr	r0, [pc, #184]	; (8003aa8 <SDRAM_MspInit+0x1e8>)
 80039ee:	f002 fbd5 	bl	800619c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80039f2:	23e0      	movs	r3, #224	; 0xe0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80039f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fa:	4619      	mov	r1, r3
 80039fc:	482b      	ldr	r0, [pc, #172]	; (8003aac <SDRAM_MspInit+0x1ec>)
 80039fe:	f002 fbcd 	bl	800619c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a08:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a10:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a20:	f240 2202 	movw	r2, #514	; 0x202
 8003a24:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a28:	f640 0208 	movw	r2, #2056	; 0x808
 8003a2c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a30:	2220      	movs	r2, #32
 8003a32:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8003a4e:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <SDRAM_MspInit+0x1f4>)
 8003a64:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <SDRAM_MspInit+0x1f8>)
 8003a68:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <SDRAM_MspInit+0x1f8>)
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003a72:	480f      	ldr	r0, [pc, #60]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a74:	f003 ffd0 	bl	8007a18 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003a78:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <SDRAM_MspInit+0x1f0>)
 8003a7a:	f003 ff81 	bl	8007980 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	210f      	movs	r1, #15
 8003a82:	207a      	movs	r0, #122	; 0x7a
 8003a84:	f000 fbc1 	bl	800420a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003a88:	207a      	movs	r0, #122	; 0x7a
 8003a8a:	f000 fbd8 	bl	800423e <HAL_NVIC_EnableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3738      	adds	r7, #56	; 0x38
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	58020c00 	.word	0x58020c00
 8003aa0:	58021000 	.word	0x58021000
 8003aa4:	58021400 	.word	0x58021400
 8003aa8:	58021800 	.word	0x58021800
 8003aac:	58021c00 	.word	0x58021c00
 8003ab0:	24000fa8 	.word	0x24000fa8
 8003ab4:	52000040 	.word	0x52000040
 8003ab8:	24000f54 	.word	0x24000f54

08003abc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11c      	bne.n	8003b0a <BSP_TS_Init+0x4e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <BSP_TS_Init+0x4e>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003ae0:	d813      	bhi.n	8003b0a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003af2:	d80a      	bhi.n	8003b0a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	428b      	cmp	r3, r1
 8003b02:	bf28      	it	cs
 8003b04:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d903      	bls.n	8003b12 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b0a:	f06f 0301 	mvn.w	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e06e      	b.n	8003bf0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f98c 	bl	8003e30 <FT5336_Probe>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e064      	b.n	8003bf0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4934      	ldr	r1, [pc, #208]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	440b      	add	r3, r1
 8003b32:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4930      	ldr	r1, [pc, #192]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	440b      	add	r3, r1
 8003b40:	3304      	adds	r3, #4
 8003b42:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	492c      	ldr	r1, [pc, #176]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	440b      	add	r3, r1
 8003b50:	3308      	adds	r3, #8
 8003b52:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	4928      	ldr	r1, [pc, #160]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	440b      	add	r3, r1
 8003b60:	330c      	adds	r3, #12
 8003b62:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <BSP_TS_Init+0x144>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4926      	ldr	r1, [pc, #152]	; (8003c04 <BSP_TS_Init+0x148>)
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b72:	f107 010c 	add.w	r1, r7, #12
 8003b76:	4610      	mov	r0, r2
 8003b78:	4798      	blx	r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da03      	bge.n	8003b88 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b80:	f06f 0304 	mvn.w	r3, #4
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e033      	b.n	8003bf0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	491c      	ldr	r1, [pc, #112]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	440b      	add	r3, r1
 8003b92:	3310      	adds	r3, #16
 8003b94:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4918      	ldr	r1, [pc, #96]	; (8003bfc <BSP_TS_Init+0x140>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e01f      	b.n	8003bea <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	4811      	ldr	r0, [pc, #68]	; (8003bfc <BSP_TS_Init+0x140>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0119      	lsls	r1, r3, #4
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3306      	adds	r3, #6
 8003bc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	480a      	ldr	r0, [pc, #40]	; (8003bfc <BSP_TS_Init+0x140>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0119      	lsls	r1, r3, #4
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	440b      	add	r3, r1
 8003bdc:	330a      	adds	r3, #10
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4403      	add	r3, r0
 8003be2:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d9dc      	bls.n	8003baa <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2400101c 	.word	0x2400101c
 8003c00:	24001014 	.word	0x24001014
 8003c04:	24001018 	.word	0x24001018

08003c08 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c1c:	f06f 0301 	mvn.w	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	e0f9      	b.n	8003e18 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8003c24:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <BSP_TS_GetState+0x21c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	497f      	ldr	r1, [pc, #508]	; (8003e28 <BSP_TS_GetState+0x220>)
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c32:	f107 0108 	add.w	r1, r7, #8
 8003c36:	4610      	mov	r0, r2
 8003c38:	4798      	blx	r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da03      	bge.n	8003c48 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c40:	f06f 0304 	mvn.w	r3, #4
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e0e7      	b.n	8003e18 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80d1 	beq.w	8003df2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003c58:	4a74      	ldr	r2, [pc, #464]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	4413      	add	r3, r2
 8003c60:	3308      	adds	r3, #8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003c74:	4a6d      	ldr	r2, [pc, #436]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	019b      	lsls	r3, r3, #6
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003c88:	4a68      	ldr	r2, [pc, #416]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	4413      	add	r3, r2
 8003c90:	3310      	adds	r3, #16
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8003c9c:	4a63      	ldr	r2, [pc, #396]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3314      	adds	r3, #20
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	019b      	lsls	r3, r3, #6
 8003cc8:	4413      	add	r3, r2
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	4956      	ldr	r1, [pc, #344]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	019b      	lsls	r3, r3, #6
 8003cd8:	440b      	add	r3, r1
 8003cda:	3310      	adds	r3, #16
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003ce6:	4a51      	ldr	r2, [pc, #324]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	fb03 f202 	mul.w	r2, r3, r2
 8003cf8:	494c      	ldr	r1, [pc, #304]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	440b      	add	r3, r1
 8003d00:	3314      	adds	r3, #20
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4945      	ldr	r1, [pc, #276]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	019b      	lsls	r3, r3, #6
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3318      	adds	r3, #24
 8003d20:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d909      	bls.n	8003d3a <BSP_TS_GetState+0x132>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4940      	ldr	r1, [pc, #256]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	019b      	lsls	r3, r3, #6
 8003d30:	440b      	add	r3, r1
 8003d32:	3318      	adds	r3, #24
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	e008      	b.n	8003d4c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8003d3a:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	4413      	add	r3, r2
 8003d42:	3318      	adds	r3, #24
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003d4a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d4c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	4936      	ldr	r1, [pc, #216]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	440b      	add	r3, r1
 8003d5a:	332c      	adds	r3, #44	; 0x2c
 8003d5c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d909      	bls.n	8003d76 <BSP_TS_GetState+0x16e>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	440b      	add	r3, r1
 8003d6e:	332c      	adds	r3, #44	; 0x2c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	e008      	b.n	8003d88 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003d76:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	019b      	lsls	r3, r3, #6
 8003d7c:	4413      	add	r3, r2
 8003d7e:	332c      	adds	r3, #44	; 0x2c
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003d86:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003d88:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003d8a:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	4413      	add	r3, r2
 8003d92:	330c      	adds	r3, #12
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d808      	bhi.n	8003dae <BSP_TS_GetState+0x1a6>
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	4413      	add	r3, r2
 8003da4:	330c      	adds	r3, #12
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	491e      	ldr	r1, [pc, #120]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	019b      	lsls	r3, r3, #6
 8003db8:	440b      	add	r3, r1
 8003dba:	3318      	adds	r3, #24
 8003dbc:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	491a      	ldr	r1, [pc, #104]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	019b      	lsls	r3, r3, #6
 8003dc8:	440b      	add	r3, r1
 8003dca:	332c      	adds	r3, #44	; 0x2c
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e023      	b.n	8003e18 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3318      	adds	r3, #24
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	019b      	lsls	r3, r3, #6
 8003de6:	4413      	add	r3, r2
 8003de8:	332c      	adds	r3, #44	; 0x2c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	e012      	b.n	8003e18 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	4413      	add	r3, r2
 8003e00:	3318      	adds	r3, #24
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <BSP_TS_GetState+0x224>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	4413      	add	r3, r2
 8003e10:	332c      	adds	r3, #44	; 0x2c
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	24001014 	.word	0x24001014
 8003e28:	24001018 	.word	0x24001018
 8003e2c:	2400101c 	.word	0x2400101c

08003e30 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003e40:	2370      	movs	r3, #112	; 0x70
 8003e42:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <FT5336_Probe+0xa4>)
 8003e46:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <FT5336_Probe+0xa8>)
 8003e4a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <FT5336_Probe+0xac>)
 8003e4e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <FT5336_Probe+0xb0>)
 8003e52:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <FT5336_Probe+0xb4>)
 8003e56:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4822      	ldr	r0, [pc, #136]	; (8003ee8 <FT5336_Probe+0xb8>)
 8003e60:	f7fd fc18 	bl	8001694 <FT5336_RegisterBusIO>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003e6a:	f06f 0307 	mvn.w	r3, #7
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	e02a      	b.n	8003ec8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4619      	mov	r1, r3
 8003e78:	481b      	ldr	r0, [pc, #108]	; (8003ee8 <FT5336_Probe+0xb8>)
 8003e7a:	f7fd fd05 	bl	8001888 <FT5336_ReadID>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e84:	f06f 0304 	mvn.w	r3, #4
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	e01d      	b.n	8003ec8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b51      	cmp	r3, #81	; 0x51
 8003e90:	d003      	beq.n	8003e9a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003e92:	f06f 0306 	mvn.w	r3, #6
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
 8003e98:	e016      	b.n	8003ec8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <FT5336_Probe+0xbc>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4912      	ldr	r1, [pc, #72]	; (8003ee8 <FT5336_Probe+0xb8>)
 8003ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <FT5336_Probe+0xc0>)
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <FT5336_Probe+0xc4>)
 8003ea8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <FT5336_Probe+0xc0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <FT5336_Probe+0xbc>)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ec2:	f06f 0304 	mvn.w	r3, #4
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	080020e1 	.word	0x080020e1
 8003ed8:	08002155 	.word	0x08002155
 8003edc:	0800227d 	.word	0x0800227d
 8003ee0:	08002221 	.word	0x08002221
 8003ee4:	080022d9 	.word	0x080022d9
 8003ee8:	2400105c 	.word	0x2400105c
 8003eec:	24001018 	.word	0x24001018
 8003ef0:	24001014 	.word	0x24001014
 8003ef4:	24000018 	.word	0x24000018

08003ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efe:	2003      	movs	r0, #3
 8003f00:	f000 f978 	bl	80041f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f04:	f004 fe16 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_Init+0x68>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	4913      	ldr	r1, [pc, #76]	; (8003f64 <HAL_Init+0x6c>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f22:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_Init+0x68>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <HAL_Init+0x6c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_Init+0x70>)
 8003f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f3c:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <HAL_Init+0x74>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f42:	200f      	movs	r0, #15
 8003f44:	f000 f814 	bl	8003f70 <HAL_InitTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e002      	b.n	8003f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f52:	f7fd f9f5 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	58024400 	.word	0x58024400
 8003f64:	080118a0 	.word	0x080118a0
 8003f68:	24000014 	.word	0x24000014
 8003f6c:	24000010 	.word	0x24000010

08003f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_InitTick+0x60>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e021      	b.n	8003fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_InitTick+0x64>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_InitTick+0x60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f95d 	bl	800425a <HAL_SYSTICK_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00e      	b.n	8003fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d80a      	bhi.n	8003fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb8:	f000 f927 	bl	800420a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fbc:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <HAL_InitTick+0x68>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	24000054 	.word	0x24000054
 8003fd4:	24000010 	.word	0x24000010
 8003fd8:	24000050 	.word	0x24000050

08003fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x20>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_IncTick+0x24>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <HAL_IncTick+0x24>)
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	24000054 	.word	0x24000054
 8004000:	24001084 	.word	0x24001084

08004004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return uwTick;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_GetTick+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	24001084 	.word	0x24001084

0800401c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_GetREVID+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0c1b      	lsrs	r3, r3, #16
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	5c001000 	.word	0x5c001000

08004034 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_EnableCompensationCell+0x1c>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_EnableCompensationCell+0x1c>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6213      	str	r3, [r2, #32]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	58000400 	.word	0x58000400

08004054 <__NVIC_SetPriorityGrouping>:
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <__NVIC_SetPriorityGrouping+0x40>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004070:	4013      	ands	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <__NVIC_SetPriorityGrouping+0x44>)
 800407e:	4313      	orrs	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <__NVIC_SetPriorityGrouping+0x40>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00
 8004098:	05fa0000 	.word	0x05fa0000

0800409c <__NVIC_GetPriorityGrouping>:
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <__NVIC_GetPriorityGrouping+0x18>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	f003 0307 	and.w	r3, r3, #7
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <__NVIC_EnableIRQ>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	db0b      	blt.n	80040e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	f003 021f 	and.w	r2, r3, #31
 80040d0:	4907      	ldr	r1, [pc, #28]	; (80040f0 <__NVIC_EnableIRQ+0x38>)
 80040d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2001      	movs	r0, #1
 80040da:	fa00 f202 	lsl.w	r2, r0, r2
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e100 	.word	0xe000e100

080040f4 <__NVIC_SetPriority>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004104:	2b00      	cmp	r3, #0
 8004106:	db0a      	blt.n	800411e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	490c      	ldr	r1, [pc, #48]	; (8004140 <__NVIC_SetPriority+0x4c>)
 800410e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004112:	0112      	lsls	r2, r2, #4
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	440b      	add	r3, r1
 8004118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800411c:	e00a      	b.n	8004134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	4908      	ldr	r1, [pc, #32]	; (8004144 <__NVIC_SetPriority+0x50>)
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	3b04      	subs	r3, #4
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	440b      	add	r3, r1
 8004132:	761a      	strb	r2, [r3, #24]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000e100 	.word	0xe000e100
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <NVIC_EncodePriority>:
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f1c3 0307 	rsb	r3, r3, #7
 8004162:	2b04      	cmp	r3, #4
 8004164:	bf28      	it	cs
 8004166:	2304      	movcs	r3, #4
 8004168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3304      	adds	r3, #4
 800416e:	2b06      	cmp	r3, #6
 8004170:	d902      	bls.n	8004178 <NVIC_EncodePriority+0x30>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3b03      	subs	r3, #3
 8004176:	e000      	b.n	800417a <NVIC_EncodePriority+0x32>
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800417c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43da      	mvns	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	401a      	ands	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	43d9      	mvns	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	4313      	orrs	r3, r2
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c0:	d301      	bcc.n	80041c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041c2:	2301      	movs	r3, #1
 80041c4:	e00f      	b.n	80041e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <SysTick_Config+0x40>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ce:	210f      	movs	r1, #15
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d4:	f7ff ff8e 	bl	80040f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <SysTick_Config+0x40>)
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <SysTick_Config+0x40>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	e000e010 	.word	0xe000e010

080041f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff29 	bl	8004054 <__NVIC_SetPriorityGrouping>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	4603      	mov	r3, r0
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004218:	f7ff ff40 	bl	800409c <__NVIC_GetPriorityGrouping>
 800421c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	6978      	ldr	r0, [r7, #20]
 8004224:	f7ff ff90 	bl	8004148 <NVIC_EncodePriority>
 8004228:	4602      	mov	r2, r0
 800422a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff5f 	bl	80040f4 <__NVIC_SetPriority>
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff33 	bl	80040b8 <__NVIC_EnableIRQ>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ffa4 	bl	80041b0 <SysTick_Config>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff fec2 	bl	8004004 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e2dc      	b.n	8004846 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d008      	beq.n	80042aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e2cd      	b.n	8004846 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a76      	ldr	r2, [pc, #472]	; (8004488 <HAL_DMA_Abort+0x214>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04a      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a74      	ldr	r2, [pc, #464]	; (800448c <HAL_DMA_Abort+0x218>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d045      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a73      	ldr	r2, [pc, #460]	; (8004490 <HAL_DMA_Abort+0x21c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d040      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a71      	ldr	r2, [pc, #452]	; (8004494 <HAL_DMA_Abort+0x220>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d03b      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a70      	ldr	r2, [pc, #448]	; (8004498 <HAL_DMA_Abort+0x224>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d036      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_DMA_Abort+0x228>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6d      	ldr	r2, [pc, #436]	; (80044a0 <HAL_DMA_Abort+0x22c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d02c      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a6b      	ldr	r2, [pc, #428]	; (80044a4 <HAL_DMA_Abort+0x230>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d027      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_DMA_Abort+0x234>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a68      	ldr	r2, [pc, #416]	; (80044ac <HAL_DMA_Abort+0x238>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01d      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <HAL_DMA_Abort+0x23c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a65      	ldr	r2, [pc, #404]	; (80044b4 <HAL_DMA_Abort+0x240>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a64      	ldr	r2, [pc, #400]	; (80044b8 <HAL_DMA_Abort+0x244>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a62      	ldr	r2, [pc, #392]	; (80044bc <HAL_DMA_Abort+0x248>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a61      	ldr	r2, [pc, #388]	; (80044c0 <HAL_DMA_Abort+0x24c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_DMA_Abort+0xd6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5f      	ldr	r2, [pc, #380]	; (80044c4 <HAL_DMA_Abort+0x250>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_DMA_Abort+0xda>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_DMA_Abort+0xdc>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 021e 	bic.w	r2, r2, #30
 8004362:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004372:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e00a      	b.n	8004392 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 020e 	bic.w	r2, r2, #14
 800438a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3c      	ldr	r2, [pc, #240]	; (8004488 <HAL_DMA_Abort+0x214>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d072      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	; (800448c <HAL_DMA_Abort+0x218>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d06d      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a39      	ldr	r2, [pc, #228]	; (8004490 <HAL_DMA_Abort+0x21c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d068      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a37      	ldr	r2, [pc, #220]	; (8004494 <HAL_DMA_Abort+0x220>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d063      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a36      	ldr	r2, [pc, #216]	; (8004498 <HAL_DMA_Abort+0x224>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d05e      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a34      	ldr	r2, [pc, #208]	; (800449c <HAL_DMA_Abort+0x228>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d059      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <HAL_DMA_Abort+0x22c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d054      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a31      	ldr	r2, [pc, #196]	; (80044a4 <HAL_DMA_Abort+0x230>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04f      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <HAL_DMA_Abort+0x234>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a2e      	ldr	r2, [pc, #184]	; (80044ac <HAL_DMA_Abort+0x238>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <HAL_DMA_Abort+0x23c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <HAL_DMA_Abort+0x240>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <HAL_DMA_Abort+0x244>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <HAL_DMA_Abort+0x248>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <HAL_DMA_Abort+0x24c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <HAL_DMA_Abort+0x250>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_DMA_Abort+0x254>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <HAL_DMA_Abort+0x258>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_DMA_Abort+0x25c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <HAL_DMA_Abort+0x260>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <HAL_DMA_Abort+0x264>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <HAL_DMA_Abort+0x268>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_DMA_Abort+0x26c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_Abort+0x20e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_DMA_Abort+0x270>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d132      	bne.n	80044e8 <HAL_DMA_Abort+0x274>
 8004482:	2301      	movs	r3, #1
 8004484:	e031      	b.n	80044ea <HAL_DMA_Abort+0x276>
 8004486:	bf00      	nop
 8004488:	40020010 	.word	0x40020010
 800448c:	40020028 	.word	0x40020028
 8004490:	40020040 	.word	0x40020040
 8004494:	40020058 	.word	0x40020058
 8004498:	40020070 	.word	0x40020070
 800449c:	40020088 	.word	0x40020088
 80044a0:	400200a0 	.word	0x400200a0
 80044a4:	400200b8 	.word	0x400200b8
 80044a8:	40020410 	.word	0x40020410
 80044ac:	40020428 	.word	0x40020428
 80044b0:	40020440 	.word	0x40020440
 80044b4:	40020458 	.word	0x40020458
 80044b8:	40020470 	.word	0x40020470
 80044bc:	40020488 	.word	0x40020488
 80044c0:	400204a0 	.word	0x400204a0
 80044c4:	400204b8 	.word	0x400204b8
 80044c8:	58025408 	.word	0x58025408
 80044cc:	5802541c 	.word	0x5802541c
 80044d0:	58025430 	.word	0x58025430
 80044d4:	58025444 	.word	0x58025444
 80044d8:	58025458 	.word	0x58025458
 80044dc:	5802546c 	.word	0x5802546c
 80044e0:	58025480 	.word	0x58025480
 80044e4:	58025494 	.word	0x58025494
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6d      	ldr	r2, [pc, #436]	; (80046b8 <HAL_DMA_Abort+0x444>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d04a      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6b      	ldr	r2, [pc, #428]	; (80046bc <HAL_DMA_Abort+0x448>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d045      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6a      	ldr	r2, [pc, #424]	; (80046c0 <HAL_DMA_Abort+0x44c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d040      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a68      	ldr	r2, [pc, #416]	; (80046c4 <HAL_DMA_Abort+0x450>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d03b      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a67      	ldr	r2, [pc, #412]	; (80046c8 <HAL_DMA_Abort+0x454>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d036      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a65      	ldr	r2, [pc, #404]	; (80046cc <HAL_DMA_Abort+0x458>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a64      	ldr	r2, [pc, #400]	; (80046d0 <HAL_DMA_Abort+0x45c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d02c      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a62      	ldr	r2, [pc, #392]	; (80046d4 <HAL_DMA_Abort+0x460>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d027      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a61      	ldr	r2, [pc, #388]	; (80046d8 <HAL_DMA_Abort+0x464>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5f      	ldr	r2, [pc, #380]	; (80046dc <HAL_DMA_Abort+0x468>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01d      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a5e      	ldr	r2, [pc, #376]	; (80046e0 <HAL_DMA_Abort+0x46c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a5c      	ldr	r2, [pc, #368]	; (80046e4 <HAL_DMA_Abort+0x470>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5b      	ldr	r2, [pc, #364]	; (80046e8 <HAL_DMA_Abort+0x474>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a59      	ldr	r2, [pc, #356]	; (80046ec <HAL_DMA_Abort+0x478>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_DMA_Abort+0x47c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_DMA_Abort+0x32a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a56      	ldr	r2, [pc, #344]	; (80046f4 <HAL_DMA_Abort+0x480>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <HAL_DMA_Abort+0x33c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e007      	b.n	80045c0 <HAL_DMA_Abort+0x34c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045c0:	e013      	b.n	80045ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045c2:	f7ff fd1f 	bl	8004004 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d90c      	bls.n	80045ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2203      	movs	r2, #3
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e12d      	b.n	8004846 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <HAL_DMA_Abort+0x444>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2d      	ldr	r2, [pc, #180]	; (80046bc <HAL_DMA_Abort+0x448>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <HAL_DMA_Abort+0x44c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2a      	ldr	r2, [pc, #168]	; (80046c4 <HAL_DMA_Abort+0x450>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <HAL_DMA_Abort+0x454>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <HAL_DMA_Abort+0x458>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_DMA_Abort+0x45c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <HAL_DMA_Abort+0x460>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <HAL_DMA_Abort+0x464>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_DMA_Abort+0x468>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <HAL_DMA_Abort+0x46c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <HAL_DMA_Abort+0x470>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <HAL_DMA_Abort+0x474>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <HAL_DMA_Abort+0x478>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_DMA_Abort+0x47c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_Abort+0x422>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_DMA_Abort+0x480>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_DMA_Abort+0x426>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_DMA_Abort+0x428>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02b      	beq.n	80046f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	223f      	movs	r2, #63	; 0x3f
 80046b0:	409a      	lsls	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	e02a      	b.n	800470e <HAL_DMA_Abort+0x49a>
 80046b8:	40020010 	.word	0x40020010
 80046bc:	40020028 	.word	0x40020028
 80046c0:	40020040 	.word	0x40020040
 80046c4:	40020058 	.word	0x40020058
 80046c8:	40020070 	.word	0x40020070
 80046cc:	40020088 	.word	0x40020088
 80046d0:	400200a0 	.word	0x400200a0
 80046d4:	400200b8 	.word	0x400200b8
 80046d8:	40020410 	.word	0x40020410
 80046dc:	40020428 	.word	0x40020428
 80046e0:	40020440 	.word	0x40020440
 80046e4:	40020458 	.word	0x40020458
 80046e8:	40020470 	.word	0x40020470
 80046ec:	40020488 	.word	0x40020488
 80046f0:	400204a0 	.word	0x400204a0
 80046f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4f      	ldr	r2, [pc, #316]	; (8004850 <HAL_DMA_Abort+0x5dc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d072      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a4d      	ldr	r2, [pc, #308]	; (8004854 <HAL_DMA_Abort+0x5e0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d06d      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a4c      	ldr	r2, [pc, #304]	; (8004858 <HAL_DMA_Abort+0x5e4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d068      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a4a      	ldr	r2, [pc, #296]	; (800485c <HAL_DMA_Abort+0x5e8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d063      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a49      	ldr	r2, [pc, #292]	; (8004860 <HAL_DMA_Abort+0x5ec>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d05e      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a47      	ldr	r2, [pc, #284]	; (8004864 <HAL_DMA_Abort+0x5f0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d059      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a46      	ldr	r2, [pc, #280]	; (8004868 <HAL_DMA_Abort+0x5f4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d054      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a44      	ldr	r2, [pc, #272]	; (800486c <HAL_DMA_Abort+0x5f8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d04f      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a43      	ldr	r2, [pc, #268]	; (8004870 <HAL_DMA_Abort+0x5fc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04a      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a41      	ldr	r2, [pc, #260]	; (8004874 <HAL_DMA_Abort+0x600>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d045      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a40      	ldr	r2, [pc, #256]	; (8004878 <HAL_DMA_Abort+0x604>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d040      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3e      	ldr	r2, [pc, #248]	; (800487c <HAL_DMA_Abort+0x608>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d03b      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3d      	ldr	r2, [pc, #244]	; (8004880 <HAL_DMA_Abort+0x60c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d036      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <HAL_DMA_Abort+0x610>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a3a      	ldr	r2, [pc, #232]	; (8004888 <HAL_DMA_Abort+0x614>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d02c      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a38      	ldr	r2, [pc, #224]	; (800488c <HAL_DMA_Abort+0x618>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d027      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <HAL_DMA_Abort+0x61c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a35      	ldr	r2, [pc, #212]	; (8004894 <HAL_DMA_Abort+0x620>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01d      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a34      	ldr	r2, [pc, #208]	; (8004898 <HAL_DMA_Abort+0x624>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a32      	ldr	r2, [pc, #200]	; (800489c <HAL_DMA_Abort+0x628>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a31      	ldr	r2, [pc, #196]	; (80048a0 <HAL_DMA_Abort+0x62c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2f      	ldr	r2, [pc, #188]	; (80048a4 <HAL_DMA_Abort+0x630>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2e      	ldr	r2, [pc, #184]	; (80048a8 <HAL_DMA_Abort+0x634>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort+0x58a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <HAL_DMA_Abort+0x638>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_DMA_Abort+0x58e>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_DMA_Abort+0x590>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004810:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004832:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40020010 	.word	0x40020010
 8004854:	40020028 	.word	0x40020028
 8004858:	40020040 	.word	0x40020040
 800485c:	40020058 	.word	0x40020058
 8004860:	40020070 	.word	0x40020070
 8004864:	40020088 	.word	0x40020088
 8004868:	400200a0 	.word	0x400200a0
 800486c:	400200b8 	.word	0x400200b8
 8004870:	40020410 	.word	0x40020410
 8004874:	40020428 	.word	0x40020428
 8004878:	40020440 	.word	0x40020440
 800487c:	40020458 	.word	0x40020458
 8004880:	40020470 	.word	0x40020470
 8004884:	40020488 	.word	0x40020488
 8004888:	400204a0 	.word	0x400204a0
 800488c:	400204b8 	.word	0x400204b8
 8004890:	58025408 	.word	0x58025408
 8004894:	5802541c 	.word	0x5802541c
 8004898:	58025430 	.word	0x58025430
 800489c:	58025444 	.word	0x58025444
 80048a0:	58025458 	.word	0x58025458
 80048a4:	5802546c 	.word	0x5802546c
 80048a8:	58025480 	.word	0x58025480
 80048ac:	58025494 	.word	0x58025494

080048b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e237      	b.n	8004d32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d004      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2280      	movs	r2, #128	; 0x80
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e22c      	b.n	8004d32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5c      	ldr	r2, [pc, #368]	; (8004a50 <HAL_DMA_Abort_IT+0x1a0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d04a      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a5b      	ldr	r2, [pc, #364]	; (8004a54 <HAL_DMA_Abort_IT+0x1a4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d045      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a59      	ldr	r2, [pc, #356]	; (8004a58 <HAL_DMA_Abort_IT+0x1a8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d040      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_DMA_Abort_IT+0x1ac>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d03b      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a56      	ldr	r2, [pc, #344]	; (8004a60 <HAL_DMA_Abort_IT+0x1b0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d036      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a55      	ldr	r2, [pc, #340]	; (8004a64 <HAL_DMA_Abort_IT+0x1b4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d031      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a53      	ldr	r2, [pc, #332]	; (8004a68 <HAL_DMA_Abort_IT+0x1b8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02c      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a52      	ldr	r2, [pc, #328]	; (8004a6c <HAL_DMA_Abort_IT+0x1bc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d027      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_DMA_Abort_IT+0x1c0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d022      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4f      	ldr	r2, [pc, #316]	; (8004a74 <HAL_DMA_Abort_IT+0x1c4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d01d      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4d      	ldr	r2, [pc, #308]	; (8004a78 <HAL_DMA_Abort_IT+0x1c8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d018      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a4c      	ldr	r2, [pc, #304]	; (8004a7c <HAL_DMA_Abort_IT+0x1cc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d013      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a4a      	ldr	r2, [pc, #296]	; (8004a80 <HAL_DMA_Abort_IT+0x1d0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00e      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_DMA_Abort_IT+0x1d4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a47      	ldr	r2, [pc, #284]	; (8004a88 <HAL_DMA_Abort_IT+0x1d8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_DMA_Abort_IT+0xc8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a46      	ldr	r2, [pc, #280]	; (8004a8c <HAL_DMA_Abort_IT+0x1dc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_DMA_Abort_IT+0xcc>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_DMA_Abort_IT+0xce>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8086 	beq.w	8004a90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2204      	movs	r2, #4
 8004988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2f      	ldr	r2, [pc, #188]	; (8004a50 <HAL_DMA_Abort_IT+0x1a0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04a      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <HAL_DMA_Abort_IT+0x1a4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d045      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_DMA_Abort_IT+0x1a8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d040      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2b      	ldr	r2, [pc, #172]	; (8004a5c <HAL_DMA_Abort_IT+0x1ac>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d03b      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_DMA_Abort_IT+0x1b0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d036      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_DMA_Abort_IT+0x1b4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_DMA_Abort_IT+0x1b8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <HAL_DMA_Abort_IT+0x1bc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d027      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_DMA_Abort_IT+0x1c0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d022      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_DMA_Abort_IT+0x1c4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d01d      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <HAL_DMA_Abort_IT+0x1c8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d018      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_DMA_Abort_IT+0x1cc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <HAL_DMA_Abort_IT+0x1d0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_DMA_Abort_IT+0x1d4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <HAL_DMA_Abort_IT+0x1d8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x17c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_DMA_Abort_IT+0x1dc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d108      	bne.n	8004a3e <HAL_DMA_Abort_IT+0x18e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e178      	b.n	8004d30 <HAL_DMA_Abort_IT+0x480>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e16f      	b.n	8004d30 <HAL_DMA_Abort_IT+0x480>
 8004a50:	40020010 	.word	0x40020010
 8004a54:	40020028 	.word	0x40020028
 8004a58:	40020040 	.word	0x40020040
 8004a5c:	40020058 	.word	0x40020058
 8004a60:	40020070 	.word	0x40020070
 8004a64:	40020088 	.word	0x40020088
 8004a68:	400200a0 	.word	0x400200a0
 8004a6c:	400200b8 	.word	0x400200b8
 8004a70:	40020410 	.word	0x40020410
 8004a74:	40020428 	.word	0x40020428
 8004a78:	40020440 	.word	0x40020440
 8004a7c:	40020458 	.word	0x40020458
 8004a80:	40020470 	.word	0x40020470
 8004a84:	40020488 	.word	0x40020488
 8004a88:	400204a0 	.word	0x400204a0
 8004a8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 020e 	bic.w	r2, r2, #14
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6c      	ldr	r2, [pc, #432]	; (8004c58 <HAL_DMA_Abort_IT+0x3a8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d04a      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6b      	ldr	r2, [pc, #428]	; (8004c5c <HAL_DMA_Abort_IT+0x3ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d045      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a69      	ldr	r2, [pc, #420]	; (8004c60 <HAL_DMA_Abort_IT+0x3b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d040      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a68      	ldr	r2, [pc, #416]	; (8004c64 <HAL_DMA_Abort_IT+0x3b4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d03b      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a66      	ldr	r2, [pc, #408]	; (8004c68 <HAL_DMA_Abort_IT+0x3b8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d036      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a65      	ldr	r2, [pc, #404]	; (8004c6c <HAL_DMA_Abort_IT+0x3bc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d031      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a63      	ldr	r2, [pc, #396]	; (8004c70 <HAL_DMA_Abort_IT+0x3c0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02c      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a62      	ldr	r2, [pc, #392]	; (8004c74 <HAL_DMA_Abort_IT+0x3c4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d027      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a60      	ldr	r2, [pc, #384]	; (8004c78 <HAL_DMA_Abort_IT+0x3c8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a5f      	ldr	r2, [pc, #380]	; (8004c7c <HAL_DMA_Abort_IT+0x3cc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_DMA_Abort_IT+0x3d0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	; (8004c84 <HAL_DMA_Abort_IT+0x3d4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_DMA_Abort_IT+0x3d8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a59      	ldr	r2, [pc, #356]	; (8004c8c <HAL_DMA_Abort_IT+0x3dc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a57      	ldr	r2, [pc, #348]	; (8004c90 <HAL_DMA_Abort_IT+0x3e0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <HAL_DMA_Abort_IT+0x290>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_DMA_Abort_IT+0x3e4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <HAL_DMA_Abort_IT+0x2a2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e007      	b.n	8004b62 <HAL_DMA_Abort_IT+0x2b2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a3c      	ldr	r2, [pc, #240]	; (8004c58 <HAL_DMA_Abort_IT+0x3a8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d072      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <HAL_DMA_Abort_IT+0x3ac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d06d      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a39      	ldr	r2, [pc, #228]	; (8004c60 <HAL_DMA_Abort_IT+0x3b0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d068      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a37      	ldr	r2, [pc, #220]	; (8004c64 <HAL_DMA_Abort_IT+0x3b4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d063      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a36      	ldr	r2, [pc, #216]	; (8004c68 <HAL_DMA_Abort_IT+0x3b8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d05e      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <HAL_DMA_Abort_IT+0x3bc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d059      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <HAL_DMA_Abort_IT+0x3c0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d054      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a31      	ldr	r2, [pc, #196]	; (8004c74 <HAL_DMA_Abort_IT+0x3c4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d04f      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <HAL_DMA_Abort_IT+0x3c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d04a      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2e      	ldr	r2, [pc, #184]	; (8004c7c <HAL_DMA_Abort_IT+0x3cc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d045      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <HAL_DMA_Abort_IT+0x3d0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d040      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <HAL_DMA_Abort_IT+0x3d4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <HAL_DMA_Abort_IT+0x3d8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d036      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <HAL_DMA_Abort_IT+0x3dc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <HAL_DMA_Abort_IT+0x3e0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02c      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <HAL_DMA_Abort_IT+0x3e4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <HAL_DMA_Abort_IT+0x3e8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <HAL_DMA_Abort_IT+0x3ec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01d      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_DMA_Abort_IT+0x3f0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_DMA_Abort_IT+0x3f4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_DMA_Abort_IT+0x3f8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_DMA_Abort_IT+0x3fc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_DMA_Abort_IT+0x400>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_DMA_Abort_IT+0x3a2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_DMA_Abort_IT+0x404>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d132      	bne.n	8004cb8 <HAL_DMA_Abort_IT+0x408>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e031      	b.n	8004cba <HAL_DMA_Abort_IT+0x40a>
 8004c56:	bf00      	nop
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
 8004c98:	58025408 	.word	0x58025408
 8004c9c:	5802541c 	.word	0x5802541c
 8004ca0:	58025430 	.word	0x58025430
 8004ca4:	58025444 	.word	0x58025444
 8004ca8:	58025458 	.word	0x58025458
 8004cac:	5802546c 	.word	0x5802546c
 8004cb0:	58025480 	.word	0x58025480
 8004cb4:	58025494 	.word	0x58025494
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d028      	beq.n	8004d10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	2201      	movs	r2, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d48:	4b67      	ldr	r3, [pc, #412]	; (8004ee8 <HAL_DMA_IRQHandler+0x1ac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a67      	ldr	r2, [pc, #412]	; (8004eec <HAL_DMA_IRQHandler+0x1b0>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	0a9b      	lsrs	r3, r3, #10
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5f      	ldr	r2, [pc, #380]	; (8004ef0 <HAL_DMA_IRQHandler+0x1b4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5d      	ldr	r2, [pc, #372]	; (8004ef4 <HAL_DMA_IRQHandler+0x1b8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5c      	ldr	r2, [pc, #368]	; (8004ef8 <HAL_DMA_IRQHandler+0x1bc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5a      	ldr	r2, [pc, #360]	; (8004efc <HAL_DMA_IRQHandler+0x1c0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a59      	ldr	r2, [pc, #356]	; (8004f00 <HAL_DMA_IRQHandler+0x1c4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a57      	ldr	r2, [pc, #348]	; (8004f04 <HAL_DMA_IRQHandler+0x1c8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a56      	ldr	r2, [pc, #344]	; (8004f08 <HAL_DMA_IRQHandler+0x1cc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_DMA_IRQHandler+0x1d0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a53      	ldr	r2, [pc, #332]	; (8004f10 <HAL_DMA_IRQHandler+0x1d4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a51      	ldr	r2, [pc, #324]	; (8004f14 <HAL_DMA_IRQHandler+0x1d8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a50      	ldr	r2, [pc, #320]	; (8004f18 <HAL_DMA_IRQHandler+0x1dc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <HAL_DMA_IRQHandler+0x1e0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <HAL_DMA_IRQHandler+0x1e4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	; (8004f24 <HAL_DMA_IRQHandler+0x1e8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <HAL_DMA_IRQHandler+0x1ec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xd2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a48      	ldr	r2, [pc, #288]	; (8004f2c <HAL_DMA_IRQHandler+0x1f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_DMA_IRQHandler+0xd6>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_DMA_IRQHandler+0xd8>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 842b 	beq.w	8005670 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2208      	movs	r2, #8
 8004e24:	409a      	lsls	r2, r3
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80a2 	beq.w	8004f74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <HAL_DMA_IRQHandler+0x1b4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d04a      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <HAL_DMA_IRQHandler+0x1b8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d045      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <HAL_DMA_IRQHandler+0x1bc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d040      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_DMA_IRQHandler+0x1c0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d03b      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <HAL_DMA_IRQHandler+0x1c4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d036      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <HAL_DMA_IRQHandler+0x1c8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d031      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <HAL_DMA_IRQHandler+0x1cc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02c      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <HAL_DMA_IRQHandler+0x1d0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d027      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <HAL_DMA_IRQHandler+0x1d4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <HAL_DMA_IRQHandler+0x1d8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01d      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_DMA_IRQHandler+0x1dc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <HAL_DMA_IRQHandler+0x1e0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_DMA_IRQHandler+0x1e4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_DMA_IRQHandler+0x1e8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_DMA_IRQHandler+0x1ec>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x194>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_DMA_IRQHandler+0x1f0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d12f      	bne.n	8004f30 <HAL_DMA_IRQHandler+0x1f4>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e02e      	b.n	8004f44 <HAL_DMA_IRQHandler+0x208>
 8004ee6:	bf00      	nop
 8004ee8:	24000010 	.word	0x24000010
 8004eec:	1b4e81b5 	.word	0x1b4e81b5
 8004ef0:	40020010 	.word	0x40020010
 8004ef4:	40020028 	.word	0x40020028
 8004ef8:	40020040 	.word	0x40020040
 8004efc:	40020058 	.word	0x40020058
 8004f00:	40020070 	.word	0x40020070
 8004f04:	40020088 	.word	0x40020088
 8004f08:	400200a0 	.word	0x400200a0
 8004f0c:	400200b8 	.word	0x400200b8
 8004f10:	40020410 	.word	0x40020410
 8004f14:	40020428 	.word	0x40020428
 8004f18:	40020440 	.word	0x40020440
 8004f1c:	40020458 	.word	0x40020458
 8004f20:	40020470 	.word	0x40020470
 8004f24:	40020488 	.word	0x40020488
 8004f28:	400204a0 	.word	0x400204a0
 8004f2c:	400204b8 	.word	0x400204b8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2208      	movs	r2, #8
 8004f62:	409a      	lsls	r2, r3
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06e      	beq.n	8005068 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a69      	ldr	r2, [pc, #420]	; (8005134 <HAL_DMA_IRQHandler+0x3f8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04a      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a67      	ldr	r2, [pc, #412]	; (8005138 <HAL_DMA_IRQHandler+0x3fc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d045      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a66      	ldr	r2, [pc, #408]	; (800513c <HAL_DMA_IRQHandler+0x400>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a64      	ldr	r2, [pc, #400]	; (8005140 <HAL_DMA_IRQHandler+0x404>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d03b      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a63      	ldr	r2, [pc, #396]	; (8005144 <HAL_DMA_IRQHandler+0x408>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d036      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a61      	ldr	r2, [pc, #388]	; (8005148 <HAL_DMA_IRQHandler+0x40c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d031      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a60      	ldr	r2, [pc, #384]	; (800514c <HAL_DMA_IRQHandler+0x410>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5e      	ldr	r2, [pc, #376]	; (8005150 <HAL_DMA_IRQHandler+0x414>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a5d      	ldr	r2, [pc, #372]	; (8005154 <HAL_DMA_IRQHandler+0x418>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a5b      	ldr	r2, [pc, #364]	; (8005158 <HAL_DMA_IRQHandler+0x41c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	; (800515c <HAL_DMA_IRQHandler+0x420>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_DMA_IRQHandler+0x424>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a57      	ldr	r2, [pc, #348]	; (8005164 <HAL_DMA_IRQHandler+0x428>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a55      	ldr	r2, [pc, #340]	; (8005168 <HAL_DMA_IRQHandler+0x42c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a54      	ldr	r2, [pc, #336]	; (800516c <HAL_DMA_IRQHandler+0x430>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_DMA_IRQHandler+0x2ee>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_DMA_IRQHandler+0x434>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10a      	bne.n	8005040 <HAL_DMA_IRQHandler+0x304>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e003      	b.n	8005048 <HAL_DMA_IRQHandler+0x30c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f043 0202 	orr.w	r2, r3, #2
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2204      	movs	r2, #4
 8005072:	409a      	lsls	r2, r3
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 808f 	beq.w	800519c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2c      	ldr	r2, [pc, #176]	; (8005134 <HAL_DMA_IRQHandler+0x3f8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04a      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <HAL_DMA_IRQHandler+0x3fc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d045      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a29      	ldr	r2, [pc, #164]	; (800513c <HAL_DMA_IRQHandler+0x400>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d040      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <HAL_DMA_IRQHandler+0x404>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <HAL_DMA_IRQHandler+0x408>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d036      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <HAL_DMA_IRQHandler+0x40c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d031      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a23      	ldr	r2, [pc, #140]	; (800514c <HAL_DMA_IRQHandler+0x410>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d02c      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a21      	ldr	r2, [pc, #132]	; (8005150 <HAL_DMA_IRQHandler+0x414>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d027      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a20      	ldr	r2, [pc, #128]	; (8005154 <HAL_DMA_IRQHandler+0x418>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_DMA_IRQHandler+0x41c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_DMA_IRQHandler+0x420>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <HAL_DMA_IRQHandler+0x424>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_DMA_IRQHandler+0x428>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_DMA_IRQHandler+0x42c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a17      	ldr	r2, [pc, #92]	; (800516c <HAL_DMA_IRQHandler+0x430>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMA_IRQHandler+0x3e2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <HAL_DMA_IRQHandler+0x434>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d12a      	bne.n	8005174 <HAL_DMA_IRQHandler+0x438>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e023      	b.n	800517c <HAL_DMA_IRQHandler+0x440>
 8005134:	40020010 	.word	0x40020010
 8005138:	40020028 	.word	0x40020028
 800513c:	40020040 	.word	0x40020040
 8005140:	40020058 	.word	0x40020058
 8005144:	40020070 	.word	0x40020070
 8005148:	40020088 	.word	0x40020088
 800514c:	400200a0 	.word	0x400200a0
 8005150:	400200b8 	.word	0x400200b8
 8005154:	40020410 	.word	0x40020410
 8005158:	40020428 	.word	0x40020428
 800515c:	40020440 	.word	0x40020440
 8005160:	40020458 	.word	0x40020458
 8005164:	40020470 	.word	0x40020470
 8005168:	40020488 	.word	0x40020488
 800516c:	400204a0 	.word	0x400204a0
 8005170:	400204b8 	.word	0x400204b8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2204      	movs	r2, #4
 800518a:	409a      	lsls	r2, r3
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	f043 0204 	orr.w	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2210      	movs	r2, #16
 80051a6:	409a      	lsls	r2, r3
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a6 	beq.w	80052fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a85      	ldr	r2, [pc, #532]	; (80053cc <HAL_DMA_IRQHandler+0x690>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a83      	ldr	r2, [pc, #524]	; (80053d0 <HAL_DMA_IRQHandler+0x694>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a82      	ldr	r2, [pc, #520]	; (80053d4 <HAL_DMA_IRQHandler+0x698>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a80      	ldr	r2, [pc, #512]	; (80053d8 <HAL_DMA_IRQHandler+0x69c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7f      	ldr	r2, [pc, #508]	; (80053dc <HAL_DMA_IRQHandler+0x6a0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a7d      	ldr	r2, [pc, #500]	; (80053e0 <HAL_DMA_IRQHandler+0x6a4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a7c      	ldr	r2, [pc, #496]	; (80053e4 <HAL_DMA_IRQHandler+0x6a8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a7a      	ldr	r2, [pc, #488]	; (80053e8 <HAL_DMA_IRQHandler+0x6ac>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a79      	ldr	r2, [pc, #484]	; (80053ec <HAL_DMA_IRQHandler+0x6b0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a77      	ldr	r2, [pc, #476]	; (80053f0 <HAL_DMA_IRQHandler+0x6b4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a76      	ldr	r2, [pc, #472]	; (80053f4 <HAL_DMA_IRQHandler+0x6b8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a74      	ldr	r2, [pc, #464]	; (80053f8 <HAL_DMA_IRQHandler+0x6bc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a73      	ldr	r2, [pc, #460]	; (80053fc <HAL_DMA_IRQHandler+0x6c0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a71      	ldr	r2, [pc, #452]	; (8005400 <HAL_DMA_IRQHandler+0x6c4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a70      	ldr	r2, [pc, #448]	; (8005404 <HAL_DMA_IRQHandler+0x6c8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_IRQHandler+0x516>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6e      	ldr	r2, [pc, #440]	; (8005408 <HAL_DMA_IRQHandler+0x6cc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10a      	bne.n	8005268 <HAL_DMA_IRQHandler+0x52c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e009      	b.n	800527c <HAL_DMA_IRQHandler+0x540>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03e      	beq.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2210      	movs	r2, #16
 800528a:	409a      	lsls	r2, r3
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d018      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d024      	beq.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
 80052bc:	e01f      	b.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01b      	beq.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
 80052ce:	e016      	b.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d107      	bne.n	80052ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0208 	bic.w	r2, r2, #8
 80052ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	2220      	movs	r2, #32
 8005308:	409a      	lsls	r2, r3
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8110 	beq.w	8005534 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <HAL_DMA_IRQHandler+0x690>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d04a      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <HAL_DMA_IRQHandler+0x694>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d045      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_DMA_IRQHandler+0x698>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d040      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a28      	ldr	r2, [pc, #160]	; (80053d8 <HAL_DMA_IRQHandler+0x69c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d03b      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a26      	ldr	r2, [pc, #152]	; (80053dc <HAL_DMA_IRQHandler+0x6a0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d036      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <HAL_DMA_IRQHandler+0x6a4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d031      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a23      	ldr	r2, [pc, #140]	; (80053e4 <HAL_DMA_IRQHandler+0x6a8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02c      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_DMA_IRQHandler+0x6ac>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d027      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a20      	ldr	r2, [pc, #128]	; (80053ec <HAL_DMA_IRQHandler+0x6b0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d022      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_DMA_IRQHandler+0x6b4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01d      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <HAL_DMA_IRQHandler+0x6b8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d018      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_DMA_IRQHandler+0x6bc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_DMA_IRQHandler+0x6c0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00e      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_DMA_IRQHandler+0x6c4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_DMA_IRQHandler+0x6c8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x678>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_DMA_IRQHandler+0x6cc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d12b      	bne.n	800540c <HAL_DMA_IRQHandler+0x6d0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e02a      	b.n	8005420 <HAL_DMA_IRQHandler+0x6e4>
 80053ca:	bf00      	nop
 80053cc:	40020010 	.word	0x40020010
 80053d0:	40020028 	.word	0x40020028
 80053d4:	40020040 	.word	0x40020040
 80053d8:	40020058 	.word	0x40020058
 80053dc:	40020070 	.word	0x40020070
 80053e0:	40020088 	.word	0x40020088
 80053e4:	400200a0 	.word	0x400200a0
 80053e8:	400200b8 	.word	0x400200b8
 80053ec:	40020410 	.word	0x40020410
 80053f0:	40020428 	.word	0x40020428
 80053f4:	40020440 	.word	0x40020440
 80053f8:	40020458 	.word	0x40020458
 80053fc:	40020470 	.word	0x40020470
 8005400:	40020488 	.word	0x40020488
 8005404:	400204a0 	.word	0x400204a0
 8005408:	400204b8 	.word	0x400204b8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8087 	beq.w	8005534 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2220      	movs	r2, #32
 8005430:	409a      	lsls	r2, r3
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b04      	cmp	r3, #4
 8005440:	d139      	bne.n	80054b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0216 	bic.w	r2, r2, #22
 8005450:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005460:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <HAL_DMA_IRQHandler+0x736>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0208 	bic.w	r2, r2, #8
 8005480:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	223f      	movs	r2, #63	; 0x3f
 800548c:	409a      	lsls	r2, r3
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 834a 	beq.w	8005b40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
          }
          return;
 80054b4:	e344      	b.n	8005b40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d018      	beq.n	80054f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02c      	beq.n	8005534 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
 80054e2:	e027      	b.n	8005534 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d023      	beq.n	8005534 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	e01e      	b.n	8005534 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0210 	bic.w	r2, r2, #16
 8005512:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8306 	beq.w	8005b4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8088 	beq.w	800565c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2204      	movs	r2, #4
 8005550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a7a      	ldr	r2, [pc, #488]	; (8005744 <HAL_DMA_IRQHandler+0xa08>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d04a      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a79      	ldr	r2, [pc, #484]	; (8005748 <HAL_DMA_IRQHandler+0xa0c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d045      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a77      	ldr	r2, [pc, #476]	; (800574c <HAL_DMA_IRQHandler+0xa10>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d040      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a76      	ldr	r2, [pc, #472]	; (8005750 <HAL_DMA_IRQHandler+0xa14>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d03b      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a74      	ldr	r2, [pc, #464]	; (8005754 <HAL_DMA_IRQHandler+0xa18>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d036      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a73      	ldr	r2, [pc, #460]	; (8005758 <HAL_DMA_IRQHandler+0xa1c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d031      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a71      	ldr	r2, [pc, #452]	; (800575c <HAL_DMA_IRQHandler+0xa20>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d02c      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a70      	ldr	r2, [pc, #448]	; (8005760 <HAL_DMA_IRQHandler+0xa24>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d027      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a6e      	ldr	r2, [pc, #440]	; (8005764 <HAL_DMA_IRQHandler+0xa28>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d022      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a6d      	ldr	r2, [pc, #436]	; (8005768 <HAL_DMA_IRQHandler+0xa2c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d01d      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a6b      	ldr	r2, [pc, #428]	; (800576c <HAL_DMA_IRQHandler+0xa30>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d018      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a6a      	ldr	r2, [pc, #424]	; (8005770 <HAL_DMA_IRQHandler+0xa34>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a68      	ldr	r2, [pc, #416]	; (8005774 <HAL_DMA_IRQHandler+0xa38>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00e      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a67      	ldr	r2, [pc, #412]	; (8005778 <HAL_DMA_IRQHandler+0xa3c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d009      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a65      	ldr	r2, [pc, #404]	; (800577c <HAL_DMA_IRQHandler+0xa40>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x8b8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a64      	ldr	r2, [pc, #400]	; (8005780 <HAL_DMA_IRQHandler+0xa44>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d108      	bne.n	8005606 <HAL_DMA_IRQHandler+0x8ca>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e007      	b.n	8005616 <HAL_DMA_IRQHandler+0x8da>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	429a      	cmp	r2, r3
 8005620:	d307      	bcc.n	8005632 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f2      	bne.n	8005616 <HAL_DMA_IRQHandler+0x8da>
 8005630:	e000      	b.n	8005634 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005632:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2203      	movs	r2, #3
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800564a:	e003      	b.n	8005654 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8272 	beq.w	8005b4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
 800566e:	e26c      	b.n	8005b4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a43      	ldr	r2, [pc, #268]	; (8005784 <HAL_DMA_IRQHandler+0xa48>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d022      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a42      	ldr	r2, [pc, #264]	; (8005788 <HAL_DMA_IRQHandler+0xa4c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d01d      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_DMA_IRQHandler+0xa50>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3f      	ldr	r2, [pc, #252]	; (8005790 <HAL_DMA_IRQHandler+0xa54>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <HAL_DMA_IRQHandler+0xa58>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <HAL_DMA_IRQHandler+0xa5c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3a      	ldr	r2, [pc, #232]	; (800579c <HAL_DMA_IRQHandler+0xa60>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x984>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <HAL_DMA_IRQHandler+0xa64>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_DMA_IRQHandler+0x988>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_DMA_IRQHandler+0x98a>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 823f 	beq.w	8005b4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2204      	movs	r2, #4
 80056de:	409a      	lsls	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80cd 	beq.w	8005884 <HAL_DMA_IRQHandler+0xb48>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80c7 	beq.w	8005884 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2204      	movs	r2, #4
 8005700:	409a      	lsls	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d049      	beq.n	80057a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8210 	beq.w	8005b44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800572c:	e20a      	b.n	8005b44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8206 	beq.w	8005b44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005740:	e200      	b.n	8005b44 <HAL_DMA_IRQHandler+0xe08>
 8005742:	bf00      	nop
 8005744:	40020010 	.word	0x40020010
 8005748:	40020028 	.word	0x40020028
 800574c:	40020040 	.word	0x40020040
 8005750:	40020058 	.word	0x40020058
 8005754:	40020070 	.word	0x40020070
 8005758:	40020088 	.word	0x40020088
 800575c:	400200a0 	.word	0x400200a0
 8005760:	400200b8 	.word	0x400200b8
 8005764:	40020410 	.word	0x40020410
 8005768:	40020428 	.word	0x40020428
 800576c:	40020440 	.word	0x40020440
 8005770:	40020458 	.word	0x40020458
 8005774:	40020470 	.word	0x40020470
 8005778:	40020488 	.word	0x40020488
 800577c:	400204a0 	.word	0x400204a0
 8005780:	400204b8 	.word	0x400204b8
 8005784:	58025408 	.word	0x58025408
 8005788:	5802541c 	.word	0x5802541c
 800578c:	58025430 	.word	0x58025430
 8005790:	58025444 	.word	0x58025444
 8005794:	58025458 	.word	0x58025458
 8005798:	5802546c 	.word	0x5802546c
 800579c:	58025480 	.word	0x58025480
 80057a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d160      	bne.n	8005870 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a7f      	ldr	r2, [pc, #508]	; (80059b0 <HAL_DMA_IRQHandler+0xc74>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d04a      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a7d      	ldr	r2, [pc, #500]	; (80059b4 <HAL_DMA_IRQHandler+0xc78>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d045      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7c      	ldr	r2, [pc, #496]	; (80059b8 <HAL_DMA_IRQHandler+0xc7c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d040      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a7a      	ldr	r2, [pc, #488]	; (80059bc <HAL_DMA_IRQHandler+0xc80>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d03b      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a79      	ldr	r2, [pc, #484]	; (80059c0 <HAL_DMA_IRQHandler+0xc84>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d036      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a77      	ldr	r2, [pc, #476]	; (80059c4 <HAL_DMA_IRQHandler+0xc88>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d031      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a76      	ldr	r2, [pc, #472]	; (80059c8 <HAL_DMA_IRQHandler+0xc8c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d02c      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a74      	ldr	r2, [pc, #464]	; (80059cc <HAL_DMA_IRQHandler+0xc90>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d027      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a73      	ldr	r2, [pc, #460]	; (80059d0 <HAL_DMA_IRQHandler+0xc94>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a71      	ldr	r2, [pc, #452]	; (80059d4 <HAL_DMA_IRQHandler+0xc98>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a70      	ldr	r2, [pc, #448]	; (80059d8 <HAL_DMA_IRQHandler+0xc9c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a6e      	ldr	r2, [pc, #440]	; (80059dc <HAL_DMA_IRQHandler+0xca0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a6d      	ldr	r2, [pc, #436]	; (80059e0 <HAL_DMA_IRQHandler+0xca4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6b      	ldr	r2, [pc, #428]	; (80059e4 <HAL_DMA_IRQHandler+0xca8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6a      	ldr	r2, [pc, #424]	; (80059e8 <HAL_DMA_IRQHandler+0xcac>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_DMA_IRQHandler+0xb12>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a68      	ldr	r2, [pc, #416]	; (80059ec <HAL_DMA_IRQHandler+0xcb0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <HAL_DMA_IRQHandler+0xb24>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0208 	bic.w	r2, r2, #8
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e007      	b.n	8005870 <HAL_DMA_IRQHandler+0xb34>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8165 	beq.w	8005b44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005882:	e15f      	b.n	8005b44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2202      	movs	r2, #2
 800588e:	409a      	lsls	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80c5 	beq.w	8005a24 <HAL_DMA_IRQHandler+0xce8>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80bf 	beq.w	8005a24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2202      	movs	r2, #2
 80058b0:	409a      	lsls	r2, r3
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d018      	beq.n	80058f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 813a 	beq.w	8005b48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058dc:	e134      	b.n	8005b48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8130 	beq.w	8005b48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f0:	e12a      	b.n	8005b48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 8089 	bne.w	8005a10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2b      	ldr	r2, [pc, #172]	; (80059b0 <HAL_DMA_IRQHandler+0xc74>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d04a      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <HAL_DMA_IRQHandler+0xc78>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d045      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <HAL_DMA_IRQHandler+0xc7c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d040      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <HAL_DMA_IRQHandler+0xc80>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03b      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <HAL_DMA_IRQHandler+0xc84>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d036      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a23      	ldr	r2, [pc, #140]	; (80059c4 <HAL_DMA_IRQHandler+0xc88>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a22      	ldr	r2, [pc, #136]	; (80059c8 <HAL_DMA_IRQHandler+0xc8c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d02c      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a20      	ldr	r2, [pc, #128]	; (80059cc <HAL_DMA_IRQHandler+0xc90>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d027      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <HAL_DMA_IRQHandler+0xc94>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <HAL_DMA_IRQHandler+0xc98>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_DMA_IRQHandler+0xc9c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_DMA_IRQHandler+0xca0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <HAL_DMA_IRQHandler+0xca4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_DMA_IRQHandler+0xca8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_DMA_IRQHandler+0xcac>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_DMA_IRQHandler+0xc62>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <HAL_DMA_IRQHandler+0xcb0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d128      	bne.n	80059f0 <HAL_DMA_IRQHandler+0xcb4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0214 	bic.w	r2, r2, #20
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e027      	b.n	8005a00 <HAL_DMA_IRQHandler+0xcc4>
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 020a 	bic.w	r2, r2, #10
 80059fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8097 	beq.w	8005b48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a22:	e091      	b.n	8005b48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8088 	beq.w	8005b4a <HAL_DMA_IRQHandler+0xe0e>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8082 	beq.w	8005b4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a41      	ldr	r2, [pc, #260]	; (8005b50 <HAL_DMA_IRQHandler+0xe14>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a3f      	ldr	r2, [pc, #252]	; (8005b54 <HAL_DMA_IRQHandler+0xe18>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a3e      	ldr	r2, [pc, #248]	; (8005b58 <HAL_DMA_IRQHandler+0xe1c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3c      	ldr	r2, [pc, #240]	; (8005b5c <HAL_DMA_IRQHandler+0xe20>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3b      	ldr	r2, [pc, #236]	; (8005b60 <HAL_DMA_IRQHandler+0xe24>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a39      	ldr	r2, [pc, #228]	; (8005b64 <HAL_DMA_IRQHandler+0xe28>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a38      	ldr	r2, [pc, #224]	; (8005b68 <HAL_DMA_IRQHandler+0xe2c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a36      	ldr	r2, [pc, #216]	; (8005b6c <HAL_DMA_IRQHandler+0xe30>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a35      	ldr	r2, [pc, #212]	; (8005b70 <HAL_DMA_IRQHandler+0xe34>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a33      	ldr	r2, [pc, #204]	; (8005b74 <HAL_DMA_IRQHandler+0xe38>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a32      	ldr	r2, [pc, #200]	; (8005b78 <HAL_DMA_IRQHandler+0xe3c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a30      	ldr	r2, [pc, #192]	; (8005b7c <HAL_DMA_IRQHandler+0xe40>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2f      	ldr	r2, [pc, #188]	; (8005b80 <HAL_DMA_IRQHandler+0xe44>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <HAL_DMA_IRQHandler+0xe48>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <HAL_DMA_IRQHandler+0xe4c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0xdaa>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <HAL_DMA_IRQHandler+0xe50>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <HAL_DMA_IRQHandler+0xdbc>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 021c 	bic.w	r2, r2, #28
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <HAL_DMA_IRQHandler+0xdcc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 020e 	bic.w	r2, r2, #14
 8005b06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4798      	blx	r3
 8005b3e:	e004      	b.n	8005b4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005b40:	bf00      	nop
 8005b42:	e002      	b.n	8005b4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8

08005b90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e04f      	b.n	8005c42 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f84e 	bl	8005c58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <HAL_DMA2D_Init+0xbc>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6851      	ldr	r1, [r2, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	69d2      	ldr	r2, [r2, #28]
 8005bd6:	4311      	orrs	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <HAL_DMA2D_Init+0xc0>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6891      	ldr	r1, [r2, #8]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6992      	ldr	r2, [r2, #24]
 8005bf2:	4311      	orrs	r1, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c02:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <HAL_DMA2D_Init+0xc4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68d1      	ldr	r1, [r2, #12]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	051a      	lsls	r2, r3, #20
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	055b      	lsls	r3, r3, #21
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	fff8ffbf 	.word	0xfff8ffbf
 8005c50:	fffffef8 	.word	0xfffffef8
 8005c54:	ffff0000 	.word	0xffff0000

08005c58 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_DMA2D_Start+0x1c>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e018      	b.n	8005cba <HAL_DMA2D_Start+0x4e>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f9a4 	bl	8005ff0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d056      	beq.n	8005d8c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cde:	f7fe f991 	bl	8004004 <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ce4:	e04b      	b.n	8005d7e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d023      	beq.n	8005d40 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1c:	f043 0201 	orr.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2221      	movs	r2, #33	; 0x21
 8005d2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0a5      	b.n	8005e8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d46:	d01a      	beq.n	8005d7e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d48:	f7fe f95c 	bl	8004004 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <HAL_DMA2D_PollForTransfer+0x9c>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d62:	f043 0220 	orr.w	r2, r3, #32
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e086      	b.n	8005e8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0ac      	beq.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d061      	beq.n	8005e72 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dae:	f7fe f929 	bl	8004004 <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005db4:	e056      	b.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02e      	beq.n	8005e26 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd6:	f043 0204 	orr.w	r2, r3, #4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dec:	f043 0202 	orr.w	r2, r3, #2
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2229      	movs	r2, #41	; 0x29
 8005e10:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e032      	b.n	8005e8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2c:	d01a      	beq.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fe f8e9 	bl	8004004 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <HAL_DMA2D_PollForTransfer+0x182>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10f      	bne.n	8005e64 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e48:	f043 0220 	orr.w	r2, r3, #32
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e013      	b.n	8005e8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0a1      	beq.n	8005db6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2212      	movs	r2, #18
 8005e78:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_DMA2D_ConfigLayer+0x24>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e092      	b.n	8005fde <HAL_DMA2D_ConfigLayer+0x14a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	3328      	adds	r3, #40	; 0x28
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005eec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005ef8:	4b3c      	ldr	r3, [pc, #240]	; (8005fec <HAL_DMA2D_ConfigLayer+0x158>)
 8005efa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b0a      	cmp	r3, #10
 8005f02:	d003      	beq.n	8005f0c <HAL_DMA2D_ConfigLayer+0x78>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d107      	bne.n	8005f1c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	e005      	b.n	8005f28 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d120      	bne.n	8005f70 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	43db      	mvns	r3, r3
 8005f38:	ea02 0103 	and.w	r1, r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b0a      	cmp	r3, #10
 8005f56:	d003      	beq.n	8005f60 <HAL_DMA2D_ConfigLayer+0xcc>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d135      	bne.n	8005fcc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f6e:	e02d      	b.n	8005fcc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b0b      	cmp	r3, #11
 8005f76:	d109      	bne.n	8005f8c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	049b      	lsls	r3, r3, #18
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005f8a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	ea02 0103 	and.w	r1, r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b0a      	cmp	r3, #10
 8005fb4:	d003      	beq.n	8005fbe <HAL_DMA2D_ConfigLayer+0x12a>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d106      	bne.n	8005fcc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005fca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	ff33000f 	.word	0xff33000f

08005ff0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b08b      	sub	sp, #44	; 0x2c
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	041a      	lsls	r2, r3, #16
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	431a      	orrs	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006028:	d174      	bne.n	8006114 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006030:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006038:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006040:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d108      	bne.n	8006062 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	431a      	orrs	r2, r3
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	4313      	orrs	r3, r2
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	e053      	b.n	800610a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d106      	bne.n	8006078 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4313      	orrs	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	e048      	b.n	800610a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d111      	bne.n	80060a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	0cdb      	lsrs	r3, r3, #19
 8006084:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	0a9b      	lsrs	r3, r3, #10
 800608a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	02db      	lsls	r3, r3, #11
 800609a:	4313      	orrs	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	e032      	b.n	800610a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d117      	bne.n	80060dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	0fdb      	lsrs	r3, r3, #31
 80060b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	0cdb      	lsrs	r3, r3, #19
 80060b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	0adb      	lsrs	r3, r3, #11
 80060bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	431a      	orrs	r2, r3
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	03db      	lsls	r3, r3, #15
 80060d2:	4313      	orrs	r3, r2
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	e016      	b.n	800610a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	0f1b      	lsrs	r3, r3, #28
 80060e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	0d1b      	lsrs	r3, r3, #20
 80060e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	0b1b      	lsrs	r3, r3, #12
 80060ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	011a      	lsls	r2, r3, #4
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	431a      	orrs	r2, r3
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006112:	e00d      	b.n	8006130 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800611c:	d104      	bne.n	8006128 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	615a      	str	r2, [r3, #20]
}
 8006126:	e003      	b.n	8006130 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	60da      	str	r2, [r3, #12]
}
 8006130:	bf00      	nop
 8006132:	372c      	adds	r7, #44	; 0x2c
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	011a      	lsls	r2, r3, #4
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <HAL_EXTI_IRQHandler+0x5c>)
 8006166:	4413      	add	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4013      	ands	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4798      	blx	r3
    }
  }
}
 800618e:	bf00      	nop
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	58000088 	.word	0x58000088

0800619c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	; 0x24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061aa:	4b89      	ldr	r3, [pc, #548]	; (80063d0 <HAL_GPIO_Init+0x234>)
 80061ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ae:	e194      	b.n	80064da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	2101      	movs	r1, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8186 	beq.w	80064d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d005      	beq.n	80061e0 <HAL_GPIO_Init+0x44>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d130      	bne.n	8006242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	2203      	movs	r2, #3
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4013      	ands	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006216:	2201      	movs	r2, #1
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0201 	and.w	r2, r3, #1
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d017      	beq.n	800627e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	2203      	movs	r2, #3
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4313      	orrs	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d123      	bne.n	80062d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	08da      	lsrs	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3208      	adds	r2, #8
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	220f      	movs	r2, #15
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	4013      	ands	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	08da      	lsrs	r2, r3, #3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3208      	adds	r2, #8
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	2203      	movs	r2, #3
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0203 	and.w	r2, r3, #3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80e0 	beq.w	80064d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006314:	4b2f      	ldr	r3, [pc, #188]	; (80063d4 <HAL_GPIO_Init+0x238>)
 8006316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800631a:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_GPIO_Init+0x238>)
 800631c:	f043 0302 	orr.w	r3, r3, #2
 8006320:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006324:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <HAL_GPIO_Init+0x238>)
 8006326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006332:	4a29      	ldr	r2, [pc, #164]	; (80063d8 <HAL_GPIO_Init+0x23c>)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	3302      	adds	r3, #2
 800633a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	220f      	movs	r2, #15
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a20      	ldr	r2, [pc, #128]	; (80063dc <HAL_GPIO_Init+0x240>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d052      	beq.n	8006404 <HAL_GPIO_Init+0x268>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_GPIO_Init+0x244>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d031      	beq.n	80063ca <HAL_GPIO_Init+0x22e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_GPIO_Init+0x248>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d02b      	beq.n	80063c6 <HAL_GPIO_Init+0x22a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <HAL_GPIO_Init+0x24c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d025      	beq.n	80063c2 <HAL_GPIO_Init+0x226>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <HAL_GPIO_Init+0x250>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01f      	beq.n	80063be <HAL_GPIO_Init+0x222>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <HAL_GPIO_Init+0x254>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d019      	beq.n	80063ba <HAL_GPIO_Init+0x21e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <HAL_GPIO_Init+0x258>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <HAL_GPIO_Init+0x21a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <HAL_GPIO_Init+0x25c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00d      	beq.n	80063b2 <HAL_GPIO_Init+0x216>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_GPIO_Init+0x260>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d007      	beq.n	80063ae <HAL_GPIO_Init+0x212>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a17      	ldr	r2, [pc, #92]	; (8006400 <HAL_GPIO_Init+0x264>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d101      	bne.n	80063aa <HAL_GPIO_Init+0x20e>
 80063a6:	2309      	movs	r3, #9
 80063a8:	e02d      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063aa:	230a      	movs	r3, #10
 80063ac:	e02b      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063ae:	2308      	movs	r3, #8
 80063b0:	e029      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063b2:	2307      	movs	r3, #7
 80063b4:	e027      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063b6:	2306      	movs	r3, #6
 80063b8:	e025      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063ba:	2305      	movs	r3, #5
 80063bc:	e023      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063be:	2304      	movs	r3, #4
 80063c0:	e021      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063c2:	2303      	movs	r3, #3
 80063c4:	e01f      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e01d      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01b      	b.n	8006406 <HAL_GPIO_Init+0x26a>
 80063ce:	bf00      	nop
 80063d0:	58000080 	.word	0x58000080
 80063d4:	58024400 	.word	0x58024400
 80063d8:	58000400 	.word	0x58000400
 80063dc:	58020000 	.word	0x58020000
 80063e0:	58020400 	.word	0x58020400
 80063e4:	58020800 	.word	0x58020800
 80063e8:	58020c00 	.word	0x58020c00
 80063ec:	58021000 	.word	0x58021000
 80063f0:	58021400 	.word	0x58021400
 80063f4:	58021800 	.word	0x58021800
 80063f8:	58021c00 	.word	0x58021c00
 80063fc:	58022000 	.word	0x58022000
 8006400:	58022400 	.word	0x58022400
 8006404:	2300      	movs	r3, #0
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	f002 0203 	and.w	r2, r2, #3
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	4093      	lsls	r3, r2
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006416:	4938      	ldr	r1, [pc, #224]	; (80064f8 <HAL_GPIO_Init+0x35c>)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	3302      	adds	r3, #2
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800644a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	43db      	mvns	r3, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	4013      	ands	r3, r2
 8006462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4013      	ands	r3, r2
 80064b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f ae63 	bne.w	80061b0 <HAL_GPIO_Init+0x14>
  }
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	3724      	adds	r7, #36	; 0x24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	58000400 	.word	0x58000400

080064fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800650a:	4b75      	ldr	r3, [pc, #468]	; (80066e0 <HAL_GPIO_DeInit+0x1e4>)
 800650c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800650e:	e0d9      	b.n	80066c4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006510:	2201      	movs	r2, #1
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4013      	ands	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80cc 	beq.w	80066be <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006526:	4a6f      	ldr	r2, [pc, #444]	; (80066e4 <HAL_GPIO_DeInit+0x1e8>)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	3302      	adds	r3, #2
 800652e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006532:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	220f      	movs	r2, #15
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4013      	ands	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a67      	ldr	r2, [pc, #412]	; (80066e8 <HAL_GPIO_DeInit+0x1ec>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d037      	beq.n	80065c0 <HAL_GPIO_DeInit+0xc4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a66      	ldr	r2, [pc, #408]	; (80066ec <HAL_GPIO_DeInit+0x1f0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d031      	beq.n	80065bc <HAL_GPIO_DeInit+0xc0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <HAL_GPIO_DeInit+0x1f4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02b      	beq.n	80065b8 <HAL_GPIO_DeInit+0xbc>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a64      	ldr	r2, [pc, #400]	; (80066f4 <HAL_GPIO_DeInit+0x1f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d025      	beq.n	80065b4 <HAL_GPIO_DeInit+0xb8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a63      	ldr	r2, [pc, #396]	; (80066f8 <HAL_GPIO_DeInit+0x1fc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01f      	beq.n	80065b0 <HAL_GPIO_DeInit+0xb4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a62      	ldr	r2, [pc, #392]	; (80066fc <HAL_GPIO_DeInit+0x200>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d019      	beq.n	80065ac <HAL_GPIO_DeInit+0xb0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a61      	ldr	r2, [pc, #388]	; (8006700 <HAL_GPIO_DeInit+0x204>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_GPIO_DeInit+0xac>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a60      	ldr	r2, [pc, #384]	; (8006704 <HAL_GPIO_DeInit+0x208>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00d      	beq.n	80065a4 <HAL_GPIO_DeInit+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a5f      	ldr	r2, [pc, #380]	; (8006708 <HAL_GPIO_DeInit+0x20c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <HAL_GPIO_DeInit+0xa4>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a5e      	ldr	r2, [pc, #376]	; (800670c <HAL_GPIO_DeInit+0x210>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <HAL_GPIO_DeInit+0xa0>
 8006598:	2309      	movs	r3, #9
 800659a:	e012      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 800659c:	230a      	movs	r3, #10
 800659e:	e010      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065a0:	2308      	movs	r3, #8
 80065a2:	e00e      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065a4:	2307      	movs	r3, #7
 80065a6:	e00c      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065a8:	2306      	movs	r3, #6
 80065aa:	e00a      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065ac:	2305      	movs	r3, #5
 80065ae:	e008      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065b0:	2304      	movs	r3, #4
 80065b2:	e006      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065b4:	2303      	movs	r3, #3
 80065b6:	e004      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e002      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <HAL_GPIO_DeInit+0xc6>
 80065c0:	2300      	movs	r3, #0
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	f002 0203 	and.w	r2, r2, #3
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	4093      	lsls	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d136      	bne.n	8006640 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	43db      	mvns	r3, r3
 80065da:	401a      	ands	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	401a      	ands	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80065ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	43db      	mvns	r3, r3
 80065f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065fc:	4013      	ands	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	43db      	mvns	r3, r3
 800660a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800660e:	4013      	ands	r3, r2
 8006610:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	220f      	movs	r2, #15
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006622:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <HAL_GPIO_DeInit+0x1e8>)
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	3302      	adds	r3, #2
 800662a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	43da      	mvns	r2, r3
 8006632:	482c      	ldr	r0, [pc, #176]	; (80066e4 <HAL_GPIO_DeInit+0x1e8>)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	400a      	ands	r2, r1
 800663a:	3302      	adds	r3, #2
 800663c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	2103      	movs	r1, #3
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	08da      	lsrs	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3208      	adds	r2, #8
 800665c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	220f      	movs	r2, #15
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	08d2      	lsrs	r2, r2, #3
 8006674:	4019      	ands	r1, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3208      	adds	r2, #8
 800667a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	2103      	movs	r1, #3
 8006688:	fa01 f303 	lsl.w	r3, r1, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	401a      	ands	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	2101      	movs	r1, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	401a      	ands	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	2103      	movs	r1, #3
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	401a      	ands	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3301      	adds	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f af1f 	bne.w	8006510 <HAL_GPIO_DeInit+0x14>
  }
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	58000080 	.word	0x58000080
 80066e4:	58000400 	.word	0x58000400
 80066e8:	58020000 	.word	0x58020000
 80066ec:	58020400 	.word	0x58020400
 80066f0:	58020800 	.word	0x58020800
 80066f4:	58020c00 	.word	0x58020c00
 80066f8:	58021000 	.word	0x58021000
 80066fc:	58021400 	.word	0x58021400
 8006700:	58021800 	.word	0x58021800
 8006704:	58021c00 	.word	0x58021c00
 8006708:	58022000 	.word	0x58022000
 800670c:	58022400 	.word	0x58022400

08006710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
 800671c:	4613      	mov	r3, r2
 800671e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800672c:	e003      	b.n	8006736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	041a      	lsls	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	619a      	str	r2, [r3, #24]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e07f      	b.n	8006856 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8a9 	bl	80068c2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2224      	movs	r2, #36	; 0x24
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d107      	bne.n	80067be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ba:	609a      	str	r2, [r3, #8]
 80067bc:	e006      	b.n	80067cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d104      	bne.n	80067de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6859      	ldr	r1, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_I2C_Init+0x11c>)
 80067ea:	430b      	orrs	r3, r1
 80067ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	02008000 	.word	0x02008000

08006864 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e021      	b.n	80068ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2224      	movs	r2, #36	; 0x24
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f821 	bl	80068d6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	4608      	mov	r0, r1
 80068f6:	4611      	mov	r1, r2
 80068f8:	461a      	mov	r2, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	817b      	strh	r3, [r7, #10]
 80068fe:	460b      	mov	r3, r1
 8006900:	813b      	strh	r3, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	f040 80f9 	bne.w	8006b06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_I2C_Mem_Write+0x34>
 800691a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0ed      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_I2C_Mem_Write+0x4e>
 8006936:	2302      	movs	r3, #2
 8006938:	e0e6      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006942:	f7fd fb5f 	bl	8004004 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2319      	movs	r3, #25
 800694e:	2201      	movs	r2, #1
 8006950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fadd 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0d1      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2221      	movs	r2, #33	; 0x21
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2240      	movs	r2, #64	; 0x40
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800698c:	88f8      	ldrh	r0, [r7, #6]
 800698e:	893a      	ldrh	r2, [r7, #8]
 8006990:	8979      	ldrh	r1, [r7, #10]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4603      	mov	r3, r0
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f9ed 	bl	8006d7c <I2C_RequestMemoryWrite>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0a9      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2bff      	cmp	r3, #255	; 0xff
 80069bc:	d90e      	bls.n	80069dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	8979      	ldrh	r1, [r7, #10]
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fc57 	bl	8007288 <I2C_TransferConfig>
 80069da:	e00f      	b.n	80069fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	8979      	ldrh	r1, [r7, #10]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fc46 	bl	8007288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fad6 	bl	8006fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e07b      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d034      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x1c8>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d130      	bne.n	8006ab4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa59 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e04d      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d90e      	bls.n	8006a94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	8979      	ldrh	r1, [r7, #10]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fbfb 	bl	8007288 <I2C_TransferConfig>
 8006a92:	e00f      	b.n	8006ab4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	8979      	ldrh	r1, [r7, #10]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fbea 	bl	8007288 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d19e      	bne.n	80069fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fabc 	bl	8007040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e01a      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_I2C_Mem_Write+0x224>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
  }
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	fe00e800 	.word	0xfe00e800

08006b14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	4611      	mov	r1, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	460b      	mov	r3, r1
 8006b28:	813b      	strh	r3, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	f040 80fd 	bne.w	8006d36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_I2C_Mem_Read+0x34>
 8006b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0f1      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_I2C_Mem_Read+0x4e>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e0ea      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b6a:	f7fd fa4b 	bl	8004004 <HAL_GetTick>
 8006b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2319      	movs	r3, #25
 8006b76:	2201      	movs	r2, #1
 8006b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f9c9 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0d5      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2222      	movs	r2, #34	; 0x22
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2240      	movs	r2, #64	; 0x40
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bb4:	88f8      	ldrh	r0, [r7, #6]
 8006bb6:	893a      	ldrh	r2, [r7, #8]
 8006bb8:	8979      	ldrh	r1, [r7, #10]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f92d 	bl	8006e24 <I2C_RequestMemoryRead>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0ad      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2bff      	cmp	r3, #255	; 0xff
 8006be4:	d90e      	bls.n	8006c04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	22ff      	movs	r2, #255	; 0xff
 8006bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	8979      	ldrh	r1, [r7, #10]
 8006bf4:	4b52      	ldr	r3, [pc, #328]	; (8006d40 <HAL_I2C_Mem_Read+0x22c>)
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fb43 	bl	8007288 <I2C_TransferConfig>
 8006c02:	e00f      	b.n	8006c24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	8979      	ldrh	r1, [r7, #10]
 8006c16:	4b4a      	ldr	r3, [pc, #296]	; (8006d40 <HAL_I2C_Mem_Read+0x22c>)
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fb32 	bl	8007288 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2104      	movs	r1, #4
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f970 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e07c      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d034      	beq.n	8006ce4 <HAL_I2C_Mem_Read+0x1d0>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d130      	bne.n	8006ce4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f941 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04d      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2bff      	cmp	r3, #255	; 0xff
 8006ca4:	d90e      	bls.n	8006cc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	22ff      	movs	r2, #255	; 0xff
 8006caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fae3 	bl	8007288 <I2C_TransferConfig>
 8006cc2:	e00f      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	8979      	ldrh	r1, [r7, #10]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fad2 	bl	8007288 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d19a      	bne.n	8006c24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f9a4 	bl	8007040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e01a      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2220      	movs	r2, #32
 8006d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_I2C_Mem_Read+0x230>)
 8006d16:	400b      	ands	r3, r1
 8006d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	80002400 	.word	0x80002400
 8006d44:	fe00e800 	.word	0xfe00e800

08006d48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d56:	b2db      	uxtb	r3, r3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	817b      	strh	r3, [r7, #10]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	813b      	strh	r3, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	8979      	ldrh	r1, [r7, #10]
 8006d9c:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <I2C_RequestMemoryWrite+0xa4>)
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa6f 	bl	8007288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f8ff 	bl	8006fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e02c      	b.n	8006e18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d105      	bne.n	8006dd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dc4:	893b      	ldrh	r3, [r7, #8]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8006dce:	e015      	b.n	8006dfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dd0:	893b      	ldrh	r3, [r7, #8]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	69b9      	ldr	r1, [r7, #24]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f8e5 	bl	8006fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e012      	b.n	8006e18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006df2:	893b      	ldrh	r3, [r7, #8]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2200      	movs	r2, #0
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f884 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	80002000 	.word	0x80002000

08006e24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	817b      	strh	r3, [r7, #10]
 8006e36:	460b      	mov	r3, r1
 8006e38:	813b      	strh	r3, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	8979      	ldrh	r1, [r7, #10]
 8006e44:	4b20      	ldr	r3, [pc, #128]	; (8006ec8 <I2C_RequestMemoryRead+0xa4>)
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa1c 	bl	8007288 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	69b9      	ldr	r1, [r7, #24]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f8ac 	bl	8006fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e02c      	b.n	8006ebe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d105      	bne.n	8006e76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
 8006e74:	e015      	b.n	8006ea2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e76:	893b      	ldrh	r3, [r7, #8]
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	69b9      	ldr	r1, [r7, #24]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f892 	bl	8006fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e012      	b.n	8006ebe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e98:	893b      	ldrh	r3, [r7, #8]
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2140      	movs	r1, #64	; 0x40
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f831 	bl	8006f14 <I2C_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	80002000 	.word	0x80002000

08006ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d103      	bne.n	8006eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d007      	beq.n	8006f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0201 	orr.w	r2, r2, #1
 8006f06:	619a      	str	r2, [r3, #24]
  }
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	4613      	mov	r3, r2
 8006f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f24:	e031      	b.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2c:	d02d      	beq.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2e:	f7fd f869 	bl	8004004 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d302      	bcc.n	8006f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d122      	bne.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d113      	bne.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f043 0220 	orr.w	r2, r3, #32
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e00f      	b.n	8006faa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d0be      	beq.n	8006f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fbe:	e033      	b.n	8007028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f87f 	bl	80070c8 <I2C_IsErrorOccurred>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e031      	b.n	8007038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fda:	d025      	beq.n	8007028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fdc:	f7fd f812 	bl	8004004 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d11a      	bne.n	8007028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d013      	beq.n	8007028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e007      	b.n	8007038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d1c4      	bne.n	8006fc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800704c:	e02f      	b.n	80070ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f838 	bl	80070c8 <I2C_IsErrorOccurred>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e02d      	b.n	80070be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007062:	f7fc ffcf 	bl	8004004 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11a      	bne.n	80070ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d013      	beq.n	80070ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	f043 0220 	orr.w	r2, r3, #32
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e007      	b.n	80070be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d1c8      	bne.n	800704e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d068      	beq.n	80071c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2210      	movs	r2, #16
 80070fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070fc:	e049      	b.n	8007192 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007104:	d045      	beq.n	8007192 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fc ff7d 	bl	8004004 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_IsErrorOccurred+0x54>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d13a      	bne.n	8007192 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007126:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800712e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713e:	d121      	bne.n	8007184 <I2C_IsErrorOccurred+0xbc>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007146:	d01d      	beq.n	8007184 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	2b20      	cmp	r3, #32
 800714c:	d01a      	beq.n	8007184 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800715c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800715e:	f7fc ff51 	bl	8004004 <HAL_GetTick>
 8007162:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007164:	e00e      	b.n	8007184 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007166:	f7fc ff4d 	bl	8004004 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b19      	cmp	r3, #25
 8007172:	d907      	bls.n	8007184 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	f043 0320 	orr.w	r3, r3, #32
 800717a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007182:	e006      	b.n	8007192 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d1e9      	bne.n	8007166 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b20      	cmp	r3, #32
 800719e:	d003      	beq.n	80071a8 <I2C_IsErrorOccurred+0xe0>
 80071a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0aa      	beq.n	80070fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2220      	movs	r2, #32
 80071b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00b      	beq.n	8007212 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f043 0308 	orr.w	r3, r3, #8
 8007200:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800720a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	f043 0302 	orr.w	r3, r3, #2
 8007222:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800722c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01c      	beq.n	8007276 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fe45 	bl	8006ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6859      	ldr	r1, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <I2C_IsErrorOccurred+0x1bc>)
 800724e:	400b      	ands	r3, r1
 8007250:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800727a:	4618      	mov	r0, r3
 800727c:	3728      	adds	r7, #40	; 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	fe00e800 	.word	0xfe00e800

08007288 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	817b      	strh	r3, [r7, #10]
 8007296:	4613      	mov	r3, r2
 8007298:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800729a:	897b      	ldrh	r3, [r7, #10]
 800729c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072a0:	7a7b      	ldrb	r3, [r7, #9]
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	0d5b      	lsrs	r3, r3, #21
 80072c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <I2C_TransferConfig+0x60>)
 80072c8:	430b      	orrs	r3, r1
 80072ca:	43db      	mvns	r3, r3
 80072cc:	ea02 0103 	and.w	r1, r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	03ff63ff 	.word	0x03ff63ff

080072ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d138      	bne.n	8007374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800730c:	2302      	movs	r3, #2
 800730e:	e032      	b.n	8007376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	; 0x24
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0201 	bic.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6819      	ldr	r1, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e000      	b.n	8007376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b20      	cmp	r3, #32
 8007396:	d139      	bne.n	800740c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e033      	b.n	800740e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2224      	movs	r2, #36	; 0x24
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e0bf      	b.n	80075ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8ba 	bl	80075bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800745e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6999      	ldr	r1, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007474:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6899      	ldr	r1, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b4a      	ldr	r3, [pc, #296]	; (80075b8 <HAL_LTDC_Init+0x19c>)
 8007490:	400b      	ands	r3, r1
 8007492:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68d9      	ldr	r1, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b3e      	ldr	r3, [pc, #248]	; (80075b8 <HAL_LTDC_Init+0x19c>)
 80074be:	400b      	ands	r3, r1
 80074c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68d9      	ldr	r1, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1a      	ldr	r2, [r3, #32]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6919      	ldr	r1, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <HAL_LTDC_Init+0x19c>)
 80074ec:	400b      	ands	r3, r1
 80074ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6919      	ldr	r1, [r3, #16]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6959      	ldr	r1, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <HAL_LTDC_Init+0x19c>)
 800751a:	400b      	ands	r3, r1
 800751c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6959      	ldr	r1, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0206 	orr.w	r2, r2, #6
 800758a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	f000f800 	.word	0xf000f800

080075bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80075d0:	b5b0      	push	{r4, r5, r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d101      	bne.n	80075ea <HAL_LTDC_ConfigLayer+0x1a>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e02c      	b.n	8007644 <HAL_LTDC_ConfigLayer+0x74>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2134      	movs	r1, #52	; 0x34
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	4413      	add	r3, r2
 8007606:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4614      	mov	r4, r2
 800760e:	461d      	mov	r5, r3
 8007610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800761a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f811 	bl	800764c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2201      	movs	r2, #1
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bdb0      	pop	{r4, r5, r7, pc}

0800764c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800764c:	b480      	push	{r7}
 800764e:	b089      	sub	sp, #36	; 0x24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007668:	4413      	add	r3, r2
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	01db      	lsls	r3, r3, #7
 8007678:	4413      	add	r3, r2
 800767a:	3384      	adds	r3, #132	; 0x84
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	4611      	mov	r1, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	01d2      	lsls	r2, r2, #7
 8007688:	440a      	add	r2, r1
 800768a:	3284      	adds	r2, #132	; 0x84
 800768c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007690:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	01db      	lsls	r3, r3, #7
 80076b0:	440b      	add	r3, r1
 80076b2:	3384      	adds	r3, #132	; 0x84
 80076b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ca:	4413      	add	r3, r2
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	01db      	lsls	r3, r3, #7
 80076da:	4413      	add	r3, r2
 80076dc:	3384      	adds	r3, #132	; 0x84
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	4611      	mov	r1, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	01d2      	lsls	r2, r2, #7
 80076ea:	440a      	add	r2, r1
 80076ec:	3284      	adds	r2, #132	; 0x84
 80076ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007702:	4413      	add	r3, r2
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	01db      	lsls	r3, r3, #7
 8007710:	440b      	add	r3, r1
 8007712:	3384      	adds	r3, #132	; 0x84
 8007714:	4619      	mov	r1, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4313      	orrs	r3, r2
 800771a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	01db      	lsls	r3, r3, #7
 8007726:	4413      	add	r3, r2
 8007728:	3384      	adds	r3, #132	; 0x84
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	4611      	mov	r1, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	01d2      	lsls	r2, r2, #7
 8007736:	440a      	add	r2, r1
 8007738:	3284      	adds	r2, #132	; 0x84
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	01db      	lsls	r3, r3, #7
 800774a:	4413      	add	r3, r2
 800774c:	3384      	adds	r3, #132	; 0x84
 800774e:	461a      	mov	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007766:	041b      	lsls	r3, r3, #16
 8007768:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	061b      	lsls	r3, r3, #24
 8007770:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	01db      	lsls	r3, r3, #7
 800777c:	4413      	add	r3, r2
 800777e:	3384      	adds	r3, #132	; 0x84
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	4413      	add	r3, r2
 800778e:	3384      	adds	r3, #132	; 0x84
 8007790:	461a      	mov	r2, r3
 8007792:	2300      	movs	r3, #0
 8007794:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800779c:	461a      	mov	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	431a      	orrs	r2, r3
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	01db      	lsls	r3, r3, #7
 80077b0:	440b      	add	r3, r1
 80077b2:	3384      	adds	r3, #132	; 0x84
 80077b4:	4619      	mov	r1, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	01db      	lsls	r3, r3, #7
 80077c6:	4413      	add	r3, r2
 80077c8:	3384      	adds	r3, #132	; 0x84
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	4611      	mov	r1, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	01d2      	lsls	r2, r2, #7
 80077d6:	440a      	add	r2, r1
 80077d8:	3284      	adds	r2, #132	; 0x84
 80077da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	01db      	lsls	r3, r3, #7
 80077ea:	4413      	add	r3, r2
 80077ec:	3384      	adds	r3, #132	; 0x84
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	01db      	lsls	r3, r3, #7
 8007800:	4413      	add	r3, r2
 8007802:	3384      	adds	r3, #132	; 0x84
 8007804:	69da      	ldr	r2, [r3, #28]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	01db      	lsls	r3, r3, #7
 8007810:	440b      	add	r3, r1
 8007812:	3384      	adds	r3, #132	; 0x84
 8007814:	4619      	mov	r1, r3
 8007816:	4b58      	ldr	r3, [pc, #352]	; (8007978 <LTDC_SetConfig+0x32c>)
 8007818:	4013      	ands	r3, r2
 800781a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	6809      	ldr	r1, [r1, #0]
 8007828:	4608      	mov	r0, r1
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	01c9      	lsls	r1, r1, #7
 800782e:	4401      	add	r1, r0
 8007830:	3184      	adds	r1, #132	; 0x84
 8007832:	4313      	orrs	r3, r2
 8007834:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	01db      	lsls	r3, r3, #7
 8007840:	4413      	add	r3, r2
 8007842:	3384      	adds	r3, #132	; 0x84
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	4413      	add	r3, r2
 8007852:	3384      	adds	r3, #132	; 0x84
 8007854:	461a      	mov	r2, r3
 8007856:	2300      	movs	r3, #0
 8007858:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	01db      	lsls	r3, r3, #7
 8007864:	4413      	add	r3, r2
 8007866:	3384      	adds	r3, #132	; 0x84
 8007868:	461a      	mov	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007878:	2304      	movs	r3, #4
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e01b      	b.n	80078b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d102      	bne.n	800788c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007886:	2303      	movs	r3, #3
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	e014      	b.n	80078b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d00b      	beq.n	80078ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007898:	2b02      	cmp	r3, #2
 800789a:	d007      	beq.n	80078ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d003      	beq.n	80078ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078a8:	2b07      	cmp	r3, #7
 80078aa:	d102      	bne.n	80078b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80078ac:	2302      	movs	r3, #2
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	e001      	b.n	80078b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80078b2:	2301      	movs	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	01db      	lsls	r3, r3, #7
 80078c0:	4413      	add	r3, r2
 80078c2:	3384      	adds	r3, #132	; 0x84
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	4611      	mov	r1, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	01d2      	lsls	r2, r2, #7
 80078d0:	440a      	add	r2, r1
 80078d2:	3284      	adds	r2, #132	; 0x84
 80078d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80078d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	041a      	lsls	r2, r3, #16
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6859      	ldr	r1, [r3, #4]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	1acb      	subs	r3, r1, r3
 80078f0:	69f9      	ldr	r1, [r7, #28]
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	3307      	adds	r3, #7
 80078f8:	68f9      	ldr	r1, [r7, #12]
 80078fa:	6809      	ldr	r1, [r1, #0]
 80078fc:	4608      	mov	r0, r1
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	01c9      	lsls	r1, r1, #7
 8007902:	4401      	add	r1, r0
 8007904:	3184      	adds	r1, #132	; 0x84
 8007906:	4313      	orrs	r3, r2
 8007908:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	4413      	add	r3, r2
 8007916:	3384      	adds	r3, #132	; 0x84
 8007918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	440b      	add	r3, r1
 8007926:	3384      	adds	r3, #132	; 0x84
 8007928:	4619      	mov	r1, r3
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <LTDC_SetConfig+0x330>)
 800792c:	4013      	ands	r3, r2
 800792e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	01db      	lsls	r3, r3, #7
 800793a:	4413      	add	r3, r2
 800793c:	3384      	adds	r3, #132	; 0x84
 800793e:	461a      	mov	r2, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	4413      	add	r3, r2
 8007952:	3384      	adds	r3, #132	; 0x84
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	4611      	mov	r1, r2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	01d2      	lsls	r2, r2, #7
 8007960:	440a      	add	r2, r1
 8007962:	3284      	adds	r2, #132	; 0x84
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	6013      	str	r3, [r2, #0]
}
 800796a:	bf00      	nop
 800796c:	3724      	adds	r7, #36	; 0x24
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	fffff8f8 	.word	0xfffff8f8
 800797c:	fffff800 	.word	0xfffff800

08007980 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007988:	f7fc fb3c 	bl	8004004 <HAL_GetTick>
 800798c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e03b      	b.n	8007a10 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80079b8:	e00f      	b.n	80079da <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80079ba:	f7fc fb23 	bl	8004004 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d908      	bls.n	80079da <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e01a      	b.n	8007a10 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e8      	bne.n	80079ba <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9c1 	bl	8007d70 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e048      	b.n	8007abc <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0201 	bic.w	r2, r2, #1
 8007a38:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	221f      	movs	r2, #31
 8007a90:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ad4:	4b91      	ldr	r3, [pc, #580]	; (8007d1c <HAL_MDMA_IRQHandler+0x254>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a91      	ldr	r2, [pc, #580]	; (8007d20 <HAL_MDMA_IRQHandler+0x258>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0a9b      	lsrs	r3, r3, #10
 8007ae0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b8e      	ldr	r3, [pc, #568]	; (8007d24 <HAL_MDMA_IRQHandler+0x25c>)
 8007aea:	4413      	add	r3, r2
 8007aec:	099b      	lsrs	r3, r3, #6
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2201      	movs	r2, #1
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007afa:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 812d 	beq.w	8007d64 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d054      	beq.n	8007bc2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d04d      	beq.n	8007bc2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0202 	bic.w	r2, r2, #2
 8007b34:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b4c:	f043 0201 	orr.w	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	669a      	str	r2, [r3, #104]	; 0x68
 8007b54:	e005      	b.n	8007b62 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b5a:	f043 0202 	orr.w	r2, r3, #2
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b70:	f043 0204 	orr.w	r2, r3, #4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9c:	f043 0210 	orr.w	r2, r3, #16
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb2:	f043 0220 	orr.w	r2, r3, #32
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d012      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2210      	movs	r2, #16
 8007be4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2208      	movs	r2, #8
 8007c18:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d012      	beq.n	8007c5e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d039      	beq.n	8007ce0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d032      	beq.n	8007ce0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007c88:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d110      	bne.n	8007cb8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d05c      	beq.n	8007d68 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
        }
        return;
 8007cb6:	e057      	b.n	8007d68 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d040      	beq.n	8007d6a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d30d      	bcc.n	8007d28 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f2      	bne.n	8007d00 <HAL_MDMA_IRQHandler+0x238>
 8007d1a:	e006      	b.n	8007d2a <HAL_MDMA_IRQHandler+0x262>
 8007d1c:	24000010 	.word	0x24000010
 8007d20:	1b4e81b5 	.word	0x1b4e81b5
 8007d24:	adffffc0 	.word	0xadffffc0
        break;
 8007d28:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2203      	movs	r2, #3
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d48:	e003      	b.n	8007d52 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	e002      	b.n	8007d6a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007d68:	bf00      	nop
    }
  }
}
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68d9      	ldr	r1, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007d96:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007da2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007dae:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	3b01      	subs	r3, #1
 8007db6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007db8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007dc4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007dc6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d107      	bne.n	8007de2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007de0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2200      	movs	r2, #0
 8007de8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da11      	bge.n	8007e16 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e00:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	425b      	negs	r3, r3
 8007e08:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	b292      	uxth	r2, r2
 8007e12:	621a      	str	r2, [r3, #32]
 8007e14:	e006      	b.n	8007e24 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	b292      	uxth	r2, r2
 8007e22:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da15      	bge.n	8007e58 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695a      	ldr	r2, [r3, #20]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007e3a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	425b      	negs	r3, r3
 8007e42:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a19      	ldr	r1, [r3, #32]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	041a      	lsls	r2, r3, #16
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	621a      	str	r2, [r3, #32]
 8007e56:	e009      	b.n	8007e6c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6a19      	ldr	r1, [r3, #32]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	041a      	lsls	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e74:	d006      	beq.n	8007e84 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	629a      	str	r2, [r3, #40]	; 0x28
 8007e82:	e003      	b.n	8007e8c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <HAL_PWREx_ConfigSupply+0x70>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d00a      	beq.n	8007eca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007eb4:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <HAL_PWREx_ConfigSupply+0x70>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d001      	beq.n	8007ec6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e01f      	b.n	8007f06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e01d      	b.n	8007f06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007eca:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <HAL_PWREx_ConfigSupply+0x70>)
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f023 0207 	bic.w	r2, r3, #7
 8007ed2:	490f      	ldr	r1, [pc, #60]	; (8007f10 <HAL_PWREx_ConfigSupply+0x70>)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007eda:	f7fc f893 	bl	8004004 <HAL_GetTick>
 8007ede:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ee0:	e009      	b.n	8007ef6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ee2:	f7fc f88f 	bl	8004004 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef0:	d901      	bls.n	8007ef6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e007      	b.n	8007f06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <HAL_PWREx_ConfigSupply+0x70>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d1ee      	bne.n	8007ee2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	58024800 	.word	0x58024800

08007f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08c      	sub	sp, #48	; 0x30
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f000 bc48 	b.w	80087b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8088 	beq.w	8008046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f36:	4b99      	ldr	r3, [pc, #612]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f40:	4b96      	ldr	r3, [pc, #600]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d007      	beq.n	8007f5c <HAL_RCC_OscConfig+0x48>
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	2b18      	cmp	r3, #24
 8007f50:	d111      	bne.n	8007f76 <HAL_RCC_OscConfig+0x62>
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d10c      	bne.n	8007f76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f5c:	4b8f      	ldr	r3, [pc, #572]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d06d      	beq.n	8008044 <HAL_RCC_OscConfig+0x130>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d169      	bne.n	8008044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f000 bc21 	b.w	80087b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCC_OscConfig+0x7a>
 8007f80:	4b86      	ldr	r3, [pc, #536]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a85      	ldr	r2, [pc, #532]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	e02e      	b.n	8007fec <HAL_RCC_OscConfig+0xd8>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x9c>
 8007f96:	4b81      	ldr	r3, [pc, #516]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a80      	ldr	r2, [pc, #512]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	4b7e      	ldr	r3, [pc, #504]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a7d      	ldr	r2, [pc, #500]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	e01d      	b.n	8007fec <HAL_RCC_OscConfig+0xd8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_RCC_OscConfig+0xc0>
 8007fba:	4b78      	ldr	r3, [pc, #480]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a77      	ldr	r2, [pc, #476]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b75      	ldr	r3, [pc, #468]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a74      	ldr	r2, [pc, #464]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	e00b      	b.n	8007fec <HAL_RCC_OscConfig+0xd8>
 8007fd4:	4b71      	ldr	r3, [pc, #452]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a70      	ldr	r2, [pc, #448]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	4b6e      	ldr	r3, [pc, #440]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6d      	ldr	r2, [pc, #436]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8007fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d013      	beq.n	800801c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7fc f806 	bl	8004004 <HAL_GetTick>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ffc:	f7fc f802 	bl	8004004 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b64      	cmp	r3, #100	; 0x64
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e3d4      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800800e:	4b63      	ldr	r3, [pc, #396]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f0      	beq.n	8007ffc <HAL_RCC_OscConfig+0xe8>
 800801a:	e014      	b.n	8008046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801c:	f7fb fff2 	bl	8004004 <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008024:	f7fb ffee 	bl	8004004 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b64      	cmp	r3, #100	; 0x64
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e3c0      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008036:	4b59      	ldr	r3, [pc, #356]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f0      	bne.n	8008024 <HAL_RCC_OscConfig+0x110>
 8008042:	e000      	b.n	8008046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80ca 	beq.w	80081e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008054:	4b51      	ldr	r3, [pc, #324]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800805c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800805e:	4b4f      	ldr	r3, [pc, #316]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_RCC_OscConfig+0x166>
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	2b18      	cmp	r3, #24
 800806e:	d156      	bne.n	800811e <HAL_RCC_OscConfig+0x20a>
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d151      	bne.n	800811e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800807a:	4b48      	ldr	r3, [pc, #288]	; (800819c <HAL_RCC_OscConfig+0x288>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_RCC_OscConfig+0x17e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e392      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008092:	4b42      	ldr	r3, [pc, #264]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f023 0219 	bic.w	r2, r3, #25
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	493f      	ldr	r1, [pc, #252]	; (800819c <HAL_RCC_OscConfig+0x288>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fb ffae 	bl	8004004 <HAL_GetTick>
 80080a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ac:	f7fb ffaa 	bl	8004004 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e37c      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080be:	4b37      	ldr	r3, [pc, #220]	; (800819c <HAL_RCC_OscConfig+0x288>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f0      	beq.n	80080ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ca:	f7fb ffa7 	bl	800401c <HAL_GetREVID>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d817      	bhi.n	8008108 <HAL_RCC_OscConfig+0x1f4>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d108      	bne.n	80080f2 <HAL_RCC_OscConfig+0x1de>
 80080e0:	4b2e      	ldr	r3, [pc, #184]	; (800819c <HAL_RCC_OscConfig+0x288>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080e8:	4a2c      	ldr	r2, [pc, #176]	; (800819c <HAL_RCC_OscConfig+0x288>)
 80080ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080f0:	e07a      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f2:	4b2a      	ldr	r3, [pc, #168]	; (800819c <HAL_RCC_OscConfig+0x288>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	031b      	lsls	r3, r3, #12
 8008100:	4926      	ldr	r1, [pc, #152]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008102:	4313      	orrs	r3, r2
 8008104:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008106:	e06f      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <HAL_RCC_OscConfig+0x288>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	4921      	ldr	r1, [pc, #132]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008118:	4313      	orrs	r3, r2
 800811a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800811c:	e064      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d047      	beq.n	80081b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f023 0219 	bic.w	r2, r3, #25
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	491a      	ldr	r1, [pc, #104]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008134:	4313      	orrs	r3, r2
 8008136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fb ff64 	bl	8004004 <HAL_GetTick>
 800813c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008140:	f7fb ff60 	bl	8004004 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e332      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815e:	f7fb ff5d 	bl	800401c <HAL_GetREVID>
 8008162:	4603      	mov	r3, r0
 8008164:	f241 0203 	movw	r2, #4099	; 0x1003
 8008168:	4293      	cmp	r3, r2
 800816a:	d819      	bhi.n	80081a0 <HAL_RCC_OscConfig+0x28c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d108      	bne.n	8008186 <HAL_RCC_OscConfig+0x272>
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800817c:	4a07      	ldr	r2, [pc, #28]	; (800819c <HAL_RCC_OscConfig+0x288>)
 800817e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008182:	6053      	str	r3, [r2, #4]
 8008184:	e030      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	031b      	lsls	r3, r3, #12
 8008194:	4901      	ldr	r1, [pc, #4]	; (800819c <HAL_RCC_OscConfig+0x288>)
 8008196:	4313      	orrs	r3, r2
 8008198:	604b      	str	r3, [r1, #4]
 800819a:	e025      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
 800819c:	58024400 	.word	0x58024400
 80081a0:	4b9a      	ldr	r3, [pc, #616]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	061b      	lsls	r3, r3, #24
 80081ae:	4997      	ldr	r1, [pc, #604]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	604b      	str	r3, [r1, #4]
 80081b4:	e018      	b.n	80081e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081b6:	4b95      	ldr	r3, [pc, #596]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a94      	ldr	r2, [pc, #592]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c2:	f7fb ff1f 	bl	8004004 <HAL_GetTick>
 80081c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081c8:	e008      	b.n	80081dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ca:	f7fb ff1b 	bl	8004004 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d901      	bls.n	80081dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e2ed      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081dc:	4b8b      	ldr	r3, [pc, #556]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f0      	bne.n	80081ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80a9 	beq.w	8008348 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081f6:	4b85      	ldr	r3, [pc, #532]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008200:	4b82      	ldr	r3, [pc, #520]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008204:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b08      	cmp	r3, #8
 800820a:	d007      	beq.n	800821c <HAL_RCC_OscConfig+0x308>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b18      	cmp	r3, #24
 8008210:	d13a      	bne.n	8008288 <HAL_RCC_OscConfig+0x374>
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d135      	bne.n	8008288 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800821c:	4b7b      	ldr	r3, [pc, #492]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <HAL_RCC_OscConfig+0x320>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	2b80      	cmp	r3, #128	; 0x80
 800822e:	d001      	beq.n	8008234 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e2c1      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008234:	f7fb fef2 	bl	800401c <HAL_GetREVID>
 8008238:	4603      	mov	r3, r0
 800823a:	f241 0203 	movw	r2, #4099	; 0x1003
 800823e:	4293      	cmp	r3, r2
 8008240:	d817      	bhi.n	8008272 <HAL_RCC_OscConfig+0x35e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	2b20      	cmp	r3, #32
 8008248:	d108      	bne.n	800825c <HAL_RCC_OscConfig+0x348>
 800824a:	4b70      	ldr	r3, [pc, #448]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008252:	4a6e      	ldr	r2, [pc, #440]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008258:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800825a:	e075      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800825c:	4b6b      	ldr	r3, [pc, #428]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	069b      	lsls	r3, r3, #26
 800826a:	4968      	ldr	r1, [pc, #416]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800826c:	4313      	orrs	r3, r2
 800826e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008270:	e06a      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008272:	4b66      	ldr	r3, [pc, #408]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	061b      	lsls	r3, r3, #24
 8008280:	4962      	ldr	r1, [pc, #392]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008282:	4313      	orrs	r3, r2
 8008284:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008286:	e05f      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d042      	beq.n	8008316 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008290:	4b5e      	ldr	r3, [pc, #376]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a5d      	ldr	r2, [pc, #372]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829c:	f7fb feb2 	bl	8004004 <HAL_GetTick>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082a4:	f7fb feae 	bl	8004004 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e280      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082b6:	4b55      	ldr	r3, [pc, #340]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082c2:	f7fb feab 	bl	800401c <HAL_GetREVID>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d817      	bhi.n	8008300 <HAL_RCC_OscConfig+0x3ec>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d108      	bne.n	80082ea <HAL_RCC_OscConfig+0x3d6>
 80082d8:	4b4c      	ldr	r3, [pc, #304]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80082e0:	4a4a      	ldr	r2, [pc, #296]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80082e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082e6:	6053      	str	r3, [r2, #4]
 80082e8:	e02e      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
 80082ea:	4b48      	ldr	r3, [pc, #288]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	069b      	lsls	r3, r3, #26
 80082f8:	4944      	ldr	r1, [pc, #272]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	604b      	str	r3, [r1, #4]
 80082fe:	e023      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
 8008300:	4b42      	ldr	r3, [pc, #264]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	061b      	lsls	r3, r3, #24
 800830e:	493f      	ldr	r1, [pc, #252]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008310:	4313      	orrs	r3, r2
 8008312:	60cb      	str	r3, [r1, #12]
 8008314:	e018      	b.n	8008348 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008316:	4b3d      	ldr	r3, [pc, #244]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a3c      	ldr	r2, [pc, #240]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800831c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008322:	f7fb fe6f 	bl	8004004 <HAL_GetTick>
 8008326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008328:	e008      	b.n	800833c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800832a:	f7fb fe6b 	bl	8004004 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d901      	bls.n	800833c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e23d      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800833c:	4b33      	ldr	r3, [pc, #204]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f0      	bne.n	800832a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d036      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d019      	beq.n	8008390 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800835c:	4b2b      	ldr	r3, [pc, #172]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 800835e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008360:	4a2a      	ldr	r2, [pc, #168]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008368:	f7fb fe4c 	bl	8004004 <HAL_GetTick>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800836e:	e008      	b.n	8008382 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008370:	f7fb fe48 	bl	8004004 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e21a      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008382:	4b22      	ldr	r3, [pc, #136]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f0      	beq.n	8008370 <HAL_RCC_OscConfig+0x45c>
 800838e:	e018      	b.n	80083c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008390:	4b1e      	ldr	r3, [pc, #120]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839c:	f7fb fe32 	bl	8004004 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083a4:	f7fb fe2e 	bl	8004004 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e200      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80083b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d039      	beq.n	8008442 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01c      	beq.n	8008410 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083d6:	4b0d      	ldr	r3, [pc, #52]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a0c      	ldr	r2, [pc, #48]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80083dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083e2:	f7fb fe0f 	bl	8004004 <HAL_GetTick>
 80083e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083e8:	e008      	b.n	80083fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ea:	f7fb fe0b 	bl	8004004 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d901      	bls.n	80083fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e1dd      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <HAL_RCC_OscConfig+0x4f8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0f0      	beq.n	80083ea <HAL_RCC_OscConfig+0x4d6>
 8008408:	e01b      	b.n	8008442 <HAL_RCC_OscConfig+0x52e>
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008410:	4b9b      	ldr	r3, [pc, #620]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a9a      	ldr	r2, [pc, #616]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800841a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800841c:	f7fb fdf2 	bl	8004004 <HAL_GetTick>
 8008420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008424:	f7fb fdee 	bl	8004004 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e1c0      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008436:	4b92      	ldr	r3, [pc, #584]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f0      	bne.n	8008424 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 8081 	beq.w	8008552 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008450:	4b8c      	ldr	r3, [pc, #560]	; (8008684 <HAL_RCC_OscConfig+0x770>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a8b      	ldr	r2, [pc, #556]	; (8008684 <HAL_RCC_OscConfig+0x770>)
 8008456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800845c:	f7fb fdd2 	bl	8004004 <HAL_GetTick>
 8008460:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008464:	f7fb fdce 	bl	8004004 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	; 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1a0      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008476:	4b83      	ldr	r3, [pc, #524]	; (8008684 <HAL_RCC_OscConfig+0x770>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d106      	bne.n	8008498 <HAL_RCC_OscConfig+0x584>
 800848a:	4b7d      	ldr	r3, [pc, #500]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	4a7c      	ldr	r2, [pc, #496]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	6713      	str	r3, [r2, #112]	; 0x70
 8008496:	e02d      	b.n	80084f4 <HAL_RCC_OscConfig+0x5e0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10c      	bne.n	80084ba <HAL_RCC_OscConfig+0x5a6>
 80084a0:	4b77      	ldr	r3, [pc, #476]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	4a76      	ldr	r2, [pc, #472]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	6713      	str	r3, [r2, #112]	; 0x70
 80084ac:	4b74      	ldr	r3, [pc, #464]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	4a73      	ldr	r2, [pc, #460]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084b2:	f023 0304 	bic.w	r3, r3, #4
 80084b6:	6713      	str	r3, [r2, #112]	; 0x70
 80084b8:	e01c      	b.n	80084f4 <HAL_RCC_OscConfig+0x5e0>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d10c      	bne.n	80084dc <HAL_RCC_OscConfig+0x5c8>
 80084c2:	4b6f      	ldr	r3, [pc, #444]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4a6e      	ldr	r2, [pc, #440]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084c8:	f043 0304 	orr.w	r3, r3, #4
 80084cc:	6713      	str	r3, [r2, #112]	; 0x70
 80084ce:	4b6c      	ldr	r3, [pc, #432]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	4a6b      	ldr	r2, [pc, #428]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	6713      	str	r3, [r2, #112]	; 0x70
 80084da:	e00b      	b.n	80084f4 <HAL_RCC_OscConfig+0x5e0>
 80084dc:	4b68      	ldr	r3, [pc, #416]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e0:	4a67      	ldr	r2, [pc, #412]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	6713      	str	r3, [r2, #112]	; 0x70
 80084e8:	4b65      	ldr	r3, [pc, #404]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ec:	4a64      	ldr	r2, [pc, #400]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80084ee:	f023 0304 	bic.w	r3, r3, #4
 80084f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d015      	beq.n	8008528 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fc:	f7fb fd82 	bl	8004004 <HAL_GetTick>
 8008500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008502:	e00a      	b.n	800851a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008504:	f7fb fd7e 	bl	8004004 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008512:	4293      	cmp	r3, r2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e14e      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800851a:	4b59      	ldr	r3, [pc, #356]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0ee      	beq.n	8008504 <HAL_RCC_OscConfig+0x5f0>
 8008526:	e014      	b.n	8008552 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008528:	f7fb fd6c 	bl	8004004 <HAL_GetTick>
 800852c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800852e:	e00a      	b.n	8008546 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008530:	f7fb fd68 	bl	8004004 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	f241 3288 	movw	r2, #5000	; 0x1388
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e138      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008546:	4b4e      	ldr	r3, [pc, #312]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1ee      	bne.n	8008530 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 812d 	beq.w	80087b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800855c:	4b48      	ldr	r3, [pc, #288]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008564:	2b18      	cmp	r3, #24
 8008566:	f000 80bd 	beq.w	80086e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b02      	cmp	r3, #2
 8008570:	f040 809e 	bne.w	80086b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008574:	4b42      	ldr	r3, [pc, #264]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a41      	ldr	r2, [pc, #260]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800857a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800857e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008580:	f7fb fd40 	bl	8004004 <HAL_GetTick>
 8008584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008588:	f7fb fd3c 	bl	8004004 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e10e      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800859a:	4b39      	ldr	r3, [pc, #228]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80085a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085aa:	4b37      	ldr	r3, [pc, #220]	; (8008688 <HAL_RCC_OscConfig+0x774>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80085b6:	0112      	lsls	r2, r2, #4
 80085b8:	430a      	orrs	r2, r1
 80085ba:	4931      	ldr	r1, [pc, #196]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	628b      	str	r3, [r1, #40]	; 0x28
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	3b01      	subs	r3, #1
 80085c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	3b01      	subs	r3, #1
 80085d0:	025b      	lsls	r3, r3, #9
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	3b01      	subs	r3, #1
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085e2:	431a      	orrs	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	3b01      	subs	r3, #1
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085f0:	4923      	ldr	r1, [pc, #140]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085f6:	4b22      	ldr	r3, [pc, #136]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	4a21      	ldr	r2, [pc, #132]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008602:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <HAL_RCC_OscConfig+0x778>)
 8008608:	4013      	ands	r3, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800860e:	00d2      	lsls	r2, r2, #3
 8008610:	491b      	ldr	r1, [pc, #108]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008612:	4313      	orrs	r3, r2
 8008614:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	f023 020c 	bic.w	r2, r3, #12
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	4917      	ldr	r1, [pc, #92]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008628:	4b15      	ldr	r3, [pc, #84]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	f023 0202 	bic.w	r2, r3, #2
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	4912      	ldr	r1, [pc, #72]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	4a10      	ldr	r2, [pc, #64]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008646:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800864c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008650:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800865c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800865e:	4b08      	ldr	r3, [pc, #32]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a07      	ldr	r2, [pc, #28]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a04      	ldr	r2, [pc, #16]	; (8008680 <HAL_RCC_OscConfig+0x76c>)
 8008670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008676:	f7fb fcc5 	bl	8004004 <HAL_GetTick>
 800867a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800867c:	e011      	b.n	80086a2 <HAL_RCC_OscConfig+0x78e>
 800867e:	bf00      	nop
 8008680:	58024400 	.word	0x58024400
 8008684:	58024800 	.word	0x58024800
 8008688:	fffffc0c 	.word	0xfffffc0c
 800868c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008690:	f7fb fcb8 	bl	8004004 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e08a      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a2:	4b47      	ldr	r3, [pc, #284]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f0      	beq.n	8008690 <HAL_RCC_OscConfig+0x77c>
 80086ae:	e082      	b.n	80087b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b0:	4b43      	ldr	r3, [pc, #268]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a42      	ldr	r2, [pc, #264]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fb fca2 	bl	8004004 <HAL_GetTick>
 80086c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086c4:	f7fb fc9e 	bl	8004004 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e070      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086d6:	4b3a      	ldr	r3, [pc, #232]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1f0      	bne.n	80086c4 <HAL_RCC_OscConfig+0x7b0>
 80086e2:	e068      	b.n	80087b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086ea:	4b35      	ldr	r3, [pc, #212]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d031      	beq.n	800875c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f003 0203 	and.w	r2, r3, #3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008702:	429a      	cmp	r2, r3
 8008704:	d12a      	bne.n	800875c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	091b      	lsrs	r3, r3, #4
 800870a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008712:	429a      	cmp	r2, r3
 8008714:	d122      	bne.n	800875c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008722:	429a      	cmp	r2, r3
 8008724:	d11a      	bne.n	800875c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	0a5b      	lsrs	r3, r3, #9
 800872a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008734:	429a      	cmp	r2, r3
 8008736:	d111      	bne.n	800875c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008746:	429a      	cmp	r2, r3
 8008748:	d108      	bne.n	800875c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	0e1b      	lsrs	r3, r3, #24
 800874e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008756:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008758:	429a      	cmp	r2, r3
 800875a:	d001      	beq.n	8008760 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e02b      	b.n	80087b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008760:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 8008762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800876a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	d01f      	beq.n	80087b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008776:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	4a11      	ldr	r2, [pc, #68]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008782:	f7fb fc3f 	bl	8004004 <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008788:	bf00      	nop
 800878a:	f7fb fc3b 	bl	8004004 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	4293      	cmp	r3, r2
 8008794:	d0f9      	beq.n	800878a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008796:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 8008798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <HAL_RCC_OscConfig+0x8b0>)
 800879c:	4013      	ands	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087a2:	00d2      	lsls	r2, r2, #3
 80087a4:	4906      	ldr	r1, [pc, #24]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	4a04      	ldr	r2, [pc, #16]	; (80087c0 <HAL_RCC_OscConfig+0x8ac>)
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3730      	adds	r7, #48	; 0x30
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	58024400 	.word	0x58024400
 80087c4:	ffff0007 	.word	0xffff0007

080087c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e19c      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087dc:	4b8a      	ldr	r3, [pc, #552]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d910      	bls.n	800880c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ea:	4b87      	ldr	r3, [pc, #540]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 020f 	bic.w	r2, r3, #15
 80087f2:	4985      	ldr	r1, [pc, #532]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fa:	4b83      	ldr	r3, [pc, #524]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e184      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d010      	beq.n	800883a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	4b7b      	ldr	r3, [pc, #492]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008824:	429a      	cmp	r2, r3
 8008826:	d908      	bls.n	800883a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008828:	4b78      	ldr	r3, [pc, #480]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	4975      	ldr	r1, [pc, #468]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008836:	4313      	orrs	r3, r2
 8008838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d010      	beq.n	8008868 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695a      	ldr	r2, [r3, #20]
 800884a:	4b70      	ldr	r3, [pc, #448]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008852:	429a      	cmp	r2, r3
 8008854:	d908      	bls.n	8008868 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008856:	4b6d      	ldr	r3, [pc, #436]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	496a      	ldr	r1, [pc, #424]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008864:	4313      	orrs	r3, r2
 8008866:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d010      	beq.n	8008896 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699a      	ldr	r2, [r3, #24]
 8008878:	4b64      	ldr	r3, [pc, #400]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008880:	429a      	cmp	r2, r3
 8008882:	d908      	bls.n	8008896 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008884:	4b61      	ldr	r3, [pc, #388]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	495e      	ldr	r1, [pc, #376]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008892:	4313      	orrs	r3, r2
 8008894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d010      	beq.n	80088c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69da      	ldr	r2, [r3, #28]
 80088a6:	4b59      	ldr	r3, [pc, #356]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d908      	bls.n	80088c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088b2:	4b56      	ldr	r3, [pc, #344]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	4953      	ldr	r1, [pc, #332]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d010      	beq.n	80088f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	4b4d      	ldr	r3, [pc, #308]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	429a      	cmp	r2, r3
 80088de:	d908      	bls.n	80088f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088e0:	4b4a      	ldr	r3, [pc, #296]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f023 020f 	bic.w	r2, r3, #15
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	4947      	ldr	r1, [pc, #284]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d055      	beq.n	80089aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088fe:	4b43      	ldr	r3, [pc, #268]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	4940      	ldr	r1, [pc, #256]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800890c:	4313      	orrs	r3, r2
 800890e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d107      	bne.n	8008928 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008918:	4b3c      	ldr	r3, [pc, #240]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d121      	bne.n	8008968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e0f6      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d107      	bne.n	8008940 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008930:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d115      	bne.n	8008968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0ea      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d107      	bne.n	8008958 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008948:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0de      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008958:	4b2c      	ldr	r3, [pc, #176]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e0d6      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f023 0207 	bic.w	r2, r3, #7
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	4925      	ldr	r1, [pc, #148]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 8008976:	4313      	orrs	r3, r2
 8008978:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800897a:	f7fb fb43 	bl	8004004 <HAL_GetTick>
 800897e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008980:	e00a      	b.n	8008998 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008982:	f7fb fb3f 	bl	8004004 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008990:	4293      	cmp	r3, r2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e0be      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008998:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d1eb      	bne.n	8008982 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d208      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f023 020f 	bic.w	r2, r3, #15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	490e      	ldr	r1, [pc, #56]	; (8008a0c <HAL_RCC_ClockConfig+0x244>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d214      	bcs.n	8008a10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f023 020f 	bic.w	r2, r3, #15
 80089ee:	4906      	ldr	r1, [pc, #24]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <HAL_RCC_ClockConfig+0x240>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d005      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e086      	b.n	8008b16 <HAL_RCC_ClockConfig+0x34e>
 8008a08:	52002000 	.word	0x52002000
 8008a0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d010      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	4b3f      	ldr	r3, [pc, #252]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d208      	bcs.n	8008a3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a2c:	4b3c      	ldr	r3, [pc, #240]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	4939      	ldr	r1, [pc, #228]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d010      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	4b34      	ldr	r3, [pc, #208]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d208      	bcs.n	8008a6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a5a:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	492e      	ldr	r1, [pc, #184]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	4b28      	ldr	r3, [pc, #160]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d208      	bcs.n	8008a9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	4922      	ldr	r1, [pc, #136]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d010      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69da      	ldr	r2, [r3, #28]
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d208      	bcs.n	8008ac8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ab6:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	4917      	ldr	r1, [pc, #92]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ac8:	f000 f834 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	4912      	ldr	r1, [pc, #72]	; (8008b24 <HAL_RCC_ClockConfig+0x35c>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <HAL_RCC_ClockConfig+0x358>)
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	4a0d      	ldr	r2, [pc, #52]	; (8008b24 <HAL_RCC_ClockConfig+0x35c>)
 8008af0:	5cd3      	ldrb	r3, [r2, r3]
 8008af2:	f003 031f 	and.w	r3, r3, #31
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	fa22 f303 	lsr.w	r3, r2, r3
 8008afc:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <HAL_RCC_ClockConfig+0x360>)
 8008afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <HAL_RCC_ClockConfig+0x364>)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <HAL_RCC_ClockConfig+0x368>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fb fa30 	bl	8003f70 <HAL_InitTick>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	58024400 	.word	0x58024400
 8008b24:	080118a0 	.word	0x080118a0
 8008b28:	24000014 	.word	0x24000014
 8008b2c:	24000010 	.word	0x24000010
 8008b30:	24000050 	.word	0x24000050

08008b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b089      	sub	sp, #36	; 0x24
 8008b38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b3a:	4bb3      	ldr	r3, [pc, #716]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b42:	2b18      	cmp	r3, #24
 8008b44:	f200 8155 	bhi.w	8008df2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008df3 	.word	0x08008df3
 8008b58:	08008df3 	.word	0x08008df3
 8008b5c:	08008df3 	.word	0x08008df3
 8008b60:	08008df3 	.word	0x08008df3
 8008b64:	08008df3 	.word	0x08008df3
 8008b68:	08008df3 	.word	0x08008df3
 8008b6c:	08008df3 	.word	0x08008df3
 8008b70:	08008bdb 	.word	0x08008bdb
 8008b74:	08008df3 	.word	0x08008df3
 8008b78:	08008df3 	.word	0x08008df3
 8008b7c:	08008df3 	.word	0x08008df3
 8008b80:	08008df3 	.word	0x08008df3
 8008b84:	08008df3 	.word	0x08008df3
 8008b88:	08008df3 	.word	0x08008df3
 8008b8c:	08008df3 	.word	0x08008df3
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008df3 	.word	0x08008df3
 8008b98:	08008df3 	.word	0x08008df3
 8008b9c:	08008df3 	.word	0x08008df3
 8008ba0:	08008df3 	.word	0x08008df3
 8008ba4:	08008df3 	.word	0x08008df3
 8008ba8:	08008df3 	.word	0x08008df3
 8008bac:	08008df3 	.word	0x08008df3
 8008bb0:	08008be7 	.word	0x08008be7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb4:	4b94      	ldr	r3, [pc, #592]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc0:	4b91      	ldr	r3, [pc, #580]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	08db      	lsrs	r3, r3, #3
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	4a90      	ldr	r2, [pc, #576]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008bd2:	e111      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bd4:	4b8d      	ldr	r3, [pc, #564]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bd6:	61bb      	str	r3, [r7, #24]
      break;
 8008bd8:	e10e      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008bda:	4b8d      	ldr	r3, [pc, #564]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bdc:	61bb      	str	r3, [r7, #24]
      break;
 8008bde:	e10b      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008be0:	4b8c      	ldr	r3, [pc, #560]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008be2:	61bb      	str	r3, [r7, #24]
      break;
 8008be4:	e108      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be6:	4b88      	ldr	r3, [pc, #544]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bf0:	4b85      	ldr	r3, [pc, #532]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	091b      	lsrs	r3, r3, #4
 8008bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bfc:	4b82      	ldr	r3, [pc, #520]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c06:	4b80      	ldr	r3, [pc, #512]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80e1 	beq.w	8008dec <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	f000 8083 	beq.w	8008d38 <HAL_RCC_GetSysClockFreq+0x204>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	f200 80a1 	bhi.w	8008d7c <HAL_RCC_GetSysClockFreq+0x248>
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_RCC_GetSysClockFreq+0x114>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d056      	beq.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c46:	e099      	b.n	8008d7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c48:	4b6f      	ldr	r3, [pc, #444]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d02d      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c54:	4b6c      	ldr	r3, [pc, #432]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	08db      	lsrs	r3, r3, #3
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	4a6b      	ldr	r2, [pc, #428]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b62      	ldr	r3, [pc, #392]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008cae:	e087      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b51      	ldr	r3, [pc, #324]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cf2:	e065      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d36:	e043      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b2f      	ldr	r3, [pc, #188]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d7a:	e021      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8e:	4b1e      	ldr	r3, [pc, #120]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008da2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	0a5b      	lsrs	r3, r3, #9
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	3301      	adds	r3, #1
 8008dcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de4:	ee17 3a90 	vmov	r3, s15
 8008de8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008dea:	e005      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
      break;
 8008df0:	e002      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008df2:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008df4:	61bb      	str	r3, [r7, #24]
      break;
 8008df6:	bf00      	nop
  }

  return sysclockfreq;
 8008df8:	69bb      	ldr	r3, [r7, #24]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3724      	adds	r7, #36	; 0x24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	03d09000 	.word	0x03d09000
 8008e10:	003d0900 	.word	0x003d0900
 8008e14:	017d7840 	.word	0x017d7840
 8008e18:	46000000 	.word	0x46000000
 8008e1c:	4c742400 	.word	0x4c742400
 8008e20:	4a742400 	.word	0x4a742400
 8008e24:	4bbebc20 	.word	0x4bbebc20

08008e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e2e:	f7ff fe81 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	0a1b      	lsrs	r3, r3, #8
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	490f      	ldr	r1, [pc, #60]	; (8008e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8008e40:	5ccb      	ldrb	r3, [r1, r3]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	4a09      	ldr	r2, [pc, #36]	; (8008e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8008e56:	5cd3      	ldrb	r3, [r2, r3]
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e66:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	58024400 	.word	0x58024400
 8008e7c:	080118a0 	.word	0x080118a0
 8008e80:	24000014 	.word	0x24000014
 8008e84:	24000010 	.word	0x24000010

08008e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e8c:	f7ff ffcc 	bl	8008e28 <HAL_RCC_GetHCLKFreq>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	0a1b      	lsrs	r3, r3, #8
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	4904      	ldr	r1, [pc, #16]	; (8008eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	080118a0 	.word	0x080118a0

08008eb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eb8:	b0ca      	sub	sp, #296	; 0x128
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008ed8:	2500      	movs	r5, #0
 8008eda:	ea54 0305 	orrs.w	r3, r4, r5
 8008ede:	d049      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008eea:	d02f      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ef0:	d828      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ef6:	d01a      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008efc:	d822      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f06:	d007      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f08:	e01c      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f0a:	4bb8      	ldr	r3, [pc, #736]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	4ab7      	ldr	r2, [pc, #732]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f16:	e01a      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	2102      	movs	r1, #2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 f9d1 	bl	800a2c8 <RCCEx_PLL2_Config>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f2c:	e00f      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f32:	3328      	adds	r3, #40	; 0x28
 8008f34:	2102      	movs	r1, #2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fa78 	bl	800a42c <RCCEx_PLL3_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f42:	e004      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f4a:	e000      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f56:	4ba5      	ldr	r3, [pc, #660]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f64:	4aa1      	ldr	r2, [pc, #644]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f66:	430b      	orrs	r3, r1
 8008f68:	6513      	str	r3, [r2, #80]	; 0x50
 8008f6a:	e003      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008f80:	f04f 0900 	mov.w	r9, #0
 8008f84:	ea58 0309 	orrs.w	r3, r8, r9
 8008f88:	d047      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d82a      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f94:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9a:	bf00      	nop
 8008f9c:	08008fb1 	.word	0x08008fb1
 8008fa0:	08008fbf 	.word	0x08008fbf
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08008ff3 	.word	0x08008ff3
 8008fac:	08008ff3 	.word	0x08008ff3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb0:	4b8e      	ldr	r3, [pc, #568]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a8d      	ldr	r2, [pc, #564]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fbc:	e01a      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 f97e 	bl	800a2c8 <RCCEx_PLL2_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fd2:	e00f      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd8:	3328      	adds	r3, #40	; 0x28
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 fa25 	bl	800a42c <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fe8:	e004      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ff0:	e000      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ffc:	4b7b      	ldr	r3, [pc, #492]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009000:	f023 0107 	bic.w	r1, r3, #7
 8009004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	4a78      	ldr	r2, [pc, #480]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800900c:	430b      	orrs	r3, r1
 800900e:	6513      	str	r3, [r2, #80]	; 0x50
 8009010:	e003      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009026:	f04f 0b00 	mov.w	fp, #0
 800902a:	ea5a 030b 	orrs.w	r3, sl, fp
 800902e:	d04c      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903a:	d030      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800903c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009040:	d829      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009042:	2bc0      	cmp	r3, #192	; 0xc0
 8009044:	d02d      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009046:	2bc0      	cmp	r3, #192	; 0xc0
 8009048:	d825      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800904a:	2b80      	cmp	r3, #128	; 0x80
 800904c:	d018      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800904e:	2b80      	cmp	r3, #128	; 0x80
 8009050:	d821      	bhi.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d007      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800905a:	e01c      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b63      	ldr	r3, [pc, #396]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	4a62      	ldr	r2, [pc, #392]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009068:	e01c      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906e:	3308      	adds	r3, #8
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f928 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800907e:	e011      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009084:	3328      	adds	r3, #40	; 0x28
 8009086:	2100      	movs	r1, #0
 8009088:	4618      	mov	r0, r3
 800908a:	f001 f9cf 	bl	800a42c <RCCEx_PLL3_Config>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800909c:	e002      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800909e:	bf00      	nop
 80090a0:	e000      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80090a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090ac:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80090b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ba:	4a4c      	ldr	r2, [pc, #304]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6513      	str	r3, [r2, #80]	; 0x50
 80090c0:	e003      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80090d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80090e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80090e4:	460b      	mov	r3, r1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	d053      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090f6:	d035      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80090f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090fc:	d82e      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009102:	d031      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009104:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009108:	d828      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800910a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910e:	d01a      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009114:	d822      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800911a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800911e:	d007      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009120:	e01c      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009122:	4b32      	ldr	r3, [pc, #200]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	4a31      	ldr	r2, [pc, #196]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800912c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800912e:	e01c      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009134:	3308      	adds	r3, #8
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f8c5 	bl	800a2c8 <RCCEx_PLL2_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009144:	e011      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914a:	3328      	adds	r3, #40	; 0x28
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 f96c 	bl	800a42c <RCCEx_PLL3_Config>
 8009154:	4603      	mov	r3, r0
 8009156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800915a:	e006      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009162:	e002      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009164:	bf00      	nop
 8009166:	e000      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800916a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009172:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009176:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009182:	4a1a      	ldr	r2, [pc, #104]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009184:	430b      	orrs	r3, r1
 8009186:	6593      	str	r3, [r2, #88]	; 0x58
 8009188:	e003      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800918e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800919e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091a2:	2300      	movs	r3, #0
 80091a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80091ac:	460b      	mov	r3, r1
 80091ae:	4313      	orrs	r3, r2
 80091b0:	d056      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091be:	d038      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80091c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091c4:	d831      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091ca:	d034      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80091cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091d0:	d82b      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091d6:	d01d      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80091d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091dc:	d825      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091e6:	d00a      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091e8:	e01f      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091ea:	bf00      	nop
 80091ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f0:	4ba2      	ldr	r3, [pc, #648]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	4aa1      	ldr	r2, [pc, #644]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091fc:	e01c      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009202:	3308      	adds	r3, #8
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f85e 	bl	800a2c8 <RCCEx_PLL2_Config>
 800920c:	4603      	mov	r3, r0
 800920e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009212:	e011      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009218:	3328      	adds	r3, #40	; 0x28
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f001 f905 	bl	800a42c <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009228:	e006      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009230:	e002      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009240:	4b8e      	ldr	r3, [pc, #568]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009244:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009250:	4a8a      	ldr	r2, [pc, #552]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009252:	430b      	orrs	r3, r1
 8009254:	6593      	str	r3, [r2, #88]	; 0x58
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800925c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800926c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009270:	2300      	movs	r3, #0
 8009272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009276:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800927a:	460b      	mov	r3, r1
 800927c:	4313      	orrs	r3, r2
 800927e:	d03a      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009286:	2b30      	cmp	r3, #48	; 0x30
 8009288:	d01f      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800928a:	2b30      	cmp	r3, #48	; 0x30
 800928c:	d819      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800928e:	2b20      	cmp	r3, #32
 8009290:	d00c      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009292:	2b20      	cmp	r3, #32
 8009294:	d815      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d019      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800929a:	2b10      	cmp	r3, #16
 800929c:	d111      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929e:	4b77      	ldr	r3, [pc, #476]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a76      	ldr	r2, [pc, #472]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092aa:	e011      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b0:	3308      	adds	r3, #8
 80092b2:	2102      	movs	r1, #2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 f807 	bl	800a2c8 <RCCEx_PLL2_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092c0:	e006      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092c8:	e002      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092ca:	bf00      	nop
 80092cc:	e000      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80092d8:	4b68      	ldr	r3, [pc, #416]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e6:	4a65      	ldr	r2, [pc, #404]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e8:	430b      	orrs	r3, r1
 80092ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092ec:	e003      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009306:	2300      	movs	r3, #0
 8009308:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800930c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009310:	460b      	mov	r3, r1
 8009312:	4313      	orrs	r3, r2
 8009314:	d051      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d035      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009326:	d82e      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800932c:	d031      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800932e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009332:	d828      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009338:	d01a      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800933a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933e:	d822      	bhi.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	d007      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800934a:	e01c      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800934c:	4b4b      	ldr	r3, [pc, #300]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	4a4a      	ldr	r2, [pc, #296]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009358:	e01c      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935e:	3308      	adds	r3, #8
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ffb0 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800936e:	e011      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009374:	3328      	adds	r3, #40	; 0x28
 8009376:	2100      	movs	r1, #0
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f857 	bl	800a42c <RCCEx_PLL3_Config>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009384:	e006      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800938c:	e002      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800938e:	bf00      	nop
 8009390:	e000      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800939c:	4b37      	ldr	r3, [pc, #220]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093aa:	4a34      	ldr	r2, [pc, #208]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6513      	str	r3, [r2, #80]	; 0x50
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80093c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093ca:	2300      	movs	r3, #0
 80093cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d056      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093e4:	d033      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ea:	d82c      	bhi.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093f0:	d02f      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093f6:	d826      	bhi.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093fc:	d02b      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80093fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009402:	d820      	bhi.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009408:	d012      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800940a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800940e:	d81a      	bhi.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d022      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009418:	d115      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941e:	3308      	adds	r3, #8
 8009420:	2101      	movs	r1, #1
 8009422:	4618      	mov	r0, r3
 8009424:	f000 ff50 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800942e:	e015      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	3328      	adds	r3, #40	; 0x28
 8009436:	2101      	movs	r1, #1
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fff7 	bl	800a42c <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009444:	e00a      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800944c:	e006      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800944e:	bf00      	nop
 8009450:	e004      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009452:	bf00      	nop
 8009454:	e002      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800945a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10d      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009464:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009472:	4a02      	ldr	r2, [pc, #8]	; (800947c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009474:	430b      	orrs	r3, r1
 8009476:	6513      	str	r3, [r2, #80]	; 0x50
 8009478:	e006      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800947a:	bf00      	nop
 800947c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009498:	2300      	movs	r3, #0
 800949a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800949e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4313      	orrs	r3, r2
 80094a6:	d055      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b4:	d033      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80094b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ba:	d82c      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c0:	d02f      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80094c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c6:	d826      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094cc:	d02b      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80094ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094d2:	d820      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d8:	d012      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80094da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094de:	d81a      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d022      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e8:	d115      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	3308      	adds	r3, #8
 80094f0:	2101      	movs	r1, #1
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fee8 	bl	800a2c8 <RCCEx_PLL2_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094fe:	e015      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009504:	3328      	adds	r3, #40	; 0x28
 8009506:	2101      	movs	r1, #1
 8009508:	4618      	mov	r0, r3
 800950a:	f000 ff8f 	bl	800a42c <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009514:	e00a      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800951c:	e006      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800951e:	bf00      	nop
 8009520:	e004      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800952a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10b      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009534:	4ba3      	ldr	r3, [pc, #652]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009538:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800953c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009544:	4a9f      	ldr	r2, [pc, #636]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009546:	430b      	orrs	r3, r1
 8009548:	6593      	str	r3, [r2, #88]	; 0x58
 800954a:	e003      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009564:	2300      	movs	r3, #0
 8009566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800956a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800956e:	460b      	mov	r3, r1
 8009570:	4313      	orrs	r3, r2
 8009572:	d037      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957e:	d00e      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009584:	d816      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800958a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800958e:	d111      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009590:	4b8c      	ldr	r3, [pc, #560]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4a8b      	ldr	r2, [pc, #556]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800959c:	e00f      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800959e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a2:	3308      	adds	r3, #8
 80095a4:	2101      	movs	r1, #1
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fe8e 	bl	800a2c8 <RCCEx_PLL2_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095b2:	e004      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ba:	e000      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80095bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095c6:	4b7f      	ldr	r3, [pc, #508]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d4:	4a7b      	ldr	r2, [pc, #492]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d6:	430b      	orrs	r3, r1
 80095d8:	6513      	str	r3, [r2, #80]	; 0x50
 80095da:	e003      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80095f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80095fe:	460b      	mov	r3, r1
 8009600:	4313      	orrs	r3, r2
 8009602:	d039      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800960a:	2b03      	cmp	r3, #3
 800960c:	d81c      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009651 	.word	0x08009651
 8009618:	08009625 	.word	0x08009625
 800961c:	08009633 	.word	0x08009633
 8009620:	08009651 	.word	0x08009651
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009624:	4b67      	ldr	r3, [pc, #412]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	4a66      	ldr	r2, [pc, #408]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800962a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800962e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009630:	e00f      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009636:	3308      	adds	r3, #8
 8009638:	2102      	movs	r1, #2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fe44 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009646:	e004      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800964e:	e000      	b.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10a      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800965a:	4b5a      	ldr	r3, [pc, #360]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800965c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965e:	f023 0103 	bic.w	r1, r3, #3
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009668:	4a56      	ldr	r2, [pc, #344]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966a:	430b      	orrs	r3, r1
 800966c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800966e:	e003      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009688:	2300      	movs	r3, #0
 800968a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800968e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009692:	460b      	mov	r3, r1
 8009694:	4313      	orrs	r3, r2
 8009696:	f000 809f 	beq.w	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800969a:	4b4b      	ldr	r3, [pc, #300]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a4a      	ldr	r2, [pc, #296]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096a6:	f7fa fcad 	bl	8004004 <HAL_GetTick>
 80096aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096ae:	e00b      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096b0:	f7fa fca8 	bl	8004004 <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	2b64      	cmp	r3, #100	; 0x64
 80096be:	d903      	bls.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096c6:	e005      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096c8:	4b3f      	ldr	r3, [pc, #252]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0ed      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80096d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d179      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096dc:	4b39      	ldr	r3, [pc, #228]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096e8:	4053      	eors	r3, r2
 80096ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d015      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096f2:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096fe:	4b31      	ldr	r3, [pc, #196]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	4a30      	ldr	r2, [pc, #192]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009708:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800970a:	4b2e      	ldr	r3, [pc, #184]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970e:	4a2d      	ldr	r2, [pc, #180]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009714:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009716:	4a2b      	ldr	r2, [pc, #172]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800971c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972a:	d118      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972c:	f7fa fc6a 	bl	8004004 <HAL_GetTick>
 8009730:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009734:	e00d      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009736:	f7fa fc65 	bl	8004004 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	f241 3388 	movw	r3, #5000	; 0x1388
 8009746:	429a      	cmp	r2, r3
 8009748:	d903      	bls.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009750:	e005      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0eb      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800975e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009762:	2b00      	cmp	r3, #0
 8009764:	d129      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009776:	d10e      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009778:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009788:	091a      	lsrs	r2, r3, #4
 800978a:	4b10      	ldr	r3, [pc, #64]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800978c:	4013      	ands	r3, r2
 800978e:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009790:	430b      	orrs	r3, r1
 8009792:	6113      	str	r3, [r2, #16]
 8009794:	e005      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009796:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	4a0a      	ldr	r2, [pc, #40]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800979c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80097a0:	6113      	str	r3, [r2, #16]
 80097a2:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097b2:	4a04      	ldr	r2, [pc, #16]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6713      	str	r3, [r2, #112]	; 0x70
 80097b8:	e00e      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80097c2:	e009      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80097c4:	58024400 	.word	0x58024400
 80097c8:	58024800 	.word	0x58024800
 80097cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f002 0301 	and.w	r3, r2, #1
 80097e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097e8:	2300      	movs	r3, #0
 80097ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4313      	orrs	r3, r2
 80097f6:	f000 8089 	beq.w	800990c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009800:	2b28      	cmp	r3, #40	; 0x28
 8009802:	d86b      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	080098e5 	.word	0x080098e5
 8009810:	080098dd 	.word	0x080098dd
 8009814:	080098dd 	.word	0x080098dd
 8009818:	080098dd 	.word	0x080098dd
 800981c:	080098dd 	.word	0x080098dd
 8009820:	080098dd 	.word	0x080098dd
 8009824:	080098dd 	.word	0x080098dd
 8009828:	080098dd 	.word	0x080098dd
 800982c:	080098b1 	.word	0x080098b1
 8009830:	080098dd 	.word	0x080098dd
 8009834:	080098dd 	.word	0x080098dd
 8009838:	080098dd 	.word	0x080098dd
 800983c:	080098dd 	.word	0x080098dd
 8009840:	080098dd 	.word	0x080098dd
 8009844:	080098dd 	.word	0x080098dd
 8009848:	080098dd 	.word	0x080098dd
 800984c:	080098c7 	.word	0x080098c7
 8009850:	080098dd 	.word	0x080098dd
 8009854:	080098dd 	.word	0x080098dd
 8009858:	080098dd 	.word	0x080098dd
 800985c:	080098dd 	.word	0x080098dd
 8009860:	080098dd 	.word	0x080098dd
 8009864:	080098dd 	.word	0x080098dd
 8009868:	080098dd 	.word	0x080098dd
 800986c:	080098e5 	.word	0x080098e5
 8009870:	080098dd 	.word	0x080098dd
 8009874:	080098dd 	.word	0x080098dd
 8009878:	080098dd 	.word	0x080098dd
 800987c:	080098dd 	.word	0x080098dd
 8009880:	080098dd 	.word	0x080098dd
 8009884:	080098dd 	.word	0x080098dd
 8009888:	080098dd 	.word	0x080098dd
 800988c:	080098e5 	.word	0x080098e5
 8009890:	080098dd 	.word	0x080098dd
 8009894:	080098dd 	.word	0x080098dd
 8009898:	080098dd 	.word	0x080098dd
 800989c:	080098dd 	.word	0x080098dd
 80098a0:	080098dd 	.word	0x080098dd
 80098a4:	080098dd 	.word	0x080098dd
 80098a8:	080098dd 	.word	0x080098dd
 80098ac:	080098e5 	.word	0x080098e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b4:	3308      	adds	r3, #8
 80098b6:	2101      	movs	r1, #1
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fd05 	bl	800a2c8 <RCCEx_PLL2_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098c4:	e00f      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ca:	3328      	adds	r3, #40	; 0x28
 80098cc:	2101      	movs	r1, #1
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fdac 	bl	800a42c <RCCEx_PLL3_Config>
 80098d4:	4603      	mov	r3, r0
 80098d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098da:	e004      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098e2:	e000      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098ee:	4bbf      	ldr	r3, [pc, #764]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098fc:	4abb      	ldr	r2, [pc, #748]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6553      	str	r3, [r2, #84]	; 0x54
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f002 0302 	and.w	r3, r2, #2
 8009918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800991c:	2300      	movs	r3, #0
 800991e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009922:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009926:	460b      	mov	r3, r1
 8009928:	4313      	orrs	r3, r2
 800992a:	d041      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009932:	2b05      	cmp	r3, #5
 8009934:	d824      	bhi.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009989 	.word	0x08009989
 8009940:	08009955 	.word	0x08009955
 8009944:	0800996b 	.word	0x0800996b
 8009948:	08009989 	.word	0x08009989
 800994c:	08009989 	.word	0x08009989
 8009950:	08009989 	.word	0x08009989
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	3308      	adds	r3, #8
 800995a:	2101      	movs	r1, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fcb3 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009968:	e00f      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	3328      	adds	r3, #40	; 0x28
 8009970:	2101      	movs	r1, #1
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fd5a 	bl	800a42c <RCCEx_PLL3_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800997e:	e004      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009986:	e000      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009992:	4b96      	ldr	r3, [pc, #600]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009996:	f023 0107 	bic.w	r1, r3, #7
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a0:	4a92      	ldr	r2, [pc, #584]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099a2:	430b      	orrs	r3, r1
 80099a4:	6553      	str	r3, [r2, #84]	; 0x54
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f002 0304 	and.w	r3, r2, #4
 80099bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4313      	orrs	r3, r2
 80099ce:	d044      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d825      	bhi.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80099dc:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a31 	.word	0x08009a31
 80099e8:	080099fd 	.word	0x080099fd
 80099ec:	08009a13 	.word	0x08009a13
 80099f0:	08009a31 	.word	0x08009a31
 80099f4:	08009a31 	.word	0x08009a31
 80099f8:	08009a31 	.word	0x08009a31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	3308      	adds	r3, #8
 8009a02:	2101      	movs	r1, #1
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fc5f 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a10:	e00f      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a16:	3328      	adds	r3, #40	; 0x28
 8009a18:	2101      	movs	r1, #1
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fd06 	bl	800a42c <RCCEx_PLL3_Config>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a26:	e004      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a2e:	e000      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10b      	bne.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a3a:	4b6c      	ldr	r3, [pc, #432]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3e:	f023 0107 	bic.w	r1, r3, #7
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a4a:	4a68      	ldr	r2, [pc, #416]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8009a50:	e003      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f002 0320 	and.w	r3, r2, #32
 8009a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a74:	460b      	mov	r3, r1
 8009a76:	4313      	orrs	r3, r2
 8009a78:	d055      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a86:	d033      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a8c:	d82c      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a92:	d02f      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a98:	d826      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a9e:	d02b      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aa4:	d820      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aaa:	d012      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab0:	d81a      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d022      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aba:	d115      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fbff 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ad0:	e015      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad6:	3328      	adds	r3, #40	; 0x28
 8009ad8:	2102      	movs	r1, #2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fca6 	bl	800a42c <RCCEx_PLL3_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ae6:	e00a      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aee:	e006      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009af0:	bf00      	nop
 8009af2:	e004      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009af4:	bf00      	nop
 8009af6:	e002      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10b      	bne.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b06:	4b39      	ldr	r3, [pc, #228]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b16:	4a35      	ldr	r2, [pc, #212]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	6553      	str	r3, [r2, #84]	; 0x54
 8009b1c:	e003      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b36:	2300      	movs	r3, #0
 8009b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4313      	orrs	r3, r2
 8009b44:	d058      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b52:	d033      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b58:	d82c      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5e:	d02f      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b64:	d826      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b6a:	d02b      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b70:	d820      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b76:	d012      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b7c:	d81a      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d022      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b86:	d115      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fb99 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e015      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba2:	3328      	adds	r3, #40	; 0x28
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fc40 	bl	800a42c <RCCEx_PLL3_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bb2:	e00a      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bba:	e006      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bbc:	bf00      	nop
 8009bbe:	e004      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10e      	bne.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009be2:	4a02      	ldr	r2, [pc, #8]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009be4:	430b      	orrs	r3, r1
 8009be6:	6593      	str	r3, [r2, #88]	; 0x58
 8009be8:	e006      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009bea:	bf00      	nop
 8009bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d055      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c24:	d033      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c2a:	d82c      	bhi.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c30:	d02f      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c36:	d826      	bhi.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c3c:	d02b      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c42:	d820      	bhi.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c48:	d012      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4e:	d81a      	bhi.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d022      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c58:	d115      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5e:	3308      	adds	r3, #8
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fb30 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c6e:	e015      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c74:	3328      	adds	r3, #40	; 0x28
 8009c76:	2102      	movs	r1, #2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fbd7 	bl	800a42c <RCCEx_PLL3_Config>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c84:	e00a      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c8c:	e006      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c8e:	bf00      	nop
 8009c90:	e004      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c92:	bf00      	nop
 8009c94:	e002      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c96:	bf00      	nop
 8009c98:	e000      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca4:	4ba1      	ldr	r3, [pc, #644]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cb4:	4a9d      	ldr	r2, [pc, #628]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8009cba:	e003      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f002 0308 	and.w	r3, r2, #8
 8009cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d01e      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d10c      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf6:	3328      	adds	r3, #40	; 0x28
 8009cf8:	2102      	movs	r1, #2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fb96 	bl	800a42c <RCCEx_PLL3_Config>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d0c:	4b87      	ldr	r3, [pc, #540]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d1c:	4a83      	ldr	r2, [pc, #524]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f002 0310 	and.w	r3, r2, #16
 8009d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d32:	2300      	movs	r3, #0
 8009d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	d01e      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4e:	d10c      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d54:	3328      	adds	r3, #40	; 0x28
 8009d56:	2102      	movs	r1, #2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fb67 	bl	800a42c <RCCEx_PLL3_Config>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d6a:	4b70      	ldr	r3, [pc, #448]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d7a:	4a6c      	ldr	r2, [pc, #432]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	d03e      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dac:	d022      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db2:	d81b      	bhi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009dbe:	e015      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fa7d 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dd4:	e00f      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dda:	3328      	adds	r3, #40	; 0x28
 8009ddc:	2102      	movs	r1, #2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fb24 	bl	800a42c <RCCEx_PLL3_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dea:	e004      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009df2:	e000      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10b      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dfe:	4b4b      	ldr	r3, [pc, #300]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e0e:	4a47      	ldr	r2, [pc, #284]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e10:	430b      	orrs	r3, r1
 8009e12:	6593      	str	r3, [r2, #88]	; 0x58
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d03b      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e46:	d01f      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e4c:	d818      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e52:	d003      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e58:	d007      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e5a:	e011      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e5c:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	4a32      	ldr	r2, [pc, #200]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e68:	e00f      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6e:	3328      	adds	r3, #40	; 0x28
 8009e70:	2101      	movs	r1, #1
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fada 	bl	800a42c <RCCEx_PLL3_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e7e:	e004      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e86:	e000      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e92:	4b26      	ldr	r3, [pc, #152]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	4a22      	ldr	r2, [pc, #136]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	6553      	str	r3, [r2, #84]	; 0x54
 8009ea8:	e003      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8009ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d034      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d007      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009ede:	e011      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009eec:	e00e      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f9e6 	bl	800a2c8 <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f02:	e003      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10d      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	4a02      	ldr	r2, [pc, #8]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f28:	e006      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f46:	2300      	movs	r3, #0
 8009f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d00c      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	3328      	adds	r3, #40	; 0x28
 8009f5a:	2102      	movs	r1, #2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fa65 	bl	800a42c <RCCEx_PLL3_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8009f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009f84:	460b      	mov	r3, r1
 8009f86:	4313      	orrs	r3, r2
 8009f88:	d038      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f96:	d018      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f9c:	d811      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa2:	d014      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa8:	d80b      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d011      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb2:	d106      	bne.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb4:	4bc3      	ldr	r3, [pc, #780]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb8:	4ac2      	ldr	r2, [pc, #776]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fc8:	e004      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fdc:	4bb9      	ldr	r3, [pc, #740]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fec:	4ab5      	ldr	r2, [pc, #724]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fee:	430b      	orrs	r3, r1
 8009ff0:	6553      	str	r3, [r2, #84]	; 0x54
 8009ff2:	e003      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a008:	65bb      	str	r3, [r7, #88]	; 0x58
 800a00a:	2300      	movs	r3, #0
 800a00c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a00e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a012:	460b      	mov	r3, r1
 800a014:	4313      	orrs	r3, r2
 800a016:	d009      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a018:	4baa      	ldr	r3, [pc, #680]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a026:	4aa7      	ldr	r2, [pc, #668]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a028:	430b      	orrs	r3, r1
 800a02a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a038:	653b      	str	r3, [r7, #80]	; 0x50
 800a03a:	2300      	movs	r3, #0
 800a03c:	657b      	str	r3, [r7, #84]	; 0x54
 800a03e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a042:	460b      	mov	r3, r1
 800a044:	4313      	orrs	r3, r2
 800a046:	d00a      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a048:	4b9e      	ldr	r3, [pc, #632]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a058:	4a9a      	ldr	r2, [pc, #616]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a05a:	430b      	orrs	r3, r1
 800a05c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a06a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a06c:	2300      	movs	r3, #0
 800a06e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a070:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a074:	460b      	mov	r3, r1
 800a076:	4313      	orrs	r3, r2
 800a078:	d009      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a07a:	4b92      	ldr	r3, [pc, #584]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a07e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a088:	4a8e      	ldr	r2, [pc, #568]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a08a:	430b      	orrs	r3, r1
 800a08c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a09a:	643b      	str	r3, [r7, #64]	; 0x40
 800a09c:	2300      	movs	r3, #0
 800a09e:	647b      	str	r3, [r7, #68]	; 0x44
 800a0a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	d00e      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0aa:	4b86      	ldr	r3, [pc, #536]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	4a85      	ldr	r2, [pc, #532]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0b4:	6113      	str	r3, [r2, #16]
 800a0b6:	4b83      	ldr	r3, [pc, #524]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b8:	6919      	ldr	r1, [r3, #16]
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a0c2:	4a80      	ldr	r2, [pc, #512]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a0d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	d009      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0e4:	4b77      	ldr	r3, [pc, #476]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f2:	4a74      	ldr	r2, [pc, #464]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a104:	633b      	str	r3, [r7, #48]	; 0x30
 800a106:	2300      	movs	r3, #0
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
 800a10a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a10e:	460b      	mov	r3, r1
 800a110:	4313      	orrs	r3, r2
 800a112:	d00a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a114:	4b6b      	ldr	r3, [pc, #428]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a118:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a124:	4a67      	ldr	r2, [pc, #412]	; (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a126:	430b      	orrs	r3, r1
 800a128:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	2100      	movs	r1, #0
 800a134:	62b9      	str	r1, [r7, #40]	; 0x28
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a13c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a140:	460b      	mov	r3, r1
 800a142:	4313      	orrs	r3, r2
 800a144:	d011      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14a:	3308      	adds	r3, #8
 800a14c:	2100      	movs	r1, #0
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f8ba 	bl	800a2c8 <RCCEx_PLL2_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	2100      	movs	r1, #0
 800a174:	6239      	str	r1, [r7, #32]
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
 800a17c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a180:	460b      	mov	r3, r1
 800a182:	4313      	orrs	r3, r2
 800a184:	d011      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18a:	3308      	adds	r3, #8
 800a18c:	2101      	movs	r1, #1
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f89a 	bl	800a2c8 <RCCEx_PLL2_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	61b9      	str	r1, [r7, #24]
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	61fb      	str	r3, [r7, #28]
 800a1bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	d011      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f87a 	bl	800a2c8 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	6139      	str	r1, [r7, #16]
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a200:	460b      	mov	r3, r1
 800a202:	4313      	orrs	r3, r2
 800a204:	d011      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20a:	3328      	adds	r3, #40	; 0x28
 800a20c:	2100      	movs	r1, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f90c 	bl	800a42c <RCCEx_PLL3_Config>
 800a214:	4603      	mov	r3, r0
 800a216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	2100      	movs	r1, #0
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d011      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	3328      	adds	r3, #40	; 0x28
 800a24c:	2101      	movs	r1, #1
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f8ec 	bl	800a42c <RCCEx_PLL3_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	2100      	movs	r1, #0
 800a274:	6039      	str	r1, [r7, #0]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a280:	460b      	mov	r3, r1
 800a282:	4313      	orrs	r3, r2
 800a284:	d011      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	3328      	adds	r3, #40	; 0x28
 800a28c:	2102      	movs	r1, #2
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f8cc 	bl	800a42c <RCCEx_PLL3_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a2aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e000      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2c4:	58024400 	.word	0x58024400

0800a2c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2d6:	4b53      	ldr	r3, [pc, #332]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	f003 0303 	and.w	r3, r3, #3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d101      	bne.n	800a2e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e099      	b.n	800a41a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2e6:	4b4f      	ldr	r3, [pc, #316]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a4e      	ldr	r2, [pc, #312]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f2:	f7f9 fe87 	bl	8004004 <HAL_GetTick>
 800a2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2f8:	e008      	b.n	800a30c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2fa:	f7f9 fe83 	bl	8004004 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e086      	b.n	800a41a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a30c:	4b45      	ldr	r3, [pc, #276]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f0      	bne.n	800a2fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a318:	4b42      	ldr	r3, [pc, #264]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	031b      	lsls	r3, r3, #12
 800a326:	493f      	ldr	r1, [pc, #252]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	628b      	str	r3, [r1, #40]	; 0x28
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	3b01      	subs	r3, #1
 800a332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	025b      	lsls	r3, r3, #9
 800a33e:	b29b      	uxth	r3, r3
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	3b01      	subs	r3, #1
 800a348:	041b      	lsls	r3, r3, #16
 800a34a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	061b      	lsls	r3, r3, #24
 800a358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a35c:	4931      	ldr	r1, [pc, #196]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a362:	4b30      	ldr	r3, [pc, #192]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	492d      	ldr	r1, [pc, #180]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a374:	4b2b      	ldr	r3, [pc, #172]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a378:	f023 0220 	bic.w	r2, r3, #32
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	4928      	ldr	r1, [pc, #160]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a382:	4313      	orrs	r3, r2
 800a384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a386:	4b27      	ldr	r3, [pc, #156]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	4a26      	ldr	r2, [pc, #152]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a38c:	f023 0310 	bic.w	r3, r3, #16
 800a390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a392:	4b24      	ldr	r3, [pc, #144]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a396:	4b24      	ldr	r3, [pc, #144]	; (800a428 <RCCEx_PLL2_Config+0x160>)
 800a398:	4013      	ands	r3, r2
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	69d2      	ldr	r2, [r2, #28]
 800a39e:	00d2      	lsls	r2, r2, #3
 800a3a0:	4920      	ldr	r1, [pc, #128]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	f043 0310 	orr.w	r3, r3, #16
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	4a19      	ldr	r2, [pc, #100]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c4:	e00f      	b.n	800a3e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d106      	bne.n	800a3da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3cc:	4b15      	ldr	r3, [pc, #84]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3d8:	e005      	b.n	800a3e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3da:	4b12      	ldr	r3, [pc, #72]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	4a11      	ldr	r2, [pc, #68]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a0e      	ldr	r2, [pc, #56]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f2:	f7f9 fe07 	bl	8004004 <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3f8:	e008      	b.n	800a40c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3fa:	f7f9 fe03 	bl	8004004 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e006      	b.n	800a41a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <RCCEx_PLL2_Config+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0f0      	beq.n	800a3fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	58024400 	.word	0x58024400
 800a428:	ffff0007 	.word	0xffff0007

0800a42c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a43a:	4b53      	ldr	r3, [pc, #332]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b03      	cmp	r3, #3
 800a444:	d101      	bne.n	800a44a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e099      	b.n	800a57e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a44a:	4b4f      	ldr	r3, [pc, #316]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a4e      	ldr	r2, [pc, #312]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a456:	f7f9 fdd5 	bl	8004004 <HAL_GetTick>
 800a45a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a45c:	e008      	b.n	800a470 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a45e:	f7f9 fdd1 	bl	8004004 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d901      	bls.n	800a470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e086      	b.n	800a57e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a470:	4b45      	ldr	r3, [pc, #276]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f0      	bne.n	800a45e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a47c:	4b42      	ldr	r3, [pc, #264]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	051b      	lsls	r3, r3, #20
 800a48a:	493f      	ldr	r1, [pc, #252]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	628b      	str	r3, [r1, #40]	; 0x28
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	3b01      	subs	r3, #1
 800a496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	025b      	lsls	r3, r3, #9
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	041b      	lsls	r3, r3, #16
 800a4ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	061b      	lsls	r3, r3, #24
 800a4bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4c0:	4931      	ldr	r1, [pc, #196]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4c6:	4b30      	ldr	r3, [pc, #192]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	492d      	ldr	r1, [pc, #180]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4d8:	4b2b      	ldr	r3, [pc, #172]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	4928      	ldr	r1, [pc, #160]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4ea:	4b27      	ldr	r3, [pc, #156]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	4a26      	ldr	r2, [pc, #152]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4f6:	4b24      	ldr	r3, [pc, #144]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4fa:	4b24      	ldr	r3, [pc, #144]	; (800a58c <RCCEx_PLL3_Config+0x160>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	69d2      	ldr	r2, [r2, #28]
 800a502:	00d2      	lsls	r2, r2, #3
 800a504:	4920      	ldr	r1, [pc, #128]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a506:	4313      	orrs	r3, r2
 800a508:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a50a:	4b1f      	ldr	r3, [pc, #124]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	4a1e      	ldr	r2, [pc, #120]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a51c:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	4a19      	ldr	r2, [pc, #100]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a526:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a528:	e00f      	b.n	800a54a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d106      	bne.n	800a53e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a530:	4b15      	ldr	r3, [pc, #84]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	4a14      	ldr	r2, [pc, #80]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a53a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a53c:	e005      	b.n	800a54a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a53e:	4b12      	ldr	r3, [pc, #72]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	4a11      	ldr	r2, [pc, #68]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a0e      	ldr	r2, [pc, #56]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a556:	f7f9 fd55 	bl	8004004 <HAL_GetTick>
 800a55a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a55c:	e008      	b.n	800a570 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a55e:	f7f9 fd51 	bl	8004004 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e006      	b.n	800a57e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <RCCEx_PLL3_Config+0x15c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0f0      	beq.n	800a55e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	58024400 	.word	0x58024400
 800a58c:	ffff0007 	.word	0xffff0007

0800a590 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d101      	bne.n	800a5a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e02b      	b.n	800a5fc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f825 	bl	800a608 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f001 f9af 	bl	800b934 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	f001 fa03 	bl	800b9ec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <HAL_SDRAM_Init+0x74>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a06      	ldr	r2, [pc, #24]	; (800a604 <HAL_SDRAM_Init+0x74>)
 800a5ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	52004000 	.word	0x52004000

0800a608 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a62e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d101      	bne.n	800a63a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a636:	2302      	movs	r3, #2
 800a638:	e021      	b.n	800a67e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d002      	beq.n	800a646 <HAL_SDRAM_SendCommand+0x2a>
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	2b05      	cmp	r3, #5
 800a644:	d118      	bne.n	800a678 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2202      	movs	r2, #2
 800a64a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fa32 	bl	800bac0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d104      	bne.n	800a66e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2205      	movs	r2, #5
 800a668:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a66c:	e006      	b.n	800a67c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a676:	e001      	b.n	800a67c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e000      	b.n	800a67e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d101      	bne.n	800a6a0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a69c:	2302      	movs	r3, #2
 800a69e:	e016      	b.n	800a6ce <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d10f      	bne.n	800a6cc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f001 fa24 	bl	800bb08 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e000      	b.n	800a6ce <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e049      	b.n	800a77c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f89d 	bl	800a83c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2202      	movs	r2, #2
 800a706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3304      	adds	r3, #4
 800a712:	4619      	mov	r1, r3
 800a714:	4610      	mov	r0, r2
 800a716:	f000 f9f7 	bl	800ab08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6a1a      	ldr	r2, [r3, #32]
 800a79a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10f      	bne.n	800a7c4 <HAL_TIM_PWM_DeInit+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6a1a      	ldr	r2, [r3, #32]
 800a7aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d107      	bne.n	800a7c4 <HAL_TIM_PWM_DeInit+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 0201 	bic.w	r2, r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f843 	bl	800a850 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	2b02      	cmp	r3, #2
 800a878:	d122      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b02      	cmp	r3, #2
 800a886:	d11b      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f06f 0202 	mvn.w	r2, #2
 800a890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	f003 0303 	and.w	r3, r3, #3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f90f 	bl	800aaca <HAL_TIM_IC_CaptureCallback>
 800a8ac:	e005      	b.n	800a8ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f901 	bl	800aab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f912 	bl	800aade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f003 0304 	and.w	r3, r3, #4
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d122      	bne.n	800a914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d11b      	bne.n	800a914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f06f 0204 	mvn.w	r2, #4
 800a8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f8e5 	bl	800aaca <HAL_TIM_IC_CaptureCallback>
 800a900:	e005      	b.n	800a90e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f8d7 	bl	800aab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f8e8 	bl	800aade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	f003 0308 	and.w	r3, r3, #8
 800a91e:	2b08      	cmp	r3, #8
 800a920:	d122      	bne.n	800a968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d11b      	bne.n	800a968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0208 	mvn.w	r2, #8
 800a938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2204      	movs	r2, #4
 800a93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	69db      	ldr	r3, [r3, #28]
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8bb 	bl	800aaca <HAL_TIM_IC_CaptureCallback>
 800a954:	e005      	b.n	800a962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8ad 	bl	800aab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f8be 	bl	800aade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0310 	and.w	r3, r3, #16
 800a972:	2b10      	cmp	r3, #16
 800a974:	d122      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	f003 0310 	and.w	r3, r3, #16
 800a980:	2b10      	cmp	r3, #16
 800a982:	d11b      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f06f 0210 	mvn.w	r2, #16
 800a98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2208      	movs	r2, #8
 800a992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f891 	bl	800aaca <HAL_TIM_IC_CaptureCallback>
 800a9a8:	e005      	b.n	800a9b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f883 	bl	800aab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f894 	bl	800aade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d10e      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d107      	bne.n	800a9e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f06f 0201 	mvn.w	r2, #1
 800a9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f85d 	bl	800aaa2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b80      	cmp	r3, #128	; 0x80
 800a9f4:	d10e      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa00:	2b80      	cmp	r3, #128	; 0x80
 800aa02:	d107      	bne.n	800aa14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f91e 	bl	800ac50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa22:	d10e      	bne.n	800aa42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2e:	2b80      	cmp	r3, #128	; 0x80
 800aa30:	d107      	bne.n	800aa42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f911 	bl	800ac64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b40      	cmp	r3, #64	; 0x40
 800aa4e:	d10e      	bne.n	800aa6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	2b40      	cmp	r3, #64	; 0x40
 800aa5c:	d107      	bne.n	800aa6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f842 	bl	800aaf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d10e      	bne.n	800aa9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f003 0320 	and.w	r3, r3, #32
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	d107      	bne.n	800aa9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f06f 0220 	mvn.w	r2, #32
 800aa92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f8d1 	bl	800ac3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa9a:	bf00      	nop
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aae6:	bf00      	nop
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
	...

0800ab08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a40      	ldr	r2, [pc, #256]	; (800ac1c <TIM_Base_SetConfig+0x114>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d013      	beq.n	800ab48 <TIM_Base_SetConfig+0x40>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab26:	d00f      	beq.n	800ab48 <TIM_Base_SetConfig+0x40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a3d      	ldr	r2, [pc, #244]	; (800ac20 <TIM_Base_SetConfig+0x118>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00b      	beq.n	800ab48 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a3c      	ldr	r2, [pc, #240]	; (800ac24 <TIM_Base_SetConfig+0x11c>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d007      	beq.n	800ab48 <TIM_Base_SetConfig+0x40>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a3b      	ldr	r2, [pc, #236]	; (800ac28 <TIM_Base_SetConfig+0x120>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a3a      	ldr	r2, [pc, #232]	; (800ac2c <TIM_Base_SetConfig+0x124>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d108      	bne.n	800ab5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2f      	ldr	r2, [pc, #188]	; (800ac1c <TIM_Base_SetConfig+0x114>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01f      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab68:	d01b      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a2c      	ldr	r2, [pc, #176]	; (800ac20 <TIM_Base_SetConfig+0x118>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d017      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a2b      	ldr	r2, [pc, #172]	; (800ac24 <TIM_Base_SetConfig+0x11c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d013      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a2a      	ldr	r2, [pc, #168]	; (800ac28 <TIM_Base_SetConfig+0x120>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00f      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a29      	ldr	r2, [pc, #164]	; (800ac2c <TIM_Base_SetConfig+0x124>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00b      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a28      	ldr	r2, [pc, #160]	; (800ac30 <TIM_Base_SetConfig+0x128>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d007      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a27      	ldr	r2, [pc, #156]	; (800ac34 <TIM_Base_SetConfig+0x12c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d003      	beq.n	800aba2 <TIM_Base_SetConfig+0x9a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a26      	ldr	r2, [pc, #152]	; (800ac38 <TIM_Base_SetConfig+0x130>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d108      	bne.n	800abb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <TIM_Base_SetConfig+0x114>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d00f      	beq.n	800ac00 <TIM_Base_SetConfig+0xf8>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a12      	ldr	r2, [pc, #72]	; (800ac2c <TIM_Base_SetConfig+0x124>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00b      	beq.n	800ac00 <TIM_Base_SetConfig+0xf8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <TIM_Base_SetConfig+0x128>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_Base_SetConfig+0xf8>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <TIM_Base_SetConfig+0x12c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_Base_SetConfig+0xf8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <TIM_Base_SetConfig+0x130>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d103      	bne.n	800ac08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	615a      	str	r2, [r3, #20]
}
 800ac0e:	bf00      	nop
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40010000 	.word	0x40010000
 800ac20:	40000400 	.word	0x40000400
 800ac24:	40000800 	.word	0x40000800
 800ac28:	40000c00 	.word	0x40000c00
 800ac2c:	40010400 	.word	0x40010400
 800ac30:	40014000 	.word	0x40014000
 800ac34:	40014400 	.word	0x40014400
 800ac38:	40014800 	.word	0x40014800

0800ac3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	4613      	mov	r3, r2
 800ac86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d17b      	bne.n	800ad8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <HAL_UART_Transmit+0x26>
 800ac98:	88fb      	ldrh	r3, [r7, #6]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e074      	b.n	800ad8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2221      	movs	r2, #33	; 0x21
 800acae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acb2:	f7f9 f9a7 	bl	8004004 <HAL_GetTick>
 800acb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	88fa      	ldrh	r2, [r7, #6]
 800acbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	88fa      	ldrh	r2, [r7, #6]
 800acc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd0:	d108      	bne.n	800ace4 <HAL_UART_Transmit+0x6c>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	61bb      	str	r3, [r7, #24]
 800ace2:	e003      	b.n	800acec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ace8:	2300      	movs	r3, #0
 800acea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800acec:	e030      	b.n	800ad50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2200      	movs	r2, #0
 800acf6:	2180      	movs	r1, #128	; 0x80
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 fced 	bl	800b6d8 <UART_WaitOnFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e03d      	b.n	800ad8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	3302      	adds	r3, #2
 800ad2a:	61bb      	str	r3, [r7, #24]
 800ad2c:	e007      	b.n	800ad3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	3b01      	subs	r3, #1
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1c8      	bne.n	800acee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2200      	movs	r2, #0
 800ad64:	2140      	movs	r1, #64	; 0x40
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fcb6 	bl	800b6d8 <UART_WaitOnFlagUntilTimeout>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d005      	beq.n	800ad7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e006      	b.n	800ad8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	e000      	b.n	800ad8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ad8a:	2302      	movs	r3, #2
  }
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3720      	adds	r7, #32
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	; 0x28
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	4613      	mov	r3, r2
 800ada2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adaa:	2b20      	cmp	r3, #32
 800adac:	f040 80b5 	bne.w	800af1a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Receive+0x28>
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e0ad      	b.n	800af1c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2222      	movs	r2, #34	; 0x22
 800adcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800add6:	f7f9 f915 	bl	8004004 <HAL_GetTick>
 800adda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	88fa      	ldrh	r2, [r7, #6]
 800ade0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	88fa      	ldrh	r2, [r7, #6]
 800ade8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf4:	d10e      	bne.n	800ae14 <HAL_UART_Receive+0x80>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d105      	bne.n	800ae0a <HAL_UART_Receive+0x76>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ae04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae08:	e02d      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	22ff      	movs	r2, #255	; 0xff
 800ae0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae12:	e028      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10d      	bne.n	800ae38 <HAL_UART_Receive+0xa4>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <HAL_UART_Receive+0x9a>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	22ff      	movs	r2, #255	; 0xff
 800ae28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae2c:	e01b      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	227f      	movs	r2, #127	; 0x7f
 800ae32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae36:	e016      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae40:	d10d      	bne.n	800ae5e <HAL_UART_Receive+0xca>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <HAL_UART_Receive+0xc0>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	227f      	movs	r2, #127	; 0x7f
 800ae4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae52:	e008      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	223f      	movs	r2, #63	; 0x3f
 800ae58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae5c:	e003      	b.n	800ae66 <HAL_UART_Receive+0xd2>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae6c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae76:	d108      	bne.n	800ae8a <HAL_UART_Receive+0xf6>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d104      	bne.n	800ae8a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ae80:	2300      	movs	r3, #0
 800ae82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	e003      	b.n	800ae92 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ae92:	e036      	b.n	800af02 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2120      	movs	r1, #32
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 fc1a 	bl	800b6d8 <UART_WaitOnFlagUntilTimeout>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d005      	beq.n	800aeb6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e032      	b.n	800af1c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10c      	bne.n	800aed6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	8a7b      	ldrh	r3, [r7, #18]
 800aec6:	4013      	ands	r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	3302      	adds	r3, #2
 800aed2:	61bb      	str	r3, [r7, #24]
 800aed4:	e00c      	b.n	800aef0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	8a7b      	ldrh	r3, [r7, #18]
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	4013      	ands	r3, r2
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	3301      	adds	r3, #1
 800aeee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	3b01      	subs	r3, #1
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af08:	b29b      	uxth	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1c2      	bne.n	800ae94 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2220      	movs	r2, #32
 800af12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e000      	b.n	800af1c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800af1a:	2302      	movs	r3, #2
  }
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b0ba      	sub	sp, #232	; 0xe8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800af4e:	f640 030f 	movw	r3, #2063	; 0x80f
 800af52:	4013      	ands	r3, r2
 800af54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800af58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11b      	bne.n	800af98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d015      	beq.n	800af98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d105      	bne.n	800af84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d009      	beq.n	800af98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 8377 	beq.w	800b67c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	4798      	blx	r3
      }
      return;
 800af96:	e371      	b.n	800b67c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8123 	beq.w	800b1e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afa2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800afa6:	4b8d      	ldr	r3, [pc, #564]	; (800b1dc <HAL_UART_IRQHandler+0x2b8>)
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800afb2:	4b8b      	ldr	r3, [pc, #556]	; (800b1e0 <HAL_UART_IRQHandler+0x2bc>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 8116 	beq.w	800b1e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d011      	beq.n	800afec <HAL_UART_IRQHandler+0xc8>
 800afc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2201      	movs	r2, #1
 800afda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afe2:	f043 0201 	orr.w	r2, r3, #1
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aff0:	f003 0302 	and.w	r3, r3, #2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d011      	beq.n	800b01c <HAL_UART_IRQHandler+0xf8>
 800aff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2202      	movs	r2, #2
 800b00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b012:	f043 0204 	orr.w	r2, r3, #4
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d011      	beq.n	800b04c <HAL_UART_IRQHandler+0x128>
 800b028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2204      	movs	r2, #4
 800b03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b042:	f043 0202 	orr.w	r2, r3, #2
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b00      	cmp	r3, #0
 800b056:	d017      	beq.n	800b088 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b064:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b068:	4b5c      	ldr	r3, [pc, #368]	; (800b1dc <HAL_UART_IRQHandler+0x2b8>)
 800b06a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2208      	movs	r2, #8
 800b076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b07e:	f043 0208 	orr.w	r2, r3, #8
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b090:	2b00      	cmp	r3, #0
 800b092:	d012      	beq.n	800b0ba <HAL_UART_IRQHandler+0x196>
 800b094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b0:	f043 0220 	orr.w	r2, r3, #32
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 82dd 	beq.w	800b680 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d013      	beq.n	800b0fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d105      	bne.n	800b0ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10e:	2b40      	cmp	r3, #64	; 0x40
 800b110:	d005      	beq.n	800b11e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b116:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d054      	beq.n	800b1c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb42 	bl	800b7a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12e:	2b40      	cmp	r3, #64	; 0x40
 800b130:	d146      	bne.n	800b1c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b140:	e853 3f00 	ldrex	r3, [r3]
 800b144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3308      	adds	r3, #8
 800b15a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b15e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b16a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1d9      	bne.n	800b132 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b184:	2b00      	cmp	r3, #0
 800b186:	d017      	beq.n	800b1b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b18e:	4a15      	ldr	r2, [pc, #84]	; (800b1e4 <HAL_UART_IRQHandler+0x2c0>)
 800b190:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f9 fb89 	bl	80048b0 <HAL_DMA_Abort_IT>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d019      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b6:	e00f      	b.n	800b1d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fa77 	bl	800b6ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1be:	e00b      	b.n	800b1d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fa73 	bl	800b6ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c6:	e007      	b.n	800b1d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fa6f 	bl	800b6ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b1d6:	e253      	b.n	800b680 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d8:	bf00      	nop
    return;
 800b1da:	e251      	b.n	800b680 <HAL_UART_IRQHandler+0x75c>
 800b1dc:	10000001 	.word	0x10000001
 800b1e0:	04000120 	.word	0x04000120
 800b1e4:	0800b875 	.word	0x0800b875

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	f040 81e7 	bne.w	800b5c0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f6:	f003 0310 	and.w	r3, r3, #16
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 81e0 	beq.w	800b5c0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b204:	f003 0310 	and.w	r3, r3, #16
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 81d9 	beq.w	800b5c0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2210      	movs	r2, #16
 800b214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b220:	2b40      	cmp	r3, #64	; 0x40
 800b222:	f040 8151 	bne.w	800b4c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a96      	ldr	r2, [pc, #600]	; (800b488 <HAL_UART_IRQHandler+0x564>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d068      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a93      	ldr	r2, [pc, #588]	; (800b48c <HAL_UART_IRQHandler+0x568>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d061      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a91      	ldr	r2, [pc, #580]	; (800b490 <HAL_UART_IRQHandler+0x56c>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d05a      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a8e      	ldr	r2, [pc, #568]	; (800b494 <HAL_UART_IRQHandler+0x570>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d053      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a8c      	ldr	r2, [pc, #560]	; (800b498 <HAL_UART_IRQHandler+0x574>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d04c      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a89      	ldr	r2, [pc, #548]	; (800b49c <HAL_UART_IRQHandler+0x578>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d045      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a87      	ldr	r2, [pc, #540]	; (800b4a0 <HAL_UART_IRQHandler+0x57c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d03e      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a84      	ldr	r2, [pc, #528]	; (800b4a4 <HAL_UART_IRQHandler+0x580>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d037      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a82      	ldr	r2, [pc, #520]	; (800b4a8 <HAL_UART_IRQHandler+0x584>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d030      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a7f      	ldr	r2, [pc, #508]	; (800b4ac <HAL_UART_IRQHandler+0x588>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d029      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a7d      	ldr	r2, [pc, #500]	; (800b4b0 <HAL_UART_IRQHandler+0x58c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d022      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a7a      	ldr	r2, [pc, #488]	; (800b4b4 <HAL_UART_IRQHandler+0x590>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d01b      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a78      	ldr	r2, [pc, #480]	; (800b4b8 <HAL_UART_IRQHandler+0x594>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d014      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a75      	ldr	r2, [pc, #468]	; (800b4bc <HAL_UART_IRQHandler+0x598>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d00d      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a73      	ldr	r2, [pc, #460]	; (800b4c0 <HAL_UART_IRQHandler+0x59c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d006      	beq.n	800b306 <HAL_UART_IRQHandler+0x3e2>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a70      	ldr	r2, [pc, #448]	; (800b4c4 <HAL_UART_IRQHandler+0x5a0>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d106      	bne.n	800b314 <HAL_UART_IRQHandler+0x3f0>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	b29b      	uxth	r3, r3
 800b312:	e005      	b.n	800b320 <HAL_UART_IRQHandler+0x3fc>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 81ab 	beq.w	800b684 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b338:	429a      	cmp	r2, r3
 800b33a:	f080 81a3 	bcs.w	800b684 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b344:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b354:	f000 8087 	beq.w	800b466 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b36c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b386:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b38e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b392:	e841 2300 	strex	r3, r2, [r1]
 800b396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1da      	bne.n	800b358 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3b4:	f023 0301 	bic.w	r3, r3, #1
 800b3b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e1      	bne.n	800b3a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b402:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e3      	bne.n	800b3de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b434:	f023 0310 	bic.w	r3, r3, #16
 800b438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b446:	65bb      	str	r3, [r7, #88]	; 0x58
 800b448:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b44c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b44e:	e841 2300 	strex	r3, r2, [r1]
 800b452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e4      	bne.n	800b424 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b460:	4618      	mov	r0, r3
 800b462:	f7f8 ff07 	bl	8004274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b478:	b29b      	uxth	r3, r3
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f91d 	bl	800b6c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b486:	e0fd      	b.n	800b684 <HAL_UART_IRQHandler+0x760>
 800b488:	40020010 	.word	0x40020010
 800b48c:	40020028 	.word	0x40020028
 800b490:	40020040 	.word	0x40020040
 800b494:	40020058 	.word	0x40020058
 800b498:	40020070 	.word	0x40020070
 800b49c:	40020088 	.word	0x40020088
 800b4a0:	400200a0 	.word	0x400200a0
 800b4a4:	400200b8 	.word	0x400200b8
 800b4a8:	40020410 	.word	0x40020410
 800b4ac:	40020428 	.word	0x40020428
 800b4b0:	40020440 	.word	0x40020440
 800b4b4:	40020458 	.word	0x40020458
 800b4b8:	40020470 	.word	0x40020470
 800b4bc:	40020488 	.word	0x40020488
 800b4c0:	400204a0 	.word	0x400204a0
 800b4c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 80cf 	beq.w	800b688 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b4ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 80ca 	beq.w	800b688 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b516:	647b      	str	r3, [r7, #68]	; 0x44
 800b518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b51c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e4      	bne.n	800b4f4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	623b      	str	r3, [r7, #32]
   return(result);
 800b53a:	6a3a      	ldr	r2, [r7, #32]
 800b53c:	4b55      	ldr	r3, [pc, #340]	; (800b694 <HAL_UART_IRQHandler+0x770>)
 800b53e:	4013      	ands	r3, r2
 800b540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b54e:	633a      	str	r2, [r7, #48]	; 0x30
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b556:	e841 2300 	strex	r3, r2, [r1]
 800b55a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1e3      	bne.n	800b52a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	60fb      	str	r3, [r7, #12]
   return(result);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0310 	bic.w	r3, r3, #16
 800b58a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b598:	61fb      	str	r3, [r7, #28]
 800b59a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	69b9      	ldr	r1, [r7, #24]
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e4      	bne.n	800b576 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f881 	bl	800b6c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5be:	e063      	b.n	800b688 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00e      	beq.n	800b5ea <HAL_UART_IRQHandler+0x6c6>
 800b5cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d008      	beq.n	800b5ea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b5e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f987 	bl	800b8f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5e8:	e051      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d014      	beq.n	800b620 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d105      	bne.n	800b60e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d008      	beq.n	800b620 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b612:	2b00      	cmp	r3, #0
 800b614:	d03a      	beq.n	800b68c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4798      	blx	r3
    }
    return;
 800b61e:	e035      	b.n	800b68c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d009      	beq.n	800b640 <HAL_UART_IRQHandler+0x71c>
 800b62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b00      	cmp	r3, #0
 800b636:	d003      	beq.n	800b640 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f931 	bl	800b8a0 <UART_EndTransmit_IT>
    return;
 800b63e:	e026      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <HAL_UART_IRQHandler+0x73c>
 800b64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f960 	bl	800b91e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b65e:	e016      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d010      	beq.n	800b68e <HAL_UART_IRQHandler+0x76a>
 800b66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b670:	2b00      	cmp	r3, #0
 800b672:	da0c      	bge.n	800b68e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f948 	bl	800b90a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b67a:	e008      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
      return;
 800b67c:	bf00      	nop
 800b67e:	e006      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
    return;
 800b680:	bf00      	nop
 800b682:	e004      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
      return;
 800b684:	bf00      	nop
 800b686:	e002      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
      return;
 800b688:	bf00      	nop
 800b68a:	e000      	b.n	800b68e <HAL_UART_IRQHandler+0x76a>
    return;
 800b68c:	bf00      	nop
  }
}
 800b68e:	37e8      	adds	r7, #232	; 0xe8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	effffffe 	.word	0xeffffffe

0800b698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	603b      	str	r3, [r7, #0]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e8:	e049      	b.n	800b77e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6f0:	d045      	beq.n	800b77e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6f2:	f7f8 fc87 	bl	8004004 <HAL_GetTick>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	69ba      	ldr	r2, [r7, #24]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d302      	bcc.n	800b708 <UART_WaitOnFlagUntilTimeout+0x30>
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e048      	b.n	800b79e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	2b00      	cmp	r3, #0
 800b718:	d031      	beq.n	800b77e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	f003 0308 	and.w	r3, r3, #8
 800b724:	2b08      	cmp	r3, #8
 800b726:	d110      	bne.n	800b74a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2208      	movs	r2, #8
 800b72e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f000 f839 	bl	800b7a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2208      	movs	r2, #8
 800b73a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e029      	b.n	800b79e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b758:	d111      	bne.n	800b77e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 f81f 	bl	800b7a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2220      	movs	r2, #32
 800b76e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e00f      	b.n	800b79e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69da      	ldr	r2, [r3, #28]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4013      	ands	r3, r2
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	bf0c      	ite	eq
 800b78e:	2301      	moveq	r3, #1
 800b790:	2300      	movne	r3, #0
 800b792:	b2db      	uxtb	r3, r3
 800b794:	461a      	mov	r2, r3
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d0a6      	beq.n	800b6ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b095      	sub	sp, #84	; 0x54
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b7d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e6      	bne.n	800b7b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	4b1e      	ldr	r3, [pc, #120]	; (800b870 <UART_EndRxTransfer+0xc8>)
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b802:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e5      	bne.n	800b7e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d118      	bne.n	800b850 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	f023 0310 	bic.w	r3, r3, #16
 800b832:	647b      	str	r3, [r7, #68]	; 0x44
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	461a      	mov	r2, r3
 800b83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6979      	ldr	r1, [r7, #20]
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	613b      	str	r3, [r7, #16]
   return(result);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e6      	bne.n	800b81e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2220      	movs	r2, #32
 800b854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b864:	bf00      	nop
 800b866:	3754      	adds	r7, #84	; 0x54
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	effffffe 	.word	0xeffffffe

0800b874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff ff0a 	bl	800b6ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b898:	bf00      	nop
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8bc:	61fb      	str	r3, [r7, #28]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	61bb      	str	r3, [r7, #24]
 800b8c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ca:	6979      	ldr	r1, [r7, #20]
 800b8cc:	69ba      	ldr	r2, [r7, #24]
 800b8ce:	e841 2300 	strex	r3, r2, [r1]
 800b8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e6      	bne.n	800b8a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2220      	movs	r2, #32
 800b8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fed5 	bl	800b698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ee:	bf00      	nop
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8fe:	bf00      	nop
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b912:	bf00      	nop
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
	...

0800b934 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d121      	bne.n	800b98a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	4b27      	ldr	r3, [pc, #156]	; (800b9e8 <FMC_SDRAM_Init+0xb4>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	6851      	ldr	r1, [r2, #4]
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	6892      	ldr	r2, [r2, #8]
 800b956:	4311      	orrs	r1, r2
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	68d2      	ldr	r2, [r2, #12]
 800b95c:	4311      	orrs	r1, r2
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	6912      	ldr	r2, [r2, #16]
 800b962:	4311      	orrs	r1, r2
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	6952      	ldr	r2, [r2, #20]
 800b968:	4311      	orrs	r1, r2
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	6992      	ldr	r2, [r2, #24]
 800b96e:	4311      	orrs	r1, r2
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	69d2      	ldr	r2, [r2, #28]
 800b974:	4311      	orrs	r1, r2
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	6a12      	ldr	r2, [r2, #32]
 800b97a:	4311      	orrs	r1, r2
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b980:	430a      	orrs	r2, r1
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	e026      	b.n	800b9d8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	69d9      	ldr	r1, [r3, #28]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	4319      	orrs	r1, r3
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	; (800b9e8 <FMC_SDRAM_Init+0xb4>)
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	6851      	ldr	r1, [r2, #4]
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	6892      	ldr	r2, [r2, #8]
 800b9b8:	4311      	orrs	r1, r2
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	68d2      	ldr	r2, [r2, #12]
 800b9be:	4311      	orrs	r1, r2
 800b9c0:	683a      	ldr	r2, [r7, #0]
 800b9c2:	6912      	ldr	r2, [r2, #16]
 800b9c4:	4311      	orrs	r1, r2
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	6952      	ldr	r2, [r2, #20]
 800b9ca:	4311      	orrs	r1, r2
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	6992      	ldr	r2, [r2, #24]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	ffff8000 	.word	0xffff8000

0800b9ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d128      	bne.n	800ba50 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	1e59      	subs	r1, r3, #1
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	4319      	orrs	r1, r3
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	021b      	lsls	r3, r3, #8
 800ba1e:	4319      	orrs	r1, r3
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	031b      	lsls	r3, r3, #12
 800ba28:	4319      	orrs	r1, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	4319      	orrs	r1, r3
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	051b      	lsls	r3, r3, #20
 800ba3c:	4319      	orrs	r1, r3
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	061b      	lsls	r3, r3, #24
 800ba46:	430b      	orrs	r3, r1
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	609a      	str	r2, [r3, #8]
 800ba4e:	e02d      	b.n	800baac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	4b19      	ldr	r3, [pc, #100]	; (800babc <FMC_SDRAM_Timing_Init+0xd0>)
 800ba56:	4013      	ands	r3, r2
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	68d2      	ldr	r2, [r2, #12]
 800ba5c:	3a01      	subs	r2, #1
 800ba5e:	0311      	lsls	r1, r2, #12
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	6952      	ldr	r2, [r2, #20]
 800ba64:	3a01      	subs	r2, #1
 800ba66:	0512      	lsls	r2, r2, #20
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	1e59      	subs	r1, r3, #1
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	4319      	orrs	r1, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	4319      	orrs	r1, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	4319      	orrs	r1, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	061b      	lsls	r3, r3, #24
 800baa4:	430b      	orrs	r3, r1
 800baa6:	431a      	orrs	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	ff0f0fff 	.word	0xff0f0fff

0800bac0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	4b0c      	ldr	r3, [pc, #48]	; (800bb04 <FMC_SDRAM_SendCommand+0x44>)
 800bad2:	4013      	ands	r3, r2
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	6811      	ldr	r1, [r2, #0]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	6852      	ldr	r2, [r2, #4]
 800badc:	4311      	orrs	r1, r2
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	6892      	ldr	r2, [r2, #8]
 800bae2:	3a01      	subs	r2, #1
 800bae4:	0152      	lsls	r2, r2, #5
 800bae6:	4311      	orrs	r1, r2
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	68d2      	ldr	r2, [r2, #12]
 800baec:	0252      	lsls	r2, r2, #9
 800baee:	430a      	orrs	r2, r1
 800baf0:	431a      	orrs	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	ffc00000 	.word	0xffc00000

0800bb08 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	695a      	ldr	r2, [r3, #20]
 800bb16:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	0052      	lsls	r2, r2, #1
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	ffffc001 	.word	0xffffc001

0800bb38 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	601a      	str	r2, [r3, #0]
}
 800bb74:	bf00      	nop
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6892      	ldr	r2, [r2, #8]
 800bb96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	6852      	ldr	r2, [r2, #4]
 800bba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d103      	bne.n	800bbb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	1e5a      	subs	r2, r3, #1
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbde:	4b4f      	ldr	r3, [pc, #316]	; (800bd1c <xTaskIncrementTick+0x148>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f040 808f 	bne.w	800bd06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbe8:	4b4d      	ldr	r3, [pc, #308]	; (800bd20 <xTaskIncrementTick+0x14c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3301      	adds	r3, #1
 800bbee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbf0:	4a4b      	ldr	r2, [pc, #300]	; (800bd20 <xTaskIncrementTick+0x14c>)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d120      	bne.n	800bc3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbfc:	4b49      	ldr	r3, [pc, #292]	; (800bd24 <xTaskIncrementTick+0x150>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00a      	beq.n	800bc1c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc18:	bf00      	nop
 800bc1a:	e7fe      	b.n	800bc1a <xTaskIncrementTick+0x46>
 800bc1c:	4b41      	ldr	r3, [pc, #260]	; (800bd24 <xTaskIncrementTick+0x150>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	4b41      	ldr	r3, [pc, #260]	; (800bd28 <xTaskIncrementTick+0x154>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a3f      	ldr	r2, [pc, #252]	; (800bd24 <xTaskIncrementTick+0x150>)
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	4a3f      	ldr	r2, [pc, #252]	; (800bd28 <xTaskIncrementTick+0x154>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	4b3e      	ldr	r3, [pc, #248]	; (800bd2c <xTaskIncrementTick+0x158>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3301      	adds	r3, #1
 800bc36:	4a3d      	ldr	r2, [pc, #244]	; (800bd2c <xTaskIncrementTick+0x158>)
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	f000 f8e3 	bl	800be04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc3e:	4b3c      	ldr	r3, [pc, #240]	; (800bd30 <xTaskIncrementTick+0x15c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d349      	bcc.n	800bcdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc48:	4b36      	ldr	r3, [pc, #216]	; (800bd24 <xTaskIncrementTick+0x150>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d104      	bne.n	800bc5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc52:	4b37      	ldr	r3, [pc, #220]	; (800bd30 <xTaskIncrementTick+0x15c>)
 800bc54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc58:	601a      	str	r2, [r3, #0]
					break;
 800bc5a:	e03f      	b.n	800bcdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5c:	4b31      	ldr	r3, [pc, #196]	; (800bd24 <xTaskIncrementTick+0x150>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d203      	bcs.n	800bc7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc74:	4a2e      	ldr	r2, [pc, #184]	; (800bd30 <xTaskIncrementTick+0x15c>)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc7a:	e02f      	b.n	800bcdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff ff7d 	bl	800bb80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	3318      	adds	r3, #24
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff ff74 	bl	800bb80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9c:	4b25      	ldr	r3, [pc, #148]	; (800bd34 <xTaskIncrementTick+0x160>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d903      	bls.n	800bcac <xTaskIncrementTick+0xd8>
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	4a22      	ldr	r2, [pc, #136]	; (800bd34 <xTaskIncrementTick+0x160>)
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4a1f      	ldr	r2, [pc, #124]	; (800bd38 <xTaskIncrementTick+0x164>)
 800bcba:	441a      	add	r2, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f7ff ff38 	bl	800bb38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4b1b      	ldr	r3, [pc, #108]	; (800bd3c <xTaskIncrementTick+0x168>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d3b8      	bcc.n	800bc48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcda:	e7b5      	b.n	800bc48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcdc:	4b17      	ldr	r3, [pc, #92]	; (800bd3c <xTaskIncrementTick+0x168>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce2:	4915      	ldr	r1, [pc, #84]	; (800bd38 <xTaskIncrementTick+0x164>)
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d901      	bls.n	800bcf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcf8:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <xTaskIncrementTick+0x16c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d007      	beq.n	800bd10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd00:	2301      	movs	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]
 800bd04:	e004      	b.n	800bd10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd06:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <xTaskIncrementTick+0x170>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	4a0d      	ldr	r2, [pc, #52]	; (800bd44 <xTaskIncrementTick+0x170>)
 800bd0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd10:	697b      	ldr	r3, [r7, #20]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	24001510 	.word	0x24001510
 800bd20:	240014f4 	.word	0x240014f4
 800bd24:	240014ec 	.word	0x240014ec
 800bd28:	240014f0 	.word	0x240014f0
 800bd2c:	24001508 	.word	0x24001508
 800bd30:	2400150c 	.word	0x2400150c
 800bd34:	240014f8 	.word	0x240014f8
 800bd38:	2400108c 	.word	0x2400108c
 800bd3c:	24001088 	.word	0x24001088
 800bd40:	24001504 	.word	0x24001504
 800bd44:	24001500 	.word	0x24001500

0800bd48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd4e:	4b28      	ldr	r3, [pc, #160]	; (800bdf0 <vTaskSwitchContext+0xa8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d003      	beq.n	800bd5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd56:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <vTaskSwitchContext+0xac>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd5c:	e041      	b.n	800bde2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bd5e:	4b25      	ldr	r3, [pc, #148]	; (800bdf4 <vTaskSwitchContext+0xac>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd64:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <vTaskSwitchContext+0xb0>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e010      	b.n	800bd8e <vTaskSwitchContext+0x46>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	607b      	str	r3, [r7, #4]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <vTaskSwitchContext+0x3e>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	491b      	ldr	r1, [pc, #108]	; (800bdfc <vTaskSwitchContext+0xb4>)
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0e4      	beq.n	800bd6c <vTaskSwitchContext+0x24>
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	4613      	mov	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4a13      	ldr	r2, [pc, #76]	; (800bdfc <vTaskSwitchContext+0xb4>)
 800bdae:	4413      	add	r3, r2
 800bdb0:	60bb      	str	r3, [r7, #8]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	605a      	str	r2, [r3, #4]
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d104      	bne.n	800bdd2 <vTaskSwitchContext+0x8a>
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	605a      	str	r2, [r3, #4]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	4a09      	ldr	r2, [pc, #36]	; (800be00 <vTaskSwitchContext+0xb8>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	4a06      	ldr	r2, [pc, #24]	; (800bdf8 <vTaskSwitchContext+0xb0>)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6013      	str	r3, [r2, #0]
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	24001510 	.word	0x24001510
 800bdf4:	24001504 	.word	0x24001504
 800bdf8:	240014f8 	.word	0x240014f8
 800bdfc:	2400108c 	.word	0x2400108c
 800be00:	24001088 	.word	0x24001088

0800be04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d104      	bne.n	800be1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be1c:	e008      	b.n	800be30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a04      	ldr	r2, [pc, #16]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	240014ec 	.word	0x240014ec
 800be40:	2400150c 	.word	0x2400150c

0800be44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <xTaskGetSchedulerState+0x34>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d102      	bne.n	800be58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be52:	2301      	movs	r3, #1
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e008      	b.n	800be6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be58:	4b08      	ldr	r3, [pc, #32]	; (800be7c <xTaskGetSchedulerState+0x38>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d102      	bne.n	800be66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be60:	2302      	movs	r3, #2
 800be62:	607b      	str	r3, [r7, #4]
 800be64:	e001      	b.n	800be6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be66:	2300      	movs	r3, #0
 800be68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be6a:	687b      	ldr	r3, [r7, #4]
	}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	240014fc 	.word	0x240014fc
 800be7c:	24001510 	.word	0x24001510

0800be80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <pxCurrentTCBConst2>)
 800be82:	6819      	ldr	r1, [r3, #0]
 800be84:	6808      	ldr	r0, [r1, #0]
 800be86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8a:	f380 8809 	msr	PSP, r0
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f04f 0000 	mov.w	r0, #0
 800be96:	f380 8811 	msr	BASEPRI, r0
 800be9a:	4770      	bx	lr
 800be9c:	f3af 8000 	nop.w

0800bea0 <pxCurrentTCBConst2>:
 800bea0:	24001088 	.word	0x24001088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
	...

0800beb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800beb0:	f3ef 8009 	mrs	r0, PSP
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <pxCurrentTCBConst>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	f01e 0f10 	tst.w	lr, #16
 800bec0:	bf08      	it	eq
 800bec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beca:	6010      	str	r0, [r2, #0]
 800becc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bed4:	f380 8811 	msr	BASEPRI, r0
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f7ff ff32 	bl	800bd48 <vTaskSwitchContext>
 800bee4:	f04f 0000 	mov.w	r0, #0
 800bee8:	f380 8811 	msr	BASEPRI, r0
 800beec:	bc09      	pop	{r0, r3}
 800beee:	6819      	ldr	r1, [r3, #0]
 800bef0:	6808      	ldr	r0, [r1, #0]
 800bef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef6:	f01e 0f10 	tst.w	lr, #16
 800befa:	bf08      	it	eq
 800befc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf00:	f380 8809 	msr	PSP, r0
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	f3af 8000 	nop.w

0800bf10 <pxCurrentTCBConst>:
 800bf10:	24001088 	.word	0x24001088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop

0800bf18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	607b      	str	r3, [r7, #4]
}
 800bf30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf32:	f7ff fe4f 	bl	800bbd4 <xTaskIncrementTick>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d003      	beq.n	800bf44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <xPortSysTickHandler+0x40>)
 800bf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	2300      	movs	r3, #0
 800bf46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <sweeperMain>:
 */

static TS_State_t TS_State;

void sweeperMain()
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
  Game_State = 1;
 800bf62:	4b74      	ldr	r3, [pc, #464]	; (800c134 <sweeperMain+0x1d8>)
 800bf64:	2201      	movs	r2, #1
 800bf66:	701a      	strb	r2, [r3, #0]
  flag = 0;
 800bf68:	4b73      	ldr	r3, [pc, #460]	; (800c138 <sweeperMain+0x1dc>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	701a      	strb	r2, [r3, #0]
  BSP_LCD_GetXSize(0, &x_size);
 800bf6e:	4973      	ldr	r1, [pc, #460]	; (800c13c <sweeperMain+0x1e0>)
 800bf70:	2000      	movs	r0, #0
 800bf72:	f7f6 fee7 	bl	8002d44 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800bf76:	4972      	ldr	r1, [pc, #456]	; (800c140 <sweeperMain+0x1e4>)
 800bf78:	2000      	movs	r0, #0
 800bf7a:	f7f6 ff01 	bl	8002d80 <BSP_LCD_GetYSize>
  /*##-6- Draw the menu ######################################################*/
  Draw_Menu();
 800bf7e:	f000 f8f9 	bl	800c174 <Draw_Menu>

  // define time for random

  Time_playinf = HAL_GetTick();
 800bf82:	f7f8 f83f 	bl	8004004 <HAL_GetTick>
 800bf86:	4603      	mov	r3, r0
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4b6e      	ldr	r3, [pc, #440]	; (800c144 <sweeperMain+0x1e8>)
 800bf8c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 23; i++)
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e017      	b.n	800bfc4 <sweeperMain+0x68>
  {
    for (int j = 0; j < 11; j++)
 800bf94:	2300      	movs	r3, #0
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	e00e      	b.n	800bfb8 <sweeperMain+0x5c>
    {
      tab[i][j] = 0;
 800bf9a:	496b      	ldr	r1, [pc, #428]	; (800c148 <sweeperMain+0x1ec>)
 800bf9c:	69fa      	ldr	r2, [r7, #28]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	18ca      	adds	r2, r1, r3
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	4413      	add	r3, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 11; j++)
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	61bb      	str	r3, [r7, #24]
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b0a      	cmp	r3, #10
 800bfbc:	dded      	ble.n	800bf9a <sweeperMain+0x3e>
  for (int i = 0; i < 23; i++)
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	61fb      	str	r3, [r7, #28]
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	2b16      	cmp	r3, #22
 800bfc8:	dde4      	ble.n	800bf94 <sweeperMain+0x38>
    }
  }

  int num_mine = Mine_Num;
 800bfca:	4b60      	ldr	r3, [pc, #384]	; (800c14c <sweeperMain+0x1f0>)
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	617b      	str	r3, [r7, #20]
  while (num_mine != 0)
 800bfd0:	e03d      	b.n	800c04e <sweeperMain+0xf2>
  {
    int j = rand() % 11;
 800bfd2:	f001 fecb 	bl	800dd6c <rand>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	4b5d      	ldr	r3, [pc, #372]	; (800c150 <sweeperMain+0x1f4>)
 800bfda:	fb83 1302 	smull	r1, r3, r3, r2
 800bfde:	1059      	asrs	r1, r3, #1
 800bfe0:	17d3      	asrs	r3, r2, #31
 800bfe2:	1ac9      	subs	r1, r1, r3
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	440b      	add	r3, r1
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	60fb      	str	r3, [r7, #12]
    int i = rand() % 23;
 800bff2:	f001 febb 	bl	800dd6c <rand>
 800bff6:	4602      	mov	r2, r0
 800bff8:	4b56      	ldr	r3, [pc, #344]	; (800c154 <sweeperMain+0x1f8>)
 800bffa:	fb83 1302 	smull	r1, r3, r3, r2
 800bffe:	4413      	add	r3, r2
 800c000:	1119      	asrs	r1, r3, #4
 800c002:	17d3      	asrs	r3, r2, #31
 800c004:	1ac9      	subs	r1, r1, r3
 800c006:	460b      	mov	r3, r1
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	440b      	add	r3, r1
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	1a5b      	subs	r3, r3, r1
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	60bb      	str	r3, [r7, #8]
    if (tab[i][j] == 0)
 800c014:	494c      	ldr	r1, [pc, #304]	; (800c148 <sweeperMain+0x1ec>)
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	4413      	add	r3, r2
 800c022:	18ca      	adds	r2, r1, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	f993 3000 	ldrsb.w	r3, [r3]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10e      	bne.n	800c04e <sweeperMain+0xf2>
    {
      num_mine--;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	3b01      	subs	r3, #1
 800c034:	617b      	str	r3, [r7, #20]
      tab[i][j] = -1;
 800c036:	4944      	ldr	r1, [pc, #272]	; (800c148 <sweeperMain+0x1ec>)
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	18ca      	adds	r2, r1, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	4413      	add	r3, r2
 800c04a:	22ff      	movs	r2, #255	; 0xff
 800c04c:	701a      	strb	r2, [r3, #0]
  while (num_mine != 0)
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1be      	bne.n	800bfd2 <sweeperMain+0x76>
    }
  }

  Set_Numbers();
 800c054:	f000 fa7a 	bl	800c54c <Set_Numbers>

  while (1)
  {
    if (Game_State == 2)
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <sweeperMain+0x1d8>)
 800c05a:	f993 3000 	ldrsb.w	r3, [r3]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d102      	bne.n	800c068 <sweeperMain+0x10c>
      Mine_Selection_Position();
 800c062:	f001 fc61 	bl	800d928 <Mine_Selection_Position>
 800c066:	e7f7      	b.n	800c058 <sweeperMain+0xfc>
    else if (Game_State == 1)
 800c068:	4b32      	ldr	r3, [pc, #200]	; (800c134 <sweeperMain+0x1d8>)
 800c06a:	f993 3000 	ldrsb.w	r3, [r3]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d12d      	bne.n	800c0ce <sweeperMain+0x172>
    {

      if ((HAL_GetTick() - Time_playinf) > 1000)
 800c072:	f7f7 ffc7 	bl	8004004 <HAL_GetTick>
 800c076:	4603      	mov	r3, r0
 800c078:	4a32      	ldr	r2, [pc, #200]	; (800c144 <sweeperMain+0x1e8>)
 800c07a:	6812      	ldr	r2, [r2, #0]
 800c07c:	1a9b      	subs	r3, r3, r2
 800c07e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c082:	d9e9      	bls.n	800c058 <sweeperMain+0xfc>
      {
        int sekind = (HAL_GetTick() - Time_playinf) / 1000;
 800c084:	f7f7 ffbe 	bl	8004004 <HAL_GetTick>
 800c088:	4603      	mov	r3, r0
 800c08a:	4a2e      	ldr	r2, [pc, #184]	; (800c144 <sweeperMain+0x1e8>)
 800c08c:	6812      	ldr	r2, [r2, #0]
 800c08e:	1a9b      	subs	r3, r3, r2
 800c090:	4a31      	ldr	r2, [pc, #196]	; (800c158 <sweeperMain+0x1fc>)
 800c092:	fba2 2303 	umull	r2, r3, r2, r3
 800c096:	099b      	lsrs	r3, r3, #6
 800c098:	613b      	str	r3, [r7, #16]
        UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800c09a:	4830      	ldr	r0, [pc, #192]	; (800c15c <sweeperMain+0x200>)
 800c09c:	f7f4 fbea 	bl	8000874 <UTIL_LCD_SetTextColor>
        UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800c0a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c0a4:	f7f4 fbfa 	bl	800089c <UTIL_LCD_SetBackColor>
        UTIL_LCD_SetFont(&Font16);
 800c0a8:	482d      	ldr	r0, [pc, #180]	; (800c160 <sweeperMain+0x204>)
 800c0aa:	f7f4 fc0b 	bl	80008c4 <UTIL_LCD_SetFont>
        char st[3];
        sprintf(st, "%3d", sekind);
 800c0ae:	1d3b      	adds	r3, r7, #4
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	492c      	ldr	r1, [pc, #176]	; (800c164 <sweeperMain+0x208>)
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f001 fe97 	bl	800dde8 <siprintf>
        UTIL_LCD_DisplayStringAt(420, 15, (uint8_t *)st, LEFT_MODE);
 800c0ba:	1d3a      	adds	r2, r7, #4
 800c0bc:	2303      	movs	r3, #3
 800c0be:	210f      	movs	r1, #15
 800c0c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800c0c4:	f7f4 fd1a 	bl	8000afc <UTIL_LCD_DisplayStringAt>
        GetPosition();
 800c0c8:	f000 fe6a 	bl	800cda0 <GetPosition>
 800c0cc:	e7c4      	b.n	800c058 <sweeperMain+0xfc>
      }
    }
    else if (Game_State == 0)
 800c0ce:	4b19      	ldr	r3, [pc, #100]	; (800c134 <sweeperMain+0x1d8>)
 800c0d0:	f993 3000 	ldrsb.w	r3, [r3]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d120      	bne.n	800c11a <sweeperMain+0x1be>
    {
      BSP_TS_GetState(0, &TS_State);
 800c0d8:	4923      	ldr	r1, [pc, #140]	; (800c168 <sweeperMain+0x20c>)
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f7f7 fd94 	bl	8003c08 <BSP_TS_GetState>
      x = TS_State.TouchX;
 800c0e0:	4b21      	ldr	r3, [pc, #132]	; (800c168 <sweeperMain+0x20c>)
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	4b21      	ldr	r3, [pc, #132]	; (800c16c <sweeperMain+0x210>)
 800c0e8:	801a      	strh	r2, [r3, #0]
      y = TS_State.TouchY;
 800c0ea:	4b1f      	ldr	r3, [pc, #124]	; (800c168 <sweeperMain+0x20c>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	4b1f      	ldr	r3, [pc, #124]	; (800c170 <sweeperMain+0x214>)
 800c0f2:	801a      	strh	r2, [r3, #0]
      if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
 800c0f4:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <sweeperMain+0x210>)
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	2bdc      	cmp	r3, #220	; 0xdc
 800c0fa:	d9ad      	bls.n	800c058 <sweeperMain+0xfc>
 800c0fc:	4b1b      	ldr	r3, [pc, #108]	; (800c16c <sweeperMain+0x210>)
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	2bfe      	cmp	r3, #254	; 0xfe
 800c102:	d8a9      	bhi.n	800c058 <sweeperMain+0xfc>
 800c104:	4b1a      	ldr	r3, [pc, #104]	; (800c170 <sweeperMain+0x214>)
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	2b07      	cmp	r3, #7
 800c10a:	d9a5      	bls.n	800c058 <sweeperMain+0xfc>
 800c10c:	4b18      	ldr	r3, [pc, #96]	; (800c170 <sweeperMain+0x214>)
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	2b20      	cmp	r3, #32
 800c112:	d8a1      	bhi.n	800c058 <sweeperMain+0xfc>
      {

        Reset_Game();
 800c114:	f001 fdb0 	bl	800dc78 <Reset_Game>
 800c118:	e79e      	b.n	800c058 <sweeperMain+0xfc>
      }
    }
    else if (Game_State == -1)
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <sweeperMain+0x1d8>)
 800c11c:	f993 3000 	ldrsb.w	r3, [r3]
 800c120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c124:	d000      	beq.n	800c128 <sweeperMain+0x1cc>
    if (Game_State == 2)
 800c126:	e797      	b.n	800c058 <sweeperMain+0xfc>
    {
      break;
 800c128:	bf00      	nop
    }
  }
}
 800c12a:	bf00      	nop
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	24000058 	.word	0x24000058
 800c138:	24001611 	.word	0x24001611
 800c13c:	2400161c 	.word	0x2400161c
 800c140:	24001620 	.word	0x24001620
 800c144:	24001628 	.word	0x24001628
 800c148:	24001514 	.word	0x24001514
 800c14c:	24000056 	.word	0x24000056
 800c150:	2e8ba2e9 	.word	0x2e8ba2e9
 800c154:	b21642c9 	.word	0xb21642c9
 800c158:	10624dd3 	.word	0x10624dd3
 800c15c:	ffff0000 	.word	0xffff0000
 800c160:	24000008 	.word	0x24000008
 800c164:	0800f1f8 	.word	0x0800f1f8
 800c168:	2400162c 	.word	0x2400162c
 800c16c:	24001612 	.word	0x24001612
 800c170:	24001614 	.word	0x24001614

0800c174 <Draw_Menu>:
 * @brief  Draws the menu.
 * @param  None
 * @retval None
 */
static void Draw_Menu(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af02      	add	r7, sp, #8
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
 800c17a:	2000      	movs	r0, #0
 800c17c:	f7f4 fb5c 	bl	8000838 <UTIL_LCD_SetLayer>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800c180:	4898      	ldr	r0, [pc, #608]	; (800c3e4 <Draw_Menu+0x270>)
 800c182:	f7f4 fc6f 	bl	8000a64 <UTIL_LCD_Clear>

  // border around screen
  UTIL_LCD_DrawRect(0, 0, x_size - 2, 2, UTIL_LCD_COLOR_WHITE);
 800c186:	4b98      	ldr	r3, [pc, #608]	; (800c3e8 <Draw_Menu+0x274>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	1e9a      	subs	r2, r3, #2
 800c18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	2302      	movs	r3, #2
 800c194:	2100      	movs	r1, #0
 800c196:	2000      	movs	r0, #0
 800c198:	f7f4 fd5e 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(0, 0, 2, y_size, UTIL_LCD_COLOR_WHITE);
 800c19c:	4b93      	ldr	r3, [pc, #588]	; (800c3ec <Draw_Menu+0x278>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1a4:	9200      	str	r2, [sp, #0]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f7f4 fd54 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 2, 1, 2, y_size, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c1b0:	4b8d      	ldr	r3, [pc, #564]	; (800c3e8 <Draw_Menu+0x274>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	1e98      	subs	r0, r3, #2
 800c1b6:	4b8d      	ldr	r3, [pc, #564]	; (800c3ec <Draw_Menu+0x278>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a8d      	ldr	r2, [pc, #564]	; (800c3f0 <Draw_Menu+0x27c>)
 800c1bc:	9200      	str	r2, [sp, #0]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	f7f4 fd49 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(1, y_size - 2, x_size, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c1c6:	4b89      	ldr	r3, [pc, #548]	; (800c3ec <Draw_Menu+0x278>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	1e99      	subs	r1, r3, #2
 800c1cc:	4b86      	ldr	r3, [pc, #536]	; (800c3e8 <Draw_Menu+0x274>)
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	4b87      	ldr	r3, [pc, #540]	; (800c3f0 <Draw_Menu+0x27c>)
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	f7f4 fd3e 	bl	8000c58 <UTIL_LCD_DrawRect>

  // top section
  UTIL_LCD_DrawRect(8, 6, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c1dc:	4b82      	ldr	r3, [pc, #520]	; (800c3e8 <Draw_Menu+0x274>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1a3 0210 	sub.w	r2, r3, #16
 800c1e4:	4b82      	ldr	r3, [pc, #520]	; (800c3f0 <Draw_Menu+0x27c>)
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	2106      	movs	r1, #6
 800c1ec:	2008      	movs	r0, #8
 800c1ee:	f7f4 fd33 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 6, 2, 30, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c1f2:	4b7f      	ldr	r3, [pc, #508]	; (800c3f0 <Draw_Menu+0x27c>)
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	231e      	movs	r3, #30
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	2106      	movs	r1, #6
 800c1fc:	2008      	movs	r0, #8
 800c1fe:	f7f4 fd2b 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 6, 2, 30, UTIL_LCD_COLOR_WHITE);
 800c202:	4b79      	ldr	r3, [pc, #484]	; (800c3e8 <Draw_Menu+0x274>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f1a3 000a 	sub.w	r0, r3, #10
 800c20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	231e      	movs	r3, #30
 800c212:	2202      	movs	r2, #2
 800c214:	2106      	movs	r1, #6
 800c216:	f7f4 fd1f 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 35, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
 800c21a:	4b73      	ldr	r3, [pc, #460]	; (800c3e8 <Draw_Menu+0x274>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1a3 0210 	sub.w	r2, r3, #16
 800c222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2302      	movs	r3, #2
 800c22a:	2123      	movs	r1, #35	; 0x23
 800c22c:	2008      	movs	r0, #8
 800c22e:	f7f4 fd13 	bl	8000c58 <UTIL_LCD_DrawRect>

  // bottom section
  UTIL_LCD_DrawRect(8, 41, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c232:	4b6d      	ldr	r3, [pc, #436]	; (800c3e8 <Draw_Menu+0x274>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f1a3 0210 	sub.w	r2, r3, #16
 800c23a:	4b6d      	ldr	r3, [pc, #436]	; (800c3f0 <Draw_Menu+0x27c>)
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	2302      	movs	r3, #2
 800c240:	2129      	movs	r1, #41	; 0x29
 800c242:	2008      	movs	r0, #8
 800c244:	f7f4 fd08 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 41, 2, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c248:	4b68      	ldr	r3, [pc, #416]	; (800c3ec <Draw_Menu+0x278>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3b32      	subs	r3, #50	; 0x32
 800c24e:	4a68      	ldr	r2, [pc, #416]	; (800c3f0 <Draw_Menu+0x27c>)
 800c250:	9200      	str	r2, [sp, #0]
 800c252:	2202      	movs	r2, #2
 800c254:	2129      	movs	r1, #41	; 0x29
 800c256:	2008      	movs	r0, #8
 800c258:	f7f4 fcfe 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 41, 2, y_size - 50, UTIL_LCD_COLOR_WHITE);
 800c25c:	4b62      	ldr	r3, [pc, #392]	; (800c3e8 <Draw_Menu+0x274>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f1a3 000a 	sub.w	r0, r3, #10
 800c264:	4b61      	ldr	r3, [pc, #388]	; (800c3ec <Draw_Menu+0x278>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3b32      	subs	r3, #50	; 0x32
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c26e:	9200      	str	r2, [sp, #0]
 800c270:	2202      	movs	r2, #2
 800c272:	2129      	movs	r1, #41	; 0x29
 800c274:	f7f4 fcf0 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, y_size - 9, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
 800c278:	4b5c      	ldr	r3, [pc, #368]	; (800c3ec <Draw_Menu+0x278>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f1a3 0109 	sub.w	r1, r3, #9
 800c280:	4b59      	ldr	r3, [pc, #356]	; (800c3e8 <Draw_Menu+0x274>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f1a3 0210 	sub.w	r2, r3, #16
 800c288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	2302      	movs	r3, #2
 800c290:	2008      	movs	r0, #8
 800c292:	f7f4 fce1 	bl	8000c58 <UTIL_LCD_DrawRect>

  // flag marker squear
  UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c296:	4b56      	ldr	r3, [pc, #344]	; (800c3f0 <Draw_Menu+0x27c>)
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	2317      	movs	r3, #23
 800c29c:	2202      	movs	r2, #2
 800c29e:	210a      	movs	r1, #10
 800c2a0:	207b      	movs	r0, #123	; 0x7b
 800c2a2:	f7f4 fcd9 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c2a6:	4b52      	ldr	r3, [pc, #328]	; (800c3f0 <Draw_Menu+0x27c>)
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	2218      	movs	r2, #24
 800c2ae:	211f      	movs	r1, #31
 800c2b0:	2064      	movs	r0, #100	; 0x64
 800c2b2:	f7f4 fcd1 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
 800c2b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	2302      	movs	r3, #2
 800c2be:	2219      	movs	r2, #25
 800c2c0:	210a      	movs	r1, #10
 800c2c2:	2064      	movs	r0, #100	; 0x64
 800c2c4:	f7f4 fcc8 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
 800c2c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	2317      	movs	r3, #23
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	210a      	movs	r1, #10
 800c2d4:	2064      	movs	r0, #100	; 0x64
 800c2d6:	f7f4 fcbf 	bl	8000c58 <UTIL_LCD_DrawRect>

  // draw flag icon
  UTIL_LCD_DrawRect(112, 15, 2, 10, UTIL_LCD_COLOR_BLACK);
 800c2da:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	230a      	movs	r3, #10
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	210f      	movs	r1, #15
 800c2e6:	2070      	movs	r0, #112	; 0x70
 800c2e8:	f7f4 fcb6 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(107, 25, 11, 2, UTIL_LCD_COLOR_BLACK);
 800c2ec:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	220b      	movs	r2, #11
 800c2f6:	2119      	movs	r1, #25
 800c2f8:	206b      	movs	r0, #107	; 0x6b
 800c2fa:	f7f4 fcad 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(105, 27, 15, 2, UTIL_LCD_COLOR_BLACK);
 800c2fe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	2302      	movs	r3, #2
 800c306:	220f      	movs	r2, #15
 800c308:	211b      	movs	r1, #27
 800c30a:	2069      	movs	r0, #105	; 0x69
 800c30c:	f7f4 fca4 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_FillRect(107, 15, 5, 5, UTIL_LCD_COLOR_RED);
 800c310:	4b38      	ldr	r3, [pc, #224]	; (800c3f4 <Draw_Menu+0x280>)
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	2305      	movs	r3, #5
 800c316:	2205      	movs	r2, #5
 800c318:	210f      	movs	r1, #15
 800c31a:	206b      	movs	r0, #107	; 0x6b
 800c31c:	f7f4 fdd0 	bl	8000ec0 <UTIL_LCD_FillRect>

  // squear around emojy
  UTIL_LCD_DrawRect(251, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c320:	4b33      	ldr	r3, [pc, #204]	; (800c3f0 <Draw_Menu+0x27c>)
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	2317      	movs	r3, #23
 800c326:	2202      	movs	r2, #2
 800c328:	210a      	movs	r1, #10
 800c32a:	20fb      	movs	r0, #251	; 0xfb
 800c32c:	f7f4 fc94 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c330:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <Draw_Menu+0x27c>)
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2302      	movs	r3, #2
 800c336:	2218      	movs	r2, #24
 800c338:	211f      	movs	r1, #31
 800c33a:	20e4      	movs	r0, #228	; 0xe4
 800c33c:	f7f4 fc8c 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
 800c340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	2302      	movs	r3, #2
 800c348:	2219      	movs	r2, #25
 800c34a:	210a      	movs	r1, #10
 800c34c:	20e4      	movs	r0, #228	; 0xe4
 800c34e:	f7f4 fc83 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(228, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
 800c352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	2317      	movs	r3, #23
 800c35a:	2202      	movs	r2, #2
 800c35c:	210a      	movs	r1, #10
 800c35e:	20e4      	movs	r0, #228	; 0xe4
 800c360:	f7f4 fc7a 	bl	8000c58 <UTIL_LCD_DrawRect>

  // draws hapy emojy
  UTIL_LCD_FillCircle(240, 21, 8, UTIL_LCD_COLOR_YELLOW);
 800c364:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800c368:	2208      	movs	r2, #8
 800c36a:	2115      	movs	r1, #21
 800c36c:	20f0      	movs	r0, #240	; 0xf0
 800c36e:	f7f4 fde1 	bl	8000f34 <UTIL_LCD_FillCircle>
  UTIL_LCD_DrawCircle(240, 21, 8, UTIL_LCD_COLOR_BLACK);
 800c372:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c376:	2208      	movs	r2, #8
 800c378:	2115      	movs	r1, #21
 800c37a:	20f0      	movs	r0, #240	; 0xf0
 800c37c:	f7f4 fc96 	bl	8000cac <UTIL_LCD_DrawCircle>
  UTIL_LCD_DrawRect(242, 18, 2, 2, UTIL_LCD_COLOR_BLACK);
 800c380:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	2302      	movs	r3, #2
 800c388:	2202      	movs	r2, #2
 800c38a:	2112      	movs	r1, #18
 800c38c:	20f2      	movs	r0, #242	; 0xf2
 800c38e:	f7f4 fc63 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(237, 18, 2, 2, UTIL_LCD_COLOR_BLACK);
 800c392:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	2302      	movs	r3, #2
 800c39a:	2202      	movs	r2, #2
 800c39c:	2112      	movs	r1, #18
 800c39e:	20ed      	movs	r0, #237	; 0xed
 800c3a0:	f7f4 fc5a 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(237, 25, 7, 1, UTIL_LCD_COLOR_BLACK);
 800c3a4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	2207      	movs	r2, #7
 800c3ae:	2119      	movs	r1, #25
 800c3b0:	20ed      	movs	r0, #237	; 0xed
 800c3b2:	f7f4 fc51 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(236, 24, 1, 1, UTIL_LCD_COLOR_BLACK);
 800c3b6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	2301      	movs	r3, #1
 800c3be:	2201      	movs	r2, #1
 800c3c0:	2118      	movs	r1, #24
 800c3c2:	20ec      	movs	r0, #236	; 0xec
 800c3c4:	f7f4 fc48 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(244, 24, 1, 1, UTIL_LCD_COLOR_BLACK);
 800c3c8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	2118      	movs	r1, #24
 800c3d4:	20f4      	movs	r0, #244	; 0xf4
 800c3d6:	f7f4 fc3f 	bl	8000c58 <UTIL_LCD_DrawRect>
  // konec smejkota

  // number of squears 23*11
  int16_t x_move = 0, y_move = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	80fb      	strh	r3, [r7, #6]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
 800c3e2:	e075      	b.n	800c4d0 <Draw_Menu+0x35c>
 800c3e4:	ffb9c4ca 	.word	0xffb9c4ca
 800c3e8:	2400161c 	.word	0x2400161c
 800c3ec:	24001620 	.word	0x24001620
 800c3f0:	ff4f5251 	.word	0xff4f5251
 800c3f4:	ffff0000 	.word	0xffff0000
  {
    while (x_move < 23)
    {
      // draws a squear
      UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c3f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	331c      	adds	r3, #28
 800c406:	4618      	mov	r0, r3
 800c408:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	332b      	adds	r3, #43	; 0x2b
 800c416:	4619      	mov	r1, r3
 800c418:	4b47      	ldr	r3, [pc, #284]	; (800c538 <Draw_Menu+0x3c4>)
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	2312      	movs	r3, #18
 800c41e:	2202      	movs	r2, #2
 800c420:	f7f4 fc1a 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800c424:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c428:	4613      	mov	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4413      	add	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	330a      	adds	r3, #10
 800c432:	4618      	mov	r0, r3
 800c434:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	333d      	adds	r3, #61	; 0x3d
 800c442:	4619      	mov	r1, r3
 800c444:	4b3c      	ldr	r3, [pc, #240]	; (800c538 <Draw_Menu+0x3c4>)
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	2302      	movs	r3, #2
 800c44a:	2214      	movs	r2, #20
 800c44c:	f7f4 fc04 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_WHITE);
 800c450:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	330a      	adds	r3, #10
 800c45e:	4618      	mov	r0, r3
 800c460:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c464:	4613      	mov	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	332b      	adds	r3, #43	; 0x2b
 800c46e:	4619      	mov	r1, r3
 800c470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	2302      	movs	r3, #2
 800c478:	2214      	movs	r2, #20
 800c47a:	f7f4 fbed 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_WHITE);
 800c47e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c482:	4613      	mov	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	330a      	adds	r3, #10
 800c48c:	4618      	mov	r0, r3
 800c48e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800c492:	4613      	mov	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	332b      	adds	r3, #43	; 0x2b
 800c49c:	4619      	mov	r1, r3
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	2314      	movs	r3, #20
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	f7f4 fbd6 	bl	8000c58 <UTIL_LCD_DrawRect>
      x_move++;
 800c4ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	80fb      	strh	r3, [r7, #6]
    while (x_move < 23)
 800c4b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4bc:	2b16      	cmp	r3, #22
 800c4be:	dd9b      	ble.n	800c3f8 <Draw_Menu+0x284>
    }
    x_move = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	80fb      	strh	r3, [r7, #6]
    y_move++;
 800c4c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	80bb      	strh	r3, [r7, #4]
  while (y_move < 11)
 800c4d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c4d4:	2b0a      	cmp	r3, #10
 800c4d6:	ddef      	ble.n	800c4b8 <Draw_Menu+0x344>
  }

  // despay the number of bombs
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800c4d8:	4818      	ldr	r0, [pc, #96]	; (800c53c <Draw_Menu+0x3c8>)
 800c4da:	f7f4 f9cb 	bl	8000874 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800c4de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c4e2:	f7f4 f9db 	bl	800089c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font16);
 800c4e6:	4816      	ldr	r0, [pc, #88]	; (800c540 <Draw_Menu+0x3cc>)
 800c4e8:	f7f4 f9ec 	bl	80008c4 <UTIL_LCD_SetFont>
  UTIL_LCD_FillRect(12, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
 800c4ec:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	2319      	movs	r3, #25
 800c4f4:	2232      	movs	r2, #50	; 0x32
 800c4f6:	2109      	movs	r1, #9
 800c4f8:	200c      	movs	r0, #12
 800c4fa:	f7f4 fce1 	bl	8000ec0 <UTIL_LCD_FillRect>
  char st[3];
  sprintf(st, "%3d", Mine_Num);
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <Draw_Menu+0x3d0>)
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	463b      	mov	r3, r7
 800c506:	4910      	ldr	r1, [pc, #64]	; (800c548 <Draw_Menu+0x3d4>)
 800c508:	4618      	mov	r0, r3
 800c50a:	f001 fc6d 	bl	800dde8 <siprintf>
  UTIL_LCD_DisplayStringAt(20, 15, (uint8_t *)st, LEFT_MODE);
 800c50e:	463a      	mov	r2, r7
 800c510:	2303      	movs	r3, #3
 800c512:	210f      	movs	r1, #15
 800c514:	2014      	movs	r0, #20
 800c516:	f7f4 faf1 	bl	8000afc <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_FillRect(410, 9, 50, 25, UTIL_LCD_COLOR_BLACK);
 800c51a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	2319      	movs	r3, #25
 800c522:	2232      	movs	r2, #50	; 0x32
 800c524:	2109      	movs	r1, #9
 800c526:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800c52a:	f7f4 fcc9 	bl	8000ec0 <UTIL_LCD_FillRect>
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	ff4f5251 	.word	0xff4f5251
 800c53c:	ffff0000 	.word	0xffff0000
 800c540:	24000008 	.word	0x24000008
 800c544:	24000056 	.word	0x24000056
 800c548:	0800f1f8 	.word	0x0800f1f8

0800c54c <Set_Numbers>:
 * @brief  Sets numbers acording to the mines
 * @param  None
 * @retval None
 */
static void Set_Numbers()
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
  for (int i = 0; i < 11; i++)
 800c552:	2300      	movs	r3, #0
 800c554:	607b      	str	r3, [r7, #4]
 800c556:	e19e      	b.n	800c896 <Set_Numbers+0x34a>
  {
    for (int j = 0; j < 23; j++)
 800c558:	2300      	movs	r3, #0
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	e194      	b.n	800c888 <Set_Numbers+0x33c>
    {
      if (tab[j][i] != -1)
 800c55e:	49bd      	ldr	r1, [pc, #756]	; (800c854 <Set_Numbers+0x308>)
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	4413      	add	r3, r2
 800c56c:	18ca      	adds	r2, r1, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	f993 3000 	ldrsb.w	r3, [r3]
 800c576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c57a:	f000 8182 	beq.w	800c882 <Set_Numbers+0x336>
      {
        if (i > 0)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f340 808c 	ble.w	800c69e <Set_Numbers+0x152>
        {
          if (tab[j][i - 1] == -1)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	1e59      	subs	r1, r3, #1
 800c58a:	48b2      	ldr	r0, [pc, #712]	; (800c854 <Set_Numbers+0x308>)
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	4613      	mov	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4413      	add	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	4403      	add	r3, r0
 800c59a:	440b      	add	r3, r1
 800c59c:	f993 3000 	ldrsb.w	r3, [r3]
 800c5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a4:	d11b      	bne.n	800c5de <Set_Numbers+0x92>
            tab[j][i]++;
 800c5a6:	49ab      	ldr	r1, [pc, #684]	; (800c854 <Set_Numbers+0x308>)
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	18ca      	adds	r2, r1, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f993 3000 	ldrsb.w	r3, [r3]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	b258      	sxtb	r0, r3
 800c5c6:	49a3      	ldr	r1, [pc, #652]	; (800c854 <Set_Numbers+0x308>)
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	18ca      	adds	r2, r1, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	4602      	mov	r2, r0
 800c5dc:	701a      	strb	r2, [r3, #0]
          if (j > 0)
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dd2c      	ble.n	800c63e <Set_Numbers+0xf2>
          {
            if (tab[j - 1][i - 1] == -1)
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	1e5a      	subs	r2, r3, #1
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	1e59      	subs	r1, r3, #1
 800c5ec:	4899      	ldr	r0, [pc, #612]	; (800c854 <Set_Numbers+0x308>)
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	4413      	add	r3, r2
 800c5f8:	4403      	add	r3, r0
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f993 3000 	ldrsb.w	r3, [r3]
 800c600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c604:	d11b      	bne.n	800c63e <Set_Numbers+0xf2>
              tab[j][i]++;
 800c606:	4993      	ldr	r1, [pc, #588]	; (800c854 <Set_Numbers+0x308>)
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	18ca      	adds	r2, r1, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4413      	add	r3, r2
 800c61a:	f993 3000 	ldrsb.w	r3, [r3]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	3301      	adds	r3, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	b258      	sxtb	r0, r3
 800c626:	498b      	ldr	r1, [pc, #556]	; (800c854 <Set_Numbers+0x308>)
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	4413      	add	r3, r2
 800c634:	18ca      	adds	r2, r1, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4413      	add	r3, r2
 800c63a:	4602      	mov	r2, r0
 800c63c:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b15      	cmp	r3, #21
 800c642:	dc2c      	bgt.n	800c69e <Set_Numbers+0x152>
          {
            if (tab[j + 1][i - 1] == -1)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	1c5a      	adds	r2, r3, #1
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	1e59      	subs	r1, r3, #1
 800c64c:	4881      	ldr	r0, [pc, #516]	; (800c854 <Set_Numbers+0x308>)
 800c64e:	4613      	mov	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	4413      	add	r3, r2
 800c658:	4403      	add	r3, r0
 800c65a:	440b      	add	r3, r1
 800c65c:	f993 3000 	ldrsb.w	r3, [r3]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c664:	d11b      	bne.n	800c69e <Set_Numbers+0x152>
              tab[j][i]++;
 800c666:	497b      	ldr	r1, [pc, #492]	; (800c854 <Set_Numbers+0x308>)
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	4613      	mov	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	4413      	add	r3, r2
 800c674:	18ca      	adds	r2, r1, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4413      	add	r3, r2
 800c67a:	f993 3000 	ldrsb.w	r3, [r3]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	3301      	adds	r3, #1
 800c682:	b2db      	uxtb	r3, r3
 800c684:	b258      	sxtb	r0, r3
 800c686:	4973      	ldr	r1, [pc, #460]	; (800c854 <Set_Numbers+0x308>)
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	4613      	mov	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	005b      	lsls	r3, r3, #1
 800c692:	4413      	add	r3, r2
 800c694:	18ca      	adds	r2, r1, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4413      	add	r3, r2
 800c69a:	4602      	mov	r2, r0
 800c69c:	701a      	strb	r2, [r3, #0]
          }
        }
        if (tab[j - 1][i] == -1 && j > 0)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	1e5a      	subs	r2, r3, #1
 800c6a2:	496c      	ldr	r1, [pc, #432]	; (800c854 <Set_Numbers+0x308>)
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	4413      	add	r3, r2
 800c6ae:	18ca      	adds	r2, r1, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f993 3000 	ldrsb.w	r3, [r3]
 800c6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6bc:	d11e      	bne.n	800c6fc <Set_Numbers+0x1b0>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dd1b      	ble.n	800c6fc <Set_Numbers+0x1b0>
          tab[j][i]++;
 800c6c4:	4963      	ldr	r1, [pc, #396]	; (800c854 <Set_Numbers+0x308>)
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	18ca      	adds	r2, r1, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	3301      	adds	r3, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	b258      	sxtb	r0, r3
 800c6e4:	495b      	ldr	r1, [pc, #364]	; (800c854 <Set_Numbers+0x308>)
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	4413      	add	r3, r2
 800c6f2:	18ca      	adds	r2, r1, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	701a      	strb	r2, [r3, #0]
        if (tab[j + 1][i] == -1 && j < 22)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	4954      	ldr	r1, [pc, #336]	; (800c854 <Set_Numbers+0x308>)
 800c702:	4613      	mov	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	4413      	add	r3, r2
 800c70c:	18ca      	adds	r2, r1, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4413      	add	r3, r2
 800c712:	f993 3000 	ldrsb.w	r3, [r3]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c71a:	d11e      	bne.n	800c75a <Set_Numbers+0x20e>
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b15      	cmp	r3, #21
 800c720:	dc1b      	bgt.n	800c75a <Set_Numbers+0x20e>
          tab[j][i]++;
 800c722:	494c      	ldr	r1, [pc, #304]	; (800c854 <Set_Numbers+0x308>)
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	4413      	add	r3, r2
 800c730:	18ca      	adds	r2, r1, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4413      	add	r3, r2
 800c736:	f993 3000 	ldrsb.w	r3, [r3]
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	3301      	adds	r3, #1
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	b258      	sxtb	r0, r3
 800c742:	4944      	ldr	r1, [pc, #272]	; (800c854 <Set_Numbers+0x308>)
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	005b      	lsls	r3, r3, #1
 800c74e:	4413      	add	r3, r2
 800c750:	18ca      	adds	r2, r1, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4413      	add	r3, r2
 800c756:	4602      	mov	r2, r0
 800c758:	701a      	strb	r2, [r3, #0]
        if (i < 10)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	f300 8090 	bgt.w	800c882 <Set_Numbers+0x336>
        {
          if (tab[j][i + 1] == -1)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	1c59      	adds	r1, r3, #1
 800c766:	483b      	ldr	r0, [pc, #236]	; (800c854 <Set_Numbers+0x308>)
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	4613      	mov	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	4403      	add	r3, r0
 800c776:	440b      	add	r3, r1
 800c778:	f993 3000 	ldrsb.w	r3, [r3]
 800c77c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c780:	d11b      	bne.n	800c7ba <Set_Numbers+0x26e>
            tab[j][i]++;
 800c782:	4934      	ldr	r1, [pc, #208]	; (800c854 <Set_Numbers+0x308>)
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	4613      	mov	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	18ca      	adds	r2, r1, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	f993 3000 	ldrsb.w	r3, [r3]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	3301      	adds	r3, #1
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	b258      	sxtb	r0, r3
 800c7a2:	492c      	ldr	r1, [pc, #176]	; (800c854 <Set_Numbers+0x308>)
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	18ca      	adds	r2, r1, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	701a      	strb	r2, [r3, #0]
          if (j > 0)
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd2c      	ble.n	800c81a <Set_Numbers+0x2ce>
          {
            if (tab[j - 1][i + 1] == -1)
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	1e5a      	subs	r2, r3, #1
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	1c59      	adds	r1, r3, #1
 800c7c8:	4822      	ldr	r0, [pc, #136]	; (800c854 <Set_Numbers+0x308>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	4403      	add	r3, r0
 800c7d6:	440b      	add	r3, r1
 800c7d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e0:	d11b      	bne.n	800c81a <Set_Numbers+0x2ce>
              tab[j][i]++;
 800c7e2:	491c      	ldr	r1, [pc, #112]	; (800c854 <Set_Numbers+0x308>)
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	4413      	add	r3, r2
 800c7f0:	18ca      	adds	r2, r1, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f993 3000 	ldrsb.w	r3, [r3]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	b258      	sxtb	r0, r3
 800c802:	4914      	ldr	r1, [pc, #80]	; (800c854 <Set_Numbers+0x308>)
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	4413      	add	r3, r2
 800c810:	18ca      	adds	r2, r1, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4413      	add	r3, r2
 800c816:	4602      	mov	r2, r0
 800c818:	701a      	strb	r2, [r3, #0]
          }
          if (j < 22)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	2b15      	cmp	r3, #21
 800c81e:	dc30      	bgt.n	800c882 <Set_Numbers+0x336>
          {
            if (tab[j + 1][i + 1] == -1)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	1c59      	adds	r1, r3, #1
 800c828:	480a      	ldr	r0, [pc, #40]	; (800c854 <Set_Numbers+0x308>)
 800c82a:	4613      	mov	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	4403      	add	r3, r0
 800c836:	440b      	add	r3, r1
 800c838:	f993 3000 	ldrsb.w	r3, [r3]
 800c83c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c840:	d11f      	bne.n	800c882 <Set_Numbers+0x336>
              tab[j][i]++;
 800c842:	4904      	ldr	r1, [pc, #16]	; (800c854 <Set_Numbers+0x308>)
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	4413      	add	r3, r2
 800c850:	e002      	b.n	800c858 <Set_Numbers+0x30c>
 800c852:	bf00      	nop
 800c854:	24001514 	.word	0x24001514
 800c858:	18ca      	adds	r2, r1, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4413      	add	r3, r2
 800c85e:	f993 3000 	ldrsb.w	r3, [r3]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	3301      	adds	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	b258      	sxtb	r0, r3
 800c86a:	4910      	ldr	r1, [pc, #64]	; (800c8ac <Set_Numbers+0x360>)
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	4413      	add	r3, r2
 800c878:	18ca      	adds	r2, r1, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	4602      	mov	r2, r0
 800c880:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 23; j++)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2b16      	cmp	r3, #22
 800c88c:	f77f ae67 	ble.w	800c55e <Set_Numbers+0x12>
  for (int i = 0; i < 11; i++)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3301      	adds	r3, #1
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b0a      	cmp	r3, #10
 800c89a:	f77f ae5d 	ble.w	800c558 <Set_Numbers+0xc>
          }
        }
      }
    }
  }
}
 800c89e:	bf00      	nop
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	24001514 	.word	0x24001514

0800c8b0 <Bomb_Hit>:
 * @brief  When you hit a bomb/game end
 * @param  None
 * @retval None
 */
static void Bomb_Hit()
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af02      	add	r7, sp, #8

  Game_State = 0;
 800c8b6:	4b69      	ldr	r3, [pc, #420]	; (800ca5c <Bomb_Hit+0x1ac>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 23; i++)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	607b      	str	r3, [r7, #4]
 800c8c0:	e0c2      	b.n	800ca48 <Bomb_Hit+0x198>
  {
    for (int j = 0; j < 11; j++)
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	603b      	str	r3, [r7, #0]
 800c8c6:	e0b8      	b.n	800ca3a <Bomb_Hit+0x18a>
    {
      if (tab[i][j] == -1)
 800c8c8:	4965      	ldr	r1, [pc, #404]	; (800ca60 <Bomb_Hit+0x1b0>)
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	4413      	add	r3, r2
 800c8d6:	18ca      	adds	r2, r1, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f993 3000 	ldrsb.w	r3, [r3]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8e4:	f040 80a6 	bne.w	800ca34 <Bomb_Hit+0x184>
      {
        // draws a squear
        UTIL_LCD_FillCircle(20 + (i * 20), 53 + (j * 20), 5, UTIL_LCD_COLOR_BLACK);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	3335      	adds	r3, #53	; 0x35
 800c902:	4619      	mov	r1, r3
 800c904:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c908:	2205      	movs	r2, #5
 800c90a:	f7f4 fb13 	bl	8000f34 <UTIL_LCD_FillCircle>
        UTIL_LCD_DrawRect(19 + (i * 20), 46 + (j * 20), 2, 15, UTIL_LCD_COLOR_BLACK);
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4613      	mov	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	3313      	adds	r3, #19
 800c91a:	4618      	mov	r0, r3
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	4613      	mov	r3, r2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	332e      	adds	r3, #46	; 0x2e
 800c928:	4619      	mov	r1, r3
 800c92a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	230f      	movs	r3, #15
 800c932:	2202      	movs	r2, #2
 800c934:	f7f4 f990 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(13 + (i * 20), 53 + (j * 20), 14, 2, UTIL_LCD_COLOR_BLACK);
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	330d      	adds	r3, #13
 800c944:	4618      	mov	r0, r3
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	3335      	adds	r3, #53	; 0x35
 800c952:	4619      	mov	r1, r3
 800c954:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	2302      	movs	r3, #2
 800c95c:	220e      	movs	r2, #14
 800c95e:	f7f4 f97b 	bl	8000c58 <UTIL_LCD_DrawRect>

        UTIL_LCD_DrawRect(15 + (i * 20), 48 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	4613      	mov	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	330f      	adds	r3, #15
 800c96e:	4618      	mov	r0, r3
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	3330      	adds	r3, #48	; 0x30
 800c97c:	4619      	mov	r1, r3
 800c97e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2302      	movs	r3, #2
 800c986:	2202      	movs	r2, #2
 800c988:	f7f4 f966 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(15 + (i * 20), 57 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	4613      	mov	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	330f      	adds	r3, #15
 800c998:	4618      	mov	r0, r3
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	4613      	mov	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	3339      	adds	r3, #57	; 0x39
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	2202      	movs	r2, #2
 800c9b2:	f7f4 f951 	bl	8000c58 <UTIL_LCD_DrawRect>

        UTIL_LCD_DrawRect(24 + (i * 20), 48 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	3318      	adds	r3, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	3330      	adds	r3, #48	; 0x30
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	2302      	movs	r3, #2
 800c9da:	2202      	movs	r2, #2
 800c9dc:	f7f4 f93c 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(24 + (i * 20), 57 + (j * 20), 2, 2, UTIL_LCD_COLOR_BLACK);
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	3318      	adds	r3, #24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	683a      	ldr	r2, [r7, #0]
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	3339      	adds	r3, #57	; 0x39
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	2302      	movs	r3, #2
 800ca04:	2202      	movs	r2, #2
 800ca06:	f7f4 f927 	bl	8000c58 <UTIL_LCD_DrawRect>

        UTIL_LCD_FillRect(18 + (i * 20), 51 + (j * 20), 2, 2, UTIL_LCD_COLOR_WHITE);
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	3312      	adds	r3, #18
 800ca16:	4618      	mov	r0, r3
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	3333      	adds	r3, #51	; 0x33
 800ca24:	4619      	mov	r1, r3
 800ca26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f7f4 fa46 	bl	8000ec0 <UTIL_LCD_FillRect>
    for (int j = 0; j < 11; j++)
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	603b      	str	r3, [r7, #0]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b0a      	cmp	r3, #10
 800ca3e:	f77f af43 	ble.w	800c8c8 <Bomb_Hit+0x18>
  for (int i = 0; i < 23; i++)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3301      	adds	r3, #1
 800ca46:	607b      	str	r3, [r7, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b16      	cmp	r3, #22
 800ca4c:	f77f af39 	ble.w	800c8c2 <Bomb_Hit+0x12>
      }
    }
  }
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	24000058 	.word	0x24000058
 800ca60:	24001514 	.word	0x24001514

0800ca64 <Draw_Cvad>:
 * @brief  Draw the unknown squear
 * @param  None
 * @retval None
 */
static void Draw_Cvad(int8_t x_move, int8_t y_move)
{
 800ca64:	b590      	push	{r4, r7, lr}
 800ca66:	b087      	sub	sp, #28
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	460a      	mov	r2, r1
 800ca6e:	71fb      	strb	r3, [r7, #7]
 800ca70:	4613      	mov	r3, r2
 800ca72:	71bb      	strb	r3, [r7, #6]

  UTIL_LCD_DrawRect(28 + (x_move * 20), 43 + (y_move * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800ca74:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	331c      	adds	r3, #28
 800ca82:	4618      	mov	r0, r3
 800ca84:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	332b      	adds	r3, #43	; 0x2b
 800ca92:	4619      	mov	r1, r3
 800ca94:	4bb8      	ldr	r3, [pc, #736]	; (800cd78 <Draw_Cvad+0x314>)
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	2312      	movs	r3, #18
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	f7f4 f8dc 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 61 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800caa0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	330a      	adds	r3, #10
 800caae:	4618      	mov	r0, r3
 800cab0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800cab4:	4613      	mov	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4413      	add	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	333d      	adds	r3, #61	; 0x3d
 800cabe:	4619      	mov	r1, r3
 800cac0:	4bad      	ldr	r3, [pc, #692]	; (800cd78 <Draw_Cvad+0x314>)
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	2302      	movs	r3, #2
 800cac6:	2214      	movs	r2, #20
 800cac8:	f7f4 f8c6 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800cacc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cad0:	4613      	mov	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	330a      	adds	r3, #10
 800cada:	4618      	mov	r0, r3
 800cadc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	332b      	adds	r3, #43	; 0x2b
 800caea:	4619      	mov	r1, r3
 800caec:	4ba2      	ldr	r3, [pc, #648]	; (800cd78 <Draw_Cvad+0x314>)
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	2302      	movs	r3, #2
 800caf2:	2214      	movs	r2, #20
 800caf4:	f7f4 f8b0 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 2, 20, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800caf8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cafc:	4613      	mov	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	330a      	adds	r3, #10
 800cb06:	4618      	mov	r0, r3
 800cb08:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	332b      	adds	r3, #43	; 0x2b
 800cb16:	4619      	mov	r1, r3
 800cb18:	4b97      	ldr	r3, [pc, #604]	; (800cd78 <Draw_Cvad+0x314>)
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2314      	movs	r3, #20
 800cb1e:	2202      	movs	r2, #2
 800cb20:	f7f4 f89a 	bl	8000c58 <UTIL_LCD_DrawRect>

  if (tab[x_move][y_move] > 0 && tab[x_move][y_move] < 9)
 800cb24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cb28:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cb2c:	4893      	ldr	r0, [pc, #588]	; (800cd7c <Draw_Cvad+0x318>)
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	4403      	add	r3, r0
 800cb3a:	440b      	add	r3, r1
 800cb3c:	f993 3000 	ldrsb.w	r3, [r3]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f340 80ff 	ble.w	800cd44 <Draw_Cvad+0x2e0>
 800cb46:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cb4a:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cb4e:	488b      	ldr	r0, [pc, #556]	; (800cd7c <Draw_Cvad+0x318>)
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	4413      	add	r3, r2
 800cb5a:	4403      	add	r3, r0
 800cb5c:	440b      	add	r3, r1
 800cb5e:	f993 3000 	ldrsb.w	r3, [r3]
 800cb62:	2b08      	cmp	r3, #8
 800cb64:	f300 80ee 	bgt.w	800cd44 <Draw_Cvad+0x2e0>
  {
    if (tab[x_move][y_move] == 1)
 800cb68:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cb6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cb70:	4882      	ldr	r0, [pc, #520]	; (800cd7c <Draw_Cvad+0x318>)
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	4413      	add	r3, r2
 800cb7c:	4403      	add	r3, r0
 800cb7e:	440b      	add	r3, r1
 800cb80:	f993 3000 	ldrsb.w	r3, [r3]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d103      	bne.n	800cb90 <Draw_Cvad+0x12c>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800cb88:	487d      	ldr	r0, [pc, #500]	; (800cd80 <Draw_Cvad+0x31c>)
 800cb8a:	f7f3 fe73 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cb8e:	e08c      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 2)
 800cb90:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cb94:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cb98:	4878      	ldr	r0, [pc, #480]	; (800cd7c <Draw_Cvad+0x318>)
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	4413      	add	r3, r2
 800cba4:	4403      	add	r3, r0
 800cba6:	440b      	add	r3, r1
 800cba8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d104      	bne.n	800cbba <Draw_Cvad+0x156>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 800cbb0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800cbb4:	f7f3 fe5e 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cbb8:	e077      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 3)
 800cbba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cbbe:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cbc2:	486e      	ldr	r0, [pc, #440]	; (800cd7c <Draw_Cvad+0x318>)
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	4403      	add	r3, r0
 800cbd0:	440b      	add	r3, r1
 800cbd2:	f993 3000 	ldrsb.w	r3, [r3]
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d103      	bne.n	800cbe2 <Draw_Cvad+0x17e>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800cbda:	486a      	ldr	r0, [pc, #424]	; (800cd84 <Draw_Cvad+0x320>)
 800cbdc:	f7f3 fe4a 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cbe0:	e063      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 4)
 800cbe2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cbe6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cbea:	4864      	ldr	r0, [pc, #400]	; (800cd7c <Draw_Cvad+0x318>)
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	4413      	add	r3, r2
 800cbf6:	4403      	add	r3, r0
 800cbf8:	440b      	add	r3, r1
 800cbfa:	f993 3000 	ldrsb.w	r3, [r3]
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d103      	bne.n	800cc0a <Draw_Cvad+0x1a6>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_BLUE_DARK);
 800cc02:	4861      	ldr	r0, [pc, #388]	; (800cd88 <Draw_Cvad+0x324>)
 800cc04:	f7f3 fe36 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cc08:	e04f      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 5)
 800cc0a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cc0e:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cc12:	485a      	ldr	r0, [pc, #360]	; (800cd7c <Draw_Cvad+0x318>)
 800cc14:	4613      	mov	r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	4413      	add	r3, r2
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	4403      	add	r3, r0
 800cc20:	440b      	add	r3, r1
 800cc22:	f993 3000 	ldrsb.w	r3, [r3]
 800cc26:	2b05      	cmp	r3, #5
 800cc28:	d103      	bne.n	800cc32 <Draw_Cvad+0x1ce>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_PURPLE);
 800cc2a:	4858      	ldr	r0, [pc, #352]	; (800cd8c <Draw_Cvad+0x328>)
 800cc2c:	f7f3 fe22 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cc30:	e03b      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 6)
 800cc32:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cc36:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cc3a:	4850      	ldr	r0, [pc, #320]	; (800cd7c <Draw_Cvad+0x318>)
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	4413      	add	r3, r2
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	4413      	add	r3, r2
 800cc46:	4403      	add	r3, r0
 800cc48:	440b      	add	r3, r1
 800cc4a:	f993 3000 	ldrsb.w	r3, [r3]
 800cc4e:	2b06      	cmp	r3, #6
 800cc50:	d103      	bne.n	800cc5a <Draw_Cvad+0x1f6>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_BLUE_LIGHT);
 800cc52:	484f      	ldr	r0, [pc, #316]	; (800cd90 <Draw_Cvad+0x32c>)
 800cc54:	f7f3 fe0e 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cc58:	e027      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 7)
 800cc5a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cc5e:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cc62:	4846      	ldr	r0, [pc, #280]	; (800cd7c <Draw_Cvad+0x318>)
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	4403      	add	r3, r0
 800cc70:	440b      	add	r3, r1
 800cc72:	f993 3000 	ldrsb.w	r3, [r3]
 800cc76:	2b07      	cmp	r3, #7
 800cc78:	d104      	bne.n	800cc84 <Draw_Cvad+0x220>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800cc7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cc7e:	f7f3 fdf9 	bl	8000874 <UTIL_LCD_SetTextColor>
 800cc82:	e012      	b.n	800ccaa <Draw_Cvad+0x246>
    else if (tab[x_move][y_move] == 8)
 800cc84:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cc88:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cc8c:	483b      	ldr	r0, [pc, #236]	; (800cd7c <Draw_Cvad+0x318>)
 800cc8e:	4613      	mov	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4413      	add	r3, r2
 800cc98:	4403      	add	r3, r0
 800cc9a:	440b      	add	r3, r1
 800cc9c:	f993 3000 	ldrsb.w	r3, [r3]
 800cca0:	2b08      	cmp	r3, #8
 800cca2:	d102      	bne.n	800ccaa <Draw_Cvad+0x246>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ST_GRAY);
 800cca4:	483b      	ldr	r0, [pc, #236]	; (800cd94 <Draw_Cvad+0x330>)
 800cca6:	f7f3 fde5 	bl	8000874 <UTIL_LCD_SetTextColor>

    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800ccaa:	4833      	ldr	r0, [pc, #204]	; (800cd78 <Draw_Cvad+0x314>)
 800ccac:	f7f3 fdf6 	bl	800089c <UTIL_LCD_SetBackColor>
    char st;
    sprintf(st, "%1d", tab[x_move][y_move]);
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	461c      	mov	r4, r3
 800ccb4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ccb8:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800ccbc:	482f      	ldr	r0, [pc, #188]	; (800cd7c <Draw_Cvad+0x318>)
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	4413      	add	r3, r2
 800ccc8:	4403      	add	r3, r0
 800ccca:	440b      	add	r3, r1
 800cccc:	f993 3000 	ldrsb.w	r3, [r3]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4931      	ldr	r1, [pc, #196]	; (800cd98 <Draw_Cvad+0x334>)
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f001 f887 	bl	800dde8 <siprintf>
    UTIL_LCD_DisplayStringAt(15 + (x_move * 20), 47 + (y_move * 20), (uint8_t *)st, LEFT_MODE);
 800ccda:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	330f      	adds	r3, #15
 800cce8:	4618      	mov	r0, r3
 800ccea:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	332f      	adds	r3, #47	; 0x2f
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	2303      	movs	r3, #3
 800cd00:	f7f3 fefc 	bl	8000afc <UTIL_LCD_DisplayStringAt>
    tab[x_move][y_move] += 10;
 800cd04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cd08:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cd0c:	481b      	ldr	r0, [pc, #108]	; (800cd7c <Draw_Cvad+0x318>)
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	4413      	add	r3, r2
 800cd18:	4403      	add	r3, r0
 800cd1a:	440b      	add	r3, r1
 800cd1c:	f993 3000 	ldrsb.w	r3, [r3]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	330a      	adds	r3, #10
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cd2a:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800cd2e:	b25c      	sxtb	r4, r3
 800cd30:	4812      	ldr	r0, [pc, #72]	; (800cd7c <Draw_Cvad+0x318>)
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	4403      	add	r3, r0
 800cd3e:	440b      	add	r3, r1
 800cd40:	4622      	mov	r2, r4
 800cd42:	701a      	strb	r2, [r3, #0]
  }
  UTIL_LCD_DrawRect(10 + (x_move * 20), 43 + (y_move * 20), 20, 20, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800cd44:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	330a      	adds	r3, #10
 800cd52:	4618      	mov	r0, r3
 800cd54:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	332b      	adds	r3, #43	; 0x2b
 800cd62:	4619      	mov	r1, r3
 800cd64:	4b0d      	ldr	r3, [pc, #52]	; (800cd9c <Draw_Cvad+0x338>)
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2314      	movs	r3, #20
 800cd6a:	2214      	movs	r2, #20
 800cd6c:	f7f3 ff74 	bl	8000c58 <UTIL_LCD_DrawRect>
}
 800cd70:	bf00      	nop
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}
 800cd78:	ffb9c4ca 	.word	0xffb9c4ca
 800cd7c:	24001514 	.word	0x24001514
 800cd80:	ff0000ff 	.word	0xff0000ff
 800cd84:	ffff0000 	.word	0xffff0000
 800cd88:	ff002052 	.word	0xff002052
 800cd8c:	ff590d58 	.word	0xff590d58
 800cd90:	ffd1e4f3 	.word	0xffd1e4f3
 800cd94:	ff90989e 	.word	0xff90989e
 800cd98:	0800f1fc 	.word	0x0800f1fc
 800cd9c:	ff4f5251 	.word	0xff4f5251

0800cda0 <GetPosition>:
 * @brief  Configures and gets Touch screen position.
 * @param  None
 * @retval None
 */
static void GetPosition()
{
 800cda0:	b590      	push	{r4, r7, lr}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af02      	add	r7, sp, #8

  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
 800cda6:	4995      	ldr	r1, [pc, #596]	; (800cffc <GetPosition+0x25c>)
 800cda8:	2000      	movs	r0, #0
 800cdaa:	f7f6 ff2d 	bl	8003c08 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
 800cdae:	4b93      	ldr	r3, [pc, #588]	; (800cffc <GetPosition+0x25c>)
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	4b92      	ldr	r3, [pc, #584]	; (800d000 <GetPosition+0x260>)
 800cdb6:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
 800cdb8:	4b90      	ldr	r3, [pc, #576]	; (800cffc <GetPosition+0x25c>)
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	4b91      	ldr	r3, [pc, #580]	; (800d004 <GetPosition+0x264>)
 800cdc0:	801a      	strh	r2, [r3, #0]

  if (Px == x && Py == y)
 800cdc2:	4b91      	ldr	r3, [pc, #580]	; (800d008 <GetPosition+0x268>)
 800cdc4:	881a      	ldrh	r2, [r3, #0]
 800cdc6:	4b8e      	ldr	r3, [pc, #568]	; (800d000 <GetPosition+0x260>)
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d106      	bne.n	800cddc <GetPosition+0x3c>
 800cdce:	4b8f      	ldr	r3, [pc, #572]	; (800d00c <GetPosition+0x26c>)
 800cdd0:	881a      	ldrh	r2, [r3, #0]
 800cdd2:	4b8c      	ldr	r3, [pc, #560]	; (800d004 <GetPosition+0x264>)
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	f000 81cd 	beq.w	800d176 <GetPosition+0x3d6>
  {
    return;
  }
  Px = x;
 800cddc:	4b88      	ldr	r3, [pc, #544]	; (800d000 <GetPosition+0x260>)
 800cdde:	881a      	ldrh	r2, [r3, #0]
 800cde0:	4b89      	ldr	r3, [pc, #548]	; (800d008 <GetPosition+0x268>)
 800cde2:	801a      	strh	r2, [r3, #0]
  Py = y;
 800cde4:	4b87      	ldr	r3, [pc, #540]	; (800d004 <GetPosition+0x264>)
 800cde6:	881a      	ldrh	r2, [r3, #0]
 800cde8:	4b88      	ldr	r3, [pc, #544]	; (800d00c <GetPosition+0x26c>)
 800cdea:	801a      	strh	r2, [r3, #0]

  // switch flag staus
  if ((x > 90) && (x < 130) && (y > 10) && (y < 35))
 800cdec:	4b84      	ldr	r3, [pc, #528]	; (800d000 <GetPosition+0x260>)
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	2b5a      	cmp	r3, #90	; 0x5a
 800cdf2:	d959      	bls.n	800cea8 <GetPosition+0x108>
 800cdf4:	4b82      	ldr	r3, [pc, #520]	; (800d000 <GetPosition+0x260>)
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	2b81      	cmp	r3, #129	; 0x81
 800cdfa:	d855      	bhi.n	800cea8 <GetPosition+0x108>
 800cdfc:	4b81      	ldr	r3, [pc, #516]	; (800d004 <GetPosition+0x264>)
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	2b0a      	cmp	r3, #10
 800ce02:	d951      	bls.n	800cea8 <GetPosition+0x108>
 800ce04:	4b7f      	ldr	r3, [pc, #508]	; (800d004 <GetPosition+0x264>)
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	2b22      	cmp	r3, #34	; 0x22
 800ce0a:	d84d      	bhi.n	800cea8 <GetPosition+0x108>
  {
    if (flag == 0)
 800ce0c:	4b80      	ldr	r3, [pc, #512]	; (800d010 <GetPosition+0x270>)
 800ce0e:	f993 3000 	ldrsb.w	r3, [r3]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d123      	bne.n	800ce5e <GetPosition+0xbe>
    {

      UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_RED);
 800ce16:	4b7f      	ldr	r3, [pc, #508]	; (800d014 <GetPosition+0x274>)
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	2317      	movs	r3, #23
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	210a      	movs	r1, #10
 800ce20:	207b      	movs	r0, #123	; 0x7b
 800ce22:	f7f3 ff19 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_RED);
 800ce26:	4b7b      	ldr	r3, [pc, #492]	; (800d014 <GetPosition+0x274>)
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	2218      	movs	r2, #24
 800ce2e:	211f      	movs	r1, #31
 800ce30:	2064      	movs	r0, #100	; 0x64
 800ce32:	f7f3 ff11 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_RED);
 800ce36:	4b77      	ldr	r3, [pc, #476]	; (800d014 <GetPosition+0x274>)
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	2219      	movs	r2, #25
 800ce3e:	210a      	movs	r1, #10
 800ce40:	2064      	movs	r0, #100	; 0x64
 800ce42:	f7f3 ff09 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_RED);
 800ce46:	4b73      	ldr	r3, [pc, #460]	; (800d014 <GetPosition+0x274>)
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	2317      	movs	r3, #23
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	210a      	movs	r1, #10
 800ce50:	2064      	movs	r0, #100	; 0x64
 800ce52:	f7f3 ff01 	bl	8000c58 <UTIL_LCD_DrawRect>
      flag = 1;
 800ce56:	4b6e      	ldr	r3, [pc, #440]	; (800d010 <GetPosition+0x270>)
 800ce58:	2201      	movs	r2, #1
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	e024      	b.n	800cea8 <GetPosition+0x108>
    }
    else
    {
      flag = 0;
 800ce5e:	4b6c      	ldr	r3, [pc, #432]	; (800d010 <GetPosition+0x270>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]
      // flag marker squear
      UTIL_LCD_DrawRect(123, 10, 2, 23, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800ce64:	4b6c      	ldr	r3, [pc, #432]	; (800d018 <GetPosition+0x278>)
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	2317      	movs	r3, #23
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	210a      	movs	r1, #10
 800ce6e:	207b      	movs	r0, #123	; 0x7b
 800ce70:	f7f3 fef2 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 31, 24, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800ce74:	4b68      	ldr	r3, [pc, #416]	; (800d018 <GetPosition+0x278>)
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	2302      	movs	r3, #2
 800ce7a:	2218      	movs	r2, #24
 800ce7c:	211f      	movs	r1, #31
 800ce7e:	2064      	movs	r0, #100	; 0x64
 800ce80:	f7f3 feea 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 25, 2, UTIL_LCD_COLOR_WHITE);
 800ce84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	2219      	movs	r2, #25
 800ce8e:	210a      	movs	r1, #10
 800ce90:	2064      	movs	r0, #100	; 0x64
 800ce92:	f7f3 fee1 	bl	8000c58 <UTIL_LCD_DrawRect>
      UTIL_LCD_DrawRect(100, 10, 2, 23, UTIL_LCD_COLOR_WHITE);
 800ce96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	2317      	movs	r3, #23
 800ce9e:	2202      	movs	r2, #2
 800cea0:	210a      	movs	r1, #10
 800cea2:	2064      	movs	r0, #100	; 0x64
 800cea4:	f7f3 fed8 	bl	8000c58 <UTIL_LCD_DrawRect>
    }
  }

  // number set
  if ((x > 12) && (x < 62) && (y > 9) && (y < 34))
 800cea8:	4b55      	ldr	r3, [pc, #340]	; (800d000 <GetPosition+0x260>)
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	2b0c      	cmp	r3, #12
 800ceae:	d90d      	bls.n	800cecc <GetPosition+0x12c>
 800ceb0:	4b53      	ldr	r3, [pc, #332]	; (800d000 <GetPosition+0x260>)
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	2b3d      	cmp	r3, #61	; 0x3d
 800ceb6:	d809      	bhi.n	800cecc <GetPosition+0x12c>
 800ceb8:	4b52      	ldr	r3, [pc, #328]	; (800d004 <GetPosition+0x264>)
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	2b09      	cmp	r3, #9
 800cebe:	d905      	bls.n	800cecc <GetPosition+0x12c>
 800cec0:	4b50      	ldr	r3, [pc, #320]	; (800d004 <GetPosition+0x264>)
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	2b21      	cmp	r3, #33	; 0x21
 800cec6:	d801      	bhi.n	800cecc <GetPosition+0x12c>
  {
    Set_Bomb_Number();
 800cec8:	f000 fafe 	bl	800d4c8 <Set_Bomb_Number>
  }

  // clicks happy face
  if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
 800cecc:	4b4c      	ldr	r3, [pc, #304]	; (800d000 <GetPosition+0x260>)
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	2bdc      	cmp	r3, #220	; 0xdc
 800ced2:	d90d      	bls.n	800cef0 <GetPosition+0x150>
 800ced4:	4b4a      	ldr	r3, [pc, #296]	; (800d000 <GetPosition+0x260>)
 800ced6:	881b      	ldrh	r3, [r3, #0]
 800ced8:	2bfe      	cmp	r3, #254	; 0xfe
 800ceda:	d809      	bhi.n	800cef0 <GetPosition+0x150>
 800cedc:	4b49      	ldr	r3, [pc, #292]	; (800d004 <GetPosition+0x264>)
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	2b07      	cmp	r3, #7
 800cee2:	d905      	bls.n	800cef0 <GetPosition+0x150>
 800cee4:	4b47      	ldr	r3, [pc, #284]	; (800d004 <GetPosition+0x264>)
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	d801      	bhi.n	800cef0 <GetPosition+0x150>
  {
    //
    Reset_Game();
 800ceec:	f000 fec4 	bl	800dc78 <Reset_Game>
  }

  // press squears
  if ((x > 10) && (x < 470) && (y > 43) && (y < 263))
 800cef0:	4b43      	ldr	r3, [pc, #268]	; (800d000 <GetPosition+0x260>)
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	2b0a      	cmp	r3, #10
 800cef6:	f240 813f 	bls.w	800d178 <GetPosition+0x3d8>
 800cefa:	4b41      	ldr	r3, [pc, #260]	; (800d000 <GetPosition+0x260>)
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 800cf02:	f080 8139 	bcs.w	800d178 <GetPosition+0x3d8>
 800cf06:	4b3f      	ldr	r3, [pc, #252]	; (800d004 <GetPosition+0x264>)
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	2b2b      	cmp	r3, #43	; 0x2b
 800cf0c:	f240 8134 	bls.w	800d178 <GetPosition+0x3d8>
 800cf10:	4b3c      	ldr	r3, [pc, #240]	; (800d004 <GetPosition+0x264>)
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800cf18:	f200 812e 	bhi.w	800d178 <GetPosition+0x3d8>
  {
    x = x - 10;
 800cf1c:	4b38      	ldr	r3, [pc, #224]	; (800d000 <GetPosition+0x260>)
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	3b0a      	subs	r3, #10
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	4b36      	ldr	r3, [pc, #216]	; (800d000 <GetPosition+0x260>)
 800cf26:	801a      	strh	r2, [r3, #0]
    y = y - 43;
 800cf28:	4b36      	ldr	r3, [pc, #216]	; (800d004 <GetPosition+0x264>)
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	3b2b      	subs	r3, #43	; 0x2b
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	4b34      	ldr	r3, [pc, #208]	; (800d004 <GetPosition+0x264>)
 800cf32:	801a      	strh	r2, [r3, #0]
    x = x / 20;
 800cf34:	4b32      	ldr	r3, [pc, #200]	; (800d000 <GetPosition+0x260>)
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	4a38      	ldr	r2, [pc, #224]	; (800d01c <GetPosition+0x27c>)
 800cf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3e:	091b      	lsrs	r3, r3, #4
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	4b2f      	ldr	r3, [pc, #188]	; (800d000 <GetPosition+0x260>)
 800cf44:	801a      	strh	r2, [r3, #0]
    y = y / 20;
 800cf46:	4b2f      	ldr	r3, [pc, #188]	; (800d004 <GetPosition+0x264>)
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	4a34      	ldr	r2, [pc, #208]	; (800d01c <GetPosition+0x27c>)
 800cf4c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf50:	091b      	lsrs	r3, r3, #4
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	4b2b      	ldr	r3, [pc, #172]	; (800d004 <GetPosition+0x264>)
 800cf56:	801a      	strh	r2, [r3, #0]

    if (y >= 0 && y <= 11 && x <= 23 && x >= 0)
 800cf58:	4b2a      	ldr	r3, [pc, #168]	; (800d004 <GetPosition+0x264>)
 800cf5a:	881b      	ldrh	r3, [r3, #0]
 800cf5c:	2b0b      	cmp	r3, #11
 800cf5e:	f200 810b 	bhi.w	800d178 <GetPosition+0x3d8>
 800cf62:	4b27      	ldr	r3, [pc, #156]	; (800d000 <GetPosition+0x260>)
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	2b17      	cmp	r3, #23
 800cf68:	f200 8106 	bhi.w	800d178 <GetPosition+0x3d8>
    {
      if (flag == 1)
 800cf6c:	4b28      	ldr	r3, [pc, #160]	; (800d010 <GetPosition+0x270>)
 800cf6e:	f993 3000 	ldrsb.w	r3, [r3]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	f040 8098 	bne.w	800d0a8 <GetPosition+0x308>
      {

        if (tab[x][y] < 9)
 800cf78:	4b21      	ldr	r3, [pc, #132]	; (800d000 <GetPosition+0x260>)
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b21      	ldr	r3, [pc, #132]	; (800d004 <GetPosition+0x264>)
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	4618      	mov	r0, r3
 800cf84:	4926      	ldr	r1, [pc, #152]	; (800d020 <GetPosition+0x280>)
 800cf86:	4613      	mov	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	440b      	add	r3, r1
 800cf92:	4403      	add	r3, r0
 800cf94:	f993 3000 	ldrsb.w	r3, [r3]
 800cf98:	2b08      	cmp	r3, #8
 800cf9a:	dc43      	bgt.n	800d024 <GetPosition+0x284>
        {
          Draw_flag(x, y);
 800cf9c:	4b18      	ldr	r3, [pc, #96]	; (800d000 <GetPosition+0x260>)
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	b25b      	sxtb	r3, r3
 800cfa2:	4a18      	ldr	r2, [pc, #96]	; (800d004 <GetPosition+0x264>)
 800cfa4:	8812      	ldrh	r2, [r2, #0]
 800cfa6:	b252      	sxtb	r2, r2
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fbd2 	bl	800d754 <Draw_flag>
          tab[x][y] += 20;
 800cfb0:	4b13      	ldr	r3, [pc, #76]	; (800d000 <GetPosition+0x260>)
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4b13      	ldr	r3, [pc, #76]	; (800d004 <GetPosition+0x264>)
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	4918      	ldr	r1, [pc, #96]	; (800d020 <GetPosition+0x280>)
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4413      	add	r3, r2
 800cfc8:	440b      	add	r3, r1
 800cfca:	4403      	add	r3, r0
 800cfcc:	f993 3000 	ldrsb.w	r3, [r3]
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	3314      	adds	r3, #20
 800cfd4:	b2d9      	uxtb	r1, r3
 800cfd6:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <GetPosition+0x260>)
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <GetPosition+0x264>)
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	461c      	mov	r4, r3
 800cfe2:	b248      	sxtb	r0, r1
 800cfe4:	490e      	ldr	r1, [pc, #56]	; (800d020 <GetPosition+0x280>)
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	4413      	add	r3, r2
 800cff0:	440b      	add	r3, r1
 800cff2:	4423      	add	r3, r4
 800cff4:	4602      	mov	r2, r0
 800cff6:	701a      	strb	r2, [r3, #0]
 800cff8:	e0be      	b.n	800d178 <GetPosition+0x3d8>
 800cffa:	bf00      	nop
 800cffc:	2400162c 	.word	0x2400162c
 800d000:	24001612 	.word	0x24001612
 800d004:	24001614 	.word	0x24001614
 800d008:	24001616 	.word	0x24001616
 800d00c:	24001618 	.word	0x24001618
 800d010:	24001611 	.word	0x24001611
 800d014:	ffff0000 	.word	0xffff0000
 800d018:	ff4f5251 	.word	0xff4f5251
 800d01c:	cccccccd 	.word	0xcccccccd
 800d020:	24001514 	.word	0x24001514
        }
        else if (tab[x][y] >= 19)
 800d024:	4b56      	ldr	r3, [pc, #344]	; (800d180 <GetPosition+0x3e0>)
 800d026:	881b      	ldrh	r3, [r3, #0]
 800d028:	461a      	mov	r2, r3
 800d02a:	4b56      	ldr	r3, [pc, #344]	; (800d184 <GetPosition+0x3e4>)
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	4955      	ldr	r1, [pc, #340]	; (800d188 <GetPosition+0x3e8>)
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	4413      	add	r3, r2
 800d03c:	440b      	add	r3, r1
 800d03e:	4403      	add	r3, r0
 800d040:	f993 3000 	ldrsb.w	r3, [r3]
 800d044:	2b12      	cmp	r3, #18
 800d046:	f340 8097 	ble.w	800d178 <GetPosition+0x3d8>
        {
          Remove_flag(x, y);
 800d04a:	4b4d      	ldr	r3, [pc, #308]	; (800d180 <GetPosition+0x3e0>)
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	4a4c      	ldr	r2, [pc, #304]	; (800d184 <GetPosition+0x3e4>)
 800d052:	8812      	ldrh	r2, [r2, #0]
 800d054:	b252      	sxtb	r2, r2
 800d056:	4611      	mov	r1, r2
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fbe5 	bl	800d828 <Remove_flag>
          tab[x][y] -= 20;
 800d05e:	4b48      	ldr	r3, [pc, #288]	; (800d180 <GetPosition+0x3e0>)
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	4b47      	ldr	r3, [pc, #284]	; (800d184 <GetPosition+0x3e4>)
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	4947      	ldr	r1, [pc, #284]	; (800d188 <GetPosition+0x3e8>)
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	4413      	add	r3, r2
 800d076:	440b      	add	r3, r1
 800d078:	4403      	add	r3, r0
 800d07a:	f993 3000 	ldrsb.w	r3, [r3]
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	3b14      	subs	r3, #20
 800d082:	b2d9      	uxtb	r1, r3
 800d084:	4b3e      	ldr	r3, [pc, #248]	; (800d180 <GetPosition+0x3e0>)
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	4b3e      	ldr	r3, [pc, #248]	; (800d184 <GetPosition+0x3e4>)
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	461c      	mov	r4, r3
 800d090:	b248      	sxtb	r0, r1
 800d092:	493d      	ldr	r1, [pc, #244]	; (800d188 <GetPosition+0x3e8>)
 800d094:	4613      	mov	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	4413      	add	r3, r2
 800d09e:	440b      	add	r3, r1
 800d0a0:	4423      	add	r3, r4
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	e067      	b.n	800d178 <GetPosition+0x3d8>
        }
      }
      else
      {
        if (tab[x][y] < 10)
 800d0a8:	4b35      	ldr	r3, [pc, #212]	; (800d180 <GetPosition+0x3e0>)
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4b35      	ldr	r3, [pc, #212]	; (800d184 <GetPosition+0x3e4>)
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	4934      	ldr	r1, [pc, #208]	; (800d188 <GetPosition+0x3e8>)
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	005b      	lsls	r3, r3, #1
 800d0be:	4413      	add	r3, r2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	4403      	add	r3, r0
 800d0c4:	f993 3000 	ldrsb.w	r3, [r3]
 800d0c8:	2b09      	cmp	r3, #9
 800d0ca:	dc09      	bgt.n	800d0e0 <GetPosition+0x340>
          Draw_Cvad(x, y);
 800d0cc:	4b2c      	ldr	r3, [pc, #176]	; (800d180 <GetPosition+0x3e0>)
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	b25b      	sxtb	r3, r3
 800d0d2:	4a2c      	ldr	r2, [pc, #176]	; (800d184 <GetPosition+0x3e4>)
 800d0d4:	8812      	ldrh	r2, [r2, #0]
 800d0d6:	b252      	sxtb	r2, r2
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7ff fcc2 	bl	800ca64 <Draw_Cvad>
        if (tab[x][y] == 0)
 800d0e0:	4b27      	ldr	r3, [pc, #156]	; (800d180 <GetPosition+0x3e0>)
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b27      	ldr	r3, [pc, #156]	; (800d184 <GetPosition+0x3e4>)
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	4926      	ldr	r1, [pc, #152]	; (800d188 <GetPosition+0x3e8>)
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	4413      	add	r3, r2
 800d0f8:	440b      	add	r3, r1
 800d0fa:	4403      	add	r3, r0
 800d0fc:	f993 3000 	ldrsb.w	r3, [r3]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10a      	bne.n	800d11a <GetPosition+0x37a>
        {
          Open_empty(x, y);
 800d104:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <GetPosition+0x3e0>)
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	b25b      	sxtb	r3, r3
 800d10a:	4a1e      	ldr	r2, [pc, #120]	; (800d184 <GetPosition+0x3e4>)
 800d10c:	8812      	ldrh	r2, [r2, #0]
 800d10e:	b252      	sxtb	r2, r2
 800d110:	4611      	mov	r1, r2
 800d112:	4618      	mov	r0, r3
 800d114:	f000 f83c 	bl	800d190 <Open_empty>
 800d118:	e02e      	b.n	800d178 <GetPosition+0x3d8>
        }
        else if (tab[x][y] == -1)
 800d11a:	4b19      	ldr	r3, [pc, #100]	; (800d180 <GetPosition+0x3e0>)
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	4b18      	ldr	r3, [pc, #96]	; (800d184 <GetPosition+0x3e4>)
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	4918      	ldr	r1, [pc, #96]	; (800d188 <GetPosition+0x3e8>)
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	005b      	lsls	r3, r3, #1
 800d130:	4413      	add	r3, r2
 800d132:	440b      	add	r3, r1
 800d134:	4403      	add	r3, r0
 800d136:	f993 3000 	ldrsb.w	r3, [r3]
 800d13a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d13e:	d11b      	bne.n	800d178 <GetPosition+0x3d8>
        {
          UTIL_LCD_FillRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_RED);
 800d140:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <GetPosition+0x3e0>)
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	461a      	mov	r2, r3
 800d146:	4613      	mov	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	330a      	adds	r3, #10
 800d150:	4618      	mov	r0, r3
 800d152:	4b0c      	ldr	r3, [pc, #48]	; (800d184 <GetPosition+0x3e4>)
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	4613      	mov	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	332b      	adds	r3, #43	; 0x2b
 800d162:	4619      	mov	r1, r3
 800d164:	4b09      	ldr	r3, [pc, #36]	; (800d18c <GetPosition+0x3ec>)
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	2314      	movs	r3, #20
 800d16a:	2214      	movs	r2, #20
 800d16c:	f7f3 fea8 	bl	8000ec0 <UTIL_LCD_FillRect>
          Bomb_Hit();
 800d170:	f7ff fb9e 	bl	800c8b0 <Bomb_Hit>
 800d174:	e000      	b.n	800d178 <GetPosition+0x3d8>
    return;
 800d176:	bf00      	nop
        }
      }
    }
  }
}
 800d178:	3704      	adds	r7, #4
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd90      	pop	{r4, r7, pc}
 800d17e:	bf00      	nop
 800d180:	24001612 	.word	0x24001612
 800d184:	24001614 	.word	0x24001614
 800d188:	24001514 	.word	0x24001514
 800d18c:	ffff0000 	.word	0xffff0000

0800d190 <Open_empty>:
 * @brief  Opens empty squears
 * @param  None
 * @retval None
 */
static void Open_empty(int8_t x, int8_t y)
{
 800d190:	b590      	push	{r4, r7, lr}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	460a      	mov	r2, r1
 800d19a:	71fb      	strb	r3, [r7, #7]
 800d19c:	4613      	mov	r3, r2
 800d19e:	71bb      	strb	r3, [r7, #6]
  Draw_Cvad(x, y);
 800d1a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d1a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff fc5a 	bl	800ca64 <Draw_Cvad>
  tab[x][y] += 10;
 800d1b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d1b4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800d1b8:	48ba      	ldr	r0, [pc, #744]	; (800d4a4 <Open_empty+0x314>)
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	4413      	add	r3, r2
 800d1c4:	4403      	add	r3, r0
 800d1c6:	440b      	add	r3, r1
 800d1c8:	f993 3000 	ldrsb.w	r3, [r3]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	330a      	adds	r3, #10
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d1d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800d1da:	b25c      	sxtb	r4, r3
 800d1dc:	48b1      	ldr	r0, [pc, #708]	; (800d4a4 <Open_empty+0x314>)
 800d1de:	4613      	mov	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	4403      	add	r3, r0
 800d1ea:	440b      	add	r3, r1
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	701a      	strb	r2, [r3, #0]
  if (y > 0)
 800d1f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f340 8084 	ble.w	800d302 <Open_empty+0x172>
  {
    if (tab[x][y - 1] == 0)
 800d1fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d1fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d202:	1e59      	subs	r1, r3, #1
 800d204:	48a7      	ldr	r0, [pc, #668]	; (800d4a4 <Open_empty+0x314>)
 800d206:	4613      	mov	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	4413      	add	r3, r2
 800d210:	4403      	add	r3, r0
 800d212:	440b      	add	r3, r1
 800d214:	f993 3000 	ldrsb.w	r3, [r3]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <Open_empty+0xa2>
      Open_empty(x, y - 1);
 800d21c:	79bb      	ldrb	r3, [r7, #6]
 800d21e:	3b01      	subs	r3, #1
 800d220:	b2db      	uxtb	r3, r3
 800d222:	b25a      	sxtb	r2, r3
 800d224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7ff ffb0 	bl	800d190 <Open_empty>
 800d230:	e009      	b.n	800d246 <Open_empty+0xb6>
    else
      Draw_Cvad(x, y - 1);
 800d232:	79bb      	ldrb	r3, [r7, #6]
 800d234:	3b01      	subs	r3, #1
 800d236:	b2db      	uxtb	r3, r3
 800d238:	b25a      	sxtb	r2, r3
 800d23a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7ff fc0f 	bl	800ca64 <Draw_Cvad>
    if (x > 0)
 800d246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	dd2a      	ble.n	800d2a4 <Open_empty+0x114>
    {
      if (tab[x - 1][y - 1] == 0)
 800d24e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d252:	1e5a      	subs	r2, r3, #1
 800d254:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d258:	1e59      	subs	r1, r3, #1
 800d25a:	4892      	ldr	r0, [pc, #584]	; (800d4a4 <Open_empty+0x314>)
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4413      	add	r3, r2
 800d266:	4403      	add	r3, r0
 800d268:	440b      	add	r3, r1
 800d26a:	f993 3000 	ldrsb.w	r3, [r3]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10c      	bne.n	800d28c <Open_empty+0xfc>
        Open_empty(x - 1, y - 1);
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	3b01      	subs	r3, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	b25a      	sxtb	r2, r3
 800d27a:	79bb      	ldrb	r3, [r7, #6]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	b25b      	sxtb	r3, r3
 800d282:	4619      	mov	r1, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f7ff ff83 	bl	800d190 <Open_empty>
 800d28a:	e00b      	b.n	800d2a4 <Open_empty+0x114>
      else
        Draw_Cvad(x - 1, y - 1);
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	3b01      	subs	r3, #1
 800d290:	b2db      	uxtb	r3, r3
 800d292:	b25a      	sxtb	r2, r3
 800d294:	79bb      	ldrb	r3, [r7, #6]
 800d296:	3b01      	subs	r3, #1
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	b25b      	sxtb	r3, r3
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7ff fbe0 	bl	800ca64 <Draw_Cvad>
    }
    if (x < 22)
 800d2a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a8:	2b15      	cmp	r3, #21
 800d2aa:	dc2a      	bgt.n	800d302 <Open_empty+0x172>
    {
      if (tab[x + 1][y - 1] == 0)
 800d2ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d2b6:	1e59      	subs	r1, r3, #1
 800d2b8:	487a      	ldr	r0, [pc, #488]	; (800d4a4 <Open_empty+0x314>)
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	4403      	add	r3, r0
 800d2c6:	440b      	add	r3, r1
 800d2c8:	f993 3000 	ldrsb.w	r3, [r3]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10c      	bne.n	800d2ea <Open_empty+0x15a>
        Open_empty(x + 1, y - 1);
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	b25a      	sxtb	r2, r3
 800d2d8:	79bb      	ldrb	r3, [r7, #6]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	b25b      	sxtb	r3, r3
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7ff ff54 	bl	800d190 <Open_empty>
 800d2e8:	e00b      	b.n	800d302 <Open_empty+0x172>
      else
        Draw_Cvad(x + 1, y - 1);
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	b25a      	sxtb	r2, r3
 800d2f2:	79bb      	ldrb	r3, [r7, #6]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	b25b      	sxtb	r3, r3
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7ff fbb1 	bl	800ca64 <Draw_Cvad>
    }
  }
  if (x > 0)
 800d302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	dd25      	ble.n	800d356 <Open_empty+0x1c6>
  {
    if (tab[x - 1][y] == 0)
 800d30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800d314:	4863      	ldr	r0, [pc, #396]	; (800d4a4 <Open_empty+0x314>)
 800d316:	4613      	mov	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4413      	add	r3, r2
 800d320:	4403      	add	r3, r0
 800d322:	440b      	add	r3, r1
 800d324:	f993 3000 	ldrsb.w	r3, [r3]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <Open_empty+0x1b2>
      Open_empty(x - 1, y);
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	3b01      	subs	r3, #1
 800d330:	b2db      	uxtb	r3, r3
 800d332:	b25b      	sxtb	r3, r3
 800d334:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d338:	4611      	mov	r1, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff ff28 	bl	800d190 <Open_empty>
 800d340:	e009      	b.n	800d356 <Open_empty+0x1c6>
    else
      Draw_Cvad(x - 1, y);
 800d342:	79fb      	ldrb	r3, [r7, #7]
 800d344:	3b01      	subs	r3, #1
 800d346:	b2db      	uxtb	r3, r3
 800d348:	b25b      	sxtb	r3, r3
 800d34a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d34e:	4611      	mov	r1, r2
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fb87 	bl	800ca64 <Draw_Cvad>
  }
  if (x < 22)
 800d356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d35a:	2b15      	cmp	r3, #21
 800d35c:	dc25      	bgt.n	800d3aa <Open_empty+0x21a>
  {
    if (tab[x + 1][y] == 0)
 800d35e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800d368:	484e      	ldr	r0, [pc, #312]	; (800d4a4 <Open_empty+0x314>)
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	4413      	add	r3, r2
 800d374:	4403      	add	r3, r0
 800d376:	440b      	add	r3, r1
 800d378:	f993 3000 	ldrsb.w	r3, [r3]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <Open_empty+0x206>
      Open_empty(x + 1, y);
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	3301      	adds	r3, #1
 800d384:	b2db      	uxtb	r3, r3
 800d386:	b25b      	sxtb	r3, r3
 800d388:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d38c:	4611      	mov	r1, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fefe 	bl	800d190 <Open_empty>
 800d394:	e009      	b.n	800d3aa <Open_empty+0x21a>
    else
      Draw_Cvad(x + 1, y);
 800d396:	79fb      	ldrb	r3, [r7, #7]
 800d398:	3301      	adds	r3, #1
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	b25b      	sxtb	r3, r3
 800d39e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fb5d 	bl	800ca64 <Draw_Cvad>
  }
  if (y < 10)
 800d3aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d3ae:	2b09      	cmp	r3, #9
 800d3b0:	f300 8086 	bgt.w	800d4c0 <Open_empty+0x330>
  {
    if (tab[x][y + 1] == 0)
 800d3b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d3b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d3bc:	1c59      	adds	r1, r3, #1
 800d3be:	4839      	ldr	r0, [pc, #228]	; (800d4a4 <Open_empty+0x314>)
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	005b      	lsls	r3, r3, #1
 800d3c8:	4413      	add	r3, r2
 800d3ca:	4403      	add	r3, r0
 800d3cc:	440b      	add	r3, r1
 800d3ce:	f993 3000 	ldrsb.w	r3, [r3]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <Open_empty+0x25c>
      Open_empty(x, y + 1);
 800d3d6:	79bb      	ldrb	r3, [r7, #6]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	b25a      	sxtb	r2, r3
 800d3de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fed3 	bl	800d190 <Open_empty>
 800d3ea:	e009      	b.n	800d400 <Open_empty+0x270>
    else
      Draw_Cvad(x, y + 1);
 800d3ec:	79bb      	ldrb	r3, [r7, #6]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	b25a      	sxtb	r2, r3
 800d3f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fb32 	bl	800ca64 <Draw_Cvad>
    if (x > 0)
 800d400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d404:	2b00      	cmp	r3, #0
 800d406:	dd2a      	ble.n	800d45e <Open_empty+0x2ce>
    {
      if (tab[x - 1][y + 1] == 0)
 800d408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d40c:	1e5a      	subs	r2, r3, #1
 800d40e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d412:	1c59      	adds	r1, r3, #1
 800d414:	4823      	ldr	r0, [pc, #140]	; (800d4a4 <Open_empty+0x314>)
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	4403      	add	r3, r0
 800d422:	440b      	add	r3, r1
 800d424:	f993 3000 	ldrsb.w	r3, [r3]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10c      	bne.n	800d446 <Open_empty+0x2b6>
        Open_empty(x - 1, y + 1);
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	3b01      	subs	r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	b25a      	sxtb	r2, r3
 800d434:	79bb      	ldrb	r3, [r7, #6]
 800d436:	3301      	adds	r3, #1
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f7ff fea6 	bl	800d190 <Open_empty>
 800d444:	e00b      	b.n	800d45e <Open_empty+0x2ce>
      else
        Draw_Cvad(x - 1, y + 1);
 800d446:	79fb      	ldrb	r3, [r7, #7]
 800d448:	3b01      	subs	r3, #1
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	b25a      	sxtb	r2, r3
 800d44e:	79bb      	ldrb	r3, [r7, #6]
 800d450:	3301      	adds	r3, #1
 800d452:	b2db      	uxtb	r3, r3
 800d454:	b25b      	sxtb	r3, r3
 800d456:	4619      	mov	r1, r3
 800d458:	4610      	mov	r0, r2
 800d45a:	f7ff fb03 	bl	800ca64 <Draw_Cvad>
    }
    if (x < 22)
 800d45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d462:	2b15      	cmp	r3, #21
 800d464:	dc2c      	bgt.n	800d4c0 <Open_empty+0x330>
    {
      if (tab[x + 1][y + 1] == 0)
 800d466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d470:	1c59      	adds	r1, r3, #1
 800d472:	480c      	ldr	r0, [pc, #48]	; (800d4a4 <Open_empty+0x314>)
 800d474:	4613      	mov	r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	4403      	add	r3, r0
 800d480:	440b      	add	r3, r1
 800d482:	f993 3000 	ldrsb.w	r3, [r3]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10e      	bne.n	800d4a8 <Open_empty+0x318>
        Open_empty(x + 1, y + 1);
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	3301      	adds	r3, #1
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	b25a      	sxtb	r2, r3
 800d492:	79bb      	ldrb	r3, [r7, #6]
 800d494:	3301      	adds	r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	b25b      	sxtb	r3, r3
 800d49a:	4619      	mov	r1, r3
 800d49c:	4610      	mov	r0, r2
 800d49e:	f7ff fe77 	bl	800d190 <Open_empty>
      else
        Draw_Cvad(x + 1, y + 1);
    }
  }
}
 800d4a2:	e00d      	b.n	800d4c0 <Open_empty+0x330>
 800d4a4:	24001514 	.word	0x24001514
        Draw_Cvad(x + 1, y + 1);
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	b25a      	sxtb	r2, r3
 800d4b0:	79bb      	ldrb	r3, [r7, #6]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	f7ff fad2 	bl	800ca64 <Draw_Cvad>
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd90      	pop	{r4, r7, pc}

0800d4c8 <Set_Bomb_Number>:
 * @brief  load bomb insert window
 * @param  None
 * @retval None
 */
static void Set_Bomb_Number()
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af02      	add	r7, sp, #8
  Game_State = 2;
 800d4ce:	4b96      	ldr	r3, [pc, #600]	; (800d728 <Set_Bomb_Number+0x260>)
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	701a      	strb	r2, [r3, #0]
  Tmp_Mine_Num = 0;
 800d4d4:	4b95      	ldr	r3, [pc, #596]	; (800d72c <Set_Bomb_Number+0x264>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	801a      	strh	r2, [r3, #0]

  // mine number selection section
  UTIL_LCD_FillRect(10, 41, x_size - 16, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800d4da:	4b95      	ldr	r3, [pc, #596]	; (800d730 <Set_Bomb_Number+0x268>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f1a3 0210 	sub.w	r2, r3, #16
 800d4e2:	4b94      	ldr	r3, [pc, #592]	; (800d734 <Set_Bomb_Number+0x26c>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3b32      	subs	r3, #50	; 0x32
 800d4e8:	4993      	ldr	r1, [pc, #588]	; (800d738 <Set_Bomb_Number+0x270>)
 800d4ea:	9100      	str	r1, [sp, #0]
 800d4ec:	2129      	movs	r1, #41	; 0x29
 800d4ee:	200a      	movs	r0, #10
 800d4f0:	f7f3 fce6 	bl	8000ec0 <UTIL_LCD_FillRect>
  UTIL_LCD_DrawRect(8, 41, x_size - 16, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d4f4:	4b8e      	ldr	r3, [pc, #568]	; (800d730 <Set_Bomb_Number+0x268>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f1a3 0210 	sub.w	r2, r3, #16
 800d4fc:	4b8f      	ldr	r3, [pc, #572]	; (800d73c <Set_Bomb_Number+0x274>)
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	2302      	movs	r3, #2
 800d502:	2129      	movs	r1, #41	; 0x29
 800d504:	2008      	movs	r0, #8
 800d506:	f7f3 fba7 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, 41, 2, y_size - 50, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d50a:	4b8a      	ldr	r3, [pc, #552]	; (800d734 <Set_Bomb_Number+0x26c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	3b32      	subs	r3, #50	; 0x32
 800d510:	4a8a      	ldr	r2, [pc, #552]	; (800d73c <Set_Bomb_Number+0x274>)
 800d512:	9200      	str	r2, [sp, #0]
 800d514:	2202      	movs	r2, #2
 800d516:	2129      	movs	r1, #41	; 0x29
 800d518:	2008      	movs	r0, #8
 800d51a:	f7f3 fb9d 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 10, 41, 2, y_size - 50, UTIL_LCD_COLOR_WHITE);
 800d51e:	4b84      	ldr	r3, [pc, #528]	; (800d730 <Set_Bomb_Number+0x268>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f1a3 000a 	sub.w	r0, r3, #10
 800d526:	4b83      	ldr	r3, [pc, #524]	; (800d734 <Set_Bomb_Number+0x26c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3b32      	subs	r3, #50	; 0x32
 800d52c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d530:	9200      	str	r2, [sp, #0]
 800d532:	2202      	movs	r2, #2
 800d534:	2129      	movs	r1, #41	; 0x29
 800d536:	f7f3 fb8f 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(8, y_size - 9, x_size - 16, 2, UTIL_LCD_COLOR_WHITE);
 800d53a:	4b7e      	ldr	r3, [pc, #504]	; (800d734 <Set_Bomb_Number+0x26c>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f1a3 0109 	sub.w	r1, r3, #9
 800d542:	4b7b      	ldr	r3, [pc, #492]	; (800d730 <Set_Bomb_Number+0x268>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f1a3 0210 	sub.w	r2, r3, #16
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	2302      	movs	r3, #2
 800d552:	2008      	movs	r0, #8
 800d554:	f7f3 fb80 	bl	8000c58 <UTIL_LCD_DrawRect>

  int8_t i = 1;
 800d558:	2301      	movs	r3, #1
 800d55a:	71fb      	strb	r3, [r7, #7]
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800d55c:	4876      	ldr	r0, [pc, #472]	; (800d738 <Set_Bomb_Number+0x270>)
 800d55e:	f7f3 f99d 	bl	800089c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800d562:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d566:	f7f3 f985 	bl	8000874 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800d56a:	4875      	ldr	r0, [pc, #468]	; (800d740 <Set_Bomb_Number+0x278>)
 800d56c:	f7f3 f9aa 	bl	80008c4 <UTIL_LCD_SetFont>

  char st;
  sprintf(st, "%1d", 0);
 800d570:	793b      	ldrb	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	4973      	ldr	r1, [pc, #460]	; (800d744 <Set_Bomb_Number+0x27c>)
 800d576:	4618      	mov	r0, r3
 800d578:	f000 fc36 	bl	800dde8 <siprintf>
  UTIL_LCD_DisplayStringAt(170 + (1 * 55), 60 + (3 * 55), (uint8_t *)st, LEFT_MODE);
 800d57c:	793b      	ldrb	r3, [r7, #4]
 800d57e:	461a      	mov	r2, r3
 800d580:	2303      	movs	r3, #3
 800d582:	21e1      	movs	r1, #225	; 0xe1
 800d584:	20e1      	movs	r0, #225	; 0xe1
 800d586:	f7f3 fab9 	bl	8000afc <UTIL_LCD_DisplayStringAt>

  sprintf(st, "%1d", 0);
 800d58a:	793b      	ldrb	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	496d      	ldr	r1, [pc, #436]	; (800d744 <Set_Bomb_Number+0x27c>)
 800d590:	4618      	mov	r0, r3
 800d592:	f000 fc29 	bl	800dde8 <siprintf>
  UTIL_LCD_DisplayStringAt(160 + (2 * 55), 60 + (3 * 55), (uint8_t *)"OK", LEFT_MODE);
 800d596:	2303      	movs	r3, #3
 800d598:	4a6b      	ldr	r2, [pc, #428]	; (800d748 <Set_Bomb_Number+0x280>)
 800d59a:	21e1      	movs	r1, #225	; 0xe1
 800d59c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800d5a0:	f7f3 faac 	bl	8000afc <UTIL_LCD_DisplayStringAt>

  sprintf(st, "%1d", 0);
 800d5a4:	793b      	ldrb	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	4966      	ldr	r1, [pc, #408]	; (800d744 <Set_Bomb_Number+0x27c>)
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 fc1c 	bl	800dde8 <siprintf>
  UTIL_LCD_DisplayStringAt(152 + (0 * 55), 60 + (3 * 55), (uint8_t *)"CLR", LEFT_MODE);
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	4a66      	ldr	r2, [pc, #408]	; (800d74c <Set_Bomb_Number+0x284>)
 800d5b4:	21e1      	movs	r1, #225	; 0xe1
 800d5b6:	2098      	movs	r0, #152	; 0x98
 800d5b8:	f7f3 faa0 	bl	8000afc <UTIL_LCD_DisplayStringAt>
  for (int8_t y = 0; y < 4; y++)
 800d5bc:	2300      	movs	r3, #0
 800d5be:	71bb      	strb	r3, [r7, #6]
 800d5c0:	e09d      	b.n	800d6fe <Set_Bomb_Number+0x236>
    for (int8_t x = 0; x < 3; x++)
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	717b      	strb	r3, [r7, #5]
 800d5c6:	e08f      	b.n	800d6e8 <Set_Bomb_Number+0x220>
    {
      {
        UTIL_LCD_DrawRect(203 + (x * 55), 43 + (y * 55), 2, 55, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d5c8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	1a9b      	subs	r3, r3, r2
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	1a9b      	subs	r3, r3, r2
 800d5d6:	33cb      	adds	r3, #203	; 0xcb
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	00db      	lsls	r3, r3, #3
 800d5e6:	1a9b      	subs	r3, r3, r2
 800d5e8:	332b      	adds	r3, #43	; 0x2b
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4b53      	ldr	r3, [pc, #332]	; (800d73c <Set_Bomb_Number+0x274>)
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	2337      	movs	r3, #55	; 0x37
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	f7f3 fb30 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 43 + (y * 55), 55, 2, UTIL_LCD_COLOR_WHITE);
 800d5f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	1a9b      	subs	r3, r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	3396      	adds	r3, #150	; 0x96
 800d608:	4618      	mov	r0, r3
 800d60a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d60e:	4613      	mov	r3, r2
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	1a9b      	subs	r3, r3, r2
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	1a9b      	subs	r3, r3, r2
 800d618:	332b      	adds	r3, #43	; 0x2b
 800d61a:	4619      	mov	r1, r3
 800d61c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	2302      	movs	r3, #2
 800d624:	2237      	movs	r2, #55	; 0x37
 800d626:	f7f3 fb17 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 43 + (y * 55), 2, 55, UTIL_LCD_COLOR_WHITE);
 800d62a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800d62e:	4613      	mov	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	1a9b      	subs	r3, r3, r2
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	1a9b      	subs	r3, r3, r2
 800d638:	3396      	adds	r3, #150	; 0x96
 800d63a:	4618      	mov	r0, r3
 800d63c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	1a9b      	subs	r3, r3, r2
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	1a9b      	subs	r3, r3, r2
 800d64a:	332b      	adds	r3, #43	; 0x2b
 800d64c:	4619      	mov	r1, r3
 800d64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	2337      	movs	r3, #55	; 0x37
 800d656:	2202      	movs	r2, #2
 800d658:	f7f3 fafe 	bl	8000c58 <UTIL_LCD_DrawRect>
        UTIL_LCD_DrawRect(150 + (x * 55), 96 + (y * 55), 55, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d65c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800d660:	4613      	mov	r3, r2
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	1a9b      	subs	r3, r3, r2
 800d666:	00db      	lsls	r3, r3, #3
 800d668:	1a9b      	subs	r3, r3, r2
 800d66a:	3396      	adds	r3, #150	; 0x96
 800d66c:	4618      	mov	r0, r3
 800d66e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d672:	4613      	mov	r3, r2
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	1a9b      	subs	r3, r3, r2
 800d678:	00db      	lsls	r3, r3, #3
 800d67a:	1a9b      	subs	r3, r3, r2
 800d67c:	3360      	adds	r3, #96	; 0x60
 800d67e:	4619      	mov	r1, r3
 800d680:	4b2e      	ldr	r3, [pc, #184]	; (800d73c <Set_Bomb_Number+0x274>)
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	2302      	movs	r3, #2
 800d686:	2237      	movs	r2, #55	; 0x37
 800d688:	f7f3 fae6 	bl	8000c58 <UTIL_LCD_DrawRect>
        if (y < 3)
 800d68c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d690:	2b02      	cmp	r3, #2
 800d692:	dc23      	bgt.n	800d6dc <Set_Bomb_Number+0x214>
        {
          sprintf(st, "%1d", i++);
 800d694:	793b      	ldrb	r3, [r7, #4]
 800d696:	4618      	mov	r0, r3
 800d698:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d69c:	b2d3      	uxtb	r3, r2
 800d69e:	3301      	adds	r3, #1
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	71fb      	strb	r3, [r7, #7]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4926      	ldr	r1, [pc, #152]	; (800d744 <Set_Bomb_Number+0x27c>)
 800d6aa:	f000 fb9d 	bl	800dde8 <siprintf>
          UTIL_LCD_DisplayStringAt(170 + (x * 55), 60 + (y * 55), (uint8_t *)st, LEFT_MODE);
 800d6ae:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	1a9b      	subs	r3, r3, r2
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	1a9b      	subs	r3, r3, r2
 800d6bc:	33aa      	adds	r3, #170	; 0xaa
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	1a9b      	subs	r3, r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	1a9b      	subs	r3, r3, r2
 800d6ce:	333c      	adds	r3, #60	; 0x3c
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	793b      	ldrb	r3, [r7, #4]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	f7f3 fa10 	bl	8000afc <UTIL_LCD_DisplayStringAt>
    for (int8_t x = 0; x < 3; x++)
 800d6dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	717b      	strb	r3, [r7, #5]
 800d6e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	f77f af6b 	ble.w	800d5c8 <Set_Bomb_Number+0x100>
  for (int8_t y = 0; y < 4; y++)
 800d6f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	71bb      	strb	r3, [r7, #6]
 800d6fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d702:	2b03      	cmp	r3, #3
 800d704:	f77f af5d 	ble.w	800d5c2 <Set_Bomb_Number+0xfa>
        }
      }
    }

  UTIL_LCD_FillRect(30, 125, 100, 50, UTIL_LCD_COLOR_BLACK);
 800d708:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	2332      	movs	r3, #50	; 0x32
 800d710:	2264      	movs	r2, #100	; 0x64
 800d712:	217d      	movs	r1, #125	; 0x7d
 800d714:	201e      	movs	r0, #30
 800d716:	f7f3 fbd3 	bl	8000ec0 <UTIL_LCD_FillRect>

  UTIL_LCD_SetFont(&Font16);
 800d71a:	480d      	ldr	r0, [pc, #52]	; (800d750 <Set_Bomb_Number+0x288>)
 800d71c:	f7f3 f8d2 	bl	80008c4 <UTIL_LCD_SetFont>
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	24000058 	.word	0x24000058
 800d72c:	24001624 	.word	0x24001624
 800d730:	2400161c 	.word	0x2400161c
 800d734:	24001620 	.word	0x24001620
 800d738:	ffb9c4ca 	.word	0xffb9c4ca
 800d73c:	ff4f5251 	.word	0xff4f5251
 800d740:	24000000 	.word	0x24000000
 800d744:	0800f1fc 	.word	0x0800f1fc
 800d748:	0800f200 	.word	0x0800f200
 800d74c:	0800f204 	.word	0x0800f204
 800d750:	24000008 	.word	0x24000008

0800d754 <Draw_flag>:
 * @brief  draw fkag on mark
 * @param  None
 * @retval None
 */
static void Draw_flag(int8_t x, int8_t y)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af02      	add	r7, sp, #8
 800d75a:	4603      	mov	r3, r0
 800d75c:	460a      	mov	r2, r1
 800d75e:	71fb      	strb	r3, [r7, #7]
 800d760:	4613      	mov	r3, r2
 800d762:	71bb      	strb	r3, [r7, #6]
  UTIL_LCD_DrawRect(20 + (x * 20), 47 + (y * 20), 2, 9, UTIL_LCD_COLOR_BLACK);
 800d764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4618      	mov	r0, r3
 800d774:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	332f      	adds	r3, #47	; 0x2f
 800d782:	4619      	mov	r1, r3
 800d784:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	2309      	movs	r3, #9
 800d78c:	2202      	movs	r2, #2
 800d78e:	f7f3 fa63 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(16 + (x * 20), 56 + (y * 20), 8, 2, UTIL_LCD_COLOR_BLACK);
 800d792:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d796:	4613      	mov	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	3310      	adds	r3, #16
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	3338      	adds	r3, #56	; 0x38
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	2208      	movs	r2, #8
 800d7bc:	f7f3 fa4c 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(14 + (x * 20), 58 + (y * 20), 12, 2, UTIL_LCD_COLOR_BLACK);
 800d7c0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	330e      	adds	r3, #14
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	333a      	adds	r3, #58	; 0x3a
 800d7de:	4619      	mov	r1, r3
 800d7e0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	220c      	movs	r2, #12
 800d7ea:	f7f3 fa35 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_FillRect(16 + (x * 20), 47 + (y * 20), 4, 5, UTIL_LCD_COLOR_RED);
 800d7ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	3310      	adds	r3, #16
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d802:	4613      	mov	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	332f      	adds	r3, #47	; 0x2f
 800d80c:	4619      	mov	r1, r3
 800d80e:	4b05      	ldr	r3, [pc, #20]	; (800d824 <Draw_flag+0xd0>)
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	2305      	movs	r3, #5
 800d814:	2204      	movs	r2, #4
 800d816:	f7f3 fb53 	bl	8000ec0 <UTIL_LCD_FillRect>
}
 800d81a:	bf00      	nop
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	ffff0000 	.word	0xffff0000

0800d828 <Remove_flag>:
 * @brief  removes flag on mark
 * @param  None
 * @retval None
 */
static void Remove_flag(int8_t x, int8_t y)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af02      	add	r7, sp, #8
 800d82e:	4603      	mov	r3, r0
 800d830:	460a      	mov	r2, r1
 800d832:	71fb      	strb	r3, [r7, #7]
 800d834:	4613      	mov	r3, r2
 800d836:	71bb      	strb	r3, [r7, #6]
  UTIL_LCD_FillRect(10 + (x * 20), 43 + (y * 20), 20, 20, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800d838:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d83c:	4613      	mov	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	330a      	adds	r3, #10
 800d846:	4618      	mov	r0, r3
 800d848:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	332b      	adds	r3, #43	; 0x2b
 800d856:	4619      	mov	r1, r3
 800d858:	4b31      	ldr	r3, [pc, #196]	; (800d920 <Remove_flag+0xf8>)
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	2314      	movs	r3, #20
 800d85e:	2214      	movs	r2, #20
 800d860:	f7f3 fb2e 	bl	8000ec0 <UTIL_LCD_FillRect>

  UTIL_LCD_DrawRect(28 + (x * 20), 43 + (y * 20), 2, 18, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d864:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d868:	4613      	mov	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4413      	add	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	331c      	adds	r3, #28
 800d872:	4618      	mov	r0, r3
 800d874:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d878:	4613      	mov	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	332b      	adds	r3, #43	; 0x2b
 800d882:	4619      	mov	r1, r3
 800d884:	4b27      	ldr	r3, [pc, #156]	; (800d924 <Remove_flag+0xfc>)
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	2312      	movs	r3, #18
 800d88a:	2202      	movs	r2, #2
 800d88c:	f7f3 f9e4 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 61 + (y * 20), 20, 2, UTIL_LCD_COLOR_ST_GRAY_DARK);
 800d890:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	330a      	adds	r3, #10
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	4413      	add	r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	333d      	adds	r3, #61	; 0x3d
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	4b1c      	ldr	r3, [pc, #112]	; (800d924 <Remove_flag+0xfc>)
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	2214      	movs	r2, #20
 800d8b8:	f7f3 f9ce 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 20, 2, UTIL_LCD_COLOR_WHITE);
 800d8bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	330a      	adds	r3, #10
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	332b      	adds	r3, #43	; 0x2b
 800d8da:	4619      	mov	r1, r3
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	2214      	movs	r2, #20
 800d8e6:	f7f3 f9b7 	bl	8000c58 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(10 + (x * 20), 43 + (y * 20), 2, 20, UTIL_LCD_COLOR_WHITE);
 800d8ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	330a      	adds	r3, #10
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d8fe:	4613      	mov	r3, r2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	4413      	add	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	332b      	adds	r3, #43	; 0x2b
 800d908:	4619      	mov	r1, r3
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2314      	movs	r3, #20
 800d912:	2202      	movs	r2, #2
 800d914:	f7f3 f9a0 	bl	8000c58 <UTIL_LCD_DrawRect>
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	ffb9c4ca 	.word	0xffb9c4ca
 800d924:	ff4f5251 	.word	0xff4f5251

0800d928 <Mine_Selection_Position>:
 * @brief  Detect the number imput
 * @param  None
 * @retval None
 */
static void Mine_Selection_Position()
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af02      	add	r7, sp, #8
  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
 800d92e:	498d      	ldr	r1, [pc, #564]	; (800db64 <Mine_Selection_Position+0x23c>)
 800d930:	2000      	movs	r0, #0
 800d932:	f7f6 f969 	bl	8003c08 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
 800d936:	4b8b      	ldr	r3, [pc, #556]	; (800db64 <Mine_Selection_Position+0x23c>)
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	4b8a      	ldr	r3, [pc, #552]	; (800db68 <Mine_Selection_Position+0x240>)
 800d93e:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
 800d940:	4b88      	ldr	r3, [pc, #544]	; (800db64 <Mine_Selection_Position+0x23c>)
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	b29a      	uxth	r2, r3
 800d946:	4b89      	ldr	r3, [pc, #548]	; (800db6c <Mine_Selection_Position+0x244>)
 800d948:	801a      	strh	r2, [r3, #0]

  if (Px == x && Py == y)
 800d94a:	4b89      	ldr	r3, [pc, #548]	; (800db70 <Mine_Selection_Position+0x248>)
 800d94c:	881a      	ldrh	r2, [r3, #0]
 800d94e:	4b86      	ldr	r3, [pc, #536]	; (800db68 <Mine_Selection_Position+0x240>)
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d106      	bne.n	800d964 <Mine_Selection_Position+0x3c>
 800d956:	4b87      	ldr	r3, [pc, #540]	; (800db74 <Mine_Selection_Position+0x24c>)
 800d958:	881a      	ldrh	r2, [r3, #0]
 800d95a:	4b84      	ldr	r3, [pc, #528]	; (800db6c <Mine_Selection_Position+0x244>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	f000 817a 	beq.w	800dc58 <Mine_Selection_Position+0x330>
  {
    return;
  }
  Px = x;
 800d964:	4b80      	ldr	r3, [pc, #512]	; (800db68 <Mine_Selection_Position+0x240>)
 800d966:	881a      	ldrh	r2, [r3, #0]
 800d968:	4b81      	ldr	r3, [pc, #516]	; (800db70 <Mine_Selection_Position+0x248>)
 800d96a:	801a      	strh	r2, [r3, #0]
  Py = y;
 800d96c:	4b7f      	ldr	r3, [pc, #508]	; (800db6c <Mine_Selection_Position+0x244>)
 800d96e:	881a      	ldrh	r2, [r3, #0]
 800d970:	4b80      	ldr	r3, [pc, #512]	; (800db74 <Mine_Selection_Position+0x24c>)
 800d972:	801a      	strh	r2, [r3, #0]

  // clicks happy face
  if ((x > 220) && (x < 255) && (y > 7) && (y < 33))
 800d974:	4b7c      	ldr	r3, [pc, #496]	; (800db68 <Mine_Selection_Position+0x240>)
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	2bdc      	cmp	r3, #220	; 0xdc
 800d97a:	d90d      	bls.n	800d998 <Mine_Selection_Position+0x70>
 800d97c:	4b7a      	ldr	r3, [pc, #488]	; (800db68 <Mine_Selection_Position+0x240>)
 800d97e:	881b      	ldrh	r3, [r3, #0]
 800d980:	2bfe      	cmp	r3, #254	; 0xfe
 800d982:	d809      	bhi.n	800d998 <Mine_Selection_Position+0x70>
 800d984:	4b79      	ldr	r3, [pc, #484]	; (800db6c <Mine_Selection_Position+0x244>)
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	2b07      	cmp	r3, #7
 800d98a:	d905      	bls.n	800d998 <Mine_Selection_Position+0x70>
 800d98c:	4b77      	ldr	r3, [pc, #476]	; (800db6c <Mine_Selection_Position+0x244>)
 800d98e:	881b      	ldrh	r3, [r3, #0]
 800d990:	2b20      	cmp	r3, #32
 800d992:	d801      	bhi.n	800d998 <Mine_Selection_Position+0x70>
  {
    //
    Bomb_Hit();
 800d994:	f7fe ff8c 	bl	800c8b0 <Bomb_Hit>
  }

  // number set
  if ((x > 12) && (x < 62) && (y > 9) && (y < 34))
 800d998:	4b73      	ldr	r3, [pc, #460]	; (800db68 <Mine_Selection_Position+0x240>)
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	2b0c      	cmp	r3, #12
 800d99e:	d90d      	bls.n	800d9bc <Mine_Selection_Position+0x94>
 800d9a0:	4b71      	ldr	r3, [pc, #452]	; (800db68 <Mine_Selection_Position+0x240>)
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	2b3d      	cmp	r3, #61	; 0x3d
 800d9a6:	d809      	bhi.n	800d9bc <Mine_Selection_Position+0x94>
 800d9a8:	4b70      	ldr	r3, [pc, #448]	; (800db6c <Mine_Selection_Position+0x244>)
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	2b09      	cmp	r3, #9
 800d9ae:	d905      	bls.n	800d9bc <Mine_Selection_Position+0x94>
 800d9b0:	4b6e      	ldr	r3, [pc, #440]	; (800db6c <Mine_Selection_Position+0x244>)
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	2b21      	cmp	r3, #33	; 0x21
 800d9b6:	d801      	bhi.n	800d9bc <Mine_Selection_Position+0x94>
  {
    Bomb_Hit();
 800d9b8:	f7fe ff7a 	bl	800c8b0 <Bomb_Hit>
  }

  if (x > 150 && x < 205)
 800d9bc:	4b6a      	ldr	r3, [pc, #424]	; (800db68 <Mine_Selection_Position+0x240>)
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	2b96      	cmp	r3, #150	; 0x96
 800d9c2:	d95d      	bls.n	800da80 <Mine_Selection_Position+0x158>
 800d9c4:	4b68      	ldr	r3, [pc, #416]	; (800db68 <Mine_Selection_Position+0x240>)
 800d9c6:	881b      	ldrh	r3, [r3, #0]
 800d9c8:	2bcc      	cmp	r3, #204	; 0xcc
 800d9ca:	d859      	bhi.n	800da80 <Mine_Selection_Position+0x158>
  {
    if (y > 43 && y < 98)
 800d9cc:	4b67      	ldr	r3, [pc, #412]	; (800db6c <Mine_Selection_Position+0x244>)
 800d9ce:	881b      	ldrh	r3, [r3, #0]
 800d9d0:	2b2b      	cmp	r3, #43	; 0x2b
 800d9d2:	d912      	bls.n	800d9fa <Mine_Selection_Position+0xd2>
 800d9d4:	4b65      	ldr	r3, [pc, #404]	; (800db6c <Mine_Selection_Position+0x244>)
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	2b61      	cmp	r3, #97	; 0x61
 800d9da:	d80e      	bhi.n	800d9fa <Mine_Selection_Position+0xd2>
    {
      Tmp_Mine_Num *= 10;
 800d9dc:	4b66      	ldr	r3, [pc, #408]	; (800db78 <Mine_Selection_Position+0x250>)
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	0092      	lsls	r2, r2, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	005b      	lsls	r3, r3, #1
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	4b63      	ldr	r3, [pc, #396]	; (800db78 <Mine_Selection_Position+0x250>)
 800d9ec:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 1;
 800d9ee:	4b62      	ldr	r3, [pc, #392]	; (800db78 <Mine_Selection_Position+0x250>)
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	4b60      	ldr	r3, [pc, #384]	; (800db78 <Mine_Selection_Position+0x250>)
 800d9f8:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
 800d9fa:	4b5c      	ldr	r3, [pc, #368]	; (800db6c <Mine_Selection_Position+0x244>)
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	2b62      	cmp	r3, #98	; 0x62
 800da00:	d912      	bls.n	800da28 <Mine_Selection_Position+0x100>
 800da02:	4b5a      	ldr	r3, [pc, #360]	; (800db6c <Mine_Selection_Position+0x244>)
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	2b98      	cmp	r3, #152	; 0x98
 800da08:	d80e      	bhi.n	800da28 <Mine_Selection_Position+0x100>
    {
      Tmp_Mine_Num *= 10;
 800da0a:	4b5b      	ldr	r3, [pc, #364]	; (800db78 <Mine_Selection_Position+0x250>)
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	461a      	mov	r2, r3
 800da10:	0092      	lsls	r2, r2, #2
 800da12:	4413      	add	r3, r2
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	b29a      	uxth	r2, r3
 800da18:	4b57      	ldr	r3, [pc, #348]	; (800db78 <Mine_Selection_Position+0x250>)
 800da1a:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 4;
 800da1c:	4b56      	ldr	r3, [pc, #344]	; (800db78 <Mine_Selection_Position+0x250>)
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	3304      	adds	r3, #4
 800da22:	b29a      	uxth	r2, r3
 800da24:	4b54      	ldr	r3, [pc, #336]	; (800db78 <Mine_Selection_Position+0x250>)
 800da26:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
 800da28:	4b50      	ldr	r3, [pc, #320]	; (800db6c <Mine_Selection_Position+0x244>)
 800da2a:	881b      	ldrh	r3, [r3, #0]
 800da2c:	2b99      	cmp	r3, #153	; 0x99
 800da2e:	d912      	bls.n	800da56 <Mine_Selection_Position+0x12e>
 800da30:	4b4e      	ldr	r3, [pc, #312]	; (800db6c <Mine_Selection_Position+0x244>)
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	2bcf      	cmp	r3, #207	; 0xcf
 800da36:	d80e      	bhi.n	800da56 <Mine_Selection_Position+0x12e>
    {
      Tmp_Mine_Num *= 10;
 800da38:	4b4f      	ldr	r3, [pc, #316]	; (800db78 <Mine_Selection_Position+0x250>)
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	461a      	mov	r2, r3
 800da3e:	0092      	lsls	r2, r2, #2
 800da40:	4413      	add	r3, r2
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	b29a      	uxth	r2, r3
 800da46:	4b4c      	ldr	r3, [pc, #304]	; (800db78 <Mine_Selection_Position+0x250>)
 800da48:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 7;
 800da4a:	4b4b      	ldr	r3, [pc, #300]	; (800db78 <Mine_Selection_Position+0x250>)
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	3307      	adds	r3, #7
 800da50:	b29a      	uxth	r2, r3
 800da52:	4b49      	ldr	r3, [pc, #292]	; (800db78 <Mine_Selection_Position+0x250>)
 800da54:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
 800da56:	4b45      	ldr	r3, [pc, #276]	; (800db6c <Mine_Selection_Position+0x244>)
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	2bd0      	cmp	r3, #208	; 0xd0
 800da5c:	d910      	bls.n	800da80 <Mine_Selection_Position+0x158>
 800da5e:	4b43      	ldr	r3, [pc, #268]	; (800db6c <Mine_Selection_Position+0x244>)
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800da66:	d80b      	bhi.n	800da80 <Mine_Selection_Position+0x158>
    {
      Tmp_Mine_Num = 0;
 800da68:	4b43      	ldr	r3, [pc, #268]	; (800db78 <Mine_Selection_Position+0x250>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	801a      	strh	r2, [r3, #0]
      UTIL_LCD_FillRect(30, 125, 100, 50, UTIL_LCD_COLOR_BLACK);
 800da6e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	2332      	movs	r3, #50	; 0x32
 800da76:	2264      	movs	r2, #100	; 0x64
 800da78:	217d      	movs	r1, #125	; 0x7d
 800da7a:	201e      	movs	r0, #30
 800da7c:	f7f3 fa20 	bl	8000ec0 <UTIL_LCD_FillRect>
    }
  }
  if (x > 205 && x < 260)
 800da80:	4b39      	ldr	r3, [pc, #228]	; (800db68 <Mine_Selection_Position+0x240>)
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	2bcd      	cmp	r3, #205	; 0xcd
 800da86:	d95b      	bls.n	800db40 <Mine_Selection_Position+0x218>
 800da88:	4b37      	ldr	r3, [pc, #220]	; (800db68 <Mine_Selection_Position+0x240>)
 800da8a:	881b      	ldrh	r3, [r3, #0]
 800da8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da90:	d256      	bcs.n	800db40 <Mine_Selection_Position+0x218>
  {
    if (y > 43 && y < 98)
 800da92:	4b36      	ldr	r3, [pc, #216]	; (800db6c <Mine_Selection_Position+0x244>)
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	2b2b      	cmp	r3, #43	; 0x2b
 800da98:	d912      	bls.n	800dac0 <Mine_Selection_Position+0x198>
 800da9a:	4b34      	ldr	r3, [pc, #208]	; (800db6c <Mine_Selection_Position+0x244>)
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	2b61      	cmp	r3, #97	; 0x61
 800daa0:	d80e      	bhi.n	800dac0 <Mine_Selection_Position+0x198>
    {
      Tmp_Mine_Num *= 10;
 800daa2:	4b35      	ldr	r3, [pc, #212]	; (800db78 <Mine_Selection_Position+0x250>)
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	0092      	lsls	r2, r2, #2
 800daaa:	4413      	add	r3, r2
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	b29a      	uxth	r2, r3
 800dab0:	4b31      	ldr	r3, [pc, #196]	; (800db78 <Mine_Selection_Position+0x250>)
 800dab2:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 2;
 800dab4:	4b30      	ldr	r3, [pc, #192]	; (800db78 <Mine_Selection_Position+0x250>)
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	3302      	adds	r3, #2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4b2e      	ldr	r3, [pc, #184]	; (800db78 <Mine_Selection_Position+0x250>)
 800dabe:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
 800dac0:	4b2a      	ldr	r3, [pc, #168]	; (800db6c <Mine_Selection_Position+0x244>)
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	2b62      	cmp	r3, #98	; 0x62
 800dac6:	d912      	bls.n	800daee <Mine_Selection_Position+0x1c6>
 800dac8:	4b28      	ldr	r3, [pc, #160]	; (800db6c <Mine_Selection_Position+0x244>)
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	2b98      	cmp	r3, #152	; 0x98
 800dace:	d80e      	bhi.n	800daee <Mine_Selection_Position+0x1c6>
    {
      Tmp_Mine_Num *= 10;
 800dad0:	4b29      	ldr	r3, [pc, #164]	; (800db78 <Mine_Selection_Position+0x250>)
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	461a      	mov	r2, r3
 800dad6:	0092      	lsls	r2, r2, #2
 800dad8:	4413      	add	r3, r2
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	b29a      	uxth	r2, r3
 800dade:	4b26      	ldr	r3, [pc, #152]	; (800db78 <Mine_Selection_Position+0x250>)
 800dae0:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 5;
 800dae2:	4b25      	ldr	r3, [pc, #148]	; (800db78 <Mine_Selection_Position+0x250>)
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	3305      	adds	r3, #5
 800dae8:	b29a      	uxth	r2, r3
 800daea:	4b23      	ldr	r3, [pc, #140]	; (800db78 <Mine_Selection_Position+0x250>)
 800daec:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
 800daee:	4b1f      	ldr	r3, [pc, #124]	; (800db6c <Mine_Selection_Position+0x244>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	2b99      	cmp	r3, #153	; 0x99
 800daf4:	d912      	bls.n	800db1c <Mine_Selection_Position+0x1f4>
 800daf6:	4b1d      	ldr	r3, [pc, #116]	; (800db6c <Mine_Selection_Position+0x244>)
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	2bcf      	cmp	r3, #207	; 0xcf
 800dafc:	d80e      	bhi.n	800db1c <Mine_Selection_Position+0x1f4>
    {
      Tmp_Mine_Num *= 10;
 800dafe:	4b1e      	ldr	r3, [pc, #120]	; (800db78 <Mine_Selection_Position+0x250>)
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	461a      	mov	r2, r3
 800db04:	0092      	lsls	r2, r2, #2
 800db06:	4413      	add	r3, r2
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	4b1a      	ldr	r3, [pc, #104]	; (800db78 <Mine_Selection_Position+0x250>)
 800db0e:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 8;
 800db10:	4b19      	ldr	r3, [pc, #100]	; (800db78 <Mine_Selection_Position+0x250>)
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	3308      	adds	r3, #8
 800db16:	b29a      	uxth	r2, r3
 800db18:	4b17      	ldr	r3, [pc, #92]	; (800db78 <Mine_Selection_Position+0x250>)
 800db1a:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
 800db1c:	4b13      	ldr	r3, [pc, #76]	; (800db6c <Mine_Selection_Position+0x244>)
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	2bd0      	cmp	r3, #208	; 0xd0
 800db22:	d90d      	bls.n	800db40 <Mine_Selection_Position+0x218>
 800db24:	4b11      	ldr	r3, [pc, #68]	; (800db6c <Mine_Selection_Position+0x244>)
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800db2c:	d808      	bhi.n	800db40 <Mine_Selection_Position+0x218>
    {
      Tmp_Mine_Num *= 10;
 800db2e:	4b12      	ldr	r3, [pc, #72]	; (800db78 <Mine_Selection_Position+0x250>)
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	0092      	lsls	r2, r2, #2
 800db36:	4413      	add	r3, r2
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <Mine_Selection_Position+0x250>)
 800db3e:	801a      	strh	r2, [r3, #0]
    }
  }
  if (x > 260 && x < 315)
 800db40:	4b09      	ldr	r3, [pc, #36]	; (800db68 <Mine_Selection_Position+0x240>)
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db48:	d96c      	bls.n	800dc24 <Mine_Selection_Position+0x2fc>
 800db4a:	4b07      	ldr	r3, [pc, #28]	; (800db68 <Mine_Selection_Position+0x240>)
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800db52:	d867      	bhi.n	800dc24 <Mine_Selection_Position+0x2fc>
  {
    if (y > 43 && y < 98)
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <Mine_Selection_Position+0x244>)
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	2b2b      	cmp	r3, #43	; 0x2b
 800db5a:	d91f      	bls.n	800db9c <Mine_Selection_Position+0x274>
 800db5c:	4b03      	ldr	r3, [pc, #12]	; (800db6c <Mine_Selection_Position+0x244>)
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	2b61      	cmp	r3, #97	; 0x61
 800db62:	e00b      	b.n	800db7c <Mine_Selection_Position+0x254>
 800db64:	2400162c 	.word	0x2400162c
 800db68:	24001612 	.word	0x24001612
 800db6c:	24001614 	.word	0x24001614
 800db70:	24001616 	.word	0x24001616
 800db74:	24001618 	.word	0x24001618
 800db78:	24001624 	.word	0x24001624
 800db7c:	d80e      	bhi.n	800db9c <Mine_Selection_Position+0x274>
    {
      Tmp_Mine_Num *= 10;
 800db7e:	4b38      	ldr	r3, [pc, #224]	; (800dc60 <Mine_Selection_Position+0x338>)
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	0092      	lsls	r2, r2, #2
 800db86:	4413      	add	r3, r2
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	4b34      	ldr	r3, [pc, #208]	; (800dc60 <Mine_Selection_Position+0x338>)
 800db8e:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 3;
 800db90:	4b33      	ldr	r3, [pc, #204]	; (800dc60 <Mine_Selection_Position+0x338>)
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	3303      	adds	r3, #3
 800db96:	b29a      	uxth	r2, r3
 800db98:	4b31      	ldr	r3, [pc, #196]	; (800dc60 <Mine_Selection_Position+0x338>)
 800db9a:	801a      	strh	r2, [r3, #0]
    }
    if (y > 98 && y < 153)
 800db9c:	4b31      	ldr	r3, [pc, #196]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	2b62      	cmp	r3, #98	; 0x62
 800dba2:	d912      	bls.n	800dbca <Mine_Selection_Position+0x2a2>
 800dba4:	4b2f      	ldr	r3, [pc, #188]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	2b98      	cmp	r3, #152	; 0x98
 800dbaa:	d80e      	bhi.n	800dbca <Mine_Selection_Position+0x2a2>
    {
      Tmp_Mine_Num *= 10;
 800dbac:	4b2c      	ldr	r3, [pc, #176]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbae:	881b      	ldrh	r3, [r3, #0]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	0092      	lsls	r2, r2, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	4b29      	ldr	r3, [pc, #164]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbbc:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 6;
 800dbbe:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	3306      	adds	r3, #6
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	4b26      	ldr	r3, [pc, #152]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbc8:	801a      	strh	r2, [r3, #0]
    }
    if (y > 153 && y < 208)
 800dbca:	4b26      	ldr	r3, [pc, #152]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	2b99      	cmp	r3, #153	; 0x99
 800dbd0:	d912      	bls.n	800dbf8 <Mine_Selection_Position+0x2d0>
 800dbd2:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800dbd4:	881b      	ldrh	r3, [r3, #0]
 800dbd6:	2bcf      	cmp	r3, #207	; 0xcf
 800dbd8:	d80e      	bhi.n	800dbf8 <Mine_Selection_Position+0x2d0>
    {
      Tmp_Mine_Num *= 10;
 800dbda:	4b21      	ldr	r3, [pc, #132]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	0092      	lsls	r2, r2, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	4b1d      	ldr	r3, [pc, #116]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbea:	801a      	strh	r2, [r3, #0]
      Tmp_Mine_Num += 9;
 800dbec:	4b1c      	ldr	r3, [pc, #112]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	3309      	adds	r3, #9
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dbf6:	801a      	strh	r2, [r3, #0]
    }
    if (y > 208 && y < 263)
 800dbf8:	4b1a      	ldr	r3, [pc, #104]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	2bd0      	cmp	r3, #208	; 0xd0
 800dbfe:	d911      	bls.n	800dc24 <Mine_Selection_Position+0x2fc>
 800dc00:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <Mine_Selection_Position+0x33c>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800dc08:	d80c      	bhi.n	800dc24 <Mine_Selection_Position+0x2fc>
    {
      if (Tmp_Mine_Num > 252)
 800dc0a:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	2bfc      	cmp	r3, #252	; 0xfc
 800dc10:	d902      	bls.n	800dc18 <Mine_Selection_Position+0x2f0>
        Tmp_Mine_Num = 252;
 800dc12:	4b13      	ldr	r3, [pc, #76]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dc14:	22fc      	movs	r2, #252	; 0xfc
 800dc16:	801a      	strh	r2, [r3, #0]
      Mine_Num = Tmp_Mine_Num;
 800dc18:	4b11      	ldr	r3, [pc, #68]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dc1a:	881a      	ldrh	r2, [r3, #0]
 800dc1c:	4b12      	ldr	r3, [pc, #72]	; (800dc68 <Mine_Selection_Position+0x340>)
 800dc1e:	801a      	strh	r2, [r3, #0]
      Reset_Game();
 800dc20:	f000 f82a 	bl	800dc78 <Reset_Game>
    }
  }
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800dc24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dc28:	f7f2 fe38 	bl	800089c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800dc2c:	480f      	ldr	r0, [pc, #60]	; (800dc6c <Mine_Selection_Position+0x344>)
 800dc2e:	f7f2 fe21 	bl	8000874 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800dc32:	480f      	ldr	r0, [pc, #60]	; (800dc70 <Mine_Selection_Position+0x348>)
 800dc34:	f7f2 fe46 	bl	80008c4 <UTIL_LCD_SetFont>
  char st;
  sprintf(st, "%1d", Tmp_Mine_Num);
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <Mine_Selection_Position+0x338>)
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	461a      	mov	r2, r3
 800dc42:	490c      	ldr	r1, [pc, #48]	; (800dc74 <Mine_Selection_Position+0x34c>)
 800dc44:	f000 f8d0 	bl	800dde8 <siprintf>
  UTIL_LCD_DisplayStringAt(40, 130, (uint8_t *)st, LEFT_MODE);
 800dc48:	79fb      	ldrb	r3, [r7, #7]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	2182      	movs	r1, #130	; 0x82
 800dc50:	2028      	movs	r0, #40	; 0x28
 800dc52:	f7f2 ff53 	bl	8000afc <UTIL_LCD_DisplayStringAt>
 800dc56:	e000      	b.n	800dc5a <Mine_Selection_Position+0x332>
    return;
 800dc58:	bf00      	nop
}
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	24001624 	.word	0x24001624
 800dc64:	24001614 	.word	0x24001614
 800dc68:	24000056 	.word	0x24000056
 800dc6c:	ffff0000 	.word	0xffff0000
 800dc70:	24000000 	.word	0x24000000
 800dc74:	0800f1fc 	.word	0x0800f1fc

0800dc78 <Reset_Game>:
 * @brief  Resets game
 * @param  None
 * @retval None
 */
static void Reset_Game()
{
 800dc78:	b480      	push	{r7}
 800dc7a:	af00      	add	r7, sp, #0
  Game_State = -1;
 800dc7c:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <Reset_Game+0x14>)
 800dc7e:	22ff      	movs	r2, #255	; 0xff
 800dc80:	701a      	strb	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	24000058 	.word	0x24000058

0800dc90 <__errno>:
 800dc90:	4b01      	ldr	r3, [pc, #4]	; (800dc98 <__errno+0x8>)
 800dc92:	6818      	ldr	r0, [r3, #0]
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	2400005c 	.word	0x2400005c

0800dc9c <__libc_init_array>:
 800dc9c:	b570      	push	{r4, r5, r6, lr}
 800dc9e:	4d0d      	ldr	r5, [pc, #52]	; (800dcd4 <__libc_init_array+0x38>)
 800dca0:	4c0d      	ldr	r4, [pc, #52]	; (800dcd8 <__libc_init_array+0x3c>)
 800dca2:	1b64      	subs	r4, r4, r5
 800dca4:	10a4      	asrs	r4, r4, #2
 800dca6:	2600      	movs	r6, #0
 800dca8:	42a6      	cmp	r6, r4
 800dcaa:	d109      	bne.n	800dcc0 <__libc_init_array+0x24>
 800dcac:	4d0b      	ldr	r5, [pc, #44]	; (800dcdc <__libc_init_array+0x40>)
 800dcae:	4c0c      	ldr	r4, [pc, #48]	; (800dce0 <__libc_init_array+0x44>)
 800dcb0:	f001 fa96 	bl	800f1e0 <_init>
 800dcb4:	1b64      	subs	r4, r4, r5
 800dcb6:	10a4      	asrs	r4, r4, #2
 800dcb8:	2600      	movs	r6, #0
 800dcba:	42a6      	cmp	r6, r4
 800dcbc:	d105      	bne.n	800dcca <__libc_init_array+0x2e>
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc4:	4798      	blx	r3
 800dcc6:	3601      	adds	r6, #1
 800dcc8:	e7ee      	b.n	800dca8 <__libc_init_array+0xc>
 800dcca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcce:	4798      	blx	r3
 800dcd0:	3601      	adds	r6, #1
 800dcd2:	e7f2      	b.n	800dcba <__libc_init_array+0x1e>
 800dcd4:	08011ab0 	.word	0x08011ab0
 800dcd8:	08011ab0 	.word	0x08011ab0
 800dcdc:	08011ab0 	.word	0x08011ab0
 800dce0:	08011ab4 	.word	0x08011ab4

0800dce4 <memcpy>:
 800dce4:	440a      	add	r2, r1
 800dce6:	4291      	cmp	r1, r2
 800dce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dcec:	d100      	bne.n	800dcf0 <memcpy+0xc>
 800dcee:	4770      	bx	lr
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcfa:	4291      	cmp	r1, r2
 800dcfc:	d1f9      	bne.n	800dcf2 <memcpy+0xe>
 800dcfe:	bd10      	pop	{r4, pc}

0800dd00 <memset>:
 800dd00:	4402      	add	r2, r0
 800dd02:	4603      	mov	r3, r0
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d100      	bne.n	800dd0a <memset+0xa>
 800dd08:	4770      	bx	lr
 800dd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd0e:	e7f9      	b.n	800dd04 <memset+0x4>

0800dd10 <srand>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4b10      	ldr	r3, [pc, #64]	; (800dd54 <srand+0x44>)
 800dd14:	681d      	ldr	r5, [r3, #0]
 800dd16:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800dd18:	4604      	mov	r4, r0
 800dd1a:	b9b3      	cbnz	r3, 800dd4a <srand+0x3a>
 800dd1c:	2018      	movs	r0, #24
 800dd1e:	f000 faff 	bl	800e320 <malloc>
 800dd22:	4602      	mov	r2, r0
 800dd24:	63a8      	str	r0, [r5, #56]	; 0x38
 800dd26:	b920      	cbnz	r0, 800dd32 <srand+0x22>
 800dd28:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <srand+0x48>)
 800dd2a:	480c      	ldr	r0, [pc, #48]	; (800dd5c <srand+0x4c>)
 800dd2c:	2142      	movs	r1, #66	; 0x42
 800dd2e:	f000 f895 	bl	800de5c <__assert_func>
 800dd32:	490b      	ldr	r1, [pc, #44]	; (800dd60 <srand+0x50>)
 800dd34:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <srand+0x54>)
 800dd36:	e9c0 1300 	strd	r1, r3, [r0]
 800dd3a:	4b0b      	ldr	r3, [pc, #44]	; (800dd68 <srand+0x58>)
 800dd3c:	6083      	str	r3, [r0, #8]
 800dd3e:	230b      	movs	r3, #11
 800dd40:	8183      	strh	r3, [r0, #12]
 800dd42:	2100      	movs	r1, #0
 800dd44:	2001      	movs	r0, #1
 800dd46:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dd4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	611c      	str	r4, [r3, #16]
 800dd50:	615a      	str	r2, [r3, #20]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	2400005c 	.word	0x2400005c
 800dd58:	0801196c 	.word	0x0801196c
 800dd5c:	08011983 	.word	0x08011983
 800dd60:	abcd330e 	.word	0xabcd330e
 800dd64:	e66d1234 	.word	0xe66d1234
 800dd68:	0005deec 	.word	0x0005deec

0800dd6c <rand>:
 800dd6c:	4b16      	ldr	r3, [pc, #88]	; (800ddc8 <rand+0x5c>)
 800dd6e:	b510      	push	{r4, lr}
 800dd70:	681c      	ldr	r4, [r3, #0]
 800dd72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd74:	b9b3      	cbnz	r3, 800dda4 <rand+0x38>
 800dd76:	2018      	movs	r0, #24
 800dd78:	f000 fad2 	bl	800e320 <malloc>
 800dd7c:	63a0      	str	r0, [r4, #56]	; 0x38
 800dd7e:	b928      	cbnz	r0, 800dd8c <rand+0x20>
 800dd80:	4602      	mov	r2, r0
 800dd82:	4b12      	ldr	r3, [pc, #72]	; (800ddcc <rand+0x60>)
 800dd84:	4812      	ldr	r0, [pc, #72]	; (800ddd0 <rand+0x64>)
 800dd86:	214e      	movs	r1, #78	; 0x4e
 800dd88:	f000 f868 	bl	800de5c <__assert_func>
 800dd8c:	4a11      	ldr	r2, [pc, #68]	; (800ddd4 <rand+0x68>)
 800dd8e:	4b12      	ldr	r3, [pc, #72]	; (800ddd8 <rand+0x6c>)
 800dd90:	e9c0 2300 	strd	r2, r3, [r0]
 800dd94:	4b11      	ldr	r3, [pc, #68]	; (800dddc <rand+0x70>)
 800dd96:	6083      	str	r3, [r0, #8]
 800dd98:	230b      	movs	r3, #11
 800dd9a:	8183      	strh	r3, [r0, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dda4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800dda6:	4a0e      	ldr	r2, [pc, #56]	; (800dde0 <rand+0x74>)
 800dda8:	6920      	ldr	r0, [r4, #16]
 800ddaa:	6963      	ldr	r3, [r4, #20]
 800ddac:	490d      	ldr	r1, [pc, #52]	; (800dde4 <rand+0x78>)
 800ddae:	4342      	muls	r2, r0
 800ddb0:	fb01 2203 	mla	r2, r1, r3, r2
 800ddb4:	fba0 0101 	umull	r0, r1, r0, r1
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	eb42 0001 	adc.w	r0, r2, r1
 800ddbe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ddc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ddc6:	bd10      	pop	{r4, pc}
 800ddc8:	2400005c 	.word	0x2400005c
 800ddcc:	0801196c 	.word	0x0801196c
 800ddd0:	08011983 	.word	0x08011983
 800ddd4:	abcd330e 	.word	0xabcd330e
 800ddd8:	e66d1234 	.word	0xe66d1234
 800dddc:	0005deec 	.word	0x0005deec
 800dde0:	5851f42d 	.word	0x5851f42d
 800dde4:	4c957f2d 	.word	0x4c957f2d

0800dde8 <siprintf>:
 800dde8:	b40e      	push	{r1, r2, r3}
 800ddea:	b500      	push	{lr}
 800ddec:	b09c      	sub	sp, #112	; 0x70
 800ddee:	ab1d      	add	r3, sp, #116	; 0x74
 800ddf0:	9002      	str	r0, [sp, #8]
 800ddf2:	9006      	str	r0, [sp, #24]
 800ddf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ddf8:	4809      	ldr	r0, [pc, #36]	; (800de20 <siprintf+0x38>)
 800ddfa:	9107      	str	r1, [sp, #28]
 800ddfc:	9104      	str	r1, [sp, #16]
 800ddfe:	4909      	ldr	r1, [pc, #36]	; (800de24 <siprintf+0x3c>)
 800de00:	f853 2b04 	ldr.w	r2, [r3], #4
 800de04:	9105      	str	r1, [sp, #20]
 800de06:	6800      	ldr	r0, [r0, #0]
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	a902      	add	r1, sp, #8
 800de0c:	f000 fbcc 	bl	800e5a8 <_svfiprintf_r>
 800de10:	9b02      	ldr	r3, [sp, #8]
 800de12:	2200      	movs	r2, #0
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	b01c      	add	sp, #112	; 0x70
 800de18:	f85d eb04 	ldr.w	lr, [sp], #4
 800de1c:	b003      	add	sp, #12
 800de1e:	4770      	bx	lr
 800de20:	2400005c 	.word	0x2400005c
 800de24:	ffff0208 	.word	0xffff0208

0800de28 <time>:
 800de28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de2a:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <time+0x30>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	4669      	mov	r1, sp
 800de30:	4604      	mov	r4, r0
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	f000 f9fa 	bl	800e22c <_gettimeofday_r>
 800de38:	2800      	cmp	r0, #0
 800de3a:	bfbe      	ittt	lt
 800de3c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800de40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de44:	e9cd 2300 	strdlt	r2, r3, [sp]
 800de48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de4c:	b10c      	cbz	r4, 800de52 <time+0x2a>
 800de4e:	e9c4 0100 	strd	r0, r1, [r4]
 800de52:	b004      	add	sp, #16
 800de54:	bd10      	pop	{r4, pc}
 800de56:	bf00      	nop
 800de58:	2400005c 	.word	0x2400005c

0800de5c <__assert_func>:
 800de5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de5e:	4614      	mov	r4, r2
 800de60:	461a      	mov	r2, r3
 800de62:	4b09      	ldr	r3, [pc, #36]	; (800de88 <__assert_func+0x2c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4605      	mov	r5, r0
 800de68:	68d8      	ldr	r0, [r3, #12]
 800de6a:	b14c      	cbz	r4, 800de80 <__assert_func+0x24>
 800de6c:	4b07      	ldr	r3, [pc, #28]	; (800de8c <__assert_func+0x30>)
 800de6e:	9100      	str	r1, [sp, #0]
 800de70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de74:	4906      	ldr	r1, [pc, #24]	; (800de90 <__assert_func+0x34>)
 800de76:	462b      	mov	r3, r5
 800de78:	f000 f9a6 	bl	800e1c8 <fiprintf>
 800de7c:	f001 f8a8 	bl	800efd0 <abort>
 800de80:	4b04      	ldr	r3, [pc, #16]	; (800de94 <__assert_func+0x38>)
 800de82:	461c      	mov	r4, r3
 800de84:	e7f3      	b.n	800de6e <__assert_func+0x12>
 800de86:	bf00      	nop
 800de88:	2400005c 	.word	0x2400005c
 800de8c:	080119de 	.word	0x080119de
 800de90:	080119eb 	.word	0x080119eb
 800de94:	08011a19 	.word	0x08011a19

0800de98 <__sflush_r>:
 800de98:	898a      	ldrh	r2, [r1, #12]
 800de9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9e:	4605      	mov	r5, r0
 800dea0:	0710      	lsls	r0, r2, #28
 800dea2:	460c      	mov	r4, r1
 800dea4:	d458      	bmi.n	800df58 <__sflush_r+0xc0>
 800dea6:	684b      	ldr	r3, [r1, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dc05      	bgt.n	800deb8 <__sflush_r+0x20>
 800deac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800deae:	2b00      	cmp	r3, #0
 800deb0:	dc02      	bgt.n	800deb8 <__sflush_r+0x20>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deba:	2e00      	cmp	r6, #0
 800debc:	d0f9      	beq.n	800deb2 <__sflush_r+0x1a>
 800debe:	2300      	movs	r3, #0
 800dec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dec4:	682f      	ldr	r7, [r5, #0]
 800dec6:	602b      	str	r3, [r5, #0]
 800dec8:	d032      	beq.n	800df30 <__sflush_r+0x98>
 800deca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	075a      	lsls	r2, r3, #29
 800ded0:	d505      	bpl.n	800dede <__sflush_r+0x46>
 800ded2:	6863      	ldr	r3, [r4, #4]
 800ded4:	1ac0      	subs	r0, r0, r3
 800ded6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ded8:	b10b      	cbz	r3, 800dede <__sflush_r+0x46>
 800deda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dedc:	1ac0      	subs	r0, r0, r3
 800dede:	2300      	movs	r3, #0
 800dee0:	4602      	mov	r2, r0
 800dee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dee4:	6a21      	ldr	r1, [r4, #32]
 800dee6:	4628      	mov	r0, r5
 800dee8:	47b0      	blx	r6
 800deea:	1c43      	adds	r3, r0, #1
 800deec:	89a3      	ldrh	r3, [r4, #12]
 800deee:	d106      	bne.n	800defe <__sflush_r+0x66>
 800def0:	6829      	ldr	r1, [r5, #0]
 800def2:	291d      	cmp	r1, #29
 800def4:	d82c      	bhi.n	800df50 <__sflush_r+0xb8>
 800def6:	4a2a      	ldr	r2, [pc, #168]	; (800dfa0 <__sflush_r+0x108>)
 800def8:	40ca      	lsrs	r2, r1
 800defa:	07d6      	lsls	r6, r2, #31
 800defc:	d528      	bpl.n	800df50 <__sflush_r+0xb8>
 800defe:	2200      	movs	r2, #0
 800df00:	6062      	str	r2, [r4, #4]
 800df02:	04d9      	lsls	r1, r3, #19
 800df04:	6922      	ldr	r2, [r4, #16]
 800df06:	6022      	str	r2, [r4, #0]
 800df08:	d504      	bpl.n	800df14 <__sflush_r+0x7c>
 800df0a:	1c42      	adds	r2, r0, #1
 800df0c:	d101      	bne.n	800df12 <__sflush_r+0x7a>
 800df0e:	682b      	ldr	r3, [r5, #0]
 800df10:	b903      	cbnz	r3, 800df14 <__sflush_r+0x7c>
 800df12:	6560      	str	r0, [r4, #84]	; 0x54
 800df14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df16:	602f      	str	r7, [r5, #0]
 800df18:	2900      	cmp	r1, #0
 800df1a:	d0ca      	beq.n	800deb2 <__sflush_r+0x1a>
 800df1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df20:	4299      	cmp	r1, r3
 800df22:	d002      	beq.n	800df2a <__sflush_r+0x92>
 800df24:	4628      	mov	r0, r5
 800df26:	f000 fa03 	bl	800e330 <_free_r>
 800df2a:	2000      	movs	r0, #0
 800df2c:	6360      	str	r0, [r4, #52]	; 0x34
 800df2e:	e7c1      	b.n	800deb4 <__sflush_r+0x1c>
 800df30:	6a21      	ldr	r1, [r4, #32]
 800df32:	2301      	movs	r3, #1
 800df34:	4628      	mov	r0, r5
 800df36:	47b0      	blx	r6
 800df38:	1c41      	adds	r1, r0, #1
 800df3a:	d1c7      	bne.n	800decc <__sflush_r+0x34>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d0c4      	beq.n	800decc <__sflush_r+0x34>
 800df42:	2b1d      	cmp	r3, #29
 800df44:	d001      	beq.n	800df4a <__sflush_r+0xb2>
 800df46:	2b16      	cmp	r3, #22
 800df48:	d101      	bne.n	800df4e <__sflush_r+0xb6>
 800df4a:	602f      	str	r7, [r5, #0]
 800df4c:	e7b1      	b.n	800deb2 <__sflush_r+0x1a>
 800df4e:	89a3      	ldrh	r3, [r4, #12]
 800df50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df54:	81a3      	strh	r3, [r4, #12]
 800df56:	e7ad      	b.n	800deb4 <__sflush_r+0x1c>
 800df58:	690f      	ldr	r7, [r1, #16]
 800df5a:	2f00      	cmp	r7, #0
 800df5c:	d0a9      	beq.n	800deb2 <__sflush_r+0x1a>
 800df5e:	0793      	lsls	r3, r2, #30
 800df60:	680e      	ldr	r6, [r1, #0]
 800df62:	bf08      	it	eq
 800df64:	694b      	ldreq	r3, [r1, #20]
 800df66:	600f      	str	r7, [r1, #0]
 800df68:	bf18      	it	ne
 800df6a:	2300      	movne	r3, #0
 800df6c:	eba6 0807 	sub.w	r8, r6, r7
 800df70:	608b      	str	r3, [r1, #8]
 800df72:	f1b8 0f00 	cmp.w	r8, #0
 800df76:	dd9c      	ble.n	800deb2 <__sflush_r+0x1a>
 800df78:	6a21      	ldr	r1, [r4, #32]
 800df7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df7c:	4643      	mov	r3, r8
 800df7e:	463a      	mov	r2, r7
 800df80:	4628      	mov	r0, r5
 800df82:	47b0      	blx	r6
 800df84:	2800      	cmp	r0, #0
 800df86:	dc06      	bgt.n	800df96 <__sflush_r+0xfe>
 800df88:	89a3      	ldrh	r3, [r4, #12]
 800df8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df8e:	81a3      	strh	r3, [r4, #12]
 800df90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df94:	e78e      	b.n	800deb4 <__sflush_r+0x1c>
 800df96:	4407      	add	r7, r0
 800df98:	eba8 0800 	sub.w	r8, r8, r0
 800df9c:	e7e9      	b.n	800df72 <__sflush_r+0xda>
 800df9e:	bf00      	nop
 800dfa0:	20400001 	.word	0x20400001

0800dfa4 <_fflush_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	690b      	ldr	r3, [r1, #16]
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	460c      	mov	r4, r1
 800dfac:	b913      	cbnz	r3, 800dfb4 <_fflush_r+0x10>
 800dfae:	2500      	movs	r5, #0
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	bd38      	pop	{r3, r4, r5, pc}
 800dfb4:	b118      	cbz	r0, 800dfbe <_fflush_r+0x1a>
 800dfb6:	6983      	ldr	r3, [r0, #24]
 800dfb8:	b90b      	cbnz	r3, 800dfbe <_fflush_r+0x1a>
 800dfba:	f000 f887 	bl	800e0cc <__sinit>
 800dfbe:	4b14      	ldr	r3, [pc, #80]	; (800e010 <_fflush_r+0x6c>)
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	d11b      	bne.n	800dffc <_fflush_r+0x58>
 800dfc4:	686c      	ldr	r4, [r5, #4]
 800dfc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0ef      	beq.n	800dfae <_fflush_r+0xa>
 800dfce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfd0:	07d0      	lsls	r0, r2, #31
 800dfd2:	d404      	bmi.n	800dfde <_fflush_r+0x3a>
 800dfd4:	0599      	lsls	r1, r3, #22
 800dfd6:	d402      	bmi.n	800dfde <_fflush_r+0x3a>
 800dfd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfda:	f000 f93a 	bl	800e252 <__retarget_lock_acquire_recursive>
 800dfde:	4628      	mov	r0, r5
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	f7ff ff59 	bl	800de98 <__sflush_r>
 800dfe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfe8:	07da      	lsls	r2, r3, #31
 800dfea:	4605      	mov	r5, r0
 800dfec:	d4e0      	bmi.n	800dfb0 <_fflush_r+0xc>
 800dfee:	89a3      	ldrh	r3, [r4, #12]
 800dff0:	059b      	lsls	r3, r3, #22
 800dff2:	d4dd      	bmi.n	800dfb0 <_fflush_r+0xc>
 800dff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dff6:	f000 f92d 	bl	800e254 <__retarget_lock_release_recursive>
 800dffa:	e7d9      	b.n	800dfb0 <_fflush_r+0xc>
 800dffc:	4b05      	ldr	r3, [pc, #20]	; (800e014 <_fflush_r+0x70>)
 800dffe:	429c      	cmp	r4, r3
 800e000:	d101      	bne.n	800e006 <_fflush_r+0x62>
 800e002:	68ac      	ldr	r4, [r5, #8]
 800e004:	e7df      	b.n	800dfc6 <_fflush_r+0x22>
 800e006:	4b04      	ldr	r3, [pc, #16]	; (800e018 <_fflush_r+0x74>)
 800e008:	429c      	cmp	r4, r3
 800e00a:	bf08      	it	eq
 800e00c:	68ec      	ldreq	r4, [r5, #12]
 800e00e:	e7da      	b.n	800dfc6 <_fflush_r+0x22>
 800e010:	08011a3c 	.word	0x08011a3c
 800e014:	08011a5c 	.word	0x08011a5c
 800e018:	08011a1c 	.word	0x08011a1c

0800e01c <std>:
 800e01c:	2300      	movs	r3, #0
 800e01e:	b510      	push	{r4, lr}
 800e020:	4604      	mov	r4, r0
 800e022:	e9c0 3300 	strd	r3, r3, [r0]
 800e026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e02a:	6083      	str	r3, [r0, #8]
 800e02c:	8181      	strh	r1, [r0, #12]
 800e02e:	6643      	str	r3, [r0, #100]	; 0x64
 800e030:	81c2      	strh	r2, [r0, #14]
 800e032:	6183      	str	r3, [r0, #24]
 800e034:	4619      	mov	r1, r3
 800e036:	2208      	movs	r2, #8
 800e038:	305c      	adds	r0, #92	; 0x5c
 800e03a:	f7ff fe61 	bl	800dd00 <memset>
 800e03e:	4b05      	ldr	r3, [pc, #20]	; (800e054 <std+0x38>)
 800e040:	6263      	str	r3, [r4, #36]	; 0x24
 800e042:	4b05      	ldr	r3, [pc, #20]	; (800e058 <std+0x3c>)
 800e044:	62a3      	str	r3, [r4, #40]	; 0x28
 800e046:	4b05      	ldr	r3, [pc, #20]	; (800e05c <std+0x40>)
 800e048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e04a:	4b05      	ldr	r3, [pc, #20]	; (800e060 <std+0x44>)
 800e04c:	6224      	str	r4, [r4, #32]
 800e04e:	6323      	str	r3, [r4, #48]	; 0x30
 800e050:	bd10      	pop	{r4, pc}
 800e052:	bf00      	nop
 800e054:	0800eda5 	.word	0x0800eda5
 800e058:	0800edc7 	.word	0x0800edc7
 800e05c:	0800edff 	.word	0x0800edff
 800e060:	0800ee23 	.word	0x0800ee23

0800e064 <_cleanup_r>:
 800e064:	4901      	ldr	r1, [pc, #4]	; (800e06c <_cleanup_r+0x8>)
 800e066:	f000 b8c1 	b.w	800e1ec <_fwalk_reent>
 800e06a:	bf00      	nop
 800e06c:	0800dfa5 	.word	0x0800dfa5

0800e070 <__sfmoreglue>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	2268      	movs	r2, #104	; 0x68
 800e074:	1e4d      	subs	r5, r1, #1
 800e076:	4355      	muls	r5, r2
 800e078:	460e      	mov	r6, r1
 800e07a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e07e:	f000 f9c3 	bl	800e408 <_malloc_r>
 800e082:	4604      	mov	r4, r0
 800e084:	b140      	cbz	r0, 800e098 <__sfmoreglue+0x28>
 800e086:	2100      	movs	r1, #0
 800e088:	e9c0 1600 	strd	r1, r6, [r0]
 800e08c:	300c      	adds	r0, #12
 800e08e:	60a0      	str	r0, [r4, #8]
 800e090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e094:	f7ff fe34 	bl	800dd00 <memset>
 800e098:	4620      	mov	r0, r4
 800e09a:	bd70      	pop	{r4, r5, r6, pc}

0800e09c <__sfp_lock_acquire>:
 800e09c:	4801      	ldr	r0, [pc, #4]	; (800e0a4 <__sfp_lock_acquire+0x8>)
 800e09e:	f000 b8d8 	b.w	800e252 <__retarget_lock_acquire_recursive>
 800e0a2:	bf00      	nop
 800e0a4:	24001639 	.word	0x24001639

0800e0a8 <__sfp_lock_release>:
 800e0a8:	4801      	ldr	r0, [pc, #4]	; (800e0b0 <__sfp_lock_release+0x8>)
 800e0aa:	f000 b8d3 	b.w	800e254 <__retarget_lock_release_recursive>
 800e0ae:	bf00      	nop
 800e0b0:	24001639 	.word	0x24001639

0800e0b4 <__sinit_lock_acquire>:
 800e0b4:	4801      	ldr	r0, [pc, #4]	; (800e0bc <__sinit_lock_acquire+0x8>)
 800e0b6:	f000 b8cc 	b.w	800e252 <__retarget_lock_acquire_recursive>
 800e0ba:	bf00      	nop
 800e0bc:	2400163a 	.word	0x2400163a

0800e0c0 <__sinit_lock_release>:
 800e0c0:	4801      	ldr	r0, [pc, #4]	; (800e0c8 <__sinit_lock_release+0x8>)
 800e0c2:	f000 b8c7 	b.w	800e254 <__retarget_lock_release_recursive>
 800e0c6:	bf00      	nop
 800e0c8:	2400163a 	.word	0x2400163a

0800e0cc <__sinit>:
 800e0cc:	b510      	push	{r4, lr}
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	f7ff fff0 	bl	800e0b4 <__sinit_lock_acquire>
 800e0d4:	69a3      	ldr	r3, [r4, #24]
 800e0d6:	b11b      	cbz	r3, 800e0e0 <__sinit+0x14>
 800e0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0dc:	f7ff bff0 	b.w	800e0c0 <__sinit_lock_release>
 800e0e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0e4:	6523      	str	r3, [r4, #80]	; 0x50
 800e0e6:	4b13      	ldr	r3, [pc, #76]	; (800e134 <__sinit+0x68>)
 800e0e8:	4a13      	ldr	r2, [pc, #76]	; (800e138 <__sinit+0x6c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0ee:	42a3      	cmp	r3, r4
 800e0f0:	bf04      	itt	eq
 800e0f2:	2301      	moveq	r3, #1
 800e0f4:	61a3      	streq	r3, [r4, #24]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 f820 	bl	800e13c <__sfp>
 800e0fc:	6060      	str	r0, [r4, #4]
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 f81c 	bl	800e13c <__sfp>
 800e104:	60a0      	str	r0, [r4, #8]
 800e106:	4620      	mov	r0, r4
 800e108:	f000 f818 	bl	800e13c <__sfp>
 800e10c:	2200      	movs	r2, #0
 800e10e:	60e0      	str	r0, [r4, #12]
 800e110:	2104      	movs	r1, #4
 800e112:	6860      	ldr	r0, [r4, #4]
 800e114:	f7ff ff82 	bl	800e01c <std>
 800e118:	68a0      	ldr	r0, [r4, #8]
 800e11a:	2201      	movs	r2, #1
 800e11c:	2109      	movs	r1, #9
 800e11e:	f7ff ff7d 	bl	800e01c <std>
 800e122:	68e0      	ldr	r0, [r4, #12]
 800e124:	2202      	movs	r2, #2
 800e126:	2112      	movs	r1, #18
 800e128:	f7ff ff78 	bl	800e01c <std>
 800e12c:	2301      	movs	r3, #1
 800e12e:	61a3      	str	r3, [r4, #24]
 800e130:	e7d2      	b.n	800e0d8 <__sinit+0xc>
 800e132:	bf00      	nop
 800e134:	08011968 	.word	0x08011968
 800e138:	0800e065 	.word	0x0800e065

0800e13c <__sfp>:
 800e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13e:	4607      	mov	r7, r0
 800e140:	f7ff ffac 	bl	800e09c <__sfp_lock_acquire>
 800e144:	4b1e      	ldr	r3, [pc, #120]	; (800e1c0 <__sfp+0x84>)
 800e146:	681e      	ldr	r6, [r3, #0]
 800e148:	69b3      	ldr	r3, [r6, #24]
 800e14a:	b913      	cbnz	r3, 800e152 <__sfp+0x16>
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7ff ffbd 	bl	800e0cc <__sinit>
 800e152:	3648      	adds	r6, #72	; 0x48
 800e154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e158:	3b01      	subs	r3, #1
 800e15a:	d503      	bpl.n	800e164 <__sfp+0x28>
 800e15c:	6833      	ldr	r3, [r6, #0]
 800e15e:	b30b      	cbz	r3, 800e1a4 <__sfp+0x68>
 800e160:	6836      	ldr	r6, [r6, #0]
 800e162:	e7f7      	b.n	800e154 <__sfp+0x18>
 800e164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e168:	b9d5      	cbnz	r5, 800e1a0 <__sfp+0x64>
 800e16a:	4b16      	ldr	r3, [pc, #88]	; (800e1c4 <__sfp+0x88>)
 800e16c:	60e3      	str	r3, [r4, #12]
 800e16e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e172:	6665      	str	r5, [r4, #100]	; 0x64
 800e174:	f000 f86c 	bl	800e250 <__retarget_lock_init_recursive>
 800e178:	f7ff ff96 	bl	800e0a8 <__sfp_lock_release>
 800e17c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e184:	6025      	str	r5, [r4, #0]
 800e186:	61a5      	str	r5, [r4, #24]
 800e188:	2208      	movs	r2, #8
 800e18a:	4629      	mov	r1, r5
 800e18c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e190:	f7ff fdb6 	bl	800dd00 <memset>
 800e194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e19c:	4620      	mov	r0, r4
 800e19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a0:	3468      	adds	r4, #104	; 0x68
 800e1a2:	e7d9      	b.n	800e158 <__sfp+0x1c>
 800e1a4:	2104      	movs	r1, #4
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	f7ff ff62 	bl	800e070 <__sfmoreglue>
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	6030      	str	r0, [r6, #0]
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d1d5      	bne.n	800e160 <__sfp+0x24>
 800e1b4:	f7ff ff78 	bl	800e0a8 <__sfp_lock_release>
 800e1b8:	230c      	movs	r3, #12
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	e7ee      	b.n	800e19c <__sfp+0x60>
 800e1be:	bf00      	nop
 800e1c0:	08011968 	.word	0x08011968
 800e1c4:	ffff0001 	.word	0xffff0001

0800e1c8 <fiprintf>:
 800e1c8:	b40e      	push	{r1, r2, r3}
 800e1ca:	b503      	push	{r0, r1, lr}
 800e1cc:	4601      	mov	r1, r0
 800e1ce:	ab03      	add	r3, sp, #12
 800e1d0:	4805      	ldr	r0, [pc, #20]	; (800e1e8 <fiprintf+0x20>)
 800e1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1d6:	6800      	ldr	r0, [r0, #0]
 800e1d8:	9301      	str	r3, [sp, #4]
 800e1da:	f000 fb0f 	bl	800e7fc <_vfiprintf_r>
 800e1de:	b002      	add	sp, #8
 800e1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e4:	b003      	add	sp, #12
 800e1e6:	4770      	bx	lr
 800e1e8:	2400005c 	.word	0x2400005c

0800e1ec <_fwalk_reent>:
 800e1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	4688      	mov	r8, r1
 800e1f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1f8:	2700      	movs	r7, #0
 800e1fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1fe:	f1b9 0901 	subs.w	r9, r9, #1
 800e202:	d505      	bpl.n	800e210 <_fwalk_reent+0x24>
 800e204:	6824      	ldr	r4, [r4, #0]
 800e206:	2c00      	cmp	r4, #0
 800e208:	d1f7      	bne.n	800e1fa <_fwalk_reent+0xe>
 800e20a:	4638      	mov	r0, r7
 800e20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e210:	89ab      	ldrh	r3, [r5, #12]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d907      	bls.n	800e226 <_fwalk_reent+0x3a>
 800e216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e21a:	3301      	adds	r3, #1
 800e21c:	d003      	beq.n	800e226 <_fwalk_reent+0x3a>
 800e21e:	4629      	mov	r1, r5
 800e220:	4630      	mov	r0, r6
 800e222:	47c0      	blx	r8
 800e224:	4307      	orrs	r7, r0
 800e226:	3568      	adds	r5, #104	; 0x68
 800e228:	e7e9      	b.n	800e1fe <_fwalk_reent+0x12>
	...

0800e22c <_gettimeofday_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d07      	ldr	r5, [pc, #28]	; (800e24c <_gettimeofday_r+0x20>)
 800e230:	2300      	movs	r3, #0
 800e232:	4604      	mov	r4, r0
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	602b      	str	r3, [r5, #0]
 800e23a:	f000 ffc9 	bl	800f1d0 <_gettimeofday>
 800e23e:	1c43      	adds	r3, r0, #1
 800e240:	d102      	bne.n	800e248 <_gettimeofday_r+0x1c>
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	b103      	cbz	r3, 800e248 <_gettimeofday_r+0x1c>
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	bd38      	pop	{r3, r4, r5, pc}
 800e24a:	bf00      	nop
 800e24c:	24001644 	.word	0x24001644

0800e250 <__retarget_lock_init_recursive>:
 800e250:	4770      	bx	lr

0800e252 <__retarget_lock_acquire_recursive>:
 800e252:	4770      	bx	lr

0800e254 <__retarget_lock_release_recursive>:
 800e254:	4770      	bx	lr

0800e256 <__swhatbuf_r>:
 800e256:	b570      	push	{r4, r5, r6, lr}
 800e258:	460e      	mov	r6, r1
 800e25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25e:	2900      	cmp	r1, #0
 800e260:	b096      	sub	sp, #88	; 0x58
 800e262:	4614      	mov	r4, r2
 800e264:	461d      	mov	r5, r3
 800e266:	da08      	bge.n	800e27a <__swhatbuf_r+0x24>
 800e268:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e26c:	2200      	movs	r2, #0
 800e26e:	602a      	str	r2, [r5, #0]
 800e270:	061a      	lsls	r2, r3, #24
 800e272:	d410      	bmi.n	800e296 <__swhatbuf_r+0x40>
 800e274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e278:	e00e      	b.n	800e298 <__swhatbuf_r+0x42>
 800e27a:	466a      	mov	r2, sp
 800e27c:	f000 fec0 	bl	800f000 <_fstat_r>
 800e280:	2800      	cmp	r0, #0
 800e282:	dbf1      	blt.n	800e268 <__swhatbuf_r+0x12>
 800e284:	9a01      	ldr	r2, [sp, #4]
 800e286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e28e:	425a      	negs	r2, r3
 800e290:	415a      	adcs	r2, r3
 800e292:	602a      	str	r2, [r5, #0]
 800e294:	e7ee      	b.n	800e274 <__swhatbuf_r+0x1e>
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	2000      	movs	r0, #0
 800e29a:	6023      	str	r3, [r4, #0]
 800e29c:	b016      	add	sp, #88	; 0x58
 800e29e:	bd70      	pop	{r4, r5, r6, pc}

0800e2a0 <__smakebuf_r>:
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a4:	079d      	lsls	r5, r3, #30
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	d507      	bpl.n	800e2bc <__smakebuf_r+0x1c>
 800e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	ab01      	add	r3, sp, #4
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f7ff ffc9 	bl	800e256 <__swhatbuf_r>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f000 f89d 	bl	800e408 <_malloc_r>
 800e2ce:	b948      	cbnz	r0, 800e2e4 <__smakebuf_r+0x44>
 800e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d4ef      	bmi.n	800e2b8 <__smakebuf_r+0x18>
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	e7e3      	b.n	800e2ac <__smakebuf_r+0xc>
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	; (800e31c <__smakebuf_r+0x7c>)
 800e2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	6020      	str	r0, [r4, #0]
 800e2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f0:	81a3      	strh	r3, [r4, #12]
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	6163      	str	r3, [r4, #20]
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	b15b      	cbz	r3, 800e314 <__smakebuf_r+0x74>
 800e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e300:	4630      	mov	r0, r6
 800e302:	f000 fe8f 	bl	800f024 <_isatty_r>
 800e306:	b128      	cbz	r0, 800e314 <__smakebuf_r+0x74>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f023 0303 	bic.w	r3, r3, #3
 800e30e:	f043 0301 	orr.w	r3, r3, #1
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	89a0      	ldrh	r0, [r4, #12]
 800e316:	4305      	orrs	r5, r0
 800e318:	81a5      	strh	r5, [r4, #12]
 800e31a:	e7cd      	b.n	800e2b8 <__smakebuf_r+0x18>
 800e31c:	0800e065 	.word	0x0800e065

0800e320 <malloc>:
 800e320:	4b02      	ldr	r3, [pc, #8]	; (800e32c <malloc+0xc>)
 800e322:	4601      	mov	r1, r0
 800e324:	6818      	ldr	r0, [r3, #0]
 800e326:	f000 b86f 	b.w	800e408 <_malloc_r>
 800e32a:	bf00      	nop
 800e32c:	2400005c 	.word	0x2400005c

0800e330 <_free_r>:
 800e330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e332:	2900      	cmp	r1, #0
 800e334:	d044      	beq.n	800e3c0 <_free_r+0x90>
 800e336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e33a:	9001      	str	r0, [sp, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f1a1 0404 	sub.w	r4, r1, #4
 800e342:	bfb8      	it	lt
 800e344:	18e4      	addlt	r4, r4, r3
 800e346:	f000 fea9 	bl	800f09c <__malloc_lock>
 800e34a:	4a1e      	ldr	r2, [pc, #120]	; (800e3c4 <_free_r+0x94>)
 800e34c:	9801      	ldr	r0, [sp, #4]
 800e34e:	6813      	ldr	r3, [r2, #0]
 800e350:	b933      	cbnz	r3, 800e360 <_free_r+0x30>
 800e352:	6063      	str	r3, [r4, #4]
 800e354:	6014      	str	r4, [r2, #0]
 800e356:	b003      	add	sp, #12
 800e358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e35c:	f000 bea4 	b.w	800f0a8 <__malloc_unlock>
 800e360:	42a3      	cmp	r3, r4
 800e362:	d908      	bls.n	800e376 <_free_r+0x46>
 800e364:	6825      	ldr	r5, [r4, #0]
 800e366:	1961      	adds	r1, r4, r5
 800e368:	428b      	cmp	r3, r1
 800e36a:	bf01      	itttt	eq
 800e36c:	6819      	ldreq	r1, [r3, #0]
 800e36e:	685b      	ldreq	r3, [r3, #4]
 800e370:	1949      	addeq	r1, r1, r5
 800e372:	6021      	streq	r1, [r4, #0]
 800e374:	e7ed      	b.n	800e352 <_free_r+0x22>
 800e376:	461a      	mov	r2, r3
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	b10b      	cbz	r3, 800e380 <_free_r+0x50>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d9fa      	bls.n	800e376 <_free_r+0x46>
 800e380:	6811      	ldr	r1, [r2, #0]
 800e382:	1855      	adds	r5, r2, r1
 800e384:	42a5      	cmp	r5, r4
 800e386:	d10b      	bne.n	800e3a0 <_free_r+0x70>
 800e388:	6824      	ldr	r4, [r4, #0]
 800e38a:	4421      	add	r1, r4
 800e38c:	1854      	adds	r4, r2, r1
 800e38e:	42a3      	cmp	r3, r4
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	d1e0      	bne.n	800e356 <_free_r+0x26>
 800e394:	681c      	ldr	r4, [r3, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	6053      	str	r3, [r2, #4]
 800e39a:	4421      	add	r1, r4
 800e39c:	6011      	str	r1, [r2, #0]
 800e39e:	e7da      	b.n	800e356 <_free_r+0x26>
 800e3a0:	d902      	bls.n	800e3a8 <_free_r+0x78>
 800e3a2:	230c      	movs	r3, #12
 800e3a4:	6003      	str	r3, [r0, #0]
 800e3a6:	e7d6      	b.n	800e356 <_free_r+0x26>
 800e3a8:	6825      	ldr	r5, [r4, #0]
 800e3aa:	1961      	adds	r1, r4, r5
 800e3ac:	428b      	cmp	r3, r1
 800e3ae:	bf04      	itt	eq
 800e3b0:	6819      	ldreq	r1, [r3, #0]
 800e3b2:	685b      	ldreq	r3, [r3, #4]
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	bf04      	itt	eq
 800e3b8:	1949      	addeq	r1, r1, r5
 800e3ba:	6021      	streq	r1, [r4, #0]
 800e3bc:	6054      	str	r4, [r2, #4]
 800e3be:	e7ca      	b.n	800e356 <_free_r+0x26>
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bd30      	pop	{r4, r5, pc}
 800e3c4:	2400163c 	.word	0x2400163c

0800e3c8 <sbrk_aligned>:
 800e3c8:	b570      	push	{r4, r5, r6, lr}
 800e3ca:	4e0e      	ldr	r6, [pc, #56]	; (800e404 <sbrk_aligned+0x3c>)
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	6831      	ldr	r1, [r6, #0]
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	b911      	cbnz	r1, 800e3da <sbrk_aligned+0x12>
 800e3d4:	f000 fcd6 	bl	800ed84 <_sbrk_r>
 800e3d8:	6030      	str	r0, [r6, #0]
 800e3da:	4621      	mov	r1, r4
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f000 fcd1 	bl	800ed84 <_sbrk_r>
 800e3e2:	1c43      	adds	r3, r0, #1
 800e3e4:	d00a      	beq.n	800e3fc <sbrk_aligned+0x34>
 800e3e6:	1cc4      	adds	r4, r0, #3
 800e3e8:	f024 0403 	bic.w	r4, r4, #3
 800e3ec:	42a0      	cmp	r0, r4
 800e3ee:	d007      	beq.n	800e400 <sbrk_aligned+0x38>
 800e3f0:	1a21      	subs	r1, r4, r0
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 fcc6 	bl	800ed84 <_sbrk_r>
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d101      	bne.n	800e400 <sbrk_aligned+0x38>
 800e3fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e400:	4620      	mov	r0, r4
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	24001640 	.word	0x24001640

0800e408 <_malloc_r>:
 800e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40c:	1ccd      	adds	r5, r1, #3
 800e40e:	f025 0503 	bic.w	r5, r5, #3
 800e412:	3508      	adds	r5, #8
 800e414:	2d0c      	cmp	r5, #12
 800e416:	bf38      	it	cc
 800e418:	250c      	movcc	r5, #12
 800e41a:	2d00      	cmp	r5, #0
 800e41c:	4607      	mov	r7, r0
 800e41e:	db01      	blt.n	800e424 <_malloc_r+0x1c>
 800e420:	42a9      	cmp	r1, r5
 800e422:	d905      	bls.n	800e430 <_malloc_r+0x28>
 800e424:	230c      	movs	r3, #12
 800e426:	603b      	str	r3, [r7, #0]
 800e428:	2600      	movs	r6, #0
 800e42a:	4630      	mov	r0, r6
 800e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e430:	4e2e      	ldr	r6, [pc, #184]	; (800e4ec <_malloc_r+0xe4>)
 800e432:	f000 fe33 	bl	800f09c <__malloc_lock>
 800e436:	6833      	ldr	r3, [r6, #0]
 800e438:	461c      	mov	r4, r3
 800e43a:	bb34      	cbnz	r4, 800e48a <_malloc_r+0x82>
 800e43c:	4629      	mov	r1, r5
 800e43e:	4638      	mov	r0, r7
 800e440:	f7ff ffc2 	bl	800e3c8 <sbrk_aligned>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	4604      	mov	r4, r0
 800e448:	d14d      	bne.n	800e4e6 <_malloc_r+0xde>
 800e44a:	6834      	ldr	r4, [r6, #0]
 800e44c:	4626      	mov	r6, r4
 800e44e:	2e00      	cmp	r6, #0
 800e450:	d140      	bne.n	800e4d4 <_malloc_r+0xcc>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	4631      	mov	r1, r6
 800e456:	4638      	mov	r0, r7
 800e458:	eb04 0803 	add.w	r8, r4, r3
 800e45c:	f000 fc92 	bl	800ed84 <_sbrk_r>
 800e460:	4580      	cmp	r8, r0
 800e462:	d13a      	bne.n	800e4da <_malloc_r+0xd2>
 800e464:	6821      	ldr	r1, [r4, #0]
 800e466:	3503      	adds	r5, #3
 800e468:	1a6d      	subs	r5, r5, r1
 800e46a:	f025 0503 	bic.w	r5, r5, #3
 800e46e:	3508      	adds	r5, #8
 800e470:	2d0c      	cmp	r5, #12
 800e472:	bf38      	it	cc
 800e474:	250c      	movcc	r5, #12
 800e476:	4629      	mov	r1, r5
 800e478:	4638      	mov	r0, r7
 800e47a:	f7ff ffa5 	bl	800e3c8 <sbrk_aligned>
 800e47e:	3001      	adds	r0, #1
 800e480:	d02b      	beq.n	800e4da <_malloc_r+0xd2>
 800e482:	6823      	ldr	r3, [r4, #0]
 800e484:	442b      	add	r3, r5
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	e00e      	b.n	800e4a8 <_malloc_r+0xa0>
 800e48a:	6822      	ldr	r2, [r4, #0]
 800e48c:	1b52      	subs	r2, r2, r5
 800e48e:	d41e      	bmi.n	800e4ce <_malloc_r+0xc6>
 800e490:	2a0b      	cmp	r2, #11
 800e492:	d916      	bls.n	800e4c2 <_malloc_r+0xba>
 800e494:	1961      	adds	r1, r4, r5
 800e496:	42a3      	cmp	r3, r4
 800e498:	6025      	str	r5, [r4, #0]
 800e49a:	bf18      	it	ne
 800e49c:	6059      	strne	r1, [r3, #4]
 800e49e:	6863      	ldr	r3, [r4, #4]
 800e4a0:	bf08      	it	eq
 800e4a2:	6031      	streq	r1, [r6, #0]
 800e4a4:	5162      	str	r2, [r4, r5]
 800e4a6:	604b      	str	r3, [r1, #4]
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f104 060b 	add.w	r6, r4, #11
 800e4ae:	f000 fdfb 	bl	800f0a8 <__malloc_unlock>
 800e4b2:	f026 0607 	bic.w	r6, r6, #7
 800e4b6:	1d23      	adds	r3, r4, #4
 800e4b8:	1af2      	subs	r2, r6, r3
 800e4ba:	d0b6      	beq.n	800e42a <_malloc_r+0x22>
 800e4bc:	1b9b      	subs	r3, r3, r6
 800e4be:	50a3      	str	r3, [r4, r2]
 800e4c0:	e7b3      	b.n	800e42a <_malloc_r+0x22>
 800e4c2:	6862      	ldr	r2, [r4, #4]
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	bf0c      	ite	eq
 800e4c8:	6032      	streq	r2, [r6, #0]
 800e4ca:	605a      	strne	r2, [r3, #4]
 800e4cc:	e7ec      	b.n	800e4a8 <_malloc_r+0xa0>
 800e4ce:	4623      	mov	r3, r4
 800e4d0:	6864      	ldr	r4, [r4, #4]
 800e4d2:	e7b2      	b.n	800e43a <_malloc_r+0x32>
 800e4d4:	4634      	mov	r4, r6
 800e4d6:	6876      	ldr	r6, [r6, #4]
 800e4d8:	e7b9      	b.n	800e44e <_malloc_r+0x46>
 800e4da:	230c      	movs	r3, #12
 800e4dc:	603b      	str	r3, [r7, #0]
 800e4de:	4638      	mov	r0, r7
 800e4e0:	f000 fde2 	bl	800f0a8 <__malloc_unlock>
 800e4e4:	e7a1      	b.n	800e42a <_malloc_r+0x22>
 800e4e6:	6025      	str	r5, [r4, #0]
 800e4e8:	e7de      	b.n	800e4a8 <_malloc_r+0xa0>
 800e4ea:	bf00      	nop
 800e4ec:	2400163c 	.word	0x2400163c

0800e4f0 <__ssputs_r>:
 800e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	688e      	ldr	r6, [r1, #8]
 800e4f6:	429e      	cmp	r6, r3
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	4690      	mov	r8, r2
 800e4fe:	461f      	mov	r7, r3
 800e500:	d838      	bhi.n	800e574 <__ssputs_r+0x84>
 800e502:	898a      	ldrh	r2, [r1, #12]
 800e504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e508:	d032      	beq.n	800e570 <__ssputs_r+0x80>
 800e50a:	6825      	ldr	r5, [r4, #0]
 800e50c:	6909      	ldr	r1, [r1, #16]
 800e50e:	eba5 0901 	sub.w	r9, r5, r1
 800e512:	6965      	ldr	r5, [r4, #20]
 800e514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e51c:	3301      	adds	r3, #1
 800e51e:	444b      	add	r3, r9
 800e520:	106d      	asrs	r5, r5, #1
 800e522:	429d      	cmp	r5, r3
 800e524:	bf38      	it	cc
 800e526:	461d      	movcc	r5, r3
 800e528:	0553      	lsls	r3, r2, #21
 800e52a:	d531      	bpl.n	800e590 <__ssputs_r+0xa0>
 800e52c:	4629      	mov	r1, r5
 800e52e:	f7ff ff6b 	bl	800e408 <_malloc_r>
 800e532:	4606      	mov	r6, r0
 800e534:	b950      	cbnz	r0, 800e54c <__ssputs_r+0x5c>
 800e536:	230c      	movs	r3, #12
 800e538:	f8ca 3000 	str.w	r3, [sl]
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e542:	81a3      	strh	r3, [r4, #12]
 800e544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e54c:	6921      	ldr	r1, [r4, #16]
 800e54e:	464a      	mov	r2, r9
 800e550:	f7ff fbc8 	bl	800dce4 <memcpy>
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e55e:	81a3      	strh	r3, [r4, #12]
 800e560:	6126      	str	r6, [r4, #16]
 800e562:	6165      	str	r5, [r4, #20]
 800e564:	444e      	add	r6, r9
 800e566:	eba5 0509 	sub.w	r5, r5, r9
 800e56a:	6026      	str	r6, [r4, #0]
 800e56c:	60a5      	str	r5, [r4, #8]
 800e56e:	463e      	mov	r6, r7
 800e570:	42be      	cmp	r6, r7
 800e572:	d900      	bls.n	800e576 <__ssputs_r+0x86>
 800e574:	463e      	mov	r6, r7
 800e576:	6820      	ldr	r0, [r4, #0]
 800e578:	4632      	mov	r2, r6
 800e57a:	4641      	mov	r1, r8
 800e57c:	f000 fd74 	bl	800f068 <memmove>
 800e580:	68a3      	ldr	r3, [r4, #8]
 800e582:	1b9b      	subs	r3, r3, r6
 800e584:	60a3      	str	r3, [r4, #8]
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	4433      	add	r3, r6
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	2000      	movs	r0, #0
 800e58e:	e7db      	b.n	800e548 <__ssputs_r+0x58>
 800e590:	462a      	mov	r2, r5
 800e592:	f000 fd8f 	bl	800f0b4 <_realloc_r>
 800e596:	4606      	mov	r6, r0
 800e598:	2800      	cmp	r0, #0
 800e59a:	d1e1      	bne.n	800e560 <__ssputs_r+0x70>
 800e59c:	6921      	ldr	r1, [r4, #16]
 800e59e:	4650      	mov	r0, sl
 800e5a0:	f7ff fec6 	bl	800e330 <_free_r>
 800e5a4:	e7c7      	b.n	800e536 <__ssputs_r+0x46>
	...

0800e5a8 <_svfiprintf_r>:
 800e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	4698      	mov	r8, r3
 800e5ae:	898b      	ldrh	r3, [r1, #12]
 800e5b0:	061b      	lsls	r3, r3, #24
 800e5b2:	b09d      	sub	sp, #116	; 0x74
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	460d      	mov	r5, r1
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	d50e      	bpl.n	800e5da <_svfiprintf_r+0x32>
 800e5bc:	690b      	ldr	r3, [r1, #16]
 800e5be:	b963      	cbnz	r3, 800e5da <_svfiprintf_r+0x32>
 800e5c0:	2140      	movs	r1, #64	; 0x40
 800e5c2:	f7ff ff21 	bl	800e408 <_malloc_r>
 800e5c6:	6028      	str	r0, [r5, #0]
 800e5c8:	6128      	str	r0, [r5, #16]
 800e5ca:	b920      	cbnz	r0, 800e5d6 <_svfiprintf_r+0x2e>
 800e5cc:	230c      	movs	r3, #12
 800e5ce:	603b      	str	r3, [r7, #0]
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5d4:	e0d1      	b.n	800e77a <_svfiprintf_r+0x1d2>
 800e5d6:	2340      	movs	r3, #64	; 0x40
 800e5d8:	616b      	str	r3, [r5, #20]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5de:	2320      	movs	r3, #32
 800e5e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5e8:	2330      	movs	r3, #48	; 0x30
 800e5ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e794 <_svfiprintf_r+0x1ec>
 800e5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5f2:	f04f 0901 	mov.w	r9, #1
 800e5f6:	4623      	mov	r3, r4
 800e5f8:	469a      	mov	sl, r3
 800e5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5fe:	b10a      	cbz	r2, 800e604 <_svfiprintf_r+0x5c>
 800e600:	2a25      	cmp	r2, #37	; 0x25
 800e602:	d1f9      	bne.n	800e5f8 <_svfiprintf_r+0x50>
 800e604:	ebba 0b04 	subs.w	fp, sl, r4
 800e608:	d00b      	beq.n	800e622 <_svfiprintf_r+0x7a>
 800e60a:	465b      	mov	r3, fp
 800e60c:	4622      	mov	r2, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	4638      	mov	r0, r7
 800e612:	f7ff ff6d 	bl	800e4f0 <__ssputs_r>
 800e616:	3001      	adds	r0, #1
 800e618:	f000 80aa 	beq.w	800e770 <_svfiprintf_r+0x1c8>
 800e61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e61e:	445a      	add	r2, fp
 800e620:	9209      	str	r2, [sp, #36]	; 0x24
 800e622:	f89a 3000 	ldrb.w	r3, [sl]
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 80a2 	beq.w	800e770 <_svfiprintf_r+0x1c8>
 800e62c:	2300      	movs	r3, #0
 800e62e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e636:	f10a 0a01 	add.w	sl, sl, #1
 800e63a:	9304      	str	r3, [sp, #16]
 800e63c:	9307      	str	r3, [sp, #28]
 800e63e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e642:	931a      	str	r3, [sp, #104]	; 0x68
 800e644:	4654      	mov	r4, sl
 800e646:	2205      	movs	r2, #5
 800e648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e64c:	4851      	ldr	r0, [pc, #324]	; (800e794 <_svfiprintf_r+0x1ec>)
 800e64e:	f7f1 fe47 	bl	80002e0 <memchr>
 800e652:	9a04      	ldr	r2, [sp, #16]
 800e654:	b9d8      	cbnz	r0, 800e68e <_svfiprintf_r+0xe6>
 800e656:	06d0      	lsls	r0, r2, #27
 800e658:	bf44      	itt	mi
 800e65a:	2320      	movmi	r3, #32
 800e65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e660:	0711      	lsls	r1, r2, #28
 800e662:	bf44      	itt	mi
 800e664:	232b      	movmi	r3, #43	; 0x2b
 800e666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e66a:	f89a 3000 	ldrb.w	r3, [sl]
 800e66e:	2b2a      	cmp	r3, #42	; 0x2a
 800e670:	d015      	beq.n	800e69e <_svfiprintf_r+0xf6>
 800e672:	9a07      	ldr	r2, [sp, #28]
 800e674:	4654      	mov	r4, sl
 800e676:	2000      	movs	r0, #0
 800e678:	f04f 0c0a 	mov.w	ip, #10
 800e67c:	4621      	mov	r1, r4
 800e67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e682:	3b30      	subs	r3, #48	; 0x30
 800e684:	2b09      	cmp	r3, #9
 800e686:	d94e      	bls.n	800e726 <_svfiprintf_r+0x17e>
 800e688:	b1b0      	cbz	r0, 800e6b8 <_svfiprintf_r+0x110>
 800e68a:	9207      	str	r2, [sp, #28]
 800e68c:	e014      	b.n	800e6b8 <_svfiprintf_r+0x110>
 800e68e:	eba0 0308 	sub.w	r3, r0, r8
 800e692:	fa09 f303 	lsl.w	r3, r9, r3
 800e696:	4313      	orrs	r3, r2
 800e698:	9304      	str	r3, [sp, #16]
 800e69a:	46a2      	mov	sl, r4
 800e69c:	e7d2      	b.n	800e644 <_svfiprintf_r+0x9c>
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	9103      	str	r1, [sp, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfbb      	ittet	lt
 800e6aa:	425b      	neglt	r3, r3
 800e6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b0:	9307      	strge	r3, [sp, #28]
 800e6b2:	9307      	strlt	r3, [sp, #28]
 800e6b4:	bfb8      	it	lt
 800e6b6:	9204      	strlt	r2, [sp, #16]
 800e6b8:	7823      	ldrb	r3, [r4, #0]
 800e6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e6bc:	d10c      	bne.n	800e6d8 <_svfiprintf_r+0x130>
 800e6be:	7863      	ldrb	r3, [r4, #1]
 800e6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c2:	d135      	bne.n	800e730 <_svfiprintf_r+0x188>
 800e6c4:	9b03      	ldr	r3, [sp, #12]
 800e6c6:	1d1a      	adds	r2, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	9203      	str	r2, [sp, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfb8      	it	lt
 800e6d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e6d4:	3402      	adds	r4, #2
 800e6d6:	9305      	str	r3, [sp, #20]
 800e6d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7a4 <_svfiprintf_r+0x1fc>
 800e6dc:	7821      	ldrb	r1, [r4, #0]
 800e6de:	2203      	movs	r2, #3
 800e6e0:	4650      	mov	r0, sl
 800e6e2:	f7f1 fdfd 	bl	80002e0 <memchr>
 800e6e6:	b140      	cbz	r0, 800e6fa <_svfiprintf_r+0x152>
 800e6e8:	2340      	movs	r3, #64	; 0x40
 800e6ea:	eba0 000a 	sub.w	r0, r0, sl
 800e6ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e6f2:	9b04      	ldr	r3, [sp, #16]
 800e6f4:	4303      	orrs	r3, r0
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6fe:	4826      	ldr	r0, [pc, #152]	; (800e798 <_svfiprintf_r+0x1f0>)
 800e700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e704:	2206      	movs	r2, #6
 800e706:	f7f1 fdeb 	bl	80002e0 <memchr>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d038      	beq.n	800e780 <_svfiprintf_r+0x1d8>
 800e70e:	4b23      	ldr	r3, [pc, #140]	; (800e79c <_svfiprintf_r+0x1f4>)
 800e710:	bb1b      	cbnz	r3, 800e75a <_svfiprintf_r+0x1b2>
 800e712:	9b03      	ldr	r3, [sp, #12]
 800e714:	3307      	adds	r3, #7
 800e716:	f023 0307 	bic.w	r3, r3, #7
 800e71a:	3308      	adds	r3, #8
 800e71c:	9303      	str	r3, [sp, #12]
 800e71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e720:	4433      	add	r3, r6
 800e722:	9309      	str	r3, [sp, #36]	; 0x24
 800e724:	e767      	b.n	800e5f6 <_svfiprintf_r+0x4e>
 800e726:	fb0c 3202 	mla	r2, ip, r2, r3
 800e72a:	460c      	mov	r4, r1
 800e72c:	2001      	movs	r0, #1
 800e72e:	e7a5      	b.n	800e67c <_svfiprintf_r+0xd4>
 800e730:	2300      	movs	r3, #0
 800e732:	3401      	adds	r4, #1
 800e734:	9305      	str	r3, [sp, #20]
 800e736:	4619      	mov	r1, r3
 800e738:	f04f 0c0a 	mov.w	ip, #10
 800e73c:	4620      	mov	r0, r4
 800e73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e742:	3a30      	subs	r2, #48	; 0x30
 800e744:	2a09      	cmp	r2, #9
 800e746:	d903      	bls.n	800e750 <_svfiprintf_r+0x1a8>
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0c5      	beq.n	800e6d8 <_svfiprintf_r+0x130>
 800e74c:	9105      	str	r1, [sp, #20]
 800e74e:	e7c3      	b.n	800e6d8 <_svfiprintf_r+0x130>
 800e750:	fb0c 2101 	mla	r1, ip, r1, r2
 800e754:	4604      	mov	r4, r0
 800e756:	2301      	movs	r3, #1
 800e758:	e7f0      	b.n	800e73c <_svfiprintf_r+0x194>
 800e75a:	ab03      	add	r3, sp, #12
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	462a      	mov	r2, r5
 800e760:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <_svfiprintf_r+0x1f8>)
 800e762:	a904      	add	r1, sp, #16
 800e764:	4638      	mov	r0, r7
 800e766:	f3af 8000 	nop.w
 800e76a:	1c42      	adds	r2, r0, #1
 800e76c:	4606      	mov	r6, r0
 800e76e:	d1d6      	bne.n	800e71e <_svfiprintf_r+0x176>
 800e770:	89ab      	ldrh	r3, [r5, #12]
 800e772:	065b      	lsls	r3, r3, #25
 800e774:	f53f af2c 	bmi.w	800e5d0 <_svfiprintf_r+0x28>
 800e778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e77a:	b01d      	add	sp, #116	; 0x74
 800e77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e780:	ab03      	add	r3, sp, #12
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	462a      	mov	r2, r5
 800e786:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <_svfiprintf_r+0x1f8>)
 800e788:	a904      	add	r1, sp, #16
 800e78a:	4638      	mov	r0, r7
 800e78c:	f000 f9d4 	bl	800eb38 <_printf_i>
 800e790:	e7eb      	b.n	800e76a <_svfiprintf_r+0x1c2>
 800e792:	bf00      	nop
 800e794:	08011a7c 	.word	0x08011a7c
 800e798:	08011a86 	.word	0x08011a86
 800e79c:	00000000 	.word	0x00000000
 800e7a0:	0800e4f1 	.word	0x0800e4f1
 800e7a4:	08011a82 	.word	0x08011a82

0800e7a8 <__sfputc_r>:
 800e7a8:	6893      	ldr	r3, [r2, #8]
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	b410      	push	{r4}
 800e7b0:	6093      	str	r3, [r2, #8]
 800e7b2:	da08      	bge.n	800e7c6 <__sfputc_r+0x1e>
 800e7b4:	6994      	ldr	r4, [r2, #24]
 800e7b6:	42a3      	cmp	r3, r4
 800e7b8:	db01      	blt.n	800e7be <__sfputc_r+0x16>
 800e7ba:	290a      	cmp	r1, #10
 800e7bc:	d103      	bne.n	800e7c6 <__sfputc_r+0x1e>
 800e7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c2:	f000 bb33 	b.w	800ee2c <__swbuf_r>
 800e7c6:	6813      	ldr	r3, [r2, #0]
 800e7c8:	1c58      	adds	r0, r3, #1
 800e7ca:	6010      	str	r0, [r2, #0]
 800e7cc:	7019      	strb	r1, [r3, #0]
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <__sfputs_r>:
 800e7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	4614      	mov	r4, r2
 800e7de:	18d5      	adds	r5, r2, r3
 800e7e0:	42ac      	cmp	r4, r5
 800e7e2:	d101      	bne.n	800e7e8 <__sfputs_r+0x12>
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e007      	b.n	800e7f8 <__sfputs_r+0x22>
 800e7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ec:	463a      	mov	r2, r7
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7ff ffda 	bl	800e7a8 <__sfputc_r>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d1f3      	bne.n	800e7e0 <__sfputs_r+0xa>
 800e7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7fc <_vfiprintf_r>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	460d      	mov	r5, r1
 800e802:	b09d      	sub	sp, #116	; 0x74
 800e804:	4614      	mov	r4, r2
 800e806:	4698      	mov	r8, r3
 800e808:	4606      	mov	r6, r0
 800e80a:	b118      	cbz	r0, 800e814 <_vfiprintf_r+0x18>
 800e80c:	6983      	ldr	r3, [r0, #24]
 800e80e:	b90b      	cbnz	r3, 800e814 <_vfiprintf_r+0x18>
 800e810:	f7ff fc5c 	bl	800e0cc <__sinit>
 800e814:	4b89      	ldr	r3, [pc, #548]	; (800ea3c <_vfiprintf_r+0x240>)
 800e816:	429d      	cmp	r5, r3
 800e818:	d11b      	bne.n	800e852 <_vfiprintf_r+0x56>
 800e81a:	6875      	ldr	r5, [r6, #4]
 800e81c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e81e:	07d9      	lsls	r1, r3, #31
 800e820:	d405      	bmi.n	800e82e <_vfiprintf_r+0x32>
 800e822:	89ab      	ldrh	r3, [r5, #12]
 800e824:	059a      	lsls	r2, r3, #22
 800e826:	d402      	bmi.n	800e82e <_vfiprintf_r+0x32>
 800e828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e82a:	f7ff fd12 	bl	800e252 <__retarget_lock_acquire_recursive>
 800e82e:	89ab      	ldrh	r3, [r5, #12]
 800e830:	071b      	lsls	r3, r3, #28
 800e832:	d501      	bpl.n	800e838 <_vfiprintf_r+0x3c>
 800e834:	692b      	ldr	r3, [r5, #16]
 800e836:	b9eb      	cbnz	r3, 800e874 <_vfiprintf_r+0x78>
 800e838:	4629      	mov	r1, r5
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 fb5a 	bl	800eef4 <__swsetup_r>
 800e840:	b1c0      	cbz	r0, 800e874 <_vfiprintf_r+0x78>
 800e842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e844:	07dc      	lsls	r4, r3, #31
 800e846:	d50e      	bpl.n	800e866 <_vfiprintf_r+0x6a>
 800e848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e84c:	b01d      	add	sp, #116	; 0x74
 800e84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e852:	4b7b      	ldr	r3, [pc, #492]	; (800ea40 <_vfiprintf_r+0x244>)
 800e854:	429d      	cmp	r5, r3
 800e856:	d101      	bne.n	800e85c <_vfiprintf_r+0x60>
 800e858:	68b5      	ldr	r5, [r6, #8]
 800e85a:	e7df      	b.n	800e81c <_vfiprintf_r+0x20>
 800e85c:	4b79      	ldr	r3, [pc, #484]	; (800ea44 <_vfiprintf_r+0x248>)
 800e85e:	429d      	cmp	r5, r3
 800e860:	bf08      	it	eq
 800e862:	68f5      	ldreq	r5, [r6, #12]
 800e864:	e7da      	b.n	800e81c <_vfiprintf_r+0x20>
 800e866:	89ab      	ldrh	r3, [r5, #12]
 800e868:	0598      	lsls	r0, r3, #22
 800e86a:	d4ed      	bmi.n	800e848 <_vfiprintf_r+0x4c>
 800e86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e86e:	f7ff fcf1 	bl	800e254 <__retarget_lock_release_recursive>
 800e872:	e7e9      	b.n	800e848 <_vfiprintf_r+0x4c>
 800e874:	2300      	movs	r3, #0
 800e876:	9309      	str	r3, [sp, #36]	; 0x24
 800e878:	2320      	movs	r3, #32
 800e87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e882:	2330      	movs	r3, #48	; 0x30
 800e884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea48 <_vfiprintf_r+0x24c>
 800e888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e88c:	f04f 0901 	mov.w	r9, #1
 800e890:	4623      	mov	r3, r4
 800e892:	469a      	mov	sl, r3
 800e894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e898:	b10a      	cbz	r2, 800e89e <_vfiprintf_r+0xa2>
 800e89a:	2a25      	cmp	r2, #37	; 0x25
 800e89c:	d1f9      	bne.n	800e892 <_vfiprintf_r+0x96>
 800e89e:	ebba 0b04 	subs.w	fp, sl, r4
 800e8a2:	d00b      	beq.n	800e8bc <_vfiprintf_r+0xc0>
 800e8a4:	465b      	mov	r3, fp
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f7ff ff93 	bl	800e7d6 <__sfputs_r>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f000 80aa 	beq.w	800ea0a <_vfiprintf_r+0x20e>
 800e8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8b8:	445a      	add	r2, fp
 800e8ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 80a2 	beq.w	800ea0a <_vfiprintf_r+0x20e>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8d0:	f10a 0a01 	add.w	sl, sl, #1
 800e8d4:	9304      	str	r3, [sp, #16]
 800e8d6:	9307      	str	r3, [sp, #28]
 800e8d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e8de:	4654      	mov	r4, sl
 800e8e0:	2205      	movs	r2, #5
 800e8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e6:	4858      	ldr	r0, [pc, #352]	; (800ea48 <_vfiprintf_r+0x24c>)
 800e8e8:	f7f1 fcfa 	bl	80002e0 <memchr>
 800e8ec:	9a04      	ldr	r2, [sp, #16]
 800e8ee:	b9d8      	cbnz	r0, 800e928 <_vfiprintf_r+0x12c>
 800e8f0:	06d1      	lsls	r1, r2, #27
 800e8f2:	bf44      	itt	mi
 800e8f4:	2320      	movmi	r3, #32
 800e8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8fa:	0713      	lsls	r3, r2, #28
 800e8fc:	bf44      	itt	mi
 800e8fe:	232b      	movmi	r3, #43	; 0x2b
 800e900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e904:	f89a 3000 	ldrb.w	r3, [sl]
 800e908:	2b2a      	cmp	r3, #42	; 0x2a
 800e90a:	d015      	beq.n	800e938 <_vfiprintf_r+0x13c>
 800e90c:	9a07      	ldr	r2, [sp, #28]
 800e90e:	4654      	mov	r4, sl
 800e910:	2000      	movs	r0, #0
 800e912:	f04f 0c0a 	mov.w	ip, #10
 800e916:	4621      	mov	r1, r4
 800e918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e91c:	3b30      	subs	r3, #48	; 0x30
 800e91e:	2b09      	cmp	r3, #9
 800e920:	d94e      	bls.n	800e9c0 <_vfiprintf_r+0x1c4>
 800e922:	b1b0      	cbz	r0, 800e952 <_vfiprintf_r+0x156>
 800e924:	9207      	str	r2, [sp, #28]
 800e926:	e014      	b.n	800e952 <_vfiprintf_r+0x156>
 800e928:	eba0 0308 	sub.w	r3, r0, r8
 800e92c:	fa09 f303 	lsl.w	r3, r9, r3
 800e930:	4313      	orrs	r3, r2
 800e932:	9304      	str	r3, [sp, #16]
 800e934:	46a2      	mov	sl, r4
 800e936:	e7d2      	b.n	800e8de <_vfiprintf_r+0xe2>
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	1d19      	adds	r1, r3, #4
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	9103      	str	r1, [sp, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	bfbb      	ittet	lt
 800e944:	425b      	neglt	r3, r3
 800e946:	f042 0202 	orrlt.w	r2, r2, #2
 800e94a:	9307      	strge	r3, [sp, #28]
 800e94c:	9307      	strlt	r3, [sp, #28]
 800e94e:	bfb8      	it	lt
 800e950:	9204      	strlt	r2, [sp, #16]
 800e952:	7823      	ldrb	r3, [r4, #0]
 800e954:	2b2e      	cmp	r3, #46	; 0x2e
 800e956:	d10c      	bne.n	800e972 <_vfiprintf_r+0x176>
 800e958:	7863      	ldrb	r3, [r4, #1]
 800e95a:	2b2a      	cmp	r3, #42	; 0x2a
 800e95c:	d135      	bne.n	800e9ca <_vfiprintf_r+0x1ce>
 800e95e:	9b03      	ldr	r3, [sp, #12]
 800e960:	1d1a      	adds	r2, r3, #4
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	9203      	str	r2, [sp, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	bfb8      	it	lt
 800e96a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e96e:	3402      	adds	r4, #2
 800e970:	9305      	str	r3, [sp, #20]
 800e972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea58 <_vfiprintf_r+0x25c>
 800e976:	7821      	ldrb	r1, [r4, #0]
 800e978:	2203      	movs	r2, #3
 800e97a:	4650      	mov	r0, sl
 800e97c:	f7f1 fcb0 	bl	80002e0 <memchr>
 800e980:	b140      	cbz	r0, 800e994 <_vfiprintf_r+0x198>
 800e982:	2340      	movs	r3, #64	; 0x40
 800e984:	eba0 000a 	sub.w	r0, r0, sl
 800e988:	fa03 f000 	lsl.w	r0, r3, r0
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	4303      	orrs	r3, r0
 800e990:	3401      	adds	r4, #1
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e998:	482c      	ldr	r0, [pc, #176]	; (800ea4c <_vfiprintf_r+0x250>)
 800e99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e99e:	2206      	movs	r2, #6
 800e9a0:	f7f1 fc9e 	bl	80002e0 <memchr>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d03f      	beq.n	800ea28 <_vfiprintf_r+0x22c>
 800e9a8:	4b29      	ldr	r3, [pc, #164]	; (800ea50 <_vfiprintf_r+0x254>)
 800e9aa:	bb1b      	cbnz	r3, 800e9f4 <_vfiprintf_r+0x1f8>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	3307      	adds	r3, #7
 800e9b0:	f023 0307 	bic.w	r3, r3, #7
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	9303      	str	r3, [sp, #12]
 800e9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ba:	443b      	add	r3, r7
 800e9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9be:	e767      	b.n	800e890 <_vfiprintf_r+0x94>
 800e9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	e7a5      	b.n	800e916 <_vfiprintf_r+0x11a>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	3401      	adds	r4, #1
 800e9ce:	9305      	str	r3, [sp, #20]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f04f 0c0a 	mov.w	ip, #10
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9dc:	3a30      	subs	r2, #48	; 0x30
 800e9de:	2a09      	cmp	r2, #9
 800e9e0:	d903      	bls.n	800e9ea <_vfiprintf_r+0x1ee>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d0c5      	beq.n	800e972 <_vfiprintf_r+0x176>
 800e9e6:	9105      	str	r1, [sp, #20]
 800e9e8:	e7c3      	b.n	800e972 <_vfiprintf_r+0x176>
 800e9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e7f0      	b.n	800e9d6 <_vfiprintf_r+0x1da>
 800e9f4:	ab03      	add	r3, sp, #12
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4b16      	ldr	r3, [pc, #88]	; (800ea54 <_vfiprintf_r+0x258>)
 800e9fc:	a904      	add	r1, sp, #16
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f3af 8000 	nop.w
 800ea04:	4607      	mov	r7, r0
 800ea06:	1c78      	adds	r0, r7, #1
 800ea08:	d1d6      	bne.n	800e9b8 <_vfiprintf_r+0x1bc>
 800ea0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea0c:	07d9      	lsls	r1, r3, #31
 800ea0e:	d405      	bmi.n	800ea1c <_vfiprintf_r+0x220>
 800ea10:	89ab      	ldrh	r3, [r5, #12]
 800ea12:	059a      	lsls	r2, r3, #22
 800ea14:	d402      	bmi.n	800ea1c <_vfiprintf_r+0x220>
 800ea16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea18:	f7ff fc1c 	bl	800e254 <__retarget_lock_release_recursive>
 800ea1c:	89ab      	ldrh	r3, [r5, #12]
 800ea1e:	065b      	lsls	r3, r3, #25
 800ea20:	f53f af12 	bmi.w	800e848 <_vfiprintf_r+0x4c>
 800ea24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea26:	e711      	b.n	800e84c <_vfiprintf_r+0x50>
 800ea28:	ab03      	add	r3, sp, #12
 800ea2a:	9300      	str	r3, [sp, #0]
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <_vfiprintf_r+0x258>)
 800ea30:	a904      	add	r1, sp, #16
 800ea32:	4630      	mov	r0, r6
 800ea34:	f000 f880 	bl	800eb38 <_printf_i>
 800ea38:	e7e4      	b.n	800ea04 <_vfiprintf_r+0x208>
 800ea3a:	bf00      	nop
 800ea3c:	08011a3c 	.word	0x08011a3c
 800ea40:	08011a5c 	.word	0x08011a5c
 800ea44:	08011a1c 	.word	0x08011a1c
 800ea48:	08011a7c 	.word	0x08011a7c
 800ea4c:	08011a86 	.word	0x08011a86
 800ea50:	00000000 	.word	0x00000000
 800ea54:	0800e7d7 	.word	0x0800e7d7
 800ea58:	08011a82 	.word	0x08011a82

0800ea5c <_printf_common>:
 800ea5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea60:	4616      	mov	r6, r2
 800ea62:	4699      	mov	r9, r3
 800ea64:	688a      	ldr	r2, [r1, #8]
 800ea66:	690b      	ldr	r3, [r1, #16]
 800ea68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	bfb8      	it	lt
 800ea70:	4613      	movlt	r3, r2
 800ea72:	6033      	str	r3, [r6, #0]
 800ea74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea78:	4607      	mov	r7, r0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	b10a      	cbz	r2, 800ea82 <_printf_common+0x26>
 800ea7e:	3301      	adds	r3, #1
 800ea80:	6033      	str	r3, [r6, #0]
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	0699      	lsls	r1, r3, #26
 800ea86:	bf42      	ittt	mi
 800ea88:	6833      	ldrmi	r3, [r6, #0]
 800ea8a:	3302      	addmi	r3, #2
 800ea8c:	6033      	strmi	r3, [r6, #0]
 800ea8e:	6825      	ldr	r5, [r4, #0]
 800ea90:	f015 0506 	ands.w	r5, r5, #6
 800ea94:	d106      	bne.n	800eaa4 <_printf_common+0x48>
 800ea96:	f104 0a19 	add.w	sl, r4, #25
 800ea9a:	68e3      	ldr	r3, [r4, #12]
 800ea9c:	6832      	ldr	r2, [r6, #0]
 800ea9e:	1a9b      	subs	r3, r3, r2
 800eaa0:	42ab      	cmp	r3, r5
 800eaa2:	dc26      	bgt.n	800eaf2 <_printf_common+0x96>
 800eaa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eaa8:	1e13      	subs	r3, r2, #0
 800eaaa:	6822      	ldr	r2, [r4, #0]
 800eaac:	bf18      	it	ne
 800eaae:	2301      	movne	r3, #1
 800eab0:	0692      	lsls	r2, r2, #26
 800eab2:	d42b      	bmi.n	800eb0c <_printf_common+0xb0>
 800eab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eab8:	4649      	mov	r1, r9
 800eaba:	4638      	mov	r0, r7
 800eabc:	47c0      	blx	r8
 800eabe:	3001      	adds	r0, #1
 800eac0:	d01e      	beq.n	800eb00 <_printf_common+0xa4>
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	68e5      	ldr	r5, [r4, #12]
 800eac6:	6832      	ldr	r2, [r6, #0]
 800eac8:	f003 0306 	and.w	r3, r3, #6
 800eacc:	2b04      	cmp	r3, #4
 800eace:	bf08      	it	eq
 800ead0:	1aad      	subeq	r5, r5, r2
 800ead2:	68a3      	ldr	r3, [r4, #8]
 800ead4:	6922      	ldr	r2, [r4, #16]
 800ead6:	bf0c      	ite	eq
 800ead8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eadc:	2500      	movne	r5, #0
 800eade:	4293      	cmp	r3, r2
 800eae0:	bfc4      	itt	gt
 800eae2:	1a9b      	subgt	r3, r3, r2
 800eae4:	18ed      	addgt	r5, r5, r3
 800eae6:	2600      	movs	r6, #0
 800eae8:	341a      	adds	r4, #26
 800eaea:	42b5      	cmp	r5, r6
 800eaec:	d11a      	bne.n	800eb24 <_printf_common+0xc8>
 800eaee:	2000      	movs	r0, #0
 800eaf0:	e008      	b.n	800eb04 <_printf_common+0xa8>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	4638      	mov	r0, r7
 800eafa:	47c0      	blx	r8
 800eafc:	3001      	adds	r0, #1
 800eafe:	d103      	bne.n	800eb08 <_printf_common+0xac>
 800eb00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb08:	3501      	adds	r5, #1
 800eb0a:	e7c6      	b.n	800ea9a <_printf_common+0x3e>
 800eb0c:	18e1      	adds	r1, r4, r3
 800eb0e:	1c5a      	adds	r2, r3, #1
 800eb10:	2030      	movs	r0, #48	; 0x30
 800eb12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb16:	4422      	add	r2, r4
 800eb18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb20:	3302      	adds	r3, #2
 800eb22:	e7c7      	b.n	800eab4 <_printf_common+0x58>
 800eb24:	2301      	movs	r3, #1
 800eb26:	4622      	mov	r2, r4
 800eb28:	4649      	mov	r1, r9
 800eb2a:	4638      	mov	r0, r7
 800eb2c:	47c0      	blx	r8
 800eb2e:	3001      	adds	r0, #1
 800eb30:	d0e6      	beq.n	800eb00 <_printf_common+0xa4>
 800eb32:	3601      	adds	r6, #1
 800eb34:	e7d9      	b.n	800eaea <_printf_common+0x8e>
	...

0800eb38 <_printf_i>:
 800eb38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb3c:	7e0f      	ldrb	r7, [r1, #24]
 800eb3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb40:	2f78      	cmp	r7, #120	; 0x78
 800eb42:	4691      	mov	r9, r2
 800eb44:	4680      	mov	r8, r0
 800eb46:	460c      	mov	r4, r1
 800eb48:	469a      	mov	sl, r3
 800eb4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb4e:	d807      	bhi.n	800eb60 <_printf_i+0x28>
 800eb50:	2f62      	cmp	r7, #98	; 0x62
 800eb52:	d80a      	bhi.n	800eb6a <_printf_i+0x32>
 800eb54:	2f00      	cmp	r7, #0
 800eb56:	f000 80d8 	beq.w	800ed0a <_printf_i+0x1d2>
 800eb5a:	2f58      	cmp	r7, #88	; 0x58
 800eb5c:	f000 80a3 	beq.w	800eca6 <_printf_i+0x16e>
 800eb60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb68:	e03a      	b.n	800ebe0 <_printf_i+0xa8>
 800eb6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb6e:	2b15      	cmp	r3, #21
 800eb70:	d8f6      	bhi.n	800eb60 <_printf_i+0x28>
 800eb72:	a101      	add	r1, pc, #4	; (adr r1, 800eb78 <_printf_i+0x40>)
 800eb74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb78:	0800ebd1 	.word	0x0800ebd1
 800eb7c:	0800ebe5 	.word	0x0800ebe5
 800eb80:	0800eb61 	.word	0x0800eb61
 800eb84:	0800eb61 	.word	0x0800eb61
 800eb88:	0800eb61 	.word	0x0800eb61
 800eb8c:	0800eb61 	.word	0x0800eb61
 800eb90:	0800ebe5 	.word	0x0800ebe5
 800eb94:	0800eb61 	.word	0x0800eb61
 800eb98:	0800eb61 	.word	0x0800eb61
 800eb9c:	0800eb61 	.word	0x0800eb61
 800eba0:	0800eb61 	.word	0x0800eb61
 800eba4:	0800ecf1 	.word	0x0800ecf1
 800eba8:	0800ec15 	.word	0x0800ec15
 800ebac:	0800ecd3 	.word	0x0800ecd3
 800ebb0:	0800eb61 	.word	0x0800eb61
 800ebb4:	0800eb61 	.word	0x0800eb61
 800ebb8:	0800ed13 	.word	0x0800ed13
 800ebbc:	0800eb61 	.word	0x0800eb61
 800ebc0:	0800ec15 	.word	0x0800ec15
 800ebc4:	0800eb61 	.word	0x0800eb61
 800ebc8:	0800eb61 	.word	0x0800eb61
 800ebcc:	0800ecdb 	.word	0x0800ecdb
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	1d1a      	adds	r2, r3, #4
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	602a      	str	r2, [r5, #0]
 800ebd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e0a3      	b.n	800ed2c <_printf_i+0x1f4>
 800ebe4:	6820      	ldr	r0, [r4, #0]
 800ebe6:	6829      	ldr	r1, [r5, #0]
 800ebe8:	0606      	lsls	r6, r0, #24
 800ebea:	f101 0304 	add.w	r3, r1, #4
 800ebee:	d50a      	bpl.n	800ec06 <_printf_i+0xce>
 800ebf0:	680e      	ldr	r6, [r1, #0]
 800ebf2:	602b      	str	r3, [r5, #0]
 800ebf4:	2e00      	cmp	r6, #0
 800ebf6:	da03      	bge.n	800ec00 <_printf_i+0xc8>
 800ebf8:	232d      	movs	r3, #45	; 0x2d
 800ebfa:	4276      	negs	r6, r6
 800ebfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec00:	485e      	ldr	r0, [pc, #376]	; (800ed7c <_printf_i+0x244>)
 800ec02:	230a      	movs	r3, #10
 800ec04:	e019      	b.n	800ec3a <_printf_i+0x102>
 800ec06:	680e      	ldr	r6, [r1, #0]
 800ec08:	602b      	str	r3, [r5, #0]
 800ec0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec0e:	bf18      	it	ne
 800ec10:	b236      	sxthne	r6, r6
 800ec12:	e7ef      	b.n	800ebf4 <_printf_i+0xbc>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	6820      	ldr	r0, [r4, #0]
 800ec18:	1d19      	adds	r1, r3, #4
 800ec1a:	6029      	str	r1, [r5, #0]
 800ec1c:	0601      	lsls	r1, r0, #24
 800ec1e:	d501      	bpl.n	800ec24 <_printf_i+0xec>
 800ec20:	681e      	ldr	r6, [r3, #0]
 800ec22:	e002      	b.n	800ec2a <_printf_i+0xf2>
 800ec24:	0646      	lsls	r6, r0, #25
 800ec26:	d5fb      	bpl.n	800ec20 <_printf_i+0xe8>
 800ec28:	881e      	ldrh	r6, [r3, #0]
 800ec2a:	4854      	ldr	r0, [pc, #336]	; (800ed7c <_printf_i+0x244>)
 800ec2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ec2e:	bf0c      	ite	eq
 800ec30:	2308      	moveq	r3, #8
 800ec32:	230a      	movne	r3, #10
 800ec34:	2100      	movs	r1, #0
 800ec36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec3a:	6865      	ldr	r5, [r4, #4]
 800ec3c:	60a5      	str	r5, [r4, #8]
 800ec3e:	2d00      	cmp	r5, #0
 800ec40:	bfa2      	ittt	ge
 800ec42:	6821      	ldrge	r1, [r4, #0]
 800ec44:	f021 0104 	bicge.w	r1, r1, #4
 800ec48:	6021      	strge	r1, [r4, #0]
 800ec4a:	b90e      	cbnz	r6, 800ec50 <_printf_i+0x118>
 800ec4c:	2d00      	cmp	r5, #0
 800ec4e:	d04d      	beq.n	800ecec <_printf_i+0x1b4>
 800ec50:	4615      	mov	r5, r2
 800ec52:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec56:	fb03 6711 	mls	r7, r3, r1, r6
 800ec5a:	5dc7      	ldrb	r7, [r0, r7]
 800ec5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec60:	4637      	mov	r7, r6
 800ec62:	42bb      	cmp	r3, r7
 800ec64:	460e      	mov	r6, r1
 800ec66:	d9f4      	bls.n	800ec52 <_printf_i+0x11a>
 800ec68:	2b08      	cmp	r3, #8
 800ec6a:	d10b      	bne.n	800ec84 <_printf_i+0x14c>
 800ec6c:	6823      	ldr	r3, [r4, #0]
 800ec6e:	07de      	lsls	r6, r3, #31
 800ec70:	d508      	bpl.n	800ec84 <_printf_i+0x14c>
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	6861      	ldr	r1, [r4, #4]
 800ec76:	4299      	cmp	r1, r3
 800ec78:	bfde      	ittt	le
 800ec7a:	2330      	movle	r3, #48	; 0x30
 800ec7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ec84:	1b52      	subs	r2, r2, r5
 800ec86:	6122      	str	r2, [r4, #16]
 800ec88:	f8cd a000 	str.w	sl, [sp]
 800ec8c:	464b      	mov	r3, r9
 800ec8e:	aa03      	add	r2, sp, #12
 800ec90:	4621      	mov	r1, r4
 800ec92:	4640      	mov	r0, r8
 800ec94:	f7ff fee2 	bl	800ea5c <_printf_common>
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d14c      	bne.n	800ed36 <_printf_i+0x1fe>
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eca0:	b004      	add	sp, #16
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	4835      	ldr	r0, [pc, #212]	; (800ed7c <_printf_i+0x244>)
 800eca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ecac:	6829      	ldr	r1, [r5, #0]
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ecb4:	6029      	str	r1, [r5, #0]
 800ecb6:	061d      	lsls	r5, r3, #24
 800ecb8:	d514      	bpl.n	800ece4 <_printf_i+0x1ac>
 800ecba:	07df      	lsls	r7, r3, #31
 800ecbc:	bf44      	itt	mi
 800ecbe:	f043 0320 	orrmi.w	r3, r3, #32
 800ecc2:	6023      	strmi	r3, [r4, #0]
 800ecc4:	b91e      	cbnz	r6, 800ecce <_printf_i+0x196>
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	f023 0320 	bic.w	r3, r3, #32
 800eccc:	6023      	str	r3, [r4, #0]
 800ecce:	2310      	movs	r3, #16
 800ecd0:	e7b0      	b.n	800ec34 <_printf_i+0xfc>
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	f043 0320 	orr.w	r3, r3, #32
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	2378      	movs	r3, #120	; 0x78
 800ecdc:	4828      	ldr	r0, [pc, #160]	; (800ed80 <_printf_i+0x248>)
 800ecde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ece2:	e7e3      	b.n	800ecac <_printf_i+0x174>
 800ece4:	0659      	lsls	r1, r3, #25
 800ece6:	bf48      	it	mi
 800ece8:	b2b6      	uxthmi	r6, r6
 800ecea:	e7e6      	b.n	800ecba <_printf_i+0x182>
 800ecec:	4615      	mov	r5, r2
 800ecee:	e7bb      	b.n	800ec68 <_printf_i+0x130>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	6826      	ldr	r6, [r4, #0]
 800ecf4:	6961      	ldr	r1, [r4, #20]
 800ecf6:	1d18      	adds	r0, r3, #4
 800ecf8:	6028      	str	r0, [r5, #0]
 800ecfa:	0635      	lsls	r5, r6, #24
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	d501      	bpl.n	800ed04 <_printf_i+0x1cc>
 800ed00:	6019      	str	r1, [r3, #0]
 800ed02:	e002      	b.n	800ed0a <_printf_i+0x1d2>
 800ed04:	0670      	lsls	r0, r6, #25
 800ed06:	d5fb      	bpl.n	800ed00 <_printf_i+0x1c8>
 800ed08:	8019      	strh	r1, [r3, #0]
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	4615      	mov	r5, r2
 800ed10:	e7ba      	b.n	800ec88 <_printf_i+0x150>
 800ed12:	682b      	ldr	r3, [r5, #0]
 800ed14:	1d1a      	adds	r2, r3, #4
 800ed16:	602a      	str	r2, [r5, #0]
 800ed18:	681d      	ldr	r5, [r3, #0]
 800ed1a:	6862      	ldr	r2, [r4, #4]
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f7f1 fade 	bl	80002e0 <memchr>
 800ed24:	b108      	cbz	r0, 800ed2a <_printf_i+0x1f2>
 800ed26:	1b40      	subs	r0, r0, r5
 800ed28:	6060      	str	r0, [r4, #4]
 800ed2a:	6863      	ldr	r3, [r4, #4]
 800ed2c:	6123      	str	r3, [r4, #16]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed34:	e7a8      	b.n	800ec88 <_printf_i+0x150>
 800ed36:	6923      	ldr	r3, [r4, #16]
 800ed38:	462a      	mov	r2, r5
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	47d0      	blx	sl
 800ed40:	3001      	adds	r0, #1
 800ed42:	d0ab      	beq.n	800ec9c <_printf_i+0x164>
 800ed44:	6823      	ldr	r3, [r4, #0]
 800ed46:	079b      	lsls	r3, r3, #30
 800ed48:	d413      	bmi.n	800ed72 <_printf_i+0x23a>
 800ed4a:	68e0      	ldr	r0, [r4, #12]
 800ed4c:	9b03      	ldr	r3, [sp, #12]
 800ed4e:	4298      	cmp	r0, r3
 800ed50:	bfb8      	it	lt
 800ed52:	4618      	movlt	r0, r3
 800ed54:	e7a4      	b.n	800eca0 <_printf_i+0x168>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4632      	mov	r2, r6
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	4640      	mov	r0, r8
 800ed5e:	47d0      	blx	sl
 800ed60:	3001      	adds	r0, #1
 800ed62:	d09b      	beq.n	800ec9c <_printf_i+0x164>
 800ed64:	3501      	adds	r5, #1
 800ed66:	68e3      	ldr	r3, [r4, #12]
 800ed68:	9903      	ldr	r1, [sp, #12]
 800ed6a:	1a5b      	subs	r3, r3, r1
 800ed6c:	42ab      	cmp	r3, r5
 800ed6e:	dcf2      	bgt.n	800ed56 <_printf_i+0x21e>
 800ed70:	e7eb      	b.n	800ed4a <_printf_i+0x212>
 800ed72:	2500      	movs	r5, #0
 800ed74:	f104 0619 	add.w	r6, r4, #25
 800ed78:	e7f5      	b.n	800ed66 <_printf_i+0x22e>
 800ed7a:	bf00      	nop
 800ed7c:	08011a8d 	.word	0x08011a8d
 800ed80:	08011a9e 	.word	0x08011a9e

0800ed84 <_sbrk_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d06      	ldr	r5, [pc, #24]	; (800eda0 <_sbrk_r+0x1c>)
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	602b      	str	r3, [r5, #0]
 800ed90:	f7f2 fb98 	bl	80014c4 <_sbrk>
 800ed94:	1c43      	adds	r3, r0, #1
 800ed96:	d102      	bne.n	800ed9e <_sbrk_r+0x1a>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	b103      	cbz	r3, 800ed9e <_sbrk_r+0x1a>
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	24001644 	.word	0x24001644

0800eda4 <__sread>:
 800eda4:	b510      	push	{r4, lr}
 800eda6:	460c      	mov	r4, r1
 800eda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edac:	f000 f9b2 	bl	800f114 <_read_r>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	bfab      	itete	ge
 800edb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edb6:	89a3      	ldrhlt	r3, [r4, #12]
 800edb8:	181b      	addge	r3, r3, r0
 800edba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edbe:	bfac      	ite	ge
 800edc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800edc2:	81a3      	strhlt	r3, [r4, #12]
 800edc4:	bd10      	pop	{r4, pc}

0800edc6 <__swrite>:
 800edc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edca:	461f      	mov	r7, r3
 800edcc:	898b      	ldrh	r3, [r1, #12]
 800edce:	05db      	lsls	r3, r3, #23
 800edd0:	4605      	mov	r5, r0
 800edd2:	460c      	mov	r4, r1
 800edd4:	4616      	mov	r6, r2
 800edd6:	d505      	bpl.n	800ede4 <__swrite+0x1e>
 800edd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eddc:	2302      	movs	r3, #2
 800edde:	2200      	movs	r2, #0
 800ede0:	f000 f930 	bl	800f044 <_lseek_r>
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	4632      	mov	r2, r6
 800edf2:	463b      	mov	r3, r7
 800edf4:	4628      	mov	r0, r5
 800edf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edfa:	f000 b869 	b.w	800eed0 <_write_r>

0800edfe <__sseek>:
 800edfe:	b510      	push	{r4, lr}
 800ee00:	460c      	mov	r4, r1
 800ee02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee06:	f000 f91d 	bl	800f044 <_lseek_r>
 800ee0a:	1c43      	adds	r3, r0, #1
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	bf15      	itete	ne
 800ee10:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee1a:	81a3      	strheq	r3, [r4, #12]
 800ee1c:	bf18      	it	ne
 800ee1e:	81a3      	strhne	r3, [r4, #12]
 800ee20:	bd10      	pop	{r4, pc}

0800ee22 <__sclose>:
 800ee22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee26:	f000 b8db 	b.w	800efe0 <_close_r>
	...

0800ee2c <__swbuf_r>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	460e      	mov	r6, r1
 800ee30:	4614      	mov	r4, r2
 800ee32:	4605      	mov	r5, r0
 800ee34:	b118      	cbz	r0, 800ee3e <__swbuf_r+0x12>
 800ee36:	6983      	ldr	r3, [r0, #24]
 800ee38:	b90b      	cbnz	r3, 800ee3e <__swbuf_r+0x12>
 800ee3a:	f7ff f947 	bl	800e0cc <__sinit>
 800ee3e:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <__swbuf_r+0x98>)
 800ee40:	429c      	cmp	r4, r3
 800ee42:	d12b      	bne.n	800ee9c <__swbuf_r+0x70>
 800ee44:	686c      	ldr	r4, [r5, #4]
 800ee46:	69a3      	ldr	r3, [r4, #24]
 800ee48:	60a3      	str	r3, [r4, #8]
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	071a      	lsls	r2, r3, #28
 800ee4e:	d52f      	bpl.n	800eeb0 <__swbuf_r+0x84>
 800ee50:	6923      	ldr	r3, [r4, #16]
 800ee52:	b36b      	cbz	r3, 800eeb0 <__swbuf_r+0x84>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	6820      	ldr	r0, [r4, #0]
 800ee58:	1ac0      	subs	r0, r0, r3
 800ee5a:	6963      	ldr	r3, [r4, #20]
 800ee5c:	b2f6      	uxtb	r6, r6
 800ee5e:	4283      	cmp	r3, r0
 800ee60:	4637      	mov	r7, r6
 800ee62:	dc04      	bgt.n	800ee6e <__swbuf_r+0x42>
 800ee64:	4621      	mov	r1, r4
 800ee66:	4628      	mov	r0, r5
 800ee68:	f7ff f89c 	bl	800dfa4 <_fflush_r>
 800ee6c:	bb30      	cbnz	r0, 800eebc <__swbuf_r+0x90>
 800ee6e:	68a3      	ldr	r3, [r4, #8]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	60a3      	str	r3, [r4, #8]
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	6022      	str	r2, [r4, #0]
 800ee7a:	701e      	strb	r6, [r3, #0]
 800ee7c:	6963      	ldr	r3, [r4, #20]
 800ee7e:	3001      	adds	r0, #1
 800ee80:	4283      	cmp	r3, r0
 800ee82:	d004      	beq.n	800ee8e <__swbuf_r+0x62>
 800ee84:	89a3      	ldrh	r3, [r4, #12]
 800ee86:	07db      	lsls	r3, r3, #31
 800ee88:	d506      	bpl.n	800ee98 <__swbuf_r+0x6c>
 800ee8a:	2e0a      	cmp	r6, #10
 800ee8c:	d104      	bne.n	800ee98 <__swbuf_r+0x6c>
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4628      	mov	r0, r5
 800ee92:	f7ff f887 	bl	800dfa4 <_fflush_r>
 800ee96:	b988      	cbnz	r0, 800eebc <__swbuf_r+0x90>
 800ee98:	4638      	mov	r0, r7
 800ee9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee9c:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <__swbuf_r+0x9c>)
 800ee9e:	429c      	cmp	r4, r3
 800eea0:	d101      	bne.n	800eea6 <__swbuf_r+0x7a>
 800eea2:	68ac      	ldr	r4, [r5, #8]
 800eea4:	e7cf      	b.n	800ee46 <__swbuf_r+0x1a>
 800eea6:	4b09      	ldr	r3, [pc, #36]	; (800eecc <__swbuf_r+0xa0>)
 800eea8:	429c      	cmp	r4, r3
 800eeaa:	bf08      	it	eq
 800eeac:	68ec      	ldreq	r4, [r5, #12]
 800eeae:	e7ca      	b.n	800ee46 <__swbuf_r+0x1a>
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f000 f81e 	bl	800eef4 <__swsetup_r>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d0cb      	beq.n	800ee54 <__swbuf_r+0x28>
 800eebc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eec0:	e7ea      	b.n	800ee98 <__swbuf_r+0x6c>
 800eec2:	bf00      	nop
 800eec4:	08011a3c 	.word	0x08011a3c
 800eec8:	08011a5c 	.word	0x08011a5c
 800eecc:	08011a1c 	.word	0x08011a1c

0800eed0 <_write_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d07      	ldr	r5, [pc, #28]	; (800eef0 <_write_r+0x20>)
 800eed4:	4604      	mov	r4, r0
 800eed6:	4608      	mov	r0, r1
 800eed8:	4611      	mov	r1, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	f7f1 fc28 	bl	8000734 <_write>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_write_r+0x1e>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_write_r+0x1e>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	24001644 	.word	0x24001644

0800eef4 <__swsetup_r>:
 800eef4:	4b32      	ldr	r3, [pc, #200]	; (800efc0 <__swsetup_r+0xcc>)
 800eef6:	b570      	push	{r4, r5, r6, lr}
 800eef8:	681d      	ldr	r5, [r3, #0]
 800eefa:	4606      	mov	r6, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	b125      	cbz	r5, 800ef0a <__swsetup_r+0x16>
 800ef00:	69ab      	ldr	r3, [r5, #24]
 800ef02:	b913      	cbnz	r3, 800ef0a <__swsetup_r+0x16>
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7ff f8e1 	bl	800e0cc <__sinit>
 800ef0a:	4b2e      	ldr	r3, [pc, #184]	; (800efc4 <__swsetup_r+0xd0>)
 800ef0c:	429c      	cmp	r4, r3
 800ef0e:	d10f      	bne.n	800ef30 <__swsetup_r+0x3c>
 800ef10:	686c      	ldr	r4, [r5, #4]
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef18:	0719      	lsls	r1, r3, #28
 800ef1a:	d42c      	bmi.n	800ef76 <__swsetup_r+0x82>
 800ef1c:	06dd      	lsls	r5, r3, #27
 800ef1e:	d411      	bmi.n	800ef44 <__swsetup_r+0x50>
 800ef20:	2309      	movs	r3, #9
 800ef22:	6033      	str	r3, [r6, #0]
 800ef24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef28:	81a3      	strh	r3, [r4, #12]
 800ef2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef2e:	e03e      	b.n	800efae <__swsetup_r+0xba>
 800ef30:	4b25      	ldr	r3, [pc, #148]	; (800efc8 <__swsetup_r+0xd4>)
 800ef32:	429c      	cmp	r4, r3
 800ef34:	d101      	bne.n	800ef3a <__swsetup_r+0x46>
 800ef36:	68ac      	ldr	r4, [r5, #8]
 800ef38:	e7eb      	b.n	800ef12 <__swsetup_r+0x1e>
 800ef3a:	4b24      	ldr	r3, [pc, #144]	; (800efcc <__swsetup_r+0xd8>)
 800ef3c:	429c      	cmp	r4, r3
 800ef3e:	bf08      	it	eq
 800ef40:	68ec      	ldreq	r4, [r5, #12]
 800ef42:	e7e6      	b.n	800ef12 <__swsetup_r+0x1e>
 800ef44:	0758      	lsls	r0, r3, #29
 800ef46:	d512      	bpl.n	800ef6e <__swsetup_r+0x7a>
 800ef48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef4a:	b141      	cbz	r1, 800ef5e <__swsetup_r+0x6a>
 800ef4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef50:	4299      	cmp	r1, r3
 800ef52:	d002      	beq.n	800ef5a <__swsetup_r+0x66>
 800ef54:	4630      	mov	r0, r6
 800ef56:	f7ff f9eb 	bl	800e330 <_free_r>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef5e:	89a3      	ldrh	r3, [r4, #12]
 800ef60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef64:	81a3      	strh	r3, [r4, #12]
 800ef66:	2300      	movs	r3, #0
 800ef68:	6063      	str	r3, [r4, #4]
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	f043 0308 	orr.w	r3, r3, #8
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	6923      	ldr	r3, [r4, #16]
 800ef78:	b94b      	cbnz	r3, 800ef8e <__swsetup_r+0x9a>
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef84:	d003      	beq.n	800ef8e <__swsetup_r+0x9a>
 800ef86:	4621      	mov	r1, r4
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f7ff f989 	bl	800e2a0 <__smakebuf_r>
 800ef8e:	89a0      	ldrh	r0, [r4, #12]
 800ef90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef94:	f010 0301 	ands.w	r3, r0, #1
 800ef98:	d00a      	beq.n	800efb0 <__swsetup_r+0xbc>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	60a3      	str	r3, [r4, #8]
 800ef9e:	6963      	ldr	r3, [r4, #20]
 800efa0:	425b      	negs	r3, r3
 800efa2:	61a3      	str	r3, [r4, #24]
 800efa4:	6923      	ldr	r3, [r4, #16]
 800efa6:	b943      	cbnz	r3, 800efba <__swsetup_r+0xc6>
 800efa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efac:	d1ba      	bne.n	800ef24 <__swsetup_r+0x30>
 800efae:	bd70      	pop	{r4, r5, r6, pc}
 800efb0:	0781      	lsls	r1, r0, #30
 800efb2:	bf58      	it	pl
 800efb4:	6963      	ldrpl	r3, [r4, #20]
 800efb6:	60a3      	str	r3, [r4, #8]
 800efb8:	e7f4      	b.n	800efa4 <__swsetup_r+0xb0>
 800efba:	2000      	movs	r0, #0
 800efbc:	e7f7      	b.n	800efae <__swsetup_r+0xba>
 800efbe:	bf00      	nop
 800efc0:	2400005c 	.word	0x2400005c
 800efc4:	08011a3c 	.word	0x08011a3c
 800efc8:	08011a5c 	.word	0x08011a5c
 800efcc:	08011a1c 	.word	0x08011a1c

0800efd0 <abort>:
 800efd0:	b508      	push	{r3, lr}
 800efd2:	2006      	movs	r0, #6
 800efd4:	f000 f8d8 	bl	800f188 <raise>
 800efd8:	2001      	movs	r0, #1
 800efda:	f7f2 fa68 	bl	80014ae <_exit>
	...

0800efe0 <_close_r>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	4d06      	ldr	r5, [pc, #24]	; (800effc <_close_r+0x1c>)
 800efe4:	2300      	movs	r3, #0
 800efe6:	4604      	mov	r4, r0
 800efe8:	4608      	mov	r0, r1
 800efea:	602b      	str	r3, [r5, #0]
 800efec:	f7f1 fb36 	bl	800065c <_close>
 800eff0:	1c43      	adds	r3, r0, #1
 800eff2:	d102      	bne.n	800effa <_close_r+0x1a>
 800eff4:	682b      	ldr	r3, [r5, #0]
 800eff6:	b103      	cbz	r3, 800effa <_close_r+0x1a>
 800eff8:	6023      	str	r3, [r4, #0]
 800effa:	bd38      	pop	{r3, r4, r5, pc}
 800effc:	24001644 	.word	0x24001644

0800f000 <_fstat_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4d07      	ldr	r5, [pc, #28]	; (800f020 <_fstat_r+0x20>)
 800f004:	2300      	movs	r3, #0
 800f006:	4604      	mov	r4, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	4611      	mov	r1, r2
 800f00c:	602b      	str	r3, [r5, #0]
 800f00e:	f7f1 fb4d 	bl	80006ac <_fstat>
 800f012:	1c43      	adds	r3, r0, #1
 800f014:	d102      	bne.n	800f01c <_fstat_r+0x1c>
 800f016:	682b      	ldr	r3, [r5, #0]
 800f018:	b103      	cbz	r3, 800f01c <_fstat_r+0x1c>
 800f01a:	6023      	str	r3, [r4, #0]
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	24001644 	.word	0x24001644

0800f024 <_isatty_r>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4d06      	ldr	r5, [pc, #24]	; (800f040 <_isatty_r+0x1c>)
 800f028:	2300      	movs	r3, #0
 800f02a:	4604      	mov	r4, r0
 800f02c:	4608      	mov	r0, r1
 800f02e:	602b      	str	r3, [r5, #0]
 800f030:	f7f1 fafe 	bl	8000630 <_isatty>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d102      	bne.n	800f03e <_isatty_r+0x1a>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	b103      	cbz	r3, 800f03e <_isatty_r+0x1a>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	24001644 	.word	0x24001644

0800f044 <_lseek_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4d07      	ldr	r5, [pc, #28]	; (800f064 <_lseek_r+0x20>)
 800f048:	4604      	mov	r4, r0
 800f04a:	4608      	mov	r0, r1
 800f04c:	4611      	mov	r1, r2
 800f04e:	2200      	movs	r2, #0
 800f050:	602a      	str	r2, [r5, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	f7f1 fb19 	bl	800068a <_lseek>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_lseek_r+0x1e>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_lseek_r+0x1e>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	24001644 	.word	0x24001644

0800f068 <memmove>:
 800f068:	4288      	cmp	r0, r1
 800f06a:	b510      	push	{r4, lr}
 800f06c:	eb01 0402 	add.w	r4, r1, r2
 800f070:	d902      	bls.n	800f078 <memmove+0x10>
 800f072:	4284      	cmp	r4, r0
 800f074:	4623      	mov	r3, r4
 800f076:	d807      	bhi.n	800f088 <memmove+0x20>
 800f078:	1e43      	subs	r3, r0, #1
 800f07a:	42a1      	cmp	r1, r4
 800f07c:	d008      	beq.n	800f090 <memmove+0x28>
 800f07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f082:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f086:	e7f8      	b.n	800f07a <memmove+0x12>
 800f088:	4402      	add	r2, r0
 800f08a:	4601      	mov	r1, r0
 800f08c:	428a      	cmp	r2, r1
 800f08e:	d100      	bne.n	800f092 <memmove+0x2a>
 800f090:	bd10      	pop	{r4, pc}
 800f092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f09a:	e7f7      	b.n	800f08c <memmove+0x24>

0800f09c <__malloc_lock>:
 800f09c:	4801      	ldr	r0, [pc, #4]	; (800f0a4 <__malloc_lock+0x8>)
 800f09e:	f7ff b8d8 	b.w	800e252 <__retarget_lock_acquire_recursive>
 800f0a2:	bf00      	nop
 800f0a4:	24001638 	.word	0x24001638

0800f0a8 <__malloc_unlock>:
 800f0a8:	4801      	ldr	r0, [pc, #4]	; (800f0b0 <__malloc_unlock+0x8>)
 800f0aa:	f7ff b8d3 	b.w	800e254 <__retarget_lock_release_recursive>
 800f0ae:	bf00      	nop
 800f0b0:	24001638 	.word	0x24001638

0800f0b4 <_realloc_r>:
 800f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b8:	4680      	mov	r8, r0
 800f0ba:	4614      	mov	r4, r2
 800f0bc:	460e      	mov	r6, r1
 800f0be:	b921      	cbnz	r1, 800f0ca <_realloc_r+0x16>
 800f0c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	f7ff b99f 	b.w	800e408 <_malloc_r>
 800f0ca:	b92a      	cbnz	r2, 800f0d8 <_realloc_r+0x24>
 800f0cc:	f7ff f930 	bl	800e330 <_free_r>
 800f0d0:	4625      	mov	r5, r4
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d8:	f000 f872 	bl	800f1c0 <_malloc_usable_size_r>
 800f0dc:	4284      	cmp	r4, r0
 800f0de:	4607      	mov	r7, r0
 800f0e0:	d802      	bhi.n	800f0e8 <_realloc_r+0x34>
 800f0e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0e6:	d812      	bhi.n	800f10e <_realloc_r+0x5a>
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f7ff f98c 	bl	800e408 <_malloc_r>
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d0ed      	beq.n	800f0d2 <_realloc_r+0x1e>
 800f0f6:	42bc      	cmp	r4, r7
 800f0f8:	4622      	mov	r2, r4
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	bf28      	it	cs
 800f0fe:	463a      	movcs	r2, r7
 800f100:	f7fe fdf0 	bl	800dce4 <memcpy>
 800f104:	4631      	mov	r1, r6
 800f106:	4640      	mov	r0, r8
 800f108:	f7ff f912 	bl	800e330 <_free_r>
 800f10c:	e7e1      	b.n	800f0d2 <_realloc_r+0x1e>
 800f10e:	4635      	mov	r5, r6
 800f110:	e7df      	b.n	800f0d2 <_realloc_r+0x1e>
	...

0800f114 <_read_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d07      	ldr	r5, [pc, #28]	; (800f134 <_read_r+0x20>)
 800f118:	4604      	mov	r4, r0
 800f11a:	4608      	mov	r0, r1
 800f11c:	4611      	mov	r1, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	602a      	str	r2, [r5, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	f7f1 fade 	bl	80006e4 <_read>
 800f128:	1c43      	adds	r3, r0, #1
 800f12a:	d102      	bne.n	800f132 <_read_r+0x1e>
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	b103      	cbz	r3, 800f132 <_read_r+0x1e>
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	24001644 	.word	0x24001644

0800f138 <_raise_r>:
 800f138:	291f      	cmp	r1, #31
 800f13a:	b538      	push	{r3, r4, r5, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	d904      	bls.n	800f14c <_raise_r+0x14>
 800f142:	2316      	movs	r3, #22
 800f144:	6003      	str	r3, [r0, #0]
 800f146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f14a:	bd38      	pop	{r3, r4, r5, pc}
 800f14c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f14e:	b112      	cbz	r2, 800f156 <_raise_r+0x1e>
 800f150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f154:	b94b      	cbnz	r3, 800f16a <_raise_r+0x32>
 800f156:	4620      	mov	r0, r4
 800f158:	f000 f830 	bl	800f1bc <_getpid_r>
 800f15c:	462a      	mov	r2, r5
 800f15e:	4601      	mov	r1, r0
 800f160:	4620      	mov	r0, r4
 800f162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f166:	f000 b817 	b.w	800f198 <_kill_r>
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d00a      	beq.n	800f184 <_raise_r+0x4c>
 800f16e:	1c59      	adds	r1, r3, #1
 800f170:	d103      	bne.n	800f17a <_raise_r+0x42>
 800f172:	2316      	movs	r3, #22
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	2001      	movs	r0, #1
 800f178:	e7e7      	b.n	800f14a <_raise_r+0x12>
 800f17a:	2400      	movs	r4, #0
 800f17c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f180:	4628      	mov	r0, r5
 800f182:	4798      	blx	r3
 800f184:	2000      	movs	r0, #0
 800f186:	e7e0      	b.n	800f14a <_raise_r+0x12>

0800f188 <raise>:
 800f188:	4b02      	ldr	r3, [pc, #8]	; (800f194 <raise+0xc>)
 800f18a:	4601      	mov	r1, r0
 800f18c:	6818      	ldr	r0, [r3, #0]
 800f18e:	f7ff bfd3 	b.w	800f138 <_raise_r>
 800f192:	bf00      	nop
 800f194:	2400005c 	.word	0x2400005c

0800f198 <_kill_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d07      	ldr	r5, [pc, #28]	; (800f1b8 <_kill_r+0x20>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	602b      	str	r3, [r5, #0]
 800f1a6:	f7f2 f972 	bl	800148e <_kill>
 800f1aa:	1c43      	adds	r3, r0, #1
 800f1ac:	d102      	bne.n	800f1b4 <_kill_r+0x1c>
 800f1ae:	682b      	ldr	r3, [r5, #0]
 800f1b0:	b103      	cbz	r3, 800f1b4 <_kill_r+0x1c>
 800f1b2:	6023      	str	r3, [r4, #0]
 800f1b4:	bd38      	pop	{r3, r4, r5, pc}
 800f1b6:	bf00      	nop
 800f1b8:	24001644 	.word	0x24001644

0800f1bc <_getpid_r>:
 800f1bc:	f7f2 b95f 	b.w	800147e <_getpid>

0800f1c0 <_malloc_usable_size_r>:
 800f1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c4:	1f18      	subs	r0, r3, #4
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfbc      	itt	lt
 800f1ca:	580b      	ldrlt	r3, [r1, r0]
 800f1cc:	18c0      	addlt	r0, r0, r3
 800f1ce:	4770      	bx	lr

0800f1d0 <_gettimeofday>:
 800f1d0:	4b02      	ldr	r3, [pc, #8]	; (800f1dc <_gettimeofday+0xc>)
 800f1d2:	2258      	movs	r2, #88	; 0x58
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1da:	4770      	bx	lr
 800f1dc:	24001644 	.word	0x24001644

0800f1e0 <_init>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	bf00      	nop
 800f1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1e6:	bc08      	pop	{r3}
 800f1e8:	469e      	mov	lr, r3
 800f1ea:	4770      	bx	lr

0800f1ec <_fini>:
 800f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ee:	bf00      	nop
 800f1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f2:	bc08      	pop	{r3}
 800f1f4:	469e      	mov	lr, r3
 800f1f6:	4770      	bx	lr
