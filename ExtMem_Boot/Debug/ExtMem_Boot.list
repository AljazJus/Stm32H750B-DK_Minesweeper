
ExtMem_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000010  080030ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000080  080030ac  00020080  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000a3f2  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00009920  00000000  00000000  0002a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ab  00000000  00000000  00033d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176339  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006f8  00000000  00000000  001abff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000285c  00000000  00000000  001ac6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aef44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df8  00000000  00000000  001aef94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800306c 	.word	0x0800306c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800306c 	.word	0x0800306c

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f000 fdba 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000306:	f002 fe8d 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 f80f 	bl	800032c <main>
  bx  lr
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800031c:	0800309c 	.word	0x0800309c
  ldr r2, =_sbss
 8000320:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000324:	20000080 	.word	0x20000080

08000328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
	...

0800032c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8000332:	f000 f8bb 	bl	80004ac <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000336:	f000 fdf5 	bl	8000f24 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  /* Configure the Systick to generate an interrupt each 1 msec */
  SystemClock_Config();
 800033a:	f000 f839 	bl	80003b0 <SystemClock_Config>

  /*##-1- Configure Required Memory #########################################*/
  if(Memory_Startup() != MEMORY_OK)
 800033e:	f000 f823 	bl	8000388 <Memory_Startup>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <main+0x20>
  {
    Error_Handler();
 8000348:	f000 f82f 	bl	80003aa <Error_Handler>
  }

  /* Configure MPU to allow non aligned access */
  MPU_Config();
 800034c:	f000 f978 	bl	8000640 <MPU_Config>

  /* Disable CPU L1 cache before jumping to the QSPI code execution */
  CPU_CACHE_Disable();
 8000350:	f000 f91a 	bl	8000588 <CPU_CACHE_Disable>
  /* Disable Systick interrupt */
  SysTick->CTRL = 0;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <main+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]

  /* Initialize user application's Stack Pointer & Jump to user application */
  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <main+0x54>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	461a      	mov	r2, r3
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <main+0x58>)
 8000362:	601a      	str	r2, [r3, #0]
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000364:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f383 8808 	msr	MSP, r3
}
 8000372:	bf00      	nop
  JumpToApplication();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <main+0x58>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4798      	blx	r3

  /* We should never get here as execution is now on user application */
  while(1)
 800037a:	e7fe      	b.n	800037a <main+0x4e>
 800037c:	e000e010 	.word	0xe000e010
 8000380:	90000004 	.word	0x90000004
 8000384:	2000002c 	.word	0x2000002c

08000388 <Memory_Startup>:
  * @brief  Initialize and configure Volatile and Non-Volatile memory.
  * @param  None
  * @retval None
  */
uint32_t Memory_Startup(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
  uint32_t status = HAL_OK;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  status |= SDRAM_Startup();
#endif
  
  /* Non-Volatile Memory Configuration */
#if (CODE_AREA == USE_QSPI) || (BINARY_AREA == USE_SPI_NOR)
  status |= QSPI_Startup(QSPI_MODE);
 8000392:	2000      	movs	r0, #0
 8000394:	f000 face 	bl	8000934 <QSPI_Startup>
 8000398:	4602      	mov	r2, r0
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4313      	orrs	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
  
  #if (BINARY_AREA == USE_MMC)
  status |= MMC_Startup();
#endif
  
  return status;
 80003a0:	687b      	ldr	r3, [r7, #4]
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  while(1)
 80003ae:	e7fe      	b.n	80003ae <Error_Handler+0x4>

080003b0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b09e      	sub	sp, #120	; 0x78
 80003b4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80003b6:	2300      	movs	r3, #0
 80003b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY); /* PWR set to LDO for the STM32H750B-DISCO board */
 80003bc:	2002      	movs	r0, #2
 80003be:	f001 f993 	bl	80016e8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <SystemClock_Config+0xf4>)
 80003c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <SystemClock_Config+0xf4>)
 80003cc:	f023 0301 	bic.w	r3, r3, #1
 80003d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003d2:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <SystemClock_Config+0xf4>)
 80003d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <SystemClock_Config+0xf8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <SystemClock_Config+0xf8>)
 80003e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <SystemClock_Config+0xf8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f4:	bf00      	nop
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <SystemClock_Config+0xf8>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000402:	d1f8      	bne.n	80003f6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000404:	2301      	movs	r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000412:	2300      	movs	r3, #0
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	2302      	movs	r3, #2
 800041c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800041e:	2305      	movs	r3, #5
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042a:	2302      	movs	r3, #2
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000432:	2304      	movs	r3, #4
 8000434:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000436:	2300      	movs	r3, #0
 8000438:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800043a:	2308      	movs	r3, #8
 800043c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fe64 	bl	8002110 <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800044e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000456:	f7ff ffa8 	bl	80003aa <Error_Handler>
  }

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800045a:	233f      	movs	r3, #63	; 0x3f
 800045c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2303      	movs	r3, #3
 8000460:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000466:	2308      	movs	r3, #8
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800046a:	2340      	movs	r3, #64	; 0x40
 800046c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800047c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000480:	2104      	movs	r1, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fa9e 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800048e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000496:	f7ff ff88 	bl	80003aa <Error_Handler>
  }
}
 800049a:	bf00      	nop
 800049c:	3778      	adds	r7, #120	; 0x78
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	58000400 	.word	0x58000400
 80004a8:	58024800 	.word	0x58024800

080004ac <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b2:	4b34      	ldr	r3, [pc, #208]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d11b      	bne.n	80004f6 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004be:	f3bf 8f4f 	dsb	sy
}
 80004c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
}
 80004c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ca:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004d2:	f3bf 8f4f 	dsb	sy
}
 80004d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d8:	f3bf 8f6f 	isb	sy
}
 80004dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004de:	4b29      	ldr	r3, [pc, #164]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a28      	ldr	r2, [pc, #160]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ea:	f3bf 8f4f 	dsb	sy
}
 80004ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f0:	f3bf 8f6f 	isb	sy
}
 80004f4:	e000      	b.n	80004f8 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004f8:	4b22      	ldr	r3, [pc, #136]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d138      	bne.n	8000576 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 8000506:	2200      	movs	r2, #0
 8000508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
}
 8000510:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 8000514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000518:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	0b5b      	lsrs	r3, r3, #13
 800051e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000522:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800052c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	015a      	lsls	r2, r3, #5
 8000532:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000536:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800053c:	4911      	ldr	r1, [pc, #68]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ef      	bne.n	800052e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	60ba      	str	r2, [r7, #8]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1e5      	bne.n	8000524 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
}
 800055c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <CPU_CACHE_Enable+0xd8>)
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
}
 8000574:	e000      	b.n	8000578 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000576:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <CPU_CACHE_Disable>:
  * @brief  CPU L1-Cache disable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Disable(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800058e:	f3bf 8f4f 	dsb	sy
}
 8000592:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000594:	f3bf 8f6f 	isb	sy
}
 8000598:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <CPU_CACHE_Disable+0xb4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a27      	ldr	r2, [pc, #156]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ae:	f3bf 8f4f 	dsb	sy
}
 80005b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b4:	f3bf 8f6f 	isb	sy
}
 80005b8:	bf00      	nop
}
 80005ba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d6:	f3bf 8f4f 	dsb	sy
}
 80005da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <CPU_CACHE_Disable+0xb4>)
 80005de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005e2:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	0b5b      	lsrs	r3, r3, #13
 80005e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ec:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005f6:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	015a      	lsls	r2, r3, #5
 80005fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000600:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <CPU_CACHE_Disable+0xb4>)
 8000608:	4313      	orrs	r3, r2
 800060a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1ef      	bne.n	80005f8 <CPU_CACHE_Disable+0x70>
    } while(sets-- != 0U);
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1e5      	bne.n	80005ee <CPU_CACHE_Disable+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8000622:	f3bf 8f4f 	dsb	sy
}
 8000626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
}
 800062c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800062e:	bf00      	nop
  /* Disable I-Cache */
  SCB_DisableICache();

  /* Disable D-Cache */
  SCB_DisableDCache();
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <MPU_Config>:

static void MPU_Config (void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000646:	f000 fe23 	bl	8001290 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800064a:	2301      	movs	r3, #1
 800064c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000652:	231f      	movs	r3, #31
 8000654:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000656:	2300      	movs	r3, #0
 8000658:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000662:	2301      	movs	r3, #1
 8000664:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000666:	2300      	movs	r3, #0
 8000668:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800066a:	2300      	movs	r3, #0
 800066c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800066e:	2387      	movs	r3, #135	; 0x87
 8000670:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000672:	2301      	movs	r3, #1
 8000674:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000676:	463b      	mov	r3, r7
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe41 	bl	8001300 <HAL_MPU_ConfigRegion>
#endif
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
#endif
#if (CODE_AREA == USE_QSPI) || (BINARY_AREA == USE_SPI_NOR)
  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800067e:	2301      	movs	r3, #1
 8000680:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000682:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000686:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000688:	231a      	movs	r3, #26
 800068a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800068c:	2303      	movs	r3, #3
 800068e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000694:	2301      	movs	r3, #1
 8000696:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800069c:	2302      	movs	r3, #2
 800069e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	733b      	strb	r3, [r7, #12]
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fe26 	bl	8001300 <HAL_MPU_ConfigRegion>
#endif
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006b4:	2004      	movs	r0, #4
 80006b6:	f000 fe03 	bl	80012c0 <HAL_MPU_Enable>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
void QSPI_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b090      	sub	sp, #64	; 0x40
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80006ca:	4b95      	ldr	r3, [pc, #596]	; (8000920 <QSPI_MspInit+0x25c>)
 80006cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006d0:	4a93      	ldr	r2, [pc, #588]	; (8000920 <QSPI_MspInit+0x25c>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80006da:	4b91      	ldr	r3, [pc, #580]	; (8000920 <QSPI_MspInit+0x25c>)
 80006dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80006e8:	4b8d      	ldr	r3, [pc, #564]	; (8000920 <QSPI_MspInit+0x25c>)
 80006ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006ec:	4a8c      	ldr	r2, [pc, #560]	; (8000920 <QSPI_MspInit+0x25c>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80006f4:	4b8a      	ldr	r3, [pc, #552]	; (8000920 <QSPI_MspInit+0x25c>)
 80006f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80006f8:	4a89      	ldr	r2, [pc, #548]	; (8000920 <QSPI_MspInit+0x25c>)
 80006fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006fe:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8000700:	4b87      	ldr	r3, [pc, #540]	; (8000920 <QSPI_MspInit+0x25c>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a86      	ldr	r2, [pc, #536]	; (8000920 <QSPI_MspInit+0x25c>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b83      	ldr	r3, [pc, #524]	; (8000920 <QSPI_MspInit+0x25c>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800071e:	4b80      	ldr	r3, [pc, #512]	; (8000920 <QSPI_MspInit+0x25c>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a7e      	ldr	r2, [pc, #504]	; (8000920 <QSPI_MspInit+0x25c>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b7c      	ldr	r3, [pc, #496]	; (8000920 <QSPI_MspInit+0x25c>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	6a3b      	ldr	r3, [r7, #32]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800073c:	4b78      	ldr	r3, [pc, #480]	; (8000920 <QSPI_MspInit+0x25c>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000742:	4a77      	ldr	r2, [pc, #476]	; (8000920 <QSPI_MspInit+0x25c>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074c:	4b74      	ldr	r3, [pc, #464]	; (8000920 <QSPI_MspInit+0x25c>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
/*#if (CODE_AREA == USE_QSPI)  */
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800075a:	4b71      	ldr	r3, [pc, #452]	; (8000920 <QSPI_MspInit+0x25c>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a6f      	ldr	r2, [pc, #444]	; (8000920 <QSPI_MspInit+0x25c>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b6d      	ldr	r3, [pc, #436]	; (8000920 <QSPI_MspInit+0x25c>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8000778:	4b69      	ldr	r3, [pc, #420]	; (8000920 <QSPI_MspInit+0x25c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	4a68      	ldr	r2, [pc, #416]	; (8000920 <QSPI_MspInit+0x25c>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000788:	4b65      	ldr	r3, [pc, #404]	; (8000920 <QSPI_MspInit+0x25c>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
/*#endif*/
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8000796:	4b62      	ldr	r3, [pc, #392]	; (8000920 <QSPI_MspInit+0x25c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	4a60      	ldr	r2, [pc, #384]	; (8000920 <QSPI_MspInit+0x25c>)
 800079e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <QSPI_MspInit+0x25c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80007b4:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <QSPI_MspInit+0x25c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	4a59      	ldr	r2, [pc, #356]	; (8000920 <QSPI_MspInit+0x25c>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c4:	4b56      	ldr	r3, [pc, #344]	; (8000920 <QSPI_MspInit+0x25c>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <QSPI_MspInit+0x25c>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a51      	ldr	r2, [pc, #324]	; (8000920 <QSPI_MspInit+0x25c>)
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <QSPI_MspInit+0x25c>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
/*#if (CODE_AREA == USE_QSPI)*/
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <QSPI_MspInit+0x25c>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a4a      	ldr	r2, [pc, #296]	; (8000920 <QSPI_MspInit+0x25c>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b47      	ldr	r3, [pc, #284]	; (8000920 <QSPI_MspInit+0x25c>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <QSPI_MspInit+0x25c>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a42      	ldr	r2, [pc, #264]	; (8000920 <QSPI_MspInit+0x25c>)
 8000816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <QSPI_MspInit+0x25c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
/*#endif*/
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800083e:	2309      	movs	r3, #9
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8000842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	4836      	ldr	r0, [pc, #216]	; (8000924 <QSPI_MspInit+0x260>)
 800084a:	f000 fd9d 	bl	8001388 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000852:	2301      	movs	r3, #1
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8000856:	230a      	movs	r3, #10
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4831      	ldr	r0, [pc, #196]	; (8000928 <QSPI_MspInit+0x264>)
 8000862:	f000 fd91 	bl	8001388 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8000866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000870:	2309      	movs	r3, #9
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8000874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000878:	4619      	mov	r1, r3
 800087a:	482c      	ldr	r0, [pc, #176]	; (800092c <QSPI_MspInit+0x268>)
 800087c:	f000 fd84 	bl	8001388 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8000880:	2304      	movs	r3, #4
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000884:	2309      	movs	r3, #9
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088c:	4619      	mov	r1, r3
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <QSPI_MspInit+0x26c>)
 8000890:	f000 fd7a 	bl	8001388 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800089a:	230a      	movs	r3, #10
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800089e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a2:	4619      	mov	r1, r3
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <QSPI_MspInit+0x260>)
 80008a6:	f000 fd6f 	bl	8001388 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80008aa:	2308      	movs	r3, #8
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80008ae:	2309      	movs	r3, #9
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80008b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b6:	4619      	mov	r1, r3
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <QSPI_MspInit+0x26c>)
 80008ba:	f000 fd65 	bl	8001388 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80008c2:	2309      	movs	r3, #9
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80008c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ca:	4619      	mov	r1, r3
 80008cc:	4815      	ldr	r0, [pc, #84]	; (8000924 <QSPI_MspInit+0x260>)
 80008ce:	f000 fd5b 	bl	8001388 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80008d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <QSPI_MspInit+0x264>)
 80008e0:	f000 fd52 	bl	8001388 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80008e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <QSPI_MspInit+0x260>)
 80008f0:	f000 fd4a 	bl	8001388 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80008f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80008fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <QSPI_MspInit+0x264>)
 8000902:	f000 fd41 	bl	8001388 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	205c      	movs	r0, #92	; 0x5c
 800090c:	f000 fc8b 	bl	8001226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000910:	205c      	movs	r0, #92	; 0x5c
 8000912:	f000 fca2 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3740      	adds	r7, #64	; 0x40
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	58024400 	.word	0x58024400
 8000924:	58021400 	.word	0x58021400
 8000928:	58021800 	.word	0x58021800
 800092c:	58020c00 	.word	0x58020c00
 8000930:	58021c00 	.word	0x58021c00

08000934 <QSPI_Startup>:
/**
  * @brief  Initializes and configure the QSPI interface.
  * @retval QSPI memory status
  */
uint32_t QSPI_Startup(uint32_t Mode)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  QSPIHandle.Instance = QUADSPI;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <QSPI_Startup+0xd4>)
 800093e:	4a33      	ldr	r2, [pc, #204]	; (8000a0c <QSPI_Startup+0xd8>)
 8000940:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8000942:	4831      	ldr	r0, [pc, #196]	; (8000a08 <QSPI_Startup+0xd4>)
 8000944:	f000 ff7e 	bl	8001844 <HAL_QSPI_DeInit>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <QSPI_Startup+0x1e>
  {
    return MEMORY_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e056      	b.n	8000a00 <QSPI_Startup+0xcc>
  }

  /* System level initialization */
  QSPI_MspInit();
 8000952:	f7ff feb7 	bl	80006c4 <QSPI_MspInit>

  /* QSPI initialization */
  /* ClockPrescaler set to 1, so QSPI clock = 200MHz / (1+3) = 50MHz */
  QSPIHandle.Init.ClockPrescaler     = 3;
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <QSPI_Startup+0xd4>)
 8000958:	2203      	movs	r2, #3
 800095a:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 1;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <QSPI_Startup+0xd4>)
 800095e:	2201      	movs	r2, #1
 8000960:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <QSPI_Startup+0xd4>)
 8000964:	2210      	movs	r2, #16
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800096c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	fa93 f3a3 	rbit	r3, r3
 8000974:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <QSPI_Startup+0x50>
  {
    return 32U;
 8000980:	2320      	movs	r3, #32
 8000982:	e003      	b.n	800098c <QSPI_Startup+0x58>
  }
  return __builtin_clz(value);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fab3 f383 	clz	r3, r3
 800098a:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MT25TL01G_FLASH_SIZE) - 1;
 800098c:	3b01      	subs	r3, #1
 800098e:	461a      	mov	r2, r3
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <QSPI_Startup+0xd4>)
 8000992:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <QSPI_Startup+0xd4>)
 8000996:	f44f 7240 	mov.w	r2, #768	; 0x300
 800099a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <QSPI_Startup+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <QSPI_Startup+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_ENABLE;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <QSPI_Startup+0xd4>)
 80009aa:	2240      	movs	r2, #64	; 0x40
 80009ac:	621a      	str	r2, [r3, #32]

 if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80009ae:	4816      	ldr	r0, [pc, #88]	; (8000a08 <QSPI_Startup+0xd4>)
 80009b0:	f000 fed4 	bl	800175c <HAL_QSPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <QSPI_Startup+0x8a>
  {
    return MEMORY_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e020      	b.n	8000a00 <QSPI_Startup+0xcc>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != MEMORY_OK)
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <QSPI_Startup+0xd4>)
 80009c0:	f000 f85c 	bl	8000a7c <QSPI_ResetMemory>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <QSPI_Startup+0x9a>
  {
    return MEMORY_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e018      	b.n	8000a00 <QSPI_Startup+0xcc>
  }
 
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != MEMORY_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <QSPI_Startup+0xd4>)
 80009d0:	f000 f8bf 	bl	8000b52 <QSPI_EnterFourBytesAddress>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <QSPI_Startup+0xaa>
  {
    return MEMORY_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e010      	b.n	8000a00 <QSPI_Startup+0xcc>
  }

  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != MEMORY_OK)
 80009de:	480a      	ldr	r0, [pc, #40]	; (8000a08 <QSPI_Startup+0xd4>)
 80009e0:	f000 f8f2 	bl	8000bc8 <QSPI_DummyCyclesCfg>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <QSPI_Startup+0xba>
  {
    return MEMORY_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e008      	b.n	8000a00 <QSPI_Startup+0xcc>
  }
 
#if (CODE_AREA == USE_QSPI)
  /* Enable MemoryMapped mode */
  if( QSPI_EnableMemoryMappedMode(&QSPIHandle) != MEMORY_OK )
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <QSPI_Startup+0xd4>)
 80009f0:	f000 f80e 	bl	8000a10 <QSPI_EnableMemoryMappedMode>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <QSPI_Startup+0xca>
  {
    return MEMORY_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <QSPI_Startup+0xcc>
  if (QSPI_Shutdown() != MEMORY_OK)
  {
    return MEMORY_ERROR;
  }
#endif /* (CODE_AREA == USE_QSPI) */
  return MEMORY_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000030 	.word	0x20000030
 8000a0c:	52005000 	.word	0x52005000

08000a10 <QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
static uint32_t QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b092      	sub	sp, #72	; 0x48
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000a18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD; /* DTR QUAD INPUT/OUTPUT FAST READ and 4-BYTE DTR FAST READ commands */
 8000a1e:	23ed      	movs	r3, #237	; 0xed
 8000a20:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000a22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000a28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a2c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000a32:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR - 1;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8000a3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8000a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8000a54:	f107 0208 	add.w	r2, r7, #8
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <QSPI_EnableMemoryMappedMode+0x68>)
 8000a60:	f001 f928 	bl	8001cb4 <HAL_QSPI_MemoryMapped>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <QSPI_EnableMemoryMappedMode+0x5e>
  {
    return MEMORY_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <QSPI_EnableMemoryMappedMode+0x60>
  }

  return MEMORY_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3748      	adds	r7, #72	; 0x48
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000030 	.word	0x20000030

08000a7c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8000a8a:	2366      	movs	r3, #102	; 0x66
 8000a8c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 fef9 	bl	80018ac <HAL_QSPI_Command>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <QSPI_ResetMemory+0x48>
  {
    return MEMORY_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e042      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }

  /* Send the reset memory command */
  s_command.Instruction = MT25TL01G_RESET_MEMORY_CMD;
 8000ac4:	2399      	movs	r3, #153	; 0x99
 8000ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 feea 	bl	80018ac <HAL_QSPI_Command>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <QSPI_ResetMemory+0x66>
  {
    return MEMORY_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e033      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8000ae8:	2366      	movs	r3, #102	; 0x66
 8000aea:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fed8 	bl	80018ac <HAL_QSPI_Command>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <QSPI_ResetMemory+0x8a>
  {
    return MEMORY_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e021      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }

  /* Send the reset memory command */
  s_command.Instruction = MT25TL01G_RESET_MEMORY_CMD;
 8000b06:	2399      	movs	r3, #153	; 0x99
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 fec9 	bl	80018ac <HAL_QSPI_Command>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <QSPI_ResetMemory+0xa8>
  {
    return MEMORY_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e012      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }

  /* Enter QSPI memory in QPI mode */
  if(QSPI_EnterQPI(hqspi) != MEMORY_OK)
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f93d 	bl	8000da4 <QSPI_EnterQPI>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <QSPI_ResetMemory+0xb8>
  {
    return MEMORY_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e00a      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }  

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000b34:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f8fa 	bl	8000d32 <QSPI_AutoPollingMemReady>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <QSPI_ResetMemory+0xcc>
  {
    return MEMORY_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <QSPI_ResetMemory+0xce>
  }

  return MEMORY_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3740      	adds	r7, #64	; 0x40
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b090      	sub	sp, #64	; 0x40
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000b60:	23b7      	movs	r3, #183	; 0xb7
 8000b62:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != MEMORY_OK)
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f88b 	bl	8000c9c <QSPI_WriteEnable>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return MEMORY_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e017      	b.n	8000bc0 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 fe86 	bl	80018ac <HAL_QSPI_Command>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <QSPI_EnterFourBytesAddress+0x58>
  {
    return MEMORY_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00a      	b.n	8000bc0 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000baa:	f241 3188 	movw	r1, #5000	; 0x1388
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f8bf 	bl	8000d32 <QSPI_AutoPollingMemReady>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <QSPI_EnterFourBytesAddress+0x6c>
  {
    return MEMORY_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return MEMORY_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3740      	adds	r7, #64	; 0x40
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b092      	sub	sp, #72	; 0x48
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	81fb      	strh	r3, [r7, #14]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000bd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8000bda:	2385      	movs	r3, #133	; 0x85
 8000bdc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000be6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 fe4e 	bl	80018ac <HAL_QSPI_Command>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <QSPI_DummyCyclesCfg+0x52>
  {
    return MEMORY_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e03a      	b.n	8000c90 <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c1a:	f107 030e 	add.w	r3, r7, #14
 8000c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c22:	4619      	mov	r1, r3
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 ff31 	bl	8001a8c <HAL_QSPI_Receive>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <QSPI_DummyCyclesCfg+0x6c>
  {
    return MEMORY_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e02d      	b.n	8000c90 <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != MEMORY_OK)
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f831 	bl	8000c9c <QSPI_WriteEnable>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <QSPI_DummyCyclesCfg+0x7c>
  {
    return MEMORY_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e025      	b.n	8000c90 <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8000c44:	2381      	movs	r3, #129	; 0x81
 8000c46:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8000c48:	89fa      	ldrh	r2, [r7, #14]
 8000c4a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000c4e:	4013      	ands	r3, r2
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <QSPI_DummyCyclesCfg+0xd0>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fe21 	bl	80018ac <HAL_QSPI_Command>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <QSPI_DummyCyclesCfg+0xac>
  {
    return MEMORY_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00d      	b.n	8000c90 <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c74:	f107 030e 	add.w	r3, r7, #14
 8000c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fe72 	bl	8001968 <HAL_QSPI_Transmit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <QSPI_DummyCyclesCfg+0xc6>
  {
    return MEMORY_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <QSPI_DummyCyclesCfg+0xc8>
  }

  return MEMORY_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3748      	adds	r7, #72	; 0x48
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	ffff8080 	.word	0xffff8080

08000c9c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b096      	sub	sp, #88	; 0x58
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000ca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8000caa:	2306      	movs	r3, #6
 8000cac:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 fde9 	bl	80018ac <HAL_QSPI_Command>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <QSPI_WriteEnable+0x48>
  {
    return MEMORY_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e022      	b.n	8000d2a <QSPI_WriteEnable+0x8e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000ce4:	f240 2302 	movw	r3, #514	; 0x202
 8000ce8:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000cea:	f240 2302 	movw	r3, #514	; 0x202
 8000cee:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d00:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8000d02:	2305      	movs	r3, #5
 8000d04:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8000d06:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d0c:	f107 0208 	add.w	r2, r7, #8
 8000d10:	f107 0120 	add.w	r1, r7, #32
 8000d14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 ff54 	bl	8001bc6 <HAL_QSPI_AutoPolling>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <QSPI_WriteEnable+0x8c>
  {
    return MEMORY_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <QSPI_WriteEnable+0x8e>
  }

  return MEMORY_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3758      	adds	r7, #88	; 0x58
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint32_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b096      	sub	sp, #88	; 0x58
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8000d42:	2305      	movs	r3, #5
 8000d44:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000d4e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d60:	2300      	movs	r3, #0
 8000d62:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d74:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8000d76:	f240 1301 	movw	r3, #257	; 0x101
 8000d7a:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000d80:	f107 0208 	add.w	r2, r7, #8
 8000d84:	f107 0120 	add.w	r1, r7, #32
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 ff1b 	bl	8001bc6 <HAL_QSPI_AutoPolling>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <QSPI_AutoPollingMemReady+0x68>
  {
    return MEMORY_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <QSPI_AutoPollingMemReady+0x6a>
  }

  return MEMORY_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3758      	adds	r7, #88	; 0x58
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <QSPI_EnterQPI>:
  * @brief  This function enter the QPSI memory in QPI mode
  * @param  hqspi QSPI handle 
  * @retval QSPI status
  */
static uint8_t QSPI_EnterQPI(QSPI_HandleTypeDef *hqspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	; 0x40
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8000db2:	2335      	movs	r3, #53	; 0x35
 8000db4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 fd65 	bl	80018ac <HAL_QSPI_Command>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <QSPI_EnterQPI+0x48>
  {
    return MEMORY_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <QSPI_EnterQPI+0x4a>
  }
  
  return MEMORY_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <BusFault_Handler+0x4>

08000e16 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000e4a:	f000 f8e5 	bl	8001018 <HAL_IncTick>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <SystemInit+0xb4>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <SystemInit+0xb4>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <SystemInit+0xb8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <SystemInit+0xb8>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <SystemInit+0xb8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <SystemInit+0xb8>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4923      	ldr	r1, [pc, #140]	; (8000f0c <SystemInit+0xb8>)
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <SystemInit+0xbc>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <SystemInit+0xb8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <SystemInit+0xb8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <SystemInit+0xb8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <SystemInit+0xb8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <SystemInit+0xb8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <SystemInit+0xb8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <SystemInit+0xb8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <SystemInit+0xb8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <SystemInit+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <SystemInit+0xb8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <SystemInit+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <SystemInit+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <SystemInit+0xb8>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <SystemInit+0xb8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <SystemInit+0xc0>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <SystemInit+0xc4>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee6:	d202      	bcs.n	8000eee <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <SystemInit+0xc8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <SystemInit+0xcc>)
 8000ef0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ef4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SystemInit+0xb4>)
 8000ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efc:	609a      	str	r2, [r3, #8]
#endif  


}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f14:	5c001000 	.word	0x5c001000
 8000f18:	ffff0000 	.word	0xffff0000
 8000f1c:	51008108 	.word	0x51008108
 8000f20:	52004000 	.word	0x52004000

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 f970 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f30:	f001 fefe 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_Init+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	4913      	ldr	r1, [pc, #76]	; (8000f90 <HAL_Init+0x6c>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_Init+0x68>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_Init+0x6c>)
 8000f58:	5cd3      	ldrb	r3, [r2, r3]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_Init+0x70>)
 8000f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_Init+0x74>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f81c 	bl	8000fac <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e002      	b.n	8000f84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7e:	f000 f80d 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	08003084 	.word	0x08003084
 8000f94:	20000004 	.word	0x20000004
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x60>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e021      	b.n	8001004 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0x64>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_InitTick+0x60>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f94d 	bl	8001276 <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f917 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x68>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000000c 	.word	0x2000000c
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	2000007c 	.word	0x2000007c

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000007c 	.word	0x2000007c

08001058 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetREVID+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0c1b      	lsrs	r3, r3, #16
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	5c001000 	.word	0x5c001000

08001070 <__NVIC_SetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	4313      	orrs	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x40>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	05fa0000 	.word	0x05fa0000

080010b8 <__NVIC_GetPriorityGrouping>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff29 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff40 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff90 	bl	8001164 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5f 	bl	8001110 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff33 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa4 	bl	80011cc <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001294:	f3bf 8f5f 	dmb	sy
}
 8001298:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_MPU_Disable+0x28>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_MPU_Disable+0x28>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_MPU_Disable+0x2c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	e000ed90 	.word	0xe000ed90

080012c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_MPU_Enable+0x38>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_MPU_Enable+0x3c>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_MPU_Enable+0x3c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012de:	f3bf 8f4f 	dsb	sy
}
 80012e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e4:	f3bf 8f6f 	isb	sy
}
 80012e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed90 	.word	0xe000ed90
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	785a      	ldrb	r2, [r3, #1]
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_MPU_ConfigRegion+0x84>)
 800130e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d029      	beq.n	800136c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_MPU_ConfigRegion+0x84>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7b1b      	ldrb	r3, [r3, #12]
 8001324:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7adb      	ldrb	r3, [r3, #11]
 800132a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800132c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a9b      	ldrb	r3, [r3, #10]
 8001332:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7b5b      	ldrb	r3, [r3, #13]
 800133a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800133c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7b9b      	ldrb	r3, [r3, #14]
 8001342:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001344:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7bdb      	ldrb	r3, [r3, #15]
 800134a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800134c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a5b      	ldrb	r3, [r3, #9]
 8001352:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001354:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a1b      	ldrb	r3, [r3, #8]
 800135a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800135c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001366:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001368:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800136a:	e005      	b.n	8001378 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_MPU_ConfigRegion+0x84>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_MPU_ConfigRegion+0x84>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed90 	.word	0xe000ed90

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_GPIO_Init+0x234>)
 8001398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800139a:	e194      	b.n	80016c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8186 	beq.w	80016c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d005      	beq.n	80013cc <HAL_GPIO_Init+0x44>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d130      	bne.n	800142e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001402:	2201      	movs	r2, #1
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 0201 	and.w	r2, r3, #1
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d017      	beq.n	800146a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d123      	bne.n	80014be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	69b9      	ldr	r1, [r7, #24]
 80014ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0203 	and.w	r2, r3, #3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80e0 	beq.w	80016c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <HAL_GPIO_Init+0x23c>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <HAL_GPIO_Init+0x240>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d052      	beq.n	80015f0 <HAL_GPIO_Init+0x268>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_GPIO_Init+0x244>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d031      	beq.n	80015b6 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x248>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x22a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_GPIO_Init+0x24c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_GPIO_Init+0x250>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x254>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_GPIO_Init+0x258>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x21a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x25c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x216>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x260>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x212>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_GPIO_Init+0x264>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20e>
 8001592:	2309      	movs	r3, #9
 8001594:	e02d      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 8001596:	230a      	movs	r3, #10
 8001598:	e02b      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 800159a:	2308      	movs	r3, #8
 800159c:	e029      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e027      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e025      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e023      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e021      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e01f      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e01d      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01b      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015ba:	bf00      	nop
 80015bc:	58000080 	.word	0x58000080
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58000400 	.word	0x58000400
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58021400 	.word	0x58021400
 80015e0:	58021800 	.word	0x58021800
 80015e4:	58021c00 	.word	0x58021c00
 80015e8:	58022000 	.word	0x58022000
 80015ec:	58022400 	.word	0x58022400
 80015f0:	2300      	movs	r3, #0
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001602:	4938      	ldr	r1, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x35c>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f ae63 	bne.w	800139c <HAL_GPIO_Init+0x14>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58000400 	.word	0x58000400

080016e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_PWREx_ConfigSupply+0x70>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00a      	beq.n	8001712 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_PWREx_ConfigSupply+0x70>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e01f      	b.n	800174e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e01d      	b.n	800174e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_PWREx_ConfigSupply+0x70>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	490f      	ldr	r1, [pc, #60]	; (8001758 <HAL_PWREx_ConfigSupply+0x70>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001722:	f7ff fc8d 	bl	8001040 <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001728:	e009      	b.n	800173e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800172a:	f7ff fc89 	bl	8001040 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001738:	d901      	bls.n	800173e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e007      	b.n	800174e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_PWREx_ConfigSupply+0x70>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d1ee      	bne.n	800172a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	58024800 	.word	0x58024800

0800175c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fc6c 	bl	8001040 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e05f      	b.n	8001834 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f87f 	bl	8001884 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001786:	f241 3188 	movw	r1, #5000	; 0x1388
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 faf4 	bl	8001d78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	3b01      	subs	r3, #1
 80017a0:	021a      	lsls	r2, r3, #8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 faec 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d135      	bne.n	8001832 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_QSPI_Init+0xe0>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6852      	ldr	r2, [r2, #4]
 80017d4:	0611      	lsls	r1, r2, #24
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68d2      	ldr	r2, [r2, #12]
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	69d2      	ldr	r2, [r2, #28]
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6a12      	ldr	r2, [r2, #32]
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_QSPI_Init+0xe4>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6912      	ldr	r2, [r2, #16]
 80017fe:	0411      	lsls	r1, r2, #16
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6952      	ldr	r2, [r2, #20]
 8001804:	4311      	orrs	r1, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6992      	ldr	r2, [r2, #24]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001832:	7afb      	ldrb	r3, [r7, #11]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	00ffff2f 	.word	0x00ffff2f
 8001840:	ffe0f8fe 	.word	0xffe0f8fe

08001844 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e012      	b.n	800187c <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f816 	bl	8001898 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff fbc2 	bl	8001040 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_QSPI_Command+0x22>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e048      	b.n	8001960 <HAL_QSPI_Command+0xb4>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d137      	bne.n	8001952 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2120      	movs	r1, #32
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 fa4a 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d125      	bne.n	8001956 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800190a:	2200      	movs	r2, #0
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fa77 	bl	8001e02 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	d115      	bne.n	8001948 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2201      	movs	r2, #1
 8001924:	2102      	movs	r1, #2
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fa34 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001946:	e006      	b.n	8001956 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001950:	e001      	b.n	8001956 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fb62 	bl	8001040 <HAL_GetTick>
 800197c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3320      	adds	r3, #32
 8001984:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_QSPI_Transmit+0x2e>
 8001992:	2302      	movs	r3, #2
 8001994:	e076      	b.n	8001a84 <HAL_QSPI_Transmit+0x11c>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d165      	bne.n	8001a76 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d056      	beq.n	8001a64 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2212      	movs	r2, #18
 80019ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80019ea:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80019ec:	e01b      	b.n	8001a26 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2201      	movs	r2, #1
 80019f6:	2104      	movs	r1, #4
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9cb 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d113      	bne.n	8001a30 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1df      	bne.n	80019ee <HAL_QSPI_Transmit+0x86>
 8001a2e:	e000      	b.n	8001a32 <HAL_QSPI_Transmit+0xca>
          break;
 8001a30:	bf00      	nop
      }

      if (status == HAL_OK)
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d110      	bne.n	8001a5a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2102      	movs	r1, #2
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f9a6 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a62:	e00a      	b.n	8001a7a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0208 	orr.w	r2, r3, #8
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	77fb      	strb	r3, [r7, #31]
 8001a74:	e001      	b.n	8001a7a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
 8001a78:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fad0 	bl	8001040 <HAL_GetTick>
 8001aa0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3320      	adds	r3, #32
 8001ab0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_QSPI_Receive+0x36>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e07d      	b.n	8001bbe <HAL_QSPI_Receive+0x132>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d16c      	bne.n	8001bb0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d05d      	beq.n	8001b9e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2222      	movs	r2, #34	; 0x22
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b1a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001b24:	e01c      	b.n	8001b60 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2106      	movs	r1, #6
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f92f 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d114      	bne.n	8001b6a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1de      	bne.n	8001b26 <HAL_QSPI_Receive+0x9a>
 8001b68:	e000      	b.n	8001b6c <HAL_QSPI_Receive+0xe0>
          break;
 8001b6a:	bf00      	nop
      }

      if (status == HAL_OK)
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d110      	bne.n	8001b94 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f909 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b9c:	e00a      	b.n	8001bb4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f043 0208 	orr.w	r2, r3, #8
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	77fb      	strb	r3, [r7, #31]
 8001bae:	e001      	b.n	8001bb4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b088      	sub	sp, #32
 8001bca:	af02      	add	r7, sp, #8
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fa34 	bl	8001040 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_QSPI_AutoPolling+0x24>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e060      	b.n	8001cac <HAL_QSPI_AutoPolling+0xe6>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d14f      	bne.n	8001c9e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2242      	movs	r2, #66	; 0x42
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2200      	movs	r2, #0
 8001c14:	2120      	movs	r1, #32
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f8bc 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d13d      	bne.n	8001ca2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6852      	ldr	r2, [r2, #4]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6892      	ldr	r2, [r2, #8]
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c5c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f8c8 	bl	8001e02 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f889 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c9c:	e001      	b.n	8001ca2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff f9be 	bl	8001040 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_QSPI_MemoryMapped+0x22>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e04c      	b.n	8001d70 <HAL_QSPI_MemoryMapped+0xbc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d13b      	bne.n	8001d62 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2282      	movs	r2, #130	; 0x82
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f845 	bl	8001d94 <QSPI_WaitFlagStateUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d128      	bne.n	8001d66 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0108 	bic.w	r1, r3, #8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d110      	bne.n	8001d54 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2210      	movs	r2, #16
 8001d42:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d52:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001d54:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f851 	bl	8001e02 <QSPI_Config>
 8001d60:	e001      	b.n	8001d66 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001da4:	e01a      	b.n	8001ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d016      	beq.n	8001ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dae:	f7ff f947 	bl	8001040 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d302      	bcc.n	8001dc4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e00e      	b.n	8001dfa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1d6      	bne.n	8001da6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <QSPI_Config+0x28>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001e1c:	d005      	beq.n	8001e2a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3a01      	subs	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80b9 	beq.w	8001fa6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05f      	beq.n	8001efc <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	6892      	ldr	r2, [r2, #8]
 8001e44:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d031      	beq.n	8001eb2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	431a      	orrs	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	049b      	lsls	r3, r3, #18
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	ea42 0103 	orr.w	r1, r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001ea2:	f000 812e 	beq.w	8002102 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	6852      	ldr	r2, [r2, #4]
 8001eae:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001eb0:	e127      	b.n	8002102 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	049b      	lsls	r3, r3, #18
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	ea42 0103 	orr.w	r1, r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	615a      	str	r2, [r3, #20]
}
 8001efa:	e102      	b.n	8002102 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02e      	beq.n	8001f62 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	049b      	lsls	r3, r3, #18
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	ea42 0103 	orr.w	r1, r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f52:	f000 80d6 	beq.w	8002102 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	6852      	ldr	r2, [r2, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
}
 8001f60:	e0cf      	b.n	8002102 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	ea42 0103 	orr.w	r1, r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	615a      	str	r2, [r3, #20]
}
 8001fa4:	e0ad      	b.n	8002102 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d058      	beq.n	8002060 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02d      	beq.n	800201c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	049b      	lsls	r3, r3, #18
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	ea42 0103 	orr.w	r1, r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	430a      	orrs	r2, r1
 8002006:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800200e:	d078      	beq.n	8002102 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	6852      	ldr	r2, [r2, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	e072      	b.n	8002102 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	431a      	orrs	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	431a      	orrs	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	431a      	orrs	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	049b      	lsls	r3, r3, #18
 8002038:	431a      	orrs	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	431a      	orrs	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	431a      	orrs	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	ea42 0103 	orr.w	r1, r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	430a      	orrs	r2, r1
 800205c:	615a      	str	r2, [r3, #20]
}
 800205e:	e050      	b.n	8002102 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02a      	beq.n	80020be <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	431a      	orrs	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	431a      	orrs	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	431a      	orrs	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	049b      	lsls	r3, r3, #18
 8002084:	431a      	orrs	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	431a      	orrs	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	431a      	orrs	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80020b0:	d027      	beq.n	8002102 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	6852      	ldr	r2, [r2, #4]
 80020ba:	619a      	str	r2, [r3, #24]
}
 80020bc:	e021      	b.n	8002102 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01d      	beq.n	8002102 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	431a      	orrs	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	431a      	orrs	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	049b      	lsls	r3, r3, #18
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	ea42 0103 	orr.w	r1, r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	430a      	orrs	r2, r1
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f000 bc48 	b.w	80029b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8088 	beq.w	8002242 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b99      	ldr	r3, [pc, #612]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	2b10      	cmp	r3, #16
 8002146:	d007      	beq.n	8002158 <HAL_RCC_OscConfig+0x48>
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	2b18      	cmp	r3, #24
 800214c:	d111      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d06d      	beq.n	8002240 <HAL_RCC_OscConfig+0x130>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d169      	bne.n	8002240 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f000 bc21 	b.w	80029b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x7a>
 800217c:	4b86      	ldr	r3, [pc, #536]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a85      	ldr	r2, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x9c>
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7d      	ldr	r2, [pc, #500]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xc0>
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b75      	ldr	r3, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a74      	ldr	r2, [pc, #464]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd8>
 80021d0:	4b71      	ldr	r3, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a70      	ldr	r2, [pc, #448]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b6e      	ldr	r3, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6d      	ldr	r2, [pc, #436]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff26 	bl	8001040 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff22 	bl	8001040 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e3d4      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe8>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff12 	bl	8001040 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ff0e 	bl	8001040 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e3c0      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x110>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80ca 	beq.w	80023e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002258:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800225a:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_RCC_OscConfig+0x166>
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2b18      	cmp	r3, #24
 800226a:	d156      	bne.n	800231a <HAL_RCC_OscConfig+0x20a>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d151      	bne.n	800231a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002276:	4b48      	ldr	r3, [pc, #288]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x17e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e392      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0219 	bic.w	r2, r3, #25
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	493f      	ldr	r1, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fece 	bl	8001040 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe feca 	bl	8001040 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e37c      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	f7fe fec7 	bl	8001058 <HAL_GetREVID>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d817      	bhi.n	8002304 <HAL_RCC_OscConfig+0x1f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d108      	bne.n	80022ee <HAL_RCC_OscConfig+0x1de>
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022e4:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ec:	e07a      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	031b      	lsls	r3, r3, #12
 80022fc:	4926      	ldr	r1, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002302:	e06f      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	4921      	ldr	r1, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002318:	e064      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d047      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0219 	bic.w	r2, r3, #25
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	491a      	ldr	r1, [pc, #104]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fe84 	bl	8001040 <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe fe80 	bl	8001040 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e332      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	f7fe fe7d 	bl	8001058 <HAL_GetREVID>
 800235e:	4603      	mov	r3, r0
 8002360:	f241 0203 	movw	r2, #4099	; 0x1003
 8002364:	4293      	cmp	r3, r2
 8002366:	d819      	bhi.n	800239c <HAL_RCC_OscConfig+0x28c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d108      	bne.n	8002382 <HAL_RCC_OscConfig+0x272>
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 800237a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237e:	6053      	str	r3, [r2, #4]
 8002380:	e030      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	031b      	lsls	r3, r3, #12
 8002390:	4901      	ldr	r1, [pc, #4]	; (8002398 <HAL_RCC_OscConfig+0x288>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
 8002396:	e025      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
 8002398:	58024400 	.word	0x58024400
 800239c:	4b9a      	ldr	r3, [pc, #616]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	4997      	ldr	r1, [pc, #604]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
 80023b0:	e018      	b.n	80023e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b95      	ldr	r3, [pc, #596]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a94      	ldr	r2, [pc, #592]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe3f 	bl	8001040 <HAL_GetTick>
 80023c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fe3b 	bl	8001040 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e2ed      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d8:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a9 	beq.w	8002544 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f2:	4b85      	ldr	r3, [pc, #532]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023fc:	4b82      	ldr	r3, [pc, #520]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d007      	beq.n	8002418 <HAL_RCC_OscConfig+0x308>
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b18      	cmp	r3, #24
 800240c:	d13a      	bne.n	8002484 <HAL_RCC_OscConfig+0x374>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d135      	bne.n	8002484 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002418:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x320>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e2c1      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002430:	f7fe fe12 	bl	8001058 <HAL_GetREVID>
 8002434:	4603      	mov	r3, r0
 8002436:	f241 0203 	movw	r2, #4099	; 0x1003
 800243a:	4293      	cmp	r3, r2
 800243c:	d817      	bhi.n	800246e <HAL_RCC_OscConfig+0x35e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	2b20      	cmp	r3, #32
 8002444:	d108      	bne.n	8002458 <HAL_RCC_OscConfig+0x348>
 8002446:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002454:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002456:	e075      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	4968      	ldr	r1, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800246c:	e06a      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800246e:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	4962      	ldr	r1, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002482:	e05f      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d042      	beq.n	8002512 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fdd2 	bl	8001040 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024a0:	f7fe fdce 	bl	8001040 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e280      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024b2:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024be:	f7fe fdcb 	bl	8001058 <HAL_GetREVID>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d817      	bhi.n	80024fc <HAL_RCC_OscConfig+0x3ec>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d108      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3d6>
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024e2:	6053      	str	r3, [r2, #4]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
 80024e6:	4b48      	ldr	r3, [pc, #288]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	069b      	lsls	r3, r3, #26
 80024f4:	4944      	ldr	r1, [pc, #272]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e023      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
 80024fc:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	493f      	ldr	r1, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e018      	b.n	8002544 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a3c      	ldr	r2, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fd8f 	bl	8001040 <HAL_GetTick>
 8002522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002526:	f7fe fd8b 	bl	8001040 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e23d      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002538:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d036      	beq.n	80025be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d019      	beq.n	800258c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fd6c 	bl	8001040 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7fe fd68 	bl	8001040 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e21a      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x45c>
 800258a:	e018      	b.n	80025be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe fd52 	bl	8001040 <HAL_GetTick>
 800259c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe fd4e 	bl	8001040 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e200      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d039      	beq.n	800263e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01c      	beq.n	800260c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025de:	f7fe fd2f 	bl	8001040 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e6:	f7fe fd2b 	bl	8001040 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1dd      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
 8002606:	bf00      	nop
 8002608:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800260c:	4b9b      	ldr	r3, [pc, #620]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a9a      	ldr	r2, [pc, #616]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002616:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002618:	f7fe fd12 	bl	8001040 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002620:	f7fe fd0e 	bl	8001040 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1c0      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002632:	4b92      	ldr	r3, [pc, #584]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8081 	beq.w	800274e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <HAL_RCC_OscConfig+0x770>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8b      	ldr	r2, [pc, #556]	; (8002880 <HAL_RCC_OscConfig+0x770>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002658:	f7fe fcf2 	bl	8001040 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fcee 	bl	8001040 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1a0      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002672:	4b83      	ldr	r3, [pc, #524]	; (8002880 <HAL_RCC_OscConfig+0x770>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x584>
 8002686:	4b7d      	ldr	r3, [pc, #500]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a7c      	ldr	r2, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e02d      	b.n	80026f0 <HAL_RCC_OscConfig+0x5e0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5a6>
 800269c:	4b77      	ldr	r3, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a76      	ldr	r2, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b74      	ldr	r3, [pc, #464]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a73      	ldr	r2, [pc, #460]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026ae:	f023 0304 	bic.w	r3, r3, #4
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	e01c      	b.n	80026f0 <HAL_RCC_OscConfig+0x5e0>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c8>
 80026be:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	4b6c      	ldr	r3, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a6b      	ldr	r2, [pc, #428]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x5e0>
 80026d8:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	4b65      	ldr	r3, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a64      	ldr	r2, [pc, #400]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fca2 	bl	8001040 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fc9e 	bl	8001040 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e14e      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002716:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ee      	beq.n	8002700 <HAL_RCC_OscConfig+0x5f0>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fc8c 	bl	8001040 <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe fc88 	bl	8001040 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e138      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ee      	bne.n	800272c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 812d 	beq.w	80029b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002758:	4b48      	ldr	r3, [pc, #288]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002760:	2b18      	cmp	r3, #24
 8002762:	f000 80bd 	beq.w	80028e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2b02      	cmp	r3, #2
 800276c:	f040 809e 	bne.w	80028ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a41      	ldr	r2, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fc60 	bl	8001040 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fc5c 	bl	8001040 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e10e      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a2:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80027a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_OscConfig+0x774>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	430a      	orrs	r2, r1
 80027b6:	4931      	ldr	r1, [pc, #196]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	628b      	str	r3, [r1, #40]	; 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	3b01      	subs	r3, #1
 80027c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	3b01      	subs	r3, #1
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	3b01      	subs	r3, #1
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027ec:	4923      	ldr	r1, [pc, #140]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x778>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800280a:	00d2      	lsls	r2, r2, #3
 800280c:	491b      	ldr	r1, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f023 020c 	bic.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4917      	ldr	r1, [pc, #92]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002820:	4313      	orrs	r3, r2
 8002822:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f023 0202 	bic.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4912      	ldr	r1, [pc, #72]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	4a0d      	ldr	r2, [pc, #52]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_OscConfig+0x76c>)
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fbe5 	bl	8001040 <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002878:	e011      	b.n	800289e <HAL_RCC_OscConfig+0x78e>
 800287a:	bf00      	nop
 800287c:	58024400 	.word	0x58024400
 8002880:	58024800 	.word	0x58024800
 8002884:	fffffc0c 	.word	0xfffffc0c
 8002888:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fbd8 	bl	8001040 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e08a      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x77c>
 80028aa:	e082      	b.n	80029b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a42      	ldr	r2, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fbc2 	bl	8001040 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fbbe 	bl	8001040 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e070      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x7b0>
 80028de:	e068      	b.n	80029b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d031      	beq.n	8002958 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0203 	and.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d12a      	bne.n	8002958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d122      	bne.n	8002958 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d11a      	bne.n	8002958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0a5b      	lsrs	r3, r3, #9
 8002926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d111      	bne.n	8002958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0c1b      	lsrs	r3, r3, #16
 8002938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d108      	bne.n	8002958 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	0e1b      	lsrs	r3, r3, #24
 800294a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e02b      	b.n	80029b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002966:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	429a      	cmp	r2, r3
 8002970:	d01f      	beq.n	80029b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800297e:	f7fe fb5f 	bl	8001040 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002984:	bf00      	nop
 8002986:	f7fe fb5b 	bl	8001040 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	4293      	cmp	r3, r2
 8002990:	d0f9      	beq.n	8002986 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 8002994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_OscConfig+0x8b0>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800299e:	00d2      	lsls	r2, r2, #3
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_OscConfig+0x8ac>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3730      	adds	r7, #48	; 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	58024400 	.word	0x58024400
 80029c0:	ffff0007 	.word	0xffff0007

080029c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e19c      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b87      	ldr	r3, [pc, #540]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 020f 	bic.w	r2, r3, #15
 80029ee:	4985      	ldr	r1, [pc, #532]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e184      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	4b7b      	ldr	r3, [pc, #492]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d908      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a24:	4b78      	ldr	r3, [pc, #480]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	4975      	ldr	r1, [pc, #468]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d908      	bls.n	8002a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	496a      	ldr	r1, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a80:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	495e      	ldr	r1, [pc, #376]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d908      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002aae:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4953      	ldr	r1, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f023 020f 	bic.w	r2, r3, #15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4947      	ldr	r1, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d055      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4940      	ldr	r1, [pc, #256]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d121      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0f6      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0ea      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0de      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b54:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d6      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f023 0207 	bic.w	r2, r3, #7
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b76:	f7fe fa63 	bl	8001040 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7fe fa5f 	bl	8001040 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0be      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d1eb      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d208      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f023 020f 	bic.w	r2, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d214      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	4906      	ldr	r1, [pc, #24]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e086      	b.n	8002d12 <HAL_RCC_ClockConfig+0x34e>
 8002c04:	52002000 	.word	0x52002000
 8002c08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d208      	bcs.n	8002c3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c28:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4939      	ldr	r1, [pc, #228]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d208      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	492e      	ldr	r1, [pc, #184]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d208      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d208      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4917      	ldr	r1, [pc, #92]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cc4:	f000 f834 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	4912      	ldr	r1, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x35c>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x358>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_RCC_ClockConfig+0x35c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x360>)
 8002cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x364>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x368>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe f950 	bl	8000fac <HAL_InitTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	08003084 	.word	0x08003084
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000008 	.word	0x20000008

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d36:	4bb3      	ldr	r3, [pc, #716]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	f200 8155 	bhi.w	8002fee <HAL_RCC_GetSysClockFreq+0x2be>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002db1 	.word	0x08002db1
 8002d50:	08002fef 	.word	0x08002fef
 8002d54:	08002fef 	.word	0x08002fef
 8002d58:	08002fef 	.word	0x08002fef
 8002d5c:	08002fef 	.word	0x08002fef
 8002d60:	08002fef 	.word	0x08002fef
 8002d64:	08002fef 	.word	0x08002fef
 8002d68:	08002fef 	.word	0x08002fef
 8002d6c:	08002dd7 	.word	0x08002dd7
 8002d70:	08002fef 	.word	0x08002fef
 8002d74:	08002fef 	.word	0x08002fef
 8002d78:	08002fef 	.word	0x08002fef
 8002d7c:	08002fef 	.word	0x08002fef
 8002d80:	08002fef 	.word	0x08002fef
 8002d84:	08002fef 	.word	0x08002fef
 8002d88:	08002fef 	.word	0x08002fef
 8002d8c:	08002ddd 	.word	0x08002ddd
 8002d90:	08002fef 	.word	0x08002fef
 8002d94:	08002fef 	.word	0x08002fef
 8002d98:	08002fef 	.word	0x08002fef
 8002d9c:	08002fef 	.word	0x08002fef
 8002da0:	08002fef 	.word	0x08002fef
 8002da4:	08002fef 	.word	0x08002fef
 8002da8:	08002fef 	.word	0x08002fef
 8002dac:	08002de3 	.word	0x08002de3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002db0:	4b94      	ldr	r3, [pc, #592]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dbc:	4b91      	ldr	r3, [pc, #580]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	4a90      	ldr	r2, [pc, #576]	; (8003008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dce:	e111      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dd0:	4b8d      	ldr	r3, [pc, #564]	; (8003008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd2:	61bb      	str	r3, [r7, #24]
      break;
 8002dd4:	e10e      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dd8:	61bb      	str	r3, [r7, #24]
      break;
 8002dda:	e10b      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ddc:	4b8c      	ldr	r3, [pc, #560]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dde:	61bb      	str	r3, [r7, #24]
      break;
 8002de0:	e108      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002de2:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dec:	4b85      	ldr	r3, [pc, #532]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002df8:	4b82      	ldr	r3, [pc, #520]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e02:	4b80      	ldr	r3, [pc, #512]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	08db      	lsrs	r3, r3, #3
 8002e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80e1 	beq.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f000 8083 	beq.w	8002f34 <HAL_RCC_GetSysClockFreq+0x204>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	f200 80a1 	bhi.w	8002f78 <HAL_RCC_GetSysClockFreq+0x248>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x114>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d056      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e42:	e099      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e44:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02d      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	4a6b      	ldr	r2, [pc, #428]	; (8003008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002eaa:	e087      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003018 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ed2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eee:	e065      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800301c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f02:	4b40      	ldr	r3, [pc, #256]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f32:	e043      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f76:	e021      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f82:	eddf 6a26 	vldr	s13, [pc, #152]	; 800301c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	0a5b      	lsrs	r3, r3, #9
 8002fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe0:	ee17 3a90 	vmov	r3, s15
 8002fe4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff0:	61bb      	str	r3, [r7, #24]
      break;
 8002ff2:	bf00      	nop
  }

  return sysclockfreq;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	58024400 	.word	0x58024400
 8003008:	03d09000 	.word	0x03d09000
 800300c:	003d0900 	.word	0x003d0900
 8003010:	017d7840 	.word	0x017d7840
 8003014:	46000000 	.word	0x46000000
 8003018:	4c742400 	.word	0x4c742400
 800301c:	4a742400 	.word	0x4a742400
 8003020:	4bbebc20 	.word	0x4bbebc20

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4d0d      	ldr	r5, [pc, #52]	; (800305c <__libc_init_array+0x38>)
 8003028:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302a:	1b64      	subs	r4, r4, r5
 800302c:	10a4      	asrs	r4, r4, #2
 800302e:	2600      	movs	r6, #0
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	4d0b      	ldr	r5, [pc, #44]	; (8003064 <__libc_init_array+0x40>)
 8003036:	4c0c      	ldr	r4, [pc, #48]	; (8003068 <__libc_init_array+0x44>)
 8003038:	f000 f818 	bl	800306c <_init>
 800303c:	1b64      	subs	r4, r4, r5
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	2600      	movs	r6, #0
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	f855 3b04 	ldr.w	r3, [r5], #4
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	f855 3b04 	ldr.w	r3, [r5], #4
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	08003094 	.word	0x08003094
 8003060:	08003094 	.word	0x08003094
 8003064:	08003094 	.word	0x08003094
 8003068:	08003098 	.word	0x08003098

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
